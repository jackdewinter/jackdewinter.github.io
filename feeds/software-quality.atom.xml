<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack's Digital Workbench - Software Quality</title><link href="https://jackdewinter.github.io/" rel="alternate"></link><link href="https://jackdewinter.github.io/feeds/software-quality.atom.xml" rel="self"></link><id>https://jackdewinter.github.io/</id><updated>2022-08-15T00:00:00-07:00</updated><entry><title>Dealing With Long Standing Issues</title><link href="https://jackdewinter.github.io/2022/08/15/dealing-with-long-standing-issues/" rel="alternate"></link><published>2022-08-15T00:00:00-07:00</published><updated>2022-08-15T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-08-15:/2022/08/15/dealing-with-long-standing-issues/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/08/dealing-with-the-ups-and-downs/"&gt;last article&lt;/a&gt;, I talked
about how my personal life is encountering issues that I need to take
extra time to deal with. This week, I am talk about the continuing work on
the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project to get it
closer to a solid release.&lt;/p&gt;
&lt;h2 id="things-just-take-longer"&gt;Things Just Take Longer …&lt;/h2&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/08/dealing-with-the-ups-and-downs/"&gt;last article&lt;/a&gt;, I talked
about how my personal life is encountering issues that I need to take
extra time to deal with. This week, I am talk about the continuing work on
the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project to get it
closer to a solid release.&lt;/p&gt;
&lt;h2 id="things-just-take-longer"&gt;Things Just Take Longer&lt;a class="headerlink" href="#things-just-take-longer" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With all the easy items out of the way, the items that I do pick up seem to take
more time.  But when I think about that, it does make sense.  There is more
experimentation needed, more debugging needed, and often a lot more
thinking about the problem is needed.  And while I wish I could get through to
the finished stage without as much “experimental failure”, I know that it is part
of the process, and just comes with the territory.&lt;/p&gt;
&lt;h2 id="issue-419-empty-space-causes-failure"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/419"&gt;Issue 419&lt;/a&gt; - Empty Space Causes Failure&lt;a class="headerlink" href="#issue-419-empty-space-causes-failure" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Okay, maybe a better title would be helpful.  But honestly, it was hard to try and
summarize it into four words or less.  This was an issue that I found when I was doing
experimentation with the last batch of nested container tests.  Just for laughs,
I added an extra space after an empty list start (&lt;code&gt;1.&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; on its own line) expecting
everything to be fine.  It was not, hence, the issue.&lt;/p&gt;
&lt;p&gt;To start with, I was having a bit of an issue visualizing the code for handling leaf
nodes, which is what I originally thought the problem was.  To help myself, I decided
to split the paragraph handling functions out into their own module, since I have been
thinking about doing that for a while.  Did not help me solve the issue, but it was
another small thing off the list.&lt;/p&gt;
&lt;p&gt;After that I went back and forth between the list processor and the leaf processor,
trying to figure out where the issue was.  I spent a couple of hours
on one, document for myself what I found during those hours, and revert the changes for the next
day.  A couple of iterations into this, I found something interesting.  I had been
convinced that it was not the leaf processing of the paragraphs, but I was starting
to doubt that.  It was just the way the variables were changing that lead me to
double check my assumptions.  And behold, it was one slight change to the calling
of the &lt;code&gt;parser_state.close_open_blocks_fn&lt;/code&gt; function within the &lt;code&gt;__handle_paragraph_prep&lt;/code&gt;
function to set the &lt;code&gt;include_block_quotes&lt;/code&gt; parameter to &lt;code&gt;True&lt;/code&gt;.  And it worked.&lt;/p&gt;
&lt;p&gt;Hrm.  For those who may not be aware, when I do something I consider stupid, I say
something like “hrm” which is effectively me saying the word “hum” with my mouth
closed.  It is my way of asking myself “why did I not see that before?”
In this case, when I moved the paragraph code over, I did some checks to see if it
could be that code, and determined the answer was no.  Instead of including it
in the code paths that I reverified, I assumed it was good and left it out.
As I said at the start of the paragraph, hrm.&lt;/p&gt;
&lt;h2 id="issue-412-double-check-your-results"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/412"&gt;Issue 412&lt;/a&gt; - Double Check Your Results&lt;a class="headerlink" href="#issue-412-double-check-your-results" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having logged this issue while doing the previous work on the nested containers,
I had just filed this issue because I thought there may be a problem.  To be blunt,
during that work, I was happy to log issues that may be a problem after only
doing a small amount of work to prove them as probably broken.&lt;/p&gt;
&lt;p&gt;Specifically, this issue dealt with pairs of the nested container scenarios that
included dropping of container blocks for the next line.  During the debugging
phase, it looked like the tokens produced after dropping the outermost container
block on the next line were the same as for keeping the block in the Markdown.
It just looked weird, so I decided to save it for later when I could give it the
time that I thought it needed.&lt;/p&gt;
&lt;p&gt;I was probably deep in thought when I logged this issue, as the token streams
mentioned in the issue were in fact different.  The normal case had three
space characters in the paragraph token, and the drop case did not have those
characters, as I would have expected all along.  But, in fairness, I did log
this issue thinking that there may be an issue, and I wanted to check it.
Just to be sure, I spent time looking
at the code, verifying that result.  After I made assumptions with the last
issue, I did not want to repeat that!&lt;/p&gt;
&lt;h2 id="issue-301-clarifying-rule-for-md007"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/301"&gt;Issue 301&lt;/a&gt; - Clarifying Rule for MD007&lt;a class="headerlink" href="#issue-301-clarifying-rule-for-md007" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue was an interesting one in that I had to really dig into some areas of
the rule to make sure that I had made the right decision.  As the comments for this
issue show, the submitter thought that the Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Ordered&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Sub&lt;/span&gt; &lt;span class="n"&gt;unordered&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with a command line of &lt;code&gt;--set=plugins.md007.indent='$#4'&lt;/code&gt; should not trigger the rule
as it did:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test.md:7:5: MD007: Unordered list indentation [Expected: 4, Actual=5] (ul-indent)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To save readers the trouble of looking up the documentation for the rule, the indent
configuration informs rule Md007 that indents for unordered lists should occur every
4 characters.  And with an apparent indent of 5, it did not look right.  So,
to be honest, I agreed with him.  I have been looking at this issue on and off
since it was logged in February, but never really dedicated time to figuring it
out.  But I was never sure if it was correct or not.&lt;/p&gt;
&lt;p&gt;In taking a concentrated look at this issue, the first thing that I noticed was
that the tokens looked off.  Upon further examination, the parsing of the Markdown text
that exists before the above sample was not closing both lists, only the outermost
list.  As a result, the two lists started with the above sample were considered to
be a second and third level list, not a first and second level list.  Making some
changes to the &lt;code&gt;__close_next_level_of_lists&lt;/code&gt; function to properly close the lists
solved that issue, but did not solve the main question: was the triggered
error correct?&lt;/p&gt;
&lt;p&gt;After going outside and doing some yardwork, I came back inside with a nice cool
glass of water and started to look at the problem again.  Keeping in mind that
assumptions got me in trouble before, I decided to throw them all out and start
fresh.  It was then that I re-read the documentation for the rule and came across
the following text near the end:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The original rule did not work for Unordered List elements within Ordered List elements. For example, the original rule does not fire
on the following sample:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;along with a sample that includes a pair of unordered list elements within an
ordered list.  Perfect for this case!&lt;/p&gt;
&lt;p&gt;Digging into the code for the rule a bit more, the changes I made to support this
rule firing within an ordered list item became clear. If the new ordered
list item was contained in anything other than an ordered list, it reset the depth
to &lt;code&gt;0&lt;/code&gt;.  In the case of the above example, the rule considered the depth of
the unordered list item to be &lt;code&gt;0&lt;/code&gt;.  It took me a while to get there, but I agreed
that the rule was correct.  But how to change the documentation?&lt;/p&gt;
&lt;p&gt;To properly document this issue, I added that information to the documentation in
a new section named &lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/rules/rule_md007.md#notes"&gt;Notes&lt;/a&gt;.
I am probably going to go back and see if I can write a better description in a
while, but I think it is good enough for now.&lt;/p&gt;
&lt;h2 id="issue-441-support-for-stdin"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/441"&gt;Issue 441&lt;/a&gt; - Support For StdIn&lt;a class="headerlink" href="#issue-441-support-for-stdin" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the users reached out with &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/382"&gt;Issue 382&lt;/a&gt;,
asking if it would be possible to use the PyMarkdown linter on Markdown within a
Jupyter notebook.  Working with him, I was able to get the context that one of the
types of information within the notebook are simple Markdown cells that usually
contain notes or instructions for the reader of the notebook.&lt;/p&gt;
&lt;p&gt;To make a move in the direction of making that possible, I knew that the first thing
that I needed to do was to uncouple the linting engine from the file system.  At that
point, the PyMarkdown project only worked on existing text files with the correct
extension.  While I am not sure yet what the best way to support Jupyter notebooks
is, I do know that it will probably involve passing the cells into the linter
without writing a file.  Or at the very least, I want to have that option available.&lt;/p&gt;
&lt;p&gt;I started work on this on Sunday morning, and after working on that around other
things I needed to do, I came to startling conclusion: I loved the argparse library,
but I also hated it.  I had spent over four hours trying to get my way with the
library, with so many Google and Bing searches that I lost count.  It was frustrating
because I had the actual standard in handling written, I just needed to finish
the work on the command line.&lt;/p&gt;
&lt;p&gt;All I wanted to do was to have groups of options that were mutually exclusive from
each other.  Ideally, I wanted an &lt;code&gt;-s&lt;/code&gt; option to trigger the reading from standard
input, raising an error if any of the file-based options were specified.  From a
concept point of view, it was clear: if I was using &lt;code&gt;-s&lt;/code&gt; to read from standard input,
I did not need options like &lt;code&gt;-r&lt;/code&gt; to specify recursion through the directories.&lt;/p&gt;
&lt;p&gt;The implementation was another story.  I would like to think that I came close to
the answer a few times, but that is probably just my ego talking.  Using the
&lt;code&gt;argparse&lt;/code&gt; library, it is possible to specify that single options are mutually
exclusive, such as &lt;code&gt;-s&lt;/code&gt; and &lt;code&gt;-r&lt;/code&gt;.  However, that is as far as it goes.  I found,
through trial, error, and Google, that any kind of arguments groups do not nest.
As such, I could not tell it that &lt;code&gt;-s&lt;/code&gt; was mutually exclusive with a specified
group of arguments.&lt;/p&gt;
&lt;p&gt;While it was not my first pick, I decided to go with a subcommand for the argument
parsing implementation.  I do not think it is as elegant as my proposed solution,
but it works.  Instead of using the &lt;code&gt;scan&lt;/code&gt; command and its arguments, I created
a new subcommand &lt;code&gt;scan-stdin&lt;/code&gt; that had no arguments.  It seems a bit awkward from
my point of view, but it accomplishes the goals, which is the important part.&lt;/p&gt;
&lt;h2 id="thinking-about-the-notebook"&gt;Thinking About the Notebook&lt;a class="headerlink" href="#thinking-about-the-notebook" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am still thinking about how to do the notebook.  I am sure that I am going to
find a solution for the user, I am just not sure what it is yet.  I know that I
now have more options since I have added standard input support, but I will
be taking time this week to think through it properly and talk with the
user.&lt;/p&gt;
&lt;p&gt;It was frustrating at times, and I feel like I could have gotten more done, but
it is still a good feeling to knock some items off the list!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Plugging Away At The Issues</title><link href="https://jackdewinter.github.io/2022/07/25/plugging-away-at-the-issues/" rel="alternate"></link><published>2022-07-25T00:00:00-07:00</published><updated>2022-07-25T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-07-25:/2022/07/25/plugging-away-at-the-issues/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/18/confidence-one-bad-apple/"&gt;last article&lt;/a&gt;, I talked
about my struggles to regain my confidence, since my crash at the end of May.
This week, I got back to work and was able to deal with issues on
my &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It certainly has been a roller-coaster of a ride …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/18/confidence-one-bad-apple/"&gt;last article&lt;/a&gt;, I talked
about my struggles to regain my confidence, since my crash at the end of May.
This week, I got back to work and was able to deal with issues on
my &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It certainly has been a roller-coaster of a ride since my crash on my side projects
at the end of May.  By personal life has been great and my professional life has
been great.  And while I usually try my best to keep my side projects separate
from the rest of my life, I decided to borrow a bit of positivity over the last
couple of weeks to get me over the rough spot.  Luckily, it was with good results.&lt;/p&gt;
&lt;h2 id="easing-back-into-addressing-issues"&gt;Easing Back Into Addressing Issues&lt;a class="headerlink" href="#easing-back-into-addressing-issues" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the commit list for this article, I was initially a bit disappointed
that I have not done more to fix issues since the
&lt;a href="https://github.com/jackdewinter/pymarkdown/releases/tag/v0.9.7"&gt;version 0.9.7 release&lt;/a&gt;.
After all, it has been three weeks since that happened.  But as I sat back and
thought about things, it has been a productive few weeks.  Most of the
work has been about me trying to get back to where I was before, but that still
counts as work.&lt;/p&gt;
&lt;h2 id="more-testing-of-nested-blocks"&gt;More Testing Of Nested Blocks&lt;a class="headerlink" href="#more-testing-of-nested-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One easy thing that I did was to go through the tests in the
&lt;a href="https://github.com/jackdewinter/pymarkdown/tree/main/test/nested_three"&gt;nested_three directory&lt;/a&gt;
and split them out into two separate files.  Initially, I did not think the collection
of scenarios would grow to be so large, but it did.  Splitting each of those files
in half helped a bit, which was good enough for a while.  At the very least,
it was easier to find things when I was looking for samples by nesting types instead
of specific scenarios.&lt;/p&gt;
&lt;p&gt;Looking at a series of tests to get cleaned up, I started working on
the Block/Block/Ordered tests, otherwise known as the tests in the
&lt;code&gt;test_markdown_nested_three_block_block_ordered.py&lt;/code&gt; file.  Looking at the
size of that file, it took me less than five seconds to think about splitting that
file into the &lt;code&gt;test_markdown_nested_three_block_block_ordered_max.py&lt;/code&gt; file and
the &lt;code&gt;test_markdown_nested_three_block_block_ordered_nomax.py&lt;/code&gt; file.  That decision
was an easy decision.&lt;/p&gt;
&lt;h2 id="issue-408-cleaning-up-tests"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/408"&gt;Issue 408&lt;/a&gt; - Cleaning Up Tests&lt;a class="headerlink" href="#issue-408-cleaning-up-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given those files, I worked through and validated every test and filed clear issues
for the things that needed to be fixed.  That also was an easy decision.  While the commit
just shows the file being split into two, there was a lot of work that went on to get there.
I went through and plugged each of the Markdown inputs into the CommonMark parser, ensuring
that the produced HTML output in the tests were correct.  Visually, I checked to
see if the tokens looked correct, especially noting down a few instances where I thought
the tokenization was off a bit.  While the main part of the tokens were all fine,
I was looking for issues with the recorded whitespace.  There were some
surprises, so I noted them down, and moved on.&lt;/p&gt;
&lt;h2 id="issue-413-filling-out-the-scenarios"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/413"&gt;Issue 413&lt;/a&gt; - Filling Out The Scenarios&lt;a class="headerlink" href="#issue-413-filling-out-the-scenarios" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue is where a lot of the initial time was spent on this block of work.
During the cleanup noted above, I noticed that there were a couple of experimental
tests that were failing.  Nothing major, but enough to cause me concern. Both
scenarios involved the line following either the main list start or a new list
item, and a line with not enough indent to meet the list constraints.  As an
example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, line 3 starts a new list that is contained within a single block
quote.  The following line keeps the block quote active (starts are by
indent count, not column number), but does not have any indentation to keep the
list going.  Thankfully, line 4 is treated as a paragraph continuation of the
“paragraph” started on line 3, and the list item and the ordered list are both
closed after line 4.&lt;/p&gt;
&lt;p&gt;I cannot remember exactly which one of these situations forced me to look at
these combinations, but it was enough to put some work in to find out the
health of these scenarios.  For the example above, since I was dropping the
indent to the level of the list item, I added &lt;code&gt;_drop_ordered&lt;/code&gt; to the test
function name.  The function with the suffix &lt;code&gt;_drop_ordered_block&lt;/code&gt; took back
the indents to the visual level of the block quote character and the
function with the suffix &lt;code&gt;_drop_ordered_block_block&lt;/code&gt; removed all indentation.&lt;/p&gt;
&lt;p&gt;After adding 185 tests, all the combinations were covered and only seven
tests in those 185 were marked as skipped.  It was exhausting, but I had
a complete picture of how things looked with dropping of the indentation.
Part of that was due to some work I did along the way. Those issues
were simple enough that I thought it was best to fix them as I went.&lt;/p&gt;
&lt;h3 id="empty-lists-and-nested-blocks"&gt;Empty Lists And Nested Blocks&lt;a class="headerlink" href="#empty-lists-and-nested-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first of the two issues that I found and fixed dealt with an empty
list item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example might look simple, but there was an issue.  If there is text at the end
of line 1, then the text in line 2 becomes part of a paragraph continuation.  Because
that text is not present, the paragraph continuation does not take effect, leaving
the text &lt;code&gt;item&lt;/code&gt; to be part of a paragraph outside of the list.  At least, that is
what was supposed to be parsed.  Due to the benefits from the increase logging
that I mentioned a couple of weeks ago, I was able to diagnose this issue rather
quickly, making a change to the &lt;code&gt;__calculate_current_indent_level&lt;/code&gt; function to
properly shut down the list before the text &lt;code&gt;item&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="we-all-start-together"&gt;We All Start Together&lt;a class="headerlink" href="#we-all-start-together" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The second issue was a rather tricky issue with two block quotes and an ordered
list all starting on the same line.  While the tokens were being parsed correctly,
the recombining code from the verification was off.  Doing a bit of legwork, I
was able to come up with a way to detect the bad whitespace and account for it.&lt;/p&gt;
&lt;p&gt;To be honest, the whitespace issue is a bit of a tricky issue for me.  The fact
that I must adjust my recombining code to account for weird situations does
not sit well with my values.  If possible, I want there to be clear
guidelines on how the whitespace gets put back together.  If I have those guidelines,
I can document them and explain them anyone who wants to write plugin rules.
Right now, I approach that, but especially when it comes to containers, I fall
short of that goal.&lt;/p&gt;
&lt;p&gt;But for me, that is a slippery slope.  Based on a quick scan though the
&lt;code&gt;transform_to_markdown.py&lt;/code&gt; module, I would guess that approximately 1500 lines of
the 2500 lines are dedicated to handling containers and their special cases.
Some of that code is necessary, and some of that code is hacks to deal with
improper tokenization.  However, if all the special cases only deal with whitespace
and not the rest of the content of the rehydrated Markdown, I am somewhat okay
with that.  Sure, I would like to remove it, but I am not sure if the benefit is
there to justify the cost.  At least, not yet.&lt;/p&gt;
&lt;h2 id="issue-410-cleaning-up-whitespace"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/410"&gt;Issue 410&lt;/a&gt; - Cleaning Up Whitespace&lt;a class="headerlink" href="#issue-410-cleaning-up-whitespace" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I was able to fix a couple of instances of whitespace issues, there were
other instances where I knew I was going to need more than fifteen minutes to
diagnose the failures and fix it.  With seven tests to address, it took a bit
of time to find the first case, and luckily enough, the rest of the cases were
all variations of the first.&lt;/p&gt;
&lt;p&gt;In all cases, the parser was applying the leading space, resulting in twice the
whitespace appearing in the rehydrated Markdown.  They all tracked down to one
of two scenarios.  The first was that the leading space was being stored in the
list token, but the internal variable representing the line was not being updated
to account for that.  Without that updating, the parser saw the whitespace and
rightfully added it to the text.  The other scenario was that the string was fine,
but the index pointing into the string was not properly adjusted.  Different cause,
but same effect.&lt;/p&gt;
&lt;h2 id="issue-420-and-issue-421-revisiting-old-friends"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/420"&gt;Issue 420&lt;/a&gt; and &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/421"&gt;Issue 421&lt;/a&gt; - Revisiting Old Friends&lt;a class="headerlink" href="#issue-420-and-issue-421-revisiting-old-friends" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After going through those fixes, I looked at the other scenario tests that were
currently disabled and ran through them to see if they were fixed or easy to
fix.  The first one I addressed was test &lt;code&gt;test_list_blocks_271a&lt;/code&gt;, followed by
tests &lt;code&gt;test_list_blocks_271c&lt;/code&gt;, &lt;code&gt;test_list_blocks_270c&lt;/code&gt;, and &lt;code&gt;test_list_blocks_270a&lt;/code&gt;.
While these tests were not at once fixed by the previous work, they looked
like they were close enough that it made sense to fix them.&lt;/p&gt;
&lt;p&gt;Following good practices, I went through each of the tokens by hand and verified
that they were correct, or at least looked correct.  After doing silly things
such as counting the number of &lt;code&gt;&amp;gt;&lt;/code&gt; characters in the whitespace area of the tokens,
everything looked good.  Looking at the debugging from the Markdown rehydration,
it looked okay as well, but something was off.&lt;/p&gt;
&lt;p&gt;It took me about an hour of work, with futzing on a project outside and
grabbing some food, before I figured it out.  In certain cases,
when the container text was being added back into the Markdown, the index into
container token whitespace was off.  And that little discrepancy was just enough
to point to the wrong whitespace part, which in return added the wrong whitespace
to the rehydrated token.&lt;/p&gt;
&lt;h2 id="issue-407-adding-alternate-extensions"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/407"&gt;Issue 407&lt;/a&gt; - Adding Alternate Extensions&lt;a class="headerlink" href="#issue-407-adding-alternate-extensions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking over the work to do in the issues list, I reviewed each issue and
came across this request from a user.  In his case, due to a preprocessing need,
the Markdown he wants to scan is in a file that has a different extension that
&lt;code&gt;.md&lt;/code&gt;.  As such, he asked if it would be possible to support alternate extensions
to scan.&lt;/p&gt;
&lt;p&gt;I do remember thinking “why doesn’t he just change the extension, scan, and then
change it back?”  I also remember me following up that thought with “I don’t think
I would do that unless I REALLY had to.”  As such, I started working on supplying
support for alternate extensions.  It is currently in the main code base with
the &lt;code&gt;--alternate-extensions&lt;/code&gt; argument, and I hope to get some time next week to
properly document it for the next release.  It is just a simple argument that takes
a comma-separated list of extensions, with a default of &lt;code&gt;.md&lt;/code&gt;.  It was easy to
write, easy to test, and hopefully the user will like it.&lt;/p&gt;
&lt;h2 id="despise-my-earlier-opinion"&gt;Despise My Earlier Opinion&lt;a class="headerlink" href="#despise-my-earlier-opinion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Despite what I had through previously, I believe I did have a good couple of
weeks fixing issue.  It was not glamorous and exciting, but there was a lot of
good, solid work.&lt;/p&gt;
&lt;p&gt;The one thing that I want to call out are the changes I made to the Container
Block Processor and the grab bag object.  When I added support for that object
in a couple of weeks ago, I was not sure how much difference it would make.
I had hoped it would make a significant difference, but I was not sure.&lt;/p&gt;
&lt;p&gt;I am now sure.  Instead of having to add debug statements to keep track
of variable state, it was all there in the log file.  It is a small amount of
work to look back in the log file to see what the last value is.  But that amount
of work is nothing compared to adding in a log statement, making sure it has the
right information, and running the tests again to see what the value is.  In my
opinion, it was just an order of magnitude better.&lt;/p&gt;
&lt;h2 id="a-final-note"&gt;A Final Note&lt;a class="headerlink" href="#a-final-note" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it is true that I do the work on these projects and these articles, it is
a group of people that help me in many ways that enable me to do these things.
I have known for 51 years a certain guy who, despite our issues in our first twenty
years, has stuck by me and I by him.  We have been through some rough patches
together, but I know I can just send an email, a text, or a phone call, and
he will listen with a wisdom that I would have never guessed at.  Yup, I am talking
about my brother, Mike.&lt;/p&gt;
&lt;p&gt;I am proud to say that I am going to be spending time with that gentleman and
his fiancé this weekend, as they tie the know and make it official.  And as
Mike is family and a dear friend who I have not seen since this pandemic
thing started, my wife and I are going to take some time to enjoy the socialization.
Best wishes to Mike, and I will be back in a couple of weeks! Stay Tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Are Scenario Tests Worth It?</title><link href="https://jackdewinter.github.io/2022/07/12/are-scenario-tests-worth-it/" rel="alternate"></link><published>2022-07-12T00:00:00-07:00</published><updated>2022-07-12T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-07-12:/2022/07/12/are-scenario-tests-worth-it/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/05/when-are-grab-bags-okay-in-software/"&gt;last article&lt;/a&gt;, I talked
about the refactoring work I did in the previous week.  This week, I talk about
my progress on adding scenario tests for the nested container scenarios.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I am doing any action that is even remotely technical, I think about three
things …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/05/when-are-grab-bags-okay-in-software/"&gt;last article&lt;/a&gt;, I talked
about the refactoring work I did in the previous week.  This week, I talk about
my progress on adding scenario tests for the nested container scenarios.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I am doing any action that is even remotely technical, I think about three
things in quick unison.  What is the cost of doing that action?  What is the benefit
of doing that action?  What are the risks of doing that action?&lt;/p&gt;
&lt;p&gt;Having had those questions drilled into my brain for years, they form the basis of what
is known as Risk-Cost-Benefit Analysis.  A quick search with any search engine
turns up multiple hits for articles on the subject, with more hits for the simplified
Cost-Benefit Analysis.&lt;/p&gt;
&lt;p&gt;As a Software Development Engineer in Test, one of my primary
tasks is to do these analyses and use automation to mitigate the risks where possible.
Therefore, it should not be a surprise that when I am working on my own projects,
these questions are ones that I ask myself.  Especially after my efforts during
the last week, I believe having a satisfactory answer to those questions regarding the addition
of more scenario tests to
the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="what-are-scenario-tests"&gt;What Are Scenario Tests?&lt;a class="headerlink" href="#what-are-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While there are many &lt;a href="https://en.wikipedia.org/wiki/Scenario_testing"&gt;definitions&lt;/a&gt; of
what scenario tests are, the simplest answer is the one that I give to people that ask
about my work.&lt;/p&gt;
&lt;p&gt;User stories are a set of actions where I walk through the
actions that a specific user would do to accomplish a given goal.  A good example of
a user story is “Fred the manager logs on to the web site and requests an activity
report for their direct reports.”  That user story is good because it contains
useful information on the user and what they want to accomplish.&lt;/p&gt;
&lt;p&gt;From a project level, user stories are great.  They communicate the intent and goal of
a set of actions that are typical of that user.  But those same stories lack enough
specificity for a software developer to act on.  That is where scenarios
come in.  A scenario is a constrained action that accomplishes a specific goal.
My general rule is that a good scenario usually avoids the word “and” where
possible.  Therefore, breaking down the user story from above, I include scenarios
such as “The user logs on to the website,”
“Manager requests information on direct reports,” and “Manager requests activity
report”.  Each one of these scenarios is integral to the user story, but together
they spell out how the application solves for those user stories.&lt;/p&gt;
&lt;p&gt;From there, the jump from a scenario to a scenario test is a simple one.
A scenario test is just a test that clearly focuses on that one scenario. If
possible, interactions with any other scenarios are removed and the focus is
solely on that one scenario.  The success and usefulness of any scenario test is related
to what kind of scenarios it covers and how frequently it needs modification
for unrelated changes.  If it is focused enough on the scenario, those modifications
are usually minimal.&lt;/p&gt;
&lt;h2 id="why-are-they-important-to-the-project"&gt;Why Are They Important To The Project?&lt;a class="headerlink" href="#why-are-they-important-to-the-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In a web application or a desktop application, the generation of scenarios
deals more with the user interacting with the application than the various parts
of the application itself.  The basis for that assumption is that those application
are primarily created to interact with the end user to provide a desired result.
Therefore, it is that interaction that is central to the scenarios that will make
that application a success.&lt;/p&gt;
&lt;p&gt;For backend applications such as the PyMarkdown project, the focus is still on
the user interaction.  However, that user interaction takes place using files or
payloads to be parsed or actioned upon.
Accordingly, the focus in placed on the input that is presented to that application
on behalf of the user.  For the PyMarkdown project, that input is in the form
of Markdown files which have a clearly defined specification that must be adhered
to.&lt;/p&gt;
&lt;p&gt;The PyMarkdown Linter is a linting rules engine based on top of a
&lt;a href="https://github.github.com/gfm/"&gt;Github Flavored Markdown&lt;/a&gt; compliant parser.  The
starting point for the scenario tests was the specification itself.  However, since
the specification focuses on HTML output and the parser focuses on Markdown itself,
I felt that expanding the testing effort to include other Markdown inputs was
warranted.  As each different input is a slightly unique way to “phrase” the
Markdown document, I felt that associating each input with a scenario and a scenario
test was appropriate.&lt;/p&gt;
&lt;p&gt;And while I would love for there to be no issues at all with the PyMarkdown
project, I am still finding scenario test failures that I need to deal with.&lt;/p&gt;
&lt;h2 id="the-work"&gt;The Work&lt;a class="headerlink" href="#the-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When it comes those scenario test failures, I have three buckets
that I file those failures into.  The first
bucket is that the application aborts, either from an &lt;code&gt;assert&lt;/code&gt; statement or any
other exception that is thrown.  This bucket is a high priority as it will stop
the application from processing anything else in the document.  That, and it also
looks bad to the end user.  The second bucket is for parsing errors that result
in an incorrect Markdown token stream being generated.  These errors are caught
when generating HTML from
the tokens as a double-check.  This bucket is a medium priority because it looks
bad and feels bad since these are very visible to the end-user but are typically
low impact.  Finally, the third bucket is reserved for whitespace errors
that affect the tokens themselves, but only in a minor way.  The tests catch these
errors when generating the original Markdown from the Markdown tokens.  This
bucket is low priority because while there are rules that are dependent on
whitespace in tokens, there are only a handful of them.&lt;/p&gt;
&lt;p&gt;Getting back to my work on the project, I started adding a new set of scenario tests
to the project.  After four or five days of work, I had 224 new scenario tests
implemented and committed, with only nine tests failing.  Compared to the work
I did in the spring where I had over fifty tests failing, I was happy with
only having to fix nine tests in two groups.  Honestly, there is a third group that
I need to look at more closely, but I will get to double checking those results
after I deal with the first two groups.&lt;/p&gt;
&lt;p&gt;The good news?  Only two of the failing tests were due to parsing errors, the rest
all dealt with whitespace errors.  I found no crashing scenarios and
only a couple of parsing scenarios, with less than ten whitespace scenarios to
fix.  That was a good result.&lt;/p&gt;
&lt;p&gt;But should I fix them?  That is the question that I started to ask myself.&lt;/p&gt;
&lt;h2 id="the-risk"&gt;The Risk&lt;a class="headerlink" href="#the-risk" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Of all three questions, this was the easiest one for me to answer.  The risk of
not having a test for a given scenario is that a user decides not to use the project
for their needs.  However, that risk is balanced out by the frequency of a given
scenario failing in normal use.&lt;/p&gt;
&lt;p&gt;Applying those metrics to these scenarios, I would like to reduce the risk if
possible. But nothing that I found made me feel like I had to stop all work and
fix those scenarios right now.  If I make steady work to mitigate the
risk of all three-level nested container scenarios, I am good.  I would feel
better if I had diversity in the scenarios that I am missing, and I need
to be able to factor that into my risk analysis. More on that later.&lt;/p&gt;
&lt;h2 id="the-cost"&gt;The Cost&lt;a class="headerlink" href="#the-cost" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The next question for me to answer was the cost.  Based on my experience of adding
those 224 new scenario tests, I know that it will take me approximately 11 or 12
hours to complete.  That time is not wall-clock time, but active task time.  That
time does not consider any breaks that I take to do work around the house
or to relax between sets of scenario tests.  That time is spent following
a recipe that I determined beforehand.  For this latest group of scenario tests,
which meant taking each existing scenario test and creating three (or four) additional
tests where any indentation for the containers was removed on the last line of
the Markdown.&lt;/p&gt;
&lt;p&gt;Another part of the cost is the mental fatigue and boredom.  The task is not
suited for automation, meaning the generation of the scenarios must be done manually.
For this past week, which meant taking over seventy existing scenario tests and performing
that transformation on each test.  That also meant verifying the HTML output against
the canonical &lt;code&gt;commonmark.js&lt;/code&gt; parser and fixing any typing errors as I went.  It
was boring, but it needed to be done.&lt;/p&gt;
&lt;p&gt;There is also the cost of not adding other scenario tests or addressing other issues.
Often referred to as &lt;a href="https://www.investopedia.com/terms/o/opportunitycost.asp"&gt;opportunity cost&lt;/a&gt;,
there may be other issues that I could be working on that would solidify the application
more.  That one is harder to quantify, so I keep it in mind as a bit of a tiebreaker.&lt;/p&gt;
&lt;h2 id="the-benefit"&gt;The Benefit&lt;a class="headerlink" href="#the-benefit" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The final question that I need to answer is about the benefit of adding more
scenario coverage.  For me personally, this is more difficult for me to gauge.
When I am using a tool like this, I expect three major things to be in place:
a decent application, a decent issues process, and a decently responsive application
team.  I do not expect applications to be perfect, but the application needs to
show me that the team cares and is being honest with what they believe they can
accomplish.  An “everything working fine” solution that is filled with issues is
a big turn off.  However, the same application with a “we are working to get this
to a better application” sign is perfectly acceptable.  For me, it is all about
setting reasonable expectations.&lt;/p&gt;
&lt;p&gt;I have a decent issues process in place and try and be responsive
to any users to file issues.  Based on that opinion, I hope I am okay with not
worrying about disappointing any users in that way.  Therefore, focusing on the
application and its expectations, I am also in decent shape there.  I
believe I have decent documentation and a nice section near the top of the main
page reading:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id="note"&gt;Note&lt;a class="headerlink" href="#note" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This project is currently in beta, and some of these documented things may not work 100% as advertised until after the final release. However, everything should be close enough to done that if you find something missing, please let us know.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I do know that users have asked for improvements and pointed out issues that
they have asked to be fixed, so I have confidence that I am setting the expectations
with my users correctly.&lt;/p&gt;
&lt;p&gt;That leaves the determination of value of the benefit in my court.
I will have to think about that some more.&lt;/p&gt;
&lt;h2 id="the-result"&gt;The Result&lt;a class="headerlink" href="#the-result" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To summarize, from a risk point of view, the amount of risk associated
with hitting significant issues in the remaining “nested three container” scenarios is
medium-to-low.  From a cost point of view, I am confident that adding another
one of the “nested three container” scenario groups is going to take approximately
12 hours to complete, task time.  I am also aware that I am going to get bored with
that process, and that I am going to have to take extra breaks to make sure I stay
on top of my game.  And with the benefit, I am not sure what I am going to land
on that but working through this exercise has helped me out a bit.&lt;/p&gt;
&lt;p&gt;I know that there are more than thirty issues in the old issues list, with some more
urgent issues in the current issues list. As issues in the current issues list are
suggestions from users, I feel that any user issues must have a higher priority
than the ones I entered.  From that point of view, there is an opportunity cost
that I am paying in not getting those issues dealt with.  I just do not know how
to weigh any interest in those issues.&lt;/p&gt;
&lt;p&gt;To balance that out, I also feel that addressing three groups of scenarios in the
“nested three container” scenarios group would help me reduce my estimated risk
from medium-to-low to low.  The first group of these scenarios revolves around
the whitespace before list items.  For example, does this Markdown parse
correctly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those scenarios, an add-on to the work that I just completed, would increase my
confidence that I have the list item support working properly in the parser. The
other two groups of scenarios are variations on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For me, replicating my recent work (with the addition of the above group) on those
two sets of scenarios would give me confidence that I have addressed the highest
risk scenarios.&lt;/p&gt;
&lt;p&gt;For me, reducing the risk that I have missed something is worth the benefit,
if I can respond to user requests.  I think.&lt;/p&gt;
&lt;h2 id="and-that-means"&gt;And That Means…&lt;a class="headerlink" href="#and-that-means" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So given all that hand-waving… I am going to think about this for a week or
two as I try to fix the issues that came up during the last week.  That will
allow me to make progress that I know will bring the project benefit while
giving me some more time to figure out how I feel about the above decision.&lt;/p&gt;
&lt;p&gt;There is lots of work to do, and I do not have any pressure to
make a speedy decision, just a good decision.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>When Are Grab Bags Okay in Software?</title><link href="https://jackdewinter.github.io/2022/07/05/when-are-grab-bags-okay-in-software/" rel="alternate"></link><published>2022-07-05T00:00:00-07:00</published><updated>2022-07-05T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-07-05:/2022/07/05/when-are-grab-bags-okay-in-software/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/06/28/getting-back-to-business/"&gt;last article&lt;/a&gt;, I talked about how
I was getting back to work on my project after taking a few weeks to recover from
a crash.  In this article, I talk about the refactoring work I did in the last
week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During my recovery phase from my …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/06/28/getting-back-to-business/"&gt;last article&lt;/a&gt;, I talked about how
I was getting back to work on my project after taking a few weeks to recover from
a crash.  In this article, I talk about the refactoring work I did in the last
week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During my recovery phase from my crash, I decided to do some low-cost
refactoring of the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
And while the refactoring was easy to do, it did make me think about the
way in which I was refactoring the class.&lt;/p&gt;
&lt;h2 id="but-first-an-aside"&gt;But First, An Aside&lt;a class="headerlink" href="#but-first-an-aside" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Any avid readers of these articles will notice that I am writing this and posting
this on a Tuesday.  I was a victim of “National Scare The Crap Out Of
Your Pets” Day.  For any Canadian readers, Happy Canada Day and for any American
readers, Happy Independence Day.  That means one thing: a lot
of partying and a lot of fireworks.&lt;/p&gt;
&lt;p&gt;From a pet owner’s point of view, it was just an exceptionally long weekend.  Our dog Bruce
is a lovable doofus, but he fears loud noises.  By the time Sunday rolled
around, people in our neighborhood were already starting to set off fireworks.
That meant that Bruce was unsettled and looking for the places in our house
with good sound proofing.  That either meant our master bathroom shower (with
the bathroom fan running of course) or in the basement with the door closed.
On Sunday night, Bruce hid in those locations when he could, but on Monday night,
hiding in one of those two locations was a necessity.&lt;/p&gt;
&lt;p&gt;Why do I mention this?  Because to a certain extent, I was doing the same
thing as Bruce.  My office is a wonderful place for working, but not a good place for
blocking out outside noise.  On most days, I can play my music and it covers
most of the outside noise. But the past Sunday night and Monday night were not
about normal outside
noise.  Even with my music turned up, I was still hearing the fireworks that were
going off outside.  Combining that with my Autism meant that I was losing focus
every time a firework went off outside.&lt;/p&gt;
&lt;p&gt;And while I am a bit tired from last night (see the earlier mention of Bruce
being anxious about the noise), it is peacefully quiet outside.  Birds chirping,
the odd car driving by the house, and no fireworks.  That means, I found my
space to write this week’s article.  Sorry for the delay!&lt;/p&gt;
&lt;h2 id="simple-refactoring-is-not-always-simple"&gt;Simple Refactoring Is Not Always Simple&lt;a class="headerlink" href="#simple-refactoring-is-not-always-simple" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now, back to the focus of this article: grab bags.  I am not sure what
the actual name of these objects are, but I have always heard them referred
to as grab bags.  In a physical sense, a grab bag or a go bag is a short
form for a grab-and-go bag.  These grab-and-go bags are actual bags, usually
a large purse or a backpack, that disaster preparers keep ready for emergencies.
The general idea is that with one of these bags, a person has enough of their
basic needs met to keep them going through at least 72 hours of an emergency.&lt;/p&gt;
&lt;h3 id="back-to-basics"&gt;Back To Basics&lt;a class="headerlink" href="#back-to-basics" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From my years of experience, one of the development paradigms that I find useful
is the object-oriented development paradigm.  Without going too far into
the explanation of what &lt;a href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;object-oriented development (OOP)&lt;/a&gt;
is, one of the underlying facets of this type of programming is that common
elements are grouped together in objects, those objects usually being referred
to as classes.  Therefore, an object that deals with a position on a map
should be represented by a class with either two or three
numeric values specifying a relative location.  If dealing with other concerns
about that object are required, then OOP allows for a new class to be created
with those concerns, inheriting the base elements from the original class.&lt;/p&gt;
&lt;p&gt;What does this look like?  Using a simple Python data class, the original
class would look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyPosition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x_location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;y_location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;z_location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using inheritance, if I want to add extra concerns to that class, such
as a name, we can create a new class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyNamedPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyPosition&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here I am using the &lt;code&gt;@dataclass&lt;/code&gt; modifier to simplify things, but if I write it
out in long form, the same rules still apply.  The class &lt;code&gt;MyNamedPosition&lt;/code&gt; contains
four properties, three from the &lt;code&gt;MyPosition&lt;/code&gt; class and one that it generates itself.&lt;/p&gt;
&lt;p&gt;The important thing here is that there is cohesion between the data elements and
the functions that use them.  When I look at either of those two classes, the
collection or data elements I see in each class is a cohesive group that work
together.  This is enough of a grounded concept that there is an existing
metric called &lt;a href="https://www.aivosto.com/project/help/pm-oo-cohesion.html#:~:text=Cohesion%20metrics%20measure%20how%20well%20the%20methods%20of,be%20restructured%20into%20two%20or%20more%20smaller%20classes."&gt;Lack of Cohesion of Methods&lt;/a&gt;
that is documented at the above link.  At that site, one of the recommendations
for objects that have low cohesion is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Low cohesion indicates inappropriate design and high complexity. It has also been found to indicate a high likelihood of errors. The class should probably be split into two or more smaller classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And for the most part, I sincerely agree with their arguments and try
and keep my classes cohesive, with a single responsibility if possible.&lt;/p&gt;
&lt;h3 id="enter-the-container-block-processor-and-the-grab-bag"&gt;Enter The Container Block Processor and the Grab Bag&lt;a class="headerlink" href="#enter-the-container-block-processor-and-the-grab-bag" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In trying to simplify and refactor the &lt;code&gt;ContainerBlockProcessor&lt;/code&gt; class, I was faced
with an interesting dilemma.  While there are a handful of variables used by
the class that can be grouped together, most of the variables denote a distinct action
that was undertaken or a distinct measurement that was performed.  As such, any attempt
on my part to clean up the arguments being passed between functions would
result in almost as many new classes as there were existing common arguments.&lt;/p&gt;
&lt;p&gt;As someone who believes in using Best Common Practices, I believe
that the &lt;a href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;Single Responsibility Principle&lt;/a&gt;
and Object-Oriented Development are solid ways of creating and refactoring code.
I did not like all the arguments being passed between the various functions
in the class, but I could not find enough common responsibility between the
variables to have a manageable number of classes that I could pass around
instead of those arguments.&lt;/p&gt;
&lt;p&gt;Enter the programming grab bag.  In the physical world, a grab bag is a bag
that can be grabbed that holds a mix of things that are probably not related,
except for them being needed in an emergency.  In the development world, the
normal practice of maintaining a single responsibility for the class and cohesion
within that class is suspended in favor of having one location for all variable
related to the parent class.  In this case, I created the &lt;code&gt;ContainerGrabBag&lt;/code&gt; class
to hold the various variables I collected from the arguments of the functions
of the &lt;code&gt;ContainerBlockProcessor&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;This decision was somewhat dangerous from a maintenance point for one simple
reason: multiple responsibilities and low cohesion means that understanding
the flow of the parent object is going to be more difficult than it should be.
However, since I was starting with arguments that were being passed up and down
the function chain, I decided that the grab bag approach was going to be the
better approach.  To further enhance the maintainability of the grab bag,
I made sure to log initial states and every change of state of any of the elements
within the grab bag.  I figured out that while I cannot reduce the count of
elements in the grab bag, I can improve maintainability by clearly noting
when any of the states change.&lt;/p&gt;
&lt;p&gt;But when I sat back and thought about it, the refactoring was needed.
Based on my development principles, I would not have taken this route from
the start, as I believed that I could find simple responsibilities that
I could factor out from the arguments.  I had that belief right up until
the point when I decided that using a grab bag was the only way to
solve the issue.  In the end, it was a calculated move that one class with
many variables and logging of any changes in those variables would be
more maintainable than passing arguments around.&lt;/p&gt;
&lt;h3 id="the-refactoring-took-many-weeks"&gt;The Refactoring Took Many Weeks&lt;a class="headerlink" href="#the-refactoring-took-many-weeks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Even factoring in my recover over the last few weeks, this type of refactoring
takes a long time.  Adding the new variable to the &lt;code&gt;ContainerGrabBag&lt;/code&gt; class was easy.
That part of the refactoring took less than five minutes.  I then had to
scan for that variable throughout the &lt;code&gt;ContainerBlockProcessor&lt;/code&gt; class and
figure out whether each reference was referring to the “global” variable being
passed around, or if it was a special case.  Most of the extracted variables
just referred to the “global” variable, but the ones that did not caused me
enough concern that I took things slowly.&lt;/p&gt;
&lt;p&gt;Slowly meant making a small set of changes, executing &lt;code&gt;ptest -m&lt;/code&gt; to execute
the scenario tests, and then waiting
for those tests to complete.  If everything was fine, it was on to the next change
in the search results.  If not, I had to go back and figure out why the change
failed and adjust for those results.  Guessing the amount of time taken
for each iteration of that loop, I would say it averaged about 3-4 minutes
between the successes and failures.  Multiple that time by the number of
variables in the &lt;code&gt;ContainerGrabBag&lt;/code&gt; class and the number of times that they
occurred in the original &lt;code&gt;ContainerBlockProcessor&lt;/code&gt; class, and that is a
substantial duration of time.  If I had to guess, that duration
would be days, not hours.&lt;/p&gt;
&lt;p&gt;Once that was all cleaned up, the other parts of the refactoring were less
time consuming.  Since any state change was being logged as part of the
&lt;code&gt;ContainerGrabBag&lt;/code&gt; class, removing any lines that were in the original
class to trace values was a simple operation.  Then, going through the
search results for the transferred object, I was able to quickly isolate
arguments and return values that were no longer needed now that the
value was in the grab bag.  I usually cleaned up two or three functions
at once, so the overhead of executing the scenario tests was not too
expensive.&lt;/p&gt;
&lt;p&gt;Finally, I was left with two sets of operations of the variable that
I was working on: those that did actual work and those that were setting
the variable to its default value.  While that distinction may appear
to be a simple calculation, it was not always like that.  In cases where
the variable was set in multiple locations, I had to comment out that
set statement and verify that it was indeed setting the variable to the
same value.  And yes, that meant another set of scenario test runs.&lt;/p&gt;
&lt;h3 id="what-is-the-end-result"&gt;What Is The End Result?&lt;a class="headerlink" href="#what-is-the-end-result" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Based on a couple of attempts at debugging a couple of minor issues,
I can verify that the newly reworked code is indeed easier to maintain.
While I know distinct objects would be easier for me to model in my head
while debugging, the logging of any state change to the log file helps
mitigate that negative.  It is a somewhat weird balance that I need to get
used to, but I am getting used to it.  Instead of keeping that
information in my head, I am getting used to checking the previous lines
in the logs to figure out when the states changes and what they changed
to.&lt;/p&gt;
&lt;p&gt;It is an ongoing process, and it is working better, which is what my primary goal was.
From that point of view, even an incremental improvement is a success.&lt;/p&gt;
&lt;h2 id="release-097"&gt;Release 0.9.7&lt;a class="headerlink" href="#release-097" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the refactoring of the Container Block Processor class completed, I looked
at the project history and realized that it had been over three months since
I created a new release.  While a month of that was covered by the crash and
recovering from the crash, I had completed cleaning up the remaining scenarios
for the nested container scenarios that I had added back in the February-March
period.  As such, I thought it was long time that I created a release.&lt;/p&gt;
&lt;p&gt;There was not anything fancy added in the release, but for me it was important
to release a more stable version of the project.  I still have two more classes
of scenarios to cover, but I was proud to have eradicated all the issues that
I had found to this point.  I also have faith that the remaining issues that
I have found through random testing will be covered by the next groups of
test scenarios that I will add.&lt;/p&gt;
&lt;h2 id="how-am-i-feeling"&gt;How Am I Feeling?&lt;a class="headerlink" href="#how-am-i-feeling" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be blunt… almost back to normal.  One of the things that my crash illustrated
for me is that I need work more diligently on a good balance in my life.  Without
that balance, I know it is only a matter of time before I get into another situation
like the one that caused my crash.  I need to feel okay about stepping away from
my projects for a bit to clear my head.&lt;/p&gt;
&lt;p&gt;But on the other side, I also need to make sure I am not taking too much time
away from them either.  I enjoy working on my projects, and they do require a
certain level of focus to maintain my interest in them.  After taking some time
off, I am finding that it is more difficult to find that balance between
too much project time and too little project time… with the focus on the too
little side.&lt;/p&gt;
&lt;p&gt;But other than that, I am feeling better physically and mentally, and I
did enjoy spending time working on the projects this weekend.  Well,
before the fireworks started going off that is!&lt;/p&gt;</content><category term="Software Quality"></category><category term="grab bags"></category></entry><entry><title>Markdown Linter - Shifting Left</title><link href="https://jackdewinter.github.io/2022/05/17/markdown-linter-shifting-left/" rel="alternate"></link><published>2022-05-17T00:00:00-07:00</published><updated>2022-05-17T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-05-17:/2022/05/17/markdown-linter-shifting-left/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/"&gt;last article&lt;/a&gt;, I
talked about working on some of my projects to get their code coverage up to
100% and why I felt that the effort was important.  In this article, I focus
more on the work I have been doing in the background on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/"&gt;last article&lt;/a&gt;, I
talked about working on some of my projects to get their code coverage up to
100% and why I felt that the effort was important.  In this article, I focus
more on the work I have been doing in the background on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, I have been doing work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project in the background.  I may not be visible, but it is going on.  It was not
until this week that I have something concrete to show for that work.  And since
not having something to talk about on my flagship project caused me concern,
I thought I would devote an article to the reason for that delay: debugging.&lt;/p&gt;
&lt;h2 id="shift-left"&gt;Shift Left&lt;a class="headerlink" href="#shift-left" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During my recent round of interviews, one of the concepts that I talked about was
shifting the debugging process left as much as possible using automated
testing.  As an SDET (Software Development Engineer in Test), a large part of my
job is to provide solid automated tests that can be executed within a continuous
integration pipeline.  Shortened to “shift left”, this form of thinking strives
to get any kind of test failure as close to the development of the code being tested
as possible.  And yes, that does include trying to find things at the architecture
and design phases if possible.&lt;/p&gt;
&lt;h3 id="what-do-you-mean-left"&gt;What Do You Mean “Left”?&lt;a class="headerlink" href="#what-do-you-mean-left" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let me start with the “left” part of that phrase.  In most development processes,
whether it is explicit or not, there is a workflow that happens from ideation to
release.  In more formal environments, these steps are usually something like
ideation/requirements, architecture, design, vetting the design prior to implementation,
implementation, unit and functional testing, peer review, integration and end-to-end
testing, and
release.  In less formal environments, these steps are still there, just compressed
into fewer steps with some steps “missing” or “implied.  While each of those individual
steps is deserving of an article of its own,
the important thing that I want to communicate is that flow from “an idea” to
“a released thing”.&lt;/p&gt;
&lt;p&gt;Technically speaking, once the bug fix or feature has been released, there may
be added iterations of that workflow.  These iterations can be done to tighten
up misunderstood requirements but are most often performed to address bugs in the
design or implementation.  It might be tempting to think of that new workflow
as part of the original workflow, I believe there are clear reasons that the workflow
is separate.  As that is probably enough content for a separate article, please
take my word on that belief for now.&lt;/p&gt;
&lt;p&gt;Given those foundations, it should be easy to see that the further left in the workflow
that a team gets, the more cost accumulates from the previous steps.  Before the
implementation step, most likely everything has been done with some form of project
lifecycle management system, be it something like the popular &lt;a href="https://www.atlassian.com/software/jira"&gt;Jira&lt;/a&gt;,
using a whiteboard, or writing things down on paper. The implementation and first
testing step introduce code provided by a developer, increasing the cost by a
sizable amount.  Peer review adds to that by bringing the cost of having multiple
developers spend time looking at the changed code, as well as any requested changes
that they ask for to be implemented.  The second level of testing, integration and
end-to-end testing, adds another cost multiplier as those types of tests are
more fragile automated tests because of their distance from the implemented code.
Finally, the release step
adds another multiplier of cost as any issues that are reported once a change is
released must go through yet another team of people to report any issues with
those changes, prioritize those issues, and create new workflows to address any
prioritized issues.&lt;/p&gt;
&lt;p&gt;As someone who has done a lot over thirty years of development in his career, please believe me.
The further an issue makes it into that workflow, the more costly it is.
When I say “costly”, those multipliers are usually between three times multipliers and
10 times multipliers.  And that is if the team is lucky.&lt;/p&gt;
&lt;h3 id="so-where-does-the-left-come-in"&gt;So Where Does the Left Come In?&lt;a class="headerlink" href="#so-where-does-the-left-come-in" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given that information about the traditional development workflow, there is a simple
directionality to it.  Writing that information on a whiteboard, I would simply
create a simple line with dots on the line representing the various points in the
workflow.  At each point, I would annotate the point with one of the names
associated with the workflow.  Given that perspective, the workflow has a simplified
flow from the left of the line to the right of the line.&lt;/p&gt;
&lt;p&gt;Therefore, when I am talking about “Shift Left”, I am talking about trying to detect
issues in a project as early on in the project as possible.  While this may seem like
a “duh” moment to some people, having issues creep to the left is a quite common
occurrence on development teams.
As a developer, I want my code to get out there and be used.  As a developer, I want
to do something interesting, not the same old thing repeatedly.  And as a
developer, I have felt pressure from above to get one thing done and to more on to
the next thing on my plate.&lt;/p&gt;
&lt;p&gt;However, about 12 years ago when I was a developer, I realized I was more concerned
about the quality of what my team was producing than the velocity with which my
team was producing.
I was more concerned with taking extra time to ensure that the requirements were
correct before moving forward with implementing them.  And automated testing? Back
then I faced a lot of pushbacks for adding too many tests to a project, as those
tests were believed to be unwieldy and hard to support.&lt;/p&gt;
&lt;p&gt;But my justifications for wanting to do those tests were solid.  Based on my experience
and my reading of peer articles, others in the industry had started to see things
in a similar light.  More importantly, they were starting to talk about it in more
clear terms than I could manage at the time.  For those of us who “saw the light”,
it came down to a simple bit of calculus. Either a team can impose a small overheard to
take care of those issues before they escape OR that team can pay a cost for
those issues later.  A team can call those issues “tech debt” or anything
else they want to, but they are misses for the team just the same.&lt;/p&gt;
&lt;p&gt;And those misses are costly and can be demoralizing.  The cost part of any miss is easy
one to calculate.  Instead of incurring a small cost to find and solve the issue
before it escapes the team’s view, one or more distinct workflows must be spun up to
address that issue.  In terms of human cost, one workflow is that people were needed
to report the issue and people were needed to confirm that it is an issue.  Another
workflow was then needed to triage the issue to figure out if it has a high enough
priority to fix.  And those two workflows are needed before the team needs to create
a new workflow to fix the issue.  In financial costs, each person in those workflows
has a salary.  Paying a team to fix issues means that the team cannot be working on
improvements to the project. There is the cost for them contributing to one or more
workflows, and there is the cost of not having those people working on new work.
Simple math.&lt;/p&gt;
&lt;p&gt;As to the demoralizing aspect, that aspect is one that I have seen quite often.
I have been in meetings where teams have been told of the issues related to their
project. Most teams try not to assign blame, but it does happen. There are often
questions raised as to
how the team missed finding that issue.  If I had a dollar for each time in my
career that I have heard “How did we miss that?” in a meeting, I would be able to
buy my wife a fancy seafood dinner with an expensive bottle of wine.  And
when the team gets such a backlog of issues that they must dedicate an entire
block of work to dealing with those issues?  Let me just say that I can usually
sense a drop in the energy level in the room without much effort when the manager
says, “we are going to need a bug fixing sprint.”&lt;/p&gt;
&lt;h3 id="shift-left-is-about-paying-the-right-cost-at-the-earliest-time"&gt;Shift Left Is About Paying The Right Cost At The Earliest Time&lt;a class="headerlink" href="#shift-left-is-about-paying-the-right-cost-at-the-earliest-time" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;“Shifting Left” is about dealing with these issues as efficiently as possible.
To get a project to be better,
the proper investments need to be made as far to the left in the workflow as possible.
Problems with architecture and design?  Make sure the requirements are solid and
the architects and designers understand those requirements, with a solid understanding
of the tools and choices at their disposal.  Problems with poor implementations?
Make sure the developers understand the requirements and designs and supply guidelines
for them to follow to prove that they have met those goals.  Problems with changes
to implementations creating new issues?  Make sure that there are solid integration
tests that are independent from the developer-created tests.&lt;/p&gt;
&lt;p&gt;Will these catch everything?  Not even a chance.  However, when I have seen practices
like this implemented, it has always made a sizable impact in the quality of the
project.  And truthfully, any decent reduction in the cost of a change is usually
worth it.  It is just about paying the right cost as the earliest
time possible.  Noticing a requirement seems off before coding starts?  It can
be a five-minute conversation, or it may evolve into a meeting with a small group.
But avoiding the act of properly reading that requirement until one or more integration
tests expose that issue?  That cost will definitely exceed the cost of that small
group meeting.&lt;/p&gt;
&lt;p&gt;And the other part of that is simple. As a developer, I always wanted to write decent
quality code, because the person maintaining that code was most likely going to be
me.&lt;/p&gt;
&lt;h2 id="shift-left-on-pymarkdown"&gt;Shift Left on PyMarkdown&lt;a class="headerlink" href="#shift-left-on-pymarkdown" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;How does this all apply to the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project?&lt;/p&gt;
&lt;p&gt;While I try as hard as possible to catch everything up front during the implementation
phase, things do slip through.  As of this Sunday morning, I have 4530 scenario tests
that are executed for each change.  Of those tests, 36 are skipped with 12 of those
skips being for placeholder implementations of extensions.  That leaves 24 scenario
tests for issues that slipped through the cracks. According to my math, which means
that over 99.4% of the scenario tests are passing.  Not a bad number, but I still
would like it to be better.&lt;/p&gt;
&lt;p&gt;And to be clear, that count of 4530 scenario tests are not just the test scenarios
provided by the &lt;a href="https://github.github.com/gfm/"&gt;Github Flavored Markdown&lt;/a&gt; specification,
but every scenario test I have been able to create.  That includes the 673 scenarios
presented in the GFM specification, but also stresses the complications that arise
from container elements.  If I had to guess, I would say that at least half of the
current scenario tests are tests specifically for the handling of container elements.&lt;/p&gt;
&lt;p&gt;But that percentage of passing tests is a deliberate focus of mine to “Shift Left”
on this and other projects.  While it can often lead me to be frustrated with a new
feature or change not working properly in all cases, I sincerely believe that this
is the right approach.  As I find a single issue at any point in the process, I
look and see if it is an isolated issue or part of a bigger issue.  If it is part
of a bigger issue, I try and identify related scenarios in the “area” of that issue
and add more scenario tests.&lt;/p&gt;
&lt;p&gt;If possible, I do this when I am adding something new, but I am not always
that lucky.  But from where I sit, I am still trying to push it to the left.  I am
not waiting around for a user to complain that it is not working properly, I am
actively investing my time to prove to myself that the project is working properly.
Sure, some of the scenario tests are probably never going to get hit by users,
but those tests are still important. Each one of those tests is a path that may
not have been covered before.&lt;/p&gt;
&lt;p&gt;What it comes down to me is the answer to a simple question: What amount of confidence
do I have that the project is working properly?  My simple answer is: yes! I have
thrown everything I can think of against it and can prove that.  And if I miss
something, I am graceful in that I know I cannot think of everything and use that
new information to build better tests.&lt;/p&gt;
&lt;p&gt;For me, shifting left just helps me get that confidence as efficiently as possible.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having recently been able to squash an issue that impacted three scenario tests,
I compiled a brief list of other tests to revisit.  I am not sure if I will be able
to find their solutions, but at least I feel momentum in that direction.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>PyLint Utilities - Reaching For High Code Coverage</title><link href="https://jackdewinter.github.io/2022/05/02/pylint-utilities-reaching-for-high-code-coverage/" rel="alternate"></link><published>2022-05-02T00:00:00-07:00</published><updated>2022-05-02T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-05-02:/2022/05/02/pylint-utilities-reaching-for-high-code-coverage/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/"&gt;last article&lt;/a&gt;, I
talked about the first
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; plugin that I created
as part of my
&lt;a href="https://github.com/jackdewinter/pylint_utils"&gt;PyLint Utilities&lt;/a&gt; project.
In this article, I talk about the changes that I incorporated into both projects
to get their code coverage percentages up to 100%.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From past articles …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/"&gt;last article&lt;/a&gt;, I
talked about the first
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; plugin that I created
as part of my
&lt;a href="https://github.com/jackdewinter/pylint_utils"&gt;PyLint Utilities&lt;/a&gt; project.
In this article, I talk about the changes that I incorporated into both projects
to get their code coverage percentages up to 100%.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From past articles, longtime readers will understand that I view quality and
the metrics that help me understand that quality on a sliding scale.  One of the most
basic and useful metrics that use is tracking the code coverage of tests that are in place
for the components being tested.  To be clear, I agree with  people that argue that
code coverage is not the be all and end all of quality.  But I also argue
very confidently that it is not a metric to be easily dismissed.&lt;/p&gt;
&lt;p&gt;Code coverage does not measure if a project is working properly. It
measures whether each line of code has been executed at least once.  A project can
have 100% code coverage and still fail to meet its criteria for a project that
meets its intended goal.
From my point of view, which is where scenario tests come in.  And whether those
tests are a complete picture of how the team envisions the project being used is
a trickier thing to measure.  That is why many teams, for each piece of work,
construct individual
&lt;a href="https://www.leadingagile.com/2014/09/acceptance-criteria/"&gt;acceptance criteria&lt;/a&gt;
or maintain collections of rules called
&lt;a href="https://www.leadingagile.com/2017/02/definition-of-done/"&gt;Definition of Done&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To be honest, I have not seen any automated way to review either of these.  As a
professional, I can create scenario tests that exercise these two concepts with
respect to what I am testing.  But those scenario tests need human review
to determine if they are doing what they are supposed to.  But by combining the
exactness of code coverage with the observable scenario tests, I believe it is
possible to get a product that is well-tested and that does what it is supposed
to do.&lt;/p&gt;
&lt;p&gt;And most of the time, getting there is half the fun.&lt;/p&gt;
&lt;h2 id="slight-adjustments-to-project-summarizer"&gt;Slight Adjustments to Project Summarizer&lt;a class="headerlink" href="#slight-adjustments-to-project-summarizer" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To start off, before I made these adjustments to deal with this new plugin, I had
confidence that the scenario tests were testing the right things and I knew that
the code coverage was at one hundred percent.  From my viewpoint, it was a well tested
project that was doing what I needed it to do.  And it meant that I wanted to
keep those confidence levels where they were going forward.&lt;/p&gt;
&lt;p&gt;Cue the hard work!&lt;/p&gt;
&lt;h3 id="nice-side-effect-finding-a-setup-issue"&gt;Nice Side Effect - Finding A Setup Issue&lt;a class="headerlink" href="#nice-side-effect-finding-a-setup-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the start of testing the new plugin, I ran into an issue right away: I
could not execute the Project Summarizer from its package.  I tried executing it
locally, and there were no problems, but when I looked in the local package that
I was using, some of the files were missing.&lt;/p&gt;
&lt;p&gt;After a bit of work, I found myself looking at these lines in the &lt;code&gt;setup.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PACKAGE_MODULES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"project_summarizer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the uploaded package, everything was fine.  I knew something changed.
Examining the contents of the new package more closely, I noticed that only the
files that I refactored into their own directories were missing.  Given that observation,
I tried this change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PACKAGE_MODULES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"project_summarizer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"project_summarizer.plugin_manager"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"project_summarizer.plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And was greeted with success!  I was able to execute the Project Summarizer project
without any issues.  Talk about a bit of a testing hole that I need to address in
the future!&lt;/p&gt;
&lt;h3 id="debugging-the-dictionary-issue"&gt;Debugging The Dictionary Issue&lt;a class="headerlink" href="#debugging-the-dictionary-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One command line argument that I have in other projects that I had not added to this
project was the &lt;code&gt;--stack-trace&lt;/code&gt; argument.  It is a simple argument that instructs
the error handling to also print out a stack trace.  It is not useful in everyday
use, but when I need a stack trace of a failure, it is invaluable.&lt;/p&gt;
&lt;p&gt;And this was the case with the new plugin and the &lt;code&gt;save_summary_file&lt;/code&gt; function.
When the exception occurred, it was reporting that it was having issues dealing
with generating a report, but nothing more specific.  That was by intentional and by design.
When things fail, I do not want any users getting cryptic error
messages that confuse them.  As such, I keep the error messages as generic and
easy to read as possible.&lt;/p&gt;
&lt;p&gt;But in this case, I needed to debug the issue and I just wanted something simple.
Remembering that I have the &lt;code&gt;--stack-trace&lt;/code&gt; argument in other projects, I quickly
added it to the Project Summarizer project, where it immediately pointed out that
the issue was with the &lt;code&gt;save_summary_file&lt;/code&gt; and that it was passed a dictionary
object to save.  As the object to save was already a dictionary, calling &lt;code&gt;to_dict&lt;/code&gt;
on it was causing the error.  A quick fix and some added tests, and that issue was
cleared up.&lt;/p&gt;
&lt;p&gt;While I hope to not need that argument again, I now know it is there in case
I need it for future debugging sessions.&lt;/p&gt;
&lt;h3 id="easy-is-not-always-easy"&gt;Easy Is Not Always Easy&lt;a class="headerlink" href="#easy-is-not-always-easy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I designed the plugin architecture, I wanted something that was simple and
easy to use.  I did not anticipate any large manipulation of
data within the plugins: they were supposed to summarize data that was already
present.&lt;/p&gt;
&lt;p&gt;But then when I started testing the PyLint_Utils plugin, I
hit a snag.  The current design allowed each plugin to format the data
and print it out in its own format.  Since I want to keep things simple, I coded
all three implemented plugins to use the &lt;code&gt;columnar&lt;/code&gt; package to format the data.
I did not have any issues with this approach for the first two plugins, so I
did not anticipate any issues using it again for the PyLint_Utils plugin. Until it
failed.  It was able to load
the plugin module but failed to load the &lt;code&gt;columnar&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;I researched this for two nights before determining that it was likely
not possible to do.  What I mean by that is that it may be possible, but after two
nights and five hours of research and experimentation, I was not able to find it.
I needed a Plan B.  Seeing as I figured out that every plugin was going to be
using some manner of package for outputting the summary… I cheated.  While
there are other columnizers out there, I already have &lt;code&gt;columnar&lt;/code&gt; installed for
the base package.  As such, I just changed the interface to the &lt;code&gt;generate_report&lt;/code&gt;
function.  If a tuple is returned, it is used as the three primary parameters
for &lt;code&gt;columnar&lt;/code&gt;: justification, title, and rows.  Problem solved.  Not pretty,
but problem solved.&lt;/p&gt;
&lt;h2 id="switching-to-pylint_utilities"&gt;Switching To PyLint_Utilities&lt;a class="headerlink" href="#switching-to-pylint_utilities" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With those issues dealt with, the Project Summarizer project was back at
100% code coverage and all relevant scenario tests were in place.  So, it was time to
get back to the thing that initiated those changed, the PyLint_Utils project.
It turns out that more then half of the changes I needed to execute the PyLint_Utils
project were in the Project Summarizer, so I thought I was home free.&lt;/p&gt;
&lt;p&gt;And then I got down to improving the code coverage.&lt;/p&gt;
&lt;h3 id="there-is-only-so-much-you-can-cover-normally"&gt;There Is Only So Much You Can Cover Normally&lt;a class="headerlink" href="#there-is-only-so-much-you-can-cover-normally" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First off, I want to stress that I am a bit of a fanatic about scenario test coverage
and code coverage.  If it is a normal application, I have a general rule that it
should have at least 75% code coverage, scenario tests for all “good” paths, and
scenario tests for any “bad” paths that a team feels will be hit a fair amount.
And yes, “a fair amount” is a judgement call.&lt;/p&gt;
&lt;p&gt;The good paths are an easy goal for me to
justify. If everything goes properly, you know that users will hit those paths.  The bad
paths are a bit more nuanced.  From my viewpoint, I start with this question: what
are the things that I would mess up or have messed up when using the application?
Things like missing parameters and bad or wrong file names are easy targets.  I mess
those up all the time.  That is usually a good starting point for error-related or
“bad” pieces of the project to include.&lt;/p&gt;
&lt;p&gt;From there, the cost of covering the paths start going uphill very quickly. And for
each path, it comes down to the question of whether the cost of covering that “bad”
path is enough of a benefit to warrant the cost involved.  And the cost can be
varied.&lt;/p&gt;
&lt;h3 id="hiding-things-in-plain-sight"&gt;Hiding Things In Plain Sight&lt;a class="headerlink" href="#hiding-things-in-plain-sight" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing that I do to determine cost is to try and see if I can do something
simple to write
a new scenario test without too many changes.  Can I change the file from a JSON file to a
non-JSON file or a directory to set off error handling?  Can I use two parameters
together and make sure they do not conflict?  Is there an existing path that I
can leverage?&lt;/p&gt;
&lt;p&gt;But sometimes, I must be sneaky.  Take this “hidden” parameter that I
have in the PyLint_Utils project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"--x-display"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"x_test_display"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUPPRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That parameter is not visible using &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt;, but if you use it in a normal
command line, the application will not complain.  How is that? The &lt;code&gt;argparse.SUPPRESS&lt;/code&gt;
suppresses that argument from being shown.&lt;/p&gt;
&lt;p&gt;So why take this approach?  In this case, that flag sets off this logic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__display_progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isatty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x_test_display&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__verbose_mode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have no control over what &lt;code&gt;sys.stdout.isatty()&lt;/code&gt; returns, at least not yet.  As
such, this is a simple and easy to read way to alter the results of that function.&lt;/p&gt;
&lt;h3 id="what-about-mocks"&gt;What About Mocks?&lt;a class="headerlink" href="#what-about-mocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is where the &lt;code&gt;not yet&lt;/code&gt; from the previous paragraph kick in.&lt;/p&gt;
&lt;p&gt;From my experience, mocks are most useful when you want to test something that has
many moving pieces to it.  To use the equation, I postulated a couple of sections
ago, is the cost of making the change worth the benefit of that change?&lt;/p&gt;
&lt;p&gt;For me, the answer to that question is heavily based on experience.  The benefit
of that equation is the easy part to define.  Either using some other method or
completing the block will properly test part of the code.  The cost is much
more difficult to define.&lt;/p&gt;
&lt;p&gt;A good example of this difficulty is the &lt;code&gt;PatchBuiltinOpen&lt;/code&gt; class that I use for mocking file
open calls, located &lt;a href="https://github.com/jackdewinter/pyscan/blob/master/test/patch_builtin_open.py"&gt;here&lt;/a&gt;.
I have used this for testing various smaller Python projects for almost as long as I have
been working in Python, and I find this object really good at getting into tight
places for code coverage.  This mock class patches the built-in &lt;code&gt;open&lt;/code&gt; call for
files and provides the &lt;code&gt;register_text_content&lt;/code&gt; function and the &lt;code&gt;register_exception&lt;/code&gt;
function to control what gets controlled.  If the filename passed to those functions
matches the argument for the &lt;code&gt;open&lt;/code&gt; function, one of those two behaviors is returned.
If not, the mock object needs to carefully un-patch itself, call the original function,
and then patch itself again.&lt;/p&gt;
&lt;p&gt;Even without looking at the source code for the &lt;code&gt;PatchBuiltinOpen&lt;/code&gt; class, it is obvious
that the function has a significant amount of code to accomplish those tasks.  Why?
Because it takes a sizeable number of sentences to describe what it does.  And then
there is the invocation of this behavior.  To mock an &lt;code&gt;open&lt;/code&gt; function call that is
buried within the code called from the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;execute_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;supplied_arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this is the code required:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pbo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PatchBuiltinOpen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pbo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;test_file_to_scan_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"wt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception_message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock_exception_message&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pbo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;execute_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;supplied_arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pbo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not simple.  This is a sledgehammer.  Granted, a nice sledgehammer that
has been well used, well-polished, and carefully taken care of, but it is a
sledgehammer.  And in my experience, code sledgehammers increase cost.&lt;/p&gt;
&lt;h3 id="but-sometimes-there-are-no-other-options"&gt;But Sometimes There Are No Other Options&lt;a class="headerlink" href="#but-sometimes-there-are-no-other-options" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having taken care of the majority of the code coverage for the project, I was left with
a small amount of code to cover.  This code was code that was enacted after the
&lt;code&gt;subprocess.Popen&lt;/code&gt; function is called when PyLint_Utils calls PyLint itself.
In terms of benefit, it was the only handful of lines that were not covered.
In terms of cost, the only option was to mock out the function call.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;PatchSubprocessPopen&lt;/code&gt; was the result.  Copying the bulk of the functionality
from the &lt;code&gt;PatchBuiltinOpen&lt;/code&gt; class, I was able to save a lot of time.  Another
thing that kept the cost down was that as of right now, I only needed the mock
object to be specifically for this one scenario test.  As such, I was able to
tailor it very specifically for the tests in which it was used.&lt;/p&gt;
&lt;p&gt;But even then, it was a headache to get right.  I had to make sure I read each
variable from the &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt; parameters properly, translating them
into values I could use.  As &lt;code&gt;POpen&lt;/code&gt; can be called multiple times, I had to
make sure I had a passthrough in there.  And debugging it was not the best
experience I had.&lt;/p&gt;
&lt;p&gt;But in the end, to get from over 99.5% to 100% was worth it to me.  I was
able to get more experience with mock objects in Python, and I was able to
close the gap in code coverage.&lt;/p&gt;
&lt;p&gt;For me, it was worth it.  But it was costly.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What Is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that bulk of work wrapped up, I am hoping to get some time back on
the PyMarkdown project in the next week.  Here is hoping for that!
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="pylint_utils"></category></entry><entry><title>PyLint Utilities - A Long Time Coming</title><link href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/" rel="alternate"></link><published>2022-04-25T00:00:00-07:00</published><updated>2022-04-25T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-04-25:/2022/04/25/pylint-utilities-a-long-time-coming/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/18/project-summarizer-filling-out-plugin-support/"&gt;last article&lt;/a&gt;, I
talked about taking my plugin work on the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
project to its logical conclusion by adding proper plugin support to the project.
In this article, I talk about the first external plugin: PyLint Utilities.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe that most software development professionals have …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/18/project-summarizer-filling-out-plugin-support/"&gt;last article&lt;/a&gt;, I
talked about taking my plugin work on the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
project to its logical conclusion by adding proper plugin support to the project.
In this article, I talk about the first external plugin: PyLint Utilities.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe that most software development professionals have little packages of
utilities that they use personally.  Be it something simple to set up their
environment consistently or a more complex utility to handle something that
is either bothersome or error prone.  We have all got fed up with having to do
repeat something repeatedly.  And once it hits a certain threshold in
our brain, we decide to write something to deal with it.&lt;/p&gt;
&lt;p&gt;Most of the time, those utilities never seen public consumption.  I mean, they
are OUR utilities.  But sometimes, as with my
&lt;a href="https://github.com/jackdewinter/pylint_utils"&gt;PyLint Utilities&lt;/a&gt;
project, they get to a point where we want to clean them up and share them.
This is one of the utilities that I want to share.&lt;/p&gt;
&lt;h2 id="why-a-long-time-coming"&gt;Why A Long Time Coming?&lt;a class="headerlink" href="#why-a-long-time-coming" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, the easy answer to that question is that I have been working on the
&lt;a href="https://github.com/jackdewinter/pylint_utils"&gt;PyLint Utilities&lt;/a&gt;
project for at least the last four months.  According to the commit logs
for the project, it was 2021 Nov 26 when I added the first commit to the project.
Following that, I did work over the Christmas holidays to start padding it
out.  But I have been using it in various forms during that time to help guide
me on how things are going with my projects, especially on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;Between the start of the year and April, I made small modifications to the
various utilities, tuning them and making them work better.  Nothing significant,
just minor changes to make them work better under various conditions.  It was
when I sat back and looked at the collection of utilities as a whole did I realize
that I had an application which had utilities that might be useful to others.  It was
only then that added the necessary project files and scenario tests to bring the
project up to a releasable level.&lt;/p&gt;
&lt;p&gt;Up to that point, it essentially was just a place for me to “doodle with code”
to try and address some issues that I was trying to solve.  It meant a bit of
a mindset change on how I looked at the project, but after a couple of weeks,
I was okay with it.  It just felt weird taking a proof-of-concept (what I
would refer to as a “code doodle”) and releasing it as a project.  I am getting
used to it though.&lt;/p&gt;
&lt;h2 id="so-what-are-those-utilities"&gt;So What Are Those Utilities?&lt;a class="headerlink" href="#so-what-are-those-utilities" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be honest, this project started out as a bit of a toy application that helped me with
my PyLint suppressions.  Each one of the concerns that I had was addressed with
one of the utilities that I added.  I did not consider any of the utilities
noteworthy on their own, but they were still useful to me.&lt;/p&gt;
&lt;h3 id="balanced-suppressions"&gt;Balanced Suppressions&lt;a class="headerlink" href="#balanced-suppressions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I measure quality in a project on a sliding scale.  I have no problem with warnings
of any quality analysis being suppressed if there is some accounting for
those suppressions within a project.  I am not talking about the rare 2-4
suppressions that I typically do in a project where the code coverage mechanism
does not cover something that I know is covered.  Those are what I would consider to
be a “cost of doing business”.  These are unique to the project warnings that are
actual warning signals, not warning noise.&lt;/p&gt;
&lt;p&gt;To that extent, I believe that each suppression should be added to the code with
the smallest scope possible.  If I am not excluding that suppression throughout
the entire project in configuration files, that I feel that I should be expected
to present a focused suppression around where that warning occurs.  Otherwise,
I feel that I am doing myself and the project a disservice.&lt;/p&gt;
&lt;p&gt;And I am particularly good with following that policy around 95% of the time.  However,
I acknowledge that
I am not perfect.  There are times that I have disabled a warning on line 50 of
a 900+ line Python file, only to forget to enable it again on line 90 when the
function was finished.  There are times where I have copied and pasted an enable
suppression line to the start of a function, only to wonder why it is still showing
up when I run PyLint, because I am 100% positive that when I read &lt;code&gt;enabled&lt;/code&gt;, it
said &lt;code&gt;disabled&lt;/code&gt;. Yup… I hope I am not alone in making those mistakes.  As an old
college professor once reminded us “sometimes you cannot see the forest because you
are too busy looking at the trees.”&lt;/p&gt;
&lt;p&gt;To account for myself making those mistakes, the first utility that I added was for
balanced suppressions.
The rules are simple.  Except for &lt;code&gt;too-many-lines&lt;/code&gt;, any &lt;code&gt;disable&lt;/code&gt; must be followed
by an &lt;code&gt;enable&lt;/code&gt;.  Disabling something that is already disabled is not allowed, as
well as enabling something that is already enabled.  And yes, I have done each of
those before, at least five times each… this month.  The utility simple loads up
each Python file, parses for suppression lines, and looks for regions that do not
follow those rules.  If any mismatch is found, an error is reported.  Simple.&lt;/p&gt;
&lt;p&gt;Now, I do realize that this kind of utility might seem silly to other developers,
but for me it is about my confidence in my work.  After I run that utility, I am
confident that my suppressions are properly balanced.  No guesswork involved.
To me, that confidence is worth a bit of code and investment.&lt;/p&gt;
&lt;h3 id="generating-reports"&gt;Generating Reports&lt;a class="headerlink" href="#generating-reports" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With that utility completed, the next utility that I added was to report on the suppressions
that exist in the code.  As I measure quality on a sliding scale, it was important
for me to know where I stood with PyLint suppressions in my various projects.  To
be clear, I do not believe there is any concrete “thou must have” or “thou must not”
have rules in a code base.  My thoughts are that “should have” things increase the
quality and “should not have” things decrease the quality.  As such, keeping track
of the suppressions in the project helps me track where any suppression is on
that scale.&lt;/p&gt;
&lt;p&gt;This utility was simple to write, especially after my work in the previous
utility to make verify that each set of suppressions are balanced.  It ended up
being a few lines of code added to the tracking of each &lt;code&gt;disabled&lt;/code&gt; suppression
in the code, keeping a running total of how many times the utility encountered each
suppression and where that suppression was encountered.  After that, it was just
throwing the data into a JSON object and writing the file somewhere.&lt;/p&gt;
&lt;p&gt;An example of that report file for the &lt;code&gt;PyLint_Utils&lt;/code&gt; project itself is currently
as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"disables-by-file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/__init__.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/__main__.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/file_scanner.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/main.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"broad-except"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"too-many-arguments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"too-many-locals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/pylint_comment_scanner.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/simple_logging.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/version.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;"disables-by-name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"broad-except"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"too-many-arguments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"too-many-locals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use this report as more of a sanity check than a guide to refactoring.
The JSON object that I write includes a &lt;code&gt;disables-by-file&lt;/code&gt; section as well as
a &lt;code&gt;disables-by-name&lt;/code&gt; section.  If something looks weird in the &lt;code&gt;disables-by-name&lt;/code&gt;
section, I can quickly look to see where the modules that use that section
are and look at each one individually.  From there, it is a judgement call on
my part as to whether I should refactor.&lt;/p&gt;
&lt;p&gt;The benefit of this utility to me is in having that information presented to me
in a clear format that informs on my judgement calls. And removing some of the
guesswork from that judgement call is a win in my books.&lt;/p&gt;
&lt;h3 id="finding-unused-suppressions"&gt;Finding Unused Suppressions&lt;a class="headerlink" href="#finding-unused-suppressions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the interesting utility for me.  When I do decide to take those steps to
refactor a function, I want to have something simple to tell me if I have
mitigated the need for a suppression.  From experience, even if there is another
reason for the refactoring, it typically will include a desire to reduce some
manner of suppressions.  And while I can run PyLint again and not see the warning,
PyLint does not tell me if a suppression already in the code base is no longer
needed.&lt;/p&gt;
&lt;p&gt;Logically following that, I ended up writing something simple to rescan files with individual suppressions
disabled. It is a bit terse, but it works.  The utility simply takes that file,
rewrites it without a given pair of suppression statements, and verifies that
the warning is still emitted.  If it is not emitted, then the suppression is no
longer needed.&lt;/p&gt;
&lt;p&gt;And for any readers of this blog, the benefit of that to me should be obvious.
I love keeping my code clean!&lt;/p&gt;
&lt;h2 id="why-talk-about-it-now"&gt;Why Talk About It Now?&lt;a class="headerlink" href="#why-talk-about-it-now" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given that information about the utilities I created, I noticed one thing about how
I was using those utilities: I was using them to track PyLint suppressions and
keep my usage of those suppression in check.
Specifically, it occurred to me that since I am tracking the number of tests and
code coverage for those tests, it just made sense to me to track the PyLint suppressions
in an equivalent manner.&lt;/p&gt;
&lt;p&gt;To roll things back a bit, let me start at the beginning.
Collecting information about the tests that were run and their execution states
was an easy decision for me.  By using the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project,
I can make sure to keep track of how many tests are in place and if any of them
are failing.  While I have always made sure all new tests and old tests were passing
before committing code, test-driven development allows for committing failing tests
that get enabled when they pass.  I just work in small increments and use &lt;code&gt;skip&lt;/code&gt;
statements to achieve the same effect without failing tests.  Just a small personal
change to test-driven development that gets the same results.&lt;/p&gt;
&lt;p&gt;Then there is the matter of collecting information about the code coverage metrics
for those tests.  Once again, the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project
allows me to track the coverage percentage on two distinct levels (lines and branches)
to ensure that the percentage is a healthy one for the project.  While my absolute
baseline percentage for a released project is 75%, I can drive that number up into
the high 90s without that much effort.  And as most of the projects that I work
on are lower-level projects, it makes sense to me to ensure that code coverage
percentages are more than 95%.  For me, if I will not accept a package into any
of my projects without decent testing or decent code coverage, I need to be showing
that same respect to users of my projects.&lt;/p&gt;
&lt;p&gt;And that brings me to the PyLint Utilities project.  Both the first and third purposes of
these utilities, ensuring balanced suppressions and finding unused suppressions,
are actions that are taken to improve the projects.  But generating reports, the
second purpose, is one that fits in very nicely like the two existing plugins for
the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project.&lt;/p&gt;
&lt;h3 id="tell-me-more"&gt;Tell Me More&lt;a class="headerlink" href="#tell-me-more" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Why is that?  I believe I have said before that it is more important to track
quality in a project than to get it to a “golden” state.  Noting that a project
only has a handful of tests is more important than immediately adding new tests.
The most obvious reason for that is that it is best to understand what needs to
be tested before adding those new tests.&lt;/p&gt;
&lt;p&gt;That is where noting the code coverage for a project comes into play.  I have joined
teams with no quality measurement in place.  The first thing I say to that team is
not “shame, no code coverage”, but “we need to know what we are dealing with in order
to move forward”.  Besides coming across as a jerk with the first suggestions,
it will [reduce their desire to] improve the code coverage.  In addition, there
is a chance that their code coverage is already decent for their project and the
stage it is at.  Only after doing a good analysis of the project can things move forward.&lt;/p&gt;
&lt;p&gt;Which brings me to PyLint suppressions.  As I have mentioned before, I use these
suppressions to effectively confirm that I have seen the warning and know about
it.  To me, that warning itself is not a big thing, but just a thing.  What concerns
me is a pattern of suppressing the warnings without trying to improve on the code
to make those warnings not needed.  This philosophy merges in very well with my
philosophy on code coverage.  It is my belief that my comments in the previous
paragraph about code coverage, knowing what we are dealing with, and moving
forward are as equally applicable to suppressions as to code coverage.&lt;/p&gt;
&lt;p&gt;From those similarities, it should be easy to see why I want to add a plugin
for the Project Summarizer project to report this.  I mean, if it is good enough
for code coverage, it should be good enough for suppressions.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What Is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that I have gone through the new utility project that I have just made
public, next week I am going to start providing plugin integration to the
Project Summarizer project.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="pylint_utils"></category></entry><entry><title>Project Summarizer - Filling Out Plugin Support</title><link href="https://jackdewinter.github.io/2022/04/18/project-summarizer-filling-out-plugin-support/" rel="alternate"></link><published>2022-04-18T00:00:00-07:00</published><updated>2022-04-18T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-04-18:/2022/04/18/project-summarizer-filling-out-plugin-support/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/11/project-summarizer-loading-plugins/"&gt;last article&lt;/a&gt;, I
talked about starting to add proper plugin support to
the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project.
In this article, I take that work to its logical conclusion by adding proper
plugin support to the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It took me a while to figure out the right way …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/11/project-summarizer-loading-plugins/"&gt;last article&lt;/a&gt;, I
talked about starting to add proper plugin support to
the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project.
In this article, I take that work to its logical conclusion by adding proper
plugin support to the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It took me a while to figure out the right way to add plugins for the Project
Summarizer project.  But when I did my research and worked through everything,
I ended up with a solid loading strategy that I knew worked.  What was left?
To implement the plugins properly, of course!&lt;/p&gt;
&lt;h2 id="implementing-the-plugins"&gt;Implementing The Plugins&lt;a class="headerlink" href="#implementing-the-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is a simple phrase: “to implement the plugins properly.”  But it was not
going to be easy.  I had experience implementing plugins, but I
was not sure how much of that experience would carry over.  I knew it was
going to be enough to implement the base part of the plugins, that much was
certain.  But since it is a completely different project, I was not sure if
I was going to meet something I hadn’t encountered before.&lt;/p&gt;
&lt;h3 id="refactoring-plugin-related-code"&gt;Refactoring Plugin Related Code&lt;a class="headerlink" href="#refactoring-plugin-related-code" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From experience with the PyMarkdown project, there were two things that I was
sure that I needed to do if I wanted to be successful with these refactorings:
move the plugins related code under a new &lt;code&gt;plugins&lt;/code&gt; directory and create a new
&lt;code&gt;plugin_manager&lt;/code&gt; directory to contain the management of those plugins. By taking
the step of creating these two directories, I knew that I was cleanly defining
the parts of the project that were related to plugins and to management of those
plugins.&lt;/p&gt;
&lt;p&gt;The easy part was moving the existing code for the Cobertura plugin and the
Junit plugin into those directories.  A couple of quick name changes here along with
moving their related measurement classes into the same directory, and those were
done.  The hard part was the management of those plugins.&lt;/p&gt;
&lt;p&gt;The first thing that I created was a new class &lt;code&gt;BadPluginError&lt;/code&gt;.  Copying heavily
from the PyMarkdown project, I knew that I needed to have a singular exception that
I could throw whenever something bad happened.  Instead of different exceptions
for different issues, I decided on keeping the “one exception to rule them all”
approach.  While I might experiment with subclasses of this exception in the future,
having all the exception handling in one exception makes it easy to deal with.
The only part of the exception that is difficult is the formatting of the message,
but with a bit of refactoring, it will not be too bad.&lt;/p&gt;
&lt;p&gt;I then created the new &lt;code&gt;PluginManager&lt;/code&gt; class and started moving code that was
plugin related in the &lt;code&gt;main.py&lt;/code&gt; module over to the new class.  It was a bit
scary at first, as I am not used to seeing VSCode present me with so many code
errors at one time.  But as I added the required import statements and moved
the functions over, those code errors slowly started disappearing.  I knew in my head that
those errors were only temporary, but it sure was a relief to see those errors
go away.&lt;/p&gt;
&lt;p&gt;But after everything was moved over, there still was cleanup to complete.
There were a couple of places where a &lt;code&gt;sys.exit(1)&lt;/code&gt; was used instead of throwing
the new &lt;code&gt;BadPluginError&lt;/code&gt; exception, so that needed to be addressed.  Along with
that, I added &lt;code&gt;try/except(BadPluginError)&lt;/code&gt; blocks around the sensitive code blocks,
to ensure that those thrown exceptions were properly handled.  To centralize that
in one location, I added a &lt;code&gt;__report_error&lt;/code&gt; function to the &lt;code&gt;main.py&lt;/code&gt; module
specifically to ensure that there was a single location for reporting errors.&lt;/p&gt;
&lt;p&gt;And that work continued for a bit longer.  To make sure that every call into a
plugin was properly protected, I added more &lt;code&gt;try/except&lt;/code&gt; blocks around each call
into a plugin.  While it is not always a good practice, I used an &lt;code&gt;except Exception&lt;/code&gt;
to capture any exception, creating a new &lt;code&gt;BadPluginError&lt;/code&gt; from that exception.&lt;/p&gt;
&lt;p&gt;After all that work was done, I knew that I could start breathing again.  The
hard part of the work was done.&lt;/p&gt;
&lt;h3 id="aside-on-general-exceptions-catching"&gt;Aside on General Exceptions Catching&lt;a class="headerlink" href="#aside-on-general-exceptions-catching" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Generally, the problem with catching a general &lt;code&gt;Exception&lt;/code&gt; is that an overly broad
caught exception can catch more serious issues than the desired exceptions.
If developers are not careful, serious exceptions like the &lt;code&gt;OutOfMemoryException&lt;/code&gt;
and the &lt;code&gt;DivideByZeroException&lt;/code&gt; can be caught and ignored when the proper action
should have been taken to deal with those types of serious issues more… well,
seriously.  And usually, I try and avoid catching those Exceptions.  It just
does not look right to me.&lt;/p&gt;
&lt;p&gt;But in this instance, there were two things working for me catching &lt;code&gt;Exception&lt;/code&gt;.
One instance in which I believe it is okay to catch general exceptions is with a large enough
change of responsibility within the code being executed.  Consider the following
code from the &lt;code&gt;add_command_line_arguments_for_plugins&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;plugin_argument_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;plugin_variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_plugin_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_command_line_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;BadPluginError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_plugin_instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;formatted_message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Bad Plugin Error calling add_command_line_arguments."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From a puritanical point of view, this is a terrible thing to do.  However, I believe
that from a realistic point of view, it is the correct thing to do.  When the
function &lt;code&gt;next_plugin_instance.add_command_line_arguments&lt;/code&gt; is executed, the
responsibility for the executing code changes from the Project Summarizer project
and its &lt;code&gt;PluginManager&lt;/code&gt; class to that of the plugin itself.  Bluntly said, there
is nothing that the Project Summarize project can do to prevent the plugin from
executing any code that it wants to.  It is the responsibility of the plugin to
adhere to any provided interface as closely as possible.  Even so, there is no uncomplicated
way to define which exceptions can be raised by the plugin, and therefore which
exceptions to protect against with an &lt;code&gt;except&lt;/code&gt; block.  Hence, &lt;code&gt;except Exception&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That brings me to the second thing work for me in this code: the handling of the
&lt;code&gt;BadPluginError&lt;/code&gt; itself.  I did a quick check through the code as I was drafting
this article, and I could not find a single instance where the raising of the
&lt;code&gt;BadPluginError&lt;/code&gt; was not handled by cleaning stopping the application as soon as
possible.  This means that every time that exception is raised, the application
ends.  With very few exceptions (no pun intended), when one of those serious
exceptions are raised, the best response is to terminate the application itself.
As the Project Summarizer takes those serious exceptions and wraps them in a &lt;code&gt;BadPluginError&lt;/code&gt;
to supply additional context before rethrowing the caught exception, I believe I have a good argument that
those exceptions are being handled in an appropriate manner.&lt;/p&gt;
&lt;h3 id="little-things"&gt;Little Things&lt;a class="headerlink" href="#little-things" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the challenging work of the refactoring done, I knew I needed to focus on the little things that
needed to be addressed.  Basically, dotting each i and crossing each t.&lt;/p&gt;
&lt;p&gt;The first of those things was to stop initializing the &lt;code&gt;self.__available_plugins&lt;/code&gt;
array with the two built-in summarizer plugins and load them dynamically with the
other plugins.  While it would have been fine to load them the other way, I just
felt it was more consistent to load them this way.  This meant that all plugins
were being loaded the same way, which just made sense.&lt;/p&gt;
&lt;p&gt;As I was looking through the code, I noticed that there were optimizations
that could be performed on the code.  In earlier iterations, I had files like
the &lt;code&gt;test_results_model.py&lt;/code&gt; file that contained the &lt;code&gt;TestTotals&lt;/code&gt; class and
the &lt;code&gt;TestMeasurement&lt;/code&gt; class.  Instead of artificially grouping them together,
I decided to split them up into their own files. It just made sense as they
were different concepts.  One bonus to that was that it made the typing of
those classes easier, as they were in separate files now.&lt;/p&gt;
&lt;p&gt;And then it hit me, I did not have details support.&lt;/p&gt;
&lt;h3 id="adding-details-support"&gt;Adding Details Support&lt;a class="headerlink" href="#adding-details-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One thing that I learned from the PyMarkdown project was that it was exceptionally useful
to have explicit command line arguments that would detail which plugins were present
and enabled.  While the plugins for the Project Summarizer project are more directly
visible on the command line, I thought about whether to include this kind of support
for a couple of days.  In the end, the cost is low and the benefit to the user is
decent enough, that the benefit outweighed the cost.&lt;/p&gt;
&lt;p&gt;With that decided on, I added a simplified version of the &lt;code&gt;PluginsDetail&lt;/code&gt; class
from the PyMarkdown project.  I was sure that I did not need to enable or disable
plugins at all.  The basis for that certainty was the command line interface.
If a user does not want to use a plugin, they can simply not use the command line
argument related to the plugin.  I might change my mind down the road, but that
was where I landed.&lt;/p&gt;
&lt;p&gt;I did feel that it is right to add support, but I am still figuring out what kind
of information would look right in the details.  As such, I started out with a
basic set of properties: &lt;code&gt;plugin_id&lt;/code&gt;, &lt;code&gt;plugin_name&lt;/code&gt;, &lt;code&gt;plugin_version&lt;/code&gt; and
&lt;code&gt;plugin_interface_version&lt;/code&gt;.  It was just simple information that I knew that I could easily expand
on later.  Given that, I made sure to include the &lt;code&gt;plugin_interface_version&lt;/code&gt; property and set it
to the new constant: &lt;code&gt;VERSION_BASIC&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="lots-of-testing"&gt;Lots Of Testing&lt;a class="headerlink" href="#lots-of-testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In case anyone thinks otherwise, this entire process followed good test-driven
development practices, with many tests added and performed.  There is an
incredibly small chance that I would write anything other than a Proof-Of-Concept
without solid tests in place first.  It just doesn’t feel right.&lt;/p&gt;
&lt;p&gt;And believe me, during the refactoring, that adherence to test-driven development
saved me a couple of times.  While I would like to think that I have vast amounts of energy
all the time, I am human.  As such, there were days where I was more tired than
others and tended to make more small mistakes.  Mistakes that were caught by the
decent set of tests that I have covering the project.&lt;/p&gt;
&lt;p&gt;And to be clear to any readers, even on good days I make mistakes.  My family and
I call it “fat-finger syndrome” and I suffer from it continuously.  When I am
authoring articles like this one, I most often think as I type, and those two actions
are coordinated with each other.  But when I am writing code, I tend to have
those two actions get out-of-sync with each other… with alarming frequency.
But because I know I do this and have a solid process backing me up, I do not worry
about it as much these days because I have confidence in the process.&lt;/p&gt;
&lt;h2 id="updating-badges"&gt;Updating Badges&lt;a class="headerlink" href="#updating-badges" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After I did chores around the house and outside in our yard, I found myself
having some extra time before writing I started my writing on Sunday afternoon.
As such, I wanted to have a decent sized task that I could conduct, but not
so big as that it would take over my Sunday evening writing.
Going to a couple of my projects, one thing that I noticed is that I was still
not happy with how the badges look.  I had a good amount of time to use, and I
figured that was a task that was just around the correct size.&lt;/p&gt;
&lt;p&gt;Badges are simple.  Multiple sites on the internet provide images that can be used
on web pages to denote various things.  Most badges that I use are either
static, based off the GitHub project, or based of the package information at
&lt;a href="pypi.org"&gt;PyPi.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you look at the &lt;a href="https://github.com/jackdewinter/pyscan/blob/master/README.md"&gt;README.md file&lt;/a&gt;
for the Project Summarizer project, you will see pictures that look like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jackdewinter/pyscan"&gt;&lt;img alt="GitHub top language" src="https://img.shields.io/github/languages/top/jackdewinter/pyscan"/&gt;&lt;/a&gt;
&lt;img alt="platforms" src="https://img.shields.io/badge/platform-windows%20%7C%20macos%20%7C%20linux-lightgrey"/&gt;
&lt;a href="https://pypi.org/project/project_summarizer"&gt;&lt;img alt="Python Versions" src="https://img.shields.io/pypi/pyversions/project_summarizer.svg"/&gt;&lt;/a&gt;
&lt;a href="https://pypi.org/project/project_summarizer"&gt;&lt;img alt="Version" src="https://img.shields.io/pypi/v/project_summarizer.svg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jackdewinter/pyscan/actions/workflows/main.yml"&gt;&lt;img alt="GitHub Workflow Status (event)" src="https://img.shields.io/github/workflow/status/jackdewinter/pyscan/Main"/&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/jackdewinter/pyscan"&gt;&lt;img alt="codecov" src="https://codecov.io/gh/jackdewinter/pymarkdown/branch/main/graph/badge.svg?token=PD5TKS8NQQ"/&gt;&lt;/a&gt;
&lt;img alt="GitHub Pipenv locked dependency version (branch)" src="https://img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pyscan/black/master"/&gt;
&lt;img alt="GitHub Pipenv locked dependency version (branch)" src="https://img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pyscan/flake8/master"/&gt;
&lt;img alt="GitHub Pipenv locked dependency version (branch)" src="https://img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pyscan/pylint/master"/&gt;
&lt;a href="https://sourcery.ai"&gt;&lt;img alt="Sourcery" src="https://img.shields.io/badge/Sourcery-enabled-brightgreen"/&gt;&lt;/a&gt;
&lt;a href="https://github.com/jackdewinter/pyscan/stargazers"&gt;&lt;img alt="Stars" src="https://img.shields.io/github/stars/jackdewinter/pyscan.svg"/&gt;&lt;/a&gt;
&lt;a href="https://pypistats.org/packages/project_summarizer"&gt;&lt;img alt="Downloads" src="https://img.shields.io/pypi/dm/project_summarizer.svg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jackdewinter/pyscan/issues"&gt;&lt;img alt="Issues" src="https://img.shields.io/github/issues/jackdewinter/pyscan.svg"/&gt;&lt;/a&gt;
&lt;a href="https://github.com/jackdewinter/pyscan/blob/main/LICENSE.txt"&gt;&lt;img alt="License" src="https://img.shields.io/github/license/jackdewinter/pyscan.svg"/&gt;&lt;/a&gt;
&lt;a href="https://github.com/jackdewinter/pyscan/graphs/contributors"&gt;&lt;img alt="Contributors" src="https://img.shields.io/github/contributors/jackdewinter/pyscan.svg"/&gt;&lt;/a&gt;
&lt;a href="https://github.com/jackdewinter/pyscan/network/members"&gt;&lt;img alt="Forks" src="https://img.shields.io/github/forks/jackdewinter/pyscan.svg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.linkedin.com/in/jackdewinter/"&gt;&lt;img alt="LinkedIn" src="https://img.shields.io/badge/-LinkedIn-black.svg?logo=linkedin&amp;amp;colorB=555"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those images are generated by the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitHub&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/languages/top/jackdewinter/pyscan)](https://github.com/jackdewinter/pyscan)&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;platforms&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/badge/platform-windows%20%7C%20macos%20%7C%20linux-lightgrey)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Versions&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/pypi/pyversions/project_summarizer.svg)](https://pypi.org/project/project_summarizer)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/pypi/v/project_summarizer.svg)](https://pypi.org/project/project_summarizer)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitHub&lt;/span&gt; &lt;span class="n"&gt;Workflow&lt;/span&gt; &lt;span class="n"&gt;Status&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/workflow/status/jackdewinter/pyscan/Main)](https://github.com/jackdewinter/pyscan/actions/workflows/main.yml)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;codecov&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//codecov.io/gh/jackdewinter/pymarkdown/branch/main/graph/badge.svg?token=PD5TKS8NQQ)](https://codecov.io/gh/jackdewinter/pyscan)&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitHub&lt;/span&gt; &lt;span class="n"&gt;Pipenv&lt;/span&gt; &lt;span class="n"&gt;locked&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;)](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pyscan/black/master)&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitHub&lt;/span&gt; &lt;span class="n"&gt;Pipenv&lt;/span&gt; &lt;span class="n"&gt;locked&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;)](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pyscan/flake8/master)&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitHub&lt;/span&gt; &lt;span class="n"&gt;Pipenv&lt;/span&gt; &lt;span class="n"&gt;locked&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;)](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pyscan/pylint/master)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sourcery&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/badge/Sourcery-enabled-brightgreen)](https://sourcery.ai)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Stars&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/stars/jackdewinter/pyscan.svg)](https://github.com/jackdewinter/pyscan/stargazers)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Downloads&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/pypi/dm/project_summarizer.svg)](https://pypistats.org/packages/project_summarizer)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Issues&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/issues/jackdewinter/pyscan.svg)](https://github.com/jackdewinter/pyscan/issues)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;License&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/license/jackdewinter/pyscan.svg)](https://github.com/jackdewinter/pyscan/blob/main/LICENSE.txt)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Contributors&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/contributors/jackdewinter/pyscan.svg)](https://github.com/jackdewinter/pyscan/graphs/contributors)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Forks&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/forks/jackdewinter/pyscan.svg)](https://github.com/jackdewinter/pyscan/network/members)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LinkedIn&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/badge/-LinkedIn-black.svg?logo=linkedin&amp;amp;colorB=555)](https://www.linkedin.com/in/jackdewinter/)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes, it is a lot of work for seventeen small images, but I feel they are worth it.
Each badge related something that I feel is important about the project.  That part I
was okay with.  It just didn’t look nice to me.&lt;/p&gt;
&lt;p&gt;Yes, “nice”.  It was not a very quantifiable word that I picked.  That bugged we
enough that I started playing around to figure out why I thought that.  After some
research, I found out that for me “nice” was the same as “organized” in this context.
I liked the information, just did not like how it was being displayed.&lt;/p&gt;
&lt;p&gt;Using that knowledge, I took another hour and kept on changing organizations of
those tags until I came up with the current organization that you can see on the
project’s &lt;a href="https://github.com/jackdewinter/pyscan/blob/master/README.md"&gt;README.md page&lt;/a&gt;.
The first thing I decided to do was to put the information in Markdown tables to
give it clear organization.  After that quick fix, coming up with the categories
required a bit more work and fiddling around.  I played with different badges in
each “category” and looked to see if they looked right together.  Once I got a
set that looked right, giving that category a name was simple.&lt;/p&gt;
&lt;p&gt;The only category that I had problems with was the non-category for the third
line of the badges.  I wanted to call that &lt;code&gt;Dependencies&lt;/code&gt;, but I did not want
to add a list of every dependency.  But I did want to call out the various
packages that I use to increase and maintain the quality of the project.
In the end, I decided to just leave the title for that category blank, essentially
becoming a second line for the &lt;code&gt;Quality&lt;/code&gt; category.  I am not sure if it will
stay like that, but for now I feel it is a good compromise.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What Is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Project Summarizer plugin design.  Check.  Project Summarizer plugin loading
code.  Check.  Flushing out Project Summarizer plugins.  Check.  With all that
work done, I have been working on a project for a couple of months that will make
an ideal plugin.  Here is hoping I can move it along and have it ready by
next week!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Project Summarizer - Loading Plugins</title><link href="https://jackdewinter.github.io/2022/04/11/project-summarizer-loading-plugins/" rel="alternate"></link><published>2022-04-11T00:00:00-07:00</published><updated>2022-04-11T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-04-11:/2022/04/11/project-summarizer-loading-plugins/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/04/markdown-linter-back-to-project-summarizer-the-long-way/"&gt;last article&lt;/a&gt;, I
talked about more Type Hint work across the multiple projects that I support.
In this article, I talk about starting to add proper plugin support to
the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am not superstitious in the least, but now that I have started …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/04/markdown-linter-back-to-project-summarizer-the-long-way/"&gt;last article&lt;/a&gt;, I
talked about more Type Hint work across the multiple projects that I support.
In this article, I talk about starting to add proper plugin support to
the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am not superstitious in the least, but now that I have started at my new
job, I feel I can talk more freely about it.  It is a fantastic opportunity and
I get to help people.  For me, those are two main pluses that I was looking for.
That is what has been occupying most of my time in the last 4 weeks: getting
that job and then starting at that job. Can you say “firehose of information”
five times real fast?&lt;/p&gt;
&lt;p&gt;But in the evenings, it was useful to have something I can work on and move
forward.  I know my day job is going to have good days and bad days, but I find
the lack of pressure for my open-source projects to be gratifying.  But I still
feel that I want to move the bar forward with them.  I want to do things that
help people write better Python projects, and to that end, I continue working
towards that goal.  And this week, it was mostly about the Project Summarizer
project.&lt;/p&gt;
&lt;h2 id="pull-request-merge-wait-and-repeat"&gt;Pull Request, Merge, Wait, and Repeat&lt;a class="headerlink" href="#pull-request-merge-wait-and-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having spread the Type Hint work across the various projects that I maintain,
I spent a fair amount of time this week getting those projects upgraded to their most recent versions.
The actual process is easy: just click the merge button on the Pull Requests
in GitHub and confirm it worked.  But while the &lt;code&gt;Pipfile&lt;/code&gt; has only a single line change, the
&lt;code&gt;Pipfile.lock&lt;/code&gt; contains more information.  And as those changes conflicted,
I had to merge each change, wait for the old Pull Requests to resolve again, and
then see if I can merge them.&lt;/p&gt;
&lt;p&gt;For the most part, the task is that simple.  Except when it is not.  One of those
“not” cases surfaced this past week: a merge error with the new PyLint and PyMarkdown.  The
&lt;a href="https://github.blog/2020-06-01-keep-all-your-packages-up-to-date-with-dependabot/"&gt;Dependabot&lt;/a&gt;
scan increased the version from &lt;code&gt;2.12.2&lt;/code&gt; to &lt;code&gt;2.13.5&lt;/code&gt;.  An otherwise
simple change, but it had effects on scanning of the code.  Where things were fine
before, it was now complaining about &lt;code&gt;too-many-branches&lt;/code&gt; in fourteen different
script files.  It was time for me to knuckle down and get to my research.&lt;/p&gt;
&lt;p&gt;Around three hours later, I had an observation and a partial solution.  The reason
I say &lt;em&gt;partial&lt;/em&gt; is that I had to change my &lt;code&gt;clean.cmd&lt;/code&gt; script to work around the
issue.  It was better than nothing and I was able to move forward with that work
around, and that is what really matters. And of course, I logged a new issue against
&lt;a href="https://github.com/PyCQA/pylint/issues/6242"&gt;PyLint&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;The issue itself?  For some reason, PyLint version &lt;code&gt;2.13.0&lt;/code&gt; and higher behaves differently
when I specify each individual package distinctly on the command line, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run pylint --rcfile&lt;span class="o"&gt;=&lt;/span&gt;setup.cfg pymarkdown pymarkdown/plugins
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;instead of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run pylint --rcfile&lt;span class="o"&gt;=&lt;/span&gt;setup.cfg --recursive&lt;span class="o"&gt;=&lt;/span&gt;y pymarkdown
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run pylint --rcfile&lt;span class="o"&gt;=&lt;/span&gt;setup.cfg pymarkdown/plugins/rule_md_033.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The module &lt;code&gt;rule_md_033.py&lt;/code&gt; was one of the failure cases.  When I went to
check and module &lt;code&gt;rule_md_033.py&lt;/code&gt; by using the third command line, PyLint
did not report any errors.  However, when I used the first command line, I got:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pymarkdown\plugins\rule_md_033.py:68:4: R0912: Too many branches (14/12) (too-many-branches)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, after doing research on PyLint’s command line, I came across the
&lt;code&gt;--recursive=y&lt;/code&gt; flag, and tried it out, producing the second command line.  This
was the change I ultimately made to the &lt;code&gt;clean.cmd&lt;/code&gt; script to solve the issue.
While there was still an issue with PyLint, a usage point of view, the new approach
is a cleaner approach and solves the issue, so it is good.  Not really three hours
of time wasted, but it was three hours that was used up just the same.&lt;/p&gt;
&lt;h2 id="adding-plugins-to-project-summarizers-command-line"&gt;Adding Plugins To Project Summarizer’s Command Line&lt;a class="headerlink" href="#adding-plugins-to-project-summarizers-command-line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that work being completed as a background task, I started developing a good
command line interface for the plugins that matched my rough designs.  While I had
a couple of loose ideas on how to do it, none of them seemed right to me.  Since
I love experimenting with code, I just spent some “fun” time trying different approaches
out until I found one that felt right and worked.&lt;/p&gt;
&lt;h3 id="brute-force-just-get-it-done"&gt;Brute Force - Just Get It Done&lt;a class="headerlink" href="#brute-force-just-get-it-done" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My first attempt was a brute force attempt at parsing the command line.  In Python,
the command line is presented as an array in &lt;code&gt;sys.argv&lt;/code&gt;.  The script that is
invoked from the command line is stored at index 0 with the rest of the items in
the array comprising the remaining arguments.  To keep things simple, I added a temporary constraint that
new plugins could only be added at the start of the command line using the
&lt;code&gt;--add-plugin&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;But this brute force method just did not work for me.  The first thing I had to
add to this method was a check that there was another argument after the &lt;code&gt;--add-plugin&lt;/code&gt;
argument.  Then I had to add a check to see if that argument started with a dash.
Then I had to add an option that the argument could include an &lt;code&gt;=&lt;/code&gt; sign and separate
the argument and the value that way.  It just seemed like needless work.&lt;/p&gt;
&lt;h3 id="revise-and-conquer"&gt;Revise and Conquer?&lt;a class="headerlink" href="#revise-and-conquer" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I decided to look to refine that approach a bit more, and to see if that would
help me feel more positive about that approach. Instead of looking only at the start of
the array, I tried to implement a more complex algorithm to find that pattern at
any point in the array.  The basic part of the algorithm was easy.  It was the
boundary cases that were the problem.
Some of the boundary cases were already managed using the extra work that I did
in the first iteration of this approach.  But I had other boundary cases to
consider.  The big one was a nasty one to solve: what would my code to if another
argument wanted to have &lt;code&gt;--add-plugin&lt;/code&gt; as its value?&lt;/p&gt;
&lt;p&gt;I started playing around to figure out what &lt;code&gt;argparse&lt;/code&gt; did for those situations
and found that any value in the command line that starts with a &lt;code&gt;-&lt;/code&gt; character
is assumed to be its own argument.  As such, I was safe in assuming that any instance
of the &lt;code&gt;--add-plugin&lt;/code&gt; argument in the command line array would be a valid one.&lt;/p&gt;
&lt;p&gt;But that finding got me thinking.  What other cases was I missing? Were there combinations
that the &lt;code&gt;argparse&lt;/code&gt; package was made to deal with that I did not know about? Weird
boundary conditions that I would have to mitigate later?  To me, it just made more
sense to try and let &lt;code&gt;argparse&lt;/code&gt; oversee the heavy lifting, and for me to take advantage
of the package whichever way I could.  But how?&lt;/p&gt;
&lt;h3 id="thinking-out-of-the-box"&gt;Thinking Out Of The Box&lt;a class="headerlink" href="#thinking-out-of-the-box" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I cannot remember exactly how I ended up with the idea for the solution, but it was just
one of those “why not? let’s try it and see if it works!” ideas. In this approach,
I decided to use the &lt;code&gt;argparse&lt;/code&gt; package twice, once for the &lt;code&gt;--add-plugin&lt;/code&gt; argument
and once for the remaining arguments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;remaining_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;additional_plugins_to_load&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;remaining_arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;last_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remaining_arguments&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;

        &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allow_abbrev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;PluginManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_plugin_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;known_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_known_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;remaining_arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;known_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_plugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;additional_plugins_to_load&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;known_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;remaining_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;known_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_arguments&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="the-main-loop"&gt;The Main Loop&lt;a class="headerlink" href="#the-main-loop" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It is not pretty to look. But let me break the code down.
Initially, the &lt;code&gt;remaining_arguments&lt;/code&gt;
variable is set to a slice of the command line arguments array, starting at
index 1.  This ensures that only workable arguments and interpreted, and not the
name of the script.  The next part to get right is the loop started on line 3.&lt;/p&gt;
&lt;p&gt;For the main conditional, I decided to just condition the loop off whether
there are still arguments to process.  If all arguments have been processed, there
is nothing left to do.  The assumption that I made here is that the process of
parsing the command line would consume the desired arguments as it goes.  I was
hoping to go with a “consuming” approach for the inner processing, so this fell
in line with the rest of my thinking.&lt;/p&gt;
&lt;p&gt;For the second conditional, I decided to use an &lt;code&gt;if&lt;/code&gt; statement and a &lt;code&gt;break&lt;/code&gt;
statement.  I could have put this conditional into the main loop, but I felt that
it read better with these two statements at the end of the loop.  To power this
conditional, I created a copy of the &lt;code&gt;remaining_arguments&lt;/code&gt; variable in &lt;code&gt;last_args&lt;/code&gt;
at the start of the loop.  By making the inner processing consume the arguments,
I was able to have the conditional check if the last set of arguments (&lt;code&gt;len(last_args)&lt;/code&gt;)
has the same length as the current &lt;code&gt;remaining_arguments&lt;/code&gt; variable (&lt;code&gt;len(remaining_arguments)&lt;/code&gt;).
If those two lengths are equal, then no arguments were consumed by the inner processing,
and the loop ends using the &lt;code&gt;break&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;As I said above, I am not sure if the design of the loop is “correct”, but for me,
it is very readable.  There are two major conditions for exiting the loop, and each
condition is distinct from each other.  From my viewpoint, that just makes it more
readable.&lt;/p&gt;
&lt;h4 id="inner-processing"&gt;Inner Processing&lt;a class="headerlink" href="#inner-processing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I must admit, I did resort to a bit of trickery to get this part working properly,
and not on my first try either.  The first two lines were standard to each approach
that I tried: create a parser and add the &lt;code&gt;--add-path&lt;/code&gt; argument to it using a
call to the &lt;code&gt;add_plugin_arguments&lt;/code&gt; function.  Why?  By doing it this way, I was
able to parse that argument independently of the main parser, but still have the
help for the &lt;code&gt;--add-path&lt;/code&gt; argument show up normally.  Basically, even though any
eligible instances of that argument would be removed by the inner processing, the
main processing help would still report on that argument properly.&lt;/p&gt;
&lt;p&gt;The next line was the pivotal line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;known_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_known_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;remaining_arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By invoking the &lt;code&gt;argparser&lt;/code&gt; package using the &lt;code&gt;parse_known_args&lt;/code&gt; function, I got
the benefit of return values were different than normal.  With this function, the
standard &lt;code&gt;argparse.Namespace&lt;/code&gt; typed value is returned as the first value in a &lt;code&gt;Tuple&lt;/code&gt;,
but the second value returned is an array
with all unused arguments. This made the rest of the inner processing easy, as
this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;remaining_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;known_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was all that was needed to figure out the remaining arguments and assign them to
the proper variable.  After adding the lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;known_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_plugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;additional_plugins_to_load&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;known_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to add the parsed &lt;code&gt;--add-path&lt;/code&gt; argument to the array of plugins to load, the only
other change that was required was to wire up the &lt;code&gt;main&lt;/code&gt; function with the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;remaining_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_plugins&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__parse_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and change the code in the &lt;code&gt;__parse_arguments&lt;/code&gt; function to parse the list that
was passed in instead of the default &lt;code&gt;sys.argv&lt;/code&gt; value.  Some quick testing and
adding of use cases, and everything looked good.&lt;/p&gt;
&lt;h2 id="not-giving-up"&gt;Not Giving Up&lt;a class="headerlink" href="#not-giving-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That process was by no means easy.  As my son often says “sometimes you have to
throw a lot of spaghetti against the wall just to find one that sticks.”  The
important thing to me was that the approaches that I took did not feel right, and I needed
to keep on searching until I found something that did feel right.  While that is
not always the right thing to do, I believe it was the right thing to do in this
scenario.  It was because of that feeling that I kept on changing my approach
until I found that unorthodox solution with the &lt;code&gt;argparse&lt;/code&gt; package.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the command line parsing for adding new plugins completed, I knew that I
need to spend time adding a good array of tests.  Following that, there
was the adaptation of the plugin logic from the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project that needed to be completed.  Not a clean copy, but an adaptation to
suit the Project Summarizer project.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Back To Project Summarizer... The Long Way</title><link href="https://jackdewinter.github.io/2022/04/04/markdown-linter-back-to-project-summarizer-the-long-way/" rel="alternate"></link><published>2022-04-04T00:00:00-07:00</published><updated>2022-04-04T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-04-04:/2022/04/04/markdown-linter-back-to-project-summarizer-the-long-way/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/03/28/markdown-linter-python-type-hinting/"&gt;last article&lt;/a&gt;, I
talked about applying Python Type Hints to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project.  In this article, I talk about more Type Hint work across the multiple
projects that I maintain.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes projects can take on a mind of their own.  That is how I felt about …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/03/28/markdown-linter-python-type-hinting/"&gt;last article&lt;/a&gt;, I
talked about applying Python Type Hints to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project.  In this article, I talk about more Type Hint work across the multiple
projects that I maintain.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes projects can take on a mind of their own.  That is how I felt about
the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project and adding Python Type Hints to it.  It was just soaking
up time like a dry sponge.  It is true that I could have taken a break from adding
the hints for a while, but in that case, I was sure that I was going to feel like
the job was incomplete.  While it may not have been the most pressing task
to complete, I decided to move forward with it anyway.&lt;/p&gt;
&lt;p&gt;However, there was a silver lining.  Along the way, I was able to start providing
updates to my other project and getting them all coordinated with scripts and supporting
Type Hints.  To me, that was a plus!&lt;/p&gt;
&lt;h2 id="issue-319-the-final-commit"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/319"&gt;Issue 319&lt;/a&gt; - The Final Commit?&lt;a class="headerlink" href="#issue-319-the-final-commit" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having rare available time during the week, I decided to move forward with
Type Hints and the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project, or at least move ahead as much as time
would allow.  It wasn’t always pretty work, as I detailed in my
&lt;a href="https://jackdewinter.github.io/2022/03/28/markdown-linter-python-type-hinting/#paying-the-price"&gt;last article&lt;/a&gt;,
but it was good work none the less. Starting at 1147 issues, by the middle of the
week, I was able to get the number down to around 125 issues before the fun began.&lt;/p&gt;
&lt;h3 id="sometimes-you-just-need-to-be-literal"&gt;Sometimes, You Just Need To Be Literal&lt;a class="headerlink" href="#sometimes-you-just-need-to-be-literal" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I winnowed down the issues to that group of 125, I started to encounter a number
of interesting scenarios. One of these scenarios was with the
&lt;code&gt;generate_close_markdown_token_from_markdown_token&lt;/code&gt; function in the &lt;code&gt;MarkdownToken&lt;/code&gt;
module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_close_markdown_token_from_markdown_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extra_end_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I coded it up, everything looked fine.  And then it hit me.  I had just added
a return type hint of &lt;code&gt;MarkdownToken&lt;/code&gt; within the module &lt;code&gt;MarkdownToken&lt;/code&gt;.  The yellow
error line in VSCode under the class name confirmed it.  Therefore, it was no surprise
that after starting a quick run of the project tests that I got my expected
confirmation response back:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pymarkdown\markdown_token.py:22: in &amp;lt;module&amp;gt;
    class MarkdownToken:
pymarkdown\markdown_token.py:585: in MarkdownToken
    ) -&amp;gt; MarkdownToken:
E   NameError: name 'MarkdownToken' is not defined
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Doing quick research on the subject, my thoughts were spot on.
Until the Python class is completed, it is not registered
as a complete class.  As such, any type hint to the class to itself is not legitimate.
That was the bad news.  The good news is that when the type hints framework was being
designed, this scenario had been prepared for.  By changing the last line from
specifying the type hint as a type (&lt;code&gt;) -&amp;gt; MarkdownToken:&lt;/code&gt;) to specifying the type
hint as a literal (&lt;code&gt;) -&amp;gt; "MarkdownToken":&lt;/code&gt;), the error disappeared.
Covered in the documentation of
&lt;a href="https://peps.python.org/pep-0484/#forward-references"&gt;PEP 484 - Type Hints&lt;/a&gt; as
forward references, these exist to resolve thorny cyclic imports and cases where
a class holds references to itself.&lt;/p&gt;
&lt;p&gt;After fixing the handful of issues like this, it was then on to the last major set
of issues: stubs.&lt;/p&gt;
&lt;h2 id="stubs-application_properties"&gt;Stubs: Application_Properties&lt;a class="headerlink" href="#stubs-application_properties" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the remaining issues, the one group of remaining issues were issues
that had problems with imported types.  Specifically, there were three
imported packages that did not have any type information:
&lt;code&gt;columnar&lt;/code&gt;, its dependent package &lt;code&gt;wcwidth&lt;/code&gt;, and the &lt;code&gt;applications_properties&lt;/code&gt;
package.  To effectively use Mypy to verify the types used by the PyMarkdown project,
it needed to know the types of the classes in those three external packages.&lt;/p&gt;
&lt;p&gt;After doing my usual research, I found that for the first two packages, &lt;code&gt;columnar&lt;/code&gt; and
&lt;code&gt;wcwidth&lt;/code&gt;, the best solution was to use the &lt;em&gt;stubgen&lt;/em&gt; command.  Packaged with the
Mypy package, stubgen tries to generate a set of importable stubs that are somewhat
close to the actual types that should have been included with the package.  If that
sounds like I am choosing my words carefully, it is because I am.  Based on their
document and my experience, using &lt;em&gt;stubgen&lt;/em&gt; in the following way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stubgen --output stubs -p columnar
stubgen --output stubs -p wcwidth
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;generated stub files into the &lt;code&gt;stubs&lt;/code&gt; directory for those two packages.  Those
stubs files were not spot on, but they were reasonably close. If I had to associate
a percentage with their accuracy, I would say their initial accuracy was in the
80-90% range.  Outside of that range, there was far more usage of the &lt;code&gt;Any&lt;/code&gt; type
than I was comfortable with, with numerous cases where the type hints were missing.
But with extra research and experimentation, including a healthy dose of trial
and error, I was able to quickly tune the stubs into a usable format.&lt;/p&gt;
&lt;p&gt;That left the &lt;code&gt;application_properties&lt;/code&gt; package.  I know that I could have taken
the same route as with the other packages, but I decided to spend time to improve
the &lt;code&gt;application_properties&lt;/code&gt; project, setting it up properly with the correct type
information.&lt;/p&gt;
&lt;p&gt;However, once I had that type information
dialed in, I found out that there were additional changes that I needed to make
to allow Mypy to see that type information.  The
first change was to add a &lt;code&gt;py.typed&lt;/code&gt; file in the package’s directory to let Mypy
know that it had type information that was available.  This also meant adding that
file to the &lt;code&gt;MANIFRST.in&lt;/code&gt; file to ensure it was copied as part of the package.
Then I added an array to the &lt;code&gt;__all__&lt;/code&gt; variable in the package’s &lt;code&gt;__init__.py&lt;/code&gt;
file to ensure that Mypy had a good list of all the classes to load.  That took
a couple of hours and a healthy dose of trial and error, but it was all worth it!&lt;/p&gt;
&lt;p&gt;After that, deciding to leave things better than I found them (an old scouting
and hiking habit), I upgraded a handful of support files in the project.  Most of the
scripts were over six months old and out of date with my other projects, so I just
went ahead on updated them.  At the same time, the &lt;code&gt;Pipfile&lt;/code&gt; that I use with
&lt;code&gt;pipenv&lt;/code&gt; was complete,
but had two original packages whose version was &lt;code&gt;*&lt;/code&gt; and six copied packages with
the same &lt;code&gt;*&lt;/code&gt; version.  To be consistent, I looked up their versions and set those
looked-up versions into the &lt;code&gt;Pipfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Why did I do that?  Call it covering all bases.  From my experience, it is particularly
useful to drop any variables where possible.  A version identifier of &lt;code&gt;*&lt;/code&gt; means
that the version used is always the latest version, which is a moving target.  I
ran across a good example of how that can affect things this week, with a weird change to the
&lt;code&gt;black&lt;/code&gt; package.  As I updated the &lt;code&gt;black&lt;/code&gt; package’s version, the project’s &lt;code&gt;clean.cmd&lt;/code&gt; script
(which uses &lt;code&gt;black&lt;/code&gt;) started reporting errors.  Basically, there was a disconnect
between the &lt;code&gt;black&lt;/code&gt; package and the &lt;code&gt;click&lt;/code&gt; package, as
&lt;a href="https://github.com/psf/black/issues/2964"&gt;documented here&lt;/a&gt;.  If I had specified
the &lt;code&gt;black&lt;/code&gt; package with a &lt;code&gt;*&lt;/code&gt; version, I would have not been able to execute
the &lt;code&gt;black&lt;/code&gt; formatter for as long as this fix took to create and release.&lt;/p&gt;
&lt;p&gt;I did a small handful of other changes, which I considered bookkeeping.
I added a &lt;code&gt;main.yml&lt;/code&gt; file that was a close copy of the one from the PyMarkdown
project.  Nothing fancy, just there to execute scenario tests and lint tests as part
of the merge process.  I added some &lt;code&gt;pre-commit&lt;/code&gt; configuration and set it to
scan the project root and project &lt;code&gt;docs&lt;/code&gt; directory using PyMarkdown.  With all
that work completed, I did not want it to fall into disrepair, so I added a
&lt;code&gt;dependabot.yml&lt;/code&gt; file to automatically scan for newer package versions.&lt;/p&gt;
&lt;p&gt;With a quick release of version &lt;code&gt;0.5.2&lt;/code&gt; of the project, it was then back to
the other work.&lt;/p&gt;
&lt;h2 id="back-to-issue-319"&gt;Back to Issue 319&lt;a class="headerlink" href="#back-to-issue-319" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a healthy amount of testing done on the new release of &lt;code&gt;application_properties&lt;/code&gt;,
I switched the package version in PyMarkdown’s &lt;code&gt;Pipfile&lt;/code&gt; from &lt;code&gt;0.5.0&lt;/code&gt; to
&lt;code&gt;0.5.2&lt;/code&gt; and removed the test files that I had in the &lt;code&gt;stubs/application_properties&lt;/code&gt;
directory.  As I started my &lt;code&gt;clean.cmd&lt;/code&gt; script, I held my breath.  I had done
the work to hopefully make this work, but this is what it all came down to.
And after a good minute or two, I was rewarded with a complete execution of
the &lt;code&gt;clean.cmd&lt;/code&gt; script with no errors.&lt;/p&gt;
&lt;p&gt;I was close to being done.  Turning on the strict mode for Mypy, I had around thirty
issues that I had yet to resolve, each of them being resolved within minutes of
each other.  Within forty-five minutes, those issues were gone and Mypy was
being called with strict mode enabled and no issues being reported!&lt;/p&gt;
&lt;h2 id="pymarkdown-release-096"&gt;PyMarkdown Release 0.9.6&lt;a class="headerlink" href="#pymarkdown-release-096" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I decided that I had a good, healthy number of changes queued up, and a point release
was overdue.  Putting together a quick mental list of things to clean up before
I released the project, I made quick work of those issues.&lt;/p&gt;
&lt;p&gt;While I do try and maintain the &lt;code&gt;changelog.md&lt;/code&gt; file, I often fall behind.  Knowing that, I
took some time and cleaned up that file and double checked it for accuracy. Repeating
the work on the &lt;code&gt;application_properties&lt;/code&gt; project and its &lt;code&gt;Pipfile&lt;/code&gt;, I went through
and adjusted the file to remove any &lt;code&gt;*&lt;/code&gt; version identifiers.  I also added the same &lt;code&gt;dependabot.yml&lt;/code&gt;
file to the PyMarkdown project that was in the &lt;code&gt;application_properties&lt;/code&gt; project.
After changing the version to &lt;code&gt;0.9.6&lt;/code&gt;, setting the tag, creating the package, and
uploading the package, I was at a good point with the PyMarkdown project.&lt;/p&gt;
&lt;h2 id="getting-back-to-the-project-summarizer-project"&gt;Getting Back To The Project Summarizer Project&lt;a class="headerlink" href="#getting-back-to-the-project-summarizer-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having done all that work by Friday night, I was faced with a weekend with no planned
work ahead of me.  I had honestly thought it was going to take me all week to resolve
the Mypy issues, so I was a bit lost on what to do when Saturday afternoon came around.
Taking a page from the work that I did during the week, I went through and applied
the same kind of updates to the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
project as I had to the other two projects.&lt;/p&gt;
&lt;p&gt;With all projects updated to my current specifications, I started to work on my design
for adding plugin support to the Project Summarizer project.  From my perspective,
the key to having a good summarizer was allowing for end users to add functionality
for their own situations.  As such, I was confident that this meant supporting
plugins in a fashion like what I had done with the PyMarkdown project.
But I also know that this was going to be different because the requirements were
slightly different.  In the case of the Project Summarizer project, I figured out
that the plugins needed to be parsed and at least partially acted upon before the
normal command line processing.&lt;/p&gt;
&lt;p&gt;The reasoning for that was quite clear to me.  Unlike the other projects I have
added plugin support to, the plugins for the Project Summarizer project needed to
be able to inject command line arguments into the normal command line processing
workflow.  The summarizer works by taking existing reporting files and supplying
summaries of the content contained within.  Simply put, if I wanted the plugins
to be able specify the report files to act on, I needed to evaluate the plugins
to use before the normal processing occurred.&lt;/p&gt;
&lt;p&gt;Doing a bit of experimentation, I was sure I would be able to come up with something
decent, it was just a matter of which one of those options worked better than the
others.&lt;/p&gt;
&lt;p&gt;But, with my research completed and a long week ahead of me, I decided to leave it
there.  I was sure to have more time in the middle of the week to work on things,
and that was good enough for me.  I know that I want to make progress with plugins
for the Project Summarizer project, and I want to keep working on my other projects,
not just the PyMarkdown project.  With that focus in mind, I put my computer to
sleep on an early Sunday night.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having focused exclusively on the PyMarkdown project for a couple of months, I am
going to try harder to split my time between my different projects.  At the very
least, I hope to try harder to do so.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Python Type Hinting</title><link href="https://jackdewinter.github.io/2022/03/28/markdown-linter-python-type-hinting/" rel="alternate"></link><published>2022-03-28T00:00:00-07:00</published><updated>2022-03-28T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-03-28:/2022/03/28/markdown-linter-python-type-hinting/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/03/14/markdown-linter-pi-day-blues/"&gt;last article&lt;/a&gt;, I
talked about drifting back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project for a while and talk about what is happening there.  One of the things
that I latched on to was Python Type Hints, which is what I dug into the past
week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things have been …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/03/14/markdown-linter-pi-day-blues/"&gt;last article&lt;/a&gt;, I
talked about drifting back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project for a while and talk about what is happening there.  One of the things
that I latched on to was Python Type Hints, which is what I dug into the past
week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things have been very time-consuming in my life recently.  Perhaps in the next couple
of months, I will write an article about it.  Who knows?
The effect of those things happening is that I did not publish an article
last week.  I was about 60% done with a first draft of the article, and I just
ran out of steam.  Nothing bad really happened, it was just that life was very
draining for a couple of weeks, and it caught up to me.&lt;/p&gt;
&lt;p&gt;When it came down to it, I just didn’t feel that I could do my best to complete
the article.  Quite simply, I did not feel that I could author an article
that I would be proud of.  So, I decided to wait to complete it.  And as
the week went on, things in my life resolved and lightened up considerably.&lt;/p&gt;
&lt;p&gt;So here goes.  Sorry for the wait.&lt;/p&gt;
&lt;h2 id="python-is"&gt;Python Is…&lt;a class="headerlink" href="#python-is" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the wonderful things that I like about the Python programming language is
that it is wonderfully untyped.  As someone who is creative, I often find that my
creativity in other languages is slowed down by trying to figure out what types
to use in what scenarios.  Not that types are a bad thing, I just find that using
strict type systems often hinder my creative process.&lt;/p&gt;
&lt;p&gt;As I understand it, one of the cornerstones of the Python language is that it is
the behavior that dictates the language, not the other way around.  To illustrate
that understanding, consider two separate objects that are both initialized to
have a &lt;code&gt;self.my_var&lt;/code&gt; member variable.  The underlying assumption is that if I have
a function whose behavior is to act on that variable, it does not matter which
object or which instance of a class holds that member variable.  The passing of
that object into the function is behavior enough.&lt;/p&gt;
&lt;p&gt;And that kind of thinking that “we are adults in the room” permeates through a
lot of Python.  There are no interfaces as in Java and C#.  Because of the loose
typing, there are no needs for generics.  Things just work.&lt;/p&gt;
&lt;p&gt;But using a language that does not have strict typing also has its share of
problems.  For one, since everything looks the same, any kind of function hinting
in source editors struggles to figure out the proper set of functions to display.
Say a variable was initialized to a &lt;code&gt;None&lt;/code&gt;, then an &lt;code&gt;int&lt;/code&gt;, and then a &lt;code&gt;str&lt;/code&gt;. What
function hints should the editor display and when? It is situations like that
where things get complicated.&lt;/p&gt;
&lt;h2 id="introducing-python-type-hints"&gt;Introducing Python Type Hints&lt;a class="headerlink" href="#introducing-python-type-hints" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have used Python for over four years now, it was only in the last couple
of months that I came across Python Type Hints.  To be clear, the name is exactly
as it sounds.  These are hints, not mandates, for how to interpret types within
the Python languages space.  To use a simple example, consider this Python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"something"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is not really that interesting, therefore it is easy to read.  Therefore, compare
it to the following code, from PyMarkdown’s &lt;code&gt;main.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Main entrance point.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__parse_arguments&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__set_initial_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;new_handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_error_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_strict_mode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;new_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_logging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_plugins_and_extensions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Determining files to scan."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;files_to_scan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;did_error_scanning_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__determine_files_to_scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recurse_directories&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;did_error_scanning_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;total_error_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_main_list_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files_to_scan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files_to_scan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__scan_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;BadPluginError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_scan_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;BadTokenizationError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_scan_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;formatted_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Configuration Error: {this_exception}"&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;new_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plugins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number_of_scan_failures&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;total_error_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What makes this function readable is that most of the heavy lifting has been delegated
off to the ten functions that &lt;code&gt;main&lt;/code&gt; function itself calls.  But look at
the function call to the &lt;code&gt;__determine_files_to_scan&lt;/code&gt;.  What kind of arguments does
that function require?  What kind of return values does that function produce?
Without good answers to those questions, using that function creates some hurdles
that we must jump over.  But what if we could reduce those hurdles a bit?&lt;/p&gt;
&lt;p&gt;That is where type hints come in.  Having already been modified during this past
week, that function definition currently looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__determine_files_to_scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eligible_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;recurse_directories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-are-type-hints-used-for"&gt;What Are Type Hints Used For?&lt;a class="headerlink" href="#what-are-type-hints-used-for" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be redundantly clear, Python type hints are exactly that, hints.  Any Python
code with type hints is
interpreted by Python interpreters without using those type hints.  However,
packages like the &lt;code&gt;Mypy&lt;/code&gt; package and the Python extension for VSCode can be used
to take advantage of those type hints.&lt;/p&gt;
&lt;p&gt;In the case of VSCode, the use of those type hints allows it to provide
better feedback to someone editing Python code.  Having started to apply type hints
to my Python code, I can already see the benefits as I am editing that same code.
Instead of me having to do search-and-replace to find the definition of the
function to determine how to interact with it, most of that information is displayed
in a handy popup that appears when I add the open parenthesis for the function call.
At the top are any type hints that I provided, and at the bottom is any documentation
that I added with a docstring.  That is useful.&lt;/p&gt;
&lt;p&gt;The other strong use that I have found for type hints are in the usage of the
&lt;a href="http://mypy-lang.org/"&gt;Mypy&lt;/a&gt; type checking tool.  From my understanding of this
process, Mypy builds a model of what it is being scanned, including any type hints.
It then compares usage of variables and function to what it believes to be the correct
typing, emitting warnings when the usage does not mirror what it believes to be the
correct types.&lt;/p&gt;
&lt;p&gt;In its normal mode, this is useful in making sure that there is consistent usage
of variables and types throughout a module.  But with that, there is a price to
pay.&lt;/p&gt;
&lt;h2 id="paying-the-price"&gt;Paying The Price&lt;a class="headerlink" href="#paying-the-price" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My first stab at adding type hints started fifteen days ago
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/b469155be7757209fea149e8ca534e3ab63feea2"&gt;with this commit&lt;/a&gt;.
It was not anything grand, but it was a start.  Just some simple changes to see
how things work.  From there, I started to pick off individual modules and
start to convert them where possible.&lt;/p&gt;
&lt;p&gt;Basically, find something to work on, fix it, validate it, and move on.
Then repeat that pattern many, many times.  I found that I was shifting between
responding to the result of this command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run mypy --strict pymarkdown stubs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to figure out what the next change to tackle was, and this command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run mypy pymarkdown stubs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to resolve any fallout from those changes.  Then, when I thought I had a good chunk
of work changed, I would enter this command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ptest -m
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to execute the complete set of tests to verify the changes worked.  And it just
kept on going.  The good news is that I started with over 4400 issues found with
&lt;strong&gt;strict mode&lt;/strong&gt; enabled, and now that is down to 1147 issues.  Getting close to
being done, but not there yet.&lt;/p&gt;
&lt;p&gt;And it is a very costly process to add it to an already existing project.&lt;/p&gt;
&lt;h3 id="cost-1-optional-values"&gt;Cost 1: Optional Values&lt;a class="headerlink" href="#cost-1-optional-values" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the things that I did not think about while writing the Python for the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project was my use of
the &lt;code&gt;None&lt;/code&gt; value.  Instead of producing good default values to denote that
some action was not performed, I just assigned the &lt;code&gt;None&lt;/code&gt; value to the
corresponding variable.&lt;/p&gt;
&lt;p&gt;What was wrong with that?  Nothing at the time.  But when I added type hints, it
forced me to use the &lt;code&gt;Optional&lt;/code&gt; type around the type of the variable.  Instead
of using a type like &lt;code&gt;int&lt;/code&gt;, I found that I had to use the type &lt;code&gt;Optional[int]&lt;/code&gt;.
And that brought a whole lot of extra effort to adding type hints.
Because the keyword literally means that the value can be a valid integer or the
value &lt;code&gt;None&lt;/code&gt;, in places where it was introduced, I had two options.&lt;/p&gt;
&lt;p&gt;The first option was to use the type as it was, returning &lt;code&gt;Optional[int]&lt;/code&gt; from
that function if needed.  But then, I was just delaying the evaluation of the second
option.  If I needed to return an &lt;code&gt;int&lt;/code&gt; or pass an &lt;code&gt;int&lt;/code&gt; while calling another
function, the second option was to do something to remove the &lt;code&gt;Optional&lt;/code&gt; around the type. In
a handful of cases, a well-placed &lt;code&gt;if variable:&lt;/code&gt; statement was used to do just that.
But in most cases, the variable was wrapped in an &lt;code&gt;Optional&lt;/code&gt; type in
the rare occurrence that it would be set to &lt;code&gt;None&lt;/code&gt;.  In those cases, I simply preceded
any reference to that variable with &lt;code&gt;assert variable is not None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That was painful but it was what was needed.  The painful part was that I needed
to then run the &lt;code&gt;ptest -m&lt;/code&gt; command to make sure that all paths through the code
were not triggering that assertion.  And while I would like to see I got them
all on the first try, that was not the case.  In those cases, it was reset and
try again.&lt;/p&gt;
&lt;h3 id="cost-2-getting-types-wrong-in-tokens"&gt;Cost 2: Getting Types Wrong in Tokens&lt;a class="headerlink" href="#cost-2-getting-types-wrong-in-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So far, it has only happened two times, but having a single variable that contains
multiple types is not desirable.  That practice is very undesirable when those
variables are member variables of Markdown tokens.  Because each basic scenario test
validates the list of Markdown tokens produced by the parser, in addition to verifying
the HTML produced by applying a transformation to those tokens, any change in what
is being tokenized can require many scenario tests to change.&lt;/p&gt;
&lt;p&gt;It is through sheer luck that these have been kept to a minimum.  In one case,
it resulted in the correction of three scenario tests.  In the other case, over
three hundred scenario tests needed to be fixed.  The issue?  In some of the failure
cases, the variable was set to the string value of &lt;code&gt;""&lt;/code&gt; instead of the boolean
value of &lt;code&gt;False&lt;/code&gt;.  While both values equal to &lt;code&gt;False&lt;/code&gt; when used in a
Python conditional, enforcing a &lt;code&gt;bool&lt;/code&gt; type meant changing many empty string values
in that particular token to a &lt;code&gt;False&lt;/code&gt; boolean value.&lt;/p&gt;
&lt;h3 id="cost-3-resolving-cycles"&gt;Cost 3: Resolving Cycles&lt;a class="headerlink" href="#cost-3-resolving-cycles" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another cost is one of making sure that I get each module agreeing on which other
modules they need to import, and in which order to import them.  This is particularly important as
Python has no ability to resolve module cycles using forward references. Instead,
as soon as the modules try and resolve their import statements during interpretation,
a cycle is detected, and a cycle exception is raised.  From my research, there are two
ways to get around this.&lt;/p&gt;
&lt;p&gt;The first way is to make sure that the
functions and classes are cleanly organized so that cycles do not occur.  A good
example of this are classes like &lt;code&gt;InlineRequest&lt;/code&gt; and &lt;code&gt;InlineResponse&lt;/code&gt;.  These two
classes used to be contained in the &lt;code&gt;InlineProcessor&lt;/code&gt; module before this work
started.  However, there were a small number of cases where the &lt;code&gt;InlineProcessor&lt;/code&gt;
module imported another module that also needed the &lt;code&gt;InlineRequest&lt;/code&gt; or
&lt;code&gt;InlineResponse&lt;/code&gt; classes.  As such, that other module would try and import those
classes from the &lt;code&gt;InlineProcessor&lt;/code&gt; module, causing a cycle to occur.&lt;/p&gt;
&lt;p&gt;The solution?  By lifting those two classes out of the &lt;code&gt;InlineProcessor&lt;/code&gt; module
and into their own modules, other modules could them import those two classes
without importing the &lt;code&gt;InlineProcessor&lt;/code&gt; module.  This was the easiest way to break
the cycle.&lt;/p&gt;
&lt;p&gt;But in some cases, this was not possible.  While things worked properly when
typing was not in the picture, there were a small number of cases where the
&lt;code&gt;import&lt;/code&gt; statement was needed with no way to reduce the cycle.
That is where the second method of avoiding cycles comes in.
For these
cases, the following pattern was used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TYPE_CHECKING&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;TYPE_CHECKING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# pragma: no cover&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown.tokenized_markdown&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ParseBlockPassProperties&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It took me a while to find this, but it works cleanly.  Having a good understanding
of how type hints could get complicated, the &lt;code&gt;TYPE_CHECKING&lt;/code&gt; global variable was
added as a work-around.  Set to &lt;code&gt;False&lt;/code&gt; by default and to &lt;code&gt;True&lt;/code&gt; by Mypy, the
above fragment of code only imports if type checking is enabled.&lt;/p&gt;
&lt;p&gt;How does this help?  As the code works fine without the type hints, the above
import is only being done to ensure that the type hints are correct.  As type
hints are not necessary for the normal interpretation of the Python code, the
interpreter can safely disregard any type hints.  Therefore, as the type hints
are only used for type checkers like Mypy, the &lt;code&gt;TYPE_CHECKING&lt;/code&gt; global variable
is used to detect if that is the current evaluation mode of the module, only
importing if that is the case.&lt;/p&gt;
&lt;p&gt;It took me a while to get behind it.  But from my experience, it is both simple
and brilliant at the same time.  It is a good example of cleanly dividing
responsibilities.&lt;/p&gt;
&lt;h2 id="how-is-the-work-coming-along-is-it-worth-it"&gt;How Is the Work Coming Along?  Is It Worth It?&lt;a class="headerlink" href="#how-is-the-work-coming-along-is-it-worth-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned early, Mypy has gone from detecting issues in the 4500-issue range
to the 1100-issue range, with that number decreasing with each change.  It is a
prolonged process, but I feel that it is a good one.  I can already
see benefits in VSCode when I am editing the project.  On top of that, it has
helped me to clarify some of the implementation details that I have done over the
course of the last two years.  Those are good things.&lt;/p&gt;
&lt;p&gt;But do not get me wrong, it is a slog.  This effort does not erase any technical debt
and does not make the project function any better.  What it is doing for me is
to make the code more maintainable and more readable. While it is not erasing
any technical debt, it is improving the quality of the project.  That it not as
quantifiable to others, but to me it is an important quantification.&lt;/p&gt;
&lt;p&gt;And while others might not understand that difference, it is good enough for me.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With over 75% of the project converted, the best answer that I can give right now
is that I hope to have the conversion finished by the end of the week.  Not sure
if it is possible, but I am going to try for it!
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Pi Day Blues</title><link href="https://jackdewinter.github.io/2022/03/14/markdown-linter-pi-day-blues/" rel="alternate"></link><published>2022-03-14T00:00:00-07:00</published><updated>2022-03-14T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-03-14:/2022/03/14/markdown-linter-pi-day-blues/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;, I
talked about the reasoning and designs behind the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
too that I use.  In this article, I drift back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project for a while and talk about what is happening there.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things over here at my house have been a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;, I
talked about the reasoning and designs behind the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
too that I use.  In this article, I drift back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project for a while and talk about what is happening there.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things over here at my house have been a bit rocky professionally and personally.
It is nothing serious and nothing that I cannot deal with given the proper time
and mindset to deal with it.  Just multiple things converging at the same time
making life difficult for a while.  As such, while I did want to make more progress with the
Project Summarizer tool, the extra bandwidth in my personal life just was not there.
Rather than try and force work on the tool and then not being happy with myself
or my effort, I decided to bounce back to the PyMarkdown project and concentrate
on familiar ground for a while.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/152c2561f569dd4444c2f8f8f4625bf67ae7e774"&gt;13 Feb 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/524c38ea3af62cfbef285452cab8b370f1904926"&gt;13 Mar 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="state-of-the-project"&gt;State Of The Project&lt;a class="headerlink" href="#state-of-the-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Wow… a whole month has passed and there have been a lot of minor changes here
and there to the PyMarkdown project.  While there are no new stellar features to
report, I feel that the nested container testing is coming along.  Granted,
it is coming along slowly, but I can see that the progress in stability is worth
the effort.&lt;/p&gt;
&lt;p&gt;I guess that is why, during this weird time where multiple negative events seem
to be hitting at the same, I find solace in this work.  Do not get me wrong.  The
work itself is needed for the project. And it is creative, but
it is also a very constrained problem space.  Somewhat like a logical fuzzy blanket
that I can use for a while.&lt;/p&gt;
&lt;p&gt;For those that do not understand, let me try and explain it this way.  Sometimes,
when walking through our house, things can seem out of sort to me.  When this happens,
I look around for a handful of things
that I can clean up in five or ten minutes that will have a decent impact on how
I think the room looks.  I might not clean everything up and I might just reorganize
things to look cleaner, but that action helps me put my mind at ease. And for the record,
the messiest room in our house is not my office, it is the kitchen followed closely
by our dining room table.&lt;/p&gt;
&lt;p&gt;In a similar fashion, I find that cleaning up code and making a project
better helps me to clean up some of the “mess” in my mind. It is not the
same thing, nor does it have the same level of impact.  But still, it helps.  Whether
it is improving documentation, adding more specific scenarios tests, or cleaning up code that
I was not happy with, it is all about leaving the project a bit better than when
I found it. That is what helps me put my mind at ease.&lt;/p&gt;
&lt;h2 id="python-dataclasses-typing-and-mypy"&gt;Python, DataClasses, Typing, and Mypy&lt;a class="headerlink" href="#python-dataclasses-typing-and-mypy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have been learning and exploring in Python over the last five years.  In that
learning, I often find that the learning takes its own time and happens at the
weirdest of times. And I just hit one of those learning “bumps”.&lt;/p&gt;
&lt;p&gt;During the odd downtime in my professional job or in my personal projects, I browse
various parts of the web.  In some cases, it is to search for a better way to do
something, and in other cases it is just about exploring.  Either way, I often learn
about interesting things that spark my creativity.&lt;/p&gt;
&lt;p&gt;It was while I was working on research for another project that I came across a
concept known as data classes.  Covered more completely at the
&lt;a href="https://docs.python.org/3.8/library/dataclasses.html"&gt;Python Docs Pages&lt;/a&gt;,
the base concept behind dataclasses is a simple one.  Instead of setting up a class
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="nd"&gt;@x_index.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="nd"&gt;@y_index.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you can set up a class like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;

&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even more interesting are the cases where you do not want those values to be
changed.  In that case, using &lt;code&gt;@dataclass(frozen=True)&lt;/code&gt; will not generated any
setters for the class.&lt;/p&gt;
&lt;p&gt;To be clear, truly immutable objects in Python is not possible, but this language
feature comes close to it. Knowing the design of the PyMarkdown project
as I do, I thought dataclasses would be useful and started looking at them more
in-depth.&lt;/p&gt;
&lt;h2 id="python-typing"&gt;Python Typing&lt;a class="headerlink" href="#python-typing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My research flowed from dataclasses into one of the concepts
that they introduced me to: Python Typing.  In the dataclass example above, the variable
is specified with a type that follows it.  That type is what Python calls a “Type
Hint” and simply supplies a hint as to what the developer thought that type should
be.  The Python interpreters do not do anything with that themselves, but tools
such as &lt;code&gt;Mypy&lt;/code&gt; use that information to check to see if each type usage lines up.&lt;/p&gt;
&lt;p&gt;After reading the &lt;a href="http://mypy-lang.org/"&gt;Mypy documentation&lt;/a&gt;, or at least
a good handful of examples, I was hooked. There really is not a TL;DR on this, but
here is my first take on it.&lt;/p&gt;
&lt;p&gt;Type Hints are exactly as they sound, hints.  In a normal Python interpreter,
if the type hints do anything, they are essentially null operations.  But with other
tools, such as editors and Mypy, they provide extra type information that is used
is various forms. For editors, this information is often used to show type information
when the developer is changing a Python file. For Mypy, it evaluates assignments
and parameters to ensure that the specified types suggested by the developer are
being adhered to.&lt;/p&gt;
&lt;p&gt;That is it. But in that lies its simplicity and usefulness.  There is no switch
in the Python interpreter that says “Thou shalt use type hints!”  Instead, as things
progress, I can add type hints to different classes as I have time. After I have
added those type hints, Mypy will start checking assignments to and within those
classes. And my VSCode editor will have extra type information to provide better
information when I am editing the project files.&lt;/p&gt;
&lt;h3 id="where-does-this-lead"&gt;Where Does This Lead?&lt;a class="headerlink" href="#where-does-this-lead" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over the course of the next few weeks, I am going to try and add in Type Hints
where I can and see how that goes. I have already transformed a handful of data-only
classes into &lt;code&gt;dataclasses&lt;/code&gt;, and that went off without any fuss. I am plodding
along with resolving the parsing issues, but I am “plodding” at a good pace.&lt;/p&gt;
&lt;p&gt;One thing that I have noticed is that it has been over a month since the last
incremental release.  My current plan is that once I hit a solid wall with any
remaining issues, I am going to make sure things are clean and get that next
incremental release out.  I know I still have more scenario tests to add and
test, but the fixes from the last month are decent and need to be published so
that users can receive fixes for those issues.&lt;/p&gt;
&lt;p&gt;I wish that I had the extra bandwidth to be creative and work on the Project
Summarizer tool, but I acknowledge that my head is just not currently in the
right space for that.  But that doesn’t mean I cannot still be productive!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am hoping that things start settling down in my life in the next week or two.
But a lot of that is currently out of my control. I am dealing with it at a good
pace, just a decent number of things to figure out and deal with.  So, to be honest, I am
not sure what I am going to work on this week.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Project Summarizer - Designing and Implementing the Summarizer</title><link href="https://jackdewinter.github.io/2022/02/28/project-summarizer-designing-and-implementing-the-summarizer/" rel="alternate"></link><published>2022-02-28T00:00:00-08:00</published><updated>2022-02-28T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-02-28:/2022/02/28/project-summarizer-designing-and-implementing-the-summarizer/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;, I
talked about the reasoning behind one of the tools I use:
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;.
In this article, I talk more about the reasoning and designs behind the tool, and
the recent improvements I have made to it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes you can use a screwdriver when …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;, I
talked about the reasoning behind one of the tools I use:
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;.
In this article, I talk more about the reasoning and designs behind the tool, and
the recent improvements I have made to it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes you can use a screwdriver when you need a hammer, and sometimes you can
use a hammer when you need a screwdriver.  But more often than not, you really
need to have the right tool for the job you are doing.  If nothing else, you want
to make sure that you know you did things right and did not take any short cuts.&lt;/p&gt;
&lt;p&gt;Once I had identified a set of requirements and could not find
a tool that was meeting those requirements, I knew I needed to do something. The
result of meeting those requirements was the Project Summarizer tool.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pyscan/commit/379b519ffe0652cebbdc9a94d7a84023f925d46f"&gt;15 Feb 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pyscan/commit/f09dac83bdd0dcc2f8895c0f91b68bc04a8d5923"&gt;20 Feb 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="some-quick-design-work"&gt;Some Quick Design Work&lt;a class="headerlink" href="#some-quick-design-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned in my &lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;,
I had a set of requirements that were not being fulfilled by other tools.  Namely,
those requirements were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to summarize the analyses of other tools&lt;/li&gt;
&lt;li&gt;to give me immediate feedback on how my changes affect code metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While these were not very extensive requirements, they were the guiding principles
that drove the initial development of the Project Summarizer tool.&lt;/p&gt;
&lt;p&gt;From the beginning, the way I envisioned this tool as something that was fast and took
information from other tools to summarize.  The first use case was for my own
Python projects, so meeting those requirements for my Python projects was of course my
first goal.  To carry out that goal,
the new tool needed to fit into the scripts that I use to run tests on my projects.
Added as part of the test scripts, I knew that I had two output files at my disposal:
the XML coverage file from &lt;code&gt;coverage.py&lt;/code&gt; and the XML tests file from &lt;code&gt;pytest&lt;/code&gt;.
Using those files, I knew I could provide a summary of any changes in tests or test
status, and I could provide a summary of high-level coverage numbers.&lt;/p&gt;
&lt;h2 id="is-it-enough-to-help-me"&gt;Is It Enough To Help Me?&lt;a class="headerlink" href="#is-it-enough-to-help-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Would that buy me enough benefit to make it worth the cost?  Yes!  At the time,
once I finished making changes, the four questions that I always found myself
asking were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;did I make the right fix?&lt;/li&gt;
&lt;li&gt;how did it affect the tests that I already had in place?&lt;/li&gt;
&lt;li&gt;did the fix require the addition of new tests to cover the new code in the fix?&lt;/li&gt;
&lt;li&gt;did the fix create code that is no longer needed, and is safe to be deleted?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first question is one that I seriously believe can only be answered by thorough
testing, experience with the code, and time.  The best answer that I can usually
hope for to that question is “yes, for now”.  As time goes on, that answer will
either lean towards or away from that “yes”.  It is often hard to tell in isolation.&lt;/p&gt;
&lt;p&gt;However, I felt that the remaining three questions could easily be answered by
data.  How did I know that?  Because I had manual tasks that I performed to answer
those questions.  For the first question, I looked at the PyTest output to see
if anything failed.  If something failed, I look at the PyTest HTML files to see
what tests failed and why.  For the second and third questions, I went right to
the HTML coverage output, and followed a similar procedure.  And I figured that
if I could do it manually, I could automate it.&lt;/p&gt;
&lt;p&gt;If I could automate that process, it would be good enough for me.&lt;/p&gt;
&lt;h2 id="getting-off-the-ground"&gt;Getting Off The Ground&lt;a class="headerlink" href="#getting-off-the-ground" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The initial version of Project Summarizer (originally called PyScan) was quickly
put together, meeting these
requirements head on.  Using the XML files as input, I quickly dug the
required statistics out of those files.  For the test output files, I only needed
to know if a test was added, removed, or changed status.  For the coverage output
files, I only needed to know if the various coverage metrics changed.&lt;/p&gt;
&lt;p&gt;At that point, I realized that I needed to introduce a third requirement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to create a “checkpoint” that could be used to compare current values against.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I looked at the raw summary numbers from the file, the one thing that they were
missing was context.  To be blunt, I found it difficult to remember if I had 128
tests or 129 tests before I made the change to add a new test.  I did not care
most of the time. What I cared about was whether the number of tests increased
by one to match the one test that I added.  This pattern carried over into the
coverage requirements.  I only cared about the change in coverage, not the current
coverage number.&lt;/p&gt;
&lt;p&gt;But to generate a difference value, you need to have a value to compare the current
value against.  That was missing at that point, so I created it.  Thus, the &lt;code&gt;publish&lt;/code&gt;
directory was created and the &lt;code&gt;--publish&lt;/code&gt; flag added to the Project Summarizer.
By publishing the existing summary to the &lt;code&gt;publish&lt;/code&gt; directory, any current change
was able to be measured against that checkpoint.  I did have to establish a habit
of running my &lt;code&gt;clean&lt;/code&gt; test script with the &lt;code&gt;-p&lt;/code&gt; option to publish the results when
I closed out a fix, but that habit was not too bad to form.&lt;/p&gt;
&lt;p&gt;And things were coming together nicely.  I was able to update either source code
or test code, and a summary of those changes was being reported
to the command line.  After a couple of weeks, I invested some time into learning
about the &lt;a href="https://pypi.org/project/columnar"&gt;Columnar&lt;/a&gt; package and used it to better organize the output.
And it was not fancy, but it worked and worked well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Results Summary
--------------------


  CLASS NAME                               TOTAL TESTS  FAILED TESTS  SKIPPED TESTS

  test.nested_three.test_markdown_nested_     133             1 (+1)         8 (-1)
  three_block_ordered
  test.test_markdown_extra                     87 (+7)        2 (+2)         1
  ---                                        ----             -            ---
  TOTALS                                     4528 (+7)        3 (+3)       171 (-1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Taken from some work that I did during the past week, this clearly showed me what
was going on with my changes.
As this was a focused execution of tests, I had the coverage summary disabled.  But
the information provided by the test results was particularly useful.  I had added seven
tests and removed the &lt;code&gt;@pytest.mark.skip&lt;/code&gt; from one test, which is reflected in
the output.  And as I was working on resolving issues, I had five of the tests
taken care of, with three failed tests remaining.  That was exactly the information
that I needed to know I was going in the right direction.&lt;/p&gt;
&lt;h2 id="time-passes-and-the-tool-matures"&gt;Time Passes… And The Tool Matures&lt;a class="headerlink" href="#time-passes-and-the-tool-matures" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continued to use the Project Summarizer tool for about a year before I started
to think about making changes to it.  And even then, it took me having a couple of
issues calling it from another script to get me to realize that I needed to make
a couple of changes.  And those changes were not substantial changes, but simple usability
changes.&lt;/p&gt;
&lt;p&gt;I had one issue when calling Project Summarizer from a script, where it had a
challenging time figuring out a consistent answer to the question “what is the width of
the screen”.  As &lt;a href="https://pypi.org/project/columnar"&gt;Columnar&lt;/a&gt; bases its organization of the columns on the
number of character columns on the display, it raised an interesting question of
what to do if there was no actual terminal.  There are defaults built into Columnar,
but they did not seem to be consistent.  And if I wanted predictable behavior, I
needed consistency.&lt;/p&gt;
&lt;p&gt;Therefore, the &lt;code&gt;--columns&lt;/code&gt; argument was added.  This would override any calculated
values and force the Columnar package to a specific size.  At the same time, I
figured that there were cases where that output was not important.  As such, I
also added a &lt;code&gt;--quiet&lt;/code&gt; argument to suppress the columnized output.&lt;/p&gt;
&lt;p&gt;The second issue that I had was that the reporting and publishing directories were
both hardcoded.  That was easily fixed with the &lt;code&gt;--report-dir&lt;/code&gt; and &lt;code&gt;--publish-dir&lt;/code&gt;
arguments.  While I do not predict changing these directories in my own setup,
it did sound like a solid addition to the tool.&lt;/p&gt;
&lt;h2 id="why-now"&gt;Why Now?&lt;a class="headerlink" href="#why-now" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I guess the question that I left unanswered was: why did I feel that I needed to
work on this now?&lt;/p&gt;
&lt;p&gt;The simple answer was that I found other things to measure.  One of the things that I
currently measure is the number of PyLint warnings in the current project.  But
that information is hard to see, and I would like to have better visibility into
how those values have changed on an ongoing basis.  But when I thought about how
to design that tool to include summary information, I decided instead that it would
be better for the Project Summarizer to do that reporting for me.&lt;/p&gt;
&lt;p&gt;But that meant I needed to update the Project Summarizer to manage more information.
As I started to do that design, it just seemed like the right thing to get those
changes I had in mind out of my head and into the project. The good news is
that even after I got those changes out of the way, it still felt like a good idea
to upgrade the Project Summarizer tool to be extendible.&lt;/p&gt;
&lt;p&gt;In fact, I seriously think it is a great idea!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week, I plan to do more research and design into making the Project Summarizer
tool more extensible.  Hopefully, that means I will have something interesting
to report next week.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="project summarizer"></category></entry><entry><title>Project Summarizer - Why Was It Needed?</title><link href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/" rel="alternate"></link><published>2022-02-21T00:00:00-08:00</published><updated>2022-02-21T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-02-21:/2022/02/21/project-summarizer-why-was-it-needed/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/14/markdown-linter-grinding-away-at-issues/"&gt;last article&lt;/a&gt;, I talked
about taking a break from scenario testing the nested containers in the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project
and just getting back to fixing simple issues.  In this article, I talk about taking more of
a break to upgrade one of the tools I use: Project Summarizer …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/14/markdown-linter-grinding-away-at-issues/"&gt;last article&lt;/a&gt;, I talked
about taking a break from scenario testing the nested containers in the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project
and just getting back to fixing simple issues.  In this article, I talk about taking more of
a break to upgrade one of the tools I use: Project Summarizer&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If a competent developer is talking honestly about their development prowess, the
lion’s share of that prowess is because of the tools they use every day in their
work.  If a developer must stop and think about how to use the tools at their
disposal, they often lose track of what they were thinking about.  After a task-
switch or context-switch like that, it can take up to half an hour to get back
to where they were.&lt;/p&gt;
&lt;p&gt;That is why good tools are important.  The tools that a developer uses must be
able to make the developer more efficient by keeping the developer &lt;em&gt;in the moment&lt;/em&gt;
and solving the problem that they are working on.  Not in trying to figure out how
to bend the tools they use to their needs.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pyscan/commit/379b519ffe0652cebbdc9a94d7a84023f925d46f"&gt;15 Feb 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pyscan/commit/f09dac83bdd0dcc2f8895c0f91b68bc04a8d5923"&gt;20 Feb 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-makes-a-good-tool"&gt;What Makes A Good Tool?&lt;a class="headerlink" href="#what-makes-a-good-tool" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From my experience, there are three types of tools that are useful for developer efficiency:
editors, monitoring, and analysis.  While there may be more tools from someone else’s
point of view, those are the categories that I use.&lt;/p&gt;
&lt;h3 id="editors"&gt;Editors&lt;a class="headerlink" href="#editors" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The choice of an editor for a developer is very much a religious thing.  For all
intents and purposes, this is where the developer will live while they are writing
their programs.  As such, it needs to feel right to them.  If it does not feel right
to them, they will not be as efficient as with a “good” editor.  And to be honest,
the &lt;em&gt;feel&lt;/em&gt; of an editor really does depend on the developer.&lt;/p&gt;
&lt;p&gt;Take the editor &lt;code&gt;vi&lt;/code&gt;.  A standard of Linux systems since the beginning, it is a very
capable editor, but one with a steep learning curve.  However, I have known developers
that can make the keys fly and just make the editor sing with their code changes.  Then there
are the families of editors, such as the &lt;a href="https://www.jetbrains.com/"&gt;JetBrains&lt;/a&gt;
family of editors.  Supporting a staggering twelve development environments, JetBrains
is clearly a leader when it comes to development editors.  In their case, they
leverage a common look and feel, along with well tested development tools, to provide multiple
native editors for twelve distinct languages.  This works well because developers often
use multiple languages, and with a JetBrains editor, you can switch languages without
having to relearn large parts of the editor’s look and feel.&lt;/p&gt;
&lt;p&gt;And that brings me to &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;.  At some point, Microsoft
decided that they wanted to join the fray, and their answer was VSCode.  Immensely popular
with developers across many languages, it uses extensions and plugins to allow developers to customize
their development experience to the way they want it.  For example, on my instance of
VSCode I have the Python extension and the Pylance extension enabled for writing
Python, with &lt;a href="https://sourcery.ai/"&gt;Sourcery&lt;/a&gt; and
&lt;a href="https://www.codiga.io/"&gt;Code Inspector&lt;/a&gt; to supply an instant analysis.  I am currently
narrowing down my favorite Git extension to one of two plugins, but VSCode is okay
with me having both installed at the same time.&lt;/p&gt;
&lt;p&gt;That is why I feel that the true reason VSCode is popular: because it is so configurable.  As I
mentioned at the top of this section, the choice of editors is a religious thing.
If something is not working well for me, I can try new extensions to bring it more
in line with my developer process.  Basically, I can fine-tune the &lt;em&gt;feel&lt;/em&gt; as much
as I want to.  And that is what makes VSCode such a powerful editor for me.  I can
write Bash scripts in it, Python modules in it, or C++ files.  Each language with
the same level of support as the other two.&lt;/p&gt;
&lt;p&gt;The common thread here is that for an editor to be effective for a given developer,
it must make them more efficient and not get in the way.  And that means being
very customizable.&lt;/p&gt;
&lt;h3 id="monitoring"&gt;Monitoring&lt;a class="headerlink" href="#monitoring" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Monitoring tools are often forgotten, but I believe that they are a major component of a developer’s
toolbox.  These tools are anything that allow the developer to examine and monitor
their applications in action once they have been completed.  Whether it is something
as simple as having the Windows Task Manager application open in Summary View mode
(go to &lt;code&gt;Performance&lt;/code&gt;, right click on &lt;code&gt;CPU&lt;/code&gt;, and select &lt;code&gt;Summary View&lt;/code&gt;), or pairs
of applications such as Linux’s &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;watch df -h&lt;/code&gt; commands, these tools help
the developer to decide if their applications are behaving properly.&lt;/p&gt;
&lt;p&gt;And while it might not be a popular choice, I also throw Unit Testing and Scenario
Testing into this part of the toolbox.  Because these tests are actively examining
the output of the application with various inputs, I feel that they are critical
in determining if the application is performing as expected. Especially if these
tests are paired with a solid Continuous Integration workflow, their monitoring
of any external changes in the application are pivotal to the application’s success.&lt;/p&gt;
&lt;p&gt;The common thread for these monitoring tools is that the monitoring tools must present
the developer a solid look at the application, both the environment that it
is executing in and how it is performing itself within that environment.&lt;/p&gt;
&lt;h3 id="analysis-tools"&gt;Analysis Tools&lt;a class="headerlink" href="#analysis-tools" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And finaly, there are the Analysis tools.  These can often be the most controversial
tools to talk about because of what they do: analyze how well the application measures
against a given metric.  These tools can include, but are not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;formatters that automatically change the &lt;em&gt;style&lt;/em&gt; of the code to match a single style&lt;/li&gt;
&lt;li&gt;linters that scan the code for known errors or anti-patterns, and reporting them&lt;/li&gt;
&lt;li&gt;coding assistant that provides analysis within the editor&lt;/li&gt;
&lt;li&gt;summarizers that take a more complicated analysis and break it down into easier to digest bites&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good example of the formatter tool is &lt;a href="https://pypi.org/project/black/"&gt;Black&lt;/a&gt;.
Used on the various projects that I work on; this formatter ensures that every
line of Python is formatted in a single consistent manner.  From their website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Blackened code looks the same regardless of the project you’re reading. Formatting becomes transparent after a while and you can focus on the content instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And from experience, it is particularly good at achieving that goal.   I do not find myself
focusing on the formatting at all, because I know Black will pick that up.&lt;/p&gt;
&lt;p&gt;In that same vein, the &lt;a href="https://www.pylint.org/"&gt;PyLint&lt;/a&gt; linting tool provides a
useful tool for scanning for well-known issues in Python code.  It does not have
a great tag line like Black but provides useful indicators that help me
write better Python code every day.  I can honestly say that I have avoided a
lot of coding issues simply by dealing with most PyLint warnings. Like
my use of Black for formatting, my experience with PyLint allows me to write
Python code without worrying about the &lt;a href="https://www.merriam-webster.com/dictionary/nitty-gritty"&gt;nitty-gritty&lt;/a&gt;
of the language.  I have confidence that PyLint has my back when it comes to
catching a lot of the commonly seen antipatterns.&lt;/p&gt;
&lt;p&gt;Next up are the coding assistant tools.   These are analyzers that are executed within
the scope of the editors and supply near instant feedback.  The reason that these tools are
useful is that instead of waiting until the code is completed, these tools provide
near-immediate feedback on what a developer is writing.  I currently use
&lt;a href="https://www.codiga.io/"&gt;Code Inspector&lt;/a&gt; to run a version of the PyLint checks
as well as &lt;a href="https://sourcery.ai/"&gt;Sourcery.Ai&lt;/a&gt; for more insightful analyses.
Both tools provide different insights while I am writing my Python code,
but both are useful.  And as those insights are being provided as I
code, I can wait for a good breaking point, check out those insights, and determine
how best to respond to them.  It just works.&lt;/p&gt;
&lt;h4 id="why-can-these-analysis-tools-be-controversial"&gt;Why Can These Analysis Tools Be Controversial?&lt;a class="headerlink" href="#why-can-these-analysis-tools-be-controversial" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Just a note here.  This is my opinion, from my experiences.  The experiences
of readers may vary from what I am about to say.  Basically, read these next
paragraphs with an open mind.&lt;/p&gt;
&lt;p&gt;From my experience, software developers have a tough time removing themselves from
the code that they write.  As such, if you run an analysis on “their” code, they
can feel that you are judging them, as they created the code.  And people do not
like being judged.  Therefore, they would rather feel better and not analyze their
code to see how it can be better.&lt;/p&gt;
&lt;p&gt;Now, that is a loaded viewpoint, but I believe it is a fairly accurate one.  Even I
suffered from that tainted viewpoint of “my code is my me” in the early stages of
my career.  But after a while,
I realized that while my code is an expression of myself, so are the tools that I
can use to make that code better.  However, that was not an easy step for
me to take.  It took about a decade for me to make that transition, and there
were many times I moved one step forward only to follow that with two steps
backward.&lt;/p&gt;
&lt;p&gt;Finally, at one point, it was a conversation with a colleague that cemented by
current view for me.  When talking about code analysis tools and code coverage, he
mentioned his skills as a carpenter.  He mentioned that no one would have a
problem if he came to a project with a new hammer or a different tool than
expected if the results justify it.  He then continued on that path
and switched to software projects, where he saw many of his colleagues wince at
his suggestion of a better tool or a separate way of approaching the process.
He thought it was… er… stupid and silly.  But that conversation is the one
that finally got me cemented on my current way of thinking about analysis tools.&lt;/p&gt;
&lt;p&gt;But not everyone is there.  And it takes experience to know to walk that path.&lt;/p&gt;
&lt;h2 id="summarizer-tools"&gt;Summarizer Tools&lt;a class="headerlink" href="#summarizer-tools" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But what about summarizer tools?&lt;/p&gt;
&lt;p&gt;To be blunt, I did not find any.  And it was driving me nuts.  I love having
a short cycle between making changes and seeing their results.  The shorter
the better.&lt;/p&gt;
&lt;p&gt;But when it came to Python tests via PyTest, the closest thing
to a tool I had was to manually open the PyTest results page and look through
there.   The main console display would show me pass/fail easily enough, but
it would not group them according to the file.  That was only available by examining
the HTML output.  A similar pattern existed with Code Coverage.  I would make
a change, test it out, and then have to open the HTML coverage webpage to figure
out if I had every line and path covered.  I had to type those two URLs into
the browser so often that I created a new script with the content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;start report\coverage\index.html
start report\report.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But I knew there had to be a better way of doing things.  I quickly came
to one conclusion. I needed to write my own tool to summarize the analyses
of other tools.  I needed something I could run with every commit and between
commits to give me immediate feedback on how I was doing.&lt;/p&gt;
&lt;p&gt;And thus, Project Summarizer was born.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having laid the groundwork for why I needed Project Summarizer, it was time
for me to design it with good requirements in place.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="project summarizer"></category></entry><entry><title>Markdown Linter - Grinding Away At Issues</title><link href="https://jackdewinter.github.io/2022/02/14/markdown-linter-grinding-away-at-issues/" rel="alternate"></link><published>2022-02-14T00:00:00-08:00</published><updated>2022-02-14T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-02-14:/2022/02/14/markdown-linter-grinding-away-at-issues/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/07/markdown-linter-is-it-worth-it/"&gt;last article&lt;/a&gt;, I talked
whether the painstaking work that I am doing to enumerate every use case is worth
it.  In this article, I talk about taking a break from scenario testing the
nested containers and just get back to fixing simple issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Add north of …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/07/markdown-linter-is-it-worth-it/"&gt;last article&lt;/a&gt;, I talked
whether the painstaking work that I am doing to enumerate every use case is worth
it.  In this article, I talk about taking a break from scenario testing the
nested containers and just get back to fixing simple issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Add north of fifty scenario tests to address a slice of the scenarios possible
with three level nested containers.  Work through each one and see if it passes
or fails.  Categorize the failures and work through them in groups.  Rinse and
repeat for a month or so. It was just getting a bit monotonous and boring.
That meant that it was starting to feel more of a chore than a good project to
work on.&lt;/p&gt;
&lt;p&gt;To combat that feeling, I decided to work on a few of the easier
issues in the issues list.  If nothing else, I could get issues off the backlog
and off my plate.  But I just wanted to change things up for a bit.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5602d41792ec9dc9cced4038e422834027be9e95"&gt;07 Feb 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/152c2561f569dd4444c2f8f8f4625bf67ae7e774"&gt;13 Feb 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="version-095"&gt;Version 0.9.5&lt;a class="headerlink" href="#version-095" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, right off the mark, the first thing to happen this week is that I released version
&lt;a href="https://github.com/jackdewinter/pymarkdown/releases/tag/v0.9.5"&gt;0.9.5&lt;/a&gt;
of the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project.  It had been roughly a month since the last release and having completed
a solid number of fixes for issues with nested containers, I thought it was a good
time to publish them.&lt;/p&gt;
&lt;p&gt;Not really anything exciting to report there.  Just some bug fix goodness.&lt;/p&gt;
&lt;h2 id="fixing-some-easy-issues-issue-95"&gt;Fixing Some Easy Issues - &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/95"&gt;Issue 95&lt;/a&gt;&lt;a class="headerlink" href="#fixing-some-easy-issues-issue-95" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having just released an updated version of PyMarkdown, I decided to look at the project’s
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues"&gt;Issues List&lt;/a&gt;
and find and fix a few of the more visible issues in the list.  The first one
that I grabbed was an issue that had been in the list for about a month that
I knew was going to be a tricky issue to resolve.  But as I had the time to
take care of it, it was one that I definitely wanted to resolve.&lt;/p&gt;
&lt;p&gt;It ended up taking as much time to resolve as two or three nested container
issues, but it was well worth it.  By the time I was finished, I had made changes in
the Container Block Processor module, the List Block Processor module, the
TransformToMarkdown module and the code for Rule Md027.  There was a lot of head
scratching along the way, but I persevered through it, and figured out all the
changes.&lt;/p&gt;
&lt;p&gt;Why was it so complicated?  The Markdown document itself was relatively simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="n"&gt;this&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;good&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it was the &lt;code&gt;+&lt;/code&gt; character on the last line that caused issues.  The first issue
was that up
until this point, I have not exhaustively tested three-level nested container blocks.
This document is essentially a Block Quote/Unordered List/Block Quote element nesting,
with the two remaining issues being the two of the big concepts I have left to test
in my nesting scenarios:  ending container support and new List Item element support.&lt;/p&gt;
&lt;p&gt;To break it down properly, ending container support is when the use of something
in a later line causes one or more of the containers elements to end.
In this case, the new List Item &lt;code&gt;+&lt;/code&gt; character signifies the start of a new List Item
within the level-two List element.  As a level-three Block Quote element was in
effect, that level-three element is closed to allow the new List Item to start.
While these do not usually cause issues, it did in this case, and I had to mitigate
that. The other reason is new List Item element support.  While I have orchestrated
all the combinations of Block Quote characters and their “missing” cases, I have
not started yet on the same process for new List Item elements.  As some of the
List element information is stored in the List Item tokens, it just needed to be
worked out.&lt;/p&gt;
&lt;p&gt;None of these were unexpected issues, but I did not expect for them to happen at
the same time. I just buckled down and worked through all the issues.  Since
this issue had annoyed me for at least a couple of months, it was good to get it
out of the way and cleaned up.&lt;/p&gt;
&lt;h2 id="user-request-slight-change-to-rule-md003"&gt;User Request: &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/154"&gt;Slight Change To Rule Md003&lt;/a&gt;&lt;a class="headerlink" href="#user-request-slight-change-to-rule-md003" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the other issues that leapt out to me was a user request regarding Rule Md003.
In its default style of &lt;code&gt;consistent&lt;/code&gt;, that rule searches for the first use of a heading,
either an Atx Heading or a SetExt Heading.  As the main purpose of this rule is
to check for consistent use of headings throughout the Markdown document, the rule
uses that first heading as the basis for its evaluation of the rest of the document.&lt;/p&gt;
&lt;p&gt;For example, given the Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;heading&lt;/span&gt;
&lt;span class="o"&gt;=================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and a setting of &lt;code&gt;consistent&lt;/code&gt;, the rule rightfully assumes that the document author
wants to use SetExt Headings in the document.  The problem with that is the following
document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;This is a heading&lt;/span&gt;
&lt;span class="gh"&gt;=================&lt;/span&gt;

### This is another heading
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As there are only two SetExt Heading sequences, &lt;code&gt;=&lt;/code&gt; for level one headings and
&lt;code&gt;-&lt;/code&gt; for level two headings, an added style of &lt;code&gt;setext_with_atx&lt;/code&gt; was created to allow
for this mashup of level one and level two SetExt Headings and level three plus
Atx Headings. But from the &lt;code&gt;consistent&lt;/code&gt; style point of view, there is one
problem: there is no way to distinguish between a style of &lt;code&gt;setext&lt;/code&gt; and &lt;code&gt;setext_with_atx&lt;/code&gt;
using only the first line of the document.  As such, it is safest to assume a style
of &lt;code&gt;setext&lt;/code&gt; without any other context being available.&lt;/p&gt;
&lt;p&gt;To address the user’s request, I decided to add a new configuration value for
this rule: &lt;code&gt;allow-setext-update&lt;/code&gt;.  When enabled, the original assumed style is
still &lt;code&gt;setext&lt;/code&gt;.
However, when a level three plus Atx Heading is encountered and the &lt;code&gt;allow-setext-update&lt;/code&gt; value
is set to &lt;code&gt;True&lt;/code&gt;, the style is updated from &lt;code&gt;setext&lt;/code&gt; to &lt;code&gt;setext_with_atx&lt;/code&gt;.
In this way, the new behavior of the rule is backwards compatible while allowing
a &lt;code&gt;consistent&lt;/code&gt; style to upgrade itself to the &lt;code&gt;setext_with_atx&lt;/code&gt; style if needed.&lt;/p&gt;
&lt;h2 id="multiple-issues-in-one-issue-189"&gt;Multiple Issues in One: &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/189"&gt;Issue 189&lt;/a&gt;&lt;a class="headerlink" href="#multiple-issues-in-one-issue-189" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was a fun issue that took me a couple of tries to get it fixed correctly.
Pared down to its base components, the Markdown document causes the failures was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;

&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="n"&gt;Solution&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;exclamation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="n"&gt;Metadata&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Jira&lt;/span&gt; &lt;span class="n"&gt;issue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I looked at this issue at the beginning of January, it looked simple enough.
As such, after about an hour, I had a potential fix as well as a workaround to
use until the next time that I published a release.  All looked good.&lt;/p&gt;
&lt;p&gt;So it was with shock that when I went to confirm this issue’s resolution that
I found it was firing on an exception.  Thinking about it for a bit, it
made sense that it could fire an exception because I had tested documents like the
above document, but not that exact combination.  As such, it fell between the
cracks.&lt;/p&gt;
&lt;p&gt;Adding both the full example attached to the issue and a condensed version of that
same document, I created a proper set of scenario tests for it this time.  With
the information from both new tests, I was able to create the one-line change
needed to fix this issue.  I had a simple off-by-one error in the code for Rule
Md027, and the exception went away.&lt;/p&gt;
&lt;h2 id="remember-to-keep-things-simple-issue-161"&gt;Remember To Keep Things Simple: &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/161"&gt;Issue 161&lt;/a&gt;&lt;a class="headerlink" href="#remember-to-keep-things-simple-issue-161" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The final issue that I wanted to get done this week was Issue 161.  For this issue,
the rule itself was firing properly, but it was reporting the wrong actual and
expected numbers when the rule was fired.  After an hour of reading and
debugging, I could tell why.&lt;/p&gt;
&lt;p&gt;Instead of trying to do something clean, I decided to try something smart.  Maybe
there something preventing me from doing the clean approach before, I am not sure.
But as I looked at the code for the &lt;code&gt;__report_issue&lt;/code&gt; function, I was confused.
Given that the detection logic was working properly, why did I try and make the
code recompute both values instead of reusing the one value from the
detection logic?  And did the other value’s computation have to be so difficult?&lt;/p&gt;
&lt;p&gt;After another half-hour of trying to figure things out, I gave up.  Instead, I
added a &lt;code&gt;if True: pass else:&lt;/code&gt; block before the confusing code and started to
experiment with a cleaner approach to calculating those values.  Once I got the
cobwebs of the first approach out of my head, I was able to get both calculations
working properly within the next hour.  Add in extra time for cleanup, and I was
done.&lt;/p&gt;
&lt;p&gt;Time spent writing the old approach? I would have to guess at least five to six
hours.  Time spent trying to understand it?  At least two hours, give or take.
Time spent to replace it with something cleaner, including tidying the new
approach up? Less than two hours.&lt;/p&gt;
&lt;p&gt;Sometimes I wonder if I write the more complicated code to confuse myself, or if
there was something else preventing me from writing the clean code.  I wish I
knew so I could avoid the nastier approach from the start.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes I feel that getting the PyMarkdown project to a good state is further
away than it probably is.  Part of my brain sees the issues that I am finding
with nested containers and worries that I am going to keep on finding those
bugs for years.  The other part of my brain knows that I cannot discover every
issue before it is reported by a user, but I am making good progress in identifying
those issues myself.  It is a balancing act that is never boring.&lt;/p&gt;
&lt;p&gt;But generally speaking, I am okay with it. I think one thing that this week has reminded
me of is that change is good.  I do have a couple of smaller projects that I can
work on, and I think I am going to try and spend a bit more time on those projects
to help me rest up before the push on the PyMarkdown project later in the week.
Is that the right thing to do?  Not sure.  But I do know that I must treat
the PyMarkdown project like the marathon it is, and not a sprint.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Release with fixed code for past four weeks.  Done.  Picked up low-hanging-fruit
issues and resolve them.  Check.  What is next?  Not sure.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Is It Worth It?</title><link href="https://jackdewinter.github.io/2022/02/07/markdown-linter-is-it-worth-it/" rel="alternate"></link><published>2022-02-07T00:00:00-08:00</published><updated>2022-02-07T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-02-07:/2022/02/07/markdown-linter-is-it-worth-it/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/31/markdown-linter-there-is-no-such-thing-as-professional-life/"&gt;last article&lt;/a&gt;, I talked
about finding middle ground within myself.  In this article, I talk about whether
the painstaking work that I am doing to enumerate every use case is worth it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project is something that
I started over two years ago.  As time …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/31/markdown-linter-there-is-no-such-thing-as-professional-life/"&gt;last article&lt;/a&gt;, I talked
about finding middle ground within myself.  In this article, I talk about whether
the painstaking work that I am doing to enumerate every use case is worth it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project is something that
I started over two years ago.  As time passes, the one question that rather often
comes to my mind is: is it worth it?&lt;/p&gt;
&lt;p&gt;It turns out, that was not as easy of a question to answer as I thought it was.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/956b7a8f85cd0e20f53911734b58707a99eec2ee"&gt;26 Jan 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/ee206b4dfbd2feb8649d5e11d1b731591cf5bd41"&gt;06 Feb 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="before-we-start"&gt;Before We Start…&lt;a class="headerlink" href="#before-we-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a bit embarrassing.  When I finish my article for that week, I double check
that everything is correct, publish it upon completion.  Following that, I upload the new article
to my blog, and double check again to make sure that everything looks good.  If
for some reason I do not do that last step on Monday night, I do it on Tuesday evening.
While it might seem pedantic, it works.  I have caught the two or three times where
everything was published, but I forgot to upload to the blog.&lt;/p&gt;
&lt;p&gt;Well, it worked… except for last week.  Not only did I forget on Monday night
to publish the article, but I forgot on Tuesday night as well.  Now, I do have a particularly
good excuse for missing Tuesday night: I was watching my home county’s
Team Canada Men’s Soccer Team win another
&lt;a href="https://www.concacaf.com/en/world-cup-qualifying-men/schedule-results-world-cup-qualifying-men/"&gt;CONCACAF World Cup Qualifier&lt;/a&gt;
with my family.  After watching a well fought game between two good teams remarkably
close to where I grew up, we then watched a couple of episodes of Disney Plus’s
Hawkeye.&lt;/p&gt;
&lt;p&gt;For the family, it was a good night.  For my blog, an oops night.&lt;/p&gt;
&lt;h2 id="why-am-i-working-on-pymarkdown"&gt;Why Am I Working On PyMarkdown?&lt;a class="headerlink" href="#why-am-i-working-on-pymarkdown" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For those readers that are new to my blog, as described in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want my blog to inspire people and help them learn, like people have inspired and helped me in the past. For technical articles, I feel that I can best do that by focusing more on the why and how of the decisions leading up to the solutions rather than the what of the solutions themselves. For other articles, I feel that I can best do that by being an honest and believable storyteller, helping people to understand issues and situations as I see them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whether it is detailing the tough decisions that I make to move the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project further along
or describing the details on how I moved the project along, I feel that both
types of articles are meeting these goals.  As of late, I have felt that it
was important to balance those topics with more “squishy” topics, such as
&lt;a href="https://jackdewinter.github.io/2022/01/17/markdown-linter-finding-something-that-works/"&gt;Finding Something That Works&lt;/a&gt;,
&lt;a href="https://jackdewinter.github.io/2021/12/27/markdown-linter-deciding-what-is-important/"&gt;Deciding What Is Important&lt;/a&gt;, or
&lt;a href="({filename}/articles/SoftwareQuality/beta-bugs-8.md)"&gt;The Bug That Almost Knocked Me Down&lt;/a&gt;.
As an author, it is easy to talk about the more technical aspects of developing
a project, but as my experiences have taught me, they are only part of the equation.&lt;/p&gt;
&lt;h2 id="seriously-why"&gt;Seriously, Why?&lt;a class="headerlink" href="#seriously-why" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Regardless of anything others might say about how I am progressing with the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project, it is my project
and my contribution to the open-source community.  To that end, it means I have
the flexibility to work how I want, but I also bear the responsibility when
things do not go the way I want them to.&lt;/p&gt;
&lt;p&gt;And for me, that is part of the reason I decided to start working on this.  When
I started authoring articles, I noticed that there was only one other Markdown linter
out there.  While I do not knock that linter for what it is doing, I honestly wanted
something that was easier to use, easier to extend, and more correct.  On that last
point, please understand that the other linter is doing the best job it can given its
constraints.  I just wanted to write something that did not have those constraints.
Or at least try to create something that did not have those constraints.&lt;/p&gt;
&lt;p&gt;What are those two constraints?  The first one is that it is a linter that tries to
match the specifications for multiple Markdown engines as they were around four years
ago.  To that extent, some of the rules are more generalized than they could be if a
single specification was chosen.  The second one is that it is a linter that is very
general, using pattern matching.  From my point of view, I feel that the design choice
was very good at getting the linter to the 90-95% coverage mark, but it stopped there.&lt;/p&gt;
&lt;p&gt;For a handful of specific rules, context is needed.  There are just some patterns that require context
for a linter to properly understand them.  For example, there are a handful of rules
where knowing the context of being within a nested container block affects how the
leaf blocks inside of those containers should be treated.  Without that context, the
pattern is incomplete, creating either false negatives or false positives.&lt;/p&gt;
&lt;p&gt;So, I started with those things in mind.  I picked the
&lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown&lt;/a&gt;
specification because it literally is the de-facto standard.  It fills that role so
well that most of the more popular Markdown-to-HTML parsers have gravitated towards
it in the last three years.  This resolved the first constraint for me.  The second
constraint was resolved by my design to base the PyMarkdown linter on top of a fully
compliant GFM and CommonMark compatible parser.  By using the tokens used as an intermediate
form of the document, I can determine the proper context to use for each of the rules.&lt;/p&gt;
&lt;p&gt;But with those decisions comes a price.&lt;/p&gt;
&lt;h2 id="paying-the-piper"&gt;Paying The Piper&lt;a class="headerlink" href="#paying-the-piper" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The good point that I keep on reminding myself of is that I have a fully compliant
GFM compatible parser as the heart of the project.  However, it would be more correct
to say that “as far as I have tested”, the parser is compliant.  With over four
thousand scenario tests and climbing, I feel comfortable in claiming that I am close
to achieving my goal.  But I know that one area I have concerns about are nested
container blocks.&lt;/p&gt;
&lt;p&gt;To back that viewpoint up, all I must do is to look back over the past three months
at the different issues that I have fixed in the project.  As far as I can tell by
a quick look back at the project commit logs, I have been mostly checking in changes
to one of the container block modules, the markdown generator used to verify the tokenization,
or the testing of those changes.  And while I am finding only minor changes needed
to ensure the parser is working properly, I am still finding those small issues.&lt;/p&gt;
&lt;p&gt;Whether it is an issue such as
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/262"&gt;Issue 262&lt;/a&gt; or
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/263"&gt;Issue 263&lt;/a&gt;
dealing with bad HTML, which is parser related, or
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/252"&gt;Issue 252&lt;/a&gt;,
which looks like a simple whitespace problem but is really parser related, I am
still finding little issues that need to be fixed.  When I say little issues,
I mean in terms of their final change area.  For example, outside of the scenario
tests, Issue 262 required only fourteen lines to be changed before it was resolved.
However, it took around five hours of debugging and testing to arrive at those changes.&lt;/p&gt;
&lt;p&gt;And yes, I do get tired of testing the project and finding parsing issues.  But
as someone who has written a decent variety of parsers over the last thirty years,
I know that it comes with the territory.&lt;/p&gt;
&lt;h2 id="how-do-i-figure-out-if-it-is-worth-it"&gt;How Do I Figure Out If It Is Worth It?&lt;a class="headerlink" href="#how-do-i-figure-out-if-it-is-worth-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I was coming up with the ideas for this article, I started to think about this
and had a hard time at first coming up with an answer.  My first answer was “because
it is the right thing to do”, which I thought was a cop-out.  Given differing
requirements from customers, project management, resources, and technology, I am
decently adept at coming up with a good balance between those opposing forces. But
since I am in control of all those variables in this project, it seemed hollow
when I looked at it.&lt;/p&gt;
&lt;p&gt;So, I dug deeper over the next couple of days.  As I was working on the remaining
issues for this last week, I started jotting down reasons on one of my ever-present
sheets of paper.  Sometimes I would cross an idea out to replace it with
an even better version of that idea, and sometimes I would cross them out without
replacing them.  As I started to draft this article, I looked at them, and found
a common theme among them: because it is what I would expect from any other project.&lt;/p&gt;
&lt;p&gt;Hopefully, that does not sound as wishy-washy as the reason above, but it was the
overwhelming theme of the ideas I had written down.
The way I look at it is this.  If I publish a hastily written piece of code to
help someone out, I am going to make sure to include a note that
essentially says: “I didn’t really test this. Don’t rely on this for critical stuff!”
Likewise, if I look at something like
&lt;a href="https://www.pylint.org/"&gt;PyLint&lt;/a&gt;,
which defaults to the
&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;Python PEP8 style guidelines&lt;/a&gt;,
I expect PyLint to work as advertised.  With its long history and wide user base,
I also expect it to be well tested and debugged at this point.&lt;/p&gt;
&lt;p&gt;Following those two lines of thought, the &lt;code&gt;README.md&lt;/code&gt; file of the project
&lt;a href="https://github.com/jackdewinter/pymarkdown#note"&gt;states clearly&lt;/a&gt; at the top:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This project is currently in beta, and some of these documented things may not work 100% as advertised until after the final release. However, everything should be close enough to done that if you find something missing, please let us know.
And until I can get a sufficiently large user base, I feel it is up to me
to provide the bulk of the test cases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-is-my-answer"&gt;What Is My Answer?&lt;a class="headerlink" href="#what-is-my-answer" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes. The challenging work that I am putting in is worth it.&lt;/p&gt;
&lt;p&gt;On a personal level, I started this project with specific requirements in mind
and a desire to take this project to a full release.  That has not changed.
On a professional level, if I was using this project as a user, I would expect
to see a wide range of users, a large set of scenario tests, or both.  The
level to which that professional level was satisfied would directly feed into
my confidence about the project.&lt;/p&gt;
&lt;p&gt;And yes, it is often mind-numbing working coming up with variations on scenario
tests, and then implementing them.  But as I mentioned above, it is part of what
I would expect from any other project I would use. And, not wanting to be a hypocrite,
if I expect it from others, I need to hold myself to the same standard.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having hit the limit I wanted to for the next number release, I plan to do that
in the next two days.  Then on to more scenarios.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - There Is No Such Thing As Professional Life</title><link href="https://jackdewinter.github.io/2022/01/31/markdown-linter-there-is-no-such-thing-as-professional-life/" rel="alternate"></link><published>2022-01-31T00:00:00-08:00</published><updated>2022-01-31T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-01-31:/2022/01/31/markdown-linter-there-is-no-such-thing-as-professional-life/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/24/markdown-linter-why-nested-containers-are-so-difficult/"&gt;last article&lt;/a&gt;, I talked
about continuing to make progress on testing nested containers.  In this article
I talk about finding middle ground with yourself.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I thought about putting this article down in my personal section, but I believe
that it has relevance to anyone who is …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/24/markdown-linter-why-nested-containers-are-so-difficult/"&gt;last article&lt;/a&gt;, I talked
about continuing to make progress on testing nested containers.  In this article
I talk about finding middle ground with yourself.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I thought about putting this article down in my personal section, but I believe
that it has relevance to anyone who is in the software development field.  By our
nature, we try and analyzing and sort things into distinct categories.  And while
that ability helped me get to a certain point, I feel that I needed to change
direction to make further progress.&lt;/p&gt;
&lt;p&gt;Hopefully, it does not come off in these articles that I know it all.  Just like
everyone reading my articles, I take things one step at a time.  This last step
that I took was noticing something that I should have noticed before.  But at least
I noticed it: There Is No Such Thing As Professional Life.&lt;/p&gt;
&lt;h2 id="why-do-i-say-that"&gt;Why Do I Say That?&lt;a class="headerlink" href="#why-do-i-say-that" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think I have been building up to this point for a while now.  For the longest of
times, I have said things “you have to find balance between your personal life and
your professional life”.  And while it is true that there are usually at least two
aspects to your life, I now believe them to be aspects, not different entities.
But to understand that statement, I believe I need to help any readers understand
how I got there.&lt;/p&gt;
&lt;h2 id="the-journey"&gt;The Journey&lt;a class="headerlink" href="#the-journey" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For any longtime readers of these articles, it should not be a surprise that I have
Autism.  Since the moment when I was clinically diagnosed with Autism, it was the
start of another journey to understanding myself better.  From my interactions
with people before and after college to my first marriage, knowing where I stood
with respect to Autism helped me to understand how it shaped my life. And although
there were many painful interactions with my peers growing up, I was able to find
peace in accepting that they were largely acting out of fear and ignorance.  I was
different, and that can be scary.&lt;/p&gt;
&lt;p&gt;As my life navigated past my first marriage into my forties, I was able to find
my second wife.  She accepts me for who I am, while at the same time giving me
the personal desire to be better.  Just to be clear, unless it something like remembering
to do certain tasks (which I seriously am horrible at), she does not ask me to
change.  Instead, just by her love and support she inspires me to change.&lt;/p&gt;
&lt;p&gt;And with that momentum present in my life, I was able to move past a lot of negatives
associated with a disability like Autism.  Do not get me wrong.  My Autism presents
me with gifts, but it balances out those gifts with things that can sometimes be
crippling.  But instead of hiding who I am, I started to talk more openly about my
Autism and how it affected me.  On the personal side, I talked to people and helped
them to understand how I viewed interactions from my point of view.  From a professional
side, I helped managers and colleagues understand the benefits and challenges of
working with me.&lt;/p&gt;
&lt;p&gt;Along the way, there were a number of people whose comments I still cherish to this
day.  There was this one lady at an Autism hackathon who was inspired by me being
open about my Autism to try and talk to her family about her mental issues.  There
was the manager who commented on how introspective and understanding I was, and how
he thought I was more human than most of the people he knew professionally. And
finally, there were the people who said it was nice to hear someone talk openly
about their disabilities, instead of hiding them away in a closet.&lt;/p&gt;
&lt;p&gt;But even through all that, I still maintained that there were two distinct
parts to my life: a professional one and a personal one. I think I believed that
I could maintain a dam-like structure between the two sides of my life, and not
let stuff bleed from one side to the other. It was a nice dream, but not reality.&lt;/p&gt;
&lt;h2 id="everything-has-a-cost"&gt;Everything Has A Cost&lt;a class="headerlink" href="#everything-has-a-cost" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For anyone reading this who does not believe the same way as I do, I ask that
you keep on reading to understand my point of view.  I try as much as possible to
understand the points of view of others, especially if I disagree with them.  It
is part of how I was raised and who I am.&lt;/p&gt;
&lt;p&gt;I believe in the science around the pandemic that is going on.  Did the various
governments get it right from the get-go?  No.  But that is why they stuck the
label “novel” in front of it.  When faced with a new situation or experience,
how many of us can say that we are going to correctly respond every time?  If
we are honest, very few (if any) of us could realistically answer yes.  The best
we could do is hope that negative consequences of the times we were wrong did not
hurt people.&lt;/p&gt;
&lt;p&gt;So, yes.  I believe that social distancing, mask mandates, and vaccinations are
needed.  That is what my doctor and the people around him say.  That is what
the majority of the governments around the world say.  But with those evolving measures,
they also pointed out that there was going to be an emotional toll that we were
going to have to look for signs of among signs and friends.&lt;/p&gt;
&lt;p&gt;Nearing the two-year mark of the start of the pandemic, I did not realize that
the emotional toll was wearing on me until last week.  With my wife attending
an event and my son at work, I had a few hours to myself on Saturday.  Instead
of being happy that I got some of my own time, I felt dread.  As one of the
guys who is known for being silly and cracking jokes, dread is not a word that
I have typically used to describe myself or my feelings.  But it was what I
was feeling.&lt;/p&gt;
&lt;p&gt;But where was it coming from? Why was I feeling that?&lt;/p&gt;
&lt;h2 id="it-was-not-immediately-obvious"&gt;It Was Not Immediately Obvious&lt;a class="headerlink" href="#it-was-not-immediately-obvious" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having that free time, I decided to try and figure out where all this darkness
in my life was coming from.  Looking back at all my interactions over the past
month or two, I realized that I was quicker to get upset at people now than I
have been in years.  While I would take the time to strive to understand people
in years past, I was now quickly leaping to conclusions.  Thankfully, I have
people in my life that help me reorient myself, for without them I probably
would have made a fool of myself on multiple occasions.  But why?&lt;/p&gt;
&lt;p&gt;That is when I caught myself wondering why my personal life was bleeding into
my professional life and vice versa.  I spent a good hour or so
writing stuff down and exploring that using a technique that works for me.
It was only by chance that instead of scratching something else out that
I scratched out my basic premise, the wall between my personal life and professional
life.&lt;/p&gt;
&lt;p&gt;When exploring stuff in such an experimental manner, be it computer code or trying
to work through something like this, I do not believe in accidents.  That exploration
may result in “wasted” time being spent exploring an avenue, but it is not until that
avenue is explored that you understand what its real nature is.  Simple road you
need to travel down? Parking lot of issues for later? Throughfare to take you past
non-relevant issues? Dead end for what you are trying to find?  My experience tells
me that I must explore it to find out.&lt;/p&gt;
&lt;p&gt;So that is what I did.  And the result was interesting.&lt;/p&gt;
&lt;h2 id="where-did-i-end-up"&gt;Where Did I End Up?&lt;a class="headerlink" href="#where-did-i-end-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no such thing as professional life. There is no such thing as personal
life.  At least for me there is not. It is all connected in one big pool of things
that make me Jack.  Be it the emotional toll of the pandemic, the emotional toll
of having a mother with dementia, or the emotional effort needed to positively
talk to colleagues at work.  It all comes from the same source.  My life’s battery
for lack of a better term.  And before anyone asks, yes, it is rechargeable, but
no, I cannot swap out batteries when mine get low.  Keeping that analogy going,
solar energy does seem to recharge me somewhat thou.&lt;/p&gt;
&lt;p&gt;At fifty-three, I am not sure if I should have seen this earlier in my life,
or if this is early in life to be discovering this.  I think I had notions of
this in different forms over the last ten to twenty years, but never have I been
able to more fully comprehend what it means to me.&lt;/p&gt;
&lt;p&gt;What does it mean to me?  I love helping people, I love learning, and I love
being creative.  But each of those things, and the tasks needed to conduct
those things, take up energy that I have to budget to renew.  And as I now see
everything more clearly as one big bucket and not two smaller buckets, I realize
that borrowing from the other small bucket never made sense.  I might have been
fooled by for a while, but that was all.&lt;/p&gt;
&lt;p&gt;A large part of what helps me stay healthy is finding a good sense of balance.
But for some unknown reason, I always felt a bit of kilter from time to time, with nothing
in my then mindset that explained it.  While I am confident that this is not the
only thing preventing me from finding this balance, knowing that I need to account
for it will help me find part of what my current balance is missing.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I got a lot of scenario tests added, there is one more set that I want to
add before the next release.  And hopefully I will get through them this next
week.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Why Nested Containers Are So Difficult</title><link href="https://jackdewinter.github.io/2022/01/24/markdown-linter-why-nested-containers-are-so-difficult/" rel="alternate"></link><published>2022-01-24T00:00:00-08:00</published><updated>2022-01-24T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-01-24:/2022/01/24/markdown-linter-why-nested-containers-are-so-difficult/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/10/markdown-linter-know-when-to-break-the-rules/"&gt;last article&lt;/a&gt;, I talked
about finding a process that works for yourself.  In this article, I talk about
continuing to make progress on testing nested containers.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It took me a while to get this latest round of scenario tests added and passing,
but it was worth …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/10/markdown-linter-know-when-to-break-the-rules/"&gt;last article&lt;/a&gt;, I talked
about finding a process that works for yourself.  In this article, I talk about
continuing to make progress on testing nested containers.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It took me a while to get this latest round of scenario tests added and passing,
but it was worth getting them added into the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown project&lt;/a&gt;.
I have known that nested
container elements have been a concern of mine for a while, so it is nice to be
able to finally start addressing it.  Even if it did take a couple of weeks.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/956fbbd345e02440c9cde61c90495ac1f6b9f3c5"&gt;04 Jan 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/6d127143ccfccfc5bbfe86c12cf7bf206b8cb094"&gt;23 Jan 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-long-haul-issue-227"&gt;The Long Haul: &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/227"&gt;Issue 227&lt;/a&gt;&lt;a class="headerlink" href="#the-long-haul-issue-227" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The concept itself is simple, but the testing and debugging of the first set of
scenarios for this are far from simple.  The concept of this issue is to take
every combination of three-level deep Markdown containers, and make sure that they
all parse properly at their maximum distances.&lt;/p&gt;
&lt;p&gt;What does that mean?  Picked at random, the test function &lt;code&gt;test_nested_three_block_block_ordered&lt;/code&gt;
contains the following Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example could be taken out of the &lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown&lt;/a&gt;
specification for its simplicity.  It is simply an Ordered List element within a
Block Quote element within another Block Quote element.  Each bit of spacing between
each container element and the next element is done according to normal standards.&lt;/p&gt;
&lt;p&gt;But in the real world, things are not always standard.  There is an optional space
character that follows the Block Quote character (&lt;code&gt;&amp;gt;&lt;/code&gt;) and a required space character
that follows the Ordered List sequence (&lt;code&gt;1.&lt;/code&gt;).  At that point, to allow for different
expressions of the document, up to three space characters can be provided.&lt;/p&gt;
&lt;p&gt;While I was not able to find any reason why three or less space characters are
okay, but four or more space characters is an indented code block, my guess is because
of the tab character.  Putting aside that the tab character is interpreted as a
&lt;a href="https://github.github.com/gfm/#tabs"&gt;Tab Stop&lt;/a&gt; rather than four straight space
characters, it looks like Indented Code Block elements were prefaced with four
space characters, or a non-justified tab character, because it was easy.  The
way I think about it is this.  If you want to create an Indented Code Block element
outside of any container, simply use a tab character or its equivalent of four
space characters.&lt;/p&gt;
&lt;p&gt;But as I am about to show, that does add in some complexities to nested container
elements.&lt;/p&gt;
&lt;h3 id="indented-text-works-up-to-a-point"&gt;Indented Text Works… Up To A Point&lt;a class="headerlink" href="#indented-text-works-up-to-a-point" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To see this indented behavior in action, run this Markdown document through any GitHub
Flavored Markdown compliant
Markdown parser, such as &lt;a href="https://johnmacfarlane.net/babelmark2/?text=1.+zero+spaces%0A1.++one+space%0A1.+++two+spaces%0A1.++++three+spaces%0A1.+++++four+spaces"&gt;BabelMark&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="k"&gt;space&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;   &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;    &lt;span class="n"&gt;three&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;     &lt;span class="n"&gt;four&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Except for the English name for the number of spaces after the start
of the List element, the first four lines each translate neatly into a simple text element
within a List Item HTML element.  Once four spaces are used, as on the fifth
line, the List Item text transfers from simple Markdown text to an Indented Code
Block element.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;zero spaces&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;one space&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;two spaces&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;three spaces&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;four spaces
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this is simple when showing these indents and their behavior when starting
from column 1, it easily gets more complicated when nested containers come into
play.  That was one of the reasons that I introduced this series of scenario tests:
the &lt;code&gt;max&lt;/code&gt; series.  Starting with the Markdown document for the &lt;code&gt;test_nested_three_block_block_ordered&lt;/code&gt;,
test function, I then created the document for the &lt;code&gt;test_nested_three_block_max_block_max_ordered_max&lt;/code&gt;
test function, injecting three spaces between elements instead of zero spaces.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, I pedantically added one extra space character to each level of that
scenario for each container element, increasing the space between container elements
from three spaces to four spaces. So, for the &lt;code&gt;test_nested_three_block_max_plus_one_block_max_block_max&lt;/code&gt;
test function, I added &lt;code&gt;plus one&lt;/code&gt; space character after the first Block Quote element,
resulting in a document of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once that was finished, I also went through the combinations for the other two
container elements at that level, producing the required tests for those scenarios.&lt;/p&gt;
&lt;p&gt;It was not complicated, but it took a while to work through everything.  For each
of the &lt;code&gt;test_nested_three_&lt;/code&gt; modules, twelve new scenarios were added to cover all
the combinations.  With nine combinations of the base two container elements, which
meant that I added ninety-six new scenario tests.  And that was just the beginning.&lt;/p&gt;
&lt;p&gt;It was also interesting.  Plus-one indents at the first two levels were easy
to get working correctly, but it was the second lines that gave me the most trouble.
Making sure that the containers and indents worked together on that second line
was the bulk of the issue that I needed to fix.  But it was worth it!&lt;/p&gt;
&lt;h3 id="it-just-takes-time"&gt;It Just Takes Time&lt;a class="headerlink" href="#it-just-takes-time" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Adding all those scenario tests was a chore, taking a couple of days to work
through them all.  It just took time to run through each of the ninety-six different
scenarios, verify that I had entered everything in properly, and generate the HTML
output using Babelmark.  From there, I ran each scenario test individually against
PyMarkdown, noting which scenario tests passed and which scenario tests failed.&lt;/p&gt;
&lt;p&gt;In the end, just over half of the scenario tests passed, and just under half of
the scenario tests failed.  It was not the ratio that I was hoping for, but it
was the one I needed to work with.  So, little bit by little bit, I started
picking up groups of similar failures and dealing with them.&lt;/p&gt;
&lt;p&gt;Two weeks after I started working on those failures, I finally had them all
passing.  It was a real mixed bag of experiences.  Some of the failures that
I looked at were resolved within a couple of hours of debugging and fixing.
Other failures took a day or two for me to just figure out the debugging
end of things, with the fixing of the issue taking just as long.  In some
cases, I was moving code from deeper within the parser code to closer to
the surface.  For others, it was adding net-new code for a situation that I did
not have to cover before.&lt;/p&gt;
&lt;p&gt;And the amount of code varied as much as the location of the code and the complexity
met in figuring out what that code was.  In a couple of cases, I merely
had to ensure that a calculated value was being added to another variable in
the correct manner.  While those were nice to have, most of code fixes required
between ten and fifteen lines of new code, usually to compute a value that was
needed in another location.  And there was one case where the number of changed
lines peaked at around fifty lines.&lt;/p&gt;
&lt;p&gt;As I said above, it was a real mixed bag.  But as I have said in the last
couple of articles I posted, having a good set of processes that work for
me really helped.  Often, I ended up scribbling down the Markdown
document for the scenario and working through it on paper as well as through
the code.  There are may &lt;a href="https://ux.stackexchange.com/questions/91255/how-can-i-best-display-a-blank-space-character#:~:text=Visual%20representation%20of%20spaces%20in%20text%20are%20more,impact%20of%20the%20former%20representation%20in%20most%20fonts."&gt;Blank Characters&lt;/a&gt;
scribbled on those pages, from a habit I picked up years ago when I started
writing parsers.  From the above link:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The symbol ␢ has a long history of use for this purpose in early computer programming. It was handwritten on coding sheets by programmers to indicate a space character to punch-card machine operators (who were like a typing pool).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am not sure how common they are outside of my use of them in parser design, but
I find them to be invaluable for clearly writing down what is being parsed.&lt;/p&gt;
&lt;p&gt;So, it was a long journey to get those scenario tests passing, but I knew
it was just a matter of time before I got there.&lt;/p&gt;
&lt;h3 id="still-a-bit-left-to-go"&gt;Still A Bit Left To Go&lt;a class="headerlink" href="#still-a-bit-left-to-go" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So there interesting thing about adding a series of combinatorically generated
scenario tests is that interesting patterns appear.  For this set of scenario
tests, I know that there are some simple tests that I am going to have to add
in the next series of scenario tests.  A good portion of them are for my own benefit,
making sure that the project is already covering scenarios that I believe are
covered.  With my solutions for a small group of third-level nesting scenario
tests, I believe that my solutions might cause a problem if extended to a fourth-level
nesting scenario.  And finally, there are a handful of scenario test variations
that I missed with the current set of scenario tests.&lt;/p&gt;
&lt;p&gt;None of these issues (or possible issues) were things that I could have spotted
ahead of time.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With other things going on in life in the last couple of weeks, it sometimes was
a struggle to get some “me” time to work on the PyMarkdown project.  But with
few exceptions, it was useful time that helped me center myself.  There were a
couple of issues that I thought I would never solve.  In each case, I trusted
in my development process, took the breaks that I needed, and used a lot of paper
to scribble out possible parsing paths.  Because of my confidence in my process,
while I knew I might have difficulty figuring out how to solve the current issue,
I knew that I would get there.&lt;/p&gt;
&lt;p&gt;And it was this week that led me to an interesting conclusion: this is not the
last Container Block Processor module that I am going to write.  While the last
rewrite helped me get closer to a clean implementation, this recent set of issues
has led me to believe that I still have some learning left to do.  Only once I
finish that learning will I properly be able to implement a clean parser.&lt;/p&gt;
&lt;p&gt;I am okay with that.  It is probably not going to happen for at least a year,
and there is no timetable associated with it, but it will happen.  And when
I get to that point, I believe I will feel that it is the right thing to do.&lt;/p&gt;
&lt;p&gt;But right now, it is all about finishing these nested container tests.  And I still
have work to do!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As one of the sections above noted, I have a handful of extra scenarios that
I need to take care of before moving on.  Once those are done, I will probably
release a new version of PyMarkdown, just to make sure it is current.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Finding Something That Works</title><link href="https://jackdewinter.github.io/2022/01/17/markdown-linter-finding-something-that-works/" rel="alternate"></link><published>2022-01-17T00:00:00-08:00</published><updated>2022-01-17T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-01-17:/2022/01/17/markdown-linter-finding-something-that-works/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/10/markdown-linter-know-when-to-break-the-rules/"&gt;last article&lt;/a&gt;, I talked
about how I had to bend or break my own rules last week.  This week, I talk about
finding a process that works for yourself.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was a grueling week at work and at home.  Nothing specific, just a lot of small …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/10/markdown-linter-know-when-to-break-the-rules/"&gt;last article&lt;/a&gt;, I talked
about how I had to bend or break my own rules last week.  This week, I talk about
finding a process that works for yourself.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was a grueling week at work and at home.  Nothing specific, just a lot of small
stuff that had to be done and I just felt like I was hitting walls getting it done.
But amidst that
turmoil, I found comfort in being able to get deep into the occasional bit of work.
Even if it was
only for a half hour here and there, losing my mind in my own work for a while helped me relax.
And that relaxing helped me get through the week.&lt;/p&gt;
&lt;p&gt;So, this week, I decided to talk about what I have found that helps me get into
that mindset, in the hope of helping others with their own journey.&lt;/p&gt;
&lt;h2 id="finding-your-own-groove"&gt;Finding Your Own Groove&lt;a class="headerlink" href="#finding-your-own-groove" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Due to a lot of things happening in my personal life and professional life in the
past week, I did not get a lot done on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
As I have mentioned before, I need to take of my entire life, not just focus on
the one project.  And it is not like I did not get any work done this past week.
It was just the quantity of work done was a lot lower than I hoped for. And
while before that might have bothered me at one point in my life, I now realize
the fallacy of focusing too much of my life on one thing.&lt;/p&gt;
&lt;p&gt;Two thing that helped me accomplish the little work that I did this week was understanding
myself and having a good groove to my coding.  I will probably do multiple articles
in the future on understanding myself, but this week I want to focus on finding
that groove.
And while I do listen to music while coding, that is not the groove I am talking
about.  Groove itself is an interesting word.  According to &lt;a href="https://www.merriam-webster.com/dictionary/groove"&gt;Merriam-Webster&lt;/a&gt;,
there are six separate definitions attributed to the word.  The two definitions
that I think are most applicable are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;top form&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the middle of the strike zone in baseball where a pitch is most easily hit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To me, both definitions indicate a place where something is more easily
accomplished.  When I work, be it professionally or personally, that is the
mindset I aim for: keeping my efficiency maxed out.&lt;/p&gt;
&lt;p&gt;That is what a groove is about for me. Finding a groove is being able to get into
that mindset where I
can be as efficient as possible on the task that I am doing.  Maybe it is mowing
the lawn with headphones on, maybe it is loading the dishwasher with no music on,
but some tasks just work better when you get an environment set up that helps you
get the job done in what seems like no time.  It helps me get the task done, and
sometimes it also makes the time taken to perform the task seem like nothing at
all.&lt;/p&gt;
&lt;p&gt;And for software development, I really have two different grooves.&lt;/p&gt;
&lt;h2 id="my-debugging-groove"&gt;My Debugging Groove&lt;a class="headerlink" href="#my-debugging-groove" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe I have a solid groove for my debugging.  As I have mentioned in previous
articles, I prefer logging to interactive debuggers as I feel that I can see the
entire picture more clearly that way.  I will often turn on debug logging and execute
the test I am debugging to print out a very verbose log of what happened.  I typically
do so with a specific area of the Markdown translation that needs addressing, so I
quickly try and get to that area of the output.  From there, I make sure that the
logs show the relevant states that I need to see and go from there.&lt;/p&gt;
&lt;p&gt;It might seem boring, but it is what my debugging grove is all about.  I start with
an okay-ish picture of what I think is going on.  My goal is to improve the resolution
of that picture to the point where I can spot the problem.  Sometimes it is obvious
and sometimes it takes a couple of hours, but it seldom fails for me.  That process
is so ingrained into my tasks that I can easily get into a groove with me, my music,
and one terminal output window laid on top of one VSCode window with source code.
I get to a place where I do not think about what I am doing, I just think and do.&lt;/p&gt;
&lt;p&gt;For me, that is what works: having the data in front of me to help fill in the
gaps of the picture that I have in my head.  If I had to put some descriptions
to the style of debugging, I would probably use words like fluid and dense.  I
like a lot of organized information and the ability to move as freely as possible
through the data.  That balance of information just allows me to properly visualize
the specific debug tasks that I am undertaking.&lt;/p&gt;
&lt;p&gt;Or as Jimmy Fallon might say: “That’s My Jam!”&lt;/p&gt;
&lt;h2 id="my-coding-groove"&gt;My Coding Groove&lt;a class="headerlink" href="#my-coding-groove" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once I follow that path and I get to a probable reason that my code is not working the
way I want it to, that is where my coding groove comes in.  Knowing I was drafting
this article on Sunday, I saved some “groove code” that I wrote on Saturday:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_depth&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"$&amp;gt;stack:$:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"$&amp;gt;token:$:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;xx&lt;/span&gt;
    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"len(ws)=$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"len(containers)=$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;xyz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;container_level_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
        &lt;span class="n"&gt;abc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just for the record, the first sample that I pasted in this article was about four times the size of the
above text, but I trimmed it for readability.  I was okay in trimming it down
because the patterns in the removed code were just repeated patterns from the
above code.&lt;/p&gt;
&lt;p&gt;And yes, I totally admit the code is ugly.  It does not describe what it is doing,
it is not nicely organized, and contains a certain amount of cut-and-paste code.
But for me, looking at that code when I am in my own groove, it makes total sense
to me.  With the current context being the task that I am working on, I focus on
what changes I need to make to the code to bring it closer to the desired end goal.&lt;/p&gt;
&lt;p&gt;Would I ever check in code like this?  Nope.  But in terms of allowing me to stay
in my groove and focus on the problem at hand, it works wonders for me.  I do care
about code quality and readable code.  But none of that really matters until I can
get the code working properly.  Pretty code that is wonderfully organized just does
not matter if it does not work as intended.  Therefore, my coding process temporarily cuts
that requirement out of the picture to allow me to be more efficient.&lt;/p&gt;
&lt;p&gt;If I had to try and related it to a process that most people would recognize,
I would associate my process with writing an essay the way I was taught in high
school.  The debugging phase in the last section is doing the research for the
essay.  The “groove code” above is me writing out a preface, a body, and a conclusion,
keeping things loose until I find a combination of paragraphs that echo the
research and connect properly.  Once that is done, the rest is just window dressing
to make things look good, which is what the next section is about.&lt;/p&gt;
&lt;h2 id="after-the-groove-is-over"&gt;After The Groove Is Over&lt;a class="headerlink" href="#after-the-groove-is-over" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Besides sounding like a great name for a rock song, that process does leave me
with cleanup to do once I solve the problem.  I do not want to take away
the importance of this section by calling it “cleanup” or anything like that.
While the hard part is coming up with a working solution, it can also be difficult
to express that solution in a way that I will understand when I look at it
again two weeks from now.  I need to remove the code that is related into its
own function, give the function a good name, give the variables a good name,
and make sure that I will not look at it later and go “what was I thinking?”&lt;/p&gt;
&lt;p&gt;As an example, the first step in cleaning up that code was to move most of it
to its own function, &lt;code&gt;__handle_trailing_indent_with_block_quote&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;container_depth&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;have_pre_processed_indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;skip_containers_before_leaf_blocks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;used_indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContainerBlockProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_trailing_indent_with_block_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the &lt;code&gt;__handle_pre_processed_indent&lt;/code&gt; function that held the earlier version of the
code, it was obvious that the new code should have its own function.  However, when
I was fixing the code, it was also obvious that keeping everything in one place
made the most sense.  But now that I went from a fixing stage to a quality stage,
the priorities shifted.  Now it was more about making sure that the change that
I made was readable and maintainable.&lt;/p&gt;
&lt;p&gt;To that extent, I took some more time to provide each of the variables with a
more descriptive name of what it was doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__handle_trailing_indent_with_block_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;used_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"$&amp;gt;stack:$:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"$&amp;gt;token:$:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;stack_index&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;split_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="n"&gt;stack_index&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;used_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="n"&gt;stack_index&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;
                &lt;span class="n"&gt;used_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="n"&gt;stack_index&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
        &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;used_indent&lt;/span&gt;
        &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"len(ws)=$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"len(containers)=$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;used_indent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;have_pre_processed_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;used_indent&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;have_pre_processed_indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="n"&gt;have_pre_processed_indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;used_indent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The variable &lt;code&gt;xx&lt;/code&gt; became &lt;code&gt;used_indent&lt;/code&gt;, the variable &lt;code&gt;i&lt;/code&gt; became &lt;code&gt;stack_token&lt;/code&gt; and
so forth.  I also ran my standard tools &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;flake8&lt;/code&gt;, and &lt;code&gt;pylint&lt;/code&gt; on the
code to make sure I was not missing anything.&lt;/p&gt;
&lt;p&gt;Doing this step any earlier in the change process would have just slowed me down.
But with the changes finished and the “groove context” vanishing from my mind, it
was the right time to capture that information and reorganize.  Capture that
context in the naming of the objects as best as I can, and make it look neat.&lt;/p&gt;
&lt;p&gt;As a friend of mine once said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Leave it cleaner that you found it for the next developer.  Because remember, that next developer will probably be you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-does-this-mean-for-readers"&gt;What Does This Mean For Readers?&lt;a class="headerlink" href="#what-does-this-mean-for-readers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I have said in other articles about process, this is the process that works for
me and make me produce the best work.  There really is not guide that says, “if your
name is Jack, then this is the way you developer software”.  I have found that I
get little bit of insights from here and there, with more experimentation than
success.  But even little insights and experiments, whether the outcome is positive
or negative, helps me tune my process that much more.&lt;/p&gt;
&lt;p&gt;So, for any readers that are looking to improve their process, while I would like
to give each reader their own guide to developing at their most efficient: it is
up to you.  Read articles and see if something that another developer describes
in their process speaks to you.  Look at other aspects of your life and see if
you can transplant things that work in those aspects into your development
process.&lt;/p&gt;
&lt;p&gt;And please, if nothing else, experiment.  Experiment knowing that you can learn
from an experiment failing as well as from an experiment succeeding.  There is
no right answer that works for everyone.  Just a patchwork worth of process that
is tuned to how you work.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lots of external stuff, but I am glad I took the time to describe how I work
through a change problem.  Finding that set of processes that work for me took
years, and even then, I tweak and change them as I grow and learn.  Regardless,
it is good to share and perhaps helps others.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am making progress on the last batch of scenario tests that were added, but it
is slow process.  Hoping to get further on that this week.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Know When To Break The Rules</title><link href="https://jackdewinter.github.io/2022/01/10/markdown-linter-know-when-to-break-the-rules/" rel="alternate"></link><published>2022-01-10T00:00:00-08:00</published><updated>2022-01-10T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-01-10:/2022/01/10/markdown-linter-know-when-to-break-the-rules/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/03/markdown-linter-keeping-at-it-with-something-that-works-for-you/"&gt;last article&lt;/a&gt;, I talked
about how things went with taking my time to do things right with the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about more efforts along those lines and how I had to
bend or break my own rules this week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/03/markdown-linter-keeping-at-it-with-something-that-works-for-you/"&gt;last article&lt;/a&gt;, I talked
about how things went with taking my time to do things right with the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about more efforts along those lines and how I had to
bend or break my own rules this week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From a PyMarkdown point of view, I made progress on adding a more complete suite
of scenario tests to the project.  But more than anything else, I want to talk about
what happened to me on Friday night and how I believe I made the right choice…
even though I broke my own rules.&lt;/p&gt;
&lt;h2 id="normal-bug-fixing-this-week"&gt;Normal Bug Fixing This Week&lt;a class="headerlink" href="#normal-bug-fixing-this-week" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it took a while to work through the issues discovered with the nested container
scenario tests, I believe it was a huge success.  It did uncover a small handfull of bugs in different
components of the project, but it was better that I found them first rather than
a user finding them.  And the issues that I did find were not what I call “major redesign”
issues, but cleanup and tweaking issues.  Granted, some were more painful than
others to find and fix, but the changes were all minor changes.&lt;/p&gt;
&lt;p&gt;During that process, I did a lot of debugging and noted some scenarios
that I wanted to make sure were covered in the future.  There are some duplicates in
there, but there are also some interesting scenarios that I want to make sure are
covered.  If I had not done the effort of entering and verifying all those tests,
I believe I would still be trying to figure out what to test.  So, in multiple ways,
it was paying off dividends.&lt;/p&gt;
&lt;p&gt;A good example of interesting scenarios is the one that I picked to work on this
week.  I had noticed that spacing between some elements was not what I thought
it was, so I added all combinations of containers with their elements spread apart
to their maximum.  Then, for each of those combinations, I added one space before
each of those container markers to shift it from a nested container element into
an indented code block.  That took a while, and now I have another set of issues
to work through, like last week.&lt;/p&gt;
&lt;p&gt;And to round off the week, I picked the remaining issue from last week and started
to work on it.  While it did take me most of Sunday to complete, I was able to get
it completed and mostly ready by Sunday night.  Like the work from the week
before, there were a handful of small things that needed fixing up, as they were
all just slightly off.  Once I had those four or five things fixed up, I was able
to cleanly fix that issue.&lt;/p&gt;
&lt;p&gt;But to be honest, fixing that issue was more of a reward to myself for something
that happened on Friday night.  So, without further ado…&lt;/p&gt;
&lt;h2 id="my-own-personal-rules"&gt;My Own Personal Rules&lt;a class="headerlink" href="#my-own-personal-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that update out of the way, I want to focus the rest of this article on my
main topic: rules and when to break them.  My belief is that any software developer
with longevity in the software field has a set of rules that they work and live
by.  There are very few people that engage in software development as a career
without some aspect of the job stimulating their excitement.  I believe that it
is natural to follow that observation with another personal observation that many
software developers are often overwhelmed by that stimulation, having difficulty
in shutting off that simulation.
Why else are there many stories of software developers that obliviously
work through the night to get something done?  From my experience, it is because
it is generally true.&lt;/p&gt;
&lt;p&gt;But like any interesting job, there are issues. If too much time is spent on the
computer, then their family life suffers.  If there is not enough focus on eating
correctly and exercising often, then personal health suffers.  If the time
spent at work is not properly focused on the right things, then professional health
suffers.  There are many forces like this that work both with and against each other, and
these forces need to be balanced and constantly rebalanced.&lt;/p&gt;
&lt;p&gt;And for that, most software developers have their own rules. These rules for their
life leverage the rules they use in their day-to-day jobs.
Without these rules,
I believe that software developers ultimately either fail in their personal life
or in their professional life.  Both are not desired outcomes.  I have
heard many software developers say words like “I have
a rule with my spouse that…”, with some conditional rule.  Sometimes they are
hard and fast rules like “if I ask for help with the kids, they always come first” and
sometimes they are less rigid such as “keep overtime to a minimum.”  And for
the more successful among us, those rules work, often with constant fiddling.&lt;/p&gt;
&lt;p&gt;It should then come as no surprise that I have my own personal set of rules to
help me try and keep balance in my life.  The primary rule for me is that family always
comes first, and yes that include our dog, Bruce.  A good family balance is what
I credit for being the main reason that I have been able to grow professionally.
I make sure managers and colleagues know what I am doing, and how I mitigate any
time away from the computer.  I also make sure they know that when I am away from
my computer, I am away.  Period.  As such, I have a separate desk and
a seperate room in our house that we refer to as my “Work Office”.  The important
part for me is that my professional work is done on a separate computer and a
separate desk from my other work.&lt;/p&gt;
&lt;p&gt;For me, that is one of my rules.  When I sit down at that desk, I am doing my
professional work.  Unless it is for a small interlude, such as getting water or
going to the bathroom, when I get up from that desk, I am not working anymore.
And since the desk is in its own room, when I close the door in the evening,
I am definitely not working any more.&lt;/p&gt;
&lt;p&gt;Why is this important to me?  Because I have a tough time shutting down the parts
of my mind that analyze things.  There is a sequence to me leaving my work office:
turn off the music, turn off the computer, turn off the lights, close the door.
With each of those deliberate steps, I have trained my mind to acknowledge that
work is done for the day.  And for the most part, it works… most of the time.&lt;/p&gt;
&lt;h2 id="but-it-doesnt-always-work"&gt;But It Doesn’t Always Work&lt;a class="headerlink" href="#but-it-doesnt-always-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I do not usually talk about my professional work much, solely because of my above
rule that professional work stays on that computer, on that desk, in that room.
When I author articles, they are almost always about things that occur outside
of that office with my personal life on my personal projects.  It is not that I
do not undertake interesting stuff at my professional job, quite the opposite.
But if I let that little bit of my professional job leak into my personal life,
then I feel that I will find that more of it will leak in, destroying
the balance I have achieved.&lt;/p&gt;
&lt;p&gt;And I would be dishonest if I said that things did not leak out from time to time.
I am only human.  But I try my best to get those things talked about, resolved
at least for the day, and out of my mind as soon as possible.  My wife and I have
a healthy “I need to talk about…” attitude to help each other with exactly
those kinds of issues.  While it may not work for others, it works for us.&lt;/p&gt;
&lt;p&gt;Well, this past Friday was one of those days.  I had spent a decent amount of time
at work prototyping and polishing something, only to find out that we had not thought
the entire thing through.  As we talked about what was needed and what I had prototyped,
there was a gap that I needed to fill.  Basically, I needed to go back to the books
and try and figure out how to meet those needs.&lt;/p&gt;
&lt;p&gt;So, at roughly 1pm, I started working on trying to meet those “new” requirements.
A couple of times during the afternoon, I asked if I could vent to my wife, and she
nicely accepted.  With some frustration out of my head, I was able to keep on
making progress until 6pm when my son and I sat down to watch a football (a.k.a. soccer)
game.  However, even after the venting with my wife, I was still thinking about the
new requirements.  Talking with my son about the game and what was going on with
our favorite team did little to quiet the analysis still going on in my head.
Even after the game completed (our team lost), some activities that normally relax me
were interrupted by thoughts on how to solve the problem.  It was just not going away.&lt;/p&gt;
&lt;h2 id="making-the-choice"&gt;Making The Choice&lt;a class="headerlink" href="#making-the-choice" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To balance my various needs against each other, I try and get to bed between 11pm
and 11:30pm.  Truth be told, I could stay up a lot later than that without that
much problem.  But if I were to do that, it means being uncoordinated with my wife’s
schedule, and that is a problem for me.  That evening, as the clock got closer to that time,
I started noticing a problem: my mind was speeding up, not slowing down.&lt;/p&gt;
&lt;p&gt;That was a major problem.  My nightly activities are all geared towards winding
down after a certain point in the evening.  If I do not do that, I lay in bed and
start swearing at the ceiling because of my inability to fall asleep.  This has
a side effect of waking up my wife and our dog as well, which is not desirable.
So, I try and avoid it.  Stick to the routine and wind down at least one to two
hours before I want to go to sleep.&lt;/p&gt;
&lt;p&gt;I did not follow that.  My mind was still racing, and I had to make a tough choice.
I could try and do some more winding down activities and see if they would help,
or I could try and work through my problem enough so that I could mentally let it
go for the evening.  Trying to wind down would be following my rules about unwinding
each night and working through the problem would be going against it.  But what
I had to figure out was, regardless of which one was the rule, which one of those
had the best chance of succeeding.&lt;/p&gt;
&lt;p&gt;After five minutes of writing stuff down on paper, I came to a decision.
While it might take a couple of hours, once I thought through stuff to a certain
point, I could put it down.  To me, that was a fact.  I did not know how long
that would take, but my best guess was between two and four hours.  As I did
not know if my usual techniques would work, I chose the more solid set of results
over something with only possible results.&lt;/p&gt;
&lt;p&gt;It was not an easy choice.  Staying up late is not something that I do at this
point in my life without consequences.  It usually messes around with my sleep
cycle for at least three days, and that makes me grumpy.  As such, I try and
avoid that unless I feel there is enough benefit in doing so.  The benefit here
was an easy one: stay up and get the problem worked to where I could put it
down.  In my head, that was the only way I was going to get to sleep on
Saturday morning.&lt;/p&gt;
&lt;p&gt;But as soon as I made that choice, I knew it was the right choice.  I made the
choice to bend or break my normal rules, fully aware of the costs involved.
And I was okay with it.  I just made sure I had a glass of cool water to help me
think, before starting to work the problem.  It did take me roughly two
hours to get the problem resolved enough that I started yawning.  It was
another hour before I was able to close my eyes and not think about it for
a couple of minutes.  At that point, I was able to turn off my work computer,
shut things down, get ready for bed, and try and fall asleep.  And I fell
asleep within five minutes… at least it felt that way.&lt;/p&gt;
&lt;p&gt;Sometimes you must pick between guessing and facts, and there is too much
information to pick a clear winner.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Short and sweet this week.
I had a hard choice to make, and I believe that I made the right choice, so
good on that front.
I also was able to enter in more scenarios and get a relatively good success
rate on those scenarios, even though most of the scenarios were well off the
beaten path.
Overall, a good week.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I had thought that a reported issue was fixed, so my priority is fixing that
issue for the user.  After that, I have issues from last week to work on.
More of the same, but always different.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Keeping At It With Something That Works (For You)</title><link href="https://jackdewinter.github.io/2022/01/03/markdown-linter-keeping-at-it-with-something-that-works-for-you/" rel="alternate"></link><published>2022-01-03T00:00:00-08:00</published><updated>2022-01-03T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-01-03:/2022/01/03/markdown-linter-keeping-at-it-with-something-that-works-for-you/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/27/markdown-linter-deciding-what-is-important/"&gt;last article&lt;/a&gt;, I talked
about taking some time to do things right with the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about how that went and what got me through it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no way for me to state the effort that I have put into …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/27/markdown-linter-deciding-what-is-important/"&gt;last article&lt;/a&gt;, I talked
about taking some time to do things right with the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about how that went and what got me through it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no way for me to state the effort that I have put into the PyMarkdown project
in the last two weeks without using phrases like “heavy lift”, “slogging”, or
“huge”.  But I went into that effort knowing that I had a solid strategy to succeed
and a solid personal process to get through that effort.  And for me, that made all
the difference.  I went into the effort with the confidence that I could tackle
this effort and get out the other side.  All because I figured out how I work best.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/ce35004107738607fe9cf55b121f2a6038abbb96"&gt;14 Dec 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/b3a1ca7152bc3f0c830773050cb292c307c8bc09"&gt;03 Jan 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="cleaning-up-the-mess-i-made"&gt;Cleaning Up the Mess I Made&lt;a class="headerlink" href="#cleaning-up-the-mess-i-made" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When writing the heading for this section, I did not feel like sugar coating my opinion
of what I was doing at all.  In adding better testing of
the various nesting combinations, I had found a lot of issues that I needed to deal
with.  Thankfully, only one of those issues dealt with any asserts failing, which was
good.  But as the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project
is a Markdown linter, making sure that it parses the Markdown correctly and points
to the correct line and column is essential.  And most of the issues fell into that
second category.&lt;/p&gt;
&lt;p&gt;While I could easily bore any readers with a play-by-play of everything that was fixed, I do not
believe it would serve any purpose.  Unless a reader understands how the project
is put together, it would be a lot of &lt;a href="https://www.merriam-webster.com/dictionary/gobbledygook"&gt;gobbledygook&lt;/a&gt;.
However, describing my personally tuned process that got me through those issues is something
that I believe would be beneficial, so I am going to focus on that.&lt;/p&gt;
&lt;h2 id="find-what-works-for-you"&gt;Find What Works For You&lt;a class="headerlink" href="#find-what-works-for-you" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What I am going to talk about in this article is largely what works for me.  Even
with the specialization to how I work, this process is not perfect.  But it generally
gets the work done just over 90% of the time, and that is good enough for me.  If
I get into a situation what I am in the non-90% sections, it is a special case,
and I can figure out an alternate process to work through that situation.&lt;/p&gt;
&lt;p&gt;From my experience, having that developer-tuned process is important.  As a
code developer and test automation developer, I do not want to spend time trying to figure out how to
do something.  I know that is not where I shine the brightest.  As such, I have refined
my process over the years to keep the &lt;em&gt;noise&lt;/em&gt; of developing software as low as
possible. This allows me to focus on the parts of the process that I know I can
leverage to produce the greatest impact on a project.&lt;/p&gt;
&lt;p&gt;So here are some thoughts I have had about my personal process, as I worked
through things in the last two weeks.&lt;/p&gt;
&lt;h3 id="interactive-debugging-versus-logging"&gt;Interactive Debugging Versus Logging&lt;a class="headerlink" href="#interactive-debugging-versus-logging" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One thing that works for me is a focus on application logging.  Now, in the last
decade or so, I have heard many conversations saying that debugging through
logging is very last-millennium and antiquated.  In those conversations, the people
around those conversations typically agree with the speaker because they do not
want to appear old-fashioned and behind-the-curve.  But from my point of view,
that viewpoint is trying to fit everything into a single category instead of focusing
on the benefits of both tools.&lt;/p&gt;
&lt;p&gt;That is what I believe the discussion should be
about: the right tool for the right problem.
Any kind of interactive debugger is a tool.  I would also argue that writing stuff
to output and log files is also a tool, though a more process-oriented tool. Both
tools have their use and their place.  Focusing on one and downgrading the other
is usually not a winning strategy.  And those narrow strategies can often cost time and
money.&lt;/p&gt;
&lt;p&gt;Interactive debuggers are great at trying to pinpoint exactly what the problem is.
As a developer walks through the code, they can pause and examine any data structure
that the debugger has access to at that time.  But if the developer needs to figure
out what &lt;em&gt;just&lt;/em&gt; happened, they are out of luck.  As they can only see the state of
how things are at that time, they need to restart the application that they are
debugging and try and get to the desired point in the application as quickly as
possible.  And that exercise is not always easy.&lt;/p&gt;
&lt;p&gt;Debugging through logging supplies a lot of information depending on what is logged
and at what &lt;em&gt;log level&lt;/em&gt; it is logged at.  By executing the program with a specific
log level, a lot of information can be stored for later examination.  But the
problem with this approach is that the developer needs to take the time to place
log statements in their code to output desired information.  There is also a non-zero
execution cost to adding logging to an application.&lt;/p&gt;
&lt;p&gt;Which is better for me?  The truth is it depends.  If I am working on
something small and focused, usually I prefer using an interactive debugger.  In
most other cases, I prefer logging.  I just find that it is easier for me to visualize
the entire picture using logging, instead of the more limited view I get from a
debugger.  There is also an added benefit here in that many microservices
are deployed in environments where interactive debugging is not allowed.  I have found
that having healthy experience with logging has put me ahead in those situations.&lt;/p&gt;
&lt;h3 id="understanding-how-you-typically-work-and-optimize-it"&gt;Understanding How You Typically Work… And Optimize It&lt;a class="headerlink" href="#understanding-how-you-typically-work-and-optimize-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This one may seem like an easy decision, but it took me a while to figure out what that
process was for myself.  It took a certain amount of honest soul searching,
observation, and tool creation to get something that just works for me.  And this
is what I have found.&lt;/p&gt;
&lt;h4 id="write-tests-first-test-driven-development"&gt;Write Tests First - Test Driven Development&lt;a class="headerlink" href="#write-tests-first-test-driven-development" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For me, good project work starts with Test Driven Development.  I find
great utility in setting up the goals for a given part of a project before writing
the code to satisfy that goal.  I can honestly state that it has helped me improve
my design skills by fleshing out all the combinations that I need to handle before
I start writing the code.  By having those combinations laid out in front of me,
I can then visualize what I need to do at a high level and see if I have missed
anything large in my design.&lt;/p&gt;
&lt;h4 id="develop-in-small-steps"&gt;Develop In Small Steps&lt;a class="headerlink" href="#develop-in-small-steps" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The next part of my process is implementing features in small steps.  While it may seem
counter intuitive, I usually start with the negative tests first.  As I am implementing
the code to satisfy those negative tests, I will typically add just-enough of the
actual code needed to get the test passing.  When it comes time for the positive
tests, I have a good amount of foundation work done that paves the way for the
rest of the code.&lt;/p&gt;
&lt;p&gt;To help me in this part of my process is a good test framework and scripts to
help me execute tests quickly, precisely, and efficiently.  To reduce cognitive
overhead, all my personal Python projects have a &lt;code&gt;ptest.cmd&lt;/code&gt; script that is templated
from project-to-project.  It has a &lt;code&gt;-k&lt;/code&gt; option to use when I only want to run
against a subset of the tests.  It has a &lt;code&gt;-m&lt;/code&gt; option to use the multiple cores on
my development system to speed up execution.  It has a &lt;code&gt;-a&lt;/code&gt; option to show all
failed tests, instead of the default of stopping after the first five failures.  It
has a &lt;code&gt;-c&lt;/code&gt; option to execute the tests with coverage tracking enabled.  And to
make sure I am seeing a good summary of this information, the output from the
test script includes my &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
package to display a succinct summary of those tests and their code coverage.&lt;/p&gt;
&lt;p&gt;I then basically travel in a small loop over the resolution for whatever issue or
feature I am working on.  I implement towards getting a test to pass and use
the &lt;code&gt;ptest.cmd&lt;/code&gt; script in various formats to move towards resolution.  I do not
worry about any kind of metrics other than one: is the test I am working on now
passing.  From my point of view, given a decent design, there is no benefit to
me on working to make the code better until I have code that solidly passes the
test that I am working on.&lt;/p&gt;
&lt;h4 id="set-a-high-bar-for-quality-clean-and-polish-the-code"&gt;Set A High Bar for Quality - Clean And Polish The Code&lt;a class="headerlink" href="#set-a-high-bar-for-quality-clean-and-polish-the-code" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;However, when I get to that point, my &lt;code&gt;clean.cmd&lt;/code&gt; script comes into
play.  Like the &lt;code&gt;ptest.cmd&lt;/code&gt; script, I try and keep a singular script across
projects, with minor changes for each project where needed.  I do not worry about
which tools are executed against which code bases.  No matter how small the project,
it is essentially the same tools for each project.  For me, that reduces the
cognitive overhead of trying to remember what is being executed against which
project.  It is always the same.&lt;/p&gt;
&lt;p&gt;And yes, sometimes it takes multiple passes to pass the quality bar I have set for
myself. But I am okay with that.  If I have a set of tools that points out
when my code is not at the quality level that I want, I can deal with it.  From my perspective,
it means that I can focus on getting the code working cleanly before I start to
worry about making sure the code itself is clean and maintainable.&lt;/p&gt;
&lt;h4 id="external-validation-do-not-be-afraid-to-seek-advice"&gt;External Validation - Do Not Be Afraid to Seek Advice&lt;a class="headerlink" href="#external-validation-do-not-be-afraid-to-seek-advice" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I am constantly looking for ways in which I can hone my design skills, my testing
skills, and my implementation skills.  But I also realize that my brain has a finite
size and I need to rely on external products to help me in curating my skills in
small steps.  As such, I will often search the &lt;a href="https://github.com/marketplace"&gt;GitHub Marketplace&lt;/a&gt;
for interesting integrations that I can execute against the project code bases.  As most
of my projects are open-source, I can freely experiment with various integrations
without worrying about exposing private repositories.&lt;/p&gt;
&lt;p&gt;And, like all experiments, that experimentation is hit-and-miss.  Some integrations
occur in the VSCode editor that I use for writing Python, and some integrations occur
when a Pull Request is created on GitHub.  Sometimes there is a large amount of
benefit to the integration, and sometimes it is just a tiny improvement, but an
improvement in an area that I had not thought of before.  If nothing else, I try
it out and discard it a month later as not having enough benefit to justify the
cost.  However, I try and learn at least one thing from each integration that
I try.&lt;/p&gt;
&lt;p&gt;But for me, the important thing for me is to look for things that can help me and to try them
out.  I am honest with myself that I am not the world’s best Python developer.
However, I can use integration tools to help me benefit from their knowledge.
I would rather be a decent developer and experiment with various
tools than to just sit on my chair and go “Yeah, I am good enough!”.&lt;/p&gt;
&lt;h4 id="be-realistic-with-yourself"&gt;Be Realistic With Yourself&lt;a class="headerlink" href="#be-realistic-with-yourself" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;When I was reviewing this article, I decided that I wanted to add a section
here about being realistic with yourself.  I know that I often think things will
take a certain amount of time, only to have the actual time be some multiple of
that first estimate.  But that is just how things are.&lt;/p&gt;
&lt;p&gt;This recent upgrade to handling whitespaces properly and the testing of that
change is a great example of this.  I have somewhat lost track of the exact
number of changes that I needed to make to resolve the issues, but I am confident
it was somewhere between ten and twenty.  For each issue, there was a certain amount
of other work involved, but the focus was on the debug-code-test part
of the process.  If I was lucky, that part of the development effort was less than
two hours.  Most of the time it was in the five to seven hour range.
It was usually the case that I got the resolution coded, only
to find out that the changes I introduced negatively affected other parts of the
code.  There were also times where I made a change to make things work properly,
only to require changes to over 50 tests that were verifying information based on
the initial information.&lt;/p&gt;
&lt;p&gt;I had to be realistic with myself that it all took time.  A good example of this
were the numerous changes to properly note where the newline (&lt;code&gt;\n&lt;/code&gt;) character was
in tokens.  One small three-line change to the parser produces many small changes
to individual tests.  The &lt;code&gt;ptest.cmd&lt;/code&gt;
script would point out the newly failing test.  I would then visually examine
the test and the new proposed behavior to see if it made sense.  If so, I would
copy the added information into the test and run the &lt;code&gt;ptest.cmd&lt;/code&gt; script with that
specific test to make sure that the change was the right one.&lt;/p&gt;
&lt;p&gt;That round trip usually took five to ten minutes per test.  If I was working on a group
of tests like that, I could usually get the time down to three minutes, but it
took mental effort to do so.&lt;/p&gt;
&lt;p&gt;I was hoping that I would be able to get all the tests working by the middle of
my holiday vacation.  I was grateful that I was able to get them working by the
end of that same vacation.  All it took was a bit of a “cognitive reset”.&lt;/p&gt;
&lt;h2 id="keep-on-learning"&gt;Keep On Learning&lt;a class="headerlink" href="#keep-on-learning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It should be obvious that are two threads running through these sections:
incremental learning and automation.  I find that learning through repetition is
an uncomplicated way for me to learn that has low friction associated with it.  And by using
automation as the vehicle for that learning, I ensure that the code will measure
up against my quality bar.  As I learn more, I meet that bar without having to use
as much effort.  It is a win-win as far as I am concerned.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was a long slog.  A really long slog.  But a good side effect of that work is
that I know my personal process for development is getting leaner and more efficient.
I can cleanly define the stages of my development and adjust my use of tools
to allow me to more efficiently focus on my goals for that stage. And I
reaped the benefit of that during these last two weeks of worth.  If I had to guess,
I could have easily doubled the development time without the knowledge and tools
that I used.&lt;/p&gt;
&lt;p&gt;And I also am aware that I pushed through a lot of slight changes with large effects in
the last two weeks.  I do not believe that would be possible without me properly
understanding myself, taking the time I need to recharge, and ensuring that I have
a solid set of tools that works for me.  And I find all that to be cool!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having written down a fair number of new scenarios that I want to test, I am going
to start testing them later this week.  I am hopefully going to triage them tomorrow,
so hopefully I can get to them and start resolving them by the end of the week!
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Deciding What Is Important</title><link href="https://jackdewinter.github.io/2021/12/27/markdown-linter-deciding-what-is-important/" rel="alternate"></link><published>2021-12-27T00:00:00-08:00</published><updated>2021-12-27T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-12-27:/2021/12/27/markdown-linter-deciding-what-is-important/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/20/markdown-linter-getting-back-to-work/"&gt;last article&lt;/a&gt;, I talked
about getting back to work on testing the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about taking some time to do things right.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes, you just need to take some time and get things done right.  In the last
couple of weeks …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/20/markdown-linter-getting-back-to-work/"&gt;last article&lt;/a&gt;, I talked
about getting back to work on testing the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about taking some time to do things right.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes, you just need to take some time and get things done right.  In the last
couple of weeks, I made major modifications to the whitespace tracking system used
within the PyMarkdown project.  And that brought out some issues.  Some of those
issues were hiding from before, and some of those are new issues.  Both need to be
fixed.&lt;/p&gt;
&lt;h2 id="figuring-out-what-is-importand-to-me"&gt;Figuring Out What Is Importand To Me&lt;a class="headerlink" href="#figuring-out-what-is-importand-to-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, that happened.  After I rewrote the whitespace tracking system, I added a couple
of assert statements to make sure that I did not lose track of those whitespace
characters again.  And they triggered.  I thought I had all combinations put together
and tested, but I missed some.  The question was, how many other ones did I miss?&lt;/p&gt;
&lt;p&gt;As fate would have it, the morning before I was supposed to head over the mountain
to visit my relatives, there was a Winter Weather Advisory for the mountains passes
that I use to get over there.  I talked about going over the mountain with my wife
and her father, and we all agreed that safety and sanity were our number one priorities.
So, I stayed at home.&lt;/p&gt;
&lt;p&gt;Now, I have other stuff I want to get done as well, but I had around three days
of “extra” time available to me.  How did I want to spend it?  I love movies, and
I am watching a couple of movies a day, as well as getting caught up on various
series.  But that only takes up so much time.  And I like to be doing stuff that
has focus.&lt;/p&gt;
&lt;p&gt;Ultimately, I had to figure out what was important for me to accomplish during
the period between Christmas Eve Day and New Years Day.  I do want to work on
getting some other smaller projects ready for publishing, and that is a priority
for me.  Doing some learning is also a priority, as learning helps me professionally
and it also recharges my batteries.  But what about the PyMarkdown project?&lt;/p&gt;
&lt;p&gt;I am firm that I do not want to spend all my time on the PyMarkdown project, but
with the question of “what did I miss?” hanging over my head, I wanted to at
least be able to answer that question.  More importantly, I want to be able to
have a good idea of the scope of the issues, as well as their impact on the project
itself.&lt;/p&gt;
&lt;h2 id="making-that-decision"&gt;Making that Decision&lt;a class="headerlink" href="#making-that-decision" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that in mind, I decided to take a solid three days and to add a new level of
testing to the PyMarkdown project.  It was not going to be an easy three days
or a fun three days, but it was something that I felt I needed to do.  The way
I figured it out in my head, each day was going to be focused on one part of
putting the new scenario tests together.  Day One was dedicated to simply grunting
through the creation of all the test functions with their Markdown. Day Two was
dedicated to the painful process of executing every new scenario test and marking
each failed test as skipped.  Day Three was dedicated to going through the failures
and categorizing those failures into categories.&lt;/p&gt;
&lt;p&gt;And in case anyone asks, yes, there are that many combinations.  To be blunt, the
combinations spiral out of control specifically with three features: continuation
lines, “collapsed” block quotes, and new list items.   While I have yet to add proper
testing for new list items, I believe I have decent coverage of the other two features.&lt;/p&gt;
&lt;p&gt;Because of continuation lines, I not only have to test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but I have to test three related scenarios: without the first &lt;code&gt;&amp;gt;&lt;/code&gt; character, without
the second &lt;code&gt;&amp;gt;&lt;/code&gt; character, and without both &lt;code&gt;&amp;gt;&lt;/code&gt; characters.&lt;/p&gt;
&lt;p&gt;Because of “collapsed” block quotes, I not only have to test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but I have to test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And with new list items, it is more that the code I have in place recognizes
that a new list item can set a different starting point for any elements that
are contained within that list item’s scope.&lt;/p&gt;
&lt;p&gt;But in the end, I got it done.  It was long.  It was arduous.  It was painful.
But I got it done.  Now that I
have all those scenario tests and their failures in place, the next thing that I
need to do is to start going through them and cleaning up any failures.&lt;/p&gt;
&lt;p&gt;And that is what next week is about!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully, unless my brain falls out through my ears in the meantime, a new year
will mean getting a lot of these issues resolved.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Getting Back To Work</title><link href="https://jackdewinter.github.io/2021/12/20/markdown-linter-getting-back-to-work/" rel="alternate"></link><published>2021-12-20T00:00:00-08:00</published><updated>2021-12-20T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-12-20:/2021/12/20/markdown-linter-getting-back-to-work/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/13/improving-quality-just-get-it-done/"&gt;last article&lt;/a&gt;, I talked
about making hard choices and the follow-through that comes with making those choices. In
this article, I talk about getting back to work on testing the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There have been a few things on my mind this week, so I was …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/13/improving-quality-just-get-it-done/"&gt;last article&lt;/a&gt;, I talked
about making hard choices and the follow-through that comes with making those choices. In
this article, I talk about getting back to work on testing the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There have been a few things on my mind this week, so I was not able to get as
much work done as I had hoped to.  But I still made progress on the PyMarkdown
project, which is good.  With a bit of expectation setting and without too much
added fanfare, on to the rest of the article.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/7e8bb3f46788f9a4aaeb4ce43df72d6f57342447"&gt;14 Dec 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/886498cbd781c7753456b8bbe4c4bda0750e9c34"&gt;19 Dec 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="life-versus-side-projects"&gt;Life Versus Side Projects&lt;a class="headerlink" href="#life-versus-side-projects" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There have been a handful of articles out this past week about the Log4J vulnerabilities
and how they are being handled.  On one hand, as a professional software developer
who relies on projects from other people, I want those projects to work properly.
On the other hand, as a software developer who created the PyMarkdown project completely
on his own time, I understand the issues that have been brought up by open-source
maintainers.  As with a lot of things, it is a matter of finding a good balance
between two or more things.&lt;/p&gt;
&lt;p&gt;Every open-source project that I have had the pleasure of using is clear on
where the developer team for that project believes that line is for that project.
With very few exceptions, we are all working on these projects on our own time.
As such, I know that if I must decide between making an improvement on the
project or dealing with life, that life is going to win somewhere above 90% of
the time.  If an issue is especially important to me, I may decide to shuffle things
around to deal with that issue.  But that choice is my choice to make, not anyone
else’s choice.&lt;/p&gt;
&lt;p&gt;This week is a good example of those statements in practice.  As someone who
has &lt;a href="https://jackdewinter.github.io/categories#autism-ref"&gt;Autism Spectrum Disorder&lt;/a&gt;,
sometimes my environment gets to be more than I can handle, causing me to get headaches
that are often debilitating.  I struggled all week to work through a mild headache
that only got worse towards the end of the week.  And while I was able to get some
“easy” work done on the project, my health, my family, and my professional work
had to take priority.  In my mind, there was not even a question about it.  It
was just a fact.&lt;/p&gt;
&lt;p&gt;Taking it slower during the week helped me to have a successful week at work and
to take Friday off and try and deal with getting rid of my headache.  Making sure
I was dealing with that properly made sure that I was not (too) grumpy to my family.
And from a job enjoyment viewpoint, I was able to take part in a handful of very
interesting conversations with my colleagues at work.  My decision to focus my
energy where it needed to be, not on the PyMarkdown project, was the right choice.&lt;/p&gt;
&lt;p&gt;To take this back to the topic of open-source software.  RTFM.  Read The Full
Manual.&lt;sup id="fnref:yes"&gt;&lt;a class="footnote-ref" href="#fn:yes"&gt;1&lt;/a&gt;&lt;/sup&gt;  Most open-source is provided without any strings attached for
commercial use.  If you intend to use it in any kind of commercial or mission
critical software for your company, it is a risk that must be evaluated. If you
decide to accept that risk, it is up to you and your company to mitigate the risk
to your company, not the people maintaining the project.
Most
open-source projects encourage users to share their enhancements of the project
with other users.  This is part of the open-source community.  This is part
of how things work.&lt;/p&gt;
&lt;p&gt;While it was not explicitly stated for open-source, a quote from my mother on topics
like this is very fitting:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t go and take something from your neighbor, only to complain that
when you went to use it, it did not work like you expected it to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you use open-source, be prepared to maintain it if something breaks.  If that
happens, please be considerate and offer any improvements to the project maintainers.
If you do not fix it yourself, do not demand that the maintainers fix something
for you on your schedule.  Remember that it is called the open-source community.&lt;/p&gt;
&lt;p&gt;When it comes down to it, if you would not normally ask people on the team at your
workplace to do something in a given manner, you probably should not ask any
open-source maintainer to do the same thing.&lt;/p&gt;
&lt;h2 id="release-093"&gt;Release 0.9.3&lt;a class="headerlink" href="#release-093" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With my health context from the previous section in place, that context should set the
stage for the work that went on last week.  Having completed the bulk of the
refactoring work, it was time to create a release and get the refactoring
heavy fixes out to users.&lt;/p&gt;
&lt;h3 id="cleaning-up-for-the-release"&gt;Cleaning Up For The Release&lt;a class="headerlink" href="#cleaning-up-for-the-release" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There was only one thing stopping me from releasing the project: my scribbles.
Over the last two weeks,
I kept a set of notes on things that I wanted to check on before
the release.  During a normal week, I probably could have taken care of these
before the weekend, but this last week was not a normal week.  As such, it took
me until Saturday evening to get everything cleaned up.  It did take longer to
clean everything up than I thought it would, but it also felt like it was the
right amount of time to focus on those issues as well.&lt;/p&gt;
&lt;p&gt;What did I clean up?  Most of the things that I cleaned up were simple patterns
that I was not sure that I followed while doing the refactorings.  A good example
of this is my casual usage of &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;.  When I am writing code the
first time, I may decide to write the code as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is a perfectly logical construct to use, and I use it often.  When I
am writing code, I may be concerned about adding some extra information to the
function that will affect either &lt;code&gt;some_condition&lt;/code&gt; or &lt;code&gt;some_value&lt;/code&gt;.  As such, I
often decide to write constructs like the one above to give me flexibility
while implementing the algorithm. But once I have completed development, I
would easily argue that it is not as readable as it could be.  I would argue
that, if possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;some_condition&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is a better pattern to follow.  Instead of being spread out within the function,
the information needed to understand the &lt;code&gt;if&lt;/code&gt; statement is in the immediate
vicinity of the &lt;code&gt;if&lt;/code&gt; statement.  From my point of view, that is good!&lt;/p&gt;
&lt;p&gt;However, that improved pattern comes with a couple of caveats attached to it.  The first
is that the construct works in simple cases, but not in the more complicated cases.
A good example of that is a nested &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_other_condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, it may be possible to use that improved pattern on the second &lt;code&gt;if&lt;/code&gt;
statement, but it depends on the other logic in that function.  The other
dependencies in the function is also the second caveat.  If
the scope of the function is small enough, the possible dependencies on the &lt;code&gt;if&lt;/code&gt;
statement decrease, making it more likely that the improved pattern can be used.
But the larger the function, the more likely it is that the pattern will fail.&lt;/p&gt;
&lt;p&gt;Along with that pattern, there were also some refactorings to optimize how I
was using &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; statements.  Once again, I was not using them improperly,
but I felt I could rewrite them to be more readable and maintainable.  However,
along a similar line of thinking but with &lt;code&gt;if&lt;/code&gt; statements, I had decent room
for improvement there.  Refactoring &lt;code&gt;if&lt;/code&gt; statements into &lt;code&gt;if&lt;/code&gt; assignments where
possible helped, as did moving any variables used in &lt;code&gt;if&lt;/code&gt; constructs closer
to where they were being used.&lt;/p&gt;
&lt;p&gt;And in each case, it was a simple change, but it took time to work through
it.  Look through the source files for patterns that I wanted to improve on.  For
each change, I made the change and executed the full set of scenario tests against
the change before allowing it to remain.  If it did not pass, it was time for some
debugging.  When it did pass, make sure it looked right and stage it in the
project’s Git repository before moving on.&lt;/p&gt;
&lt;h3 id="lather-rinse-and-repeat"&gt;Lather, Rinse, and Repeat&lt;a class="headerlink" href="#lather-rinse-and-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Do that repeatedly.  If I had to guess, I repeated that action about 500 times over the
course of the week.  But it was decent work that I could easily
do when I had any energy and available time during a slow project week.&lt;/p&gt;
&lt;p&gt;And having crossed out all the scribbles on my work sheet, it was around noon
on Saturday when I was able to sign off on Release 0.9.3.&lt;/p&gt;
&lt;h2 id="issue-159-weird-indents"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/159"&gt;Issue 159&lt;/a&gt; – Weird Indents&lt;a class="headerlink" href="#issue-159-weird-indents" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Feeling better on Saturday evening then I had all week, I decided to start looking
at Issue 159.  At first glance it might not seem correct, but the following Markdown
document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;should parse into a level-one ordered list with two items and a level-two ordered
list nested within the first item of the level-one list.  Because the &lt;code&gt;1&lt;/code&gt; on the
third line occurs before the &lt;code&gt;I&lt;/code&gt; on the first line, the third line is interpreted
as a new list item for the level-one list instead of the level-two list.&lt;/p&gt;
&lt;p&gt;The problem was that this document was being parsed as a &lt;code&gt;1-2-2&lt;/code&gt; instead of a &lt;code&gt;1-2-1&lt;/code&gt;.
It took a bit of debugging to figure this one out, but I was able to resolve it within
a couple of hours.  When checking for possible parent lists for line 3, the code
was using the &lt;code&gt;ident_level&lt;/code&gt; field of the list tokens to determine which list was
the parent list.  However, because of the long number for the list item on
line 3, the &lt;code&gt;indent_level&lt;/code&gt; for the new token on line 3 was 7, greater than the
&lt;code&gt;indent_level&lt;/code&gt; of 6 for the list token from line 2.&lt;/p&gt;
&lt;p&gt;To properly figure out which token was the parent list token, I did my usual scribbling
on paper and came up with some very simple cases.  At that point, it became
obvious to me what the solution was.  For the first line’s list token, the effective
range for list item starts is between column 1 and column 3, creating an &lt;code&gt;indent_level&lt;/code&gt;
value of 3.  The second line’s list token range is between column 4 and column 6,
creating an &lt;code&gt;indent_level&lt;/code&gt; of 6.  So, while the right side of the start for line 3’s
list token is close to the range for line 2, the left side of the start for line 3
is firmly within the range for line 1.&lt;/p&gt;
&lt;p&gt;Once I changed the algorithms to check the start of the list item against the ranges
of the lists, the problem was solved!&lt;/p&gt;
&lt;h2 id="nested-lists"&gt;Nested Lists&lt;a class="headerlink" href="#nested-lists" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting on Sunday morning, I was able to make progress on setting up the
scenario tests based on the various combinations of containers.  While I did mark
this down in my Issues List as &lt;code&gt;Nested Lists&lt;/code&gt;, I understood that to mean not only
nested list elements, but any kind of nested container elements.  Confident that
the two-level nesting combinations were all tested by the specification itself,
I decided to start with the three-level nesting combinations.&lt;/p&gt;
&lt;p&gt;It took a while, but by the late afternoon I had all scenario tests coded and
the preliminary results for those tests.  There were a small handful of tests
that failed outright, mostly due to transitions between one container and the
other container and back again.  I quickly took care of those and fixed them
so that they would not assert and fail.  With those out of the way, the remaining
failures were both about whitespace.&lt;/p&gt;
&lt;p&gt;In both cases, the scenario tests pass their parsing requirements and their
HTML generation requirements but fail on putting the document back together
again.  In each case, it is because the calculated whitespace is not correct,
leading to regenerated Markdown code that is misaligned.  While it is important
to get these issues taken care of, it is just a matter of finding the right
whitespace to add at the right time.&lt;/p&gt;
&lt;p&gt;But, with Sunday evening approaching, I had to put of further exploration of
those failures until later in the week.  This article was only partially written,
and I knew it would take up the rest of the night getting it close to the point
where I could finish proofreading it on Monday night.  But I will be working
towards taking care of that soon.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know that this may seem like a trivial measure of where the project is at
the moment, but I am pleased that the count of serious issues is in the
low single digits.  I am also pleased that I am finding some issues with the
nested containers.  Well, I am not pleased that I am finding them, but I am
pleased that I am finding them before they are being reported.  And I am
quite sure that I can fix them relatively quickly.&lt;/p&gt;
&lt;p&gt;Another side effect of testing the three-level nested containers is that I
am fairly confident that it will have a positive effect on the four-level
nested container testing as well.  From what I was able to discern from the
whitespace failures, it looks like the whitespace that came before certain
container elements is not being properly added to the whitespace for more
nested containers.  That means if I properly address those issues now, it should
cut down on similar issues with extra nesting.  At least that is my hope.&lt;/p&gt;
&lt;p&gt;As always, keeping a positive attitude, and working towards getting the
remaining items on the Issues List resolved.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since I started working on Nested Lists, it is a good bet that I will probably
be working on that this week.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:yes"&gt;
&lt;p&gt;Yes, I know that the &lt;code&gt;F&lt;/code&gt; in RTFM stands for something else. &lt;a class="footnote-backref" href="#fnref:yes" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Improving Quality - Just Get It Done</title><link href="https://jackdewinter.github.io/2021/12/13/improving-quality-just-get-it-done/" rel="alternate"></link><published>2021-12-13T00:00:00-08:00</published><updated>2021-12-13T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-12-13:/2021/12/13/improving-quality-just-get-it-done/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/"&gt;last article&lt;/a&gt;, I talked
about making hard choices when it comes to projects.  In this article, I talk
about the follow-through with the choice that I needed to make last week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having decided that I needed to replace the whitespace processing in the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
parser, the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/"&gt;last article&lt;/a&gt;, I talked
about making hard choices when it comes to projects.  In this article, I talk
about the follow-through with the choice that I needed to make last week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having decided that I needed to replace the whitespace processing in the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
parser, the follow through was brutal.  As of last week’s article, I had burnt
through all except twenty-five scenario tests.  Experience led me to believe
that those remaining tests were going to be the hard ones.  Either fortunately
or unfortunately for me, depending on one’s viewpoint, my estimates on
the PyMarkdown project and work to be done have been spot on lately.  It was
going to be on hell of a week!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.
For a full record of the changes talked about in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/35f869d34dfa65c12daa9e1f6c8890d4d45eead5"&gt;05 Dec 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/fd9707d86520688c39e175e1433b74807bacd8c2"&gt;12 Dec 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="setting-perspective"&gt;Setting Perspective&lt;a class="headerlink" href="#setting-perspective" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are often diverse ways of saying the same thing. The gist of what I
remember from one lecture that I attended is that the lecturer, someone smarter
than me by far, was talking about how 80% of coding is just following established
patterns.  He further went on to say that the remaining 20% is a mixed bag of tasks
that will either prove you to be a competent developer or force you to hurl your
monitor out the window in frustration.  For sure, that might seem like
hyperbole to most. But if you ask most software
developers to be honest about whether they have thought about throwing things around
the office, including their computer or monitor, most will admit that they have had
those thoughts.&lt;/p&gt;
&lt;p&gt;That frustration is just a natural thing.  Software does exactly what you it is
told to do, no more and no less.  It then follows that if a developer has an incomplete
picture of what they want to do, then the result is a program that is incomplete.
And while the high-level picture of what to be done is always clear, that picture
gets grainier as the software developer zooms in to individual sections of that
picture.  As a result, the gap between “the ideal” and “the reality” are what are
known as bugs.  The real question that faces most developers is whether they can
find all the relevant bugs before the users of their programs do.&lt;/p&gt;
&lt;p&gt;For the last week, I had been in a forest where there were tons of those bugs
lurking around every corner.  While it took a bit of work to get through them,
I had managed to vanquish most of the bugs about whitespaces.  But the reality
of software development is that the easy to find bugs are almost always the first
to go, leaving the trickier bugs to diagnose and fix.  That is where I started
this week.  With tricky bugs.&lt;/p&gt;
&lt;h2 id="dealing-with-tabs"&gt;Dealing With Tabs&lt;a class="headerlink" href="#dealing-with-tabs" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I talked about in the
&lt;a href="https://jackdewinter.github.io/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/#the-bad"&gt;last article&lt;/a&gt;,
tabs in Markdown are treated
as tab stops and not just blindly replaced with four space characters.  With eight
unresolved tests that dealt with tab characters, this was not something that I could
delay addressing for much longer.  There was no other choice other than trying to
tackle this issue head on.&lt;/p&gt;
&lt;p&gt;Dear readers:  I know you might think I am not being truthful about taking a good
day and a half to think about the impact of tabs on the parser. But I did. In my
usual fashion, I scribbled things out on paper and talked to myself, working through
the various issues that could arise with different solutions.  There were a half-dozen
“half-solutions” that I produced, but each was quickly discarded.  To be honest,
calling them half-solutions is probably generous.  In each case, I was trying
to deal with the effects of having tabs without dealing with the actual
tab characters themselves.&lt;/p&gt;
&lt;p&gt;That did not work very well for me.  Those solutions did take care of resolving
the perceived size of each tab character, but it introduced more problems.  Specifically,
they often included passing extra lengths around and made some calculations a
lot more difficult in the process.  On top of that, even with helper functions,
I found that I was coding variations of how to use those helper functions in multiple
places. It was just messy and not very maintainable.&lt;/p&gt;
&lt;p&gt;So, after deciding to use all those scribbles as kindling in our fireplace, I decided
to go for what I consider to be the nuclear option.  Instead of creating a maintenance
nightmare in the rest of the code, I decided to add this code to the Container Block
Processor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;line_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detabify_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;position_marker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PositionMarker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding a new &lt;code&gt;detabify_string&lt;/code&gt; function to the &lt;code&gt;ParserHelper&lt;/code&gt; class, I called it
from the start of the Container Block Processor and its handling of each line.
I used it to replace any tabs characters in the string in
that one place.  I used almost identical code once in the Markdown generator to
process the test data before the Markdown comparison there.&lt;/p&gt;
&lt;p&gt;And except for some altered test data that needed to be addressed, I was done.
There was no “including tab counts” that needed to be altered and passed around.
There was no need to know if I had preprocessed a given string or if I still had
to do that.  There was no weird &lt;code&gt;if&lt;/code&gt; statements to deal with tab characters.
Just one &lt;code&gt;if&lt;/code&gt; statement in the parser code, and one &lt;code&gt;if&lt;/code&gt; statement in the test
code and it was done.&lt;/p&gt;
&lt;h3 id="why-the-long-journey"&gt;Why The Long Journey?&lt;a class="headerlink" href="#why-the-long-journey" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So why did it take me so long to come to that conclusion?  Data integrity. At
the start of this project, I wanted to ensure that the integrity of the parser
was as high as possible at every stage.  I had it in my head that translating
the tab characters in any way was violating that rule. So, I tried to take the
long way around and deal with the effect instead of the character itself.&lt;/p&gt;
&lt;p&gt;And I guess in a certain way, it is changing things.  But the question that I ended
up asking myself was whether that violation was relevant to the tokenizer.  I could
easily argue that from the viewpoint of parsing the Markdown as a HTML parser, it
was crossing the line.  That was crystal clear.  But from the point of view of a
tokenizer, I ended up wavering on that viewpoint.  The tokens are just truthful
representations of what was parsed.  As the specification is clear that tokens are
to be interpreted as the corresponding number of space characters, there was a
new question.  That question was whether an uninterpreted or interpreted
representation of that tab character was the best choice.&lt;/p&gt;
&lt;p&gt;But it was not an easy journey or choice.  And as with all hard choices, it just
took a while for me to work through things and make sure that it was the right
choice.&lt;/p&gt;
&lt;h2 id="dialing-in-the-remaining-tests"&gt;Dialing In The Remaining Tests&lt;a class="headerlink" href="#dialing-in-the-remaining-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the tab tests out of the way, I needed to apply my normal work ethic
to get movement on the remaining issues.  But with a firm guideline on
how to approach the whitespace, it only took a couple of days before I had
the remaining scenario tests passing, with caveats.  I just focused on making
sure that the right whitespace was being applied to the properly scoped token,
and that helped a lot.  It was still challenging work getting everything assigned
properly, but a simpler set of rules made decisions easy to make.&lt;/p&gt;
&lt;p&gt;What were the caveats?  There are still a couple of scenario tests that
I disabled instead of getting them to work, and they fall into two groups. The
first group is a set of tests that have three or more levels of nesting.  While
there are some tests that “just work”, I want to make sure to spend some time
and effort to properly scope and focus on each combination and make sure that
it works.  The second group are scenario tests involving changing indentation,
usually from the Block Quote characters.  Once again, there are some simple
combinations, but I feel that the right thing to do is to specifically focus
on those combinations in their own scoped issues.&lt;/p&gt;
&lt;p&gt;And to be clear, everything still parses properly.  It is just the calculation
of the whitespace lengths that is in question.  And I want to get those right,
not just kind of right.  I passionately believe that it is a good enough reason to
handle them separately.&lt;/p&gt;
&lt;h2 id="cleaning-up"&gt;Cleaning Up&lt;a class="headerlink" href="#cleaning-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the remaining tests either passing or skipped, it was time to start cleaning
up after the mess of making those changes.  There were a handful of places where
I had forgot to change
from my “in the moment” variable names (like &lt;code&gt;abc&lt;/code&gt;, &lt;code&gt;foo&lt;/code&gt;, and &lt;code&gt;gg&lt;/code&gt;) to variable
names that describe their function.  Using &lt;a href="https://sourcery.ai"&gt;Sourcery&lt;/a&gt;, I
was able to calculate a relative health of each function, and I kept on refactoring
until that measurement was at least 40 for every function in the project.
Using &lt;a href="https://www.code-inspector.com"&gt;Code Inspector&lt;/a&gt;, I was able to quickly
figure out what PyLint issues needed to be addressed.&lt;/p&gt;
&lt;p&gt;To be honest, this part of the process was just relaxing.  Each of the refactoring
steps I took were easily tested, thanks to a complete set of passing scenario tests.
If I made a change and one of the tests failed, I just rolled back the last change
and tried again.  While it did take three or four hours to complete, there was
very almost no stress associated with those changes.  It was a pleasant change for
working over the weekend.&lt;/p&gt;
&lt;h2 id="watching-the-issues-fall"&gt;Watching The Issues Fall&lt;a class="headerlink" href="#watching-the-issues-fall" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finishing the prior work just before noon, I took a rather leisurely lunch and
got some of my energy back.  It was a hard slog getting everything finished and
tidied up, but it was nice to get there.&lt;/p&gt;
&lt;p&gt;The issues that I could choose to work on had as much potential to be easy issues
as they had to be difficult issues.  I knew that the first one,
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/99"&gt;Issue 99&lt;/a&gt; was going to be
easy as this work had all kicked off because of the problems I had addressing that
issue.  But what about the others?&lt;/p&gt;
&lt;p&gt;As I made my way through the other issues registered around the same time as Issue 99,
only one issue out of seven logged was not at once resolved.  I was fine leaving
those issues for another week.  It just felt good that the work that I had undertaken
to correct those other issues had cleaned up six other issues.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know it may sound funny to some people, but I was sure that the heavy sigh I
made when I finished working on the tests could be heard throughout my house.  It
was just a good feeling to simplify something that was complex and difficult
to maintain. It was even better to see multiple tests resolving themselves because
of me refactoring the whitespace from the containers.&lt;/p&gt;
&lt;p&gt;But I know that I need to focus more on cleaning up the remaining issues in both
the GitHub issues list and my own Issues List.  So hopefully I will be able to get
both of those cleaned up.  I know I am making timely progress though, and that gives
me hope that I can clean things up nicely within a couple of weeks.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having finished the changes to address whitespace issues, I am eager to get back
to a mixture of refactoring code and fixing issues.  Not sure what mix of those
two is going to happen yet, but I am fairly sure I want a good balance of both.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="extract method"></category></entry><entry><title>Improving Quality - Sometimes, There Is No Easy Way</title><link href="https://jackdewinter.github.io/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/" rel="alternate"></link><published>2021-12-06T00:00:00-08:00</published><updated>2021-12-06T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-12-06:/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/29/markdown-linter-the-bug-that-almost-knocked-me-down/"&gt;last article&lt;/a&gt;, I talked
about my progress in reducing the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project issue count, including the
bug that almost knocked me down for the count!  In this article, I talk about
making hard choices when it comes to projects.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having fixed some issues in the prior …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/29/markdown-linter-the-bug-that-almost-knocked-me-down/"&gt;last article&lt;/a&gt;, I talked
about my progress in reducing the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project issue count, including the
bug that almost knocked me down for the count!  In this article, I talk about
making hard choices when it comes to projects.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having fixed some issues in the prior week, I decided to tackle another issue
from the outstanding issues list.  What I thought at first was a minor snag
turned out to be a major issue.  More than a major issue.  More of a story.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.&lt;/p&gt;
&lt;h2 id="the-good"&gt;The Good&lt;a class="headerlink" href="#the-good" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After taking a well-deserved night off, I started to work on one of the logged
issues, &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/99"&gt;Issue 99&lt;/a&gt;. There
was no specific reason that I picked this issue, except for a feeling that it was
a good starting issue for the week.  It looked like a simple issue.  When a HTML
Block element was encountered in a List element, the List element was being closed
prematurely.&lt;/p&gt;
&lt;p&gt;Digging into the debug for the failing tests, I was able to quickly spot what
the issue was, and subsequently fixed it.  I manually verified the tokens, and
everything looked good with each token.  Then I did a mental conversion from tokens
into HTML, and everything was also good with the conversion.  The only things left
were to verify the translation back into Markdown and to verify that the other consistency
checks were passing.&lt;/p&gt;
&lt;p&gt;Looking at the code in the &lt;code&gt;transform_to_markdown.py&lt;/code&gt; module, I tried to
add some simple code to adapt to the new condition, but it did not work on
that first try.  Come to think of it, it did not work on my second try either.
Having had a long day, I chalked that experience up to tiredness,
deciding to try again the next day.&lt;/p&gt;
&lt;h2 id="the-bad"&gt;The Bad&lt;a class="headerlink" href="#the-bad" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before sitting down at my computer for work that next evening, I made sure I had
a healthy meal beforehand, I was all nice and showered, and that I was nice and
relaxed for the most part.  If nothing else, I wanted to start that evening’s
work in a good mood to address the issue from the night before.  I mean…
how hard could it be?&lt;/p&gt;
&lt;p&gt;After three hours of trying to get it working and failing, I had my answer.
It was a tough problem to solve.  And it had to do a lot with history and
requirements.&lt;/p&gt;
&lt;p&gt;Because of the way that Markdown is processed, there are only two real solutions
to deal with containers and their impact on a given line.  The first solution
is to deal with containers after the leaf elements and inline elements have
been dealt with.  This is a lot less work in the end, but the setting up of
each element must be precise.  In addition to that, tabs within a Markdown
document are a problem.&lt;/p&gt;
&lt;p&gt;For reference purposes, Markdown parsers interpret tabs as tab stops of 4.  Tab
stops means that the tab-to-space conversion ratio depends on where in the line
the tab is.  The value 4 signifies that at best, a single tab character can be
interpreted as 4 space characters. The way to think about it is this. If the
index in the line is equal to 0 with a modulo of 4&lt;sup id="fnref:modulo"&gt;&lt;a class="footnote-ref" href="#fn:modulo"&gt;1&lt;/a&gt;&lt;/sup&gt;, 4 spaces are added.
If the index modulo 4 is 1, then 3 spaces are added.  Similarly, if at index 2,
then 2 spaces are added, and if at 3, then 1 space is added. This allows things
to be aligned on tab stops that occur in the middle of lines.  But these calculations
assume that you know that index on the line before calculating its impact.  As
any container indents have not been applied, that is not possible.&lt;/p&gt;
&lt;p&gt;The other option is to handle the container elements and the other elements on
a line-by-line basis.  Because of the above issues with tab stops, which is the
way I decided to do things.  I knew that it was going to be a bit more work to
keep track of both things at the same time.  I needed to juggle
distinct parts of the same line at the same time, ensuring that I knew what
the effects of the container elements were before parsing the line.  But to
be blunt, it evolved in a bad way.&lt;/p&gt;
&lt;p&gt;As I sat there that night, looking at the source code, I could not believe how
convoluted it had become.  There were more than three distinct types of merge
functions, each for a specific case.  And because I developed those functions
as I progressed, these were organic, with exceptions to rules throughout those
functions. It was just a mess to try and figure out.  &lt;/p&gt;
&lt;p&gt;I knew I needed to figure it out to move on, so I decided to take the next
evening to focus on understanding the algorithms.  Because I needed to ensure
that I verified any recent changes before going on, I really needed to understand
those functions and how to properly change them for the new data.  In my mind,
it was necessary.&lt;/p&gt;
&lt;h2 id="the-ugly"&gt;The Ugly&lt;a class="headerlink" href="#the-ugly" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While my optimism was a bit more deflated than the night before, I gave myself
a similar starting position the next night.  But even with that good starting
point, I spent the next two hours figuring things out and hurling at least a half
dozen “WTF?” insults at my monitor before I was done.  I had scribbles down over
a good five sheets of paper strewn all over my desk.  And those were just the ones
that I did not scribble on top of and then threw out because I got it wrong.  I
stopped counting those sheets after the first ten.&lt;/p&gt;
&lt;p&gt;It had taken me two hours, but I had a good concept of what was going on.  I just
did not have any ideas on how to change the code to do what I needed it to do
for the issue that I just fixed.  Frankly, I was amazed that what I had figured
out worked.  I did not intentionally mean for the code to get like that, but
the complex tangle of code was captured on those five sheets of paper.  And
they did not look neat and tidy either.&lt;/p&gt;
&lt;p&gt;It was on a bit of a whim that I started sketching out a similar algorithm
for managing the container text after the other elements had been processed.  This
was more in line with my design decision to keep container processing separate
from the leaf processing, so that was one good sign.  The other good sign was
that within fifteen minutes, I had a solid design for the base algorithm.  Twenty
minutes later, I had a list of the changes I would need to make to the whitespace
in the tokens to present the needed information required by the algorithm.&lt;/p&gt;
&lt;p&gt;I knew that the new sketch would not be that easy to implement, as things rarely
are as easy as they seem.  But even with a bit of extra work, the new sketch
design was simple to understand, and the changes to the tokens to support those
changes were also easy to understand.  There was only the one algorithm, with
a couple of small algorithms on the side to calculate lists for the main algorithm.
And I did not take care of translating tabs into spaces either.  That was something
else I would have to do.&lt;/p&gt;
&lt;p&gt;That is where I got to the hard part.&lt;/p&gt;
&lt;h2 id="the-hard"&gt;The Hard&lt;a class="headerlink" href="#the-hard" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was now the start of Friday evening, and I had an exceedingly difficult choice to
make.  If I stuck with the current algorithm, it would take me at least
another day or two to make my current change.  I did not have
any good estimate to base a guess on due to state of the algorithms.  I had a
good feeling that if I had to make similar changes, as I expected to have to do
for at least half of the remaining issues, I would have to take a similar
length of time to make those changes.&lt;/p&gt;
&lt;p&gt;On the other hand, I could change that algorithm to the proposed design, but there were
no guarantees that
it would fix things.  At the very least, the new algorithm would be more understandable,
and thus more maintainable.  But that just meant that the focus for addressing
issues like these would focus more on making sure that the right whitespace is
encapsulated in the tokens for the container algorithm to use.  And I would still
have to find a way to deal with tab characters.&lt;/p&gt;
&lt;p&gt;That is when I realized: there just was no straightforward way to deal with this problem.
Regardless of which option I chose, there would be a decent amount of work.  So,
any short-term considerations were out, as they were even.  I had to start
thinking about the long term, and how my choice would
reflect on the future of the project.&lt;/p&gt;
&lt;p&gt;Working things out in my head,
I knew that I had made my decision when I started to try and convince myself that
the current solution was good enough.  I was not doing my usual process of evaluating
multiple choices on their merit, I was arguing to myself that what I had met some
minimum bar that was hard to define.  To me, that meant that I had a clear winner
in the other choice, I was just worried about the cost.&lt;/p&gt;
&lt;p&gt;That is when I had an objective talk with myself about the merit of the new
approach versus the old approach.  If I had a tough time thinking about how to
modify the old algorithm now, how much would it cost to change it in another week
or two?  Would I have
to go through the same process again?  The more I asked myself questions like
that, the more the cost of the new algorithm did not seem to be that expensive.&lt;/p&gt;
&lt;p&gt;The more I thought about it, it was a hard decision, but I needed to rewrite that
part of the code.  A simpler algorithm costing more now would easily safe effort
in the future.  It sucked, but I knew I needed to make the hard decision.&lt;/p&gt;
&lt;p&gt;I was going to rewrite the project’s Markdown generator.&lt;/p&gt;
&lt;h2 id="the-work"&gt;The Work&lt;a class="headerlink" href="#the-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With everyone else out of the house for most of the day, I had a rare Saturday to
myself.  Because I expected to throw even more “WTF?” comments at my monitor,
it was a good thing I was alone in the house.&lt;/p&gt;
&lt;p&gt;The first thing that I noticed is that while I needed to rewrite the Markdown
generator, I did not have to rewrite most of it.  With one or two exceptions, the
handling of the non-container tokens was good.  As for those small exceptions, I
was sure that only the whitespace handling would need to change, and that I could
manage those changes.&lt;/p&gt;
&lt;p&gt;With that knowledge in hand, I turned off all existing checks, picked a simple
scenario test with multiple lines and no container elements, and started to work
on it.  I was not trying to solve the entire problem, just get
a good head start on rewriting the code.&lt;/p&gt;
&lt;p&gt;It was not too long before I had a promising idea of what I needed to do, and I committed
that code to my local repository.  Then I enabled the Markdown generator check
for only those scenario tests that did not container any container elements.
Working through those issues, I then added checking for scenario tests including
only Block Quote elements and worked through those issues.  Finally, I repeated
that process with List elements, to get to where I am now.&lt;/p&gt;
&lt;h2 id="looking-ahead"&gt;Looking Ahead&lt;a class="headerlink" href="#looking-ahead" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As of the writing of this article, I have 25 scenario tests that I need to get
working without enabling the remaining tests with both Block Quote elements and
List elements.  Turning those on, the total jumped to 53 scenario tests, which
is still a manageable number.  Some of those tests are going to be easy to resolve,
and there are other tests that are going to tax me.  But having the simplified design
means that it is easy to defend and that change makes it worthwhile&lt;/p&gt;
&lt;p&gt;It is worthwhile because I can easily maintain a picture in my head about what
needs to happen.  Every single whitespace character needs to be preserved in a
token somewhere.  Most of the time, which means that I need to ensure that the
whitespace emitted in container tokens is correct.  That is simply a fact because
the new algorithm is simple, and I mean to keep it that way.  Sure, it is shifting
the effort to the tokens, but I feel good about that.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During the middle of the week, I was at a bit of a low point, mentally speaking.
While I realize
that I am not perfect, I do hope that I make good development choices that do not
result in too much wasted effort.  I do acknowledge that there are parts of the PyMarkdown
code base that look busy, but usually I keep things grouped by
functionality.  But in those cases, there are a small group of functions that
provide support for each other and their common responsibility.  In each of those
cases, I can usually pick up a function and understand its purpose within
five minutes, and what to change in fifteen minutes.&lt;/p&gt;
&lt;p&gt;Not being able to do that is exactly what I had to come to terms with during
this week.  I had spent time maintaining code that became overly complex and spun
out of control.  It was enough out of control, that I did not think that there
was an option other than to rewrite that functionality using a different algorithm.
That hurt.&lt;/p&gt;
&lt;p&gt;But as I author this article, I think my viewpoint has changed.  With around fifty
scenario tests left to convert and get working, I find myself having a renewed
sense of optimism.  The new code is cleaner and more direct on what it is trying
to accomplish.  The new code is independent of the processing for the other
Markdown elements, so it just focuses on what it needs to do.  And more importantly
to me, the new code is easily more maintainable.&lt;/p&gt;
&lt;p&gt;Did I throw away a Saturday on getting the new code to work? Yes.
However, if I am honest, this new code just feels better.  It is a bit more work
right now to get back to a “stopping point” where I can start fixing issues
again.  But I am more confident that any later changes can be incorporated into
the generation of the tokens themselves, not requiring any changes to the new
functions for handling container elements.&lt;/p&gt;
&lt;p&gt;And when it all comes down to it, that is what is important.  I sometimes forget
that every line of code that I write is an experiment.  I make good guesses
as to what I need, so my coding accuracy is decent, but it is still just a guess.
In this case, an experiment failed, and I needed to try and find a better way to
accomplish the same task.&lt;/p&gt;
&lt;p&gt;So, yes. it sucks that I had to do a rewrite. But honestly, sometimes, there
is no uncomplicated way, just difficult paths to follow.  And I am okay with that… now.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since I have started on the first part of this changeover, it makes sense
that I keep on going until it is finished.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:modulo"&gt;
&lt;p&gt;This is a fancy way of saying “what is the remainder after dividing by the other number?” &lt;a class="footnote-backref" href="#fnref:modulo" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="extract method"></category></entry></feed>