<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack's Digital Workbench - Software Quality</title><link href="https://jackdewinter.github.io/" rel="alternate"></link><link href="https://jackdewinter.github.io/feeds/software-quality.atom.xml" rel="self"></link><id>https://jackdewinter.github.io/</id><updated>2021-07-12T00:00:00-07:00</updated><entry><title>Markdown Linter - Full Of Sound And Fury</title><link href="https://jackdewinter.github.io/2021/07/12/markdown-linter-full-of-sound-and-fury/" rel="alternate"></link><published>2021-07-12T00:00:00-07:00</published><updated>2021-07-12T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-07-12:/2021/07/12/markdown-linter-full-of-sound-and-fury/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/28/markdown-linter-sometimes-you-have-to-go-backwards/"&gt;last article&lt;/a&gt;, I talked
about starting to work on getting rid of some long-standing issues: nested Container Block elements.
In this article, I talk about continuing that work and dealing with the remaining
nested block scenario tests.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wish I could say that this was a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/28/markdown-linter-sometimes-you-have-to-go-backwards/"&gt;last article&lt;/a&gt;, I talked
about starting to work on getting rid of some long-standing issues: nested Container Block elements.
In this article, I talk about continuing that work and dealing with the remaining
nested block scenario tests.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wish I could say that this was a good week, but it was not.  It was not even this week
that I am about to talk about here; that was last week.  Despite my best intentions,
I got sick, and it has taken the better part of a week for me to get better.  To hear
me talk about it, please read my upcoming article, Autism and Patience Do Not Mix,
coming out later this week.&lt;/p&gt;
&lt;p&gt;Before Monday afternoon when I got too sick to work, I had 90% of this article finished.
I knew I was getting sick, but I did not feel good about publishing something that was
only “mostly” done.  I hope my decision to delay publishing this article for
a week is okay with any readers.  I would rather postpone publishing an article
for a full week than to release something that I did not think was a quality article.&lt;/p&gt;
&lt;p&gt;And on a similar level, I did not want the care that I put into that week’s work
to be glossed over by an article that was not on par with that work.  As I talk about
below, I was stunned to find out that there were only 2 examples out of 673 examples
in the GFM specification
that deal with relative indentation of block elements.  It was something that I knew
about and something that I should have dealt with earlier.  But with no pressure
from the specification’s examples to deal with relative indentation, it was not until
this week that I worked to resolve the issue.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/60abfcb562098a63910dc3bc3dc954186df2a7ee"&gt;04 Jul 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9d3f1bb66b32fe8cec2cf3c4dde0ac141400435b"&gt;05 Jul 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-do-i-use-detailed-log-files"&gt;Why Do I Use Detailed Log Files?&lt;a class="headerlink" href="#why-do-i-use-detailed-log-files" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing that I do not think I have ever mentioned is why I use log file output
instead of just debugging the code interactively.  In normal everyday development, I do a bit of both
as the issue requires.  For me, the real understanding comes from looking at
a big picture and comparing it to other pictures.  Whether the right comparison pictures
are from earlier runs of the same scenario or pictures of similar scenarios depends on
what I am looking for.  Basically, I see it as a puzzle with lots of data that
I need to solve, and I love it!&lt;/p&gt;
&lt;p&gt;While the success of this technique may vary from person to person, it just
works well for me.  If I am comparing the output of one test to another test, this technique
allows me to copy the relevant section of the log files to another editor, run the
tests again, and examine the both log file sections side-by-side.  If I did not
understand something well enough, I can reset my position in both log files to an
earlier point and restart my examination from those new positions.  Most importantly,
it allows me to see a larger sequence of values than the ones visible from a single
breakpoint within the code.  At it with that data that I can better see the bigger
picture.&lt;/p&gt;
&lt;p&gt;For those reasons and others, more detailed log files just work better for
me.  Knowing the parser because of my experience with it, I find it easy to
follow along with how each line is parsed, even though the complicated
sections dealing with Container Block elements.  I have learned that I need
to usually ignore most of the “stuff” in those blocks of the logs unless
I am looking for something specifically to do with Container Blocks.&lt;/p&gt;
&lt;p&gt;But even with all that good stuff working in my favor, that does not always
make the job of fixing issues easier.&lt;/p&gt;
&lt;h3 id="more-detail-does-mean-more-work"&gt;More Detail Does Mean More Work&lt;a class="headerlink" href="#more-detail-does-mean-more-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While there are benefits to using more detailed log files, there are drawbacks
as well.  If you are not used to the volume of data, it can be overwhelming.
Even being used to the volume, there are still times that I need to walk
away because it becomes overwhelming.  There are still times where I look
at all the data without the right mindset, and it all looks like gibberish.
I find closing my eyes and taking three or four deep breaths does wonders
for getting the right mindset, but even that does not always work.  Sometimes
I need to clear my mind by walking around for 10 to 15 minutes until my
head clears.&lt;/p&gt;
&lt;p&gt;But in the end, my evaluation on whether the costs are worth the benefits always
produce a resounding “Yes!”.  But even with that yes, I do admit that there are
times, like with Scenario Test 237 and 238, that those costs and benefits
get tested… sometimes to their maximums.&lt;/p&gt;
&lt;h2 id="scenario-test-237"&gt;Scenario Test 237&lt;a class="headerlink" href="#scenario-test-237" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting with what I believed to be the easiest of the two disabled tests, I
started with Scenario Test &lt;code&gt;test_list_blocks_237&lt;/code&gt;, quickly renamed &lt;code&gt;test_list_blocks_237x&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike the previous two tests, these two tests were introducing something
that was a core tenet to the nesting of Container Blocks:  relative spacing.
Not complaining to the writers of the
&lt;a href="https://github.github.com/gfm/"&gt;GFM specification&lt;/a&gt; too much,
but as this is a core concept of nested blocks, I wonder why the specification
allocated only two examples to this concept and not more.  With all seriousness,
every other example in their specification can be properly converted into
HTML without worrying about relative spacing.  So, what is relative spacing
or more properly &lt;code&gt;relative nested container block spacing&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Basically, the GFM specification talks about how nested block spacing is not
absolute, but relative to the last Container Block element on that line.  To put
this into perspective, consider the above example.  When properly parsed,
the specification says that it will produce the following HTML output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;one&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;two&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if you look at the Markdown example with an absolute mindset, the text
&lt;code&gt;two&lt;/code&gt; is clearly not indented enough to qualify as being within the
Ordered List element.  So what gives?&lt;/p&gt;
&lt;p&gt;From a relative positioning point of view, the first line is broken down
into the following sections: &lt;code&gt;{space}{space}{space}&amp;gt;{space}&amp;gt;{space}&lt;/code&gt; for
the two nested Block Quotes elements that start the line, &lt;code&gt;1.{space}{space}&lt;/code&gt; for
the Ordered List element that is next on that same line, and &lt;code&gt;one&lt;/code&gt; for the text
for first List Item of that Ordered List element.  Using that same
relative point of view, this means that there are four characters after
the Block Quote elements before the text of that List Block element begins.&lt;/p&gt;
&lt;p&gt;Applying that to the last line of the example, the two nested Block
Quote elements take up &lt;code&gt;&amp;gt;&amp;gt;{space}&lt;/code&gt;, with the following nested Ordered List element
coming into effect after the four space characters &lt;code&gt;{space}{space}{space}{space}&lt;/code&gt;.
At that point, the text &lt;code&gt;two&lt;/code&gt; is present.  This means that, relatively speaking,
the text &lt;code&gt;two&lt;/code&gt; is validly indented to remaining part of the Ordered List element.
Looking at the HTML output above, this is indeed how that is parsed.&lt;/p&gt;
&lt;h3 id="how-to-approach-that-change"&gt;How To Approach That Change&lt;a class="headerlink" href="#how-to-approach-that-change" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In adding this support to the PyMarkdown parser, I was faced with two
options: make the parser’s handling of nested sections relative-aware
or make adjustments where needed.  While I would like to eventually
adjust the parser to be more relative-aware, I quickly figured out
that it would take quite a bit to make that change.  I spent a good
day going through some preview steps of what it would take, just
to get an idea of the effort.  If I had to guess, it would take
at least a month or two, if not more.  Seeing as I want to get the
PyMarkdown linter out there, that was out.  So, the only good option
left was to make adjustments where needed.&lt;/p&gt;
&lt;h3 id="subtle-changes"&gt;Subtle Changes&lt;a class="headerlink" href="#subtle-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To be fully honest, getting to this set of changes took a long
time to figure out, including at least three times where I had to walk
away to clear my head.&lt;/p&gt;
&lt;p&gt;The first part of solving that puzzle was recognizing from the
logs that the &lt;code&gt;__handle_block_quote_section&lt;/code&gt; function was not
providing the right adjusted text.  Specifically, in handling
this case under normal situations, the correct number of space
characters are placed in the respective Block Quote token.  But
because they both start on the same line, things got messed up.
To correct this, I added the following code to ensure the
&lt;code&gt;adjusted_removed_text&lt;/code&gt; and &lt;code&gt;adj_leading_spaces&lt;/code&gt; variables both
had the correct values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;count_of_actual_starts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count_characters_in_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;count_of_actual_starts&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;this_bq_count&lt;/span&gt;
        &lt;span class="n"&gt;adj_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_removed_by_container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;adj_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;adj_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
        &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adj_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that text now adjusted properly, it was on to modifications to
the &lt;code&gt;__handle_nested_container_blocks&lt;/code&gt; function.  For this function,
the &lt;code&gt;indent_level&lt;/code&gt; member variable of the start List Block token was
being set to a number that indicated absolute position, not relative
position.  To remedy that, I added code to calculate the indentation
difference between the original Block Quote element and the original
List Block element.  The &lt;code&gt;adjusted_indent_level&lt;/code&gt; variable was then
adjusted to properly reflect the indentation relative to the Block
Quote element and how it was set on the current line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="n"&gt;list_start_token_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;token_after_list_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;list_start_token_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
        &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;token_after_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token_after_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;adjusted_indent_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;end_container_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With those values calculated, it then allowed me to do the final changes
to the function.  Before the big change was added, I needed the function
to recompute the &lt;code&gt;indent_level&lt;/code&gt; variable to allow for an adjustment to
the relative positioning.   However, before I reset &lt;code&gt;indent_level&lt;/code&gt;, I
needed the algorithm to be aware of whether there was any difference
between the &lt;code&gt;indent_level&lt;/code&gt; variable and the &lt;code&gt;adjusted_indent_level&lt;/code&gt; variable,
so adjustments could be made later.&lt;/p&gt;
&lt;p&gt;After all those changes, it came down to the two lines at the end of
the following example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;adjusted_indent_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;adjusted_indent_level&lt;/span&gt;
    &lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end_container_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;                    
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After all that work, the only thing that still needed to be
adjusted was the &lt;code&gt;adj_line_to_parse&lt;/code&gt; variable containing the
current line.  Because both Container Block elements are processed
independently of any other elements, the &lt;code&gt;adj_line_to_parse&lt;/code&gt; variable
is reset to remove any whitespace that is part of the whitespace for
one of the Container Block elements.  In this scenario, the right
amount of whitespace was not removed, leading the Leaf Block
element processing to be wrong.&lt;/p&gt;
&lt;p&gt;By removing that extra whitespace, everything fell into place, and
it worked!  It was a long way to get there, but it was worth it.&lt;/p&gt;
&lt;h2 id="scenario-test-238"&gt;Scenario Test 238&lt;a class="headerlink" href="#scenario-test-238" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Taking a quick look at this issue, on the surface it seemed to be the
same issue as with scenario test 237, just the order in which the
different indents were applied were on the last line, not the first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;-&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the output tokens, everything looked fine, and the HTML was
being generated properly.  But on closer examination, there was one little
difference that changed the output of the Markdown generator: an extra
line of leading whitespace.&lt;/p&gt;
&lt;p&gt;To make sure that the Block Quote element is being represented properly,
when each line inside of the Block Quote element is tokenized, the leading
spaces including the &lt;code&gt;&amp;gt;&lt;/code&gt; character are stored within the owning Block
Quote token.  This allows for it to be reconstructed without any issues as
all leading Block Quote information is present, even if it varies.  But in
this case, the leading spaces for the first Block Quote were added to the
token, followed by a newline character and a fully indented representation
of the second Block Quote element, both from that line.  While each one
was accurate by itself, when they were combined by the Markdown generator,
they added a lot of extra whitespace.  That was the issue.&lt;/p&gt;
&lt;p&gt;It took a bit of head scratching before I figured it out, but I did
figure it out.  In a nutshell, because of two spaces between the first
Block Quote character and the second Block Quote character, they were not
interpreted as a “group” of Block Quote elements.  Rather, they were
interpreted as a Block Quote element, a space, and another Block Quote
element.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;special_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;special_case_adjusted_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;stack_bq_count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;stack_bq_count&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;block_quote_token_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;block_quote_token_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block_quote_token_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;stack_bq_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;matching_block_quote_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;stack_index&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;matching_block_quote_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;last_newline_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;matching_block_quote_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;special_case_adjusted_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;matching_block_quote_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;last_newline_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;special_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="cleaning-up-with-small-variations"&gt;Cleaning Up With Small Variations&lt;a class="headerlink" href="#cleaning-up-with-small-variations" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having a Monday off and with this week’s article started, I wanted to see if
I could make some progress on two variations: one for scenario test 237 and
one for scenario test 238.  &lt;/p&gt;
&lt;p&gt;As detailed above, the Markdown for scenario test 237 is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where the indentation on the final line allows that line to be included
in the Ordered List element started on line 1.  The small variation there
was to create test function &lt;code&gt;test_list_blocks_237e&lt;/code&gt; with one less space
character on that final line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This reduction in indentation on that final line makes that final line
ineligible for the Ordered List element. I was pleasantly surprised that
it worked right away, without any changes required.&lt;/p&gt;
&lt;p&gt;Scenario test &lt;code&gt;test_list_blocks_238a&lt;/code&gt; includes a similar change, this
time adding an extra space on the final line to make it eligible for
the Unordered List element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;-&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this new test was not as successful as test function
&lt;code&gt;test_list_blocks_237e&lt;/code&gt; was, it only required minimal changes
to make it work properly.  The HTML output was already consistent
with what was expected, but the Markdown generator had additional
whitespace in its output for the final line.  Specifically, when
that final line was parsed, the Paragraph token started with the
extraction of two space characters.  This meant that the regenerated
output had four space character between the final &lt;code&gt;&amp;gt;&lt;/code&gt; character and
the &lt;code&gt;two&lt;/code&gt; text.&lt;/p&gt;
&lt;p&gt;Addressing that issue did not require that much work.  In the
&lt;code&gt;__handle_nested_container_blocks&lt;/code&gt; function, I added the following
code to reduce the number of spaces by the appropriate amount:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;nested_container_starts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;indent_was_adjusted&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;already_adjusted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code was added specifically to address the extra space characters
and to remove them from the adjusted line variable &lt;code&gt;adj_line_to_parse&lt;/code&gt;.
If the indent was adjusted and the current line includes a nested list start
token, this code reduces that adjusted line variable by the list’s indent.
The code itself was made simpler by the handling of an increase in the spacing
already being handled previously in that same function.&lt;/p&gt;
&lt;p&gt;After taking a bit to figure out that solution, once it was implemented,
everything worked fine.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The full quote from Shakespeare’s Macbeth is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a tale told by an idiot, full of sound and fury, signifying nothing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Trying to mentally return to when I learned this line in high school, I
remember talking specifically about that line.  I seem to remember that we
were talking about how Macbeth’s wife had just died, and he did not see that
life contained any meaning for him after that point.
Over the years since high school, my thoughts on that line have changed a
bit.  I now think of that same line
in situations where someone goes on and on about something, only to have
it appear in real life as something with little sound or fury.&lt;/p&gt;
&lt;p&gt;The work that I documented in this article really did feel like that.  When
I started the work, I was not sure how difficult the work was going to be,
only that it would require some changes.  Now, it may be because of the
research that I did to get prepared for these changes, but those changes
ended up
feeling… well… trivial.  I was worried that I was going to have to make
some grand changes to the project to accommodate this “little” issue that
needed to be fixed, and the actual work was “little”.&lt;/p&gt;
&lt;p&gt;Do not get me wrong, I am grateful that those issues required less than
100 lines of code to change.  But at the same time, I realized that I had
built this issue up as “THE NASTY CHANGES REQUIRED TO…”&lt;sup id="fnref:caps"&gt;&lt;a class="footnote-ref" href="#fn:caps"&gt;1&lt;/a&gt;&lt;/sup&gt; instead of
“yup, just some normal tweaking” changes.  For context, I spent a full evening working
on the research and trying simple changes out until I was convinced it would
take a more concerted effort to solve.  And even then, I did some more testing
to make sure that my research was correct. For me, usually that amount of
research leads to a lot of changes.&lt;/p&gt;
&lt;p&gt;And maybe that is why I feel that it went from “sound and fury” to almost “nothing”:
I did proper research.  Sure, it took some time to figure out the correct decisions
to make based on that research, but it was that research that was pivotal.
For me, that is a just a good feeling to have.  While I was not able to show
any actual code as a result of that research, it helped me prune many decision
trees early on, resulting in allowing me to follow a quick path to
the actual work I needed to do.  Essentially, it pointed out the 90% of the
work that I should avoid and had me focus on the 10% of the work that would
be most beneficial.  And that helped a lot!&lt;/p&gt;
&lt;p&gt;In the end, the way I see it, while the “sound and fury” of debugging is
usually where I expect the hard work to be, there are cases where the
“signifying (almost) nothing” portion of the debugging work is where it is at!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After the week I have had being sick, I really am not sure what is going on yet.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:caps"&gt;
&lt;p&gt;For any readers not fluent in text-speak or DM/IM-speak, the extended use of capital letters usually implies that the author of the text is yelling.  In this case, it would be more of a “booming load” voice, implying sound and fury. &lt;a class="footnote-backref" href="#fnref:caps" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Sometimes You Have To Go Backwards...</title><link href="https://jackdewinter.github.io/2021/06/28/markdown-linter-sometimes-you-have-to-go-backwards/" rel="alternate"></link><published>2021-06-28T00:00:00-07:00</published><updated>2021-06-28T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-06-28:/2021/06/28/markdown-linter-sometimes-you-have-to-go-backwards/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/21/markdown-linter-elevating-extensions/"&gt;last article&lt;/a&gt;, I talked
about elevating the extension object support in the PyMarkdown project to the
same level as plugins rules.  In this article, I talk about starting to work on
getting rid of some long-standing issues: nested container blocks.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are times in my professional …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/21/markdown-linter-elevating-extensions/"&gt;last article&lt;/a&gt;, I talked
about elevating the extension object support in the PyMarkdown project to the
same level as plugins rules.  In this article, I talk about starting to work on
getting rid of some long-standing issues: nested container blocks.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are times in my professional career where I have written chunks of code that
I knew were going to be as near to eternal as anything is in our profession.  There
are also times that I wrote code understanding that it would be replaced in a couple of
months.  Whether it was replaced in that time frame was above my paygrade.
Because of situations like those, I try and “slant” my code a bit towards those
goals, but I inevitably try and treat both situations with the same amount of
care and respect as each other.  What changes for me is whether to code is just
&lt;em&gt;a prototype&lt;/em&gt; or &lt;em&gt;production code&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Yes, both of those phrases were in italics.  Why was that? Due to external pressures from
people in those higher paygrades, developers often feel the need
to take some code that was meant as a prototype and productionize it as quickly
as possible.  The request is usually to take code that we know “just worked… barely”
and code that was used for experiments and to show possibilities, and get that code ready
for public consumption as quickly as possible.  And, as with anything that is
rushed, things get lost in the process, with quality usually being the first
thing to go.&lt;/p&gt;
&lt;p&gt;And as much as the PyMarkdown project is on my own time and pace, I
still occasionally find myself looking at some code that was only meant as a placeholder.
It is those times that I must remind myself that sometimes, in order to take
good steps forward, I need to take a couple of steps back.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/1a46d3c119a58be175a4ee642493f7e3ed2d8840"&gt;26 Jun 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/40c1333324e1927b51d9800e3957a893077e6fa9"&gt;27 Jun 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="giving-it-some-context"&gt;Giving It Some Context&lt;a class="headerlink" href="#giving-it-some-context" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am going to start this article with a set of statements that I believe sums
up my work on this project.  The first is that writing a Markdown parser is hard.
Not impossibly hard, but hard enough.  If there is any doubt about how hard it
is, click on &lt;a href="https://johnmacfarlane.net/babelmark2/?text=%3E%3E+one%0A%3E%3E%0A%3E%3E++++two"&gt;this link&lt;/a&gt;
and count the number of different interpretations of that simple Markdown document.
Each set of results is another way in which Markdown was interpreted by someone
writing a parser.  Each one is another road taken by another set of developers.&lt;/p&gt;
&lt;p&gt;Then bring into that mix, the &lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown specification&lt;/a&gt;
and the reference implementations of the &lt;a href="https://spec.commonmark.org/"&gt;CommonMark family of parsers&lt;/a&gt;.
These efforts try to bring those different roads together by providing a single
specification, a single answer for questions that previously caused parser
developers to take divergent roads.  Even better, it provides
a set of examples that parser developers can test against. The downside of this
is that there is now a standard that implementors must measure up to, otherwise
they cannot claim compliance with that standard.  That is of course, if they
decide that they want their parser to be &lt;em&gt;GFM compliant&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And then there are people like me that want a grammar checking or
linting ability for their Markdown documents.  I decided to work on this project because
I want to bring the same kind of “sanity” to my Markdown documents that I bring
to my source code.  For Python there is &lt;code&gt;flake8&lt;/code&gt; and &lt;code&gt;pylint&lt;/code&gt;, and for Java there
is &lt;code&gt;PMD&lt;/code&gt; and &lt;code&gt;checkstyle&lt;/code&gt;.  So, why can I not have a similar linter for Markdown?
From my point of view, it was a niche that
needed to be filled, and I had an interest in learning more about Python and
addressing that niche.&lt;/p&gt;
&lt;p&gt;Writing a GFM compliant Markdown linter adds yet another level of complexity to
that already difficult process. Not only does the project have to pass the qualifications
for writing a compliant parser, but I need to be able to be extremely confident
that the token stream the parser produces is correct.
As the PyMarkdown project allows for rules to be written that analyze that token
stream, everything needs to be reported properly and cleanly, including whitespace.
If the token stream is off, the rules that execute on that token stream are off.
So I need to be very confident about the accuracy of the token stream.&lt;/p&gt;
&lt;p&gt;To put it bluntly, Markdown parser developers only worry about whether the HTML they
output looks right.  As a Markdown linter developer, I worry about whether the output
looks right, whether the rules are coded right, and whether the tokens used to power
those rules are right. And that takes a lot of effort to get right!&lt;/p&gt;
&lt;h2 id="getting-to-work"&gt;Getting To Work&lt;a class="headerlink" href="#getting-to-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And so, this week I decided to start tackling one of the issues I have been
avoiding for at least six months, if not longer: nested container blocks.&lt;/p&gt;
&lt;p&gt;At the start of this week’s work, I knew that this work was going to be split
into multiple blocks of work.  I was not sure how many at the outset, but I knew
it was going to be multiple blocks.&lt;/p&gt;
&lt;h3 id="do-the-research-first"&gt;Do The Research First&lt;a class="headerlink" href="#do-the-research-first" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To be clear, the parser was not broken when I went to do this work, nor was
it cleanly working.  It was kind of working and kind of not working.  Yeah, those statements
are a bit fuzzy, so let me bring it into context.  The parsing of some of the
rudimentary nesting all hinged
on one specific line of code in the &lt;code&gt;__handle_block_quote_section&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;forced_close_until_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;possible_list_start_index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was a kludge, I admit, but it was a decent kludge that had worked well.  The
usual metric that I use for things like that are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are the scenario tests passing?&lt;/li&gt;
&lt;li&gt;Are they maintainable?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The answer to the first question was yes, every scenario test was passing.  I was
initially hesitant to initially answer the second question, as I knew that
very few examples dealt with these kinds of scenarios.  Because of that, I thought
that I had something in there that was decent, otherwise the scenario tests that
I already head would not have been passing.  But then I started to look at the
nesting blocks code more closely.  After a bit of examination, I realized that I
had used code that was more of a sledgehammer than an artfully crafted tool.&lt;/p&gt;
&lt;p&gt;Let me explain that comparison a bit more.  I am not sure when I added that
exact line and for what reason, but its intent is clear to me.  The next time
that the close function is called, that variable will be passed into the
close function.  That will tell the close function to force a close, and to
only stop when that specific index is reached.  There is no finesse, no fine
tuning, just a simple removal until that index is hit.  And just by looking
at the code, I could tell there would be issues.   I was concerned about
the maintainability of that code going into this refactoring task.&lt;/p&gt;
&lt;p&gt;I had solved that issue with a sledgehammer, and I was not happy about that.
I knew I could do better; I just needed some time to figure out how.  This
was a good time, so I “gave” myself the time I needed to think it through
properly.&lt;/p&gt;
&lt;h3 id="experimental-testing"&gt;Experimental Testing&lt;a class="headerlink" href="#experimental-testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Taking some time to get to know the code better, one thing became very evident. As
soon as I started experimenting with different values, the &lt;code&gt;test_block_quotes_extra_02a&lt;/code&gt;
series of scenario tests started failing.  Nothing else, just those scenario tests.
That was good news!  That meant that the impact of this fix was relatively
self-contained.  When I thought about it, it was also bad news as the series
of tests that failed were all extra tests.  That probably meant that I was
going to have get creative near the end of this series of tasks to ensure
there was good coverage for all these scenarios, but that was a task for later.&lt;/p&gt;
&lt;p&gt;As I looked at that set of tests, I noticed another thing that the tests had
in common: they were all scenarios in which a double Block Quote element was
followed by a start List Block element. Even as I played around with changing
other pieces of the nesting code, the only things that seemed to be impacted
were those tests.  From where I was, that was a good observation to make!&lt;/p&gt;
&lt;h3 id="isolating-the-changes"&gt;Isolating The Changes&lt;a class="headerlink" href="#isolating-the-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given the above information and a set of scenario tests that I needed to
get passing again, I started at the beginning: with the trailing List Block
element.  And for the initial scenario tests, I chose &lt;code&gt;test_block_quotes_extra_02ax&lt;/code&gt;
which had a Markdown document of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;quote&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at that Markdown and the source code,
I was confident that I was going to need to keep track of that
List Block element, so I added the following line to the start of the
&lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This ensured that every time I started to look for a new container block, I
would start with a clean slate.&lt;/p&gt;
&lt;p&gt;Then came the hard part: defining what set that variable and when.  Using
the information I had, I noticed that the token stream was correct until
the point where the last line was encountered.  It was then that things
went haywire.  So, taking a stab at it, I added the following three
lines, with tons of debugging around it to test my theories:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adjusted_text_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I put lots of debug in there, and kept in in there, as I was not sure what
I was going to need for the other nested cases that I knew were going to follow.  &lt;/p&gt;
&lt;p&gt;Following through with the information that I had, I knew that I needed
to look for cases where a series of Block Quote elements were followed
by another container element, the List Block element.  Once I had that,
I wanted to confirm that the following element was indeed a list, and that
the line being processed was not a blank line (after the initial Block
Quote characters were removed).  At that point, I was comfortable setting
the &lt;code&gt;nested_list_start&lt;/code&gt; member variable to indicate that we had one of
those messy nested container situations to deal with.&lt;/p&gt;
&lt;p&gt;And to be totally clear, this code was added as a step forward, not
a final solution.  I could already think up some weird combinations
in my head that would make this fail, but they would come later.
At that point, I was simply happy that I identified the list start that
was causing all the commotion.&lt;/p&gt;
&lt;h3 id="responding-to-the-trigger"&gt;Responding To The Trigger&lt;a class="headerlink" href="#responding-to-the-trigger" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that I had the trigger, I needed the code to respond to that trigger.
Having looked through the code multiple times in the last week, there
was one function that I knew was the nexus of all things nested:
the &lt;code&gt;__handle_nested_container_blocks&lt;/code&gt; function.  This is the function
that helps handle the recursion that can come with handling nested
container blocks.&lt;/p&gt;
&lt;p&gt;But when I specifically investigated the code handling a List element
within a Block Quote element, all I saw was this one statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;end_container_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I knew that would not handle the scenarios properly.  So, after a lot of
thinking and experimenting, I changed that code to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;include_lists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Essentially, if the parser was in a scenario where it had a Block Quote
element that contains a List Block element, it needed to close that
List Block element.  This was not the end goal, but a first step.
I knew that this had started me moving in the right direction, and that
was what was important.&lt;/p&gt;
&lt;p&gt;Looking at the third line and the GFM specification, I realized that
the Block Quote element was terminating itself as soon as it encountered
the third line.  Block Quote elements get terminated right away with Blank
Lines, but List Block elements only get terminated when a non-compliant
text line is encountered.  And according to the parser, it was still within
the List Block element created on line two. I needed to fix that next.&lt;/p&gt;
&lt;p&gt;To address that, I changed up the code a bit to make sure that the
List Block element stayed open when faced with a Blank Line element in this
scenario. That is when that above code changed into:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;x_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;include_lists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This moved the closing of the block quote down to the last line in the document,
where it belonged.   Now, when that document was processed, it only closed
the List Block element on the last line of the document.  That was great.&lt;/p&gt;
&lt;p&gt;The only problem left after that change was that the Blank Line tokens were appearing
inside of the List Block element instead of outside of the List Block element.
As any concept of a token stream is not present in the GFM specification,
I had to read between the lines to answer this question: do the Blank Line
tokens belong before the List Block element or after the List Block element?&lt;/p&gt;
&lt;p&gt;I thought about this long and hard, but in the end, I did not feel like
it made any sense for the List Block element to contain those Blank Line
tokens.  Looking at the specification, I read how a list’s looseness
determined how it was presented in the final HTML output.  And when
I looked at the HTML output for those test scenarios, I saw output
that did not indicate that the looseness  was being impacted by those
Blank Line tokens.&lt;/p&gt;
&lt;p&gt;Given that observation, I changed the code once again, arriving at the following
code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;y_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;y_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;x_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;include_lists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that in place, all the original tests were passing, but something was still
bugging me.  It was that last line.  I knew I needed to do something about it.&lt;/p&gt;
&lt;h3 id="that-last-line"&gt;That Last Line&lt;a class="headerlink" href="#that-last-line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With all the existing tests passing, I took a look at that last line in
the Markdown documents and had one question for myself: what if that line was
a valid List Block element continuation?  With that, the &lt;code&gt;test_block_quotes_extra_02ae&lt;/code&gt;
function was created.  This was simply a variant of the main Markdown test scenario,
but with a final line that continued the list, rather than end it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;quote&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It took me about twenty minutes to get it right, but in the end, the code
that had to change to accommodate that new scenario was small:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end_container_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was now that I could look back at these scenarios and feel that the
code was now maintainable. I was not really scared about changing the code
before, but I was concerned.  Now I was confident that the code was in a
good place to allow any changes to be made.&lt;/p&gt;
&lt;h2 id="echoes-of-stories-long-forgotten"&gt;Echoes of Stories Long Forgotten&lt;a class="headerlink" href="#echoes-of-stories-long-forgotten" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I remember a story that someone told me a long time ago that went something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A machine in a factory is not working.  As much as the workers try, they cannot
get it to work.  After a lot of frustrating effort, one of the workers suggest
to management that they give a shout to the old worker who, after working at
the factory for 40 years, just retired earlier that year. With every other idea
not working, the management of the factory eventually decide to give him a call.&lt;/p&gt;
&lt;p&gt;Early the next day, the old worker shows up and is shown to the machine by the
management.  He looks and prods at the machine for a good hour before he turns to
them saying “I am confident I can fix the machine, but I want 1 million dollars
to do so. I know you need to talk about it, so let me know when you have made
up your mind.”  &lt;/p&gt;
&lt;p&gt;Time goes by, and the management is frustrated.  They ask the workers
that are there why they cannot fix the machine.  Those workers just shrug.  “We
did not work here for our entire lives, like he did! He knows that machine better
than he knows his own kids!” being their response.  Management is in a tight
situation.  They are losing one hundred thousand dollars for each day that
the machine is not working.  They need something in this situation to give,
or they will soon be out of business.&lt;/p&gt;
&lt;p&gt;A week later, the management looks at their numbers, calculating that they
can minimize their losses if they can just get the old worker to fix the machine.
They give the old worker a call, and he comes in the next morning.  After they
give him a cashier’s check for the money he asked for, he goes to the machine,
takes out a small screwdriver, and makes three small adjustments to the machine
in less than 30 second before standing up.  Walking over to the power switch
for the machine, he turns it on, and it begins to work.  The machine works so
well, the other worker could have sworn it had just been delivered from the factory.&lt;/p&gt;
&lt;p&gt;Management is outraged.  “We want that check back!” they say.  “You conned us.
We would have never paid one million dollars for less than one minutes worth
of work! We will sue you.”&lt;/p&gt;
&lt;p&gt;The old man smiled back at them.  “Please, go ahead.  I never said that I was
charging one million dollars for the work that I did.  I was charging one
million dollars for the knowledge required to do the work that I did!  I am
sure any sane judge would see it that way too!”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The moral of the story?  Knowledge is power, and timing is everything.&lt;/p&gt;
&lt;h3 id="putting-that-to-work"&gt;Putting That To Work&lt;a class="headerlink" href="#putting-that-to-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The work that was done in the previous section was not done to directly fix
any of the issues that I wanted to fix.  It was done to allow me the
latitude to make those fixes that I knew I needed to do later.  Just like
that old worker, I knew that if I wanted to clean up the nested container
scenarios, I first needed to ensure that the parser was running cleanly.
With what was there before I cleaned it up, I was confident that it would
have caused me more effort to work around it than to fix it properly.&lt;/p&gt;
&lt;p&gt;Basically, I believe that knowing that I needed to do that work and scheduling
it right before I handled the issues I wanted to fix was a smart move. Did it
take time? Yes.  But did it save time in the long run?  Inevitably.&lt;/p&gt;
&lt;h3 id="fixing-scenarios-270-and-271"&gt;Fixing Scenarios 270 and 271&lt;a class="headerlink" href="#fixing-scenarios-270-and-271" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Spending the time fixing the already passing scenario tests for nested containers
also had a nice side effect of letting me be more familiar with that code and
the resultant token streams. That helped with what I did next.&lt;/p&gt;
&lt;p&gt;To set the stage for the rest of this section, what these tests were parsing
were all variations on this piece of Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Blockquote&lt;/span&gt;
&lt;span class="n"&gt;continued&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nothing complicated, just nested containers, going back and forth between
Block Quote elements, List Block elements, and back to Block Quote elements.&lt;/p&gt;
&lt;h3 id="finding-the-first-issue"&gt;Finding The First Issue&lt;a class="headerlink" href="#finding-the-first-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I started looking at the token stream for
Scenario 270, I quickly noticed that something was missing: the inner Block
Quote token was not there.  Enabling debug mode, I quickly traced through the
&lt;code&gt;__handle_block_quote_section&lt;/code&gt; function until I hit this part of that function
for the inner Block Quote element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;stack_bq_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BlockQuoteProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ensure_stack_at_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;this_bq_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;stack_bq_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;original_start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was here that I noticed that the &lt;code&gt;this_bq_count&lt;/code&gt; variable was set to &lt;code&gt;1&lt;/code&gt;.
Doing some digging, what I determined was that in making the parsing of
the Block Quote element easier in other cases, I was only keeping track
of consecutive cases of Block Quote elements.  The first Block Quote element
and the Ordered List element were both recognized, but when it hit this
function, it thought the right number of Block Quote tokens were already
addressed.&lt;/p&gt;
&lt;h3 id="making-it-right"&gt;Making It Right&lt;a class="headerlink" href="#making-it-right" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It took a bit of effort to make these tests work right, but it
was completed within around ninety minutes.  Because of the existing
logic, I knew that I needed to create a variable like &lt;code&gt;container_start_bq_count&lt;/code&gt;,
set it at the start of the &lt;code&gt;__look_for_container_blocks&lt;/code&gt; function,
and pass it into the Block Quote element handling.  I felt that rewriting
a lot more code was not the best thing to do, so I just needed to work with
the information that I had.  Given that scenario, I also felt that I could
adjust for it by adjusting the &lt;code&gt;this_bq_count&lt;/code&gt; variable to include the number
of any previous Block Quote elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, things were looking better, but the extracted whitespace was
off, adding more whitespace than was needed when creating the new
Block Quote token.  That also was a quick fix, adding this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;original_start_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, everything was looking good except for the other whitespace part
of the token: the leading whitespace.  But as with the previous fix,
this one was easy to spot and easy to do, changing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;found_bq_stack_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;found_bq_stack_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;removed_text&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;removed_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;original_start_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;original_start_index&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;removed_text&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;found_bq_stack_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;found_bq_stack_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="html-output-and-markdown-output-changes"&gt;HTML Output and Markdown Output Changes?&lt;a class="headerlink" href="#html-output-and-markdown-output-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While there were changes to both the HTML generator and the Markdown
generator, both changes were small.  It was getting the token stream
to be correct that allowed those changes to remain small.&lt;/p&gt;
&lt;h3 id="wrapping-up"&gt;Wrapping Up&lt;a class="headerlink" href="#wrapping-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After double and triple checking the changes that I made for scenario test 270,
I was not surprised to see that scenario test 271 was working as well. There
was only a small difference between the two, and that difference was on
the second line.  Once the inner Block Quote elements was properly inserted,
the rest of both scenario tests, just fell into place.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am not sure where to place how I feel about these changes on a scale.
I did not feel like I was making amends for leaving that kludge in there.
But I also know that I wish I had dealt with that kludge a long time ago.
If anything, I guess I was a bit sad that I did not take the time to fix
that issue when I needed to, leaving it until now.&lt;/p&gt;
&lt;p&gt;But that is how things often work with software development.  You approach
things with the best of intentions, and sometimes you must make hard choices.
In this case, I did not make a bad choice, just not a pretty choice.  It
worked for what it needed to do, but if left in there, it would have incurred
more cost in the long run.&lt;/p&gt;
&lt;p&gt;From my point of view, my feelings aside, I believe I made the right choice
at the time.  These changes affect less than 8 tests out of 2700+ tests,
which is a very small percentage.  Should I have delayed the work I was
doing just to fix those tests?  While my feelings and ego may say no,
in hindsight it looks like it was within the range of right
things to do.  It is made even more so by the fact that I understood this
at the time I made that decision and added an item to the issues list
to return to it.&lt;/p&gt;
&lt;p&gt;This really was a case of taking a couple of steps back, to ensure I
can take these forward steps without worrying about tripping over bad
code.  And that is a good thing!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since I have started down the road of addressing these nesting issues, next
week is going to be about continuing, and hopefully completing that work.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Elevating Extensions</title><link href="https://jackdewinter.github.io/2021/06/21/markdown-linter-elevating-extensions/" rel="alternate"></link><published>2021-06-21T00:00:00-07:00</published><updated>2021-06-21T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-06-21:/2021/06/21/markdown-linter-elevating-extensions/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/14/markdown-linter-getting-stuff-done/"&gt;last article&lt;/a&gt;, I talked
about getting back to PyMarkdown and my efforts to remove items from the issues list.
In this article, I talk about elevating the extension object support in the PyMarkdown
project to the same level as plugins rules.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is not going to …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/14/markdown-linter-getting-stuff-done/"&gt;last article&lt;/a&gt;, I talked
about getting back to PyMarkdown and my efforts to remove items from the issues list.
In this article, I talk about elevating the extension object support in the PyMarkdown
project to the same level as plugins rules.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is not going to be a terribly long article.  Not for lack of content, but for
lack of cleanly reportable content.  For me, cleanly reportable contents are things
that I can say “here is what I did” or “I did this because”.  And for this week’s
work, that content is mostly about documentation and reorganization.&lt;/p&gt;
&lt;p&gt;It was in the weeks leading up to this work that I started thinking about extensions
in a different light.  That light was that extensions and plugin rules were similar
concepts, but for different foundation objects.  As soon as that idea settled into
my brain, I knew I needed to elevate extensions to the same level as plugins.&lt;/p&gt;
&lt;p&gt;But here is the hard part for a writer.  Writing about documentation is boring.
Writing about refactoring is boring.  “Hey, I refactored this function from
this module to this other module and made it work” is not exactly something
that screams “read me!”  Neither is talking about how I spent hours agonizing
over trying to get the right theme and voice for the documentation.  I mean,
readers that are writers may sympathize, but I am very sure that is all.
And while I do talk about why I made certain moves
or enhancements, there is only so much of that content available.&lt;/p&gt;
&lt;p&gt;Here is to hoping that I can make refactoring and documentation more interesting!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/59f4aa04507c0ae43a67de5634eb3c14a0f2866d"&gt;17 Jun 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d5064dacc0d04cfaad0217ab3cb37fd6a22a031f"&gt;20 Jun 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="making-extensions-first-class-citizens"&gt;Making Extensions First-Class Citizens&lt;a class="headerlink" href="#making-extensions-first-class-citizens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was a while ago when I started asking myself if extensions needed to be on the same level
as plugin rules.  In any kind of rules engine, such as a linter, the object holding the
rules is a first-class citizen by default.  Basically, you need the engine, and you need
the rule.  Without either one, the other one is useless.  As the rules are contained
within plugin objects, those plugin rules are first-class citizens.  As one of my
professors in college would say “Q.E.D.”&lt;/p&gt;
&lt;p&gt;But what about extensions?  Was there a similar argument to be made for extensions
being first-class citizens?  For the last few months, I was convinced that similar arguments
could not be made for the extensions.  After all, what did extensions do for the rules
engine?  How did they enhance the behavior of the linter?  At best, they were scan-time
switches that had a bit of an algorithm behind them.&lt;/p&gt;
&lt;p&gt;And then one evening, after one of the most embarrassing
&lt;a href="https://en.wikipedia.org/wiki/Facepalm"&gt;face palms&lt;/a&gt;
in my professional life, I realized that I was getting that answer because I had
been asking the wrong question.
I had been looking for a similar argument, starting at the same starting point as with
plugin rules: the linter.  What I needed to ask myself is whether there are any other major
components that I could use as a foundation element.  I needed think about whether
one of the other components had a similar relationship with extensions that the plugin
rules have with the linter.  At that point, it was obvious to me
that there was a good solid answer: the PyMarkdown parser.&lt;/p&gt;
&lt;p&gt;While I do not need the same flexibility with the extensions that I do with
the plugin rules, I do need some of the same options.  The big options I currently
need for the extensions are configurability and observability.  Extensions require
configuration to allow them to be enabled or disabled, and not much more. As such,
the configuration aspect was already dealt with, but could be made more transparent
to the user.&lt;/p&gt;
&lt;p&gt;The first half of the observability option was already taken care of: the token
stream.  If enabled and if their conditions are met, both the Pragma extension and
the Front-Matter extension place a token in the token stream generated by the parser.
But the other half was important as well, and that was observability from
the command line.  The Plugin Manager presents that information to the command
line through the &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;info&lt;/code&gt; subcommands.  And from my use of the command
line to check to see if a plugin rule is enabled, it worked well.&lt;/p&gt;
&lt;p&gt;But was it really a good model?  Would it work for users other than myself?
It was an interesting idea, but I needed to give it more time to develop.
Luckily enough, I needed to work on documentation first.&lt;/p&gt;
&lt;h3 id="documentation-is-important"&gt;Documentation Is Important&lt;a class="headerlink" href="#documentation-is-important" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I felt that it was the right decision to increase the project’s support for
extensions to the same level as with the rule plugins.  I also knew that the
first step on that path was to create a landing page
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/extensions.md"&gt;for extensions&lt;/a&gt;,
linking the existing two placeholder pages for each extension to that page.  With
that accomplished, the task to fill out those two placeholder pages was next on the
list.&lt;/p&gt;
&lt;p&gt;To show how seriously I took this effort, I did not want to commit something in that was
half done.  So, even with about 90% of the work done by the time I started writing last
week’s article, I elected to not commit that work that I had completed.  It just did not
feel right, so it was not until I spent some time on Wednesday and Thursday to complete
those two documents that I committed those changes.  And I was glad that I made that
decision.&lt;/p&gt;
&lt;p&gt;If any reader is under the delusion that documentation is easy, let me address that
notion.  To be blunt, adding documentation is easy.  Sit down, write some stuff,
and save it into a file.  Done.  But that will not produce good quality documentation
that is well thought out, easy to read, and addresses the concepts that readers
expect.  I am not sure about other writers, but for me that usually involves at least
5 passes through the document, from a rough note pass in the beginning to a
grammar/spelling/fine-tuning pass at the end.  The adage is true: Garbage in,
garbage out.&lt;/p&gt;
&lt;p&gt;So, I take my documentation tasks seriously. If I want the project to have a high
level of quality, every part needs to have a high level of quality, including
documentation.  For me, creating a project is about the completed picture that
is presented by the project, not just the source code.  So, without reservations,
I worked on the documentation, giving it the time that it needed and not
compromising.&lt;/p&gt;
&lt;h3 id="improving-through-documentation"&gt;Improving Through Documentation&lt;a class="headerlink" href="#improving-through-documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I have talked about before, walking through documentation is also a great way to see
if you have properly implemented and tested a feature.  This was no exception.
Between both extensions, I added 10 new scenario tests to make sure the extensions
were tested properly.  There were not any really serious omissions in the tests,
just “interesting” corner cases that might come up in everyday usage.  It was not
until I was walking through the documentation, writing the words, that I thought
“well, what if I…”.&lt;/p&gt;
&lt;p&gt;Along the way, to make things easier, I introduced the &lt;code&gt;ParseBlockPassProperties&lt;/code&gt;
to contain any parsing related properties that I needed to pass around.  While I
only had two extensions at this point, I knew that other ones were coming.  My
intention is to use this class as a simple data class, allowing me to pass around
properties that are moderately static.  At this point, I use the term “moderately
static” to refer to instances that are not going to change during the parsing of
the document.  As the flags to see if the extensions are enabled so not change
during the parsing, this is a single place to put them that can easily be passed
into functions.&lt;/p&gt;
&lt;h2 id="adding-the-extension-manager"&gt;Adding The Extension Manager&lt;a class="headerlink" href="#adding-the-extension-manager" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The next part on the journey to make extension first-class citizens was to create
an Extension Manager.  My vision of the Plugin Manager was that it was the object
completely responsible for anything to do with plugin rules. If that was so, then
it made sense that I would create an Extension Manager to serve as the same type of
foundational object, an object responsible for anything to do with the extensions.&lt;/p&gt;
&lt;p&gt;That idea also made sense to me from a more practical point of view.  By going along the path
that extensions and the Extension Manager were in the same mold as plugins and
the Plugin Manager, it meant that there were common code and concepts that I
could use from the Plugin Manager, saving some time.  From my viewpoint, if
I honestly agreed that there was overlap, and did not force myself to believe
there was overlap, I could probably repurpose any code that implemented overlapping
functionality.&lt;/p&gt;
&lt;p&gt;With that in mind, I created a copy of Plugin Manager and started pulling anything
that was plugin specific out of the new Extension Manager.  Instead of scanning
a directory and loading any found plugins, I decided that extension would only
be added from a list maintained by the class.  While this resulted in the removal
of the scanning and loading code, it was done for a more practical reason. Unlike
the plugin rules, currently each extension requires a hard-coded entry point
from the parser.  I hope to change that in the future, but that is where it is
currently.&lt;/p&gt;
&lt;p&gt;What was left?  The &lt;code&gt;apply_configuration&lt;/code&gt; function was slightly changed to handle
the extensions, but the same idea of an “enabled extensions” list was maintained.
That made it easy to keep the command line logic for listing the extensions, with
only slight modifications.  Similarly, the logic for displaying the information
on a specific extension on required slight changes, mostly in the formatting of
the data to be displayed.&lt;/p&gt;
&lt;p&gt;The determination of the enabled state of the extensions was also kept mostly
intact, but with two key changes.  Whereas plugins have multiple identifiers,
the plugin id and one or more plugin names, extensions only have one identifier.
That simplified some code from six lines down to one line.  At least for now,
another change is that I commented out the code to allow the extensions to be
directly enabled and disabled from the command line.  To be honest, I am not
sure if I feel the need to enabled extensions with the same flexibility and
frequency as with plugins.  I will think about that and get back to that later.&lt;/p&gt;
&lt;h3 id="wrapping-it-up"&gt;Wrapping It Up&lt;a class="headerlink" href="#wrapping-it-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All in all, it took about a good solid six to eight hours to get everything
coded and the tests all passing.  To round everything out, I decided to include
a debug extension (&lt;code&gt;extension_one.py&lt;/code&gt;) and a roughed-out module for each
extension listed in the GitHub Flavored Markdown specification.  The debug
extension was just a tricky, hidden way in which I could test some of the
more difficult to reach places in the Extension Manager.&lt;/p&gt;
&lt;p&gt;As to the placeholder extensions, I just felt that it was a good time to
get those features, or something standing in for those features, in the
project.  I did not have any plans of adding them anytime soon, but I did
want to show that I had plans to add them.  I also did some mental exercises
and walked through how I might implement each one of them.  I did not do this
out of a need to design those extensions, but to ensure that the work I
was doing on the Extension Manager could support those hypothetical designs.&lt;/p&gt;
&lt;p&gt;There really was not much to test, because this was largely a reorganization
of features. As such, there were only a couple of small changes to the
copies of the tests from the Plugin Manager, and a couple of extra tests to
fill in some code coverage blind sports.&lt;/p&gt;
&lt;p&gt;With that hard work done, it was on to the next thing!&lt;/p&gt;
&lt;h2 id="welcoming-code-into-the-fold"&gt;Welcoming Code Into The Fold&lt;a class="headerlink" href="#welcoming-code-into-the-fold" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next up was a simple set of refactorings to try and come up with
a set of behaviors that would help constrain the extensions so that
they could be treated as a class of objects instead of a collection
of distinct objects.&lt;/p&gt;
&lt;p&gt;To start, I looked at the &lt;code&gt;PluginDetails&lt;/code&gt; object from the Plugin
Manager and created an &lt;code&gt;ExtensionDetails&lt;/code&gt; class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_enabled_by_default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_interface_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_configuration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Other than replacing the text &lt;code&gt;plugin&lt;/code&gt; with &lt;code&gt;extension&lt;/code&gt; and replacing
&lt;code&gt;plugin_names&lt;/code&gt; with &lt;code&gt;extension_name&lt;/code&gt;, no changes were needed.  In addition,
instead of using the pattern of having a &lt;code&gt;FoundPlugin&lt;/code&gt; class as the
intermediary for this information, I decided to implement two separate
member variables, one for each concern. The &lt;code&gt;self.__extension_objects&lt;/code&gt;
variable contains a dictionary of the extension classes, while the
&lt;code&gt;self.__extension_details&lt;/code&gt; variable contains a dictionary of their
&lt;code&gt;ExtensionDetails&lt;/code&gt; classes.&lt;/p&gt;
&lt;p&gt;To be honest, I am not sure which approach is cleaner.  Having a class that
is the same as another class with one extra field or having two lists.
At the very least, I think I want to come to a resolution on these
approaches and unify them going forward.  But to do that, I need to
see how both perform and decide.&lt;/p&gt;
&lt;h3 id="and-to-finish-up"&gt;And To Finish Up&lt;a class="headerlink" href="#and-to-finish-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given all that work to get everything extension related into the
new Extension Manager class, there was one small bit of work left
to do.  None of it was terribly difficult, but for the sake of
neatness, I believe it was all required.&lt;/p&gt;
&lt;p&gt;First, I took the existing content of the &lt;code&gt;__init__&lt;/code&gt; function of
the &lt;code&gt;ParseBlockPassProperties&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__front_matter_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_boolean_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"extensions.front-matter.enabled"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__pragmas_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_boolean_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"extensions.pragmas.enabled"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and replaced it with a more Extension Manager friendly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extension_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__front_matter_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extension_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_front_matter_enabled&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__pragmas_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extension_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_linter_pragmas_enabled&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pragma_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once again, nothing difficult, but it was important to me to get this main
switch for the two existing extensions moved over.&lt;/p&gt;
&lt;p&gt;After that, I moved the &lt;code&gt;compile_pragmas&lt;/code&gt; function from the Plugin Manager
and the &lt;code&gt;look_for_pragmas&lt;/code&gt; function from the Container Block Processor
over to the &lt;code&gt;PragmaExtension&lt;/code&gt; class.  In the process of moving that code
over, I changed the identifer for the extension from &lt;code&gt;pragma&lt;/code&gt; to
&lt;code&gt;linter-pragmas&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="why-was-this-important"&gt;Why Was This Important?&lt;a class="headerlink" href="#why-was-this-important" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is a saying “if it ain’t broke, don’t fix it.”
More often, this is used to indicate that if things do not require any
effort to let them keep on going forward, do not disturb them. But that
saying really relies on one important decision point: is the thing in
question broken?&lt;/p&gt;
&lt;p&gt;At some point soon, I do want to implement the other
extensions outlined in the GFM Specification.  While some of them
do not have a lot of benefit in my mind (strikethrough), there are others
that I do assign a large benefit to (tables).  It makes sense to
do some of that leg work now, knowing that I will use it later.&lt;/p&gt;
&lt;p&gt;In my mind, there is another, more important factor to consider.
That factor concerns the cost to implement some of the features
in the Plugin Manager without going all in.  One of the reasons
that I created the Extension Manager in the way I did was the
low cost associated with copying it from the Plugin Manager.
I was able to reuse most of the application code and the scenario
test code in the process.  Sure, I had to change it to work with
extensions instead of plugins, but I saved a lot of time and
effort by taking that approach.&lt;/p&gt;
&lt;p&gt;If I did not take that approach, I would have had to develop
another type of manager with its own quirks.  That means starting
out with a new set of requirements and tests that I needed to
satisfy.  That would take time and effort.  And in the end,
unless plugin rules and extensions do not have the overlap that
I believe they do, I would probably want to collapse them into
one paradigm anyways.&lt;/p&gt;
&lt;p&gt;I was confident that the overlap was sufficient to
make copying the Plugin Manager code a smart move.  Now it is
just a matter of time to prove to myself that it was the right
choice.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A friend of mine who is a writer has often reminded me that it is those
things that we find more difficult to do are the most rewarding.  I
am seriously not a writer; through I do try and write to the best of
my ability.  While I am on the road to being a “capital-W” writer at
some point, should I choose to do so, I still have a lot to learn.&lt;/p&gt;
&lt;p&gt;But I do find it rewarding.  Yes, I even find writing documentation
rewarding.  I find writing these weekly articles rewarding.
Part of that is because I find satisfaction in helping people. What
else is documentation than helping people understand or use a
particular object or project?&lt;/p&gt;
&lt;p&gt;And that is the key for me: it helps people… including myself.
This process of adding an Extension Manager during this beta release
period was not a decision that I made lightly.  It could have
gone horribly wrong.  But it did not because I had a number of support
structures in place, including documentation on the extensions.
It was in walking through them that I figured out I needed to elevate
extensions, and it was walking through them again that I helped
myself have a coherent implementation about extensions.&lt;/p&gt;
&lt;p&gt;So now I have an Extension Manager that cleanly takes care of the
extensions.  It exposes a common command line interface with the
Plugin Manager, so there is synergy there.  It is not as full featured
as the Plugin Manager, but it does not need to be.  And I am
happy with where it landed!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that refactoring out of the way, I thought I would have some “fun”
in the next week and try to solve an issue I have had for a while:
making sure that the parser can handle transitions back and forth between
lists and block quotes.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Getting Stuff Done</title><link href="https://jackdewinter.github.io/2021/06/14/markdown-linter-getting-stuff-done/" rel="alternate"></link><published>2021-06-14T00:00:00-07:00</published><updated>2021-06-14T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-06-14:/2021/06/14/markdown-linter-getting-stuff-done/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/07/python-packages-the-birth-of-application_properties/"&gt;last article&lt;/a&gt;, I talked
about the break I took to work on some refactoring of the properties system
for PyMarkdown.  In this article, I talk about getting back to PyMarkdown and
my efforts to remove items from the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have referred to the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/07/python-packages-the-birth-of-application_properties/"&gt;last article&lt;/a&gt;, I talked
about the break I took to work on some refactoring of the properties system
for PyMarkdown.  In this article, I talk about getting back to PyMarkdown and
my efforts to remove items from the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have referred to the work to date as the initial release, in my
mind it was always a beta release.  And for me, the focus of a beta release
is to continue to test features, to clean up documentation, and to try and
resolve any high priority issues.  It is not a time to relax, it is a time
to make sure that I work on the issues that will have a definite impact
on the PyMarkdown project.&lt;/p&gt;
&lt;p&gt;The testing of features is going great!  Every so often, I find a small
issue that is easily fixed within fifteen minutes of finding it. That
part is doing fine.  Because of my hard work on the documentation prior
to the beta release, the main documents are in good condition.  But like
the testing of features, there are issues where I believe I can add
beneficial information to the documents.  In addition, some of the later
documents need some extra work to bring them up to the same level as the
main documents.  And as always, there are issues to diagnose and fix.&lt;/p&gt;
&lt;p&gt;And that means a lot of this work will span all three of these areas,
with a focus on the last two: documentation and fixing issues.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred on
12 Jun 2021 between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/878883074e027c095c51a07907dbbe54d5a3465d"&gt;this commit&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d5064dacc0d04cfaad0217ab3cb37fd6a22a031f"&gt;this commit&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="sometimes-research-does-not-work-out"&gt;Sometimes, Research Does Not Work Out&lt;a class="headerlink" href="#sometimes-research-does-not-work-out" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know, this section is breaking one of my rules about telling a good story:
do not give away the ending.  But in this case, I think I have a good reason
to break that rule.  One thing that I have learned over the years is that
while success helps us move forward, we learn the best lessons from when
things do not work out.&lt;/p&gt;
&lt;h3 id="start-at-the-beginning"&gt;Start At The Beginning&lt;a class="headerlink" href="#start-at-the-beginning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the start of that week’s work, I was looking at this item from the Issues
List:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_md026_good_unordered_list_into_atx_into_paragraph&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;effect&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;changing&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;closes&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;comes&lt;/span&gt; &lt;span class="k"&gt;last&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, with one small exception, the order in which Markdown elements appear
in the &lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/developer.md"&gt;Markdown token stream&lt;/a&gt;
are the order in which they appear in the Markdown document.  With one exception:
end List tokens and Blank Line tokens.&lt;/p&gt;
&lt;p&gt;Due to the nature of the algorithms and the consistency checks used for the
parser, I cannot remember a time when those two tokens appeared in what I
would consider to be the correct
order.  There are cases where a Blank Line element closes an opened List
element. To me it seems logical that the end List token should come first,
followed by the Blank Line token that forced the close.  From my point of
view, in these cases the List element is closed, and then the Blank Line
element is processed.  So, from where I sit, the problem is that my
“correct” ordering is not being reflected properly in the token stream.&lt;/p&gt;
&lt;p&gt;The other interesting piece of information?  This is only relevant to
producing an accurate token stream for linting.  To verify that the
Markdown is being parsed properly, the HTML generator uses the token stream
to create the correct HTML elements.  However, because the Blank Line
token has no effect on the HTML that is output, the ordering of these
tokens has no effect on the resultant HTML.  While that is a bit of
a saving grace, it also makes it harder to test for.&lt;/p&gt;
&lt;p&gt;Learning from trying to solve other hard issues before, I knew I needed
to give myself a firm time limit to solve this one.  The time limit I picked
was 8 hours.  That would give me at least two weekday nights and some
time on the weekend to work on this issue.  That seemed reasonable.&lt;/p&gt;
&lt;p&gt;It was time to dig in and get to work!&lt;/p&gt;
&lt;h3 id="add-content-in-the-middle"&gt;Add Content In The Middle&lt;a class="headerlink" href="#add-content-in-the-middle" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I worked through experiments, the easy part was always getting the
exact case mentioned above working.  But after I got that scenario test
working properly, there were always side effects that I needed to
mitigate.  I looked at the code, make some adjustment for
the current experiment that I was working on, only to find out that I
did not have the right limitations on the change that I made.&lt;/p&gt;
&lt;p&gt;I know that the core code itself is not fragile.  That is one of
the first thoughts that I had.  Looking into that core code, it seems
to be stable and allows me to introduce changes without a lot of
side effects.  It just seemed to me that every time I made simple
experimental changes to the core code to elicit the desired behavior,
the leading whitespace was an issue.&lt;/p&gt;
&lt;p&gt;That was frustrating, but also bolstering.  To be honest, while I
believe the project is solidly designed, I am sure that I did not
get everything right.  I would like to think that I got most things
right, but I can only empirically say that I engineered the project
to produce the correct results per the GFM Specification.  I am okay
with knowing that I have some more work to do with leading whitespace
handling.  It is something I now know that I can work on improve
in the future.  Something that will not blindside me.&lt;/p&gt;
&lt;p&gt;In the end, I am sure I am missing things to do with the whitespace
and how it is handled.  I am just not sure where to go from there.
I tried a handful of different approaches to the problem, but it
always came down to whitespace and how it was handled.  It was
a tough thing to come to an understanding with, but most learning
worth doing always comes at a cost.&lt;/p&gt;
&lt;h3 id="wrap-things-up-in-the-end"&gt;Wrap Things Up In The End&lt;a class="headerlink" href="#wrap-things-up-in-the-end" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After 9 hours, 8 hours plus a bit of extra time, I called it quits…
for now.  While I was not able to fix the issue, I was able to learn
some valuable things.&lt;/p&gt;
&lt;p&gt;The main thing is that I learned is that the leading whitespace
handling in the
parser needs improvement.  With each experiment, the success
of the experiment quickly devolved into how well I understood the
leading whitespace handling.  And while I have coded each line of the project,
I must concede that I have lost some of the context of that part
of the project. Even after reading my articles about how I dealt
with those section of the code, I still cannot grasp how I handled
that whitespace.
So, to move forward, I need to consider whether I want to take some
time and rewrite that leading whitespace handling to provide that
extra context.  Without it, any fixing of issues dealing with leading
whitespace are a no-go.&lt;/p&gt;
&lt;p&gt;The second thing that I learned is that Markdown to HTML generators
probably have an easier time with their implementations than I do.
Getting the parser to generate the correct tokens in the right order
is easy. It was a bit finicky to do, but relatively easy.  Adapting the
HTML generator to work with that output was also easy.
When I resolved the ordering issue, some complexity in the HTML generator
was removed as it was no longer needed.  Each experiment failed due
to issues with tracking the whitespace properly, not the HTML that was
generated.&lt;/p&gt;
&lt;p&gt;That is where I left things with this issue: unresolved.  I added
some documentation to the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/developer.md"&gt;Developer’s Document&lt;/a&gt;,
but since the ordering issue is easily worked around, I decided to leave the existing
behavior in place.  If I want to try and fix this issue again, I will need to
make sure to do a better job on the whitespace handling in the parser,
as the success of solving this issue will hinge on my ability to
understand and adapt that whitespace handling.&lt;/p&gt;
&lt;p&gt;But for now, this issue is pretty much permanently benched.  Not time
lost on something that did not work, but things learned to improve the
project and perhaps try again at a later date.&lt;/p&gt;
&lt;h2 id="cleanup"&gt;Cleanup&lt;a class="headerlink" href="#cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As always, I try and make the projects that I work on better with each iteration,
and this week’s work was no different.  During the testing that I did in the above
section, I noticed
that I was getting an error at the end of the test runs.  For the ~15% of the time
that the occurred, it indicated that the coverage file was not valid.  It was an
easy enough error to fix; I just re-ran the tests and it “went away”.  But that
got annoying very quickly.&lt;/p&gt;
&lt;p&gt;Looking online, others reported similar behavior with the &lt;code&gt;5.*&lt;/code&gt; series of the
coverage tool.  Unfortunately, there did not seem to be a fix in place, only
people reporting that it was intermittent.  Based on some of those reports,
the quickest solution seemed to be to go back to the &lt;code&gt;pytest-cov&lt;/code&gt;
package’s &lt;code&gt;2.10.1&lt;/code&gt; version and the &lt;code&gt;coverage&lt;/code&gt; package’s &lt;code&gt;4.5.4&lt;/code&gt; version.
After about 20 test runs of the scenario tests, and many times since then,
that error has not showed up.  The tests do seem to run a bit slower when
I am looking for coverage data, but at least that error does not show up
anymore.  When I have some time, I will try and look at it some more, but it
is fixed enough to not be a problem.&lt;/p&gt;
&lt;p&gt;Other than that, the only change that bears mentioning is that I cleaned up
the file &lt;code&gt;unordered_list_into_atx_into_paragraph.md&lt;/code&gt; to make it simpler to
parse instead of containing a long list and a long paragraph. I found out
that I do not need a list with five items and a paragraph with five lines,
I just need a list with one item and one line.  I cannot recall if that
added the violation of rule &lt;code&gt;md022&lt;/code&gt; or not, but I added it to the test
that references that file to make sure it was reporting cleanly.&lt;/p&gt;
&lt;p&gt;Once again, nothing serious, just some simple cleanup.&lt;/p&gt;
&lt;h2 id="issue-8-exposing-command-line-options-as-configuration-items"&gt;Issue 8: Exposing Command Line Options As Configuration Items&lt;a class="headerlink" href="#issue-8-exposing-command-line-options-as-configuration-items" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/8"&gt;Issue 8&lt;/a&gt; was created
to address a simple issue: the &lt;code&gt;--stack-trace&lt;/code&gt; and &lt;code&gt;--add-plugin&lt;/code&gt; command
line arguments did not have a corresponding equivalent in the configuration
system.  While it may seem like a trivial change, for me it was an
important one.  It is particularly important to me that each command line item should
have a configuration item, unless there was a very good reason, and only
on an item-by-item basis.&lt;/p&gt;
&lt;p&gt;These two command line flags were the only reasonable cases that had not
been addressed. It was time to fix that.&lt;/p&gt;
&lt;h3 id="code-changes"&gt;Code Changes&lt;a class="headerlink" href="#code-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The change for the &lt;code&gt;--stack-trace&lt;/code&gt; flag was a simple change at the
start of the &lt;code&gt;__initialize_logging&lt;/code&gt; function. Instead of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_stack_trace&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this code was added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_stack_trace&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_boolean_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"log.stack-trace"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is a simple change, but a necessary one to follow the configuration
ordering detailed in the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/advanced_configuration.md#configuration-property-ordering"&gt;Advanced Configuration&lt;/a&gt;
document.  Prior to this change, only the command line flag was being checked.
With this change, if the command line flag was not used, then the configuration
system is queried to determine if the stack trace should be enabled.  Because
the command line only ever enables the flag, the logic remains simple.&lt;/p&gt;
&lt;p&gt;While a slight bit more complex, similar changes were required for
the &lt;code&gt;initialize&lt;/code&gt; function in the plugin manager.  Originally, the code was
quite simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;additional_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_additional_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;additional_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, if the command line provided any addition plugin paths to
explore, they were placed in the &lt;code&gt;additional_paths&lt;/code&gt; variable that
contained an array of paths.  The &lt;code&gt;for&lt;/code&gt; statement at the end of
the example leads into the code that handles loading plugins when
either a directory or a file is specified.  Very simple, and very
straightforward.&lt;/p&gt;
&lt;p&gt;This is where the code got more complex, but not unbearably so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;all_additional_paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;additional_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;all_additional_paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;additional_paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;more_paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"plugins.additional_paths"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;more_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;all_additional_paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;more_paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;all_additional_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_additional_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_additional_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the new code, the variable &lt;code&gt;all_additional_paths&lt;/code&gt; is the new array
that contains all the paths.  First, that array is primed with
anything presented on the command line, as before.  Then the configuration
system is checked to see if any additional paths are specified.  If
any string is specified, it is treated as a comma-separated list and
processed into elements as such.  That list of paths is then added
to the end of the &lt;code&gt;all_additional_paths&lt;/code&gt; list, and then processing
resumes as before.&lt;/p&gt;
&lt;h3 id="documentation-changes"&gt;Documentation Changes&lt;a class="headerlink" href="#documentation-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The code changes to get this working took approximately 40 minutes to
complete, from writing the first scenario test to ensuring that each
test was passing properly.  The interesting part was in documenting
the behaviors of these flags.  Specifically, the issue was in
documenting the &lt;code&gt;--stack-trace&lt;/code&gt; flag versus the &lt;code&gt;log.stack-trace&lt;/code&gt;
configuration item.&lt;/p&gt;
&lt;p&gt;In both cases, the actual documentation for command line option versus
configuration item took minimal effort.  However, in the case of the
&lt;code&gt;--stack-trace&lt;/code&gt; flag, there is a significant difference that needed
to be documented.&lt;/p&gt;
&lt;p&gt;Prior to this change, the documentation for the flag was limited to
this entry in the &lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/advanced_configuration.md"&gt;Advanced Configuration&lt;/a&gt;
file:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;if an error occurs, print out the stack trace for debug purposes.  Also
sets the initial logging (config processing) to debug. (Default: &lt;code&gt;false&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While that was true while just the command line flag was present, it
also did not go into much depth on what the other effects are. As I wanted
to make sure I was being clear, I took my time to properly document
the differences between the command line flag and the configuration item.&lt;/p&gt;
&lt;p&gt;It was a simple difference, but it took some explaining.  Once the
logging system was initialized, the behavior of both items was
the same.  The difference was in the behavior before the logging
system was initialized.  I needed to ensure that if there was an
error logged before the logging system was initialized, that I can
diagnose it.  Working through those debug scenarios and documenting
them in the Advanced Configuration document made sense.  A good
side effect is that it also validated my design and implementation
of the starting code worked.&lt;/p&gt;
&lt;h2 id="and-along-the-way"&gt;And Along The Way…&lt;a class="headerlink" href="#and-along-the-way" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Everyone has their pet peeves, and I am not immune from their power either.
In my case, I prefer to avoid having to memorize long command lines and
various “obscure” sequences in favor of useful helper scripts and looking
up the less familiar sequences when I need them.  I am not sure whether
it is classified as being lazy or being efficient, but I just do not
find any value in memorizing things that can be easily addressed but
simpler processes.&lt;/p&gt;
&lt;p&gt;It is for that reason that I spent the better part of an hour fine tuning
a script I used called &lt;code&gt;ptest.cmd&lt;/code&gt;.  Before I switched to that script,
I frequently typed &lt;code&gt;pipenv run pytest&lt;/code&gt; into my command shell to execute
the scenario tests.  If I needed to specify a specific set of tests, I would
use the form &lt;code&gt;pipenv run pytest -k test_prefix&lt;/code&gt; to execute any tests starting
with that &lt;code&gt;test_prefix&lt;/code&gt; string.&lt;/p&gt;
&lt;p&gt;But I was hitting a bit of an issue with that usage pattern.  For a long
time, I have executed the tests with the extra configuration provided by
the &lt;code&gt;setup.cfg&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;addopts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;--timeout=10&lt;/span&gt;
&lt;span class="s"&gt;   --html=report/report.html&lt;/span&gt;
&lt;span class="s"&gt;   --cov&lt;/span&gt;
&lt;span class="s"&gt;   --cov-branch&lt;/span&gt;
&lt;span class="s"&gt;   --cov-fail-under=90&lt;/span&gt;
&lt;span class="s"&gt;   --strict-markers&lt;/span&gt;
&lt;span class="s"&gt;   -ra&lt;/span&gt;
&lt;span class="s"&gt;   --cov-report xml:report/coverage.xml&lt;/span&gt;
&lt;span class="s"&gt;   --cov-report html:report/coverage&lt;/span&gt;
&lt;span class="s"&gt;   --junitxml=report/tests.xml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But as I noted in the above section on &lt;a href="#cleanup"&gt;Cleanup&lt;/a&gt;, one of the
changes I made to address the PyTest coverage issues resulted in a
slower execution time.  To address this, I wanted to only execute the
tests with coverage data if requested, hopefully speeding things up.
And after some simple tests, the execution duration without coverage was
amazing.  It seemed like the duration for an unmeasured set of tests was
approximately 25% of the duration for a measured set of tests.&lt;/p&gt;
&lt;p&gt;The problem?  It meant moving away from general command line execution
and into a script.  While I found the command &lt;code&gt;pipenv run pytest&lt;/code&gt; to be
simple enough to use all the time, speeding up the execution of those
tests would require me to include five arguments when I wanted to
execute the tests with coverage.  That went over my own internal line
of what was acceptable.&lt;/p&gt;
&lt;h3 id="fixing-that-issue"&gt;Fixing That Issue&lt;a class="headerlink" href="#fixing-that-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The logical place to house those changes was in the &lt;code&gt;ptest.cmd&lt;/code&gt; script.
To keep my “clean build” script, &lt;code&gt;clean.cmd&lt;/code&gt;, clean, I had set up that
script to call into the &lt;code&gt;ptest.cmd&lt;/code&gt; script when it came to executing
the tests.  So, I had to figure out how to make this script work as
part of the clean build process and part of my normal development
process.&lt;/p&gt;
&lt;p&gt;First, I added a new &lt;code&gt;-c&lt;/code&gt; flag to trigger whether coverage should be
enabled for the next test run.  As that was the main driver for this
change, I wanted to get it out of the way.  I also made changes to
GitHub Workflow &lt;code&gt;main.yml&lt;/code&gt; file to mirror what I was doing with the
&lt;code&gt;ptest.cmd&lt;/code&gt; script.&lt;/p&gt;
&lt;p&gt;Starting to use the script in my normal development, I noticed that
the “normal” mode for the script was to not
show anything about the test run unless there were errors.  While that
was fine for the clean build scenario, it was less than optimal for
the development scenario.  I addressed that by adding a &lt;code&gt;-q&lt;/code&gt; flag
to allow the &lt;code&gt;clean.cmd&lt;/code&gt; script to specify that previous behavior. If
not specified, the new default behavior was to show all output from
the tests, providing the same output as if the entire &lt;code&gt;pytest&lt;/code&gt; command
was entered on the command line.&lt;/p&gt;
&lt;p&gt;Finally, I added the &lt;code&gt;-k&lt;/code&gt; flag to allow for the passing in of a keyword
to look for with the tests.  I knew I was going to have to support this
flag, as it was part of the two base scenarios that I needed to support,
but I wanted to make sure that everything else was cleaned up first.
With everything else in place, the handling of this flag was easily
added.&lt;/p&gt;
&lt;p&gt;And while I am sure I will make more fine-tuning to scripts in the future,
this was good enough for now!&lt;/p&gt;
&lt;h2 id="issue-9-better-plugins-support"&gt;Issue 9: Better Plugins Support&lt;a class="headerlink" href="#issue-9-better-plugins-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing that had been bothering me for a while were the few items from
the Issues List that brought together to make up &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/9"&gt;Issue 9&lt;/a&gt;.
I had thought out the rule plugins far in advance of when I needed them,
but I had not applied that same rigor to the exposing of those same plugins
to the command line.  I felt that I had done okay in exposing the plugins
to the command line, but I knew I could do better.&lt;/p&gt;
&lt;h3 id="plugin-lists"&gt;Plugin Lists&lt;a class="headerlink" href="#plugin-lists" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing on that list was the listing of the available plugins via
the &lt;code&gt;plugins list&lt;/code&gt; command.  After using that command a few times to check on the
plugins, I was convinced that two enabled columns, &lt;code&gt;enabled (default)&lt;/code&gt;
and &lt;code&gt;enabled (current)&lt;/code&gt;, did not have to take up the space that they did.
After performing some experiments, I found that by specifying each column
title with a newline character in the middle of the title would split the
column content over multiple lines.  Therefore, changing the column
titles to &lt;code&gt;enabled\n(default)&lt;/code&gt; and &lt;code&gt;enabled\n(current)&lt;/code&gt; provided the exact
effect that I was looking for.&lt;/p&gt;
&lt;p&gt;Now, when I used that command, I saw this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ID     NAMES                                 ENABLED    ENABLED    VERSION
                                               (DEFAULT)  (CURRENT)

  md001  heading-increment, header-increment   True       True       0.5.0
  md002  first-heading-h1, first-header-h1     False      False      0.5.0
  md003  heading-style, header-style           True       True       0.5.0
  md018  no-missing-space-atx                  True       True       0.5.0
  md019  no-multiple-space-atx                 True       True       0.5.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I was doing my experiments, I also found that I was not handling the
case of zero matching plugins properly.  To be honest, it
just was not being handled at all.  To take care of that, I simply added
a check against &lt;code&gt;if show_rows&lt;/code&gt; in the &lt;code&gt;__handle_argparse_subparser_list&lt;/code&gt;
function, printing out a nicely formatted message if that case was encountered.&lt;/p&gt;
&lt;h3 id="plugins-info"&gt;Plugins Info&lt;a class="headerlink" href="#plugins-info" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The second thing on my list was to elevate the &lt;code&gt;plugins info&lt;/code&gt; response to
be at the same level as for the &lt;code&gt;plugins list&lt;/code&gt; command.  The effort that
I had put in before was easily a place holder, one that now needed to be
replaced.  I had two goals for this change: make it look better and display
relevant information to the command line user.&lt;/p&gt;
&lt;p&gt;The first part of that was easy.  Leveraging my work in the previous
section to display thing in columns, I decided that the information
would be best presented in a simple two column format.  From my point
of view, that would nicely take care of cleaning up the display, producing
output like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ITEM                 DESCRIPTION

  Id                   md001
  Name(s)              heading-increment,header-increment
  Short Description    Heading levels should only increment by one level at a time.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sitting back for a bit and looking at that design, I went
through the mental exercise of trying to figure out why a user would
want to look at that information. The first candidate was a user that
wanted more information on a rule that was being shown in a rule
violation line.  The second candidate was a user that was looking
at a configuration item that they did not recognize in a configuration
file.&lt;/p&gt;
&lt;p&gt;The information for both cases had some overlap.
For the configuration file case, I figured that a user would want to know
if the configuration item they see in the configuration file matches a
valid configuration item for the rule plugin.  For the output violation
case, I figured that a user would want to see information about why that
violation was raised.  I just had to find the right information that
would satisfy the user’s needs in both cases.&lt;/p&gt;
&lt;p&gt;Without overloading the user, I decided that
there was no really good way of displaying the rule information that was
included in the rule’s documentation URL.  However, displaying that URL
so that they could look for more information there made sense to me.
In addition, the configuration item case could be somewhat handled in
a similar way.  If I presented a line detailing what the configuration
items were, any further information on those items could also be obtained
by referencing the URL.&lt;/p&gt;
&lt;p&gt;Combining both designs together, I came up with the following sample
of what I wanted the sample output for Rule md001 to look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ITEM                 DESCRIPTION

  Id                   md001
  Name(s)              heading-increment,header-increment
  Short Description    Heading levels should only increment by one level at a time.
  Description Url      https://github.com/jackdewinter/pymarkdown/blob/main/docs/rules/rule_md001.md
  Configuration Items  front_matter_title
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After modifying a scenario test for md001 and adding scenario tests for
md023 and the debug rule md999, it was time to write the code.&lt;/p&gt;
&lt;h3 id="making-it-work"&gt;Making It Work&lt;a class="headerlink" href="#making-it-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once I had the sample output defined in the last section, the rest was
easy.  I went back to the &lt;code&gt;plugin_manager.py&lt;/code&gt; module and the modules for
each plugin rule and added two optional properties: &lt;code&gt;plugin_url&lt;/code&gt; and
&lt;code&gt;plugin_configuration&lt;/code&gt;.  If the plugin rules provided these optional
properties, they would be displayed in the &lt;code&gt;plugins info&lt;/code&gt; output, otherwise
they would be silently omitted.&lt;/p&gt;
&lt;p&gt;With those two new properties added to the various plugin classes,
I then started to work on the &lt;code&gt;__handle_argparse_subparser_info&lt;/code&gt;
function to make it output the information in columns.  As the
&lt;code&gt;columnar&lt;/code&gt; package took care of the formatting, I just needed to organize
the data into a series of rows, each row containing a title column
and a description column.  That was quickly accomplished within
fifteen minutes of work.&lt;/p&gt;
&lt;p&gt;Other than some slight issues with adjusting column widths in the test
output, everything worked right away.  The column adjustments that
needed to be made were completed within five minutes, and everything
was buttoned down after ten minutes.&lt;/p&gt;
&lt;p&gt;While I am not sure it is perfect yet, the output is now definitely
something that I can be proud of!&lt;/p&gt;
&lt;h2 id="issue-10-moving-token-code-into-the-token-module"&gt;Issue 10: Moving Token Code Into the Token Module&lt;a class="headerlink" href="#issue-10-moving-token-code-into-the-token-module" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting ready to wrap things up on Saturday, I decided to look on the list and
find an easy item to resolve.  Lucky for me I found the issue detailed in
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/10"&gt;Issue 10&lt;/a&gt;.
While not a large task, it was a task in the direction that I wanted to move
more towards in the future.&lt;/p&gt;
&lt;p&gt;During the development prior to the beta release, I spend a lot of time getting
things working properly.  That meant passing the GFM specification example tests
as well as my own tests, the ones verified against BabelMark.  While I tried
to make the best decisions each time, I admit freely that in some cases I added
code in a place that was less than optimal, knowing I would probably revisit
it later.&lt;/p&gt;
&lt;p&gt;The development of rule &lt;code&gt;md022&lt;/code&gt; was one of those cases.  To properly track the
number of blank lines before and after a Heading element, the rule needed to
be coded to understand if an end token was a container token, a leaf token,
or (by default) an inline token.  To that extent, I added the
&lt;code&gt;__is_container_end_token&lt;/code&gt; function and the &lt;code&gt;__is_leaf_end_token&lt;/code&gt; function to
the &lt;code&gt;rule_md_022.py&lt;/code&gt; module to accomplish that goal.  Knowing that it may
not be the best place for those functions, I added an item to the Issues
List for later examination.&lt;/p&gt;
&lt;p&gt;Was that the right thing to do?  Yes… and no.  I added those functions
to the &lt;code&gt;rule_md_022.py&lt;/code&gt; module to get things working, as I was focusing on
verifying those rules.  I cannot remember exactly what was going through
my head at the time, but knowing that I needed to take a better look at
it when I had the bandwidth, I made a note in the Issues List in
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/445c7a15bd926112146167eb1ac0d3f90c4f5de5#diff-75b56c206e0ed5079aed5347ecab9d243732195ecf4ed3cd478610fe86b105ec"&gt;the same commit&lt;/a&gt;
as that change.  I simply noted that I wanted to double check it later
and went back to focusing on the code that I was working on.&lt;/p&gt;
&lt;p&gt;If you ask me for my opinion on whether it was the right thing to do,
without more questions I could not properly answer either yes or no.
It depends.  However, one thing I am certain about.  Not fixing it right
away and not noting it down for later would be the wrong thing to do.
And to be honest, I am okay with knowing that I avoided doing the wrong
thing, even if I am not sure if I did the right thing.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If I am being honest, I expected to be dragging more about doing project
work at this stage of the project than I am.  I know that the last
10%-15% of a project is never the most fun part of the project, but
it is a critical stage for
any project.  I know of many projects that have died at the 85% complete
stage of the project, for many reasons.  From my experience, those
“mostly” finished projects result in a project that looks mostly there,
but ultimately comes across as unfinished and unpolished.
That is not what I want for the PyMarkdown project.&lt;/p&gt;
&lt;p&gt;I am not sure where I am in that 15% range, but I know I want to get
past the beta-release stage into a normal release cycle.  I want to
take the time to do things right, document my work along the way,
and to ship something that people will use.  And convincing people
to use something that is mostly done is not as easy as convincing
people to use something that is done.  Even better, a project that
has a track record of fixing issues is one of the hallmarks I use
when looking at projects I want to use.  And that is where I want
to be.&lt;/p&gt;
&lt;p&gt;Is that the right mindset to have at this stage of the project?
I am not sure.  I just know that is where I am at.  I want to
invest the time to deal with issues and make this a solid application.&lt;/p&gt;
&lt;p&gt;That’s just who I am and where I am at.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having started work on improving the Extensions support on Sunday morning,
I did not get it finished before I started writing this article on Sunday
afternoon.  Other than that, not sure yet, so stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Python Packages - The Birth of Application_Properties</title><link href="https://jackdewinter.github.io/2021/06/07/python-packages-the-birth-of-application_properties/" rel="alternate"></link><published>2021-06-07T00:00:00-07:00</published><updated>2021-06-07T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-06-07:/2021/06/07/python-packages-the-birth-of-application_properties/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/31/markdown-linter-road-to-initial-release-triple-check-everything/"&gt;last article&lt;/a&gt;, I talked
about the final changes that I needed to make to get the PyMarkdown project ready for
its initial release. In this article, I take a bit of a break from pushing towards
release to work on some refactoring.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having taken up a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/31/markdown-linter-road-to-initial-release-triple-check-everything/"&gt;last article&lt;/a&gt;, I talked
about the final changes that I needed to make to get the PyMarkdown project ready for
its initial release. In this article, I take a bit of a break from pushing towards
release to work on some refactoring.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having taken up a lot of energy in the past month or so to get the initial
release of the PyMarkdown project done, I was tired.  Not so tired that I could not
look at a computer screen, but tired of the push towards the goal of the initial
release.  And like anyone pushing towards a goal who then reaches that goal,
I knew that the healthy thing to do was to take a bit of needed downtime before
I get back to the issues waiting for me on the PyMarkdown project.&lt;/p&gt;
&lt;p&gt;There is a catch though: I do not like sitting still.  Even when I am relaxing, I
like doing something like reading, working on a puzzle or a puzzle book, or trying
something new out.  It is not that I do not care for relaxing, quite the contrary.
It is just that getting something done helps me feel more at piece, even something
as simple as taking care of one of my chores around the house.  One more thing
done, one less thing to worry about.  And I knew that I did not want a big break
from writing Python code, I just wanted a small break from writing code for the
PyMarkdown project.&lt;/p&gt;
&lt;p&gt;Looking at the various things that I could spend time on Python-wise, there was
one thing that caught my eye: the &lt;code&gt;application_properties.py&lt;/code&gt; module.  &lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the &lt;code&gt;PyMarkdown&lt;/code&gt; commit of
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9c8b1d3aff583e0aa8a63ec8534b5c943c5a9400"&gt;06 Jun 2021&lt;/a&gt;
and the &lt;code&gt;application_properties&lt;/code&gt; commits between
&lt;a href="https://github.com/jackdewinter/application_properties/commit/abf1caa4d7073b37d0dd5eb98d5c800581d7e1c9"&gt;02 Jun 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/application_properties/commit/002a9e0c1df8c571b53927c45bc724f516a258a9"&gt;06 Jun 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-that-module"&gt;Why That Module?&lt;a class="headerlink" href="#why-that-module" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was looking over my list of various things that I could work on during my
break, there was one prevalent theme among the Python oriented projects:
foundational objects.  In each case, they needed simple configuration support,
simple logging support, and simple file determination support.  While I needed
to think about how to better deal with logging and file determination in the
future, I already had a good solution for configuration that I had developed
for the PyMarkdown project: the &lt;code&gt;application_properties.py&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;But what was the best way to move that to the other projects that I wanted to
start working on?&lt;/p&gt;
&lt;h3 id="the-basics"&gt;The Basics&lt;a class="headerlink" href="#the-basics" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Created back in March,
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/"&gt;this article&lt;/a&gt;
details the thinking around why I created that module.  My decision to
create “another” properties system was not an easy one to make.  However,
after listing out my requirements for any properties system, I was not
able to find any existing system that had the level of quality and readability
that I wanted for a properties system.  As such, I felt the best alternative
was to create a properties system that met those requirements.&lt;/p&gt;
&lt;p&gt;With the PyMarkdown project, I felt strongly about documenting what I was
thinking about and going through as I was creating the project.  As the
properties system was an important part of the interface, I dedicated an
entire article to explain why I created that system.  And while I will not
repeat every single point made in that article, I believe there is benefit
in highlighting two of the important points of that article.&lt;/p&gt;
&lt;p&gt;The first point that I made is that I believe that every configuration system
can be evaluated on five core concepts: basic property support, command line support
and environment support, validation support, grouping support, and finally hierarchy
support.  Basic property support is the provision of basic operations to get the
property value out of the configuration system.  Command line support and environment
support assume that some manner of file support is a given and ensuring that the
user can override the configuration from either the command line, the environment,
or both is an extra.  Validation support speaks to any functionality that is provided
to help the caller determine the correctness of a configuration value without having
to further handle the value returned from the system.  Grouping support is the ability
of the configuration system to recognize some manner of grouping configuration items
that have a common purpose together.  Finally, hierarchical support provides for an extra
level of understanding of what configuration items belong together with which other
configuration items.&lt;/p&gt;
&lt;p&gt;While that is by no means a comprehensive list, it was a good list of requirements to
start off with.  Using that as a foundation, I then presented a good argument that
those requirements help define three basic types of configurations: the Simple Configuration,
the Grouped Configuration, and the Complex Configuration.  The main difference is not
the data that is stored within each configuration, as that data is identical in all
cases.  It is the organization of the data that is the main difference, with the Complex
Configuration type providing the best organization of all three types.&lt;/p&gt;
&lt;p&gt;With those types now defined, how do we pick one for any given project?&lt;/p&gt;
&lt;h3 id="picking-the-best-option-for-a-project"&gt;Picking The Best Option For A Project&lt;a class="headerlink" href="#picking-the-best-option-for-a-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From my experience, if a project’s needs are for five or less configuration items,
a Simple Configuration type typically works best.  For between five and ten
configuration items, it is usually best to start organizing those configuration items
into groups, and hence a Grouped Configuration type is more fitting.  Following that
logic even further, when there are more than ten configuration items, it usually a
good idea to organize those groups into a meaningful hierarchy, lending itself to
the Complex Configuration type.&lt;/p&gt;
&lt;p&gt;While I do not use those ranges as concrete guidelines that I strictly follow, to
me they follow my personal common-sense rule.  The first question that I ask myself
is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What are the configuration requirements for the project that I am working on?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The follow up question to that is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the most obvious way to present that data to make it clear, understandable, and maintainable?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="examples"&gt;Examples&lt;a class="headerlink" href="#examples" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I believe that the best way to show why I believe that these ranges make sense
are with some concrete examples.  While this set of examples is completely fictious,
it follows patterns and situations that I have observed and helped mitigate over the
years.&lt;/p&gt;
&lt;h4 id="example-1-a-simple-webservice"&gt;Example 1: A Simple Webservice&lt;a class="headerlink" href="#example-1-a-simple-webservice" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;One of the simplest cases that I can think of is the configuration for a simple webservice that
presents data from a simple data file.  In this case, I would probably create a data file that
looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8080&lt;/span&gt;
&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;my_data.json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From a common-sense point of view, I believe this layout makes the most sense.  Both
property values relate to the webservice, but that seems to be their only link to each other.
So, partially due to the low number of property items and partially due to their lack of
connection, a Simple Configuration system seems to be the most logical choice for representing
this data.  I believe that this file presents the intention of the data in a way that satisfies
all three of the criteria mentioned above.&lt;/p&gt;
&lt;h4 id="example-2-growing-the-webservice"&gt;Example 2: Growing The Webservice&lt;a class="headerlink" href="#example-2-growing-the-webservice" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As with all things simple, they organically seem to grow as people try and make it do “just one
more simple thing”.  For the purpose of this example, I am going to grow the configuration by
allowing it to also specify the endpoint for the webservice, the input type of the data file,
and pagination values to limit the size of items being hosted.  Just adding these values to
the configuration file could result in this orderly file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8080&lt;/span&gt;
&lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/api&lt;/span&gt;
&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;my_data.json&lt;/span&gt;
&lt;span class="na"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;application/json&lt;/span&gt;
&lt;span class="na"&gt;page_item_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5&lt;/span&gt;
&lt;span class="na"&gt;page_maximum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or it could result in this disorganized file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8080&lt;/span&gt;
&lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/api&lt;/span&gt;
&lt;span class="na"&gt;page_item_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5&lt;/span&gt;
&lt;span class="na"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;application/json&lt;/span&gt;
&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;my_data.json&lt;/span&gt;
&lt;span class="na"&gt;page_maximum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the Simple Configuration Type, there just is not any good way to organize this
information.  If someone decides to add a &lt;code&gt;file&lt;/code&gt; configuration item, the only rule is that
it must be within the file.  That is where the Grouped Configuration type comes
into play.  Switching over to that type would allow us to reorganize the configuration file
into a form such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[rest]&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8080&lt;/span&gt;
&lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/api&lt;/span&gt;

&lt;span class="k"&gt;[source-data]&lt;/span&gt;
&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;my_data.json&lt;/span&gt;
&lt;span class="na"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;application/json&lt;/span&gt;

&lt;span class="k"&gt;[pagination]&lt;/span&gt;
&lt;span class="na"&gt;item_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5&lt;/span&gt;
&lt;span class="na"&gt;item_maximum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the exact format of the file is not important, the grouping of the data within that
file is important.  Instead of a group of six seemingly connected configuration items, the
file is now organized to show that there are three groups of configuration items.&lt;/p&gt;
&lt;p&gt;Once again, from a common-sense point of view, I believe this Grouped Configuration type
layout is logical.  The
items in the &lt;code&gt;rest&lt;/code&gt; section deal with how the REST endpoint for the webservice is setup.
The items in the &lt;code&gt;source-data&lt;/code&gt; section deal with the information that is being presented
and the format in which it is stored.  Finally, the items in the &lt;code&gt;pagination&lt;/code&gt; section are
used to provide instructions on how to deal with presenting large amounts of data through
the webservice.&lt;/p&gt;
&lt;p&gt;To reiterate a point that I made above, both files present the same configuration
items.  The only differences are that some of the names changed and the addition of groups
for similar items adds more context to each item within that group.&lt;/p&gt;
&lt;h4 id="example-3-this-really-should-be-multiple-webservices"&gt;Example 3: This Really Should Be Multiple Webservices&lt;a class="headerlink" href="#example-3-this-really-should-be-multiple-webservices" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Following the rule of “do one thing well”, this example really should be implemented as
multiple webservices.  But due to external pressures, it is commonplace to overload an
already overloaded system just a bit more, even if it is only a stop gap measure. For
this example, I am going to create a fictional requirement that the webservice also hosts
another data file at a second endpoint.&lt;sup id="fnref:push"&gt;&lt;a class="footnote-ref" href="#fn:push"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Given that requirement, I started with the Grouped Configuration file that was presented
in the last section, and then made some modifications:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[rest]&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8080&lt;/span&gt;
&lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/api&lt;/span&gt;
&lt;span class="na"&gt;alternate_endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/data&lt;/span&gt;

&lt;span class="k"&gt;[source-data]&lt;/span&gt;
&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;my_data.json&lt;/span&gt;
&lt;span class="na"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;application/json&lt;/span&gt;

&lt;span class="k"&gt;[alternate-source-data]&lt;/span&gt;
&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;my_other_data.json&lt;/span&gt;
&lt;span class="na"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;text/csv&lt;/span&gt;

&lt;span class="k"&gt;[pagination]&lt;/span&gt;
&lt;span class="na"&gt;item_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5&lt;/span&gt;
&lt;span class="na"&gt;item_maximum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going strictly by my own guidelines, nine configuration items means that this should be a
good configuration file, but it looks disjointed to me. When I read that file, the big
question that I have is whether the item &lt;code&gt;alternate_endpoint&lt;/code&gt; is related to the items under
the &lt;code&gt;alternate-source-data&lt;/code&gt; group.  And if I must remind myself of that each time that
I read the file, it means the maintainability of the configuration is not where it could be.&lt;/p&gt;
&lt;p&gt;That configuration file’s lack of maintainability presents a good reason for bumping the
file up to a Complex Configuration type, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"port"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"endpoint"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"source"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"path"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"my_data.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"mime_type"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"application/json"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;"alternate_endpoint"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"source"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"path"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"my_other_data.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"mime_type"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"text/csv"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;"pagination"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"item_count"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"item_maximum"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While there is a bit more text in this file, that text helps define meaningful context
that adds hierarchical context to the data.  Speaking directly to my previous question
regarding the item &lt;code&gt;alternate_endpoint&lt;/code&gt;, it is now clear that the endpoint’s path and
the endpoint’s source data are directly connected.  Additionally, it allows the file
to group the &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;mime_type&lt;/code&gt; configuration items under the &lt;code&gt;source&lt;/code&gt; entry, making
it clear that both of those items are related to the source used for the webservice.&lt;/p&gt;
&lt;p&gt;I may be reiterating this point too many times, but this kind of formatting just seems
like common sense to me.  This data is more complex, so the configuration type must
evolve with the data, or understanding and maintainability suffers.  To me, the format
of this file makes the data clear, understandable, and maintainable.&lt;/p&gt;
&lt;h3 id="looking-for-something-out-there"&gt;Looking For Something Out There&lt;a class="headerlink" href="#looking-for-something-out-there" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Other than sounding like the opening line to a Hair Rock ballad, the section title describes
what I initially did when looking for a solution that provided all three levels of
configuration.  While there were some solutions out there that provided for the first two types
of configuration, I could not find anything that handles the Complex Configuration type.  I
know that the above sample is a simple JSON file and loading JSON files are easy, but the
traversal of the configuration data should be easy as well.&lt;/p&gt;
&lt;p&gt;It was then that I realized that I wanted to pull the &lt;code&gt;application_properties.py&lt;/code&gt; module
out of the PyMarkdown project and turn it into its own package.  My plan is to start with
what I have, and quickly add on other loaders to address the Simple Configuration type
and the Grouped configuration type.  The thing that ties them together?  Regardless of
how the configuration is loaded, the Python interface should remain the same.&lt;/p&gt;
&lt;p&gt;Basically, I believe that I have a good way to present properties to Python developers,
and I believe that releasing &lt;code&gt;application_properties&lt;/code&gt; as a package will provide some
benefit to others.  Now I just had to do the work to get it done!&lt;/p&gt;
&lt;h2 id="getting-it-done"&gt;Getting It Done&lt;a class="headerlink" href="#getting-it-done" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first two commits to the new repository,
&lt;a href="https://github.com/jackdewinter/application_properties"&gt;jackdewinter/application_properties&lt;/a&gt;
were simple with only a couple of changes.  The only changes that I made before that
commit were to add new test functions for any functionality that was previously uncovered.
That effort was nothing serious, just the addition of a handful of test functions to
cover lines that previous had been covered by the scenario tests for PyMarkdown.  Due to
the simple nature of the package, I was able to get the code coverage to 100 percent with
little effort. And, like the PyMarkdown project, maintaining a coverage percentage near that
value is a worthy goal that I hope to be able to maintain.&lt;/p&gt;
&lt;h3 id="starting-with-cleanup"&gt;Starting With Cleanup&lt;a class="headerlink" href="#starting-with-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before I could package the project up, I felt that I needed to clean up two things.  The first
bit of cleanup that I needed to do was to split up the various classes in the
&lt;code&gt;application_properties.py&lt;/code&gt; file up, reorganizing them to follow the one class one module rule.
When the module was in the PyMarkdown project, that module was only one module in a group
of other modules. As such, keeping all three classes in one module made sense. Now that it
was in a package dedicated to providing access to properties, it just seemed like
the right thing to do.&lt;/p&gt;
&lt;p&gt;Once that task was completed, I took some time to properly understand the
purpose of a &lt;code&gt;__init__.py&lt;/code&gt; file in a package, then taking that knowledge to
create an &lt;code&gt;__init__.py&lt;/code&gt; file for the package.  I was confused at first
as to how to properly construct a good &lt;code&gt;__init__.py&lt;/code&gt; file that would work properly.
Looking at other Python packages and how they constructed their &lt;code&gt;__init__.py&lt;/code&gt; files
helped me learn a lot. Initially, I was also concerned it would be a lot of effort to create,
but it turned out to be straightforward process.  As an added benefit, it made accessing the
package from the test modules a lot easier.&lt;/p&gt;
&lt;h3 id="then-make-a-local-package"&gt;Then Make A Local Package&lt;a class="headerlink" href="#then-make-a-local-package" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From that point, my next goal was to create a distributable package that I could test
locally.  Like the way I created a simple &lt;code&gt;pymtest&lt;/code&gt; project to test the installation
of the PyMarkdown project, I decided to use the PyMarkdown project to test the installation
of the &lt;code&gt;application_properties&lt;/code&gt; package.  From my experience with PyMarkdown, I knew that I
could install the package locally using the command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv install ../pymarkdown/dist/pymarkdownlnt-0.8.0.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Being able to test that package locally before I published it was fantastic.  I could
fiddle with whatever settings I wanted to until everything looked just right.&lt;/p&gt;
&lt;p&gt;So, with the project itself cleaned up, I decided to use the PyMarkdown project as a
“cheat sheet” of what to do.  Since I created the packaging for that project and I
knew how well it worked, I figured that using the PyMarkdown project as a template
was a smart move. Therefore, I started copying files from the PyMarkdown project as
examples of what I needed to do in the current project.&lt;/p&gt;
&lt;p&gt;The list of files that I needed to copy over and change from the PyMarkdown project
was quite small.  The obvious file is the &lt;code&gt;setup.py&lt;/code&gt; file, and it required around ten
changes to work properly.  Other than that, the &lt;code&gt;version.py&lt;/code&gt; file, the &lt;code&gt;MANIFEST.in&lt;/code&gt;
file, the &lt;code&gt;install-requirements.txt&lt;/code&gt; file, and the &lt;code&gt;package.cmd&lt;/code&gt; file were the only
other files that I copied over.  After making small changes to the &lt;code&gt;version.py&lt;/code&gt; file
and the &lt;code&gt;install-requirements.txt&lt;/code&gt; file, the package was building within five minutes
of starting the work on this section.&lt;/p&gt;
&lt;h3 id="increasing-readability"&gt;Increasing Readability?&lt;a class="headerlink" href="#increasing-readability" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Outside of
changing the name of the package, the biggest change was my introduction of a new
file called the &lt;code&gt;pypi.md&lt;/code&gt; file.  Since my creation of the PyMarkdown project’s
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md"&gt;readme.md file&lt;/a&gt;,
I have started to wonder if that Pypi.org page for the package has too much information.
While I believe that the PyMarkdown readme.md file is a solid GitHub repository &lt;code&gt;readme.md&lt;/code&gt;
file, I am not sure if it is the right length for a
&lt;a href="https://pypi.org/project/pymarkdownlnt/"&gt;PyPi.org project description page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am not sure of whether a copy of the &lt;code&gt;readme.md&lt;/code&gt; file or a shorter version
of that information is the best thing for either project, so I decided to experiment.
I created the &lt;code&gt;pypi.md&lt;/code&gt; file to be used as the source for the &lt;code&gt;application_properties&lt;/code&gt;
package’s
&lt;a href="https://pypi.org/project/application-properties/"&gt;PyPi.org project description page&lt;/a&gt;.
Into that file, I copied the first three sections, with reference links to the main
readme.md file. This way I can see both in action, solicit feedback, and make an educated
decision at a later date.&lt;/p&gt;
&lt;p&gt;As I said, it is an experiment.  Not sure how it will turn out, but time will tell.&lt;/p&gt;
&lt;h3 id="testing-with-pymarkdown"&gt;Testing With PyMarkdown&lt;a class="headerlink" href="#testing-with-pymarkdown" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Going back to the PyMarkdown project, I was easily able to add the newly built package
to my project using the following command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv install ../application_properties/dist/application_properties-0.5.0.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once I did that, I went to the PyMarkdown source files and removed the
&lt;code&gt;application_properties.py&lt;/code&gt; from the project.  Trying to compile, I noticed that I
needed to do some small changes on the import statements for the &lt;code&gt;application_properties&lt;/code&gt;
module.  Other than that, everything just worked.  I would like to think that a certain
amount of that was luck, but I believe that it was simply good organization.  Other than
the new &lt;code&gt;__init__.py&lt;/code&gt; module in the project taking care of the import responsibilities,
everything was the same as before.  They had the same class names and the same function names;
the only difference was that they were in a different package.&lt;/p&gt;
&lt;p&gt;After double checking, the &lt;code&gt;test_application_properties.py&lt;/code&gt; module was removed, as it had
also been moved to the new project.  Running all the PyMarkdown scenario tests, everything
worked fine, so it was time to move on.&lt;/p&gt;
&lt;h2 id="documentation"&gt;Documentation&lt;a class="headerlink" href="#documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the thorough tests in place, zero PyLint &amp;amp; Flake8 warnings, a clean build of the Python
package itself, and the testing of that package in the PyMarkdown project accomplished, there
was only one thing left to do: documentation.&lt;/p&gt;
&lt;p&gt;If I am being honest, I was mostly looking forward to working on the documentation.  Based on
my usage of the module in the PyMarkdown project and the few changes that I already performed
in this project, I was confident that I had a good set of modules to document.  For me, that
is always the bulk of the battle.  The more confident and interested I am in the subject that
I am documenting, the easier the words flow out of my fingers.&lt;/p&gt;
&lt;p&gt;The other reason that I look forward to working on documentation is that it has a habit
of forcing me to walk through the entire user interface for the purposes of documenting it.
Along the way, if something is not done right, it quickly becomes obvious to me.  From my
experience, I have found that the effort required to document an object is directly
proportional to how difficult that object is to understand.  I knew there were probably
going to be a couple of things that I missed or could be simplified, and I was eager to
get to them.&lt;/p&gt;
&lt;p&gt;As the module had been previously tested, there was not that much to find.  One of the
functions that was missing was a new function called &lt;code&gt;property_names_under&lt;/code&gt; to
complement the &lt;code&gt;property_names&lt;/code&gt; property that listed every property name in the
configuration instance.  This new function took that same concept but altered the
returned list slightly to only return those property names that were under a given
prefix.  That way, instead of the caller having to filter the return value of &lt;code&gt;property_names&lt;/code&gt;
to only include the values under &lt;code&gt;rest&lt;/code&gt;, the caller could ask the
&lt;code&gt;property_names_under&lt;/code&gt; function for values under &lt;code&gt;rest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Along those same lines, I needed to fix up the &lt;code&gt;handle_error_fn&lt;/code&gt; parameter of the
&lt;code&gt;ApplicationPropertiesJsonLoader&lt;/code&gt; class.  Since the PyMarkdown project wanted a
consistent response to any load exception, I created this parameter to pass
failure text along with the exception.  That way, the project could decide how to
best display that information.  The only problem was that it did not have any default
behavior, so it required an inner function to be created in the test functions.&lt;/p&gt;
&lt;p&gt;I decided to clear that up by adding the following code to the &lt;code&gt;load_and_set&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;handle_error_fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_error_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thrown_exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thrown_exception&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;handle_error_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print_error_to_stdout&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A simple write of the &lt;code&gt;formatted_error&lt;/code&gt; to standard out, but a simple enough default.&lt;/p&gt;
&lt;h2 id="as-always-clean-up"&gt;As Always… Clean Up&lt;a class="headerlink" href="#as-always-clean-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before I published, I took a quick look through the code and documentation, and just did
some small cleanup tasks here and there.  Nothing big, just some rewording of the
documentation, creating GitHub issues to track what needs to be done, and adding placeholder
sections to some of the documents.  There was some stuff left to do, but for an initial
release, it would be good enough.&lt;/p&gt;
&lt;p&gt;And with that, I ran the &lt;code&gt;publish_to_pypi.cmd&lt;/code&gt; script and published the package.  I then
went over to the PyMarkdown project and updated its dependency from a local package to
&lt;code&gt;application_properties==0.5.0&lt;/code&gt;, and reran every test.&lt;/p&gt;
&lt;p&gt;With things looking good, and all tests passing, it was time to call it a day!&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it might seem weird to some people, it was a fun and relaxing week
working on the initial release of the &lt;code&gt;application_properties&lt;/code&gt; package.  No pressure
from myself to do anything, just take something I already have and clean it up for
publication.&lt;/p&gt;
&lt;p&gt;It was also nice to know that I was thinking about future projects in Python.  Looking
at the PyMarkdown directory on my computer, there are a couple of helper
scripts that I use every so often for various small tasks.  It would be nice to get
them out of that directory and into their own project.  That would allow me to clean
them up and make them easier to use.  Nothing serious,
just some small helper applications, but nice fun projects to work on.  And having
a good start on the configuration for those projects, that was a nice thing to have
in my pocket.&lt;/p&gt;
&lt;p&gt;Yes, next week was going to be about getting more work done on PyMarkdown.  But for this
week, it was a nice and relaxing small break.  I felt refreshed.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting back to PyMarkdown, I start to go through the issues list, with the goal
to knock a couple more things off that list.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:push"&gt;
&lt;p&gt;While I would push back on this requirement from a quality point of view, I would also acknowledge that there may well be a business benefit to this overload for a variety of reasons. &lt;a class="footnote-backref" href="#fnref:push" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="Python packages"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Triple Check Everything</title><link href="https://jackdewinter.github.io/2021/05/31/markdown-linter-road-to-initial-release-triple-check-everything/" rel="alternate"></link><published>2021-05-31T00:00:00-07:00</published><updated>2021-05-31T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-05-31:/2021/05/31/markdown-linter-road-to-initial-release-triple-check-everything/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/24/markdown-linter-road-to-initial-release-crossing-the-ts/"&gt;last article&lt;/a&gt;, I talked
about getting the documentation cleaned up and ready for release.  In this article,
I talk about the final changes that I needed to make to get the project ready for its
initial release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was it!  After many hours of work, countless …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/24/markdown-linter-road-to-initial-release-crossing-the-ts/"&gt;last article&lt;/a&gt;, I talked
about getting the documentation cleaned up and ready for release.  In this article,
I talk about the final changes that I needed to make to get the project ready for its
initial release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was it!  After many hours of work, countless hours of debugging, and too many
brain cells burnt debugging, the project was on the cusp of being ready.  I just
had a few tasks to complete before I felt confident in announcing the release of
the project.  Nothing spectacular, but just some (hopefully) small tasks to make
sure everything was in place.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5756cf6add036436866a56ec1a6cac9c5a07d333"&gt;27 May 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d8526d3bb695e42be71f519f8bc8345c14edee86"&gt;31 May 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-true-initial-release-was-quiet"&gt;The True Initial Release Was Quiet&lt;a class="headerlink" href="#the-true-initial-release-was-quiet" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The release of PyMarkdown &lt;code&gt;0.5.0&lt;/code&gt; or &lt;code&gt;pymarkdownlnt-0.5.0&lt;/code&gt; was
done very quietly and without much fanfare.  Seriously quiet.  I mean,
if you twist my arm, I might admit to doing enough of a victory dance that
my wife asked what the noise in my office was.  But other than that, nothing.
It was just a normal night, and the release was performed by following some
simple instructions and using this command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run python -m twine upload --config-file .pypirc --repository pypi dist/*
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="and-the-work-goes-on"&gt;And The Work Goes On&lt;a class="headerlink" href="#and-the-work-goes-on" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After taking a minute to appreciate what I had done, I got to work on finding
out if there were any small tasks in the release that I had missed.  The first
thing I did was bump the project version to &lt;code&gt;0.5.1&lt;/code&gt;.  After that, I double
checked to make sure that the &lt;code&gt;setup.py&lt;/code&gt; file contained the PyPi name of the
project, &lt;code&gt;pymarkdownlnt&lt;/code&gt;, and committed that change.&lt;/p&gt;
&lt;p&gt;Having passed my 48-hour documentation cool off period, I went through
each of the documentation files carefully and found a handful of small changes that
I felt needed to be made.  Except for adding the missing &lt;code&gt;advanced_plugins.md&lt;/code&gt; file
to the repository, most of the remaining changes were simple wording changes
or organizational changes.&lt;/p&gt;
&lt;p&gt;The main organizational change that I made were primarily made to provide
a brief summary for each section.  While I am not sure it is the right
approach, I decided to start each important section with a simple table
containing the important concepts from that section.  My goal with these tables
is to provide readers with a quick summary to help them decide if they
wanted to read that section.  I am not sure if I have the right information
or the right format yet, but I wanted to give it a try and see how it works
out.&lt;/p&gt;
&lt;p&gt;The other organizational change I made was along the same lines as the summary
tables.  But instead of starting each section with a table, I decided to start
the &lt;code&gt;readme.md&lt;/code&gt; file with some relevant badges.&lt;/p&gt;
&lt;h3 id="what-are-badges"&gt;What Are Badges?&lt;a class="headerlink" href="#what-are-badges" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Badges (or shields) are an interesting concept that leverage visual information with
the advent of webservices.  A good example of this is the badge Markdown that
I use for displaying the version number associated with the package uploaded
to PyPi: &lt;a href="https://pypi.org/project/pymarkdownlnt"&gt;&lt;img alt="Version" src="https://img.shields.io/pypi/v/pymarkdownlnt.svg"/&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;![Version&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pypi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pymarkdownlnt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;pypi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pymarkdownlnt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The most important part of the badge is the badge image link, which is the Image
element specified inside of the Link’s label.  In this case, I
use the provider &lt;code&gt;img.shields.io&lt;/code&gt; to provide a badge
displaying the version (the &lt;code&gt;/v&lt;/code&gt;) from PyPi (the &lt;code&gt;/pypi&lt;/code&gt;) for this project
(the &lt;code&gt;pymarkdownlnt&lt;/code&gt;) in the SVG image format (the &lt;code&gt;.svg&lt;/code&gt;).  This is all
that is required to display the above image with the version information.
Because nothing is hardcoded, when I upload a new version of the project to PyPi,
eventually &lt;code&gt;img.shields.io&lt;/code&gt; will expire its cache and retrieve a new version.
When that happens, the badge image automatically updates.&lt;/p&gt;
&lt;p&gt;The second part of the badge is the optional outer Link element.  While it is optional,
it is convenient in that it includes a link to something associated with the badge
itself.  In the above case, as the badge shows the version of the package on PyPi,
it made sense to include a link to the package page on PyPi.  For the badge that I
use to display the project’s license agreement (&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/LICENSE.txt"&gt;&lt;img alt="License" src="https://img.shields.io/github/license/jackdewinter/pymarkdown.svg"/&gt;&lt;/a&gt;), I specify the location of the &lt;code&gt;license.txt&lt;/code&gt;
file in the project.  And for badges where there is no commonsense page
to go to, such as the Black version used to format the Python for the project
(&lt;img alt="GitHub Pipenv locked dependency version (branch)" src="https://img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pymarkdown/black/master"/&gt;), I just
provide the image with no link.&lt;/p&gt;
&lt;p&gt;While I initially viewed badges as frivolous, I quickly decided that they are useful
for two things: quick links for me and quick information for others. Instead of
maintaining multiple project links in my browser’s toolbar, I can just go to the
project’s main page and reference them from there.  From the other people
perspective, I can hopefully provide information to anyone interested in the project
in a quick and easy to digest summary format.&lt;/p&gt;
&lt;h3 id="and-that-completed-the-work-on-version-051"&gt;And That Completed The Work on Version 0.5.1&lt;a class="headerlink" href="#and-that-completed-the-work-on-version-051" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having cleaned up what I wanted to, I went ahead and packaged up the code and
documentation for the project and uploaded version 0.5.1 of the project
to &lt;a href="https://pypi.org/project/pymarkdownlnt/0.5.1/"&gt;PyPi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I then started on one more thing that I wanted to get out of the way before
the initial release: a good solid CI/CD pipeline.&lt;/p&gt;
&lt;h2 id="cicd-pipelines-with-github-actions"&gt;CI/CD Pipelines With Github Actions&lt;a class="headerlink" href="#cicd-pipelines-with-github-actions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For those who are not in the know, CI/CD pipelines are all the rage
these days, and with good reason.  The full name for them is Continuous Integration
and Continuous Deployment pipelines, which is a mouthful.  And technically,
while I want a pipeline in place before the initial release, it will only technically
be a Continuous Integration pipeline.&lt;/p&gt;
&lt;p&gt;The difference between the two is simple: one is for integration, and one is
for deployment.  Before sending an email to me to let me know that I am responsible
for a facepalm that was just performed, let me explain: common sense isn’t always
common.  A lot of people that I know in the industry often get those two parts
of the pipeline or two different pipelines confused, so let me try and clarify
what I mean.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Continuous_integration"&gt;Continuous Integration&lt;/a&gt;
is the part of the pipeline that most people implement and
takes care of updating the project’s main repository with the latest changes
submitted by developers.  Once submitted, those changes are subjected to various
checks and balances to ensure that those changes do not negatively affect the
project.  In the case of the pipeline that I am setting up, I am more concerned
about running extensive checks after I have finished my own subset of checks.
However, many pipelines are setup to mandate that all checks pass before any
changes are accepted into the repository.  As these checks happen with every
change submitted, and not on a schedule, they are considered continuous integrations.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Continuous_deployment"&gt;Continuous Deployment&lt;/a&gt; is
similar, but different.  For this example, in addition to the PyMarkdown linter,
assume that we also provide a simple webservice.  This webservice allows people
to submit Markdown documents, with the webservice reporting any standard violations
back to the submitter.  With that assumption in place, we can set up another
pipeline to trigger once the Continuous Integration pipeline produces a new artifact.
This new pipeline will probably then run extra checks to verify that the new
artifact works properly.
If those checks succeed, then the pipeline starts the process of deploying that
new artifact to the location where the webservice is being hosted.  Once again,
only if all the checks pass will the new webservice be deployed to the
specified environment.  So, while the concepts of integration and deployment are
different, the continuous prefix of both concepts are the same in that they
happen automatically once something is produced.&lt;/p&gt;
&lt;p&gt;For this project, I do not have anything that I need to deploy, so I am just
implementing a CI pipeline.  For now, when I submit any changes, I want to
ensure that the formatting of the changes is correct, and I want to run the
full set of scenario
tests on all three common platforms.  I do not want to have to ask for these
to be kicked off, I want it to “just happen”.  And that is where GitHub Actions
comes into play.&lt;/p&gt;
&lt;h3 id="github-actions"&gt;GitHub Actions&lt;a class="headerlink" href="#github-actions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While GitHub Actions have only been around for a short while, they have made
quite the splash in the software community.  As the main repository for the
PyMarkdown project is a GitHub repository, I can associate specific actions
with specific triggers that occur with the repository itself.&lt;/p&gt;
&lt;h4 id="setting-the-initial-context"&gt;Setting The Initial Context&lt;a class="headerlink" href="#setting-the-initial-context" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is what I specified in the prefix of my &lt;code&gt;main.yml&lt;/code&gt; file, located in the
&lt;code&gt;.github/workflows/main.yml&lt;/code&gt; directory of the repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Main&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;pull_request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;  &lt;span class="c1"&gt;# daily&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Breaking it down, this workflow has a name &lt;code&gt;Main&lt;/code&gt;, and will be executed if
one of three criteria are met: a push occurs, a pull request is created,
or the scheduled time occurs.  In this case, that scheduled time is 00:00,
or midnight server time.  It is important to note that this interpretation
of midnight is up to the server’s interpretation of midnight, not the viewer’s.&lt;/p&gt;
&lt;p&gt;After that initial context was established, I started working on
the &lt;code&gt;jobs&lt;/code&gt; section, which initially looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;install-test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt; &lt;span class="c1"&gt;# Checking out the repo&lt;/span&gt;

    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install dependecies&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;VaultVulp/action-pipenv@v2.0.1&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;install -d&lt;/span&gt; &lt;span class="c1"&gt;# Install all dependencies, including development ones&lt;/span&gt;

    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Test&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;VaultVulp/action-pipenv@v2.0.1&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;run pytest&lt;/span&gt; &lt;span class="c1"&gt;# Run custom `pytest` command defined in the `[scripts]` block of Pipfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking around for something that worked with the project, I read the documentation
on the &lt;code&gt;VaultVulp/action-pipenv&lt;/code&gt; action and thought it would work.  However,
after a few attempts, I wasn’t getting anywhere. I then moved on to the
&lt;code&gt;dschep/install-pipenv-action@v1&lt;/code&gt; action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;test-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@master&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v1&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dschep/install-pipenv-action@v1&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run pytest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and got some manner of response right away.  Thinking about that response,
I quickly changed the last line to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv --help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;allowing me to make some progress.  I then realized that I had tried to jump right to
executing the tests instead of just verifying that &lt;code&gt;pipenv&lt;/code&gt; was working
for the project.  By only executing &lt;code&gt;pipenv --help&lt;/code&gt;, I was able to make sure
that Pipenv was working properly without worrying about any other component,
which was the right call for that point in time.  And while it wasn’t exactly
where I wanted to be, that simplified workflow worked right away.&lt;/p&gt;
&lt;p&gt;Thinking things through with my use of &lt;code&gt;pipenv&lt;/code&gt;, I figured out that
&lt;code&gt;pipenv run pytest&lt;/code&gt; by itself was never going to work.  I needed to ensure
that &lt;code&gt;pipenv&lt;/code&gt; sycned itself with the project before running the tests.  Therefore,
I changed those steps to reflect that, as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;test-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout Repository&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@master&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup Python 3.8&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v1&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.8&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install PipEnv&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dschep/install-pipenv-action@v1&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Sync With Repository&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv sync&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Execute Tests&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run pytest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and it worked right away!  Before, I had tried to create a workflow
that jumped right to the last step, and it failed.  But now I was taking the
time to set &lt;code&gt;pipenv&lt;/code&gt; up properly using &lt;code&gt;run: pipenv sync&lt;/code&gt;.  I still took the
steps to run the test as before, but by inserting the &lt;code&gt;run: pipenv sync&lt;/code&gt; line
into the workflow, I ensured that Pipenv synced itself up with the repository
and its &lt;code&gt;piplock&lt;/code&gt; file. That helped a lot!&lt;/p&gt;
&lt;p&gt;Also, it helped me to give each step a distinct name.  While different things
work for different people, having a good name for each step just helped me
identify with each step properly.  And seeing as I maintain this project,
that was important to me.&lt;/p&gt;
&lt;h4 id="adding-platform-support"&gt;Adding Platform Support&lt;a class="headerlink" href="#adding-platform-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I stated earlier in the article, my main goal for the pipeline was to run more
extensive tests than I can locally.  While I do have an Ubuntu subsystem on my
machine, I do not have any Apple subsystem that I can install for testing.
As such, I did some research and quickly ran into the GitHub Actions &lt;code&gt;strategy&lt;/code&gt; item.
Looking like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;#python: [3.8, 3.9]&lt;/span&gt;
        &lt;span class="c1"&gt;#platform: [ubuntu-latest, macos-latest, windows-latest]&lt;/span&gt;
        &lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3.8&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
        &lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;windows-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ matrix.platform }}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the strategy section replaces the &lt;code&gt;runs-on: ubuntu-latest&lt;/code&gt; line in the
previous examples.  The power of this construct is that it allows me to
specify multiple platforms and Python versions to test on, which is
exactly what I wanted to do: more extensive testing.&lt;/p&gt;
&lt;h4 id="code-coverage"&gt;Code Coverage&lt;a class="headerlink" href="#code-coverage" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I could have focused on more extensive testing at this stage, but I decided to
focus on duplicating the existing tests on my local development environment.
At that moment, I was more interested
in demonstrating the code coverage for the project rather than the project
running on multiple platforms.  After doing some research on
&lt;a href="codecov.io"&gt;CodeCov&lt;/a&gt;, I created a new account on their site and added this
code to the workflow file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Report Coverage&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;codecov/codecov-action@v1&lt;/span&gt;
      &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;github.event_name != 'schedule'&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./report/coverage.xml&lt;/span&gt;
        &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ matrix.python }} - ${{ matrix.platform }}&lt;/span&gt;
        &lt;span class="nt"&gt;fail_ci_if_error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After adding an environment secret to the project, the coverage information
was relayed to CodeCov when I ran the workflow.  It was then available for
examinination on the project’s page at
&lt;a href="https://codecov.io/gh/jackdewinter/pymarkdown"&gt;codecov.io&lt;/a&gt;, and soon after that
information appeared in a new badge for code coverage that I added.
While I got a lot of
benefit for a relatively small amount of work, it was due to my ongoing measurement
of code coverage that this was so easy.  But a win is a win, so I took it.&lt;/p&gt;
&lt;h2 id="cleaning-up-documentation"&gt;Cleaning Up Documentation&lt;a class="headerlink" href="#cleaning-up-documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that I was getting tangibly close to releasing, I wanted to start tracking
changes properly.  As such, when I noticed that every example in the project
documentation was using &lt;code&gt;python main.py&lt;/code&gt; instead of &lt;code&gt;pymarkdown&lt;/code&gt;, I knew it
was a good time to start.  So, I created
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/3"&gt;Issue 3&lt;/a&gt;
to track that project work needed to make the change.  While the change
was small, it was a habit that I needed to get in to.&lt;/p&gt;
&lt;h2 id="adding-lint-support"&gt;Adding Lint Support&lt;a class="headerlink" href="#adding-lint-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before circling back and adding extra platforms to the workflow, there was
one last thing that I needed to add: Lint Support.  Literally cutting and
pasting from the other job in the workflow and my &lt;code&gt;clean.cmd&lt;/code&gt; script, I
quickly came up with this job:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;lint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3.8&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
        &lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;windows-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ matrix.platform }}&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout Repository&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@master&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup Python 3.8&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v1&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.8&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install PipEnv&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dschep/install-pipenv-action@v1&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Sync With Repository&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv sync&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Execute Flake8&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run flake8 --exclude dist,build&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Execute PyLint on Source&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run pylint --rcfile=setup.cfg ./pymarkdown ./pymarkdown/extensions ./pymarkdown/plugins&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Execute PyLint on Tests&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run pylint --rcfile=setup.cfg ./test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since linting should work equally well on any given platform, I simply picked
the Windows platform to run this job on.  Then, using my &lt;code&gt;clean.cmd&lt;/code&gt; script as
a guide, I created new steps after the &lt;code&gt;run: pipenv sync&lt;/code&gt; step to execute
the lint commands the exact same way that I execute those commands in my script.&lt;/p&gt;
&lt;p&gt;While it doesn’t happen that often, I was able to get that new job up and running
with only one try.  I appreciate that it was due to previous debugging sessions,
but I was still grateful.&lt;/p&gt;
&lt;h2 id="figuring-out-the-linux-tests"&gt;Figuring Out The Linux Tests&lt;a class="headerlink" href="#figuring-out-the-linux-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After having left the Linux tests turned off from the night before, on Thursday night
I was eager to get them those tests working.  Enabling the Linux tests was
as simple as adding the &lt;code&gt;ubuntu-latest&lt;/code&gt; tag to the &lt;code&gt;platform&lt;/code&gt; configuration
for the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;windows-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;ubuntu-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and committing it to the repository.  That is when the fun began!&lt;/p&gt;
&lt;p&gt;I created &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/4"&gt;Issue 4&lt;/a&gt;
to track the Linux build issues and
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/5"&gt;Issue 5&lt;/a&gt;
to track the MacOs build issues.  These issues didn’t have to have
tons of documentation, just some information that would help me figure
out what to do.&lt;/p&gt;
&lt;p&gt;Thinking that it would be an easy fix, I looked at the output and
determined that it was a problem with the temporary files that I use
in the tests.  To ensure that configuration options are tested properly,
for any scenario tests that require it, I create
a temporary file with the configuration dictionary serialized to the file and
pass the path to that
temporary file into PyMarkdown using the &lt;code&gt;--config&lt;/code&gt; command line setting.
But for some reason it wasn’t working.&lt;/p&gt;
&lt;p&gt;At first, it reported a problem with the &lt;code&gt;delete=False&lt;/code&gt; parameter that
was passed into the &lt;code&gt;TemporaryFile&lt;/code&gt; function but removing that parameter
didn’t fix the problem.  So then I added &lt;code&gt;--log-level DEBUG&lt;/code&gt; to the arguments for one
of the tests, but I didn’t see any immediate difference.  After four
more &lt;code&gt;debug&lt;/code&gt; commits, I still wasn’t any closer to getting any information
that would help me figure things out.&lt;/p&gt;
&lt;p&gt;I figured out that the only way I was going to figure out the issue properly
was to install the Ubuntu subsystem on my machine.  Without that, I was going
to be guessing and guessing, with not much progress.  After setting up
the install for the Ubuntu subsystem, I decided it was time that I retired
for the night.  I had no idea what I was in store for next.&lt;/p&gt;
&lt;h3 id="serendipity-strikes"&gt;Serendipity Strikes&lt;a class="headerlink" href="#serendipity-strikes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having some family commitments to attend to, I was out of the house for about
24 hours from Friday to Saturday. When I got home, I was shocked.  My system
had died.  It really died.  After three or four hours of doing updates and resets
and such, I was very convinced that it had died to the extent that it would take a
complete re-install of the operating system to get things back in working order.
It was deflating.&lt;/p&gt;
&lt;p&gt;But I had an option.  My son is very hardware oriented, and before this year’s
computer chip scarcity started, he built himself a new system from scratch.  To
help him on his journey and get a newer system in the process, I purchased his
old system from him.  My current system was at least six years old and purchased from
Fry’s, whereas his older system was around three years old and
made from scratch for his gaming needs.  It was going to be a clear upgrade.&lt;/p&gt;
&lt;p&gt;The issue?  Time.  Between my various hobbies, yardwork, professional work,
and the PyMarkdown project, I had never found the required time to get his
older system set up.  Now that my system died, I had a great forcing function
for me to get it set up and fast.&lt;/p&gt;
&lt;p&gt;Thankfully, I back most of what I need up to a backup server, and I was able
to retain almost everything that I thought I might have lost.  Installing
the new operating system on the older machine was a lot easier than I remembered
it being, and it was quickly completed.  Going through a list of programs
that I needed took a bit, but by focusing on it, I made quick progress of it.
Once that was done, I started getting my GitHub repositories cloned to my
new system, and I was back in business.&lt;/p&gt;
&lt;p&gt;Painful, but worth it.  The new system is clean, uncluttered, and fast.&lt;/p&gt;
&lt;h3 id="getting-back-to-work"&gt;Getting Back To Work&lt;a class="headerlink" href="#getting-back-to-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After sleeping in Sunday morning (after setting up the system until sometime in
the early morning), I started to work on the Linux test issue in my system’s
Ubuntu subsystem.  I had
installed Python, Git, and everything else the night before, so it was just
a matter of working things out from my usual baseline.&lt;/p&gt;
&lt;p&gt;With everything in place, I was able to quickly diagnose what the problem was.  In my
haste to get things working, I had created temporary files on my Windows
system using the &lt;code&gt;TemporaryFile&lt;/code&gt; Python function.  While it worked fine on
my Windows machine, it was not working at all on my Ubuntu subsystem.  After
a bit of research, I determined that I needed to change that function to the
&lt;code&gt;NamedTemporaryFile&lt;/code&gt; function and add the &lt;code&gt;delete=False&lt;/code&gt; parameter back to
the call to that function.  After removing the &lt;code&gt;print&lt;/code&gt; debug statements that
I had previously added, that one change alone brough the number of failing
tests from 70 down to 5 in a matter of minutes.  After more than three days
of trying to figure it out, it was solved, and it felt good.&lt;/p&gt;
&lt;p&gt;The next three issues were also easy to fix.  When I wrote the tests
that handled the &lt;code&gt;entities.json&lt;/code&gt; file testing, I erroneously used simple
string concatenation to determine the path names.  Now that I was dealing
with more than one operating system, that practice fell apart.  Replacing those
concatenations with calls to &lt;code&gt;os.path.join&lt;/code&gt; and doing some extra testing,
I was able to put that issue to bed.  With a reminder to myself to not
shortcut code that deals with operating systems and their artifacts, it
was on to the next set of tests.&lt;/p&gt;
&lt;p&gt;There were only two stubborn tests left.  Looking at the output, those test
failures appeared to be simple ordering issues.  When the &lt;code&gt;pymarkdown plugins list&lt;/code&gt;
command was submitted on the Linux systems, the order in which the plugins
were reported back seemed arbitrary.  To fix that, I simply replaced:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all_plugin_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all_plugin_ids&lt;/span&gt;
    &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to sort the list before using it, and I was then down to zero failures.
After ensuring that everything was working properly for both Windows and
Ubuntu environments, I ran my script to clean up the code and committed
those changes.  A few anxious minutes later, and all the GithubAction
jobs completed successfully!&lt;/p&gt;
&lt;h2 id="and-then-issue-5"&gt;And Then… Issue 5&lt;a class="headerlink" href="#and-then-issue-5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And after all that work to get tests running on Linux machines,
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/5"&gt;Issue 5&lt;/a&gt;
was addressed by simply including the &lt;code&gt;macos-latest&lt;/code&gt; platform:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;windows-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;ubuntu-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;macos-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I fully expected something to happen, but nothing did.  After
everything it took to get to that point, it was a nice change.&lt;/p&gt;
&lt;h2 id="and-finally-the-initial-release"&gt;And Finally… The Initial Release&lt;a class="headerlink" href="#and-finally-the-initial-release" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And with as much fanfare as the release of PyMarkdown &lt;code&gt;0.5.0&lt;/code&gt;, the
initial release of PyMarkdown &lt;code&gt;0.8.0&lt;/code&gt; was released.  All scenario
tests are passing on all platforms.  The entire project is being
linted and everything looks fine.  It just feels right.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was a long time getting to this point, but I was now here.  I
have a project that I can be proud of that I believe has been architected,
designed, and implemented properly.  It has a healthy set of scenario tests
and unit tests, and it follows known coding practices.  More than that,
I gave myself the time to do things properly instead of rushing ahead,
even when my instinct was to do just that.&lt;/p&gt;
&lt;p&gt;With the initial release taken care of, I know I have some issues to take
care of before I start adding new features, but I feel okay about that.
I have a good set of things that I know I must look at, and a great set
of tests that will make sure that any changes I make don’t break anything else.
Basically, because I took my time to do things “right”, I have the utmost
confidence that I can quickly deal with most of the issues in the Issues List.&lt;/p&gt;
&lt;p&gt;And because of what I have learned getting to this point, the experience has
been priceless.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be honest, I am not sure.  I still need to work on the project,
but I am not sure if I should get some utility stuff dealt with or
focus on the project before moving forward.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Crossing The Ts</title><link href="https://jackdewinter.github.io/2021/05/24/markdown-linter-road-to-initial-release-crossing-the-ts/" rel="alternate"></link><published>2021-05-24T00:00:00-07:00</published><updated>2021-05-24T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-05-24:/2021/05/24/markdown-linter-road-to-initial-release-crossing-the-ts/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/17/markdown-linter-road-to-initial-release-dotting-the-is/"&gt;last article&lt;/a&gt;, I talked about
resolving some issues that were in the way of a clean release.  In this
article, I talk about getting the documentation cleaned up and ready for release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the reasons that I started writing these articles is to talk about …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/17/markdown-linter-road-to-initial-release-dotting-the-is/"&gt;last article&lt;/a&gt;, I talked about
resolving some issues that were in the way of a clean release.  In this
article, I talk about getting the documentation cleaned up and ready for release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the reasons that I started writing these articles is to talk about how
the project evolved throughout its development.  But equally as
important, I wanted to get more comfortable with my skills as a writer.
While I am not sure how much those skills have grown, I do feel that they have grown.
And in this stage of the project, I know that I need to leverage those
skills to write good, solid project documentation.&lt;/p&gt;
&lt;p&gt;In my eyes, documentation can make or break a project.  I have
glanced over and dismissed many projects on GitHub after two minutes or
less.  I usually make that decision based on the base project document,
the &lt;code&gt;readme.md&lt;/code&gt; file, and whether that file made the project look interesting or
applicable to what I was searching for.  To be clear, I admit that it is
entirely possible that those projects I dismissed were either interesting
or what I needed. But without good project documentation to provide that
information to me, the chance that I will find the
right information to make that judgement call is a fraction
of what it could be with good project documentation.&lt;/p&gt;
&lt;p&gt;In other words, I have worked hard to come up with the PyMarkdown linter.
It was time to use that same passion to document the linter so I can
provide people with the information they need to make their own judgements.&lt;/p&gt;
&lt;p&gt;Given my own personal high bar for documentation, I was under no illusion
that this was going to be easy.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/17304b3ef580ec71678c450ab6c2a1e669b4e90a"&gt;16 May 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/6efc9044e5c93dd0848cece854e0463c04fcd299"&gt;23 May 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="coding-vs-documentation"&gt;Coding Vs Documentation&lt;a class="headerlink" href="#coding-vs-documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While this block of work did contain a few small tweaks here and there,
the bulk of the work was on getting the documentation ready for release.
And if I may be blunt, there is a large difference between writing code
and writing documentation.&lt;/p&gt;
&lt;p&gt;In creating the PyMarkdown project, there were a lot of times that I was
not sure what the next task to do was, so I referred to my
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/issues.md"&gt;Issues List&lt;/a&gt;.
If I was not sure about whether or not something was in scope, I referred
back to my article on
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;Collecting Requirements&lt;/a&gt;.
If a particular Markdown snippet was not covered in the
&lt;a href="https://github.github.com/gfm/"&gt;GFM Specification&lt;/a&gt;,
I would run the sample through the
&lt;a href="https://johnmacfarlane.net/babelmark2/"&gt;Babelmark&lt;/a&gt; webpage.  Before
anything gets committed to the repository&lt;sup id="fnref:mostly"&gt;&lt;a class="footnote-ref" href="#fn:mostly"&gt;1&lt;/a&gt;&lt;/sup&gt;, I execute a script
that ensures that I am following good coding practices, reformatting my
code in the process. And to top things off, because I love Test Driven
Development, I add
the Scenario Tests for everything before I code them up.  This provides
an additional level of structure to how I develop features or fix bugs.&lt;/p&gt;
&lt;p&gt;And that is the point I wanted to get across.  When I am writing code,
there is a lot of structure all over the place.  From picking something
off the Issues List to running my pre-commit script, there is tons
of structure built into the processes that I use to develop software.
In the cases where I sometime forget to follow a given process, that
process or other processes that I have are able to cover for that lapse
of process.  Sure, it is redundant, but it works well for me.&lt;/p&gt;
&lt;p&gt;So, when I started going through the documentation to bring it up
to the level that I thought it deserves, I wanted to follow
procedures like the ones that helped me develop the source code
side of the project.  The question was, how was I going to do that?&lt;/p&gt;
&lt;h2 id="starting-with-requirements"&gt;Starting With Requirements&lt;a class="headerlink" href="#starting-with-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I wrote it over a year ago, I still credit the creation
of the section
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/#what-are-the-requirements"&gt;What Are The Requirements?&lt;/a&gt;
with its fair share of the success for the project.  By taking the
time to sit down and figure out what I wanted and recording that
in a format that I could easily reference, I did myself a huge favor.&lt;/p&gt;
&lt;p&gt;That act of creating the article gave me a solid touchstone that
I still refer to for guidance.  Especially with the summary
paragraph after that list detailing why I thought those requirements
were important, it crystallized what I wanted to do with the project
into a bedrock set of concepts that I can rely on.&lt;/p&gt;
&lt;h3 id="doing-the-research"&gt;Doing The Research&lt;a class="headerlink" href="#doing-the-research" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In my attempt to replicate the success of my coding effort with my documentation
effort, I knew that I needed to dig
deep and figure out what I liked and did not like about various project
home pages out there.  The things that I liked, I wanted to replicate,
the things that I did not like, I wanted to avoid.&lt;/p&gt;
&lt;p&gt;So, like always, I started to research.  While that can also read
as “Jack looks at websites”, it was not really that easy to do.
I went to the
&lt;a href="https://www.reddit.com/r/coolgithubprojects/"&gt;Cool GitHub Projects sub-reddit&lt;/a&gt;
and started to look at different GitHub projects.  That process helped
me to formulate my first requirement.&lt;/p&gt;
&lt;h3 id="requirement-1-why-should-i-use-this-project"&gt;Requirement 1: Why Should I Use This Project?&lt;a class="headerlink" href="#requirement-1-why-should-i-use-this-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing that really struck me about different projects was
how far each project made someone read until they could figure out
whether the project was right for them.  In many of the projects that
I looked at, instructions on how to install the project preceded
an attempt to answer that question.  That is in the approximately
60% of the projects that provided any attempt at that answer.
To me, the absence of any answer to the question of “why?” did not make
sense.&lt;/p&gt;
&lt;p&gt;That was when I focused on what this requirement meant to me.  The
first thing that the successful answers to that question did for
me was to present the reader with a short introduction paragraph
at the start of the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#pymarkdown"&gt;readme.md file&lt;/a&gt;.
Those projects presented a good, simple paragraph to allow the
reader to determine if the foundational elements of the project
met their criteria or not.  If it does not meet their needs,
no harm, no foul, only taking up the minimum amount of time needed
to help the reader figure that out.&lt;/p&gt;
&lt;p&gt;If their criteria were met, the next part of that section needed
to provide information to the reader on why that project is better
than other similar projects at accomplishing their task.  At this
point, the reader is hooked and wants to learn more about the
project.  I did observe that the good projects provided readers with
a good selection of bullet points about the project.  It did not
need to be anything heavy, just enough to convince the reader that
they the project is serious and encourage them to read on.&lt;/p&gt;
&lt;h4 id="its-essentially-an-elevator-pitch-conversation"&gt;It’s Essentially An Elevator Pitch + Conversation&lt;a class="headerlink" href="#its-essentially-an-elevator-pitch-conversation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Basically, to use business terminology, I needed to prepare an
elevator pitch followed by a two-minute conversation.  Getting the
reader into the “elevator” was them getting to the project
website in the first place.  I then had between three
and five sentences while they are “in the elevator” to either
gain their attention or to have them politely decline.  If I
gain their attention, I then have a quick “two-minute conversation”
with them to convince them to talk about it some more before
they continue on to where they were going.  Anything more
than that is imposing on them, which will negatively affect
their interest on your conversation.&lt;/p&gt;
&lt;p&gt;While this may not seem accurate to some, I encourage readers to try
this experiment for themselves.  Go to the
&lt;a href="https://www.reddit.com/r/coolgithubprojects/"&gt;Cool GitHub Projects sub-reddit&lt;/a&gt;,
and look for three cool projects to get interested in.  Pay
attention to how much reading you do of the project documentation,
knowing that I have asked for three projects to be selected.&lt;/p&gt;
&lt;p&gt;If you follow the norm, you want to do a thorough job, but
you also want to be efficient.  You want the information that
helps you make that decision up front as much as possible.
You want the most relevant facts laid out in plain language
so you can easily digest them.&lt;/p&gt;
&lt;p&gt;If the reader is still paying attention, it is then time
to take them to the next step: the test drive.&lt;/p&gt;
&lt;h3 id="requirement-2-how-can-i-take-a-test-drive"&gt;Requirement 2: How Can I Take A Test Drive?&lt;a class="headerlink" href="#requirement-2-how-can-i-take-a-test-drive" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I hope that I do not sound like a used car salesman, but the
mindset that I had when getting past the “Am I Interested?”
part was pretty close to what I have experienced buying
a car.  Assuming that I was interested enough in the GitHub
project to spend time trying to get it working on my machine,
I needed a quick and easy way to install it and verify that
the simple case works.&lt;/p&gt;
&lt;p&gt;To be blunt, when I try out a GitHub project, I just want to
see any result, no matter how simple.  Fine tuning and more
complex cases can come later.  I know that if I cannot get a
quick confirmation that the project works on my machine in
the simplest case, I know that the more complex cases are
already a no-go.
Essentially, I want to “kick the tires” and “take it out
for a spin” and see if it works as advertised.  If not, I
want to move to the next project on as quickly as possible.
Depending on my interest in a project, I might be willing
to ask one or two questions, but that is usually the limit
of what I am willing to invest in an, in my mind, unproven project.&lt;/p&gt;
&lt;p&gt;For the PyMarkdown project, that meant adding a couple of different
sections.  The first section was the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#requirements"&gt;Requirements section&lt;/a&gt;
to specify that the project needs Python 3.8 or later to function.
While I do not find version 3.8 or higher to be a deal breaker, some people
might, so get it out of the way quickly.  Following that, I want a simple
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#installation"&gt;Installation section&lt;/a&gt;
with as few steps as possible.  It does not have to install and parse
everything, but it does have to install and parse something
right away.&lt;/p&gt;
&lt;p&gt;I then want to follow that up with what I see as the “Test Drive”.
For me, this section is the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#how-to-use"&gt;How To Use section&lt;/a&gt;,
teeing up the execution of the
simple case that is going to show the project working. Keeping
the car analogy in place, if I am driving an unfamiliar car,
I want to know where everything is in case something goes
wrong during the test drive.  That led me to add the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#if-you-get-stuck"&gt;If You Get Stuck section&lt;/a&gt;
to help the reader with the help functionality.&lt;/p&gt;
&lt;p&gt;With everything else already in place, I added the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#prerequisites"&gt;Prerequisites section&lt;/a&gt;
to help set the stage for the test drive.  Almost every time
I have test driven a car, the salesman will set expectations for
the drive and how it will proceed.  For the project, this
section provides two slightly different examples of Markdown text,
one that emits violations and one that does not.  These examples
were not very complicated, but just complicated enough to show the
project working properly.&lt;/p&gt;
&lt;p&gt;Finally, with everything else set up, it was time for the test
drive.  This meant adding the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#basic-scanning"&gt;Basic Scanning section&lt;/a&gt;
to allow the user to test the project.  This section has only
two goals.  The first is to show the PyMarkdown linter working against the
example files created in the Prerequisites section.  The second is
to provide sample output to allow the user to verify that everything
is installed and working properly.  Nothing more, nothing less.&lt;/p&gt;
&lt;p&gt;For me, this was the path to making sure that the
reader can get the project running on their system.  And I
believe that the documentation will get the reader to that
same point as quickly as possible.  Requirement met.&lt;/p&gt;
&lt;h3 id="requirement-3-turning-it-up-to-eleven"&gt;Requirement 3: Turning It Up To Eleven&lt;a class="headerlink" href="#requirement-3-turning-it-up-to-eleven" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Despite the various origin of the phrase
&lt;a href="https://en.wikipedia.org/wiki/Up_to_eleven"&gt;“turning it up to eleven”&lt;/a&gt;,
the meaning fit right into what I wanted to convey.  At this
point in the documentation, the documentation has captured the
reader’s attention and (hopefully) those readers have the
project installed and running on their system. This meant
I needed to transition from showing the project working
on a simple example to showing the project working on a more
complex example.  At the same time, I must strike a
balance between presenting a more complex example and not
overloading the reader and scaring them away.  After some
though, I determined that I needed to focus on between
two and four of the most important features or concepts
in this next step.&lt;/p&gt;
&lt;p&gt;As the PyMarkdown linter has a solid set of features, I needed
to find some way to reduce the list of features into that small
set of features that I believe are the most important features
to show someone who has just installed the project.
Seeing as I have been with the project
from the very beginning, this was no easy feat.  I needed to
try and remove my own biases and come up with no more than
three features that I hoped were indispensable to most
new users.&lt;/p&gt;
&lt;p&gt;After scribbling down all the features, some patterns started
to emerge.  One very interesting pattern emerged when I
started drawing lines from each feature to any other feature
that it depended on.  When all was said and done, there
were three features or concepts at the center of everything
else: rules and rule plugins, rule violations and their format,
and the ability to enable and disable rule plugins.&lt;/p&gt;
&lt;p&gt;It was at that point that I knew that I had the three
sections that I wanted to focus on in the main &lt;code&gt;readme.md&lt;/code&gt; file.
As the main purpose of the linter was to allow rules be
run against Markdown documents, the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#rules"&gt;Rules section&lt;/a&gt;
was an obvious starting section.  From there, I felt it was
important to relate to the user how any rule violations are
reported and how to read them, which lead to my creating the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#rule-violation-format"&gt;Rule Violation Format section&lt;/a&gt;.
Then, the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#basic-configuration"&gt;Basic Configuration section&lt;/a&gt;
was created to provide an introduction to configuration by showing
the user how to enable and disable rules.&lt;/p&gt;
&lt;p&gt;My goal for these sections was not to cover everything, but
to specifically cover the basic concepts that a new user needs
to get the project up and running effectively.  With those
bases covered, I had to make another decision: how do I
deal with the remaining concepts about the project?&lt;/p&gt;
&lt;p&gt;Going back to the GitHub projects that I thought did a
good job on documentation, I was able to make another observation.
Those projects were good at drawing a line between what
to include in the main &lt;code&gt;readme.md&lt;/code&gt; file and what to delegate
to other documents.  When I thought about it, the logic there
made a lot of sense to me.  Keep the &lt;code&gt;readme.md&lt;/code&gt; file limited to
the most important concepts, and delegate the other concepts
to other files.&lt;/p&gt;
&lt;p&gt;To that extent, I grouped the remaining concepts into 3 main
groups:
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#advanced-scanning"&gt;Advanced Scanning&lt;/a&gt;,
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#advanced-configuration"&gt;Advanced Configuration&lt;/a&gt;, and
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#advanced-rule-plugins"&gt;Advanced Rule Plugins&lt;/a&gt;.
For me, this struck a good balance because I was still able
to show interested readers that there was more to the project,
but at the same time, not overload them.&lt;/p&gt;
&lt;p&gt;With all the main concepts addressed, there was just one
requirement left to work on.&lt;/p&gt;
&lt;h3 id="requirement-4-wrap-it-up-nicely"&gt;Requirement 4: Wrap It Up Nicely&lt;a class="headerlink" href="#requirement-4-wrap-it-up-nicely" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At this point, if I have done my job right, I have gained the reader’s
attention, they have at least a simple example running on their
machine, and they have possibly played around with some of the
more advanced stuff.  For those readers who became users of
the project, I needed to do one more thing.
Wrap the &lt;code&gt;readme.md&lt;/code&gt; file up in a nice package.&lt;/p&gt;
&lt;p&gt;I do not mean “wrap up” in any dismissive way, far from it.  But
as someone who looks at various projects, if I have set it up on
my own machine and invested time in verify that it works, there
is one more thing I want to see.  I want to see that the project
is not abandoned and not going to go away overnight.&lt;/p&gt;
&lt;p&gt;Basically, I want a couple of sections where I can ask questions
and know what is going on with the project. I also want to
know it is still going to be around in the future if I have
any more questions or feature requests.  It was time to try
and help with those questions.&lt;/p&gt;
&lt;h4 id="dealing-with-questions"&gt;Dealing With Questions&lt;a class="headerlink" href="#dealing-with-questions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The first section that I added to start addressing this concern
was the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#open-issues-and-future-plans"&gt;Open Issues and Future Plans section&lt;/a&gt;.
From my viewpoint, I want to know what open issues are present
with a project that I am investing my time in, and I also want
to know where the project creators plan on taking the project.
After all, I need to invest some of my own time to get the
project working for my needs.  It helps for me to know if the
creator’s directions are aligned with my needs or not.&lt;/p&gt;
&lt;p&gt;From there, I needed to start answering questions that any
users of the project had about the project.  For me, that
started with the
&lt;a href="ddd"&gt;When Did Things Change section&lt;/a&gt;
that links to the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/changelog.md"&gt;changelog.md file&lt;/a&gt;.
For the most part, when I am looking posing questions about a
project, over 95% of those questions are either about
“how do I do X?” or “what changes?”.
This section will hopefully help answer that second question
for the users.&lt;/p&gt;
&lt;p&gt;Then, if that user still has questions, the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#still-have-questions"&gt;Still Have Questions? section&lt;/a&gt;
points them to the Frequently Asked Questions (FAQ) document.
While that document will not resolve every remaining question, over time
it should answer the most asked questions before having them
raised as more serious issues.  While not perfect, if I invest
time wisely into this document, it can reduce the number of
questions being asked in other forums.&lt;/p&gt;
&lt;p&gt;Assuming that the user still has a question after consulting the
information in the previous sections, the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#contact-information"&gt;Contact Information section&lt;/a&gt;
is there to help them understand how to get in touch with the team.
Even though that team is currently just me, I feel that it is important to
be clear on what kind of contact the user can have with me and
in what format.  It is in this section that I provided a link to
the GitHub issues tracker, suggesting its use for both bug fixes
and feature improvements.  Finally, if the user’s question is
more centered around contributing to the project, there is a
request to contact me to talk about it.&lt;/p&gt;
&lt;h4 id="how-can-someone-contribute"&gt;How Can Someone Contribute?&lt;a class="headerlink" href="#how-can-someone-contribute" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;That brings me to the section with
&lt;a href="https://github.com/jackdewinter/pymarkdown#instructions-for-contributing"&gt;Instructions For Contributing&lt;/a&gt;.
While this is still currently under improvement, I thought it
was important to let people know that I welcome solid contributions
that help the project along.  I also know that after 18+ months
working on this by myself, accepting any offered help is going to
be a gradual process.&lt;/p&gt;
&lt;h4 id="the-dull-stuff-acknowledgements"&gt;The Dull Stuff: Acknowledgements&lt;a class="headerlink" href="#the-dull-stuff-acknowledgements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;After everything else was taken care of, the projects that
really stood out to me were the ones that took the time to thank
various people who helped the project, either directly or indirectly.
Nothing important is ever developed in a vacuum, and the wise
people talk about who helped them get to that point.&lt;/p&gt;
&lt;p&gt;And to me, as I have said on other subjects, it just made sense.
The people I talk about in the
&lt;a href="https://github.com/jackdewinter/pymarkdown#acknowledgements"&gt;Acknowledgements section&lt;/a&gt;
took time to help me out.  The least I can do is say thank you
in my own way.&lt;/p&gt;
&lt;h2 id="the-outline"&gt;The Outline&lt;a class="headerlink" href="#the-outline" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After all that research, this is where I landed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why Should I Use This Project?&lt;ol&gt;
&lt;li&gt;Provide short paragraph to determine if the project is for them.&lt;/li&gt;
&lt;li&gt;Provide advantages this project has over other projects.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;How Can I Take A Test Drive?&lt;ol&gt;
&lt;li&gt;Provide required Python version and installation instructions.&lt;/li&gt;
&lt;li&gt;Provide details on how to get help if they get lost.&lt;/li&gt;
&lt;li&gt;Provide a simple, no frills example and show the project working.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Turning It Up To Eleven&lt;/li&gt;
&lt;li&gt;Wrap It Up Nicely&lt;ol&gt;
&lt;li&gt;Dealing With Questions, Bug Reports, and Feature Requests&lt;/li&gt;
&lt;li&gt;How Can Someone Contribute?&lt;/li&gt;
&lt;li&gt;Acknowledgements&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="filling-in-the-blanks"&gt;Filling In The Blanks&lt;a class="headerlink" href="#filling-in-the-blanks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the requirements sketched out and the sections laid out, it
was somewhat easy to start filling in the blanks.  To be honest,
I was eager to get to work on replacing the placeholders I had
in my mind with actual text.&lt;/p&gt;
&lt;h3 id="first-pass"&gt;First pass&lt;a class="headerlink" href="#first-pass" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My goal for the first pass was to get a good start on the &lt;code&gt;readme.md&lt;/code&gt;
file.  It took me a while to get working on that. But once I started,
I quickly gained momentum.  As I thought of things to add to the
documentation, I put them into one of two categories.  If the concept
fit into one of the three basic categories, I added it to the &lt;code&gt;readme.md&lt;/code&gt;
file and started filling it out.  If did not, I made sure to put
it in one of the other documents, knowing that I would
get around to it in a subsequent pass.&lt;/p&gt;
&lt;p&gt;And just to set things straight, yes, I initially added some extra sections
to the main &lt;code&gt;readme.md&lt;/code&gt; file.  If I am being honest with myself, I believe
that I thought it was more important to capture the essence of the concept
I was working on while it was clear in my head.  I knew that I was going to
be making multiple passes through the documentation, so it would find its
way to the right section of the right document by the end of the process.&lt;/p&gt;
&lt;h3 id="second-pass"&gt;Second Pass&lt;a class="headerlink" href="#second-pass" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I focused my first pass on the main &lt;code&gt;readme.md&lt;/code&gt; file, I moved my
focus on the second pass to the other documents, more specifically the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#advanced-scanning"&gt;Advanced Scanning&lt;/a&gt;
document and the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#advanced-configuration"&gt;Advanced Configuration&lt;/a&gt;
document.  While it may seem boring, I just kept my head down
and worked on expanding the existing point form notes in each
document into a full-fledged documentation section.&lt;/p&gt;
&lt;p&gt;It was during the creation of that documentation that I
looked at various parts of the project and found a couple
of little issues:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- when scanning a directory, is it always recursive?
  - can have switch for recursion?
- make sure configuration versions of
  - --add-plugin
  --strict-config       throw an error if configuration is bad, instead of assuming default
  --stack-trace         if an error occurs, print out the stack trace for debug purposes
  --log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG}
                        minimum level required to log messages
  --log-file LOG_FILE   destination file for log messages
- clean up
  pipenv run python main.py --strict-config -s log.level=$#1 scan examples
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was nothing serious, but they were just inconsistencies that I
was able to find by taking a wholistic look at the project through
the lens of writing the project documentation.  None of those
issues were showstoppers, but it was still good that I caught
them when I did.&lt;/p&gt;
&lt;p&gt;I was confident that I could clean those issues up quickly, so I
started doing a a reading pass through the documents, from start
to end, looking for wording that I could change.  My personal writing
process is simply to keep on reading and editing the document until
it feels right, so this was part of my normal process.  As such,
it was easy to go through the documents looking for things that
I felt were out of place, and I made quick work of that task.&lt;/p&gt;
&lt;p&gt;So, by the end of the second pass, I felt things were progressing
nicely.  Sure, I had some small issues to fix, and more revisions
were surely on their way, but I had the bulk of the documentation
written.  The next pass, that was going to start to be more
fit-and-finish work.&lt;/p&gt;
&lt;h3 id="third-pass"&gt;Third Pass&lt;a class="headerlink" href="#third-pass" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not being one that likes having pending issues hanging over my
head, when I started my third pass, resolving those found
issues were my number one priority.  Part of that was
“scratching that itch” and part of that was logic.  I was
sure that I needed to add a new command line flag, and that
was going to require new documentation.  Might as well do
that all at once.&lt;/p&gt;
&lt;p&gt;After about two hours of work, those issues were all resolved,
and with another hour of work, the documentation for the
new recursive flag was also complete.  From there, it was
just a series of reading passes over the documents, each
one looking for something slightly different.&lt;/p&gt;
&lt;p&gt;The first one was a bit more fit-and-finish work, making
sure that I was selecting saying what needed to be said
in each section.  Following that, the second reading pass
was slightly different in that I was focusing more on
selecting the right words to convey the ideas in that
section.  As I believe both of those concepts are
important, that is having the right ideas expressed
in the right place and using the right words to convey
that idea, I wanted to take the time to distinctly
focus independently on each one.&lt;/p&gt;
&lt;p&gt;With more confidence that I had the right content and
mostly the right words, I then proceeded to look through
the documents for spelling and grammar errors.  I am
not 100% sure that I found all the errors, but I am
confident that I found most of them.  And for that pass,
it was good enough for me.&lt;/p&gt;
&lt;h3 id="fourth-pass"&gt;Fourth Pass&lt;a class="headerlink" href="#fourth-pass" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is how I could tell that I was close to the end of writing
the documentation: I was fiddling over the words and the ordering
of sentences.  It was a familiar feeling. It is something that
happens each week as I write my article, so it was an easy sign
to spot.  I knew that I could probably spend years trying to
find the perfect combination of words, so I knew I had to stop
there.  It took a bit of effort, but I stopped editing the
documents.&lt;/p&gt;
&lt;!--- pyml disable-next-line no-trailing-punctuation --&gt;
&lt;h2 id="and-that-leaves-me"&gt;And That Leaves Me…&lt;a class="headerlink" href="#and-that-leaves-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At least for now, I stopped.  Now that I have a finished code
base and finished documentation, I want to give it all a couple
of days to sit before I run some extra tests and reread the
documentation.  I do not expect any of the tests to fail, but
I want to run them to be thorough.  Just to be sure.&lt;/p&gt;
&lt;p&gt;I also do not expect any changes to the documentation,
but I want to give the documentation at least 48 hours to clear
out of my head before I look at it again.  While my weekly articles
are written more directly and in a shorter duration, all the other
articles that I write get the same mandatory 48 hour cool down
period before my final pass.  I am not
sure if it is thoroughness or paranoia, but it is my process. I
just feel better knowing that I did my final documentation pass
with a clear head, hopefully removed from all the changes and
prior versions of the documents.&lt;/p&gt;
&lt;p&gt;And where does that leave me?  Unless there are any very
stunning things that I find, it means there is a good chance
that I can do the initial release this week!&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was a long time getting to this point, but I was here.
From experience, I knew that I wanted to leave the project
alone for a bit to clear my head, but it was difficult. I
have spent a lot of time cleaning things up, and I wanted to
just take that extra step across the finish line.&lt;/p&gt;
&lt;p&gt;It was aggravating to stop, but I knew I had to.  I knew that
I need to be objective and clear in my decision that everything
looks right, and I cannot do that until I clear my head.
Yes, I am annoyed at myself, but I know it will pass.&lt;/p&gt;
&lt;p&gt;After all, chances are that I am going to do the initial
release of the project this next week, right?&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After my self-imposed 48 hour cool off period, it was going to be
time to get the release ready.  Stay tuned.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:mostly"&gt;
&lt;p&gt;To be honest, I do forget sometimes to do this step sometimes. But not often. &lt;a class="footnote-backref" href="#fnref:mostly" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Dotting The Is</title><link href="https://jackdewinter.github.io/2021/05/17/markdown-linter-road-to-initial-release-dotting-the-is/" rel="alternate"></link><published>2021-05-17T00:00:00-07:00</published><updated>2021-05-17T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-05-17:/2021/05/17/markdown-linter-road-to-initial-release-dotting-the-is/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/10/markdown-linter-road-to-initial-release-fine-tuning-plugins/"&gt;last article&lt;/a&gt;, I talked about
the work I did to fine tune the plugins and to start documenting them for the release.
With the plugin rules fine-tuned and notes for them in hand, I proceded to
resolve some final issues that were in the way of a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/10/markdown-linter-road-to-initial-release-fine-tuning-plugins/"&gt;last article&lt;/a&gt;, I talked about
the work I did to fine tune the plugins and to start documenting them for the release.
With the plugin rules fine-tuned and notes for them in hand, I proceded to
resolve some final issues that were in the way of a clean release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The list is definitely getting shorter.  My goal for this stretch was to get every
item in the issues list resolved except for the documentation task.  I wanted to
get a good start on that task, but I knew that it would take more than a couple
of days to get the documentation into a state that I would feel good with. After
all, if it took me almost 18 months to get the code to the initial release state,
I was not going to get the documentation done overnight.  However, I could pave the
way for me to focus solely on that documentation for the next week!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/4f6c17ce2d5e71dd6125dcee6574c9bd9db5c8ac"&gt;09 May 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/747037de89990253892dbdbb4600f237b5fc91d7"&gt;16 May 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="open-source-software-projects-and-your-life-the-update"&gt;Open-Source Software Projects And Your Life: The Update&lt;a class="headerlink" href="#open-source-software-projects-and-your-life-the-update" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am going to share a bit of a secret with you.  As someone who has
Autism, I generally get between two and four headaches a week.  Sometimes
they are from too many people and sometimes they are from old injuries
done in my youth.  As such, I rarely have a week with less than two
headaches.  While working on the project in the last three weeks,
I have had one long continuous three-week headache, with only brief
episodes of peace during that time.&lt;/p&gt;
&lt;p&gt;That is, until Sunday, which was yesterday.  I am not sure if it was me taking care of
myself or if the headache had just run its course. I do not care.  The
fact that I woke up yesterday with no headache and went to bed
yesterday with no headache, with no headache between those two points.
That was enough for me.&lt;/p&gt;
&lt;p&gt;And it showed on Sunday when I did some work on the PyMarkdown
project followed by picking up the notes for this article and
working on it.  For both tasks, I was able to figure things more
clearly and more easily, allowing me to be more concise in what I wanted to
accomplish.  After three weeks of pain and fog, it was a blessing.&lt;/p&gt;
&lt;p&gt;I would be lying if I did not admit that sometimes it was a bit of an
uphill battle for me emotionally.  I know that I am very close to
the project’s initial release and I just wanted to do “five more
minutes” of work to get me that much closer to that goal line.  However,
in my experience,
rarely have I ever heard “five more minutes” and have it mean exactly that.
Usually it means “until I get this done”.  And if I am being honest,
I know for me that would have meant that five minutes would have
blown up to at least 30 minutes, if not a couple of hours.&lt;/p&gt;
&lt;p&gt;It was not always easy.  But making sure that I took the time to
deal with life and make sure that I was working on the project
for the right reasons and in the right mindset was the right
thing for me to do.  Yes, I know I am behind in my plans for
the initial release.  But I also know that I can finish the
remaining tasks off with a positive attitude and momentum.&lt;/p&gt;
&lt;p&gt;And for me, doing things (my version of) right is one of the
reasons that I started working on my own projects.&lt;/p&gt;
&lt;h2 id="atx-headings-part-2"&gt;Atx Headings, Part 2&lt;a class="headerlink" href="#atx-headings-part-2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having forgotten to run the Black code formatter before the last couple of
commits, I executed the formater on the code base with roughly the expected
number of reformats present in the code.  Doing some more digging into the
work I just completed on Atx Headings, I found a couple of issues.&lt;/p&gt;
&lt;p&gt;When I fixed the Atx Heading parsing to not include tab characters as
part of the allowed heading whitespace after the starting hash characters,
I had neglected to make the same change for the ending hash characters.
As such, when I added four new scenario tests to verify that only
starting and ending space characters were allowed, the after tests
both failed.&lt;/p&gt;
&lt;p&gt;It did not take me long to single out the responsible code.
Having recently been in that part of the code, I knew that
there was a good chance that the error was in the recent work
to deal with tab characters and space characters in Atx Heading
tokens.  With that knowledge, it was less than five minutes
before I was able to change this code to handle the end of an
Atx Closed Heading whitespace collection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;extracted_whitespace_before_end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace_from_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;into the end of an Atx Closed Heading space collection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;non_whitespace_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_backwards_while_character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;non_whitespace_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;extracted_whitespace_before_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that fix in place, all four scenario tests were passing.
I did double check my scenario tests to see why I had missed this,
with little insight gained.  My guess is that I was just eager
to get things done and missed one part of the solution.
I did find it before it was released, so I was not too upset.
But I knew I needed to make sure I tempered my “need for speed”
against my need to do things properly.&lt;/p&gt;
&lt;p&gt;And it was with that that I knew I was now on to the big issue
that I had been thinking about in the back of my mind for weeks:
pragmas.&lt;/p&gt;
&lt;h2 id="pragmas"&gt;Pragmas&lt;a class="headerlink" href="#pragmas" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a long history in the software development industry,
&lt;a href="https://docs.microsoft.com/en-us/cpp/preprocessor/pragma-directives-and-the-pragma-keyword"&gt;pragmas&lt;/a&gt;
are not something that developers regularly see these days.  Historically,
pragmas provide additional information to a specific compiler during
compile time, giving the compiler extra context to consider.
While more famous in the C and C++ languages, the
concept of pragmas has often been borrowed by linters and analyzers to allow
the source document to provide additional information to guide
on how that document is to be analyzed.  By default,
if the process does not understand a given pragma, it is ignored.
I believe this is one of the reasons that most pragmas look line
inline comments or something similar.&lt;/p&gt;
&lt;p&gt;One of the benchmarks I have for the PyMarkdown project is how
well and how quickly it analyzes the directories containing the
Markdown version of the articles that make up my blog.  Up until
I added support for Front-Matter tokens, it was rather messy.
However, with that being implemented, a lot of the failures due
to Front-Matter Markdown being misinterpreted was gone.  I was
now able to make some serious progress on dealing with those rule
violations that were showing up when I scanned my blog.&lt;/p&gt;
&lt;p&gt;Out of the 27 errors that were being reported by scanning
the directory, only 12 of those were what I would consider real
errors.  While the other 15 errors were being properly reported,
except for 2 instances of a parser error that I
uncovered, the remaining 13 were “allowable” failures. These
failures were allowable because I wanted to make the conscious
choice to ignore the project’s scan results for those 13 separate
instances.  The only problem was that I did not have a way
to mark those errors as being “allowable”.  That is where
pragmas came in to play.&lt;/p&gt;
&lt;h3 id="starting-with-a-good-design"&gt;Starting With A Good Design&lt;a class="headerlink" href="#starting-with-a-good-design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While there are times that I feel it is okay to jump in to writing
code, those times are few and far between.  Even if the design is
some scribbles on paper or some notes in a readmd.md file, I have
always found benefit in taking the time to work through the base
scenarios involved with a given project.  After all, the least
costly software change to make is one that has not been coded yet.&lt;/p&gt;
&lt;p&gt;This design was no different.  Starting with scenario tests, I
created a set of new scenario tests that started to fill out my
design.  Like other linters, to keep the readability high,
I decided on a simple pragma indicator and format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nv"&gt;pyml&lt;/span&gt; &lt;span class="nv"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt; &lt;span class="nv"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;multiple&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;space&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;atx&lt;/span&gt;&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The entire pragma would be wrapped in a comment.  That way, if there
was something only slightly wrong with the pragma, the parser would
consider it an HTML comment section, and treat it accordingly. Within
the pragma, the &lt;code&gt;{space}pyml{space}&lt;/code&gt; sequence would kick off the
pragma, something that was likely not to be repeated elsewhere.&lt;/p&gt;
&lt;p&gt;At that point, all that was left was the command structure.  Looking
at various other linters, they all seemed to have 8 or more commands
for specifying regions, saving state, restoring state, and all that.
While they probably have reasons for all those commands, I wanted to
keep things simple.  From my experience, I never use those other
commands because I only want to suppress the failure on the next
line.  I am not sure if everyone will feel the same way, but it was
a good place to start.&lt;/p&gt;
&lt;p&gt;With the comment line and command structure done, it was on to more
practical issues.  It made sense to me to search and store pragmas
in a manner independent of the tokenization.  For me, pragmas and
tokens are different concepts with different responsibilities. Tokens
explain what the document is while pragmas provide instructions to
the rules engine on what rules to apply (or not apply) and when.
Given those restrictions, it made sense to add code to the
Container Processor’s &lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function.
By adding the code there, the decision on whether to interpret
a line normally or as a pragma line could be made without affecting
anything else in the parser.&lt;/p&gt;
&lt;p&gt;With a collection of pragmas, I now needed someplace to store them.
Creating a new &lt;code&gt;PragmaToken&lt;/code&gt; class allowed me to add the pragma
information at the end of token stream for storage, but also allow
the token to be easily extracted.  Then, in the &lt;code&gt;PluginManager&lt;/code&gt; class, I
could add code to take the data within the &lt;code&gt;PragmaToken&lt;/code&gt; and
parse it for correctness.  Assuming a line was a correctly
formatted pragma, I could then put it into a simple format that
could be referenced by the &lt;code&gt;log_scan_failure&lt;/code&gt; function to
determine if a failure should be logged or not.&lt;/p&gt;
&lt;p&gt;Working things through on paper and with sample code, I was quickly
able to tighten that design down some more.  But in the end, the
design was pretty thought out, with some good tests written before
one line of feature code was written.&lt;/p&gt;
&lt;h3 id="implementation-detection"&gt;Implementation - Detection&lt;a class="headerlink" href="#implementation-detection" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After all that focus on the design of the feature, there really
were not many surprises that I encountered.  A new &lt;code&gt;__look_for_pragmas&lt;/code&gt;
function was added to the &lt;code&gt;ContainerProcessor&lt;/code&gt; class, only activating
if an HTML comment was found with no whitespace before it and
without being contained within a Block Quote element or a List element.&lt;/p&gt;
&lt;p&gt;From there, there was some simple code to determine if we have a
pragma, but not verifying that a valid pragma was present:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;was_extended_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;PragmaToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pragma_alternate_prefix&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;PragmaToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pragma_alternate_prefix&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;was_extended_prefix&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;PragmaToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pragma_prefix&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;remaining_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;PragmaToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pragma_title&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PragmaToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pragma_suffix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;index_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;was_extended_prefix&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pragma_lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One of the small surprises that I came across during my design phase
was
that some of the parsers have plugins that support a concept of
a “hidden” comment.  These are HTML-style comments that begin
with a sequence of &lt;code&gt;&amp;lt;!---&lt;/code&gt; instead of &lt;code&gt;&amp;lt;!--&lt;/code&gt;.  While these
constructs are still valid comments, they are easy to spot and
therefore easy to remove when parsing the document.  By supporting
both a normal comment and this hidden comment for pragmas, I
could enable people to write pragmas that would not show up
in the rendered HTML output of any parser that supports them.
It was a small change, but a good one.&lt;/p&gt;
&lt;p&gt;Other than that, the rest of the code simply
looking for something that looks like a comment that starts
with some whitespace, the text &lt;code&gt;pyml&lt;/code&gt;, and some more whitespace.
If it finds it, it adds it to the &lt;code&gt;pragma_lines&lt;/code&gt; dictionary using the
line number as the index.  Also returning &lt;code&gt;True&lt;/code&gt; in those cases,
the &lt;code&gt;ContainerProcessor&lt;/code&gt; can then discard that entire line without
affecting the token stream.  When all the tokens have been collected,
if the &lt;code&gt;pragma_lines&lt;/code&gt; dictionary contains any elements, a &lt;code&gt;PragmaToken&lt;/code&gt;
is created with that dictionary and added to the token stream.&lt;/p&gt;
&lt;h3 id="implementation-compilation"&gt;Implementation - Compilation&lt;a class="headerlink" href="#implementation-compilation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The compilation step was also relatively straightforward.  In the &lt;code&gt;compile_pragmas&lt;/code&gt;
function, the keys for the &lt;code&gt;pragma_lines&lt;/code&gt; property of the &lt;code&gt;PragmaToken&lt;/code&gt;
instance are used to get an ordered list of the line numbers for
each pragma in the document.  Compilation of the pragmas was
achieved by simply iterating through each pragma in order.  For
each pragma, the function follows code like the detection code above,
the remaining information in the pragma becoming the command and
any relevant command data.&lt;/p&gt;
&lt;p&gt;Verifying the bulk of the commands was easy.  No command? Report
a pragma failure.  Command not understood? Report a pragma failure.
Missing pragma command data? Report a pragma failure.  If anything
did not look exactly right, just report an error.  Simple.&lt;/p&gt;
&lt;p&gt;That left the function to handle the &lt;code&gt;disable-next-line&lt;/code&gt; command, which
looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ids_to_disable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;command_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;after_command_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;processed_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ids_to_disable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;next_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;next_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_pragma_failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;scan_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;actual_line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Inline configuration command '{command}' specified a plugin with a blank id."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;next_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__all_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;normalized_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__all_ids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_id&lt;/span&gt;
        &lt;span class="n"&gt;processed_ids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalized_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_pragma_failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;scan_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;actual_line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Inline configuration command '{command}' unable to find a plugin with the id '{next_id}'."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;processed_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__document_pragmas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;actual_line_number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processed_ids&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The small change from the design here was that I wanted to be
able to collapse the rule ids and the rule aliases down into
the rule ids.  To that extent, I changed local references of
&lt;code&gt;all_ids&lt;/code&gt; in the rule registration code to &lt;code&gt;self.__all_ids&lt;/code&gt;
so that the pragma compiler could make use of them.&lt;/p&gt;
&lt;p&gt;Other than that, the command expects a comma separated list of
ids and aliases to follow the &lt;code&gt;disable-next-line&lt;/code&gt; command. If
there is an empty id, it reports a pragma failure.  If not,
it looks for it in the &lt;code&gt;self.__all_ids&lt;/code&gt; dictionary, which
is a map from any valid identifier (id or alias) to the
plugin object.  If it is found in that dictionary, the
&lt;code&gt;normalized_id&lt;/code&gt; variable is set and added to the set of
ids to disable.  If not found, it reports a pragma failure.&lt;/p&gt;
&lt;h3 id="implementation-suppressing-the-failure"&gt;Implementation - Suppressing the Failure&lt;a class="headerlink" href="#implementation-suppressing-the-failure" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After the rest of the work on this feature, the suppression part
was very simple.  The last two lines of the last example are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;processed_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__document_pragmas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;actual_line_number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processed_ids&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To keep things simple, the only existing command suppresses one
or more rules being triggered on the following line.  Therefore,
one is added to the line number of the pragma, and the set
&lt;code&gt;processed_ids&lt;/code&gt; is stored in the dictionary &lt;code&gt;self.__document_pragmas&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, the &lt;code&gt;log_scan_failure&lt;/code&gt; function was altered to add this
code at the beginning:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__document_pragmas&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__document_pragmas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;id_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__document_pragmas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;rule_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rule_id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rule_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;id_set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, if there are compiled pragmas and the line number of the
log scan failure is in the dictionary of pragmas, further processing
is required.  The &lt;code&gt;rule_id&lt;/code&gt; of the failure that is being reported
is looked for in the &lt;code&gt;id_set&lt;/code&gt; of ids, and if there is a match,
then the reporting of that failure is aborted.&lt;/p&gt;
&lt;h3 id="wrap-up"&gt;Wrap Up&lt;a class="headerlink" href="#wrap-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To be honest, I was underwhelmed when I got to the final part of
the implementation.  After all that work, it was less than 10 lines
that it took to implement the part where the log scan
failure was suppressed.  The hard work was making sure that I
had good scenario tests from the beginning.&lt;/p&gt;
&lt;p&gt;And to spread some good word on Test Driven Development, let
me also supply some extra information on why I like scenario
tests so much.  While it is nice to have a solid design, I feel
that those scenario tests help me pull a design from the
abstract world into the concrete world.  Everyone can argue
about what was really meant when I say “data store”, but
if I actually write a scenario test that sets up a data store,
it makes the entire concept and usage of the data store more
real.  For me, that helps me ground myself and my designs.&lt;/p&gt;
&lt;p&gt;After all that work, I then was able to go through the remaining
failures and determine if any of those failures were “allowable”.
By allowable, I mean that I acknowledge the failure and allow
it to be suppressed because of a conscious decision.  By using
pragmas, I can then suppress those failures in a simple and
discoverable manner.  And by also supporting the &lt;code&gt;&amp;lt;!---&lt;/code&gt; sequence,
I can also make it so the pragma is hidden.  All good work!&lt;/p&gt;
&lt;h2 id="blank-lines-and-lists"&gt;Blank Lines and Lists&lt;a class="headerlink" href="#blank-lines-and-lists" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am not sure if I have talked about this small issue before, but
the parser has long had a slight glitch in how the tokens are
recorded for a Blank Line element that ends a List element.
When the Blank Line element occurs, a Blank Line token is recorded,
and it triggers the code that closes any existing List elements
or Block Quote elements.&lt;/p&gt;
&lt;p&gt;While the tokens come out in the correct order for Block Quotes tokens,
the Blank Line token always comes out before the end List token.
When testing what the HTML output would be for this scenario, everything
is fine because a Blank Line token is ignored by the HTML generator.
Even the end List token element is ignored, except for resetting the
list state.  As the only issue is the ordering of the tokens, and
not their output, this is a small glitch.&lt;/p&gt;
&lt;p&gt;As this is a small glitch, this is easily worked around.  Because
it is a small glitch with an easy workaround, I long ago decided
to keep things the way they were until something else forced me
to fix this issue.  While it only caused me to put this issue at
the top of the issues list, it was enough to cross the line that
I had drawn.  The reason?  Rule md022.&lt;/p&gt;
&lt;h3 id="discovery"&gt;Discovery&lt;a class="headerlink" href="#discovery" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of my standard “smoke” tests is to use the project to scan the
directories containing the Markdown for my own blog’s articles.  As
the plugin rules got cleaned up, especially with the addition of pragmas,
the output for the scan got progressively cleaner.  With pragmas
in place, I was able to disable all the reported errors that were
legitimate errors, but errors that I decided to ignore.  That
left only two “real” errors. Those two errors occurred in two Markdown
documents with sections that looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;grouping&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;values&lt;/span&gt;? &lt;span class="nv"&gt;Extra&lt;/span&gt; &lt;span class="nv"&gt;code&lt;/span&gt; &lt;span class="nv"&gt;required&lt;/span&gt;.
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;hierarchy&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;nesting&lt;/span&gt;? &lt;span class="nv"&gt;Extra&lt;/span&gt; &lt;span class="nv"&gt;code&lt;/span&gt; &lt;span class="nv"&gt;required&lt;/span&gt;.

## &lt;span class="nv"&gt;Configuration&lt;/span&gt; &lt;span class="nv"&gt;Type&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;: &lt;span class="nv"&gt;Grouped&lt;/span&gt;

&lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;step&lt;/span&gt; &lt;span class="nv"&gt;up&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;simple&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;grouped&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;.  &lt;span class="k"&gt;While&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;step&lt;/span&gt; &lt;span class="nv"&gt;up&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The error that was being reported was a triggered rule md022, complaining
that there was not a single line above the Atx Heading element.  Looking at the
Markdown itself, it was clear there is a blank line before the Atx Heading.  At
that point I looked at the tokens being output for the Markdown document and it
was then that I noticed the reversed tokens described above. It was a lightbulb
moment.&lt;/p&gt;
&lt;h3 id="resolution"&gt;Resolution&lt;a class="headerlink" href="#resolution" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I mentioned above, the first thing I did was to add a new item to the issues list.
I did tell myself that one more issue related to this case of improperly ordered tokens was
enough to make me fix it, and I wanted to keep my word.&lt;/p&gt;
&lt;p&gt;In the meantime, I needed something to address the issue until after
the initial release.  Looking at the code, one small change seemed obvious
but dangerous.  So, I added the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;before the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__blank_line_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_leaf_end_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_container_end_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I felt it was dangerous because it was easy.  Hopefully not sounding
paranoid, it was too easy.  With that one change, any ending of a list
would not reset the rule’s &lt;code&gt;__blank_line_count&lt;/code&gt; member variable.&lt;/p&gt;
&lt;p&gt;To this date, I still think that the fix was too easy, and sometimes
play around with scenarios that I think can fail it.  Thinking more
deeply on this issue, I believe that my sense of the tokens not being
correct has crossed over into my sense that the fix is not correct.
Furthermore, I believe that the feeling is still present because I
know that the correct way to fix this is to fix the tokens, and not
to temporarily fix it.&lt;/p&gt;
&lt;p&gt;But whether I feel 100% comfortable with the decision to delay
the fixing of the tokens until after the initial release, I believe
that was the right decision to make.  And while I do not feel
comfortable with the temporary fix, I have to find peace in the
fact that I know it is going to be temporary.&lt;/p&gt;
&lt;h2 id="strict-mode-cleanup"&gt;Strict Mode Cleanup&lt;a class="headerlink" href="#strict-mode-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After implementing the strict configuration mode previously, there were still some loose
ends to clean up with its usage.&lt;/p&gt;
&lt;h3 id="reading-the-value"&gt;Reading The Value&lt;a class="headerlink" href="#reading-the-value" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The biggest “loose end” that I needed to deal with was
around initializing this mode from both the command line and configuration.
To get things working, I had placed the following code at the end of the &lt;code&gt;__set_initial_state&lt;/code&gt;
function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strict_configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enable_strict_mode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While that code was correct, there were a few things that were not quite right
with it.  To deal with that properly, I pulled that code out into its own function,
&lt;code&gt;__initialize_strict_mode&lt;/code&gt; and added some extra code before it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__initialize_strict_mode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;effective_strict_configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strict_configuration&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;effective_strict_configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_strict_configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_boolean_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"mode.strict-config"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_strict_configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enable_strict_mode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this in place, it was now following the command-config-default pattern
that I want for all project configurations.  Only if the command line flag is
set will the value of &lt;code&gt;args.strict_configuration&lt;/code&gt; be &lt;code&gt;True&lt;/code&gt;, so no need for
fancy comparisons against &lt;code&gt;None&lt;/code&gt; there.  If it is not set, then the code tries
to look for a value in the configuration, before adopting the default of
&lt;code&gt;False&lt;/code&gt;.  While the &lt;code&gt;False&lt;/code&gt; is not explicitly satisfied, it is the default
of the &lt;code&gt;get_boolean_property&lt;/code&gt; function.&lt;/p&gt;
&lt;h3 id="where-to-place-the-call"&gt;Where To Place The Call?&lt;a class="headerlink" href="#where-to-place-the-call" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the functionality localized to a function,
the next thing that I needed to focus on was the placement of the function call
to the new &lt;code&gt;__initialize_strict_mode&lt;/code&gt; function. It did not feel right in the
&lt;code&gt;__set_initial_state&lt;/code&gt; function, but I was indecisive on where to place it.
Working through some scenarios by the time-tested method of trial by
scribbles, I finally landed on placing the call to &lt;code&gt;__initialize_strict_mode&lt;/code&gt;
right before the call to &lt;code&gt;__initialize_logging&lt;/code&gt;.  The way I saw it, there
were safeguards and debugging around providing bad information to the
&lt;code&gt;__set_initial_state&lt;/code&gt; function, but not after that point.  Putting the
call after the logging call would leave the logging call unprotected, so
I placed it between the two.&lt;/p&gt;
&lt;p&gt;The only part that was left of that was to try and protect the strict
configuration mode itself.  It was when I went to add the &lt;code&gt;strict_mode=True&lt;/code&gt;
argument to the &lt;code&gt;get_boolean_property&lt;/code&gt; function call that I noticed
something.  I noticed that I had not specified the &lt;code&gt;strict_mode&lt;/code&gt; argument
for boolean properties.  It was not a difficult fix to make, but it caused
me to work through my design again, just to make sure I had it right that
time.&lt;/p&gt;
&lt;p&gt;With that part of the changes done, there was just one part left.&lt;/p&gt;
&lt;h3 id="handling-failures"&gt;Handling Failures&lt;a class="headerlink" href="#handling-failures" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Initially, I used the phrase “Handling Failures Properly” for
this section, but I had second thoughts about that.  With things coded
the way they were, the only thing that was left was to make some small
changes to the scenario tests to record the failures.  At that point,
the error was being reported properly, but I had to take an extra
step to validate it: setting the &lt;code&gt;--stack-trace&lt;/code&gt; command line option
on the test that was reporting the failure.&lt;/p&gt;
&lt;p&gt;The example that I mainly worked with was the &lt;code&gt;test_markdown_with_bad_strict_config_type&lt;/code&gt;
scenario test.  When I executed that test, the error that I got
back was a stack trace with this text near the end of the error’s
message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    raise ValueError(
        ValueError: The value for property 'mode.strict-config' must be of type 'bool'.
        )
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the right error was being raised, I thought the project should
handle the presentation of that error in a more readable fashion.&lt;/p&gt;
&lt;p&gt;To do that, I added the following snippet of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;formatted_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Configuration Error: {this_exception}"&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to the try/except/finally clause in the &lt;code&gt;__initialize_parser&lt;/code&gt; function
and in the &lt;code&gt;main&lt;/code&gt; function.  While not a substantial change, it covered
the two areas capable of raising these &lt;code&gt;ValueError&lt;/code&gt; instances.  With
that error covered, I was then able to print out a more readable, concise,
and actionable error message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Configuration Error: The value for property 'mode.strict-config' must be of type 'bool'.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With a couple of extra formatting changes, this task was completed.&lt;/p&gt;
&lt;h2 id="and-with-that"&gt;And With That&lt;a class="headerlink" href="#and-with-that" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There was only one item in the issues list section labelled
&lt;code&gt;Priority 1 - Must Solve Before Initial&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- command line and configuration documentation
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I did check in &lt;a href="https://github.com/jackdewinter/pymarkdown/commit/17304b3ef580ec71678c450ab6c2a1e669b4e90a"&gt;a commit&lt;/a&gt;
for the work I did during the week, I want to save talking about that work until
next week.  It was a task that was both very easy and very difficult to do, so I
want to make sure that I talk about it with some distance between working on it
and talking about it.  That and its only mostly done, and I would prefer to finish
it before talking about it.&lt;/p&gt;
&lt;p&gt;A good reason to check in next week though, no?&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Phew… while there are still items in the issues list, there is only
one issue remaining in the priority 1 section: documentation.  I am not
sure if this makes sense to anyone, but that is a big relief to me.
Having taken the time to document my work each week, I am not
worried about writing the documentation.&lt;/p&gt;
&lt;p&gt;Getting to this point has been a roller coaster ride, with both positive
and negative hills to climb along the way, but I feel good about this.
Sure, there are some little things that I need to fix here and there,
but I believe the code for the project is in really good shape to be
released.  I was not sure it was ever going to get that way, but it is
there now.&lt;/p&gt;
&lt;p&gt;I guess part of that feeling is confidence because I am literally throwing
everything against it.  After the pragmas and one little fix, I can now
scan every file for my website without any non-allowed failures getting
in the way.  If I want to, I can probably add something to the linter
at a later stage to record those pragmas in a reportable fashion.  But
for now, if I want to find them out, I just have to do a simple search
through my Markdown files for &lt;code&gt;&amp;lt;!---&lt;/code&gt;, and that is easy enough.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I had started on the documentation, I needed some time to get it
into a good shape to talk about.  That is what I am going to be talking about
next week.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Fine Tuning Plugins</title><link href="https://jackdewinter.github.io/2021/05/10/markdown-linter-road-to-initial-release-fine-tuning-plugins/" rel="alternate"></link><published>2021-05-10T00:00:00-07:00</published><updated>2021-05-10T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-05-10:/2021/05/10/markdown-linter-road-to-initial-release-fine-tuning-plugins/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/03/markdown-linter-road-to-initial-release-finalizing-plugins/"&gt;last article&lt;/a&gt;, I talked about
the work I did to get the already implemented plugins ready for the release.  In this
article, I talk about the remaining work that I needed to do to fine tune the plugins
and document them for the release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having just …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/03/markdown-linter-road-to-initial-release-finalizing-plugins/"&gt;last article&lt;/a&gt;, I talked about
the work I did to get the already implemented plugins ready for the release.  In this
article, I talk about the remaining work that I needed to do to fine tune the plugins
and document them for the release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having just updated the rules and verified that they worked the way I envisioned
them working, there was still two big tasks and a small handful of small tasks
left to do before release.  The large task was to ensure that each plugin
rule was triggering properly and reporting the correct error point.  After that,
I needed to ensure that each plugin rule has a good start at usable documentation.
To wrap things up, I needed to keep on whittling down the little items in the issues
list that I have continued to find during other tasks.&lt;/p&gt;
&lt;p&gt;Knowing that an initial release is inevitable in the next couple of weeks,
I moved forward on the project.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/445c7a15bd926112146167eb1ac0d3f90c4f5de5"&gt;28 Apr 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5487aeaed56088c37c81f7ff2a4fd26ffb04811d"&gt;26 Apr 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="open-source-software-projects-and-your-life"&gt;Open-Source Software Projects And Your Life&lt;a class="headerlink" href="#open-source-software-projects-and-your-life" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the time between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/445c7a15bd926112146167eb1ac0d3f90c4f5de5"&gt;this commit&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/c742f628348b47662f3142ee316d3a44e2405af0"&gt;this commit&lt;/a&gt;,
there is a noticeable gap of 9 days.  While some of time in that gap was spent trying to figure out the
right wording for the documentation on the rules, a lot of it was not.  That is what I want to talk about in
this section: open-source software projects and your life.&lt;/p&gt;
&lt;p&gt;I love my PyMarkdown project, I really do, but it is not my life.  In the
grand scheme of things, it is important, but not more than my health, my
family, my job, and my sanity.  Even though I
was feeling better after the previous weekend, I was not at 100%.  To be
honest, for that week, if I was at 60% on any day, it was a great day.  And
while some people might disagree with my reasons, my priorities that week were on anything
except the PyMarkdown project.&lt;/p&gt;
&lt;p&gt;And it was not a difficult decision to make either.  After working at my
day job and doing what I could around the house, I had little energy left
to do anything else.  When I could, I did work on the project, but when
my energy ran out, I locked my computer and went somewhere to depressurize
and rest.
I did not think twice about this either.  The reason I can spend evenings and
weekends working on this project is my job.  The reason that I have the
mental energy to work on this project is due to my health.  The reason that
I have the emotional energy to work on this project is due to my family
and my sanity.  Unless I want to develop negative feelings about this
project, I need to ensure that I work on the PyMarkdown project for the
right reasons and with the right mindset.&lt;/p&gt;
&lt;p&gt;That decision did set me back a week or so, but it was the right thing
for me to do.  For any other open-source contributors out there, please
figure out what is important to you and manage your projects based on
that list of priorities.  Most importantly, do not feel bad if that project
does not always make it to the top of the list.  It is healthier if it
does not.&lt;/p&gt;
&lt;h2 id="the-big-scan-verifying-existing-rules"&gt;The Big Scan: Verifying Existing Rules&lt;a class="headerlink" href="#the-big-scan-verifying-existing-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There was no way around this task.  I needed to go through each of the
rules and their test data, verifying that the scenario tests were
reporting the right number of rule violations at the right positions.
If it would help others think that I was not going insane, I could
create a myth that I played a fun game to get it done, but it would
just be a myth.&lt;/p&gt;
&lt;p&gt;The truth is, I was looking forward to this.  Yeah, I had no delusions
that it was going to be hard work, of that I was certain.  But this
was the culmination of over a years’ worth of work, and I wanted it to look
and feel right.  With that mindset, the only true way to do it was
to check every scenario test and test configuration against every
test Markdown file and verify the results manually.&lt;/p&gt;
&lt;p&gt;Along the way, I also decided to create the first iteration of
the documentation for each rule, placing notes in there that would
help me create the documentation.  As all thirteen of the existing
rules were originated from the MarkdownLint rules, I opened
each Markdown file in my editor and compared my manual results against
the results product by MarkdownLint.&lt;/p&gt;
&lt;p&gt;From my viewpoint, I sincerely believe that this is going to be
useful to the users.  As an avid user of MarkdownLint inside of
VSCode, it is useful to get any warnings about Markdown as I
am creating the documents.  Because the PyMarkdown project has
a more narrowly scoped focus of the GFM Specification instead
of MarkdownLint’s any-parser approach, as a user, knowing what
the differences are would help me understand it better.  And
if I know that I would want information on the differences
documented, I am going to assume that there are others out
there that would share that need.&lt;/p&gt;
&lt;p&gt;I also want to mention that, to keep my sanity (or at least
try to), I focused on one rule at a time to the exclusion of
everything else.  I reviewed the code for the rule, made sure
that I had a solid understanding of how I believed that rule
should work, and then started iterating between scenario tests
and the rules they were testing.&lt;/p&gt;
&lt;h3 id="and-of-course-scenario-tests"&gt;And Of Course… Scenario Tests&lt;a class="headerlink" href="#and-of-course-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I will admit that when I was going through the scenario tests,
I did curse a little.  Because I am being honest, I should probably
admit that I cursed a lot.  It was a big job, and it took a long
time.  But keeping my focus to a single rule helped me retain
my calm, even though some of the scenario tests files are huge.&lt;/p&gt;
&lt;p&gt;But there were also benefits to my approach.  When I originally
developed some of these rules, I did not have all of the command
line options that the project now has.  As a result, some of
the scenario test output includes non-relevant rules being
triggered.  I was able to clean up a lot of tests by simply
adding the &lt;code&gt;--disable-rules md0xx&lt;/code&gt; with the specific rule to
the command line for that test.  That cleared some things up
very quickly.&lt;/p&gt;
&lt;p&gt;Other than some small things, it was usually very easy to
figure out when a triggered rule was reporting the wrong
position or misfiring.  While the “inside of list” and
“inside of block quote” cases were more difficult to spot,
the rest of the errors were almost always to do with a
wrong line being reported, or the position &lt;code&gt;(0,0)&lt;/code&gt;
being reported.  That made it easy to spot.&lt;/p&gt;
&lt;p&gt;But once I spotted issues, I needed to go back to the code
for the rule that I was working on and determine if the
test result was bad or if the rule was bad.  And in cases
where the rule was bad, I needed to fix that rule.&lt;/p&gt;
&lt;h3 id="fixing-up-the-rules"&gt;Fixing Up The Rules&lt;a class="headerlink" href="#fixing-up-the-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I went through the rules, most of the rules just required a
bit of cleaning up, and the occasional adjustment here and there.
A good example of those adjustments was the change made in the
&lt;code&gt;RuleMd024.py&lt;/code&gt; module to pass the correct arguments into the
&lt;code&gt;report_next_token_error&lt;/code&gt; function.  When this rule called
the &lt;code&gt;report_next_token_error&lt;/code&gt; function, it did so in a way
that the reported position was always &lt;code&gt;(0,0)&lt;/code&gt; for SetExt
Heading tokens.  A small adjustment to the token and the
addition of the &lt;code&gt;use_original_position&lt;/code&gt; argument quickly took
care of that issue with a minimal amount of changed code.&lt;/p&gt;
&lt;p&gt;A similar issue occurred with the &lt;code&gt;RuleMd026.py&lt;/code&gt; module and
how it calculated the position of the error.  While slightly
more complicated, it took me a bit to make the changes to
deal with both Atx Heading tokens and SetExt Heading tokens
properly.  And it was when I looked at Rule md023 that I
realized it should be disabled by default.  While some other
parsers have problems with Atx Heading elements and SetExt
Heading elements that do not start at the beginning of the line,
the GFM Specification does not.  As such, it makes sense to
me to include it as a rule, but to disable it by default.&lt;/p&gt;
&lt;p&gt;Even the work that I did on Rule md018 in
&lt;a href="https://jackdewinter.github.io/2021/05/03/markdown-linter-road-to-initial-release-finalizing-plugins/#the-long-march"&gt;the last article&lt;/a&gt;
need to be checked, and I found a couple of small issues there.
However, for this rule, the big change was that I need to break
up the functions with lots of statements into a collection of
smaller functions, each more accurately named.  As I refactored
into the small functions, I fixed those issues as I went.&lt;/p&gt;
&lt;h2 id="adding-proper-documentation-for-plugin-rules"&gt;Adding Proper Documentation For Plugin Rules&lt;a class="headerlink" href="#adding-proper-documentation-for-plugin-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Taking my time with this task, per
the above section on
&lt;a href="#open-source-software-projects-and-your-life"&gt;Open Source Software Projects And Your Life&lt;/a&gt;,
I worked through this task at a leisurely pace.  While I did a couple of
format changes and section title changes, the relative content of the
sections was already fixed in my mind when I started.  It just took
a bit of experimentation to figure out what the correct transformation
from my mind to the correct layout in a Markdown file was.&lt;/p&gt;
&lt;p&gt;This task was all about taking the information that was in
my head about each rule and documenting it in such a manner that a
user running into a violation of the rule would find useful.  Starting
with
&lt;a href="docs/rule_md001.md"&gt;Rule md001&lt;/a&gt;,
this meant that I needed to have any aliases for the rule at the top,
followed by a one line summary of the rules.  Based on experience, if
you are looking at a rule, you want something quick and easy at the top
of any documentation on that rule to make sure you are looking at
the documentation for the right rule. Next was a paragraph explaining
the reason that the rule was needed, followed by good examples
of what the rule triggered on and what the rule does not trigger on.
Following knowing that you have the right rule, you then want to
understand why this rule is important and start to figure out why
it triggered on your specific example.  Next is the information on any
configuration that applies to the rule.  While most of the time
a user will go “yeah, that sounds reasonable”, short of disabling
the rule altogether, good documentation on configuration allows that
user to know how far they can bend the rule, and in what direction.&lt;/p&gt;
&lt;p&gt;The last section was the most interesting for me to add: what was
the origination of the rule.  While all the current rules are
based of rules from David Anson’s MarkdownLint project, some changes
have been made to bring them in line with the GFM Specification.
As such, I thought it was important to give some references that
contributed to the rules, as well as any changes to the rules.
Basically, if I am going to implement a similar rule, I want to
make sure I reference where I got the idea from.&lt;/p&gt;
&lt;p&gt;Once I had the first rule done, the remaining twelve rules were relatively
easy.  Most of the content for these documents was already in the source
code for the rule or the source code for the tests for that rule. It
was just a matter of extracting that information and restructuring it
for the documentation.  The remaining information needed for the rules
was primarily in the &lt;code&gt;Reasoning&lt;/code&gt; section, and that was easily crafted
after a bit of research.&lt;/p&gt;
&lt;h2 id="providing-for-strict-rule-configuration"&gt;Providing For Strict Rule Configuration&lt;a class="headerlink" href="#providing-for-strict-rule-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This change stemmed from a simple test that I made of the configuration
for rule Md022.  When I set the configuration value to a negative number,
the existing code for the &lt;code&gt;ApplicationProperties&lt;/code&gt; class did not complain.
Given the state of that class, that was the correct behavior.  However,
in my mind, I had set that configuration to an invalid value, and I wanted
to know that it was invalid instead of the &lt;code&gt;ApplicationProperties&lt;/code&gt; class
assuming the default value.  Basically, I wanted to enable “strict
configuration mode” for the
that instance of the &lt;code&gt;ApplicationProperties&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;Starting with the tests, I added two new tests for Rule md022 with a negative
number specified for the &lt;code&gt;lines_below&lt;/code&gt; configuration value for Rule md022.
One of those tests was created with my proposed “strict configuration mode”
enabled and the other test was created without it enabled. The test without
the new mode enabled passed right away, returning errors for the &lt;code&gt;lines_above&lt;/code&gt;
value which had a valid value of &lt;code&gt;2&lt;/code&gt;, but not returning any errors for
the invalid &lt;code&gt;lines_below&lt;/code&gt; value.  With the &lt;code&gt;alternating_heading_types.md&lt;/code&gt;
Markdown file and the default value for &lt;code&gt;lines_below&lt;/code&gt;, that was the correct
response.  &lt;/p&gt;
&lt;p&gt;With the base test working, I needed to add the code to wire up a new
command line switch with the &lt;code&gt;ApplicationProperties&lt;/code&gt; class.  Having added
new command line switches before, I knew it was only a small amount of
effort to change the &lt;code&gt;main.py&lt;/code&gt; module to add the argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"--strict-config"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"strict_configuration"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"throw an error if configuration is bad, instead of assuming default"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then a similarly small amount of effort to pass it into the properties class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strict_configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enable_strict_mode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the &lt;code&gt;enable_strict_mode&lt;/code&gt; function did not exist, I created it as a simple
function that enables the flag as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enable_strict_mode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Sets struct mode to True to enable it.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__strict_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I did think back and forth on whether to provide an “enable” function or
a “setter” function but landed on the “enable” function.  The easier way
to set the &lt;code&gt;self.__strict_mode&lt;/code&gt; member variable is to pass it in as one
of the arguments to the constructor function.&lt;/p&gt;
&lt;p&gt;Thinking through various
scenarios, I concluded that everything boiled down to two scenarios.
In the first scenario, whether to use strict mode at the
creation of the &lt;code&gt;ApplicationProperties&lt;/code&gt; instance is known and is passed
into the constructor when it is created.  In the second scenario, that
decision needs to be delayed to a later point where it is known. In that
case, it makes more sense to start with the strict mode disabled, enabling
strict mode if required.  As the configuration is read in and then
the decision to use strict mode can be made, I went with the second option.&lt;/p&gt;
&lt;h3 id="altering-the-rule"&gt;Altering The Rule&lt;a class="headerlink" href="#altering-the-rule" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the above code in place, I needed to modify the rule to perform a
better check on the configuration value.  Starting with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize_from_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__lines_above&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_integer_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"lines_above"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__lines_above&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__lines_below&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_integer_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"lines_below"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__lines_below&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I quickly changed it to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__validate_configuration_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Value must not be zero or a positive integer."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize_from_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__lines_above&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_integer_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"lines_above"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RuleMd022&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__validate_configuration_value&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__lines_below&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_integer_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"lines_below"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RuleMd022&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__validate_configuration_value&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The big thing to notice here is that I added the
&lt;code&gt;__validate_configuration_value&lt;/code&gt; function to handle the verification,
leveraging the &lt;code&gt;valid_value_fn&lt;/code&gt; from the &lt;code&gt;ApplicationProperties&lt;/code&gt; class.
This really did simplify the needed logic.&lt;/p&gt;
&lt;p&gt;Debugging these changes, I cleaned up a couple of function default parameters
to ensure that I could pass the correct values through, and everything worked
fine.  When the verification function failed, the command line returned an
error, but it was a generic error.  Based in the &lt;code&gt;PluginManager&lt;/code&gt; class, there
is code in the &lt;code&gt;BadPluginError&lt;/code&gt; function to take an error and translate it
into something readable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;formatted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Plugin id '{plugin_id.upper()}' had a critical "&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"failure during the '{str(plugin_action)}' action."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was good that the error was surfacing, but it lacked the ability
to allow the user to act on it.  Therefore, I added a new &lt;code&gt;cause&lt;/code&gt;
argument to the &lt;code&gt;BadPluginError&lt;/code&gt; constructor function and rewrote
that code slightly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cause&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cause&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;formatted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cause&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;formatted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Plugin id '{plugin_id.upper()}' had a critical "&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"failure during the '{str(plugin_action)}' action."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was a small change, but that change allowed errors with the configuration
values to be surfaces as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The value for property 'plugins.md022.lines_below' is not valid:
 Value must not be zero or a positive integer.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To me, that was definitely actionable!&lt;/p&gt;
&lt;h2 id="atx-heading-and-spaces-tabs-vs-spaces"&gt;Atx Heading and Spaces &amp;amp; Tabs Vs. Spaces&lt;a class="headerlink" href="#atx-heading-and-spaces-tabs-vs-spaces" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, this one was a bit weird, but it had been on my mind for a while.  When
I was going through the
&lt;a href="https://github.github.com/gfm"&gt;GFM Specification&lt;/a&gt;
to verify one of the past issues dealing with Atx Heading elements, I read the
following two lines from the section on Atx Headings:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An ATX heading consists of a string of characters, parsed as inline content,
between an opening sequence of 1–6 unescaped # characters and an optional
closing sequence of any number of unescaped # characters. The opening
sequence of # characters must be followed by a
&lt;a href="https://github.github.com/gfm/#space"&gt;space&lt;/a&gt; or by the end of line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Very specifically, it mentions a &lt;code&gt;space&lt;/code&gt; character and not any &lt;code&gt;whitespace&lt;/code&gt;
characters.  I remember this clearly, because it seems to contradict the
first two lines of the section on Tabs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tabs in lines are not expanded to spaces. However, in contexts
where whitespace helps to define block structure, tabs behave
as if they were replaced by spaces with a tab stop of 4 characters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That text is backed up by
&lt;a href="https://github.github.com/gfm/#example-10"&gt;example 10&lt;/a&gt; which has
a Markdown of&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="err"&gt;→&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and an HTML output of&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Foo&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This seems contradictory, so what to do?&lt;/p&gt;
&lt;h3 id="thinking-it-through"&gt;Thinking It Through&lt;a class="headerlink" href="#thinking-it-through" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I guess the best place to start is with the statement that while
all specifications try and be perfect, most specifications take
a while to get to that state.  The
&lt;a href="https://github.github.com/gfm"&gt;GFM Specification&lt;/a&gt;
is no different than any other specification in that regard.  To
help address that issue that I found, I posted a question to the
Markdown forums to make sure that it gets talked about.  But I
still had to do something with the parser to move it along.
But what was the right answer?&lt;/p&gt;
&lt;p&gt;From my experience, most specifications are layered to provide
general context at a high level and a more specific context at
a lower level.  A good example of this could be a specification
that says, “in the English language, &lt;code&gt;i&lt;/code&gt; always comes before &lt;code&gt;e&lt;/code&gt;”
while the specification for a particular section says “except
after &lt;code&gt;c&lt;/code&gt;”.  In that given section, I then expect to
have an explanation as to why that section is an exception,
with good reasons to back that decision up.  This provides for
a good foundation in the general case, with room to change things
at a lower level if required.&lt;/p&gt;
&lt;p&gt;Based on that experience and those two seemingly contradictory
statements, I decided to change the code to not allow tab
characters as part of the starting or ending hash characters
for the Atx Heading elements.  There was one big factor to
assist me in making that change.  That was that it was a simple
enough change, and I could always revert it if necessary with
little effort.  That meant that I could adhere to the specification
as I was reading it, and if I read it wrong, it was reversable.&lt;/p&gt;
&lt;p&gt;That was good enough for me!&lt;/p&gt;
&lt;h3 id="resolving-the-issue"&gt;Resolving The Issue&lt;a class="headerlink" href="#resolving-the-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having made the decision to go with the more specific part of the
specification, there were some changes I needed to do.  The first
thing was to add eight new tests: two tests each for rule md018, md019,
md020, and md021.  These tests are variations on existing tests that
also include tabs in the area between the hash character (&lt;code&gt;#&lt;/code&gt;) and
the start of the heading text.  With those tests ready to go,
it was time to make the changes.&lt;/p&gt;
&lt;p&gt;For detecting the opening part of the Atx Heading, the only change
needed in the &lt;code&gt;is_atx_heading&lt;/code&gt; function was to change this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;non_whitespace_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extracted_whitespace_at_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;non_whitespace_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_while_character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;extracted_whitespace_at_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;non_whitespace_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This change simply replaces the call to the generic &lt;code&gt;extract_whitespace&lt;/code&gt;
function with inline code that is targeted specifically for a space character.
As the &lt;code&gt;collect_while_character&lt;/code&gt; function returns slightly different information
than the &lt;code&gt;extract_whitespace&lt;/code&gt; function, an extra statement is required to compute
the value for the &lt;code&gt;extracted_whitespace_at_start&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;With the code for the opening hash characters completed, I needed to shift
focus to the end hash characters.  These changes were both within the
&lt;code&gt;parse_atx_headings&lt;/code&gt; function in the portion of the code after then ending
hash characters are detected and removed.  Like the changes required to
direct focus on space characters at the start of the Atx Heading element,
the end has characters required the same type of changes from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;extracted_whitespace_before_end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace_from_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;non_whitespace_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_backwards_while_character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;non_whitespace_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;extracted_whitespace_before_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once again, the &lt;code&gt;*whitespace*&lt;/code&gt; function calls needed to be replaced
with functions focus on the single space character.  And once again,
to keep the rest of the code the same, some extra computation was
required.&lt;/p&gt;
&lt;p&gt;I tested this code in two blocks, the starting hash characters and
the ending hash characters.  This worked out well and I was
quickly able to get both changes made and tested.  While it was
not a big change, it was one more thing off the list, so it was
good.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I do not like that “my getting sick” caused me to slip another
week before the initial release, I did need the time to get back
into proper form after my second COVID-19 vaccine shot.  From
experience, if I push myself more than a given amount, I am not only
borrowing energy from the short term future but prolonging the
time it takes me to recover.  Basically, I can take two to four
days of “I’ll do stuff when I can” and get back to normal, or I
can push for that duration. If I push for that duration, it usually
means that instead of two to four days, it will take me four to
six days to get back to normal.  It truly is not fair, but it
just is.&lt;/p&gt;
&lt;p&gt;In terms of the project itself, I can mentally feel all the
mental list of project checkboxes being checked off one by
one.  While I am finding things that need fixing, those items
can either be postponed or they will only take a couple of
hours to fix.  Either way, I have the confidence that I can
properly allocated them to the right priority, which is the
important decision.  And the number of checkboxes left to check
is diminishing.&lt;/p&gt;
&lt;p&gt;From my viewpoint, the entire PyMarkdown project is coming
together nicely.  The parser and the rules engine are both
working properly.  The first thirteen rules are implemented,
tested, and verified.  I have a good first draft of the documentation
for those rules, and I only have the bulk of the documentation
to compose for the base of the project.&lt;/p&gt;
&lt;p&gt;While I am not at the finish line yet, I can definitely see
it, and it is closer than the horizon!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The list of items in the priority 1 section remains low, but I need to get it
to zero before I feel confident about releasing.  With documentation being
the big push now, it was balancing both of those tasks at the same time.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Finalizing Plugins</title><link href="https://jackdewinter.github.io/2021/05/03/markdown-linter-road-to-initial-release-finalizing-plugins/" rel="alternate"></link><published>2021-05-03T00:00:00-07:00</published><updated>2021-05-03T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-05-03:/2021/05/03/markdown-linter-road-to-initial-release-finalizing-plugins/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/19/markdown-linter-road-to-initial-release-gearing-up-for-plugins/"&gt;last article&lt;/a&gt;, I talked about
gearing up for the work that I need to do on the plugins to get them ready for the release.
In this article, I do that work to get the already implemented plugins ready for the release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting close to being …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/19/markdown-linter-road-to-initial-release-gearing-up-for-plugins/"&gt;last article&lt;/a&gt;, I talked about
gearing up for the work that I need to do on the plugins to get them ready for the release.
In this article, I do that work to get the already implemented plugins ready for the release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting close to being ready for the initial release, the list of things left to clean
up was down to the actual focus of the project: the plugin rules.  Without a healthy
set of rules to power it,
a linter is usually either a fancy parser engine that is not being used to its fullest
or some Regular Expression test cases that have not been tested properly.  While the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown project&lt;/a&gt;
was definitely not just a fancy parser, I needed to upgrade the initial set of thirteen
rules to make sure that was not the case.&lt;/p&gt;
&lt;p&gt;Hoping to make a quick couple days work of upgrades, I started working on the plugin rules.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/b2c8207cd596b93c4a0423ca10a5b92a9a4d503f"&gt;11 Apr 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5487aeaed56088c37c81f7ff2a4fd26ffb04811d"&gt;26 Apr 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="before-i-start"&gt;Before I Start&lt;a class="headerlink" href="#before-i-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Apologies to any faithful readers that I did not post an article last week.  I was
recovering from my second COVID-19 shot and was out of commission from about 6PM on
Saturday evening until about 6pm on Tuesday evening.  I was able to do minimal
amounts of work during that time frame, but I felt like I was constantly trying
to push through a tough wall of fog.  And after two days of trying to push through
that fog, I decided to stop all work, including waiting a week before posting an article.
I was having issues with the quality of my own coding work at that time, and it was
only through rigorous testing and linting that I was successful there.  From a
writing an article point of view, I decided that I would rather wait a week and rest
than produce something that was not up to par with my usual posts.&lt;/p&gt;
&lt;p&gt;Was it worth it?  Yes… unequivocally yes!  From a personal viewpoint, I know quite
a few people that have either had a severe case of COVID and required hospitalization
and even a couple of people that have had a good friend pass away from COVID and
its complications.  My personal choice is to deal with the side effects of the shots
and know I am more protected than before, thereby reducing some of my anxiety from
this unusual time we are all in.&lt;/p&gt;
&lt;p&gt;To any readers out there:  Please make an informed choice as to whether you
get vaccinated.  It is not only your health that you need to worry about,
but the health of those around you and to possibility of mutations in COVID.  Do not
just brush off any decision.  Read the information from the CDC, read information
from reputable sources about what can happen to you and your local groups with
and without the vaccines, and make an educated decision.&lt;/p&gt;
&lt;p&gt;And now, on to the rest of the article.&lt;/p&gt;
&lt;h2 id="where-to-start"&gt;Where To Start?&lt;a class="headerlink" href="#where-to-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To complete this task, I needed to verify and update each of the 13 plugin rules
that have previously been coded, ensuring that they still work and are tested
properly.  I was aware that some of those rules were going to need no changes
at all, but I was also aware that some may need some decent refactoring to keep
up with the changes that have occurred since they were coded.  I had guesses
which rules were going to fall into which category, but I just needed to start
working on them to really get an idea of what changes needed to occur.&lt;/p&gt;
&lt;h2 id="the-first-three-rules"&gt;The First Three Rules&lt;a class="headerlink" href="#the-first-three-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Examining
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_001.py"&gt;Rule md001&lt;/a&gt;,
everything looked fine with this rule except for its lack of support for
front-matter.  Since I execute this rule against my blog posts which contain
front-matter,
this rule fires on each article due to my use of that front-matter to specify metadata
about the article.  So, after adding three new scenario tests that include various
forms of metadata, I started to make the changes to this rule.&lt;/p&gt;
&lt;p&gt;Setting the new &lt;code&gt;__front_matter_title&lt;/code&gt; field to &lt;code&gt;title&lt;/code&gt;, it was surprisingly easy
to add support for the Front Matter token to the &lt;code&gt;next_token&lt;/code&gt; function.  As
the Front Matter token only appears once at the start of the document, the
code was very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_front_matter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__front_matter_title&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matter_map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;hash_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, if that token is present, check for the actual title in the map,
setting the &lt;code&gt;hash_count&lt;/code&gt; variable to &lt;code&gt;1&lt;/code&gt; if it is present.  At that point,
the rest of the code takes control of any following Atx Heading tokens or
SetExt Heading tokens as they occur.&lt;/p&gt;
&lt;p&gt;But while everything looked good, the tests were not passing.  As I started
debugging, it looked like I needed to do some finessing with the
&lt;code&gt;front_matter_markdown_token.py&lt;/code&gt; module.  In checking the source code
against what tokens were being produced, there were two small issues that
I needed to take care of.&lt;/p&gt;
&lt;p&gt;The first change I needed to do was to add the call to the &lt;code&gt;lower&lt;/code&gt; function
to this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;value_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because I want to do a simple lookup inside of the &lt;code&gt;value_map&lt;/code&gt; dictionary,
I want to get the &lt;code&gt;current_title&lt;/code&gt; to a standardized form.  If I do not do that, I would
have to try an increasingly large combination of forms, such as &lt;code&gt;Title&lt;/code&gt;,
&lt;code&gt;title&lt;/code&gt;, &lt;code&gt;TiTle&lt;/code&gt;, &lt;code&gt;tItLe&lt;/code&gt; and so on.  By standardizing on that single form,
I keep the number of lookups required to a single lookup.  Hence,
I appended the &lt;code&gt;.lower()&lt;/code&gt; to that variable when using it as a key in the
dictionary, standardizing on a lowercase metadata name.&lt;/p&gt;
&lt;p&gt;The other issue was a similar issue to the issue of standardized lookup
name, but with a standardized form of the data stored for that name.  If
possible, any lookup of a value from the dictionary should be usable
without any modifications being needed.  But the way the data currently
was, any leading or trailing whitespace was being added to the
&lt;code&gt;current_value&lt;/code&gt; variable along with the rest of the data.  To me, it made
more sense to take the same care with the front-matter values.  To that
extent, I made sure to add a call to the &lt;code&gt;strip&lt;/code&gt; built-in function before
adding the string to the &lt;code&gt;current_value&lt;/code&gt; variable.  While it was not
perfect, I was pretty sure it would handle a good 80% of the scenarios
I already had in mind.&lt;/p&gt;
&lt;p&gt;Finally, to round things out, I added some extra configuration to fetch a
configurable string to use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize_from_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__front_matter_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"front_matter_title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"title"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="the-other-two-rules"&gt;The Other Two Rules&lt;a class="headerlink" href="#the-other-two-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Because
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_002.py"&gt;Rule md002&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_003.py"&gt;Rule md003&lt;/a&gt;
are very narrowly focused, they did not require any changes to the source code or the test code.
I did play around with (or experiment with if you prefer) various combinations to try and find some gaps in both
rules for about an hour or so each.  But in both cases, any failures that I found boiled
down to one of the already existing scenarios already being tested in the scenario tests.&lt;/p&gt;
&lt;h2 id="the-long-march"&gt;The Long March&lt;a class="headerlink" href="#the-long-march" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yup, 13 days occurred between the
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/b2c8207cd596b93c4a0423ca10a5b92a9a4d503f"&gt;last commit&lt;/a&gt;
before this change and the
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/4e09a5bb480b852436a452f63fdd21d2e1a00493"&gt;current commit&lt;/a&gt;
that included this change.  Like a fair number of previous difficult tasks, I tried to
be smart about it, and ended up choosing what I believe to be the simplest
solution.&lt;/p&gt;
&lt;h3 id="the-research"&gt;The Research&lt;a class="headerlink" href="#the-research" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the beginning, I added 17 new scenario tests to deal with Block Quote elements,
List elements, and inline elements.  Right away, there were over ten test failures
and a handful of cases that threw an exception when the rule was executed.  At that
point, this was part of the code in the &lt;code&gt;next_token&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_paragraph_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;split_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_paragraph_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;split_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_whitespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_text&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;combined_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_whitespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;next_text&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"^\s{0,3}#{1,6}\S"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"#\s*$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_text&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The exceptions were occurring due to the &lt;code&gt;assert&lt;/code&gt; statement failing.  It was not
failing on all tests, just ones that had multiple Text tokens within
the bounds of the Heading tokens that spanned multiple lines.  As soon as that
&lt;code&gt;assert&lt;/code&gt; statement was hit in those cases, the &lt;code&gt;assert&lt;/code&gt; would trigger, and
rightly so.  In those cases, only part of the required newlines were attributed
and stored with that first Text token, the rest of the newlines being stored
in the various tokens where the newline occurred.  And as soon as that first
Text token was hit, that &lt;code&gt;assert&lt;/code&gt; statement evaluates to &lt;code&gt;False&lt;/code&gt; and the
rule fails.&lt;/p&gt;
&lt;h3 id="lather-rinse-repeat"&gt;Lather, Rinse, Repeat&lt;a class="headerlink" href="#lather-rinse-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once again, I started out with the best of intentions and wanted to
come up with a solution that was very workable and very smart.  I have
talked about this before in my articles, and I am pretty sure that I will
talk about it in future articles.  I do not purposefully do it, nor is it
a matter of pride or a matter of proving myself to someone.  As part of
my nature, I want to keep quality and performance at a high level, so I
strive to come up with the best solution that maximizes those concepts.
And, I also admit, I sometimes get carried away.&lt;/p&gt;
&lt;p&gt;So, with the best of intentions, I tried four different variations on
a theme, each one trying to solve the issue in a slightly different
manner.  One incarnation tried to keep every token that occurred in a
Python list, only to try and parse through it later.  Another incarnation
tried to be smarter about handling Link tokens but did not pay enough
focus to the other types of tokens.  It was just a lot of effort with
things getting close to proper solution before falling apart.  And
with each incarnation of the solution, I got more frustrated until
I had enough.&lt;/p&gt;
&lt;p&gt;It was then that I decided to take a step back and think things through
more clearly.&lt;/p&gt;
&lt;h3 id="learning-from-mistakes"&gt;Learning From Mistakes&lt;a class="headerlink" href="#learning-from-mistakes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There were a couple of things that I learned from all those iterations,
painful as they were to remember.  The big thing that I was once again
looking at was that complicated solutions were just tripping over
themselves.  I would set a value here, access it there, and then when
I went to reference it in another piece of the source code, I was
surprised that its value had changed.  I did not need to have complicated
variables to hold the information I needed, I just needed to have
“just enough” information.&lt;/p&gt;
&lt;p&gt;Only a small distance away from that concept, I needed to keep my
solutions small enough to hold “just enough” information to complete the
task.  Of the four solutions that I tried in that week, three of them
tried to keep everything that occurred within the Paragraph element
in a list to be analyzed later.  It was just crazy the things I was
trying to do to keep that data in sync with the tokens as the
information came through.&lt;/p&gt;
&lt;p&gt;I needed to take the best of what worked and learn from what did not.
And I had a feeling that it would be a simple solution that I had
missed.  And I was right.&lt;/p&gt;
&lt;h3 id="final-solution"&gt;Final Solution&lt;a class="headerlink" href="#final-solution" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I sat back and looked at what I tried and what worked and
what did not work, the easy part that worked was the handling of
the Text token itself and not referencing Text tokens within an
inline Link element.  To cleanly take care of that, I replaced
this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_paragraph_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with the slightly more complicated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_paragraph_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__inside_of_link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_link_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__inside_of_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Essentially, ignore any tokens inside of a Link token until the rule is looking
outside of that Link token’s scope.  Once that was done, I was able
to continue with the processing of Text tokens within a Paragraph
token with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;split_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_paragraph_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;split_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_text&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;combined_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;split_whitespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;split_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;next_text&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_hard_break&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_other_token&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_other_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;adjusted_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_column_number&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;adjusted_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_column_number&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_whitespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="n"&gt;split_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While it looks like it is a lot more complicated than the previous two lines
that it replaces, those two &lt;code&gt;if&lt;/code&gt; statements are there
solely to ensure that the column number is calculated properly.  From that point
of view, I think it was a good win! And when I said above that I needed the
algorithm and variables to have “just enough” information, I believe I am
meeting the constraint here.  The &lt;code&gt;__paragraph_index&lt;/code&gt; variable is the only
thing that was added to the main part of the changed code, as that was the
only thing required to ensure that the right part of the Paragraph token’s
leading space field was being used.  The other fields that are present in
the code do not try and reconstruct the data, just report on what the algorithm
encountered.&lt;/p&gt;
&lt;p&gt;With that main part of the solution in place, there were no more exceptions
being thrown as the &lt;code&gt;assert&lt;/code&gt; statement had been removed.  From my work
with the consistency checks for the tokens, I was confident that everything
lined up with respect to the newlines in tokens, I just had to keep track
of them in this rule.  So, I added code that only tracked those changes,
and nothing else:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_code_span&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trailing_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_raw_html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_image&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_from_blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"inline"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;before_link_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;before_title_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;after_title_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active_link_title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"full"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ex_label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__inside_of_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_link&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_hard_break&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_hard_break&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The two exceptions to that statement were the Hard Line Break token and
the Link token.  As I mentioned previously, to deal with Link elememts
properly, I needed to keep track of when the rule was looking at tokens
within the scope of a Link token, hence &lt;code&gt;self.__inside_of_link&lt;/code&gt;.  In a
similar vein, as I had decided that any inline element on a line would
invalidate that line from this rule, I needed to track the presence
of that token, hence &lt;code&gt;self.__first_line_after_hard_break&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I believe that the thing that made the above code work well was that
I was primarily only tracking the one thing that I needed to: the
&lt;code&gt;__paragraph_index&lt;/code&gt; field.  I did not have to try and reconstitute anything
to figure that out, I just had to count newline characters.  And to
be honest, I think I might work on refactoring that out in the future
as well.&lt;/p&gt;
&lt;p&gt;Finally, adding in some initialization code when a Paragraph token was encountered:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_other_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_hard_break&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__inside_of_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and some code to handle the end of a line within a Text token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_other_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_hard_break&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and I was done.  Of course, it took a bit longer to actually arrive at
that solution, but not much more.  I focused on one small set of
scenario tests and worked to get those passing before moving on to
another set of tests.  If my notes are accurate, I started with plain
Text tokens, then multiple line Text tokens, then Text tokens with
various forms of Code Span tokens scattered around the Text tokens,
and then on to the other inline tokens.&lt;/p&gt;
&lt;h3 id="rule-md019"&gt;Rule md019&lt;a class="headerlink" href="#rule-md019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After all that work, it was nice to check out
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_019.py"&gt;Rule md019&lt;/a&gt;.
Like Rule md002 and Rule md003 above, the constrained and focused
nature of this rule led to it being just fine as it was.  No changes required.&lt;/p&gt;
&lt;h2 id="the-next-four-rules"&gt;The Next Four Rules&lt;a class="headerlink" href="#the-next-four-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After taking a long time to get Rule md018 finished, it was with some trepidation that
I started to work on Rule md020.  I was not sure if it was going to be as bad as the previous
rule, but I had to push forward anyways.  &lt;/p&gt;
&lt;h3 id="rule-md020"&gt;Rule Md020&lt;a class="headerlink" href="#rule-md020" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting on
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_020.py"&gt;Rule md020&lt;/a&gt;,
I copied over 21 new scenario tests
from the scenario tests for Rule Md 018, modifying them to test for possible Atx Closed
Heading elements instead of Atx Heading elements.  After the modifications were made,
I carefully determined what the correct output for each of the new scenario tests was,
and coded that in.&lt;/p&gt;
&lt;p&gt;Trying to leverage the work that I did in modifying the code for Rule Md018, I looked
at the code, determined to refactor it.  To that extent, I took a bulk of the code from
the &lt;code&gt;RuleMd018&lt;/code&gt; class and moved it into the &lt;code&gt;StartOfLineTokenParser&lt;/code&gt; class.  In place of
the conditional that determines if the &lt;code&gt;report_next_token_error&lt;/code&gt; function should be
called, I created a new &lt;code&gt;check_start_of_line&lt;/code&gt; function and made it do nothing.  Then
I implemented a new &lt;code&gt;MyStartOfLineTokenParser&lt;/code&gt; class, and moved the two conditionals
from the original &lt;code&gt;RuleMd018&lt;/code&gt; class into the &lt;code&gt;check_start_of_line&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyStartOfLineTokenParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StartOfLineTokenParser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_start_of_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number_delta&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"^\s{0,3}#{1,6}\S"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"#\s*$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_text&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__owner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, in the &lt;code&gt;RuleMd018&lt;/code&gt; class, after creating a new instance of the
&lt;code&gt;MyStartOfLineTokenParser&lt;/code&gt; class in the &lt;code&gt;__init__&lt;/code&gt; function, the wiring
up of the calls to that instance was simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;starting_new_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__token_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starting_new_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__token_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that refactor accomplished and tested, it was then on to the
actual rule that I wanted to work on, Rule md020.  Reusing the
&lt;code&gt;StartOfLineTokenParser&lt;/code&gt; class, I created another &lt;code&gt;MyStartOfLineTokenParser&lt;/code&gt; class
in the &lt;code&gt;rule_md_020.py&lt;/code&gt; module.  The only change that was required  to support
the new rule was to replace the conditional in the &lt;code&gt;check_start_of_line&lt;/code&gt; function
with the follow conditional:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"^\s{0,3}#{1,6}.*#+\s*$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because I took the time to do a solid refactor of Rule md020, reusing
the &lt;code&gt;MyStartOfLineTokenParser&lt;/code&gt; class in this rule was a smart move.  Things just
worked with little effort.  A definite plus!&lt;/p&gt;
&lt;h3 id="rule-md021-md022-and-md023"&gt;Rule Md021, Md022 and Md023&lt;a class="headerlink" href="#rule-md021-md022-and-md023" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While it was not as much work as Rule md018, Rule md020 did take a bit of work to get
done.  Looking at
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_021.py"&gt;Rule md021&lt;/a&gt;,
I knew that was not going to be the case.  Similar to code
for Rule md019, the code for that rule was very simple and straightforward.  As such,
no changes were required in either the rule code or the test code.&lt;/p&gt;
&lt;p&gt;Taking a quick look at the source code for
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_022.py"&gt;Rule md022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_023.py"&gt;Rule md023&lt;/a&gt;,
 my hope
was that they were
was that they did not need any changes.  In both cases, the code seemed to be very narrowly
confined to working on existing Heading tokens and the text contained within
those headings.  Looking at the issues list, I addressed concerns about these
two rules by extra tests for Block Quote
elements and List elements for both rules, as well as extra line spacing tests
for Rule md022.&lt;/p&gt;
&lt;p&gt;After that research and executing the scenario tests, that initial observation
on the simplicity of these rules was confirmed.  With the simple addition of some
extra scenario tests, I was satisfied that the scenarios were adequately covered.&lt;/p&gt;
&lt;h2 id="the-final-four"&gt;The Final Four&lt;a class="headerlink" href="#the-final-four" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Proceeding on to
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_024.py"&gt;Rule md024&lt;/a&gt;,
the code itself was solid and did not require any changes.  However, to ensure things
were properly tested, I added 6 new scenario tests for the rule.  As testing support for
rules within Block Quote elements and List elements has been lacking for some of
the previous rules, I made sure to add tests for different forms of those elements.
In addition, as this rule deals with two headings have the same text, I added extra
tests to verify that adding a single space or an inline element (such as adding
emphasis) is enough to make the headings not equal.&lt;/p&gt;
&lt;p&gt;Looking at
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_026.py"&gt;Rule md026&lt;/a&gt;,
the code was bulky and needed a bit of refactoring, but the code itself was solid.
As this rule deals with the content of Atx Heading tokens and SetExt tokens, there
was no need to check out any weird conditions.  Doing my due diligence, I ran
through some experimental tests to see if I missed anything.  Everything that I threw
at the rule emitted the data that I expected without fail, including the line number
and column number.  After checking to make sure that some form of each experimental test
was present in the scenario tests, it was on to the next rule.&lt;/p&gt;
&lt;p&gt;Similar to the previous two rules,
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_036.py"&gt;Rule md036&lt;/a&gt;
did not require any changes to the code as it deals with a focused examination
of emphasized text within a Paragraph element.  And as with the scenario tests for
previous rules, some quick experimental testing did not reveal anything that
had been missed with those scenario tests outside of containing them within
Block Quote elements and List elements.  Those two scenario tests were easily
added and worked without any changes, so it was on to the last rule.&lt;/p&gt;
&lt;p&gt;To say that ending up with
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_047.py"&gt;Rule md047&lt;/a&gt;
was anticlimactic would be an understatement.  This rule has one and only one very
narrowly defined condition as part of its rule: does the document end with a blank line.
Let me just say that it took less than 10 minutes to verify the code was working
as desired and the scenario tests were covering everything properly.  Yup,
that easy.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, the first thing that I need to confess to my readers is that I did not listen
to my own advice.  I want to release this project so much that I pushed ahead with
coding work on the rules even though I knew I was having issues with the quality
of that work. And to be honest, I ended up paying for it with headaches and
having to reexamine the code that I had already completed to make sure that I did not
mess anything up.  Hopefully one of these days I will learn to not push
ahead so much.&lt;/p&gt;
&lt;p&gt;As to the couple of days that I had hoped to take to get the rules into shape,
that did not happen.  It is okay that it did not happen, the work took as long
as it needed to take to get to a solution that I am confident about.  Sure,
I would love to get some of that week back that I lost working on Rule md018,
but it happened.  Most of the rules took a decent one to two hours to
properly inspect and fix, and I am okay with that.  It is the level of confidence
that I have in shipping an initial release with those rules that I am
concerned with.&lt;/p&gt;
&lt;p&gt;To that end, I think I am doing very well.  I made some notes about things to
check in the rules, like I always do.  But I am certain that anything
that I find will be a small issue, not a big issue link Rule md018.  I am
also certain that when I start documenting the various rules for the initial
release, I will find at least a couple of inconsistencies that I will need
to look at.  Never a dull moment!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With each plugin rule examined and working properly, I needed to get back to
my proper coding mindset and make sure that each rule was passing all quality
bars and each rule was properly documented.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Gearing Up For Plugins</title><link href="https://jackdewinter.github.io/2021/04/19/markdown-linter-road-to-initial-release-gearing-up-for-plugins/" rel="alternate"></link><published>2021-04-19T00:00:00-07:00</published><updated>2021-04-19T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-04-19:/2021/04/19/markdown-linter-road-to-initial-release-gearing-up-for-plugins/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/12/markdown-linter-road-to-initial-release-creating-a-package/"&gt;last article&lt;/a&gt;, I talked about
how I worked through the issues to create an installable package for the project.  In
this article, I talk about gearing up for the work that I need to do on the plugins to
get them ready for the release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/12/markdown-linter-road-to-initial-release-creating-a-package/"&gt;last article&lt;/a&gt;, I talked about
how I worked through the issues to create an installable package for the project.  In
this article, I talk about gearing up for the work that I need to do on the plugins to
get them ready for the release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having made great progress towards the initial release, I knew that I needed to spend
some time focusing on the heart of the PyMarkdown linter project: the rule plugins.  To be
honest, the last time that I have spent any serious time looking at the rules was at
least five or six months ago.  In that time, I have changed a lot of code, both improving
how things performed and fixing issues.  It just made sense that before I release the
project, that I go through the already implemented rules and make sure they get the same
thorough treatment that I have given the rest of the project.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/2c3d4f65c9f1aa1cbd079f6939c6fbb4d3a7008c"&gt;03 Apr 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/2ee5154b52250231e7f5ea1afc6582c5655521c9"&gt;10 Apr 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="where-to-start"&gt;Where To Start?&lt;a class="headerlink" href="#where-to-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the current set of issues that I had with the configuration system, I noticed
two little problems and one slightly bigger problem.  The first little problem had
to deal with the error output from the plugin manager.  If there was any kind of
exception in the plugin, it was being handled and replaced with a more standard error.
But the issue that I had with it was that I needed more information to be provided with
that error, to debug plugin issues more effectively.  The second problem was the
inverse of the first problem: too much information.  When listing the plugins from the
command line, I felt that I was providing too much information and needed a way to filter
out plugins that were in development.&lt;/p&gt;
&lt;p&gt;The bigger problem was going to take more time, but I also felt that it was important.  I
needed to find an effective way to override any configuration file properties from the
command line.
In any useful command line tool that I have used, that tool almost always has support
for a configuration file and configuration from the command line.  Having used tools
with this functionality implemented, I sincerely felt it is a better, more efficient way
to work.  I felt it was important enough to take the time to implemented it and do
implement it right.&lt;/p&gt;
&lt;p&gt;With those three issues to fix, it was time to get to work!&lt;/p&gt;
&lt;h2 id="adding-in-where-exceptions-occur"&gt;Adding In Where Exceptions Occur&lt;a class="headerlink" href="#adding-in-where-exceptions-occur" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned above, the first issue that I wanted to tackle was one that I believe is
helpful in debugging issues with PyMarkdown’s rule plugin modules.  Prior to this change,
if one of the rules thrown an exception, plenty of information was included about the
exception that occurred.  What that information that was missing was any information
detailing where the parser was in the Markdown document when the exception occurred.
While that
may seem like a small thing, that extra content is often pivotal to diagnosing why the
exception was raised in the first place.&lt;/p&gt;
&lt;p&gt;Thankfully, adding that information was rather trivial.  To start, the &lt;code&gt;__init__&lt;/code&gt; function
of the &lt;code&gt;BadPluginError&lt;/code&gt; class was changed to accept four new arguments: &lt;code&gt;line_number&lt;/code&gt;,
&lt;code&gt;column_number&lt;/code&gt;, &lt;code&gt;actual_line&lt;/code&gt;, and &lt;code&gt;actual_token&lt;/code&gt;.  The handling of those arguments
was then added to the end of the processing of the &lt;code&gt;formatted_message&lt;/code&gt; variable in
the &lt;code&gt;__init__&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;position_message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"({line_number},{column_number})"&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;position_message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"(Line {line_number})"&lt;/span&gt;
        &lt;span class="n"&gt;formatted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{position_message}: {formatted_message}"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;actual_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;formatted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{formatted_message}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Actual Line: {actual_line}"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;actual_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;formatted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{formatted_message}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Actual Token: {ParserHelper.make_value_visible(actual_token)}"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, if the &lt;code&gt;line_number&lt;/code&gt; argument is provided, then the &lt;code&gt;line_number&lt;/code&gt; and
optionally the &lt;code&gt;column_number&lt;/code&gt; are added to the end of the &lt;code&gt;formatted_message&lt;/code&gt;
variable.  Additionly, if a line is being processed when the error occurs, the
&lt;code&gt;actual_line&lt;/code&gt; is specified, and that variable is added on its own line.  Similarly,
if a token is being processed when the error occurs, the &lt;code&gt;actual_token&lt;/code&gt; is added
on its own line.&lt;/p&gt;
&lt;p&gt;With that work completed, it was then time to wire up the other side of the exception:
where the &lt;code&gt;PluginManager&lt;/code&gt; class raised those exceptions.  To ensure that the extra
information would only be provided when requested, its presence was enabled by passing the
&lt;code&gt;arg.show_stack_trace&lt;/code&gt; variable
from the command line into the class.  Once set as the &lt;code&gt;self.__show_stack_trace&lt;/code&gt;
member variable, the &lt;code&gt;next_line&lt;/code&gt; function was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enabled_plugins_for_next_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;actual_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;BadPluginError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual_line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;actual_line&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the &lt;code&gt;next_token&lt;/code&gt; function was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Inform any listeners of a new token that has been processed.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enabled_plugins_for_next_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;actual_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;BadPluginError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;actual_token&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the &lt;code&gt;next_line&lt;/code&gt; function, the &lt;code&gt;line_number&lt;/code&gt; is always passed on to the exception when
it is raised.  Keying off of the &lt;code&gt;self.__show_stack_trace&lt;/code&gt; member variable, the
&lt;code&gt;actual_line&lt;/code&gt; is either set to &lt;code&gt;None&lt;/code&gt; or to the current line.  As expected, the changes
to the &lt;code&gt;next_token&lt;/code&gt; function perform the same actions, just with a token-based approach
instead of a line-based approach.&lt;/p&gt;
&lt;p&gt;Once this code was in place, I started to execute the scenario tests, and was welcomed
by the behavior that I expected.  The four scenario tests that I expected would
change did change.  In addition, when I added two additional scenario tests to ensure
that the code was properly covered, the output for those two tests was as I expected.
With a bit of cleanup to ensure that all &lt;code&gt;PyLint&lt;/code&gt; checks pass, it was then on to the
next planned change.&lt;/p&gt;
&lt;h2 id="only-displaying-implemented-plugins"&gt;Only Displaying Implemented Plugins&lt;a class="headerlink" href="#only-displaying-implemented-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the initial release, I wanted everything to look nice and clean.  As such, when I was
going through the command line to document what I saw there, there was something in the
output for the &lt;code&gt;plugins list&lt;/code&gt; subcommand that I did not like: unimplemented rules were
showing up.  I wanted those “in-development” rules plugins to be included in the project
to remind me to complete them, but I did not want them to show up until they were done.
When I added the version numbers for all the rules, I set the version numbers of those
“in-development” rules to &lt;code&gt;0.0.0&lt;/code&gt; as a visual reminder that they were not yet ready.
But now that I wanted to clean things up, that did not look as clean as I wanted it to,
so I needed to change it.&lt;/p&gt;
&lt;p&gt;To preserve the existing behavior, I changed the command line parser to implement a
new &lt;code&gt;--all&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sub_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"--all"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"show_all"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"show all loaded plugins (default is False)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, in the &lt;code&gt;__handle_argparse_subparser_list&lt;/code&gt; function that handles the list of
plugins, I made a small change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_version&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"0.0.0"&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_all&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These two small changes together specified that by default, if a plugin containing a
rule has a version of &lt;code&gt;0.0.0&lt;/code&gt;, it will be skipped over in the list, unless the &lt;code&gt;--all&lt;/code&gt;
flag is specified.  Scenario tests that previously emitted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  md009  no-trailing-spaces     False              False              0.0.0
  md019  no-multiple-space-atx  True               True               0.5.0
  md029  ol-prefix              False              False              0.0.0
  md039  no-space-in-links      False              False              0.0.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;now emitted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  md019  no-multiple-space-atx  True               True               0.5.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;unless the &lt;code&gt;--all&lt;/code&gt; flag was set.  By default, only those rules that were no longer in
development would be listed.  In my eyes, it just looked cleaner and more correct.&lt;/p&gt;
&lt;h2 id="setting-configuration-values-manually"&gt;Setting Configuration Values Manually&lt;a class="headerlink" href="#setting-configuration-values-manually" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the two small issues out of the way, it was time for me to focus on the large
issue.  The
definition of the issue itself was easy.  There already existed a good way to set
configuration values using the configuration files, as mentioned in my article on
the project’s new
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/"&gt;configuration system&lt;/a&gt;.
But for me, that was not enough.  I wanted to be able to set configuration values
directly from the command line.&lt;/p&gt;
&lt;h3 id="why"&gt;Why?&lt;a class="headerlink" href="#why" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I am starting to use any tool like the PyMarkdown linter, I usually need to
experiment with the configuration to get it dialed in the way I want it.  With tools that
only have a configuration file, I find that that process that I use to figure out
settings is inefficient.  That process involves a lot of repetitions of the following
tasks: look something up or consult the tool’s command line help, figure out
a variation that is close to how I want it, change the configuration file, save that file,
and run the tool to verify the new behavior.  The biggest issue I have with this process
is that I am
constantly switching contexts from one tool to another, figuring things out for the next
step.  The second biggest issue is that it is very easy to forget the “save that file”
step of the process.  I do that a lot!&lt;/p&gt;
&lt;p&gt;Then there are those few tools that I find both useful and efficient, like PyTest.  By
default,
PyTest reads its configuration from the &lt;code&gt;setup.cfg&lt;/code&gt; file.  However, any setting in the
tool can be overridden from the command line.  That one simple change made configuring
PyTest simple and easy.  Sure, I still had the consult, figure, and execute steps from
above, but I eliminated the change and save steps.  To make the PyMarkdown project easier
to configure for users, I wanted to adopt a similar style of interface: configuration
file for “tested” values and the command line for “experimental” values.&lt;/p&gt;
&lt;h3 id="figuring-out-requirements"&gt;Figuring Out Requirements&lt;a class="headerlink" href="#figuring-out-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first step in adopting a similar type of interface for the PyMarkdown project was to
take the time to figure out a solid set of requirements.  Specifying the property name
from the command line was the relatively easy part.  As I had used the &lt;code&gt;.&lt;/code&gt; character as a
property name separator character, there were a couple of easy combinations that I needed
to prevent against as they made no sense.  Then focusing in on each one of those property
parts, there was another set of requirements that arose from ensuring that each part was
consistent and valid. Adding the &lt;code&gt;=&lt;/code&gt; character to separate the property name from the
property value add a couple of small requirements, but nothing big.  For good measure,
I decided that whitespaces within the property name were going to be too much trouble,
so I added those characters to the list of illegal characters in a property name.&lt;/p&gt;
&lt;p&gt;Then there was the big design decision:  How to handle the property values?  At this
point, the configuration system itself can handle properties that are strings, integers,
and booleans.  Without any modifications, the command line flag &lt;code&gt;-set key=value&lt;/code&gt; can
handle only one type of property values: strings.  I needed to figure out a simple way
to allow for that one type to be extended to include the extra types supported by
the configuration system.  The question was how to do that in a way that made sense?&lt;/p&gt;
&lt;h3 id="research"&gt;Research&lt;a class="headerlink" href="#research" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A good subtitle for this section could be “Jack sits around and scribbles on paper like a
maniac for a week”.  Even if that is what it looked like, “Research” was a more precise
definition of what I was doing.  As readers of past articles might have picked up, I try
to always put my best work out there, so I go the extra distance to try and make the
right decisions for the right reasons.  This was no
different.  The problem that I was facing was that there were few good examples out there
to compare to.&lt;/p&gt;
&lt;p&gt;I do not blame other teams for taking the easy way out and making simple decisions.  If
you have a configuration system that is relatively simple, the design decisions that come
out of providing information to that system are also relatively simple.  When I
looked at other configuration systems and interfaces, most of what I found were
simple configuration systems.  If the tools went so far as to provide any additional
interfaces, those provided interfaces were also simple.  To be plain and concise, for a
lot of applications, only supporting a string type
is perfectly fine, so their configuration systems support that.  If any extra meaning is
to be imparted to that string, it is up to the developer to add that extra level of
meaning and handle any errors.&lt;/p&gt;
&lt;p&gt;The problem with that approach is that the PyMarkdown project does not have a simple
configuration system, it has a
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/#which-is-best-for-this-project"&gt;complex one&lt;/a&gt;.
As part of the design of the configuration system, it just made sense to have that system
understand the difference between the different types of data.  For me, to not support
that functionality would make the configuration system seem like it was half done.  But
now I knew that I had to come up with an equally easy solution for manually setting the
property values as I had for the rest of the configuration system.&lt;/p&gt;
&lt;p&gt;I tried many different alternatives that attempted to figure out the type of the string
without any explicit declarations being used.  But for every 95% of the cases that I was
able to get working well, the remaining 5% of the cases always seemed to sink the
approach.  One good example is the string &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt;.  Is it meant to be a string
or is it meant to be a boolean?  Similarly with the string &lt;code&gt;010&lt;/code&gt;.  Is it meant to be a
string or an integer?  If it is an integer, is it in decimal form or binary form?  While
I can make sense of when to translate or not, figuring out an algorithm to implicitly
make that same decision seemed pointless.  In addition, I did not want any required
translation to occur any later than it had to.  If that translation fails, I would rather
the translation failed fast, as soon as it could reasonably fail.&lt;/p&gt;
&lt;h3 id="where-did-i-land"&gt;Where Did I Land?&lt;a class="headerlink" href="#where-did-i-land" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Like many other features in this project, after spending a good amount of time trying to
do things the fancy way, I was able to find success in using the simple approach.  For
the configuration values, I decided that a string should only be interpreted as something
else if the user explicitly specifies so.  As I mentioned in the last section, I was able
to make sense of when to translate or not and I believe the user is also the best
entity to decide whether to translate or not.  Therefore,
I decided to use the &lt;code&gt;$&lt;/code&gt; character to start special handling of translation of the
configuration value to other types.&lt;/p&gt;
&lt;p&gt;Hopefully keeping it simple, if the configuration string is of the form &lt;code&gt;key=value&lt;/code&gt; or
&lt;code&gt;key=$$value&lt;/code&gt;, then the string &lt;code&gt;value&lt;/code&gt; is assigned to the property named &lt;code&gt;key&lt;/code&gt;.  If
that value needs to be an integer, then the form &lt;code&gt;key=$#value&lt;/code&gt; is used.  Similarly, if
that value needs to be a boolean, then the form &lt;code&gt;key=$!value&lt;/code&gt; is used.  Trying to keep
things simple, I figured that a decent percentage of the users will not have issues
identifying the &lt;code&gt;$&lt;/code&gt; character with a string, the &lt;code&gt;#&lt;/code&gt; with an integer, and the &lt;code&gt;!&lt;/code&gt; with
a boolean.  To further keep things simple, the integer can only be provided in the normal
base 10 notation (with a sign and leading zeros a sign if desired) and the boolean is set
to true if lowercase value equals the string &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After spending some time to enumerate all the different scenarios that I wanted to handle,
I felt good about the research.  The only thing I was concerned about were the boundary
cases, so I examine the algorithms again looking for any potential issues.  I felt mostly
silly for missing one of the boundary conditions, but I did find it before I started
coding, that was the important thing.  That boundary condition was to have a &lt;code&gt;$&lt;/code&gt;
character that was not followed by any other of the type characters.&lt;/p&gt;
&lt;p&gt;A couple of quick adjustments to the algorithm, and another check to make sure that I
did not miss any other boundary cases, and it was on to the implementation!&lt;/p&gt;
&lt;h3 id="implementation"&gt;Implementation&lt;a class="headerlink" href="#implementation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After all that research, I felt an extra sense of urgency to get this feature completed.
I do not regret taking almost six days to figure out the right decision for this feature,
but it was six days.  I wanted to get this feature completed so I could move on to the
next thing in the issues list.  Given the research from above, I already had more than
ten scenarios derived, so I coded each scenario into its own scenario test and
started to get to work coding the new &lt;code&gt;set_manual_property&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The first version of the new &lt;code&gt;set_manual_property&lt;/code&gt; function was simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;__assignment_operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"="&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_manual_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;equals_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;combined_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__assignment_operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;property_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;combined_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;equals_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;combined_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;equals_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__flat_property_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keeping things simple, my goal was to just get the first scenario tests with the simplest
scenario passing.  As such, the task was simply to split the string up into its
constituent parts and add it to the dictionary.  It was a simple start, but a good start.&lt;/p&gt;
&lt;h3 id="verifying-the-manual-property-string"&gt;Verifying The Manual Property String&lt;a class="headerlink" href="#verifying-the-manual-property-string" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the foundation in place, it was then time to start adding the layers.  The first
layer that i needed to add was to verify the form of the manual property string.  Where
possible, I strongly believe that a utility should provide as much information about
why something is wrong as is possible.  With that in mind, I created the first iteration
of the &lt;code&gt;verify_manual_property_form&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;verify_manual_property_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_verify&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_verify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Manual property form must be a string."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;equals_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string_to_verify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__assignment_operator&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;equals_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"Manual property key and value must be separated by the '=' character."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;string_to_verify&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was not much, but it was a good start.  This function was there to verify that the
entire string was a properly formed string, with good error messages if it was not.
With that accomplished, it was on to the next step.&lt;/p&gt;
&lt;h3 id="verifying-the-property-key"&gt;Verifying The Property Key&lt;a class="headerlink" href="#verifying-the-property-key" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next step was to extend the verification to verify that the property keys on the
left of the manual property string were validly formed.  This was easily done by adding
these two lines at the end of the &lt;code&gt;verify_manual_property_form&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;property_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string_to_verify&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;equals_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify_full_key_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that call to the new &lt;code&gt;verify_full_key_form&lt;/code&gt; function coded, it was time to implement
that function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;verify_full_key_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__separator&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__separator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Full property key must not start or end with the '{ApplicationProperties.__separator}' character."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;doubles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{ApplicationProperties.__separator}{ApplicationProperties.__separator}"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;doubles_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doubles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;doubles_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Full property key cannot contain multiples of the {ApplicationProperties.__separator} without any text between them."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like the previous function, this function takes a slice of the string to verify
and focuses on that slice.  For this function, that focus was on making sure that the
&lt;code&gt;property_key&lt;/code&gt; argument was validly formed.  This task broke down into two checks: does
the key start or end with the separator character and does the
key contain two separator characters in a row.  By focusing on these checks, the function
can then return the &lt;code&gt;property_key&lt;/code&gt; argument knowing that there are no cases of any part
of that property key that does not contain at least one character.&lt;/p&gt;
&lt;p&gt;And just like the last section, it was then on to the next, and in this case, last step.&lt;/p&gt;
&lt;h3 id="verifying-the-property-key-parts"&gt;Verifying The Property Key Parts&lt;a class="headerlink" href="#verifying-the-property-key-parts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the same way that I added to the call to the &lt;code&gt;verify_full_key_form&lt;/code&gt; function to the
&lt;code&gt;verify_manual_property_form&lt;/code&gt; function, I now added a call to the &lt;code&gt;verify_full_part_form&lt;/code&gt;
function to the &lt;code&gt;verify_full_key_form&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;split_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__separator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;split_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify_full_part_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Constricting the focus even further, it was now time to examine each part of the
&lt;code&gt;property_key&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;verify_full_part_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Given one part of a full key, verify that it is composed properly.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__assignment_operator&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Each part of the property key must not contain a whitespace character or the '{ApplicationProperties.__separator}' character."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"Each part of the property key must contain at least one character."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having eliminated all of the high-level checks, this function could then focus on the
task of ensuring that each part of the property key was validly formed.  That task was
then simply to check two things: that the part of the key did not contain a whitespace
character or the assignment character (&lt;code&gt;=&lt;/code&gt;), and that the part had at least one character
in it.  I will admit freely that the last check was probably overkill. I just felt better
adding it in for now, knowing that I could easily take it out once I proved it was not
needed.&lt;/p&gt;
&lt;p&gt;And with that done, I had the validation for the string passed to the
&lt;code&gt;set_manual_property&lt;/code&gt; function completed.&lt;/p&gt;
&lt;h3 id="why-did-i-do-it-this-way"&gt;Why Did I Do It This Way?&lt;a class="headerlink" href="#why-did-i-do-it-this-way" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One thing I have learned in the years I have been developing software is that it is
important to keep things simple.  If things are simple, they are easy to read.  If they
are easy to read, they are generally easy to debug.  By placing each level of
verification in its own function, I kept things small, concise, and simple. And
as an extra benefit, I could reuse those functions in other parts of the application
properties library!&lt;/p&gt;
&lt;p&gt;Having followed principles like “Keep It Simple”, I do get confused when I see people
trying to cram more than one responsibility into a given function.  Sometimes I can
understand how a single responsibility can organically grow into a pair of
responsibilities, but even in those cases will I try and refactor the code.  Anything
more than two
responsibilities and I wonder why the person who wrote or modified the code did not
refactor it.  From my point of view, the closer you keep the code to being simple
and having a single responsibility, the easier it is to maintain and the fewer bugs
I usually find in them.  Just my experience, but maybe others have a different
experience.&lt;/p&gt;
&lt;h3 id="adding-the-type-system"&gt;Adding The Type System&lt;a class="headerlink" href="#adding-the-type-system" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the changes in place to validate the form of the string and the key part of that
string, it was then time to add the type system I designed, as summarized in the section
&lt;a href="https://jackdewinter.github.io/2021/04/19/markdown-linter-road-to-initial-release-gearing-up-for-plugins/#where-did-i-land"&gt;Where Did I Land?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To add the type system, I started by defining the prefix values at the top of the
&lt;code&gt;ApplicationProperties&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;__manual_property_type_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"$"&lt;/span&gt;
    &lt;span class="n"&gt;__manual_property_type_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"$"&lt;/span&gt;
    &lt;span class="n"&gt;__manual_property_type_integer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"#"&lt;/span&gt;
    &lt;span class="n"&gt;__manual_property_type_boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"!"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, the next step was to explicitly look for the &lt;code&gt;__manual_property_type_prefix&lt;/code&gt;
character with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__manual_property_type_prefix&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This condition was simple to code.  Each of the special sequence starts with a &lt;code&gt;$&lt;/code&gt;
character and contains exactly 2 characters.  Therefore, if the &lt;code&gt;property_value&lt;/code&gt;
variable did not meet that criteria, there was no use taking those extra steps.&lt;/p&gt;
&lt;p&gt;From there, it was then on to adding the first of the types.  Since the string type was
the easiest, and probably going to be the most frequently accessed, it made sense to add
it at the start of the &lt;code&gt;if&lt;/code&gt; block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__manual_property_type_prefix&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__manual_property_type_string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replacing the &lt;code&gt;pass&lt;/code&gt; from the last example with the &lt;code&gt;if-else&lt;/code&gt; conditional, this
handling of the string type was easy.  Knowing that there were other types to come,
this was purposefully coded using an &lt;code&gt;if-else&lt;/code&gt; instead of a &lt;code&gt;trinary assignment&lt;/code&gt;.
At this point, there was either another &lt;code&gt;$&lt;/code&gt; character after the first &lt;code&gt;$&lt;/code&gt; character
or there was not.  In either case, the &lt;code&gt;property_value&lt;/code&gt; was modified to skip over those
characters, as the &lt;code&gt;property_value&lt;/code&gt; variable was already a string type and did not need
any modifications.&lt;/p&gt;
&lt;p&gt;That simplicity was then changed with the introduction of the boolean type.  As per the
design, this value gets assigned a &lt;code&gt;True&lt;/code&gt; value or a &lt;code&gt;False&lt;/code&gt; value based on whether the
lowercase value of the remaining string exactly equals &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__manual_property_type_boolean&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I went back and forth on whether to modify the check to include other values and
handling of whitespace, but I decided to keep it simple as designed. By keeping it
simple, it made it easier to explain and document: it is either &lt;code&gt;true&lt;/code&gt; or it is not.
And stripping whitespace seemed mostly pointless.  I guess someone could pass a
boolean argument with &lt;code&gt;true&lt;/code&gt; as the value.  But I just did not feel like that was
a path that I wanted to take.  So, I decided on no whitespace stripping and no
alternate values.&lt;/p&gt;
&lt;p&gt;Finally, it was time to handle the integer type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__manual_property_type_integer&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Manual property value '{property_value}' cannot be translated into an integer."&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This translation was a bit different than the boolean type in that it may throw an
exception if a bad value was passed for the integer.  I thought this was a useful
scenario and wanted to test it out to make sure it worked properly.  I can see myself
extending these translations in the future and knowing that the system can handle a
&lt;code&gt;ValueError&lt;/code&gt; being thrown is a good thing.&lt;/p&gt;
&lt;p&gt;With the final type wired up, all the scenario tests were all passing properly.  Looking
at the code coverage for the project, I noticed a couple of gaps in the coverage,
so I coded some extra scenarios to cover those gaps.  Other than that, everything was
working as planned.&lt;/p&gt;
&lt;h2 id="wiring-it-up-to-the-command-line"&gt;Wiring It Up To The Command Line&lt;a class="headerlink" href="#wiring-it-up-to-the-command-line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once I had the &lt;code&gt;set_manual_property&lt;/code&gt; function thoroughly tested, it was time to wire it
up to the command line and to get that working.  To do this, I added the following code
to incorporate the command into the base command line parser instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"--set"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"-s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"set_configuration"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"append"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"manualy set properties"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify_manual_property_form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, in the &lt;code&gt;__set_initial_state&lt;/code&gt; function, I simply passed the value collected
from the command line the &lt;code&gt;ApplicationProperties&lt;/code&gt; instance as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_manual_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is all it took. With that all done, I ran some basic tests, and everything went
fine.  Almost.  When
I decided to set multiple configuration items from the same command line, the &lt;code&gt;append&lt;/code&gt;
action from &lt;code&gt;argparse&lt;/code&gt; kicked in and the &lt;code&gt;combined_string&lt;/code&gt; arguments to the
&lt;code&gt;set_manual_property&lt;/code&gt; function was now an array of strings.  While I had thought about
it when I designed the &lt;code&gt;set_manual_property&lt;/code&gt; function, I did not think it would be an
issue and I guess wrong.  It was a simple omittance, and one that was easy to fix.&lt;/p&gt;
&lt;p&gt;The way that I saw it at the time was that I could either modify the existing function
to handle the “array of strings” case, or I could write a helper function that would
perform that same action, but under a different function name.  I played around with
splitting the functionality out into a new &lt;code&gt;set_manual_properties&lt;/code&gt; function but decided
against it.  With the determination to keep all the code in one place, I added this
block of code to the start of the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combined_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combined_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"Manual property form must either be a string or an iterable of strings."&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_manual_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There were a couple of cases here that I wanted to handle. I wanted to prevent execution
of the function for non-string arguments other than an iterable of strings.  Without
implementing &lt;code&gt;mypy&lt;/code&gt; and generics, the best I can do is to make sure that if the value
is not a string, then it is an iterable of some sort.  Then, when passing the individual
elements of the iterable instance to the &lt;code&gt;set_manual_property&lt;/code&gt; function, the function
itself can verify that those elements are strings or not.&lt;/p&gt;
&lt;p&gt;It was not perfect, but it was a good design and a faithful implementation.  With these
changes in place, I was looking forward to verifying that the existing rules were
up to date.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This block of work was both normal and humbling at the same time.  From my viewpoint,
this was just me looking at what needed to be cleaned up and getting it done.
That really does not change from project to project or task to task.  But finding
something that I really needed to take a lot of time to focus on and design right was a
bit of a shocker.&lt;/p&gt;
&lt;p&gt;I know I am not perfect.  Clear on that.  But I do my best to see what are my next tasks
and plan the design for those tasks in advance.  If I am going to make a
change to my backyard, I probably have thought about it for at least a month, talked to
at least four or five people about it, and sketched it out at least three or four times.
It’s not that I strive for perfection, I just like to understand the variables of the
task dealt with so I can focus on the implementation problems when I am working on the
task.&lt;/p&gt;
&lt;p&gt;When I started to think about what I needed for to handle types, I honestly thought I
would find plenty of examples that I could use to guide the modelling of my own system.
I was wrong.  It was because of that once omittance that I needed to dig deep and
figure things out on my own and weigh the good point and bad points myself.  To be
clear, it is not the work that I was upset about, but that I missed the need for that
work to be planned for.&lt;/p&gt;
&lt;p&gt;That was the humbling part.  But as I write this article, I am also starting to see it
in a different light.  Yeah, I missed a design point, and my ego was bruised a bit.
So what?  I kept to my principles and did the work to make sure I was making the right
decision.  Do I wish that I could have done that in the spare moments of working on
other stuff?  Sure… but I did not and did it anyway.&lt;/p&gt;
&lt;p&gt;As one of my professors once said to me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Principles aren’t things that you see clearly in the light.  It takes some form of darkness for you to see them for what they truly are.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With all that foundational work out of the way so I can focus on the implemented rules
plugins, I knew my next task was to start working through those plugins and verify that
they worked as advertised.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Creating A Package</title><link href="https://jackdewinter.github.io/2021/04/12/markdown-linter-road-to-initial-release-creating-a-package/" rel="alternate"></link><published>2021-04-12T00:00:00-07:00</published><updated>2021-04-12T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-04-12:/2021/04/12/markdown-linter-road-to-initial-release-creating-a-package/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/05/markdown-linter-road-to-initial-release-cleaning-up/"&gt;last article&lt;/a&gt;, I talked about
resolved the remaining Priority 1 items from the issues list.  In this article, I talk
about how I worked through the issue in creating an installable package for the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having invested a lot of time getting the PyMarkdown project to …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/05/markdown-linter-road-to-initial-release-cleaning-up/"&gt;last article&lt;/a&gt;, I talked about
resolved the remaining Priority 1 items from the issues list.  In this article, I talk
about how I worked through the issue in creating an installable package for the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having invested a lot of time getting the PyMarkdown project to a place where I feel
confident in creating an initial release of the project, it was now time for me to create
that release.  To be honest, I was not sure what to expect out of the Python setup
process.  Creating releases for other languages is usually done as an add-on to the
language, not part of the core language as Python does.  As such, I was genuinely
interested in how the process would differ between Python and the other languages I have
written installers for.&lt;/p&gt;
&lt;p&gt;Like everything else in this project, this was going to be a learning experience, and
I was eager to get underway!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/a335ca8974d4260d47b5cd592f8c20e90dda6048"&gt;01 Apr 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/937a1839e2a4695fbbd2b6e2f38c68994faf5c65"&gt;03 Apr 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="where-to-start"&gt;Where To Start?&lt;a class="headerlink" href="#where-to-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While the changes that I needed to perform on the project to get it from its then
state to a packaged state were small, the path to get there was anything but short.
Having done my usual research, I ended up finding three sources that I thought would
be helpful to my effort:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nrempel/python-package-boilerplate"&gt;Nicolas Rempel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/build-your-first-python-package/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.8/distutils/setupscript.html"&gt;Python’s Own Setup Script documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I liked Nicolas’ article on creating Python packages because it was the first article that
I found in my searches that seemed to lay everything out on the table.  It felt that it
provided me with a lot
of useful information in a concrete, easy to digest form.  While I did have a couple of
issues with his examples, I do believe that they were because I was trying to adapt his
example as I went and messed things up.  The FreeCodeCamp article was useful in filling
in the gaps that I found in Nicolas’ article, especially when it came to what to do after
you had a package.  Finally, having the Python 3.8 library documentation helped me fill
in the last bit of the knowledge that I needed to complete the setup process.  Together,
with just a dash of experimentation thrown in for good measure, I was confident that I
could create a Python package.  Even if that effort took a while.&lt;/p&gt;
&lt;h2 id="creating-a-new-setuppy"&gt;Creating a New Setup.py&lt;a class="headerlink" href="#creating-a-new-setuppy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have had a local &lt;code&gt;setup.py&lt;/code&gt; file on my machine for months, it was always something
that I was toying around with, nothing concrete.  As such, I found that it was more
efficient to start from scratch and
create a new &lt;code&gt;setup.py&lt;/code&gt; file based mostly on Nicolas’s article.  I do not have any
issues with his use of mainline function calls, such as the ones that he uses to read the
&lt;a href="https://github.com/nrempel/python-package-boilerplate/blob/master/setup.py"&gt;readme.md&lt;/a&gt;
file from the directory, but I prefer things in functions.  From my perspective, it just
helps me to keep things readable.  I did like the
way he was organizing some of the values at the start of the module and decided to
follow that approach.  Furthermore, I decided that it was more readable to have every
value in variables, instead of being somewhat hidden in the call to the &lt;code&gt;setup&lt;/code&gt; function,
so I also made that change.&lt;/p&gt;
&lt;h3 id="the-most-important-parts-of-setup"&gt;The Most Important Parts of Setup&lt;a class="headerlink" href="#the-most-important-parts-of-setup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For me, the four most important parts of any setup are: name of the package, version of
the package, minimum required platform, and a declaration of any dependencies. Others can
disagree with me on whether these things are the most important parts of any setup script,
but I believe I have a strong argument in my favor.  It is a simple argument: without
these four parts, the rest of the setup script is useless.  Any documentation without
something to document is pointless.  Similarly, any declaration of what needs to be
included in the package and how to access it are useless without that base declaration.
At least in my mind, those four properties are always the foundation of any installation
script.&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;setup.py&lt;/code&gt; module from the article Nicolas wrote as a good set of
&lt;a href="https://idioms.thefreedictionary.com/crib+note"&gt;crib notes&lt;/a&gt;,
I created a very basic module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;runpy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"PyMarkdown"&lt;/span&gt;
&lt;span class="n"&gt;SEMANTIC_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;MINIMUM_PYTHON_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"3.8.0"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_requirements&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;lineiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"install-requirements.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lineiter&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;version_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"./version.py"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"__version__"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PACKAGE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SEMANTIC_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;python_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;MINIMUM_PYTHON_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parse_requirements&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was not much, but it was a good start.  Both the package name and the minimum Python
version required are hardwired in as they are almost never going to change.  The function
&lt;code&gt;get_semantic_version&lt;/code&gt; was written to encompass the code from the article to fetch the
version number, and the &lt;code&gt;parse_requirements&lt;/code&gt; function was written to encompass the
requirements for the project.&lt;/p&gt;
&lt;p&gt;Since I decided to specify the installation requirements for the project in the file
&lt;code&gt;install-requirements.txt&lt;/code&gt;, I added a very simple version of this file with a single
line present:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Columnar
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="moving-version-information-into-a-single-module"&gt;Moving Version Information Into A Single Module&lt;a class="headerlink" href="#moving-version-information-into-a-single-module" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It took me a bit to warm up to this, but after reading
&lt;a href="https://www.python.org/dev/peps/pep-0396/"&gt;PEP 396&lt;/a&gt;,
it just made sense.  If there is any reason to know the exact version of a Python library,
the &lt;code&gt;__version__&lt;/code&gt; field applied to the library name should contain the definitive version
for that library.  Following this PEP just made sense but required some rearrangement of
code in the project.&lt;/p&gt;
&lt;p&gt;Previously, the only place where the version information was kept was in the
&lt;code&gt;__version_number&lt;/code&gt; field of the &lt;code&gt;PyMarkdownLint&lt;/code&gt; class.  While I debated an approach that
would leverage that existing code, the simplicity of simply having a single &lt;code&gt;version.py&lt;/code&gt;
file just made more sense to me.  With the &lt;code&gt;get_semantic_version&lt;/code&gt; function already present
in the &lt;code&gt;setup.py&lt;/code&gt; module, as detailed in the last section, I added the following code to
the &lt;code&gt;PyMarkdownLint&lt;/code&gt; class to reference that same file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vm"&gt;__file__&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;last_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;second_last_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;second_last_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"version.py"&lt;/span&gt;
        &lt;span class="n"&gt;version_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"__version__"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is effectively the same code as in the &lt;code&gt;get_semantic_version&lt;/code&gt; function of
the &lt;code&gt;setup.py&lt;/code&gt; module.  The only changes present were to deduce the executable path
from the &lt;code&gt;__file__&lt;/code&gt; variable
and to determine the relative location of the &lt;code&gt;version.py&lt;/code&gt; file from where that
executable is located.&lt;/p&gt;
&lt;p&gt;After all this work, the only thing that was needed was a new &lt;code&gt;version.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Library version information.&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0.5.0"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and a small change to the &lt;code&gt;test_markdown_with_dash_dash_version&lt;/code&gt; test function to fetch
the version from the &lt;code&gt;version.py&lt;/code&gt; module.&lt;/p&gt;
&lt;h3 id="adding-documentation"&gt;Adding Documentation&lt;a class="headerlink" href="#adding-documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With those basics out of the way, it was time to add the documentation basics to
the &lt;code&gt;setup.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_readme_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"README.md"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;readme_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;readme_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Jack De Winter"&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"jack.de.winter@outlook.com"&lt;/span&gt;

&lt;span class="n"&gt;ONE_LINE_DESCRIPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"A GitHub Flavored Markdown compliant Markdown linter."&lt;/span&gt;
&lt;span class="n"&gt;LONG_DESCRIPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_readme_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;LONG_DESCRIPTION_CONTENT_TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"text/markdown"&lt;/span&gt;
&lt;span class="n"&gt;KEYWORDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"markdown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"linter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"markdown linter"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;PROJECT_CLASSIFIERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"Development Status :: 4 - Beta"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"Programming Language :: Python :: 3.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"License :: OSI Approved :: MIT License"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"Operating System :: OS Independent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTHOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTHOR_EMAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ONE_LINE_DESCRIPTION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LONG_DESCRIPTION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description_content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LONG_DESCRIPTION_CONTENT_TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;KEYWORDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PROJECT_CLASSIFIERS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Most of these fields are self-explanatory and are simple string objects or lists of
string objects.   The
three fields that stand apart from that are the &lt;code&gt;LONG_DESCRIPTION&lt;/code&gt; field,
the &lt;code&gt;LONG_DESCRIPTION_CONTENT_TYPE&lt;/code&gt; field, and the &lt;code&gt;PROJECT_CLASSIFIERS&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;LONG_DESCRIPTION_CONTENT_TYPE&lt;/code&gt; field is the easiest of the three as it assumes that
the &lt;code&gt;README&lt;/code&gt; file for the project will always be &lt;code&gt;README.md&lt;/code&gt;.  As such, the MIME content
type for the long description will always be &lt;code&gt;text/markdown&lt;/code&gt;.  For my projects, I feel
that it is a good assumption to make, so that was an easy one to get out of the way. Then,
to ensure that the &lt;code&gt;LONG_DESCRIPTION&lt;/code&gt; field is always up to
date, the &lt;code&gt;load_readme_file&lt;/code&gt; function reads the contents of the &lt;code&gt;README.md&lt;/code&gt; file and places
them into the &lt;code&gt;LONG_DESCRIPTION&lt;/code&gt; field. For me,
these fields just make sense as I can contain a package description of the project and
the GitHub description of the project in one place.&lt;/p&gt;
&lt;p&gt;Finding the right values for the &lt;code&gt;PROJECT_CLASSIFIERS&lt;/code&gt; field was the tasks that I had the
hardest time with out of the three fields.  With a seemingly
&lt;a href="https://pypi.org/classifiers/"&gt;endless page&lt;/a&gt;
of available classifiers, it was hard to narrow down the classifiers to a small set.
While I am not comfortable that I have the right set of classifiers for the project,
I believe I have a good set to start with.&lt;/p&gt;
&lt;p&gt;Looking at that work, the one thing that I needed to do to wrap it up was to
make sure that the &lt;code&gt;README.md&lt;/code&gt; file only contained information I wanted someone to
see when they were having their initial look at the project.  While I do not want
to hide the project’s issues list, I did not want it to be the first thing people
saw.  As such, I moved it over into the new &lt;code&gt;issues.md&lt;/code&gt; file.&lt;/p&gt;
&lt;h3 id="rounding-out-the-setup-properties"&gt;Rounding Out The Setup Properties&lt;a class="headerlink" href="#rounding-out-the-setup-properties" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;According to my research, the only two other fields that I needed to add were the &lt;code&gt;scripts&lt;/code&gt;
field and the &lt;code&gt;packages&lt;/code&gt; field.  The &lt;code&gt;packages&lt;/code&gt; field was the easy one to define out of
those two: I simply needed to list all the packages for the project.&lt;sup id="fnref:duh"&gt;&lt;a class="footnote-ref" href="#fn:duh"&gt;1&lt;/a&gt;&lt;/sup&gt;  While both
examples use the &lt;code&gt;setuptools&lt;/code&gt; module and its &lt;code&gt;find_packages&lt;/code&gt; function, I wanted to
maintain fine-grained control over the packages.  As such, I specified each package name
separately.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ensure_scripts&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"scripts/pymarkdown"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"pymarkdown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"pymarkdown.extensions"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"pymarkdown.plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"pymarkdown.resources"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the specification on how to start the PyMarkdown application, it took me a while to
decide on an action to use for that.  During my research phase, I had three possibilities
for how to interact with the project itself: &lt;code&gt;py_modules&lt;/code&gt;, &lt;code&gt;scripts&lt;/code&gt;, and &lt;code&gt;entry_points&lt;/code&gt;.
There was barely any information on &lt;code&gt;entry_points&lt;/code&gt; and how to use them, so I decided to
not use those unless I found enough information to warrant changing to them.  Looking to
my third reference source, the Python libraries documentation, I found this article
on
&lt;a href="https://docs.python.org/3/distutils/setupscript.html#installing-scripts"&gt;setup scripts&lt;/a&gt;.
As that is what the standard libraries used, I decided that was the best way for this
project.&lt;/p&gt;
&lt;p&gt;Looking at the example that Nicolas provided in his article, I quickly created my
own script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

from pymarkdown import PyMarkdownLint
PyMarkdownLint.main&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but came across one glaring problem right away.  That script would work well on Linux
systems, but my development environment is a Windows machine.  As I use the &lt;code&gt;PyLint&lt;/code&gt;
scanner on all my Python projects, I decided to look at how they solved this problem,
and used their &lt;code&gt;ensure_scripts&lt;/code&gt; function verbatim&lt;sup id="fnref:since"&gt;&lt;a class="footnote-ref" href="#fn:since"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ensure_scripts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linux_scripts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Creates the proper script names required for each platform (taken from PyLint)&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_platform&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"win"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;linux_scripts&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;".bat"&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;linux_scripts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;linux_scripts&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is wonderful in its simplicity!  If the first three characters of the platform
are &lt;code&gt;win&lt;/code&gt;, then the function assumes that the list of scripts must refer to scripts
that will work on a Windows machine.  It accomplishes this by adding another
list of scripts to the list, this new list being comprised of every element of the
original list, but with a &lt;code&gt;.bat&lt;/code&gt; appended to the end.  With that, the last thing
was to copy the &lt;code&gt;.bat&lt;/code&gt; batch file format over from &lt;code&gt;PyLint&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; off
&lt;span class="c1"&gt;rem Use python to execute the python script having the same name as this batch&lt;/span&gt;
&lt;span class="c1"&gt;rem file, but without any extension, located in the same directory as this&lt;/span&gt;
&lt;span class="c1"&gt;rem batch file&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;%~dpn0&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nv"&gt;%*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I was not sure if that batch script was going to work, but if it was good enough for
PyLint, I figured it was a good enough starting place for me.&lt;/p&gt;
&lt;h3 id="almost-finished"&gt;Almost Finished&lt;a class="headerlink" href="#almost-finished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Two simple things were left before my first attempt to compile my first Python package.
The first thing was to add a simple &lt;code&gt;LICENSE.txt&lt;/code&gt; file to the project
to establish the use of the project.  The other was to add a &lt;code&gt;__init__.py&lt;/code&gt; module
to the &lt;code&gt;pymarkdown&lt;/code&gt; directory to make sure that the base of the project was considered
a module for setup to pick up.&lt;/p&gt;
&lt;p&gt;With those two things addressed and out of the way, it was time to compile the setup
for the project!&lt;/p&gt;
&lt;h2 id="the-fun-begins-getting-packaging-to-work"&gt;The Fun Begins: Getting Packaging To Work&lt;a class="headerlink" href="#the-fun-begins-getting-packaging-to-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To start compiling the setup, I included the &lt;code&gt;twine&lt;/code&gt; and &lt;code&gt;setuptools&lt;/code&gt; into my
development environment using &lt;code&gt;pipenv install twine setuptools&lt;/code&gt;.  Once that
was complete, I added the following &lt;code&gt;package.cmd&lt;/code&gt; script to the repository to make things
easier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;rmdir&lt;/span&gt; /s /q dist
&lt;span class="k"&gt;rmdir&lt;/span&gt; /s /q build
&lt;span class="k"&gt;rmdir&lt;/span&gt; /s /q PyMarkdown.egg-info

pipenv run python setup.py sdist bdist_wheel
pipenv run twine check dist/*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was nothing fancy, but it allowed me to repeatedly repackage the project to test
any changes in an efficient manner.  Basically, it removes any signs of a previous
build before running the &lt;code&gt;setup.py&lt;/code&gt; script and then the &lt;code&gt;twine&lt;/code&gt; script.  While it
is not as fancy as the Gradle scripts I have for Java projects at work, I found that it
is uncomplicated and works very well.  I purposefully did not add any error handling to
the batch script as I wanted to make sure I saw all the information that was reported,
unfiltered.&lt;/p&gt;
&lt;p&gt;To assist in testing those changes, I created a new project &lt;code&gt;pymtest&lt;/code&gt; at the same level
as the &lt;code&gt;PyMarkdown&lt;/code&gt; project and left it almost empty for now.  I created that project
to be my test installation environment, useful once I had a package to install.  For now,
I just wanted to get it ready for later.  Thus, I created a simple &lt;code&gt;refresh_package.cmd&lt;/code&gt;
script with these contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv uninstall PyMarkdown
pipenv install ..\pymarkdown\dist\PyMarkdown-0.5.0.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simply, uninstall any existing &lt;code&gt;PyMarkdown&lt;/code&gt; package and install a new one right from
the &lt;code&gt;dist&lt;/code&gt; directory of the &lt;code&gt;PyMarkdown&lt;/code&gt; project.&lt;/p&gt;
&lt;p&gt;Now on to the real work: debugging the install script.&lt;/p&gt;
&lt;h3 id="pass-1-getting-the-version-right"&gt;Pass 1: Getting The Version Right&lt;a class="headerlink" href="#pass-1-getting-the-version-right" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Executing the &lt;code&gt;package.cmd&lt;/code&gt; script, everything worked fine, and I had a new package to
test!  Switching over to my test project, I executed the &lt;code&gt;refresh_package.cmd&lt;/code&gt; batch
script… and waited.  Looking at the output, the &lt;code&gt;uninstall&lt;/code&gt; command was completing
in under a second, but the install command was taking its time on the Resolving
phase of installing the package.  It was agonizing!&lt;/p&gt;
&lt;p&gt;But when it was done, it displayed the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    ERROR: Command errored out with exit status 1:
...    
    FileNotFoundError: [Errno 2] No such file or directory: '..pip-req-build-mfg5j1bu\\version.py'
    ----------------------------------------
ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I tried a couple of different things with no luck before I opened the
&lt;code&gt;PyMarkdown-0.5.0.tar.gz&lt;/code&gt; archive file from the project’s &lt;code&gt;dist&lt;/code&gt; directory and examined
its contents.  When I did that, I noticed that there was no &lt;code&gt;version.py&lt;/code&gt; file anywhere in
the archive.&lt;/p&gt;
&lt;p&gt;At that point, I spent about an hour or so trying to figure out how to get that
&lt;code&gt;version.py&lt;/code&gt; file into the archive at the right place before deciding to go with a more
intuitive approach.  After looking
at how the files were installed after the &lt;code&gt;install pymarkdown&lt;/code&gt; command was completed,
it was obvious that my current approach would necessitate copying the &lt;code&gt;version.py&lt;/code&gt; file
into the &lt;code&gt;pymarkdown&lt;/code&gt; directory.  So, instead of trying to figure out how to do that
“complicated” action, I decided on the “simple” action to move the &lt;code&gt;version.py&lt;/code&gt; file
into the &lt;code&gt;pymarkdown&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;With that decision made, I rewrote the &lt;code&gt;get_semantic_version&lt;/code&gt; in the &lt;code&gt;setup.py&lt;/code&gt;
module as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;version_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"./pymarkdown/version.py"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"__version__"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also rewrote the &lt;code&gt;__get_semantic_version&lt;/code&gt; function in the &lt;code&gt;main.py&lt;/code&gt; module as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vm"&gt;__file__&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;last_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;last_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"version.py"&lt;/span&gt;
        &lt;span class="n"&gt;version_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"__version__"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the &lt;code&gt;version.py&lt;/code&gt; file moved into the &lt;code&gt;pymarkdown&lt;/code&gt; directory, and with both references
to that file now looking for it in the new location, that error was now resolved.&lt;/p&gt;
&lt;h3 id="pass-2-file-name-casing-matters"&gt;Pass 2: File Name Casing Matters&lt;a class="headerlink" href="#pass-2-file-name-casing-matters" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After packaging the project again, I ran the &lt;code&gt;refresh_package.cmd&lt;/code&gt; script and
was now greeted with this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FileNotFoundError: [Errno 2] No such file or directory: 'README.md'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I examined the directory structure of the archive a good four or five times without any
ideas coming to mind.  I even looked at the Python install pages to see if I could find
anything. But all I could find with a list of the
&lt;a href="https://docs.python.org/3.8/distutils/sourcedist.html?highlight=readme#specifying-the-files-to-distribute"&gt;files to distribute&lt;/a&gt;.
This included other types of readme files, but not specifically the &lt;code&gt;README.md&lt;/code&gt; file.
Double checking the project that Nicolas set up, I saw that he was using &lt;code&gt;README.md&lt;/code&gt; as
a source for his long documentation without any apparent extra setup needed to include
that file.  So, I figured it must be something else.&lt;/p&gt;
&lt;p&gt;That is when it hit me.  Windows has many uses as an operating system&lt;sup id="fnref:religious"&gt;&lt;a class="footnote-ref" href="#fn:religious"&gt;3&lt;/a&gt;&lt;/sup&gt;, but one
of the things I do not like about it is the case-insensitivity of the file system.  In
this case, I had called the readme file &lt;code&gt;readme.md&lt;/code&gt; instead of &lt;code&gt;READMD.md&lt;/code&gt;.  Simply
correcting the case of the file name resolved this issue.&lt;/p&gt;
&lt;p&gt;After a simple case of “cannot see the forest
&lt;a href="https://idioms.thefreedictionary.com/cannot+see+the+forest+for+the+trees"&gt;because of the trees&lt;/a&gt;”,
it was on to the next issue.&lt;/p&gt;
&lt;h3 id="pass-3-making-sure-the-right-files-are-included"&gt;Pass 3: Making Sure The Right Files Are Included&lt;a class="headerlink" href="#pass-3-making-sure-the-right-files-are-included" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This time, when I executed the &lt;code&gt;refresh_package.cmd&lt;/code&gt; script after repackaging the project,
I was greeted with this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FileNotFoundError: [Errno 2] No such file or directory: 'install-requirements.txt'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With some newfound experience under my belt, I immediately opened the archive and
found that the &lt;code&gt;install-requirements.txt&lt;/code&gt; file was not in the archive. Thankfully, in
looking for solutions for the last error, I came across a solution to include data
files into the setup process using a &lt;code&gt;MANIFEST.in&lt;/code&gt; file. Located in the same section where
I found the information detailing which files were
automatically included in the setup archive,
&lt;a href="https://docs.python.org/3.8/distutils/sourcedist.html?highlight=readme#specifying-the-files-to-distribute"&gt;that section&lt;/a&gt;
there is information on the &lt;code&gt;MANIFEST.in&lt;/code&gt; file near the end of that section.
Following those instructions, I was quickly able to create a new &lt;code&gt;MANIFEST.in&lt;/code&gt; file
with the following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include install-requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After a quick repackaging and reinstalling, this error was indeed solved.&lt;/p&gt;
&lt;h3 id="pass-4-lather-rinse-repeat"&gt;Pass 4: Lather, Rinse, Repeat&lt;a class="headerlink" href="#pass-4-lather-rinse-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While that file was now present in the archive, the new error was complaining about
a missing directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error: package directory 'pymarkdown\resources' does not exist
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main reason for this directory is to host the &lt;code&gt;entities.json&lt;/code&gt; file.  That file
contains each of the named entities, with the corresponding Unicode character they each
entity maps to.  I tried adding
an &lt;code&gt;__init__.py&lt;/code&gt; and other such workarounds to get the file included, but nothing worked.
Convinced that I had tried other approaches, I followed the same approach as the last
section, and added it to the &lt;code&gt;MANIFEST.in&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include pymarkdown/resources/entities.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I do not want to make it sound that I dislike the &lt;code&gt;MANIFEST.in&lt;/code&gt; approach to including files
in the setup archive.  I don’t.  But to me, it feels like that file is the last option to
include files, with all other options having been exhausted.  For me, that is my own
&lt;a href="https://idioms.thefreedictionary.com/sniff+test"&gt;sniff test&lt;/a&gt;
for whether the use of the &lt;code&gt;MANIFEST.in&lt;/code&gt; file is warranted. For example, I would rather
figure out that I need to change the &lt;code&gt;readme.md&lt;/code&gt; file into the &lt;code&gt;README.md&lt;/code&gt; file before I
thought about adding it to the &lt;code&gt;MANIFEST.in&lt;/code&gt; file.  In this case, I was convinced that
there was no other way to include the file, and as such, I had passed my own sniff test.&lt;/p&gt;
&lt;h3 id="and-it-was-done"&gt;And It Was Done&lt;a class="headerlink" href="#and-it-was-done" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With that change made, I was now seeing the refresh of the packaging complete without
any errors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installing ..\pymarkdown\dist\PyMarkdown-0.5.0.tar.gz...
Adding PyMarkdown to Pipfile's [packages]...
Installation Succeeded
Pipfile.lock (db4242) out of date, updating to (29513d)...
Locking [dev-packages] dependencies...
Locking [packages] dependencies...
 Locking...Building requirements...
Resolving dependencies...
Success!
Updated Pipfile.lock (29513d)!
Installing dependencies from Pipfile.lock (29513d)...
  ================================ 1/1 - 00:00:05
To activate this project's virtualenv, run pipenv shell.
Alternatively, run a command inside the virtualenv with pipenv run.
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="and-now-verifying-the-usage"&gt;And Now, Verifying The Usage&lt;a class="headerlink" href="#and-now-verifying-the-usage" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With everything looking good in the packaging and installation, the next step was
to test the usage of the newly installed library.  With optimism in my heart, I went to
execute my first test command, &lt;code&gt;pipenv run pymarkdown --help&lt;/code&gt;, and I waited.  After a good
couple of minutes, I killed the script, checked things again, and everything seemed fine.&lt;/p&gt;
&lt;p&gt;It seemed like I was not done debugging the setup process quite yet.&lt;/p&gt;
&lt;h3 id="pass-1-proper-script-files"&gt;Pass 1: Proper Script Files&lt;a class="headerlink" href="#pass-1-proper-script-files" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having “imported” the script files from the PyLint project, I hoped they would work
out of the box, but assumed that I would have to do some work to get them operational.
I liked the idea of calling the &lt;code&gt;pymarkdown&lt;/code&gt; script from the &lt;code&gt;pymarkdown.bat&lt;/code&gt; script,
but after 45 minutes and approximately 4 attempts at rewriting the scripts, I gave up.
Just like before, I decided to go with simplicity for both files, the &lt;code&gt;pymarkdown&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;
&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the &lt;code&gt;pymarkdown.bat&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;"from pymarkdown import PyMarkdownLint; PyMarkdownLint().main()"&lt;/span&gt; &lt;span class="o"&gt;%*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of having one script call the other, I opted for matching the contents of both
scripts as closely as possible.  In the shell version, the
&lt;a href="https://en.wikipedia.org/wiki/Shebang_(Unix)"&gt;shebang&lt;/a&gt;
at the start of script takes care of invoking Python and Python itself takes care
of the command line arguments.  In the batch script version, I needed to explicitly
call Python with the &lt;code&gt;-c&lt;/code&gt; argument to tell Python to execute the next argument as
a Python script.  Finally, the &lt;code&gt;$*&lt;/code&gt; at the end of that line causes any arguments passed
to the batch script to be passed to the Python program specified with the &lt;code&gt;-c&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;After a couple of tries, mostly due to small typing mistakes, when I executed the
command line &lt;code&gt;pipenv run pymarkdown --help&lt;/code&gt;, I was welcomed with the help documentation
for the project.  Success!&lt;/p&gt;
&lt;h3 id="pass-2-init-files"&gt;Pass 2:  Init Files&lt;a class="headerlink" href="#pass-2-init-files" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the batch
script issue in the last section resolved, the execution of the test command
&lt;code&gt;pipenv run pymarkdown --help&lt;/code&gt; now yielded this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
  File "&amp;lt;string&amp;gt;", line 1, in &amp;lt;module&amp;gt;
ImportError: cannot import name 'PyMarkdownLint' from 'pymarkdown' (C:\Users\jackd\.virtualenvs\pymtest-W-bOTTm6\lib\site-packages\pymarkdown\__init__.py)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perhaps it is my knowledge of other programming languages, but I favor direct imports
in the files that need them over the use of &lt;code&gt;__init__.py&lt;/code&gt; modules.  For me, it just
seems like overkill in 98% of the cases, leading to a hard-to-understand view of
dependencies between files.  In the case of creating a setup package, this
turned out to be one of the 2% cases that I had not come across yet.  &lt;/p&gt;
&lt;p&gt;But, seeing it as this was an obvious request for a proper &lt;code&gt;__init__.py&lt;/code&gt; module, I added
one to the &lt;code&gt;pymarkdown&lt;/code&gt; package with the contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown.main&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I do not use it in any of the other modules for the project, but it is there for the
&lt;code&gt;setup.py&lt;/code&gt; module and any others that need it.  As such, I can stay true to how I use
&lt;code&gt;import&lt;/code&gt; statements while providing the information that the setup scripts need.
For me, that is a win-win.&lt;/p&gt;
&lt;h2 id="pass-3-including-data-files"&gt;Pass 3:  Including Data Files&lt;a class="headerlink" href="#pass-3-including-data-files" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the &lt;code&gt;pipenv run pymarkdown --help&lt;/code&gt; command now running without any issues, I wanted
to include some more complex examples to test in the &lt;code&gt;refresh_package.cmd&lt;/code&gt; script.  To
that extent, I added the following lines to the end of that file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run pymarkdown plugins list
pipenv run pymarkdown plugins info md048
pipenv run pymarkdown plugins info md047
pipenv run pymarkdown scan ..\blog-content\website\content\articles
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going through the reinstall process with the new version of this script, the installation
and the first three commands all went off without any issues.  However, when it got to the
&lt;code&gt;scan&lt;/code&gt; command, the following error was emitted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BadTokenizationError encountered while initializing tokenizer:
Named character entity map file '..\lib\site-packages\pymarkdown\resources\entities.json' was not loaded ([Errno 2] No such file or directory: '..\\lib\\site-packages\\pymarkdown\\resources\\entities.json').
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going back to the useful
&lt;a href="https://docs.python.org/3.8/distutils/sourcedist.html?highlight=readme#specifying-the-files-to-distribute"&gt;files to distribute section&lt;/a&gt;,
I quickly noticed that one of the items in the list was labelled
&lt;a href="https://docs.python.org/3.8/distutils/setupscript.html#installing-additional-files"&gt;Installing Additional Files&lt;/a&gt;.
This seemed to fit the situation that I had before me exactly.  Reading the information
on the other side of that link, I knew what to do within a couple of minutes.  Within a
couple more minutes, I had this change coded up and inserted at the end of the &lt;code&gt;setup&lt;/code&gt;
function call in the &lt;code&gt;setup.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;data_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;'Lib/site-packages/pymarkdown/resources'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'pymarkdown/resources/entities.json'&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going through the entire process again, everything worked fine, and I was now done
with the test scenarios I had in mind.  I tried a handful of additional scenarios to
make sure I had them all covered, and each scenario worked as I expected it to. I
had a fully functioning install script!&lt;/p&gt;
&lt;h3 id="pass-31-cleanup"&gt;Pass 3.1: Cleanup&lt;a class="headerlink" href="#pass-31-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was not really a pass on its own, but a little bit of cleanup that I wanted to
do.  While looking at various other Python setup articles and library packages, I
decided to add three more arguments to the &lt;code&gt;setup&lt;/code&gt; function call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;maintainer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTHOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;maintainer_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTHOR_EMAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PROJECT_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since I am both the author and the maintainer, it just made sense to set the &lt;code&gt;maintainer&lt;/code&gt;
fields to the same values as with the &lt;code&gt;author&lt;/code&gt; fields.  I also wanted people to be able to
get more information on the project, so setting the &lt;code&gt;url&lt;/code&gt; field also made sense.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Based on my experience with other languages, creating an installation package for the
project in Python was a walk in the park.  There was no fancy extra packaging required,
everything was written in Python.  While it took me about four hours to make sure
everything was working properly, I would estimate that a similar installer for C# or
Java would easily take at least eight hours to get into a similarly finished form.
For me, that is a win.&lt;/p&gt;
&lt;p&gt;In general, I am very pleased with how this work went on getting the setup code into proper
shape.  There were some very good examples that I could lean on to get my code working,
and the starting points were all well-defined.  That made the distance I needed to travel
from sample code to working code very short,  which was very pleasant for once.  During
the creation of the setup script, I did notice a couple of extra things that I want to
clean up before the initial release.  But like before, they are all small and reasonable,
so I am confident I can make short work of them.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the setup packaging complete for now, I move on to simplifying the output from
some of the commands and starting to update the rules for the initial release.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:duh"&gt;
&lt;p&gt;I almost feel that a “duh?!” would be warranted here, but do not feel that it is appropriate. &lt;a class="footnote-backref" href="#fnref:duh" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:since"&gt;
&lt;p&gt;Since I took a look, someone refactored the setup code.  Please look at &lt;a href="https://github.com/PyCQA/pylint/commit/e8b44339a28630e087373416e4e725e454ed025f#diff-60f61ab7a8d1910d86d9fda2261620314edcae5894d5aaa236b821c7256badd7"&gt;this code&lt;/a&gt;, which is the code I cribbed from. &lt;a class="footnote-backref" href="#fnref:since" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:religious"&gt;
&lt;p&gt;This comment is not meant to start a religious war.  I firmly believe that there are many different jobs that need done, with some tools being the obvious choice for that job.  There are other jobs where the tools that can be used are more on personal preference combined with the job at hand.  For myself, operating systems are just that: tools. &lt;a class="footnote-backref" href="#fnref:religious" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Cleaning Up</title><link href="https://jackdewinter.github.io/2021/04/05/markdown-linter-road-to-initial-release-cleaning-up/" rel="alternate"></link><published>2021-04-05T00:00:00-07:00</published><updated>2021-04-05T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-04-05:/2021/04/05/markdown-linter-road-to-initial-release-cleaning-up/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/"&gt;last article&lt;/a&gt;, I talked about
how I integrated my configuration system into the PyMarkdown project, revamping the
command line interface along the way.  In this article, I talk about my efforts in
resolving the remaining Priority 1 items from the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At one point late …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/"&gt;last article&lt;/a&gt;, I talked about
how I integrated my configuration system into the PyMarkdown project, revamping the
command line interface along the way.  In this article, I talk about my efforts in
resolving the remaining Priority 1 items from the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At one point late last year, I was worried that I would never get to the point where
I would release the PyMarkdown project in some form.  It seemed that for every
item I resolved from the issues list, I added two more items.  It just looked like I
was never going to get to a point where I was comfortable with releasing the project.&lt;/p&gt;
&lt;p&gt;Things have changed a lot since last year.  While it is taking me longer to get to that
initial release point than I had hoped for, I know that I am very close to having a
solid first release of this project.  One of the best things I did
to help me work towards that point was to classify most of the issues list into one
of four categories.  And with only three items left in the Priority 1 section of that
list, it was time to deal with them and get that much closer to a solid release!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/7d5fd4f265d3bf33963c1cf3c91af7a001473a39"&gt;27 Mar 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/02c2f671fe397bba2d0e9cd89498570763f22895"&gt;28 Mar 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-was-this-cleanup-required"&gt;Why Was This Cleanup Required?&lt;a class="headerlink" href="#why-was-this-cleanup-required" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking through the issues list, I knew that most of the issues were in one of four
buckets of issues, numbered one to four.  There were a small handful of issues left
in the bucket labelled &lt;em&gt;“Priority 1 - Must Solve Before Initial”&lt;/em&gt;, and these were
important to me to get resolved before the initial release of the project.  But why?&lt;/p&gt;
&lt;p&gt;In categorizing the remaining issues into those buckets, any issues placed in the first
bucket were issues that either would drastically impede the project’s success or would
be too costly to fix later.   The remaining handful of issues in the Priority 1 section
were all issues that I consider to be breaking changes.&lt;/p&gt;
&lt;p&gt;From experience, breaking changes are painful.  A breaking change is any change to a
system that causes dependent systems to fail specifically due to that change.  These
changes usually happen when some part of the interface between systems is deleted or
changed, but it can also occur if a newly added part of the interface is required.
A great
example of a breaking change starts with a system allowing free-form user input for the
&lt;code&gt;id&lt;/code&gt; field of one of its objects.  If that system decided to modify that user input
process to mandate that any &lt;code&gt;id&lt;/code&gt; fields must be only alphabetic characters, that is
not enough for it to be a breaking change.  For it to be a breaking change, there needs
to be a dependent system that interfaces with that field, requiring that system to
change its understanding of that field to match the newly provided understanding. Until
such time as that understanding is fixed, the dependency between those two systems is
broken.&lt;/p&gt;
&lt;p&gt;These changes are painful for two main reasons.  The biggest reason is that the
interface between the two systems is changed in such a way that the old interface is
invalidated.  Therefore, one of the more frequently suggested mitigations for breaking
changes is to support a fixed number
of the old interfaces, say the last two interfaces, until such a time as there is
confidence that no other system is depending on that old interfaces.  If things are
done properly, the oldest of the supported interfaces can then be dropped with no
systems being dependent on it, therefore removing the “breaking” from a breaking change.&lt;/p&gt;
&lt;p&gt;That is where the other big reason comes in: communication.  Whether the strategy is
to “bite the bullet” and do everything at once or whether it is to support old interfaces,
that must be clearly communicated to other teams and other projects.  If not, everything
falls apart very quickly.  And please take it from me, that is where the wrong kind of
communication usually happens, with a lot of finger pointing and harsh words being thrown
around.  Unless careful attention and effort is made to clearly communicate what is going
to be done, when it is going to be done, and the work required of all teams, breaking
changes are just a source of pain that it is best to avoid.&lt;/p&gt;
&lt;p&gt;For each of the remaining Priority 1 issues, I wanted to change small things with tokens
and how their debug output is rendered.  If I waited until after I released the project,
I believe these changes would all qualify as breaking changes when people start to use
the project.  As these tokens are part of the foundation of the project, it would be
difficult to version them in any way that would make sense.  Therefore, I mandated
these changes as a requirement for the initial release.&lt;/p&gt;
&lt;h3 id="a-quick-note"&gt;A Quick Note&lt;a class="headerlink" href="#a-quick-note" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The PyMarkdown project uses its Markdown parser to translate Markdown into tokens, layering
a rules engine on top of those tokens emitted by the parser.  Unlike other
articles in this series, this article almost exclusively deals with tokens.  Therefore,
I believe that a rudimentary knowledge of tokens is required to understand this article.&lt;/p&gt;
&lt;p&gt;The base of every token is either the &lt;code&gt;MarkdownToken&lt;/code&gt; class or the &lt;code&gt;EndMarkdownToken&lt;/code&gt;
class.  The &lt;code&gt;MarkdownToken&lt;/code&gt; class itself contains the names of each of the different
tokens in a list of member variables at the top of the class.  When looking at the debug
output for a token, it is the open square bracket character &lt;code&gt;[&lt;/code&gt; and this name that
form the start of every token. For every &lt;code&gt;MarkdownToken&lt;/code&gt; instance and most instances of
&lt;code&gt;EndMarkdownToken&lt;/code&gt;&lt;sup id="fnref:whenNot"&gt;&lt;a class="footnote-ref" href="#fn:whenNot"&gt;1&lt;/a&gt;&lt;/sup&gt;, this information is followed by the line number and column
number where the area belonging to that token begins.  This is then followed by the
separator character &lt;code&gt;:&lt;/code&gt;, any extra token data, and the close square bracket character &lt;code&gt;]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A simple example of this is a simple Text token containing the words &lt;code&gt;baz&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;
separated by a newline character.  When parsed, the Text token &lt;code&gt;[text(1,1):baz\nbar::\n]&lt;/code&gt;
is emitted within the scope of a Paragraph token. Following the instructions above,
it reads that this a &lt;code&gt;text&lt;/code&gt; token that starts at line &lt;code&gt;1&lt;/code&gt; and column &lt;code&gt;1&lt;/code&gt;.
The extra data for this token starts with the text content &lt;code&gt;baz\nbar&lt;/code&gt;, followed by some
extra information regarding any whitespace encountered.&lt;/p&gt;
&lt;p&gt;As the extra data for each token varies from token to token, the extra token data part of
the debug output varies from token to token.  Where possible, I will try and call out what
is present in the tokens in the description of the information.  As the HTML output is
usually not concerned with whitespace characters, the most common start to the extra
token data section of the debug output usually deals with any whitespace that was
encountered.&lt;/p&gt;
&lt;h2 id="the-important-of-good-scenario-tests"&gt;The Important Of Good Scenario Tests&lt;a class="headerlink" href="#the-important-of-good-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I usually consider good unit tests and good scenario tests pivotal to any project,
they are even more important when refactoring code.  The group of tests for any
project present a logical description of how the project is supposed to behave under
a given set of circumstances.  Depending on the type of refactoring that is being done,
one of two types of expectations are desired.  If the refactoring only changes
internal components, then the expectation is that no tests will need to be changed.
For these changes, a small external change is the expected change, and if the refactoring
is successful, then only those small external changes should occur.&lt;/p&gt;
&lt;p&gt;I maintain a high level of code coverage and scenario coverage for the PyMarkdown project.
Because of this, I have the confidence to make these changes.  If anything breaks, I will
know about it right away, and not days later.  With that confidence in hand, it was time
to start making those changes.&lt;/p&gt;
&lt;h2 id="end-tokens"&gt;End Tokens&lt;a class="headerlink" href="#end-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first change that I wanted to tackle was something that sounded simple, but I
figured it was going to trickle down into many changes.  That change was to refine how the
&lt;code&gt;EndMarkdownToken&lt;/code&gt; was used, specifically with how it closed certain tokens.&lt;/p&gt;
&lt;p&gt;During my development of the PyMarkdown project, I made certain decisions based on
the information I had at the time.  One of the first decisions that I needed to make
revolved around the use of the &lt;code&gt;EndMarkdownToken&lt;/code&gt; token.  This token is used for
tokens that require some manner of manual close token to delineate the section being
specified.  One part of that token was an indicator &lt;code&gt;force_close&lt;/code&gt;, which indicates
whether one or more characters caused the section to be closed without force, or whether
the section was forced close without any characters.  It was that decision that I wanted
to take another look at.  Was it always necessary?&lt;/p&gt;
&lt;h3 id="the-research"&gt;The Research&lt;a class="headerlink" href="#the-research" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One week, as I was fixing an issue with the &lt;code&gt;EmphasisMarkdownToken&lt;/code&gt; tokens, I looked
at the &lt;code&gt;EndMarkdownToken&lt;/code&gt; output and wondered if I had made the right choice, those many
months
ago.  While I was sure that I had made the right decision at that time,
I was not sure that the information underlying that decision had changed enough
to invalidate that decision.  I needed to take a new look.&lt;/p&gt;
&lt;p&gt;To me, it just seemed wasteful and misleading to have a &lt;code&gt;force_close&lt;/code&gt; field that
was always set to &lt;code&gt;False&lt;/code&gt;.  It was correct to say that it was never forced close,
but it just seemed to me that it was extra information that could be conveyed in a better
form.&lt;/p&gt;
&lt;p&gt;Searching through the source code for &lt;code&gt;[end-emphasis&lt;/code&gt;, I searched the many results that
appeared and could not find one case where the found debug output indicated a forced
close.  This backed up my thoughts that always presenting that &lt;code&gt;force_close&lt;/code&gt; field
in the debug output was inefficient.  That information along with the over 100 results
that I found in my search led me to decide to make this change.  Without searching for
any other end tokens, I believe that making this change solely on the merits of the
end Emphasis token were enough.&lt;/p&gt;
&lt;h3 id="the-effort"&gt;The Effort&lt;a class="headerlink" href="#the-effort" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The fist change was an easy one.  To better understand things in the future, I
added a new &lt;code&gt;requires_end_token&lt;/code&gt; field to the token classes to define which tokens require
an end token to match their start token.  There was no external indication of this
change, it was just something to help me to define the characteristics of each type
of token.  To make use of this change, I added a new &lt;code&gt;assert&lt;/code&gt; call when a new
&lt;code&gt;EndMarkdownToken&lt;/code&gt; is created to confirm that the token type supports end tokens.&lt;/p&gt;
&lt;p&gt;It was the other change that I was dreading.  If I wanted to remove the &lt;code&gt;force_close&lt;/code&gt;
indication for any type of token that did not support it, I needed to know with
certainty that it would never be forced.  To do this, I added a new &lt;code&gt;can_force_close&lt;/code&gt;
field and property to track that property of the tokens.  Adding to the effort
started in the previous section, I also added another check in the &lt;code&gt;EndMarkdownToken&lt;/code&gt;
constructor to verify that if that flag was set, the &lt;code&gt;was_forced&lt;/code&gt; argument was never
set.  This left me with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requires_end_token&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Token '{start_markdown_token} does not require end token."&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;can_force_close&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;was_forced&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Token '{start_markdown_token}'s end token cannot be forced."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that in place, a small change to &lt;code&gt;__compose_data_field&lt;/code&gt; function was all that
was needed to effect the change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_markdown_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;can_force_close&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;field_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;was_forced&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was not the part I was dreading… that came next.&lt;/p&gt;
&lt;h3 id="the-cleanup"&gt;The Cleanup&lt;a class="headerlink" href="#the-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With all the foundational changes in place, it was time to activate that code.  To be
doubly sure, I again verified that the corresponding end token was always created with
&lt;code&gt;was_forced&lt;/code&gt; set to &lt;code&gt;False&lt;/code&gt; and set the new &lt;code&gt;can_force_close&lt;/code&gt; field to &lt;code&gt;False&lt;/code&gt;.
Running the scenario tests, I went through and fixed all the scenario tests that
were expecting the old format and corrected them to the new format.  That might
sound difficult, but it effectively was changing the expected output that
looked like &lt;code&gt;"[end-emphasis(1,8):::False]"&lt;/code&gt; into &lt;code&gt;"[end-emphasis(1,8)::]"&lt;/code&gt; for
each reference that occurred in a scenario test.&lt;/p&gt;
&lt;p&gt;Once those changes were fixed, I looked for other tokens that fell into this
category and discovered that this behavior was true for the &lt;code&gt;AtxHeadingMarkdownToken&lt;/code&gt;,
the &lt;code&gt;SetExtHeadingMarkdownToken&lt;/code&gt;, and the &lt;code&gt;LinkStartMarkdownToken&lt;/code&gt;.  One at a time,
I verified that the &lt;code&gt;EndMarkdownToken&lt;/code&gt; for those tokens were not being forced, and set
the &lt;code&gt;can_force_close&lt;/code&gt; arguments to &lt;code&gt;False&lt;/code&gt;.  From there it was lather, rinse, and repeat.
By the time I was done, I had changed the format more than 879 times in over 879 scenario
tests.&lt;/p&gt;
&lt;p&gt;That was about five hours of really mind-numbing work, but it was worth it. It just
looked cleaner to me. It was a good first step.&lt;/p&gt;
&lt;h2 id="fenced-code-blocks"&gt;Fenced Code Blocks&lt;a class="headerlink" href="#fenced-code-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the things that I never had time to research is why the Text tokens inside of
Fenced Code Blocks tokens did not coalesce like they did within other tokens.
And it was not all the time either, it was only part of the time.  With this issue, there
were two things that I wanted to accomplish.  The first was to figure out why it happened.
The second, depending on the answer of the first, was to fix it.  If I was going
to fix it, I was highly confident that it would require changes to the tokens.  So,
while it was not big enough to normally make my radar, if I was going to fix it, now was
the time while I was addressing other tokens.&lt;/p&gt;
&lt;h3 id="the-examples"&gt;The Examples&lt;a class="headerlink" href="#the-examples" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To illustrate this behavior, consider the Markdown string from the test function
&lt;code&gt;test_fenced_code_blocks_099f&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;source_markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""```&lt;/span&gt;

&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="se"&gt;\a\a&lt;/span&gt;&lt;span class="s2"&gt;abc&lt;/span&gt;
&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;

&lt;span class="s2"&gt;```"""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This test was created to test how blank lines and lines with text interact with each other
within a Fenced Code Block element.  Since this occurs within a Fenced Code Block, the
important thing to remember is that the translation to HTML must occur without losing
any data, including whitespaces.  As such, when it is tokenized, it tokenizes into the
following form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[fcode-block(1,1):`:3::::::]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK(2,1):]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK(3,1): ]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(4,3):abc:  ]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK(5,1): ]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK(6,1):]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-fcode-block::3:False]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This set of tokens generated for that Markdown starts and ends with generic Fenced Code
Block tokens.  Between those tokens are the Blank Line tokens representing each blank
line and the one Text token for the one non-blank line of text.&lt;/p&gt;
&lt;p&gt;For comparison, test function &lt;code&gt;test_fenced_code_blocks_099c&lt;/code&gt; starts with a line of text
and then is followed by blank lines until a final line of text and the closing fence:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;source_markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""```&lt;/span&gt;
&lt;span class="s2"&gt;z&lt;/span&gt;
&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="se"&gt;\a\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;z&lt;/span&gt;
&lt;span class="s2"&gt;```"""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is translated into the tokenized form of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    expected_tokens = [
        "[fcode-block(1,1):`:3::::::]",
        "[text(2,1):z\n\x03 \n\x03  \n\x03 \nz:]",
        "[end-fcode-block::3:False]",
    ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike the previous token output, the Text tokens and Blank Line tokens have all been
coalesced or combined into a single Text token.  In the debug output for this Text token,
the &lt;code&gt;\n&lt;/code&gt; sequence represents a newline character and the &lt;code&gt;\x03&lt;/code&gt; is used to separate the
removed whitespace from the start of the line from the removed whitespace at the end of
the line. While it is a dense form of the information, it provides every bit of
information needed to faithfully generate the HTML output for that Markdown sample.&lt;/p&gt;
&lt;p&gt;I sincerely believe that this single Text token format is easier to understand than the
alternative.  That alternative would be to use five tokens instead of one token; the
first and last tokens of that sequence would be Text tokens with the remaining three
tokens being Blank Line tokens.  While the single Text token is packed with information,
all the necessary information is contained within that one token, not spread out over five
tokens.  As such, I find that I do not need to try and remember what interactions occur
between the tokens as there is only the one token.  It is just there.&lt;/p&gt;
&lt;p&gt;But if this is the case, why didn’t the previous example also coalesce its tokens into
one token?&lt;/p&gt;
&lt;h3 id="the-research_1"&gt;The Research&lt;a class="headerlink" href="#the-research_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It did not take me that long to track the cause for this behavior down, and I was shocked
at how easy it was to fix.  Inside of the &lt;code&gt;coalesce_processor.py&lt;/code&gt; module, there is a loop
that looks for Text tokens and Blank Line tokens and sees if it can combine those tokens
into an already encountered Text token.  Basically, a Text token for &lt;code&gt;a&lt;/code&gt; followed by a
Text token for &lt;code&gt;b&lt;/code&gt; becomes a Text token for &lt;code&gt;a\nb&lt;/code&gt;.  Similarly, a Text token for &lt;code&gt;a&lt;/code&gt;
followed by a Blank Line Token becomes &lt;code&gt;a\n&lt;/code&gt;.  Of course, this is all without whitespace,
which changes those combinations a bit, but not by much.&lt;/p&gt;
&lt;p&gt;There are five Markdown elements that can contain Text tokens: the two paragraph-like
elements (Paragraph and SetExt Heading) and the three code block elements (Indented Code
Block, Fenced Code Block, and HTML Code Block).  Because of the way that they are parsed,
the two paragraph-like elements never start with a Blank Line token.  The paragraph-like
element is only started when actual text is presented, skipping over those blank lines.
The HTML Code Blocks elements are always started by a HTML tag and the Indented Code
Block element is always started by indented text.  That leaves the Fenced Code Block
element as the only element that can start with a Blank Line token.&lt;/p&gt;
&lt;h3 id="the-effort_1"&gt;The Effort&lt;a class="headerlink" href="#the-effort_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With that research under my belt, it was easy to determine the base change needed
to fix this issue.  The reason that the Text tokens and Blank Line tokens were not
coalescing was that there was no Text token to coalesce to.  The change was to add the
following code to the end of the loop in the &lt;code&gt;coalesce_text_blocks&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
                &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;coalesced_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;
            &lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;replacement_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TextMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;coalesced_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;replacement_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;did_process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code would only trigger for the scenarios in which the current element was a
Blank Line token and it was the first token inside of a code block.  In those cases,
it kicked off the coalesce process by creating an “empty” Text token that represented
the blank line.  With this new logic in place, the Markdown for function
&lt;code&gt;test_fenced_code_blocks_099f&lt;/code&gt; now parsed as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[fcode-block(1,1):`:3::::::]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(2,1):&lt;/span&gt;&lt;span class="se"&gt;\n\x03&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  abc&lt;/span&gt;&lt;span class="se"&gt;\n\x03&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n\x03&lt;/span&gt;&lt;span class="s2"&gt;:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-fcode-block::3:False]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="the-cleanup_1"&gt;The Cleanup&lt;a class="headerlink" href="#the-cleanup_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The cleanup for this change was not too bad.  The HTML transformer was simplified by
removing two lbocks of code, one from the &lt;code&gt;__handle_text_token&lt;/code&gt; function and the other
from the &lt;code&gt;__handle_blank_line_token&lt;/code&gt; function.  As Blank Line tokens no longer appeared
within Fenced Code Blocks, there was now no need for that processing. In addition,
the &lt;code&gt;__handle_end_fenced_code_block_token&lt;/code&gt; function required a similar change to remove
unused code, as well as a small change to add a newline character under certain specific
circumstances.  The Markdown transformer change was even simpler, requiring the
string modification at the end of the &lt;code&gt;transform&lt;/code&gt; function to be further restricted
in cases where the end Fenced Code Block token was forced.&lt;/p&gt;
&lt;p&gt;Other than those changes, the remaining changes were in the scenario tests that included
Fenced Code Blocks that began with a Blank Line.  Including new tests that were added
to round our scenarios, only 34 scenario tests needed to be adjusted.  I was lucky
with that change, only requiring changes for scenarios that specifically dealt with
Fenced Code Block elements beginning with a blank line.  It could have been a lot worse!&lt;/p&gt;
&lt;h2 id="hard-line-breaks"&gt;Hard Line Breaks&lt;a class="headerlink" href="#hard-line-breaks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This change is something that I have looked at on and off for around seven months.  For
whatever reason, when I added support for the Hard Line Break token, I added it
without capturing the newline that accompanies the hard line break inside of the token.
Instead, that newline was placed in the Text token that followed the Hard Line Break token.
Having recently made sure that Hard Line Break elements were being handled properly, I
was now even more convinced that the newline character should be with the Hard Line Break
token itself, not with the following token.&lt;/p&gt;
&lt;p&gt;The reason I had just looked at this before and taken no action to fix it was because of
the scope of this change.  There was no way that fixing this was not going to be a
breaking change.  I was moving a newline character from a following token back to the
current token, where it should have been from the start.  According to my estimates, it
was going to impact at least 20 tests outside of the tests for the Hard Line Break token
itself.  But, to avoid a breaking change later, it was better to incur the effort of
changing the code now.&lt;/p&gt;
&lt;h3 id="the-examples_1"&gt;The Examples&lt;a class="headerlink" href="#the-examples_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To illustrate this behavior, consider the Markdown string from the test function
&lt;code&gt;test_hard_line_breaks_655x&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;source_markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""foo&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;baz"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a simple example that illustrates how a single backslash at the end of the line
(shown in its Python form as a backslash escaped by a backslash) causes a Hard Line Break
token to be generated.  This in turn produces the tokens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[para(1,1):&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(1,1):foo:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[hard-break(1,4):&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(2,1):&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;baz::&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-para:::True]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If this does not look a bit weird, it should.  Usually, the newline character is contained
within the token that contains that newline character.  In this case, the newline character
for the Hard Line Break token is contained at the start of the following Text token.
I mean, it works, but it is not ideal.  Dealing with that weirdness caused me to have to
add extra bits of code to compensate for that behavior, as well as causing issues during
debugging.  It just did not work well for me.&lt;/p&gt;
&lt;p&gt;Ideally, what I wanted to see was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[para(1,1):&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(1,1):foo:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[hard-break(1,4):&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(2,1):baz:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-para:::True]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was just a matter of making the necessary changes to get there and undoing a lot of
the little changes made to compensate for it along the way.&lt;/p&gt;
&lt;h3 id="the-effort_2"&gt;The Effort&lt;a class="headerlink" href="#the-effort_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From a change point of view, the first two parts were the easy ones: changing the token
itself and changing the &lt;code&gt;__handle_hard_break_token&lt;/code&gt; function in the HTML transformer to
produce the correct output.  Starting from there, I expected a change would be required
in the &lt;code&gt;handle_line_end&lt;/code&gt; function, and I was correct.  For both forms of the token,
the &lt;code&gt;whitespace_to_add&lt;/code&gt; variable needed to be set to &lt;code&gt;None&lt;/code&gt; and the
&lt;code&gt;append_to_current_string&lt;/code&gt; variable needed to be set to &lt;code&gt;""&lt;/code&gt;.  This ensured that the
correct actions were taken at the end of that line.&lt;/p&gt;
&lt;p&gt;After some more debugging, a couple of lines were removed from the &lt;code&gt;__complete_inline_loop&lt;/code&gt;
function and the &lt;code&gt;__complete_inline_block_processing&lt;/code&gt; function as they were no longer
needed.  The Markdown transformer itself was mostly correct, requiring recombination with
any existing paragraph text to be taken care of in the &lt;code&gt;__rehydrate_hard_break&lt;/code&gt; function.
While not as simple, the &lt;code&gt;verify_line_and_column_numbers.py&lt;/code&gt; module required a series of
changes that were foreseeable, based on the changes that had already been made.&lt;/p&gt;
&lt;p&gt;One of the trickier things to debug in this area were the changes required for links and
images.  To get things working properly before this change, the
&lt;code&gt;__collect_text_from_blocks&lt;/code&gt; function and others like it had “funny” logic to deal with
the newline being in a separate token.  For the &lt;code&gt;__collect_text_from_blocks&lt;/code&gt; function,
I was lucky: I literally just needed to append a newline character to both the &lt;code&gt;text_parts&lt;/code&gt;
variable and the &lt;code&gt;text_raw_parts&lt;/code&gt; variable.   But in other cases, I had to remove code
that had worked before and replace it with code, often code that was aware of whether or
not it was captured inside of a link label.  That took a while to work through.&lt;/p&gt;
&lt;h3 id="setext-headings"&gt;SetExt Headings&lt;a class="headerlink" href="#setext-headings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The SetExt Heading token presented its own set of issues.  As that token is essentially
a Paragraph token followed by a special sequence, the inline processing had to be coded
differently than the paragraph handling.  With this change, all the fixes that corrected
for the Text token following a Hard Line Break token within a SetExt Heading token needed
to be removed.&lt;/p&gt;
&lt;p&gt;While there weren’t any big blocks of codes that had to be written, there was a lot of
moving code around and adding code to specifically handle the whitespace to be stored
near Hard Line Break tokens.  This occurred in three places within the
&lt;code&gt;__process_inline_text_block&lt;/code&gt; function and the only effective way to debug it was to
uncomment every &lt;code&gt;PLOGGER&lt;/code&gt; call within that function.  Small thing: I forgot to comment
them out again when I was done.&lt;/p&gt;
&lt;h3 id="the-cleanup_2"&gt;The Cleanup&lt;a class="headerlink" href="#the-cleanup_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Both the transformers were not that bad, as they are contained, but the consitency checks
were full of cases for handling the newline character in the following Text token that
had to be undone.  In all, 59 scenario tests were changed, and it took a lot of debugging
to remove the “fixes” that were previously added.   As a lot of those “fixes” only
impacted two or three scenario tests, I just had to work through each of those issues
and the ones that followed.&lt;/p&gt;
&lt;p&gt;But, as I have said with the previous two changes, those changes just looked right.
It just made sense to have the newline character for the Hard Line Break token with
the token itself.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I previously could not see my way to get here, I was now at the point where I had
zero Priority 1 items in the issues list.  I had to make some hard choices of what I needed
to have in the project for an initial release versus what I wanted to have for that
release.  But I made those choices and followed through to get to this point.  No
more Priority 1 items!&lt;/p&gt;
&lt;p&gt;And then that passed… but in a good way.  There were a couple of new items that
I knew I needed to add into that section, and I added them. Nothing major, but the
section had items again.  But knowing that I emptied that section was a big confidence
booster.  And knowing that I only added three small issues also helped:
a task to write documentation, to check that the existing rules were still valid,
and setting configuration properties from the command line.  These were tasks that I
knew would be achievable in a short amount of time.&lt;/p&gt;
&lt;p&gt;The big thing for me was to start getting the project out there with a solid initial
set of features, fixing up things in a following release as I worked on resolving issues.
From there I could start to get feedback, which would help me figure out how to
prioritize things going forward.&lt;/p&gt;
&lt;p&gt;It was just a good feeling knowing that I was getting close to a solid initial release
with an increased sense of confidence in the project.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I was sure that I was going to find a couple more things to add to the Priority
1 section of the issues list, it was currently empty.  As such, I wanted to devote the
next week to getting a first pass at the Python library setup code underway.&lt;/p&gt;
&lt;p&gt;Almost there!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:whenNot"&gt;
&lt;p&gt;The line number and column number are only present if the &lt;code&gt;EndMarkdownToken&lt;/code&gt; instance consumes one of more characters to create the &lt;code&gt;EndMarkdownToken&lt;/code&gt;.  For example, an Emphasis element requires matching opening and closing characters to delineate the emphasized text, so that instance of the &lt;code&gt;EndMarkdownToken&lt;/code&gt; shows the line number and column number.  Conversely, Indented Code Blocks are terminated when a new line of information does not begin with the required indentation, so that instance of the &lt;code&gt;EndMarkdownToken&lt;/code&gt; does not show either the line number nor the column number. &lt;a class="footnote-backref" href="#fnref:whenNot" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Command Lines</title><link href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/" rel="alternate"></link><published>2021-03-29T00:00:00-07:00</published><updated>2021-03-29T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-03-29:/2021/03/29/markdown-linter-road-to-initial-release-command-lines/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/"&gt;last article&lt;/a&gt;, I talked about
some of my requirements for configuration and how I applied those requirements to the
PyMarkdown project.  In this article, I talk about how I integrated that configuration
object more readily into the PyMarkdown project, revamping the command line interface to
match that …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/"&gt;last article&lt;/a&gt;, I talked about
some of my requirements for configuration and how I applied those requirements to the
PyMarkdown project.  In this article, I talk about how I integrated that configuration
object more readily into the PyMarkdown project, revamping the command line interface to
match that newly upgraded configuration object.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It might seem to others that I left the command line to last because I forget about it.
Nothing could be further from the truth.  For any kind of non-graphical
utility, the command line is the central hub from which the application gets executed in
various ways and forms.  Therefore, if the utility does not have the right command line
interface, it can seriously impact the usability of that application.  It is for that
exact reason that I usually add a “placeholder” command line interface during my
development phase, only adding the real interface when I have a solid idea of which
features have made it into the final version of the project.&lt;/p&gt;
&lt;p&gt;While that placeholder provides the access to the features that the project needs, it
often does them in a haphazard way.  Now, with everything else dropping into place, it was
time for
me to finalize how configuration was being applied to the project and to start thinking
seriously about what command line interface I wanted the project to have.  After all,
I am getting really close to having met my own requirements for an initial beta release!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/486c1cc77f828b710b2d15bb469e37a5dc032d6f"&gt;11 Mar 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/782433db8cd89f8be8b47825786a8a7552a768ff"&gt;25 Mar 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="wiring-up-the-new-properties-class-to-the-project"&gt;Wiring Up The New Properties Class To The Project&lt;a class="headerlink" href="#wiring-up-the-new-properties-class-to-the-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After the work detailed in my last article, the project now has a file-based configuration
via the &lt;code&gt;ApplicationProperties&lt;/code&gt; class that can handle the more complex needs
of the project.  While I did refer to the process of applying ordering to the different
sources of configuration in the section on
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/#ordering"&gt;Ordering&lt;/a&gt;,
I had not wired it up at that point.  I had added the code mentioned in that section as
a simple test of whether the process worked, but I had not yet added fully functional code
that followed that process to the project.  It was time to do that.&lt;/p&gt;
&lt;h3 id="logging"&gt;Logging&lt;a class="headerlink" href="#logging" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The obvious first choice for configuration to add to the project was logging.  It was also
the trickiest in a certain sense.  From the point at which the configuration was properly
initialized and the determination of the log file and log level is achieved,
everything works as everyone expects.
However, there is a slight amount of time between the start of the application and that
point where things are in a grey zone.  During that time, the loading of the configuration
file itself or determining the logging properties can log information themselves that may
be of use when debugging a scenario.  With those systems dependent on configuration that
was not yet initialized when I needed to debug those systems, I was left to hardwire
logging workarounds directly into the code. I wanted a better way to handle those debug
scenarios.&lt;/p&gt;
&lt;p&gt;Looking at what I had available to use, I decided to imply extra context for the command
line’s &lt;code&gt;--stack-trace&lt;/code&gt; flag.  Normally, my utilities use this flag to enable a mode
where an exception that stops the application displays the full stack trace of the
exception.  As
this flag defaults to disabled, the user just gets a simple message indicating
what the error is.  Most of the time, users do not care about where in the application
something broke down, they just want it to work.  If it is not working, they want to know
why and if they can fix it themselves.
However, when I look for root causes and I need to debug those issues, having a full
stack trace of how that error was generated is always helpful.  Following that logic, I
determined that the only time a user might need to debug the loading of the configuration
file is if they were debugging one of those scenarios that the &lt;code&gt;--stack-trace&lt;/code&gt; flag was
meant for.&lt;/p&gt;
&lt;p&gt;As such, I added some code at the front of the &lt;code&gt;main&lt;/code&gt; function to handle the setup for the
logging system, using the &lt;code&gt;--stack-trace&lt;/code&gt; flag in a useful manner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;base_logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;base_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ApplicationPropertiesJsonLoader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_and_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_error&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_log_level&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log_level_to_enact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available_log_maps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;effective_log_level&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To enable debug logging before the log level and log file are setup properly, the log
level is set to &lt;code&gt;DEBUG&lt;/code&gt; if the &lt;code&gt;--stack-trace&lt;/code&gt; is present and &lt;code&gt;WARNING&lt;/code&gt; otherwise.  Then,
the configuration file is loaded and the log level to use is calculated with the
appropriate final log level.  However, the important part of this is that I now have a
simple switch that allows me to debug the configuration initialization without resorting
to rewriting code.  That is a bonus I like!&lt;/p&gt;
&lt;p&gt;With that code in place, I removed the &lt;code&gt;__load_configuration_and_apply_to_plugins&lt;/code&gt; function
and the &lt;code&gt;load_json_configuration&lt;/code&gt; function. I replaced those functions with the new
&lt;code&gt;__apply_configuration_to_plugins&lt;/code&gt; function that performed most of the same functions.
The big change here was that instead of being passed a simple dictionary object, the
&lt;code&gt;apply_configuration&lt;/code&gt; function of the &lt;code&gt;PluginManager&lt;/code&gt; class was now being passed an
instance of the &lt;code&gt;ApplicationProperties&lt;/code&gt; class.  It was time to wire that up as well.&lt;/p&gt;
&lt;h3 id="plugin-manager"&gt;Plugin Manager&lt;a class="headerlink" href="#plugin-manager" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting with the &lt;code&gt;FoundPlugin&lt;/code&gt; class, I decided to make all those properties read-only by
making the fields private and exposing those fields using properties.  At the same time,
I renamed arguments for the constructor from &lt;code&gt;enable_rules&lt;/code&gt; and &lt;code&gt;disable_rules&lt;/code&gt; to
&lt;code&gt;enable_rules_from_command_line&lt;/code&gt; and &lt;code&gt;disable_rules_from_command_line&lt;/code&gt;.  While the old
names were okay, I wanted to make sure the source of their values were clearer.  I also
cleaned up the registration of the plugins to ensure that things were consistent. I
added the following regular expressions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;__id_regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"^[a-z]{2,3}[0-9]{3,3}$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;__name_regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to make the id field two or three lower case letters followed by three numbers and
limit the characters for the name field.  I figured that since I was there, I might as
well leave the code better than when I got there.&lt;/p&gt;
&lt;h3 id="changing-the-plugins"&gt;Changing The Plugins&lt;a class="headerlink" href="#changing-the-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After that cleanup, I proceeded to make the necessary changes to accompany
the changes made in the &lt;code&gt;main&lt;/code&gt; function.  As the &lt;code&gt;PluginManager&lt;/code&gt; instance is just a
container used to provide access to the various registered plugins, the instance itself
has no need for configuration.  This kept things simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_key_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_identifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_section_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{PluginManager.__plugin_prefix}{properties.separator}{next_key_name}{properties.separator}"&lt;/span&gt;
        &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ApplicationPropertiesFacade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plugin_section_title&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going through the list of identifiers for the plugin, the &lt;code&gt;PluginManager&lt;/code&gt; instance creates
a test instance of an &lt;code&gt;ApplicationPropertiesFacade&lt;/code&gt; object, initializing it with the
property string leading up to that point.  For the &lt;code&gt;md002&lt;/code&gt; plugin, if the id field is
used, the section title is &lt;code&gt;plugins.md002.&lt;/code&gt;, with similar titles for each of the
comma-separated values in the name field, &lt;code&gt;plugins.first-heading-h1.&lt;/code&gt; and
&lt;code&gt;plugins.first-header-h1.&lt;/code&gt;. Once created, if that test facade instance
reports that it has any properties, it is considered to be the best candidate, and any
other configuration for that plugin by its other names is ignored.&lt;sup id="fnref:yesIKnow"&gt;&lt;a class="footnote-ref" href="#fn:yesIKnow"&gt;1&lt;/a&gt;&lt;/sup&gt;  That best
candidate is then passed in to the plugin’s &lt;code&gt;set_configuration_map&lt;/code&gt; function, where it is
used by the &lt;code&gt;initialize_from_config&lt;/code&gt; function to set the actual configuration for that
plugin.&lt;/p&gt;
&lt;h3 id="the-fallout-from-those-changes"&gt;The Fallout From Those Changes&lt;a class="headerlink" href="#the-fallout-from-those-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a new type of object being passed for configuration, the plugins themselves required
other changes to work properly.
The first change that this required was changing every plugin to utilize the
&lt;code&gt;ApplicationPropertiesFacade&lt;/code&gt; instance that was now being passed in as an argument instead
of the old dictionary instance.  Using the changes for rule &lt;code&gt;md002&lt;/code&gt; as an example, the code
in the &lt;code&gt;initialize_from_config&lt;/code&gt; function changed from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_configuration_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_integer_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second change that happened was an appropriate change in test data.  Prior to this
change, the test configuration for the &lt;code&gt;md002&lt;/code&gt; plugin was usually&lt;sup id="fnref:usually"&gt;&lt;a class="footnote-ref" href="#fn:usually"&gt;2&lt;/a&gt;&lt;/sup&gt; presented
in the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"MD002"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To accommodate the addition of the &lt;code&gt;plugins&lt;/code&gt; namespace, each test configuration provided in
the &lt;code&gt;supplied_configuration&lt;/code&gt; variable needed to be changed to add that namespace, as
follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"md002"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With both changes in place, the only thing left was to hook up was the enabling
and disabling of plugins from the command line.  This change replaced the contents of
the &lt;code&gt;__determine_if_plugin_enabled&lt;/code&gt; function with the slightly more complicated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_identifier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plugin_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_identifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_identifier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;command_line_disabled_rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_identifier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plugin_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_identifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_identifier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;command_line_enabled_rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the entrance into the &lt;code&gt;__determine_if_plugin_enabled&lt;/code&gt; function, the &lt;code&gt;plugin_enabled&lt;/code&gt;
argument is already
set to its default value.  As such, this function only needs to determine if there is an
override to use and to apply that override.  This function was changed to treat both the
id field
and each comma-separated value of the name field as equal in terms of being identifiers.
While this initially only
applied to the name of the configuration section in the JSON file, it made sense to use it
here as well.  In this case, if any of those identifiers are found in the
&lt;code&gt;command_line_disabled_rules&lt;/code&gt; set, the plugin is disabled.  If no matches are found in
the disabled set, the same process is repeated for the &lt;code&gt;command_line_enabled_rules&lt;/code&gt; set.
Only if a matching value is found in one of those sets is the &lt;code&gt;plugin_enabled&lt;/code&gt; variable
overridden with the new value.&lt;/p&gt;
&lt;p&gt;To me, this just made sense.  If a user prefers to disable a rule using its id, they can
do that.  If a user prefers to enable a rule using one of its names, they can also do that.
That flexibility appealed to me, and I hope it appeals to users.&lt;/p&gt;
&lt;h3 id="testing"&gt;Testing&lt;a class="headerlink" href="#testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hopefully, any readers of my website should know that I use test driven as my main process
of writing quality code.  Given that process, I added the new tests as I went and before
adding the functionality required to complete those tests.
While it was a bit more difficult to do with all these changes going on, it was pivotal
to the way in which I work.  And it was because of that process that I remembered an
imbalance that I had put off until somewhere near this point in the project.  I had done a
lot of work on configuration files, but almost none on command line configuration.&lt;/p&gt;
&lt;h2 id="what-about-the-command-line"&gt;What About The Command Line?&lt;a class="headerlink" href="#what-about-the-command-line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the &lt;code&gt;ApplicationProperties&lt;/code&gt; mechanism wired into the project, it was time to tackle
the other part of that mechanism: the command line.  Up to this point, I had a command
line interface to the project, but it was a command line that was put in place by default.
I never sat down and thought about what style of command line interface I wanted
for the project, and really thought through it.  It was time to do that.&lt;/p&gt;
&lt;h3 id="which-way-to-go"&gt;Which Way To Go?&lt;a class="headerlink" href="#which-way-to-go" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using various utilities on my system, I found a handful of different styles of interacting
with the user on the command line.  But the one that really stuck with me is what I refer
to as the “Git” style of command line organization.  Similar to my discussion in my last
article on
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/#ordering"&gt;complex configuration&lt;/a&gt;,
this style of command line organization is complex.  This style is built of building
blocks of commands and options, allowing more complex command lines to be constructed.&lt;/p&gt;
&lt;p&gt;For example, take this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="c1"&gt;--long setup.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main part of the command is the &lt;code&gt;git&lt;/code&gt; at the start of the line.  The &lt;code&gt;-c ab=cd&lt;/code&gt; part
of that line is a modifier to that &lt;code&gt;git&lt;/code&gt; command.  Following that, the &lt;code&gt;status&lt;/code&gt; part of
that line specifies the status subcommand, which in turn has its own modifier &lt;code&gt;--long&lt;/code&gt;
to alter how that status subcommand is presented.  Finally, the text &lt;code&gt;setup.py&lt;/code&gt; is
another modifier to the subcommand, asking that only information for the file &lt;code&gt;setup.py&lt;/code&gt;
be provided.&lt;/p&gt;
&lt;p&gt;To me, this makes very good sense for the PyMarkdown project and the command line interface
that I want for it.  While the main “scanning” workflow will be the most used workflow,
there are other workflows that I want to expose to allow users to find out information
about the results of the scan.  The one that came immediately to mind was being able to
show the user more information about the installed plugins.  As such, a simple version of
the command line interface would not work.  I needed a command line interface that
supported the “scanning” workflow as well as the “show information about plugins” workflow.&lt;/p&gt;
&lt;p&gt;To be clear, this type of a command line interface is not required for every project
that I do, but it was required for this one.  This interface was complex enough to have
to support multiple workflows, which in turn made this command line processing complex,
just like the configuration.&lt;/p&gt;
&lt;h3 id="wiring-up-subcommands"&gt;Wiring Up Subcommands&lt;a class="headerlink" href="#wiring-up-subcommands" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once I had that figured out, it was time to go to work.  When I took my initial look
at the &lt;code&gt;__parse_arguments&lt;/code&gt; function, I was afraid that I was going to have to rewrite
the entire function. However, on a closer look, I discovered that it was going to be
more of a reorganization than a rewrite.  Except for the &lt;code&gt;--version&lt;/code&gt; option
and the &lt;code&gt;--list-files&lt;/code&gt; options, the options were all still valid for the application
itself.  It was once those options were added to the &lt;code&gt;argparse&lt;/code&gt; object that things
changed.&lt;/p&gt;
&lt;p&gt;To handle this kind of scenario, the &lt;code&gt;argparse&lt;/code&gt; object handles subcommands by using
subparsers.  So, to add a subcommand to handle the &lt;code&gt;scan&lt;/code&gt; workflow, I used the
following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;subparsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subparsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"primary_subparser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subparsers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"scan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"scan the Markdown files in the specified paths"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once I had that subparser created, I added the rest of the arguments that were specific to
that subcommand:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"-l"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"--list-files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"list_files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"list the markdown files found and exit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"One or more paths to scan for eligible files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"one or more paths to scan for eligible Markdown files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this subcommand, the &lt;code&gt;--list-files&lt;/code&gt; option that was removed from the base &lt;code&gt;argparse&lt;/code&gt;
parser was placed under the &lt;code&gt;scan&lt;/code&gt; subparser along with the &lt;code&gt;paths&lt;/code&gt; variable to hold
the paths of Markdown files to scan.  The &lt;code&gt;plugins&lt;/code&gt; subcommand was added in the
same manner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subparsers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"plugin commands"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"-p"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"--list-plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"list_plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"list the available plugins and exit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"one or more paths to scan for eligible Markdown files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, to implement the &lt;code&gt;--version&lt;/code&gt; option (which was really a subcommand disguised
as an option in the previous version of the command line interface), a subcommand was
added for it as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;subparsers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"version of the application"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With all those options in place, I executed the application from the command line and
noticed that I needed to do a bit more work myself now that I was using subcommands.
I needed to handle the case where no subcommands were present as well
as handling the &lt;code&gt;version&lt;/code&gt; subcommand.  After a bit of experimentation, I came up with the
following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;parse_arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primary_subparser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;parse_arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frodo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{self.__version_number}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parse_arguments&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Back in the &lt;code&gt;main&lt;/code&gt; function, implementing the &lt;code&gt;scan&lt;/code&gt; and &lt;code&gt;plugins&lt;/code&gt; subcommands were easy.
As all other subcommands were taken care of, so adding the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primary_subparser&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'plugins'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_plugins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plugins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_argparse_subparser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;allowed me to redirect the &lt;code&gt;plugins&lt;/code&gt; workflow to the &lt;code&gt;PluginManager&lt;/code&gt; class.  If the
program’s flow was not redirected at that point, the &lt;code&gt;scan&lt;/code&gt; workflow would execute by
default.&lt;/p&gt;
&lt;p&gt;With the command line now organized in a more orderly fashion, it was time to clean up
the use of those workflows.&lt;/p&gt;
&lt;h3 id="revisiting-logging"&gt;Revisiting Logging&lt;a class="headerlink" href="#revisiting-logging" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/#ordering"&gt;Ordering section&lt;/a&gt;
of my last article, I provided an example of how ordering was important when considering
how to apply configuration to a project.  Specifically, that code snippet was from the
following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__initialize_logging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;new_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;effective_log_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_file&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"log.file"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;new_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"log.level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level_type&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_log_level&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To keep things neat, I moved any of the logging related initialization code into one of
two functions, &lt;code&gt;__set_initial_state&lt;/code&gt; and &lt;code&gt;__initialize_logging&lt;/code&gt;.  The &lt;code&gt;__set_initial_state&lt;/code&gt;
function simply took the initial logger settings and loading of the configuration file
data and placed it under a much simpler function to read.  The &lt;code&gt;__initialize_logging&lt;/code&gt;
function was where all the interesting log initialization really happened, working out
what the actual values to be used were.&lt;/p&gt;
&lt;p&gt;This new function followed the process that I had outlined in my last article.  For both
the log level and the log file settings, there are command line and configuration file
settings for both settings.  In both cases, the command line is processed first, followed
by the configuration property, followed by any system default.&lt;/p&gt;
&lt;p&gt;Looking at these values and their sources after I completed them, they just looked right.
More than that, they looked usable.  If no configuration was provided, there were
defaults.  If a configuration was provided, any supplied values would be taken from
there, if they were present.&lt;/p&gt;
&lt;h3 id="fixing-an-old-issue"&gt;Fixing An Old Issue&lt;a class="headerlink" href="#fixing-an-old-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Back in the section titled
&lt;a href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/#changing-the-plugins"&gt;Changing The Plugins&lt;/a&gt;,
I presented something that was just a little off.  I presented it that way because at the
time that I wrote that code, it looked right and was passing every existing test.  It was
only at this point, when I was more thoroughly testing the &lt;code&gt;PluginManager&lt;/code&gt; configuration
that I noticed that the first &lt;code&gt;ApplicationPropertiesFacade&lt;/code&gt; tried was always being
selected.&lt;/p&gt;
&lt;p&gt;Yeah, I needed to fix that.  The first thing I did was to thin out that for loop and
move most of that code into a new &lt;code&gt;__find_configuration_for_plugin&lt;/code&gt; function.  That
changed the relevant code to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enabled_plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__find_configuration_for_plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;always_return_facade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__find_configuration_for_plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;always_return_facade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;first_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_key_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_identifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_section_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{PluginManager.__plugin_prefix}{properties.separator}{next_key_name}{properties.separator}"&lt;/span&gt;
        &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ApplicationPropertiesFacade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plugin_section_title&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;first_facade&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;first_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;property_names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;always_return_facade&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_facade&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, two small changes were required to fix this function.  The first change was
to fix the problem of the first facade always being selected.  This was accomplished
by adding the &lt;code&gt;property_names&lt;/code&gt; function to the facade and checking to see if at least
one property was found.  If one property was found, then the initial intention of the
search was satisfied, and a configuration entry was found.  This is what I had intended
to do with the initial implementation, so it felt good to correct this issue.&lt;/p&gt;
&lt;p&gt;But that caused another issue to manifest, one that was never an issue before the first
issue was fixed: what if no configuration values were ever found? As there are cases
where the application needs to know nothing was found and cases where it just wants
some default behavior, I added the &lt;code&gt;always_return_facade&lt;/code&gt; argument.  With this argument
set to &lt;code&gt;True&lt;/code&gt;, the first facade is returned instead of a &lt;code&gt;None&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;With that part of the configuration fixed, it was now time to add the &lt;code&gt;plugin&lt;/code&gt; workflow.&lt;/p&gt;
&lt;h3 id="boring-support-for-plugins"&gt;Boring Support For Plugins&lt;a class="headerlink" href="#boring-support-for-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the main reasons that I added a complex command line interface was to support
multiple workflows.  As I felt that the &lt;code&gt;scan&lt;/code&gt; workflow was now developed enough to
test, it was time to implement the &lt;code&gt;plugins&lt;/code&gt; workflow.  In my design for this workflow,
I wanted to support a listing of all plugins and summary information, as well as more
focused information for a specific plugin.  Much like how I added the &lt;code&gt;scan&lt;/code&gt; and
&lt;code&gt;plugins&lt;/code&gt; subparsers to the main &lt;code&gt;argparse&lt;/code&gt; instance, I added the &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;info&lt;/code&gt;
subparsers to the &lt;code&gt;plugins&lt;/code&gt; subparser.&lt;/p&gt;
&lt;p&gt;From there, it was just a matter of handing off control at the right spot to each
of those processors, as such:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_argparse_subparser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Handle the parsing for this subparser.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;subparser_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PluginManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__root_subparser_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;subparser_value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"list"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_argparse_subparser_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;subparser_value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"info"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_argparse_subparser_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;PluginManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__argparse_subparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;return_code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So why did I start the title for this section with the word “Boring”?  It is because
once I added subparsers on the main &lt;code&gt;argparse&lt;/code&gt; instance, this was just copying that
pattern and pasting it to the &lt;code&gt;plugins&lt;/code&gt; subparser.  The &lt;code&gt;list&lt;/code&gt; subcommand was a simple loop
through
all available plugins and adding values to a string to display.  The &lt;code&gt;info&lt;/code&gt; command
was just locating a given plugin and displaying the information for it.  After the
rest of things that have been added to this project, that was quite boring.  Necessary,
but boring.&lt;/p&gt;
&lt;h3 id="almost-boring"&gt;Almost Boring&lt;a class="headerlink" href="#almost-boring" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Two exceptions did stand out though.  The first one was the use of the &lt;code&gt;Columnar&lt;/code&gt;
library for output.  This library is very effective in determining how much screen
real estate the application has, and sizing columns to fit that screen size. That
was very useful, instead of having to create that functionality myself.&lt;/p&gt;
&lt;p&gt;The second exception was to mimic the results of the &lt;code&gt;glob&lt;/code&gt; library to work on
in-memory strings.  Given a command line of &lt;code&gt;pymarkdown plugins list plugin-id&lt;/code&gt;, it
should be obvious that only the plugin with the id or name &lt;code&gt;plugin-id&lt;/code&gt; should be
listed.  But what about the command line &lt;code&gt;pymarkdown plugins list md??9&lt;/code&gt;?  If the
strings were filenames, then the plugins that started with &lt;code&gt;md&lt;/code&gt;, contained two
more arbitrary characters, and finally the digit &lt;code&gt;9&lt;/code&gt; would match.  Why could I not
do that with plugins and their identifiers?&lt;/p&gt;
&lt;p&gt;Thankfully, due to my earlier work to reduce the allowable text for plugin ids and plugin
names to a smaller subset of values, this effort was made easier.  As I did not
have to worry about the &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; characters appearing natively in the strings that
I was looking at, the regular expression to satisfy my required glob functionality was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;list_re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"^"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;".*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"$"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For those readers not familiar with regular expressions, the &lt;code&gt;^&lt;/code&gt; at the start of the
expression and the &lt;code&gt;$&lt;/code&gt; at the end of the expression are anchors.  Together these specify
that the expression inside of those characters must match the entire string, not just
being found somewhere inside of the string.  For the rest of the expression, I used the
&lt;code&gt;.&lt;/code&gt; character in two forms.  As the &lt;code&gt;.&lt;/code&gt; character represents any single character in
the expression, it was a perfect match for the &lt;code&gt;?&lt;/code&gt; glob character.  As an extension of
that, the &lt;code&gt;*&lt;/code&gt; glob character represents any number of arbitrary characters.  To match
that in the expression, the sequence &lt;code&gt;.*&lt;/code&gt; matches zero or more instances of any character.&lt;/p&gt;
&lt;p&gt;After satisfying all the scenario tests I had written, and adjusting output to match
the columnar output, the &lt;code&gt;plugins&lt;/code&gt; subcommand tests were all passing.  Things were good
with those scenario tests.  I now had to expand my scope to all the scenario tests in
the project.&lt;/p&gt;
&lt;h3 id="altered-tests"&gt;Altered Tests&lt;a class="headerlink" href="#altered-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When the change was made to the command line, I expected most of the existing scenario
tests that deal with the command line to fail, and I was not disappointed.  For most of
the existing tests, I just needed to add the &lt;code&gt;scan&lt;/code&gt; keyword to the right position in the
arguments list, as that was the workflow that already had tests before this point.  I
stopped counting those changes after I passed the count of 20.&lt;/p&gt;
&lt;p&gt;But it was a very useful task.  As I progressed through the tests, I was able to see
how specifying the workflow or subcommand was enhancing the tests. It just gave each
test a bit more context that I felt was missing before.  I was able to find a couple
of small issues that I would have otherwise missed because of the organization.&lt;/p&gt;
&lt;p&gt;To be blunt, between the command line changes and tests to cover them, it just felt
like the project was that much more complete.&lt;/p&gt;
&lt;h3 id="lather-rinse-repeat"&gt;Lather, Rinse, Repeat&lt;a class="headerlink" href="#lather-rinse-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After all that work, there were little things there that I needed to work on.  I
disliked how some of the code was organized, so I went back and tried to organize the code
more thoughtfully along usage lines.  I poured through the coverage report and looked
for missing coverage, adding scenario tests to provide any coverage for missed areas.
Just general cleanup stuff.&lt;/p&gt;
&lt;h2 id="adding-version-information-for-plugins"&gt;Adding Version Information For Plugins&lt;a class="headerlink" href="#adding-version-information-for-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that work in place, it was time to see if I was able to add something useful to the
project’s configuration without many issues.  The something I had in mind was better
version information for the plugins.  From a plugin point of view, I figured it would be
useful to know what specific version was being attributed to that specific plugin.  From
a plugin manager point of view, it would also be useful to be able to version the actual
interface itself.  Both would be useful going forward, and useful to relate to
the user of the application.&lt;/p&gt;
&lt;p&gt;Changing the &lt;code&gt;FoundPlugin&lt;/code&gt; class to accept these two new version fields was easy, adding
private
fields and property functions to access them.  From there, I added those two parameters
to each of the existing plugins, setting active plugins to &lt;code&gt;0.5.0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; and setting
inactive or “templated” plugins to &lt;code&gt;0.0.0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;.  After adding some support in the
&lt;code&gt;__register_individual_plugin&lt;/code&gt; function to ensure that both versions were in acceptable
formats, I was ready to make the big change to expose that information.&lt;/p&gt;
&lt;p&gt;Okay, maybe big change is a bit misleading.  In the &lt;code&gt;__handle_argparse_subparser_list&lt;/code&gt;
function, I changed the setting of the &lt;code&gt;display_row&lt;/code&gt; variable to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;display_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;next_plugin_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;", "&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_names&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_enabled_by_default&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_enabled_now&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the setting of the &lt;code&gt;headers&lt;/code&gt; variable was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"names"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"enabled (default)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"enabled (current)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These were not big changes, but that was the point.  This was a relatively small change
and if things were organized properly, it should have required a relatively small number
of changes.  If that were not the case, I would have been worried.&lt;/p&gt;
&lt;p&gt;And I was happy, as I had a good workflow to get output on the plugins like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ID     NAMES                                ENABLED (DEFAULT)  ENABLED (CURRENT)  VERSION

  md001  heading-increment, header-increment  True               True               0.5.0
  md002  first-heading-h1, first-header-h1    False              False              0.5.0
  md003  heading-style, header-style          True               True               0.5.0
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While my efforts to have a completed configuration system with command line support is not
fully implemented, this works moves the command line system a lot further along to being
the beacon of the PyMarkdown project.  I realize that I still need a generic way of
specifying override values for those values specified in the configuration file, but
this is still a big step forward.  Now that I have the configuration and command line
systems in place, I can spend a bit of reflective time looking for pieces of those
systems that I missed while working on other issues.&lt;/p&gt;
&lt;p&gt;I really am feeling that the project is coming together.  While it has never felt like
a hodgepodge of functionality, I always had a feeling that it was just not quite ready to
show to the public.  With each of these little subsystems that I am focusing on, that
feeling is going away and is being replaced with a feeling of confidence that it is
ready.  In my books, that is a really good feeling to have.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After nicely wrapping up configuration and the command line, there was only
one thing left to do before I seriously thought about a beta release.  That was to
resolve the remaining items in the Priority 1 section of the issues list.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:yesIKnow"&gt;
&lt;p&gt;Yes, I know that is not what this code snippet actually does.  I found that out by adding tests later in on in the process.  I fixed this issue later, in the section named &lt;a href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/#fixing-an-old-issue"&gt;Fixing An Old Issue&lt;/a&gt;. &lt;a class="footnote-backref" href="#fnref:yesIKnow" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:usually"&gt;
&lt;p&gt;Unless I was purposefully creating bad data to test failure cases, that is the form that I passed into the plugins for configuration. &lt;a class="footnote-backref" href="#fnref:usually" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Configuration</title><link href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/" rel="alternate"></link><published>2021-03-22T00:00:00-07:00</published><updated>2021-03-22T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-03-22:/2021/03/22/markdown-linter-road-to-initial-release-configuration/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/15/markdown-linter-road-to-initial-release-front-matter/"&gt;last article&lt;/a&gt;, I talked about
my own requirements for a front-matter processor and how I added it to the project.  In
this article, I talk about my own requirements for configuration and how I applied them
to this project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes I encounter a part of a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/15/markdown-linter-road-to-initial-release-front-matter/"&gt;last article&lt;/a&gt;, I talked about
my own requirements for a front-matter processor and how I added it to the project.  In
this article, I talk about my own requirements for configuration and how I applied them
to this project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes I encounter a part of a programming language that I do not like for one
reason or another.  For whatever reason, the concept of having a good entry-level
configuration library for each given language seems to be not high on anyone’s
priority list. To be clear, I know that there are libraries out there for each language
that do some form of property reading and access, but the support is always basic
at best. If one is provided, it either seems to be too simple to accomplish the task
that is normally required of it, or it seems that it was added as an afterthought.&lt;/p&gt;
&lt;p&gt;Therefore, it was a bit disheartening to find out Python was also in this category.  When
it comes
to built-in support for logging, Python is there with the &lt;code&gt;logging&lt;/code&gt; library and its good
set of features.  When it comes to command line parsing, Python is there with the
&lt;code&gt;argparse&lt;/code&gt; library and its various helper functions.  When it comes to configuration file
parsing, Python is there with… &lt;code&gt;configparser&lt;/code&gt;?  Honestly, I was not impressed.  It
only supports the &lt;code&gt;ini&lt;/code&gt; file format and does not seem to have much in the way of useful
support for helper functions that I could find.&lt;/p&gt;
&lt;p&gt;So, for this project, I now need to figure out what configuration I need, and how to
properly store it.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commit between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/8a30dee0c0105898258e6074d5058556c08410ca"&gt;06 Mar 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/486c1cc77f828b710b2d15bb469e37a5dc032d6f"&gt;11 Mar 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-is-configuration"&gt;What Is Configuration?&lt;a class="headerlink" href="#what-is-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At face value, configuration is anything that provides information that guides the
execution of the project.  While input information is one class of configuration,
a discussion of that class of configuration is a whole other article unto itself.
As such, I am going to stick to the
two types of configuration that most people think about when they hear configuration:
dynamic configuration and static configuration.&lt;/p&gt;
&lt;p&gt;To be honest, I usually take the phrases “data stores” and “dynamic configuration” to mean
the same thing.  This type of configuration is expected to change its configuration
information during the execution of the project.  More often than not, the project itself
is the entity that is changing that information.  This dynamic information can be as
simple as a file that holds the time the project last scanned another data store to a
complete map of the data and relationships for the project. The key point here is that
this information is expected to change often.&lt;/p&gt;
&lt;p&gt;The natural complement to dynamic configuration is static configuration.  When most
software developer hear “configuration”, they most often think of things such as
configuration files, environment variables, and command line data.  These items are
all classified as static configuration as they generally do not change once the
execution of the program has started.  Showing a bit of synergy with each other,
if a data store is used to hold information, there is usually one or more static properties
that provide any needed configuration to gain access to that data store.&lt;/p&gt;
&lt;p&gt;So, for this article, I am focusing on static configuration and how I added better
support for static configuration to the PyMarkdown project.&lt;/p&gt;
&lt;h2 id="configuration-requirements-are-important"&gt;Configuration Requirements Are Important&lt;a class="headerlink" href="#configuration-requirements-are-important" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Up to this point, the project and its tests have been able to get by without any real hard
requirements for
configuration with respect to this project.  I have a loose set of command line arguments
and a simple map used to configure the plugins, but that is it.
Taking a look at my
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/#what-are-the-requirements"&gt;initial list of requirements&lt;/a&gt;,
there is nothing specifically in there about configuration, just phrases here and there
that somewhat speak of configuration. Phrases like “plans to later add other flavors of
parser” and “extending the base linting rules” that kind of infer that configuration will
be needed, but do not explicitly state its need.&lt;/p&gt;
&lt;p&gt;From a design point of view, this was not a failure, but a planned action.  In many
previous projects, I implemented a simple configuration system early in the
project, only to find out that it missed a couple of significant configuration scenarios.
In this case, “missed” means that there was not a straightforward way of representing some
aspect of the configuration in a way that made the most sense.  Given that history, I
decided to go with a minimal configuration approach until I could see what kind of
configuration the project was going to need.&lt;/p&gt;
&lt;p&gt;I was glad I took that approach, as it allowed me to properly classify the configuration
into the right category.  For me that classification for configuration deals primarily
with the requirements in 5 categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic property support&lt;/li&gt;
&lt;li&gt;overriding from the command line or environment&lt;/li&gt;
&lt;li&gt;validation&lt;/li&gt;
&lt;li&gt;grouping of values&lt;/li&gt;
&lt;li&gt;hierarchy and nesting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depending on how many and which of these requirements are needed defines the type of
configuration that is required.&lt;/p&gt;
&lt;p&gt;While there may be more “official” types of static configuration, the ones that I know
about fall into three main types.&lt;/p&gt;
&lt;h3 id="configuration-type-1-simple"&gt;Configuration Type 1: Simple&lt;a class="headerlink" href="#configuration-type-1-simple" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When people talk about configuration, most often they are talking about simple
configuration.  This is primarily configuration that can easily be put into a file or
passed around in variables, such as environment variables.  From a file-based point of
view, this type of configuration usually looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;host=localhost
port=8080
username=admin
password=admin@123
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking for example, a simple Google search turned up
&lt;a href="https://www.journaldev.com/39861/python-read-properties-file"&gt;this article&lt;/a&gt;
on how to handle properties files in Python using the &lt;code&gt;jproperties&lt;/code&gt; library.  This type
is called simple because it is simple, usually implemented with no bells and whistles.  If
the application needs to fetch configuration for the &lt;code&gt;username&lt;/code&gt; property, the application
needs to explicitly specify the full name of the property as it appears in the
configuration file. The result is a string that the application must then do any further
changes or validation to before the application can use it.&lt;/p&gt;
&lt;p&gt;There are pros and cons to this approach.  The pros are easily this type’s simplicity and
the
ability to easily add a layer on top of this configuration that allows overriding these
values from the command line.  Unfortunately, the cons are almost the same,
just for other reasons.  Because this approach is simple, if the application requires any
extra organization or validation for the configuration, the application needs to handle
that code.  As mentioned before, another big con is that with this type of configuration,
everything is a string.  Any interpretation of the data as anything other than a string is
left up to the developer.&lt;/p&gt;
&lt;p&gt;Checking in against the list of five requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic property support?  Done.&lt;/li&gt;
&lt;li&gt;overriding from the command line or environment?  Extra code required.&lt;/li&gt;
&lt;li&gt;validation?  Extra code required.&lt;/li&gt;
&lt;li&gt;grouping of values? Extra code required.&lt;/li&gt;
&lt;li&gt;hierarchy and nesting? Extra code required.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="configuration-type-2-grouped"&gt;Configuration Type 2: Grouped&lt;a class="headerlink" href="#configuration-type-2-grouped" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next step up from the simple type is a grouped type.  While it is a step up from the
simple type, it does not add much.  From a file-based point of view, this type of
configuration usually either looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="mi"&gt;@123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Db]&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;localhost&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8080&lt;/span&gt;
&lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;admin&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;admin@123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the name of this type suggests, the main thing that this type adds is the ability to
group a collection of configuration items together into a group.  While this may not seem
like a big step forward, it is this type of configuration that I have found to be of most
use in approximately 95% of the projects that I have worked on.&lt;/p&gt;
&lt;p&gt;Clarifying that statement, I believe I can successfully demonstrate that 95% of the
projects that I have worked on have used a Grouped type of configuration for any
non-dynamic project configuration.  My choice of words was very deliberate in that previous
statement. While many of those projects had dynamic configuration that was quite complex,
the static configuration for those projects that pointed to the dynamic configuration
artifacts were quite simple.  And while many of those projects started out using the Simple
type of configuration, something always seems to come up that requires the need of
grouping of configuration values on some level.&lt;/p&gt;
&lt;p&gt;I do believe that my experiences in this area are common.  Servers?
Most of the time they require some setup of the server and pass any heavy lifting
of information to a data store.  This usually requires two or three small groups of
information, usually with not more than two or three items in each group.  Command line
applications?  Most of the time there was
no data stores and any information was passed in through the command line or environment
variables.  Even if some manner of data store was involved, the configuration only provided
the data to connect to the data store, where the dynamic information was stored.&lt;/p&gt;
&lt;p&gt;So, what changes from the previous type?  Only this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grouping of values? Extra code required.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next type is where all the big changes occur.&lt;/p&gt;
&lt;h3 id="configuration-type-3-complex"&gt;Configuration Type 3: Complex&lt;a class="headerlink" href="#configuration-type-3-complex" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While this type of configuration is overkill for simple projects, it can be required
for more complex projects, hence its name.  From the main list of configuration items,
there is support for all five, though the support for overriding may be limited due to
the nature of the configuration itself.  When I have encountered a need for this type
of configuration, it has usually been configuration scenarios where there is a strong
need for nesting or hierarchical information.&lt;/p&gt;
&lt;p&gt;A good example of this is our standard group of configuration items, this time expressed
using a JSON file for information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"db"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"host"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"port"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"username"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"admin@123"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this hierarchy could be flattened, expressing it in this form provides meaningful
context to the configuration.  There is no looking for other configuration items throughout
the file that may have the same prefix.  All four of the related items are grouped
together under the &lt;code&gt;db&lt;/code&gt; key.  However, a better example of this hierarchical relationship
requires a slight adjustment of the example file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"db"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"server"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"host"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"database"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"port"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"account"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"username"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"admin@123"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With a slight addition of the &lt;code&gt;database&lt;/code&gt; field, this file now represents what I feel is
a more logical expression of the configuration items.  While it is true that the previous
group of four items were all related to the database, they were not all related in the
same way.  This organization of the fields presents a more cohesive mapping of what
configuration is required for database access: where the database is and what account to
use.&lt;/p&gt;
&lt;p&gt;But as I mentioned at the start of this section, this may be overkill for some
applications.  If all you are storing in the configuration is 10 strings or less, I
would argue that a Grouped or Simple type can more easily be used, with some adjustments
required in the application.  But for other applications with more complex configuration,
this type may be just right for the project.&lt;/p&gt;
&lt;h3 id="which-is-best-for-this-project"&gt;Which Is Best For This Project?&lt;a class="headerlink" href="#which-is-best-for-this-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After reviewing the different types in my head, I decided that the PyMarkdown project
would benefit from a complex configuration type.  While the base configuration for
the project is basic, I believe that the configuration requirements for any
plugins and extensions will require more complex configuration.  I know that a couple
of the plugins that I want to write for my own website will require lists and possibly
list of maps.  As such, it is better to plan and be prepared, rather than face
a nasty rewrite.&lt;/p&gt;
&lt;p&gt;And with that decision, I was on to adding complex configuration support to the
project!&lt;/p&gt;
&lt;h2 id="adding-proper-configuration-support"&gt;Adding Proper Configuration Support&lt;a class="headerlink" href="#adding-proper-configuration-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having written both low-level and high-level code to work with configuration, I had a
good idea of what to do.  The most important thing for me to do is to make sure
I had any extra requirements for the complex configuration worked out before I
started.&lt;/p&gt;
&lt;h3 id="starting-with-base-requirements"&gt;Starting With Base Requirements&lt;a class="headerlink" href="#starting-with-base-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The base configuration requirement for this project is that it can handle complex
configuration.  Based on that requirement, the most frequently used formats for that
kind of data are
&lt;a href="https://en.wikipedia.org/wiki/YAML"&gt;YAML&lt;/a&gt; and
&lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt;.
Both have their strengths and weaknesses, as the information at those links will
detail.  Having used both of them in previous projects, my feeling was that the JSON
format is simpler format and more direct for users to use.  Because of those reasons,
they made a JSON file a better choice for holding configuration information.&lt;/p&gt;
&lt;p&gt;With that out of the way, I created a simple class &lt;code&gt;ApplicationProperties&lt;/code&gt;
to hold the configuration information.  Keeping any interaction with it simple,
I added a &lt;code&gt;load_from_dict&lt;/code&gt; function to take care of transforming a loaded
dictionary into a more convenient form for the class.  After that was place, I
created a simple &lt;code&gt;ApplicationPropertiesJsonLoader&lt;/code&gt; class with a straightforward
static function named &lt;code&gt;load_and_set&lt;/code&gt;.  This function (and class) was created for
one purpose: to load a JSON file as a dictionary and add it to the provided instance
of the &lt;code&gt;ApplicationProperties&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;Class to hold the properties.  Check.  Class to read properties in JSON format and
set to the properties object. Check.  Scenario tests to verify that the loading was
working properly?  Check. Now I needed to figure out the best way to hold
the data within the class and how to access it from the application.&lt;/p&gt;
&lt;h3 id="loading-the-configuration-from-a-file"&gt;Loading The Configuration From A File&lt;a class="headerlink" href="#loading-the-configuration-from-a-file" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Thinking of the properties “grouping of values” and “hierarchy and nesting”, I had
a decision to make on how to store the data.  To me, that problem had two possible
solutions: keep the dictionary as it was or translate it into a flattened map.  To shape
that decision, I had to keep in mind that one of the reasons that a complex configuration
type is best for this project is due to its extensibility.  Designed correctly, the
configuration for any part of the project would be kept in its own “playground”, free
from interference from any of the other parts.&lt;/p&gt;
&lt;p&gt;Keeping that in mind, I knew that if I kept the dictionary the way it was, I could easily
hand off portions of that dictionary to a subsystem using a single line of code.  However,
if used properly, accessing a property using that dictionary would require multiple
lookups, one for each level of hierarchy required for that property.  The balance to that
was a flattened dictionary, which only every required one lookup.  However, this would
mean that handing off the configuration for a distinct part of the project would not be
as straightforward or inexpensive.&lt;/p&gt;
&lt;p&gt;After a fair amount of thought, I decided that the flattened option was the best choice.
It optimized fetching values over hierarchy exclusion, which I believe was the right
choice to make.  Following that decision were three other key decisions.  The first
decision, which might seem like a straightforward decision, was that all keys are
strings.  However, as JSON and other configuration formats can handle non-string
keys, I wanted to be explicit about it.  Secondly, I needed to choose a key separator
character that would determine how to create a path to allow orderly traversal through
configuration.  With many great ones to choose from, I decided to keep it simple and in the
property file family by using the period character &lt;code&gt;.&lt;/code&gt;.  Finally, I had to decide about
having all key strings be in upper case or lower case, or to simply have case-sensitive
property keys.  That one was a bit more difficult, but after looking at a few
property files, the answer was obvious: lower case.&lt;/p&gt;
&lt;p&gt;With those choices made, I added the &lt;code&gt;__scan_map&lt;/code&gt; function and called it from the
&lt;code&gt;load_and_set&lt;/code&gt; function.  It was less than 20 minutes before I had the following function
ready to go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__scan_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_prefix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"All keys in the main dictionary and nested dictionaries must be strings."&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__separator&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Keys strings cannot contain the separator character '{self.__separator}'."&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;next_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__scan_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;next_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{current_prefix}{next_key}{self.__separator}"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{current_prefix}{next_key}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__flat_property_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"Adding configuration '&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;' : {&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every key in the dictionary is checked to verify that it is a string
and does not contain the key separator character.  Once the key is verified, if the current
value is a dictionary, the function is called recursively with the current key and
that dictionary.  If it is not a dictionary, it is added to the flattened dictionary by
creating a copy of its value.  When inserted into the dictionary, the key is transformed
into lower case to ensure consistency.&lt;/p&gt;
&lt;p&gt;I did try a couple of different options out, but in the end, this simple recursive function
was the clear winner.  I tried to be super-smart about doing the same thing in an
iterative fashion, but it seemed to me to be too much code for such a simple task.  While
I do not have problems with recursive functions in any programming language, I do know that
they can get into runaway mode with one wrong conditional statement.  As such, I verified
the code a couple of times before running it.  I also added the &lt;code&gt;number_of_properties&lt;/code&gt;
function and the &lt;code&gt;property_names&lt;/code&gt; function before adding more tests to test what I had so
far.&lt;/p&gt;
&lt;h3 id="fetching-values-from-the-configuration"&gt;Fetching Values From The Configuration&lt;a class="headerlink" href="#fetching-values-from-the-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a lot of the tough work behind me, I created some new scenario tests to test
the new function that I was just about to add: the &lt;code&gt;get_property&lt;/code&gt; function.  As this
was the start of this function, its coding was very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get an property of a generic type from the configuration.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;
    &lt;span class="n"&gt;property_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;property_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__flat_property_map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;found_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__flat_property_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_eligible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found_value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;property_value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, unless a valid value is found to replace its value, the &lt;code&gt;property_value&lt;/code&gt;
variable is set to &lt;code&gt;default_value&lt;/code&gt;.  This made sense to me because it allowed me to
write code that would know if a property was not found, or to just use a default,
whichever solution worked best for the scenario I was working on.  From there, the
function checks to see if the value of &lt;code&gt;property_name&lt;/code&gt; is present in the flattened
dictionary and has the specific type that is being looked for.  If both of those
conditions are met, the &lt;code&gt;property_value&lt;/code&gt; variable is set to the value found in the
flattened dictionary.&lt;/p&gt;
&lt;p&gt;To me, this was just the start, but it was a good, solid, simple start.  Basic
property support was now done… almost. To make things a little easier, I added three
functions:
&lt;code&gt;get_boolean_property&lt;/code&gt;, &lt;code&gt;get_integer_property&lt;/code&gt;, and &lt;code&gt;get_string_property&lt;/code&gt;.  These were
all simple wrappers around the &lt;code&gt;get_property&lt;/code&gt; function, providing the appropriate
type information for the third &lt;code&gt;property_type&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;Where was I now?  Basic property support. Check.  Grouping of values. Check.
Hierarchy and nesting. Check.  &lt;/p&gt;
&lt;p&gt;The next one to tackle?  Validation.&lt;/p&gt;
&lt;h3 id="adding-validation"&gt;Adding Validation&lt;a class="headerlink" href="#adding-validation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I do not always need to validate values that I am fetching from configuration,
sometimes it is essential to have.  Where possible, I prefer to assume that the user
is intelligent and will provide intelligent values that make sense. If there is an issue
with the value, I prefer to report that error at a later stage when they are being used,
either directly to the command line or by logging it to a log file.&lt;/p&gt;
&lt;p&gt;But in some cases, I need to have some configuration values that I know I can trust on
as they are pivotal to the way the application works.  The easiest one for me to think
of is the &lt;code&gt;log.level&lt;/code&gt; configuration value.  As I rely on a solid log file to report
any errors, it is pivotal to me that any changes to the logging behavior are completely
airtight.  Specifically, I only want the log level to be set to one of the known values.
The code to do this for the &lt;code&gt;argparse&lt;/code&gt; library and command line handling is relatively
straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;available_log_maps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"CRITICAL"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CRITICAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"ERROR"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"WARNING"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"INFO"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"DEBUG"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"--log-level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"log_level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"minimum level required to log messages"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available_log_maps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_level_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available_log_maps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Value '{argument}' is not a valid log level."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The argument is added with a &lt;code&gt;type&lt;/code&gt; argument that specifies the &lt;code&gt;log_level_type&lt;/code&gt;
function.  This function is called with the provided value as its argument, either
returning that object or raising a &lt;code&gt;ValueError&lt;/code&gt;.  The check itself is to simply compare
the argument with the name of one of the keys in the &lt;code&gt;available_log_maps&lt;/code&gt;
dictionary.  For me, this is simple, and it seemed like a good pattern to follow.&lt;/p&gt;
&lt;p&gt;To start following that pattern, I added the &lt;code&gt;valid_value_fn&lt;/code&gt; argument to the
&lt;code&gt;get_property&lt;/code&gt; family of functions, defaulting to &lt;code&gt;None.&lt;/code&gt;  Once that was done, the other
modification to that function was simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Added right after the type check, if the &lt;code&gt;valid_value_fn&lt;/code&gt; is set, the function will
be called to validate the &lt;code&gt;found_value&lt;/code&gt;, catching any exceptions that are thrown.
Once again, I looked at a few other options, but simplicity won out again.&lt;/p&gt;
&lt;p&gt;But having finished that change, something still was not right.  Something was a bit off.
I was not sure what though.&lt;/p&gt;
&lt;h3 id="adding-strict-mode-to-validation"&gt;Adding Strict Mode to Validation&lt;a class="headerlink" href="#adding-strict-mode-to-validation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using the log level case as a baseline scenario, I thought through variations on
that scenario and came up short.  There was just something missing that I had not covered
yet.  After a bit of thinking and working through scenarios, it finally came to me:
I needed a strict mode.&lt;/p&gt;
&lt;p&gt;There are times where I want a call to the &lt;code&gt;get_property&lt;/code&gt; function to return a value
no matter what, but there are other times where I want an exception thrown.  In the
case of fetching the log level, if there is a problem with the value, I want to follow the
&lt;code&gt;argparse&lt;/code&gt; example and thrown an exception that halts the application at that point. I
needed something to toggle between this &lt;em&gt;strict&lt;/em&gt; behavior and the more relaxed behavior.&lt;/p&gt;
&lt;p&gt;To accomplish this, I added the &lt;code&gt;strict_mode&lt;/code&gt; argument to the function with a default
of &lt;code&gt;False&lt;/code&gt;.  I then added this code snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;strict_mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"The value for property '{property_name}' must be of type '{property_type.__name__}'."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and this code snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;strict_mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"The value for property '{property_name}' is not valid: {str(this_exception)}"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the &lt;code&gt;log.level&lt;/code&gt; configuration item as an example, I do not want to default the
log level if it is not a string or is not one of the valid strings.  In those cases,
I want a clear message telling me what the issue is.  For me, this completed the
validation.  I could strictly enforce the validation, request a value from the
configuration file and know it was not fetched (checking &lt;code&gt;default=None&lt;/code&gt;), or request
a value and use the default if anything was wrong.&lt;/p&gt;
&lt;p&gt;I believe this now covers all the scenarios for validation.  After double checking
that the scenario tests were all up to date and passing cleanly, there were just a couple
of small things left to handle.&lt;/p&gt;
&lt;h3 id="almost-there"&gt;Almost There&lt;a class="headerlink" href="#almost-there" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Looking at what I had, I believed that the &lt;code&gt;ApplicationProperties&lt;/code&gt; class was almost there,
but I needed to add two small little things to make it complete.  The first of those
things was a &lt;code&gt;is_required&lt;/code&gt;
argument to allow me to state my intention that an argument must be present. That
was followed by code that was added near the end of the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;is_required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"A value for property '{property_name}' must be provided."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that in place, I just wanted to bulletproof the main function &lt;code&gt;get_property&lt;/code&gt;.
To do that, I added the following code at the start of the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"The propertyName argument must be a string."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"The property_type argument for '{property_name}' must be a type."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"The default value for property '{property_name}' must either be None or a '{property_type.__name__}' value."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this may not be Pythonic, as the types of arguments are being checked, I think it
is necessary.  As a developer, any reliance that I have on low level functions and
libraries requires trust.  I trust that those functions will let me know as quickly as
possible if I mess up.  For me, these parameter checks are just that.&lt;/p&gt;
&lt;h2 id="ordering"&gt;Ordering&lt;a class="headerlink" href="#ordering" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Out of the initial five items, there was now only one remaining: overriding from the
command line or environment.  While I did not integrate direct support for this into
the &lt;code&gt;ApplicationProeprties&lt;/code&gt; class, I did start by setting up a process to follow
for any new configuration items.  This process is simply a “ladder” to follow when
checking configuration values from multiple sources.  That ladder is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;command line&lt;/li&gt;
&lt;li&gt;configuration file&lt;/li&gt;
&lt;li&gt;default value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I might add code to integrate &lt;code&gt;ApplicationProperties&lt;/code&gt; and &lt;code&gt;argparse&lt;/code&gt; together
in the future, for right now it was manually done.  Using the &lt;code&gt;log.level&lt;/code&gt; item
as an example, the code to properly fetch it was as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"log.level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level_type&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_log_level&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This follows the process to the letter.  The first line checks to see if the &lt;code&gt;log_level&lt;/code&gt;
field is provided from the command line, either using the present value or setting it
to &lt;code&gt;None&lt;/code&gt;.  If that variable is &lt;code&gt;None&lt;/code&gt;, then the function uses the &lt;code&gt;get_string_property&lt;/code&gt;
function with the &lt;code&gt;log_level_type&lt;/code&gt; validator to fetch the log level from the
configuration.  Implied in that call is that if the value is not present, the default
value is &lt;code&gt;None&lt;/code&gt;.  Finally, if neither of those actions resulted in assigning the
&lt;code&gt;effective_log_level&lt;/code&gt; variable a non-None value, the &lt;code&gt;default_log_level&lt;/code&gt; member variable
is used to set a default.&lt;/p&gt;
&lt;p&gt;That process is what I want, but it seems a bit long.  Maybe I will see about shortening
it in the future, but for right now, it is exactly what I want.&lt;/p&gt;
&lt;h3 id="providing-constrained-access-to-subsystems"&gt;Providing Constrained Access To Subsystems&lt;a class="headerlink" href="#providing-constrained-access-to-subsystems" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Finally, before I could finish implementing this in the PyMarkdown project, I needed to
handle the scenario of passing off a subsection of the configuration to a subsystem.
This was important to me because I wanted to make sure that there was absolutely no
chance of overlap between the main application configuration and the configuration of
any plugin.&lt;/p&gt;
&lt;p&gt;To do this, I created a new class called &lt;code&gt;ApplicationPropertiesFacade&lt;/code&gt; that takes as
arguments the root &lt;code&gt;ApplicationProperties&lt;/code&gt; instance and a &lt;code&gt;property_prefix&lt;/code&gt; that is
specific to the section to isolate to.  This class is a facade, as the name suggests.
To that extent, this class spends most of its code handing off responsibility for
satisfying the requests by passing on to the root instance with the &lt;code&gt;property_prefix&lt;/code&gt;
appended to the start of the key string.  While this may seem simplistic, it gets the
job done remarkably well.&lt;/p&gt;
&lt;p&gt;With the work done on this class, its incorporation into the PyMarkdown project, and
all tests passing, it was time to wrap up the work on this item.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have written many of these types of classes in many languages over the years,
I really am happy about how this one turned out.  The way I know that I am happy about
it as a library-type class is that it does one thing simply but is easily extendable
to do slightly more complex things.  This class does not try and answer for all the
responsibilities of fetching configuration information, it focuses on getting that
information from a file. It is small, it is light, and it accomplishes its goals in what I
believe is a clean manner.  What is there not to like?&lt;/p&gt;
&lt;p&gt;But as much as I was confident that I had the right fit for the configuration file,
I now found the command line interface lacking.  I was going to need to take some time
to clean that up.  I was also aware that the initial release is very close now.  There are
two other things in the way of a good first release: cleaning up some important issues and
having a good release story.  I was hoping to fix the first as soon as possible and to
research the second before I needed to start on it.  Here we go!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the &lt;code&gt;ApplicationProperties&lt;/code&gt; class coded and working fine, I realize that I needed
to up my game for the command line.  Therefore, the next thing I worked on was the
command line of the project.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Front-Matter</title><link href="https://jackdewinter.github.io/2021/03/15/markdown-linter-road-to-initial-release-front-matter/" rel="alternate"></link><published>2021-03-15T00:00:00-07:00</published><updated>2021-03-15T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-03-15:/2021/03/15/markdown-linter-road-to-initial-release-front-matter/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/08/markdown-linter-road-to-initial-release-cleaning-up-the-list-and-readability/"&gt;last article&lt;/a&gt;, I talked about
how I started to focus more on resolving the higher priority issues from the project’s
issues list and the problems I faced doing that.  In this article, I talk about my own
requirements for a front-matter processor and how I added …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/08/markdown-linter-road-to-initial-release-cleaning-up-the-list-and-readability/"&gt;last article&lt;/a&gt;, I talked about
how I started to focus more on resolving the higher priority issues from the project’s
issues list and the problems I faced doing that.  In this article, I talk about my own
requirements for a front-matter processor and how I added it to the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a sharper focus, I took a look at the
&lt;a href="https://github.com/jackdewinter/pymarkdown#project-to-do-list"&gt;issues list&lt;/a&gt;
for the project and made a firm commitment to myself: to work through and complete as
many of the Priority 1 issues as possible as quickly as possible.  But in terms of
importance, there was one of those issues that stood apart from the rest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="n"&gt;YAML&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;simple&lt;/span&gt; &lt;span class="n"&gt;front&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Back at the start of the project, I sat down and figured out what the real
requirements for the project were, as
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/#what-are-the-requirements"&gt;detailed here&lt;/a&gt;.
However, while it is not explicitly stated in that list of requirements, the
overarching requirement is stated in the last paragraph of that section:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From my point of view, these requirements help me visualize a project that will help me maintain my website by ensuring that any articles that I write conform to a simple set of rules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The big push for me to do this was always to help me maintain my own website.  Since
that website is written as a collection of Markdown documents, I did not think that I
needed to explicitly state that this project must work on my own website’s Markdown
documents. It was just expected. And to do that, I needed to be able to handle the
metadata in the front-matter of my articles.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commit for
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/f4c785d6d15734208d995067b1de486d30bd6cea"&gt;04 Mar 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="markdown-front-matter"&gt;Markdown Front-Matter&lt;a class="headerlink" href="#markdown-front-matter" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With respect to Markdown, if all someone has ever done is to use it to format a readme.md
file or to add formatting to a control on a web form, the term &lt;code&gt;front-matter&lt;/code&gt; might be
a bit confusing.  But for someone like me, who has a website authored in Markdown,
it is a pivotal piece of the authoring process.  As such, it needs to be done right.&lt;/p&gt;
&lt;h3 id="why-is-it-needed"&gt;Why Is It Needed?&lt;a class="headerlink" href="#why-is-it-needed" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I write an article for my website, the body of the article is approximately 95 percent
of the work. Coming up with a good format, making sure the article flows, and checking for
grammar; these are the harder parts of writing articles on the weekly schedule
that I follow.  Those parts of the article form the content of the article, and once I
fine-tune that content, it is very important to me that the content is presented
properly.  That is where metadata comes in.&lt;/p&gt;
&lt;p&gt;To properly ensure that the articles are rendered properly and placed in the right areas
of my website, I need
to have a method that allows me to communicate metadata about the article to my website
generator.  Different website generators structure their content in different ways,  but
every website generator that I have looked at requires some form of additional metadata
provided within each article to be published.  After all, only so much information can be
obtained from a directory structure or the article itself. For most website generators,
that extra information is contained within something referred to as front-matter.&lt;/p&gt;
&lt;h3 id="what-is-markdown-front-matter"&gt;What Is Markdown Front-Matter?&lt;a class="headerlink" href="#what-is-markdown-front-matter" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having experimented with a handful of
&lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/"&gt;static site generators&lt;/a&gt;,
I chose the
&lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; website generator for my own personal site.
While I admit that I could have gone with something different, I do not regret any part
of my decision to use Pelican as my site generator.  It fits all my needs perfectly, and
my simple tooling around it allows me to focus on the publishing of the articles, not
the site generator.&lt;/p&gt;
&lt;p&gt;I believe that one of the reasons that I work well with Pelican is that
Pelican treats article metadata as a first-class object, not as an afterthought.  This is
evident as the first example of creating an article that exists on the Pelican
&lt;a href="https://docs.getpelican.com/en/latest/quickstart.html#create-an-article"&gt;Quick Start&lt;/a&gt; page
is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: My First Review
Date: 2010-12-03 10:20
Category: Review

Following is a review of my favorite mechanical keyboard.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That example is then followed up by a more complete example in the next section on
&lt;a href="https://docs.getpelican.com/en/latest/content.html#file-metadata"&gt;Writing Content&lt;/a&gt;
with the section on “File Metadata”:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: My super title
Date: 2010-12-03 10:20
Modified: 2010-12-05 19:30
Category: Python
Tags: pelican, publishing
Slug: my-super-post
Authors: Alexis Metaireau, Conan Doyle
Summary: Short version for index and feeds

This is the content of my super blog post.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are both great examples of articles containing front-matter metadata.  In its
simplest form, front-matter is
extra metadata that is attached to the beginning of an article, to be consumed by
the website generator and not presented to the reader as content.  While the effects of
one or more of the data fields may influence how the content of the rest of the article is
presented, that information is not explicitly part of the article itself.&lt;/p&gt;
&lt;p&gt;A good example of that is the &lt;code&gt;Title&lt;/code&gt; field in the above examples.  If I were to publish
this article on my website, the content of the article would be a single paragraph:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is the content of my super blog post.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, at the top of the page, the title itself would be presented as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    My super title
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, different parts of Pelican may use other fields to affect how the article
is rendered or where the article is rendered.  When was the article written?  Is this
article part of a series of articles?  What tags are associated with the article? These
are all specified in the front-matter of each article that I write.&lt;/p&gt;
&lt;p&gt;That is why front-matter support is so important to me.  This website is how I communicate
with others, and I want to get it right.&lt;/p&gt;
&lt;h3 id="what-are-the-standards"&gt;What Are The Standards?&lt;a class="headerlink" href="#what-are-the-standards" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing I need to cover is why any definition or standard around front-matter
is not present in the
&lt;a href="https://github.github.com/gfm/"&gt;GFM specification&lt;/a&gt;.
The GFM specification itself is specifically focused on the common parts of Markdown
and how it is rendered into HTML.  Front-matter influences how the
content is presented but is not directly part of the content.  Therefore, it feels right
that the GFM specification has no mention of front-matter.&lt;/p&gt;
&lt;p&gt;Knowing this, I started looking for any kind of specification for front-matter weeks
before I started to work on this feature.  While information was hard to find, the
information fell into three groups.&lt;/p&gt;
&lt;h4 id="group-1-pelican-static-site-generator"&gt;Group 1: Pelican Static Site Generator&lt;a class="headerlink" href="#group-1-pelican-static-site-generator" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The first group that defined front-matter was in the documentation for the
&lt;a href="https://python-markdown.github.io/extensions/meta_data/"&gt;Pelican Meta-Data&lt;/a&gt; plugin.
This documentation was not easy to define, but provided the following paraphrased rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keywords are case-insensitive letter, numbers, underscore, dashes and must end with a colon&lt;/li&gt;
&lt;li&gt;everything after the colon on the line, including a no data, are acceptable&lt;/li&gt;
&lt;li&gt;if a line is idented by 4 or more spaces, that line is added to the data for the previous keyword&lt;/li&gt;
&lt;li&gt;the first blank line ends all metadata for the document&lt;/li&gt;
&lt;li&gt;alternatively, fences may be used&lt;ul&gt;
&lt;li&gt;the first line of the document must be &lt;code&gt;---&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the metadata ends at the first blank line or the first line containing &lt;code&gt;---&lt;/code&gt; or &lt;code&gt;...&lt;/code&gt;, whichever comes first&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had been following these rules without knowing them for months, but it was nice to
finally know that they were in a concrete way.  At least it was a start.&lt;/p&gt;
&lt;h4 id="group-2-commonmark-markdown-parser"&gt;Group 2: CommonMark Markdown Parser&lt;a class="headerlink" href="#group-2-commonmark-markdown-parser" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The second group that I found was in the documentation for the
&lt;a href="https://github.com/commonmark/commonmark-java#yaml-front-matter"&gt;Commonmark&lt;/a&gt;
Markdown Parser.  While it it is not explicitly stated as such, after a bit of digging
in the
&lt;a href="https://github.com/commonmark/commonmark-java/blob/main/commonmark-ext-yaml-front-matter/src/main/java/org/commonmark/ext/front/matter/internal/YamlFrontMatterBlockParser.java"&gt;Java source code&lt;/a&gt;
yielded the following rules by reading through the regular expressions in that code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;normal lines are started with 0 to 3 spaces, followed by 1 or more characters in &lt;code&gt;a-z0-9._-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;in certain cases where a “special” sequence was started, a line that starts with 4 or more spaces may add to the current value (such as literals)&lt;/li&gt;
&lt;li&gt;fences are required&lt;ul&gt;
&lt;li&gt;the start fence must start with 3 or more &lt;code&gt;-&lt;/code&gt; characters&lt;/li&gt;
&lt;li&gt;the end fence must start with 3 or more &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; characters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I really love documentation that presents you with a single example and almost nothing
else.  Without being able to read the Java code for details, this one would not have
made the list.&lt;/p&gt;
&lt;h4 id="group-3-markdown-it-front-matter-extension"&gt;Group 3: Markdown IT Front Matter Extension&lt;a class="headerlink" href="#group-3-markdown-it-front-matter-extension" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The final group that I found was in the documentation for the
&lt;a href="https://github.com/ParkSB/markdown-it-front-matter"&gt;Markdown IT Front Matter Extension&lt;/a&gt;.
By far, this was the most complete documentation.  It is so complete and well documented
that I did not have to search any source code or paraphrase any other documentation.
These points are copied verbatim from that website:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Indicated by three or more dashes: —&lt;/li&gt;
&lt;li&gt;Opening and closing fences must be the same number of dash characters&lt;/li&gt;
&lt;li&gt;Opening fence must begin on the first line of the markdown string/file&lt;/li&gt;
&lt;li&gt;Opening fence must not be indented&lt;/li&gt;
&lt;li&gt;The example above uses YAML but YAML is not required (bring your own front matter parser)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I mentioned before the list: complete and well-documented.&lt;/p&gt;
&lt;h4 id="finding-the-best-of-all-worlds"&gt;Finding The Best of All Worlds&lt;a class="headerlink" href="#finding-the-best-of-all-worlds" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Faced with those three groups of definitions, I needed to think about how I was going to
pull these together in a way that made sense.  For this initial release, my big reason
for adding this feature was to enable front-matter for linting my own website files.  As
such, the rules that apply to the Pelican Meta-Data plugin needed to have a bit more
weight than the other rules.  Even so, as I want to be able to add more support for other
types of front-matter in the future, it made sense to only use that as a weighting, not as
a final decision.&lt;/p&gt;
&lt;p&gt;The first set of decisions that I needed to make were regarding the “fences” at the start
and end of the metadata.  Each of the sample implementations specify that the metadata
must start at the beginning of the article, so that was one decision neatly out of the
way.  With respect to the fences themselves, while the Pelican plugin provides for them
as an option, the other two implementations do not, so I decided to make them mandatory
for now.  But that left me to decide on the exact format of those fences. The
Pelican plugin
implementation specifies exactly 3 &lt;code&gt;-&lt;/code&gt; characters for the start fence and exactly 3 &lt;code&gt;-&lt;/code&gt;
or &lt;code&gt;.&lt;/code&gt; characters for the end fence.  The CommonMark implementation specifies 3 or more
&lt;code&gt;-&lt;/code&gt; characters for the start fence and 3 or more &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; characters for the end fence.
Finally, the Markdown-It implementation specifies 3 or more &lt;code&gt;-&lt;/code&gt; characters for the start
fence and 3 or more &lt;code&gt;-&lt;/code&gt; characters for the end fence.  This implementation also added
the caveat that the start and end fences must have the same number of characters.
Each one of these was a little different, and I wanted to make a good first choice with
respect to the fences.  That took a bit of thought.&lt;/p&gt;
&lt;p&gt;In the end, I decided that for now, having fences with 3 or more &lt;code&gt;-&lt;/code&gt; characters
was the best way to go.  Since each of these implementations specifies, either explicitly
or implicitly, that the fences must be at the start of a line, that decision was a simple
one.  Finally, as I like symmetry in my articles, I felt that mandating that the start
fence and the end fence contain the same number and type of characters was the final
decision I had to make with respect to the headers.
As for the content of the front-matter, I felt that since my initial push was to support
the Pelican Meta-Data plugin, using its rules for content were good enough for me.&lt;/p&gt;
&lt;p&gt;As I was coming up with these rules, I was cognizant of one big thing: I did not have to
be correct, I just needed a good set of defaults.  I was sure that at some point I was
going to support all three formats, just not right away.  Until I got to that point, I
just needed to have something “good enough”.&lt;/p&gt;
&lt;h2 id="before-we-go-on"&gt;Before We Go On&lt;a class="headerlink" href="#before-we-go-on" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I pride myself on my honesty, so here goes: I messed up.  This article is mainly about
the setup around the addition of a new feature to the project, which is mostly complete
in
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/f4c785d6d15734208d995067b1de486d30bd6cea"&gt;this commit&lt;/a&gt;.
However, for some reason, I did not add the module &lt;code&gt;front_matter_markdown_token.py&lt;/code&gt;
and the module &lt;code&gt;test_markdown_front_matter.py&lt;/code&gt; until
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/8a30dee0c0105898258e6074d5058556c08410ca"&gt;this commit&lt;/a&gt;
which is where the bulk of the work for parsing is located.  So, while most of the work
is contained within the first commit, I ask for you lenience, dear reader.  Please
pretend that that one file was added in the first commit.  Thank you.&lt;/p&gt;
&lt;h2 id="adding-the-feature"&gt;Adding The Feature&lt;a class="headerlink" href="#adding-the-feature" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting to add this feature, I was keenly aware that I needed to start thinking about
how to implement new features in an adaptable manner.  This was only the first extension,
and not the last one to come.  To that end, I wanted to start the process of
making sure that extending the parser and the linter were both possible.  This was a good
place to start!&lt;/p&gt;
&lt;p&gt;Based on the actions that the front-matter processing needed to perform, I made the
decision that it had to be encapsulated in a Leaf Block token.  It was not a
container and it did not make sense to specify it as an Inline token.  After a bit of
thinking on it, I concluded that it was a special token that contains
other information, although not tokens.  As such, while it was a bit of a reach, I
figured that it made sense to express it as a Leaf Block token, just a specially scoped
token.&lt;/p&gt;
&lt;h3 id="testing-first"&gt;Testing First&lt;a class="headerlink" href="#testing-first" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As is my process, while I might have added a bit of simple code here and there to test
some little things out, this feature started with the first of the scenario tests added
to the &lt;code&gt;test_markdown_front_matter.py&lt;/code&gt; module.  While this may appear to some as a
backwards way to do things, I consistently return to the process because of one thing: it
works well for me.  Before starting the coding part of the feature, I have a test that
provides a good set of requirements for what is needed to complete that one part.&lt;/p&gt;
&lt;p&gt;For me, this is the best way to go.  Write the test to specify your goal for the feature,
and then work towards it.&lt;/p&gt;
&lt;h3 id="keeping-a-single-point-of-entrance"&gt;Keeping a Single Point of Entrance&lt;a class="headerlink" href="#keeping-a-single-point-of-entrance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I knew that the bulk of the code was going to be provided in an extension module,
it was important to me that there be only one point of entry for the code to process
front-matter.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__process_header_if_present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;requeue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FrontMatterExtension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_header_if_present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;requeue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenized_document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make sure that it was called exactly once, I added the call to that function at the
start of the &lt;code&gt;__parse_blocks_pass&lt;/code&gt; function, right at the &lt;code&gt;try&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__process_header_if_present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;did_start_close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token_to_use&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="filling-out-the-processing"&gt;Filling Out The Processing&lt;a class="headerlink" href="#filling-out-the-processing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For the most part, the processing was simple.  If anyone is interested in the
actual code that was added, look in
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/8a30dee0c0105898258e6074d5058556c08410ca"&gt;this commit&lt;/a&gt;
for &lt;code&gt;process_header_if_present&lt;/code&gt; and follow along from there.  I am going to focus on
more description about what is done rather than walk through each function line-by-line.&lt;/p&gt;
&lt;p&gt;As I already had the
&lt;code&gt;is_thematic_break&lt;/code&gt; function that was 95% of the way to where I needed it to be,
I decided to retrofit that function instead of implementing a new one.  The only
three differences between a thematic break and the start fence were the characters
used, the indentation allowed, and whitespaces being allowed between thematic break
characters.  The characters difference was easily taken care of by adding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;start_char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;after the call to the &lt;code&gt;is_thematic_break&lt;/code&gt; function.  The indentation was also easy
to mitigate by simply not extracting any whitespace from the source string and passing
in an empty string (&lt;code&gt;""&lt;/code&gt;) for the extracted whitespace.&lt;sup id="fnref:commonIssue"&gt;&lt;a class="footnote-ref" href="#fn:commonIssue"&gt;1&lt;/a&gt;&lt;/sup&gt;
The whitespace issue took a bit more finessing.  To deal with that, I modified the
&lt;code&gt;is_thematic_break&lt;/code&gt; function by adding a switch called
&lt;code&gt;whitespace_allowed_between_characters&lt;/code&gt;.  This allowed the calling function to specify
whether whitespaces were allowed between the characters.&lt;/p&gt;
&lt;p&gt;Once there was a valid start to the front-matter section, the
&lt;code&gt;__handle_document_front_matter&lt;/code&gt; function was called to handle the rest of the processing.
This enabled me to keep the &lt;code&gt;process_header_if_present&lt;/code&gt; function focused on the external
processing of the front-matter section itself.  When the
&lt;code&gt;__handle_document_front_matter&lt;/code&gt; function returned, there were only two possibilities.
If a Front Matter token was created, it was added to the document.
Otherwise, if for any reason it failed, every line that was used in determining that the
Front Matter token could not be created was requeued for reprocessing.  That encapsulation
kept things nice and clean.&lt;/p&gt;
&lt;h3 id="implementing-the-interesting-stuff"&gt;Implementing The Interesting Stuff&lt;a class="headerlink" href="#implementing-the-interesting-stuff" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once there was a Front Matter element start fence was detected, it was up to the
&lt;code&gt;__handle_document_front_matter&lt;/code&gt; function to collect and validate any front-matter that
was collected.  This meant collecting lines until such time as a blank line or a closing
fence was encountered.  With my initial rule of having the start fence and the end fence
containing the same number of characters, the code simply had to check to see if it
encountered the same fence twice: once at the start and once at the end.&lt;/p&gt;
&lt;p&gt;When the end fence was encountered, the processing was passed off to the
&lt;code&gt;__is_front_matter_valid&lt;/code&gt; function to determine if the lines formed a valid front-matter
section and to create a dictionary of those values if it did. The logic for this
initial version of the Front Matter token was very simple.  If the number of spaces were
4 or more, add it to the last line.  If not, check to see if it started with a valid
property name.  Any errors along the way aborted the validation, with a good reason
returned to the caller indicating why it was aborted.&lt;/p&gt;
&lt;p&gt;Finally, upon return to the &lt;code&gt;__handle_document_front_matter&lt;/code&gt; function with a valid
dictionary of values, the &lt;code&gt;FrontMatterMarkdownToken&lt;/code&gt; instance was created.  Following
in the steps of other tokens, it was easy to add all the required fields and properties
needed by the token.&lt;/p&gt;
&lt;h2 id="rounding-out-the-feature"&gt;Rounding Out The Feature&lt;a class="headerlink" href="#rounding-out-the-feature" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was adding the bulk of this feature, I commented out the parts of the scenario
tests that validated the HTML support, the Markdown support, and the consistency checks.
With all the scenario tests passing, I uncommented those parts and cleaned them up.&lt;/p&gt;
&lt;h3 id="adding-html-support"&gt;Adding HTML Support&lt;a class="headerlink" href="#adding-html-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Even though the Front Matter token does not generate any HTML output, I still
needed to add the proper code to deal with adding nothing to the HTML output.
To do this, I added the following code to the &lt;code&gt;transform_to_gfm.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown.extensions.front_matter_markdown_token&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;FrontMatterExtension&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FrontMatterMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_handlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;FrontMatterMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FrontMatterExtension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_front_matter_token&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;handle_front_matter_token&lt;/code&gt; function was simple, as it had to do nothing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_front_matter_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform_state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output_html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="adding-markdown-rehydration-support"&gt;Adding Markdown Rehydration Support&lt;a class="headerlink" href="#adding-markdown-rehydration-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While this was not exactly like adding the HTML support, there were a lot of
similarities.  Instead of adding code to the &lt;code&gt;transform_to_gfm.py&lt;/code&gt; module, code
was added to the &lt;code&gt;transform_to_markdown.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_handlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;FrontMatterMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FrontMatterExtension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rehydrate_front_matter&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As PyMarkdown tokens capture all the information pertaining to how that token was
created, it was easy to write the rehydrate function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rehydrate_front_matter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;previous_token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;previous_token&lt;/span&gt;

    &lt;span class="n"&gt;front_matter_parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boundary_line&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;front_matter_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collected_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;front_matter_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boundary_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;front_matter_parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="adding-consistency-check-support"&gt;Adding Consistency Check Support&lt;a class="headerlink" href="#adding-consistency-check-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I am sure that I will have to add more functions later, when adding this extension,
there were only two functions that I needed to add: &lt;code&gt;__validate_block_token_height&lt;/code&gt; and
&lt;code&gt;__calc_initial_whitespace&lt;/code&gt;.  Both the &lt;code&gt;__validate_block_token_height&lt;/code&gt; function and the
&lt;code&gt;__validate_first_token&lt;/code&gt; function are a long series of &lt;code&gt;if&lt;/code&gt; statements that probably
need refactoring.  But the immediate need was to enable the Front Matter token to be
handled properly by these functions.&lt;/p&gt;
&lt;p&gt;In both cases, I used the &lt;code&gt;is_extension&lt;/code&gt; property of the token to indicate that the token
itself would calculate these values.  For the &lt;code&gt;__validate_block_token_height&lt;/code&gt; function,
I added this code at the start of the &lt;code&gt;if&lt;/code&gt; statement chain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;token_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_block_token_height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and for the &lt;code&gt;__calc_initial_whitespace&lt;/code&gt; function, I added this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;calc_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;had_tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_initial_whitespace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The bodies were easy to fill out because the token is so simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_block_token_height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collected_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_initial_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let me get the good things out of the way first.  It was easy to add the new
Front Matter token, even in a raw form.  While I realize that this token is a very
easy token to add, I was able to add it cleanly and with only minimal issues.  Hopefully,
this means that adding future extensions will be somewhat easy, even if they are not as
easy as this feature.  In addition, the changes to the HTML generator, the Markdown
generator, and the consistency checks were very easy to add.  Once again, that bodes
well for future extensions.  But even so, I was cognizant that most of the ease of
adding this feature came from the fact that this new token is very specialized and
only occurs at the start of the document.  So, I hope things will be good going forward,
but I also realize that I got lucky in this case.  For now, that is a good mindset for
me to have.&lt;/p&gt;
&lt;p&gt;While the bad things is not a really big bad thing, it is still something that I mostly
missed implementing in a real fashion: application configuration.  I have little bits and
pieces of it wired in as dictionaries containing hierarchical structures, I do not have
a good start to end story around application configuration that I can live with.  And
after a few searches for “Python application configuration”, it seems that there are no
easy answers to this need.  That means I will need to write something.  A bit of a miss,
but I can recover from it.&lt;/p&gt;
&lt;p&gt;After taking a bit of a break when writing this article, I reread the above two paragraphs
and realized something that put both paragraphs into a new perspective.  While I was
previously looking at the Front Matter token as present and configuration as “should have
been done in the past”, I believe I had the time frames wrong.  With my new viewpoint,
I realized that I am adding the Front Matter token because I want to use the project now,
and both parts help me accomplish that goal.  In essence, these are both concepts that
are needed for a release.  If I am now worrying about them, it means the release is near!&lt;/p&gt;
&lt;p&gt;Sometimes, it just takes a bit of a break and a fresh point of view.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the Front Matter token is non-GFM compliant, I need to make sure that I have a decent
way to enable it when needed.  Next up, application configuration.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:commonIssue"&gt;
&lt;p&gt;During various points in development, a common issue was the improper passing of the correct whitespace to functions like this.  It was neat using this “issue” as a positive for once. &lt;a class="footnote-backref" href="#fnref:commonIssue" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Cleaning Up The List and Readability</title><link href="https://jackdewinter.github.io/2021/03/08/markdown-linter-road-to-initial-release-cleaning-up-the-list-and-readability/" rel="alternate"></link><published>2021-03-08T00:00:00-08:00</published><updated>2021-03-08T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-03-08:/2021/03/08/markdown-linter-road-to-initial-release-cleaning-up-the-list-and-readability/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/01/markdown-linter-road-to-initial-release-measured-performance-increases/"&gt;last article&lt;/a&gt;, I talked about
applying my newfound knowledge on performance measuring in Python to the PyMarkdown
project.  In this article, I start to focus more on resolving the higher priority issues
from the project’s issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When working on a project like the PyMarkdown …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/01/markdown-linter-road-to-initial-release-measured-performance-increases/"&gt;last article&lt;/a&gt;, I talked about
applying my newfound knowledge on performance measuring in Python to the PyMarkdown
project.  In this article, I start to focus more on resolving the higher priority issues
from the project’s issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When working on a project like the PyMarkdown project for as long as I have, there are
things that you like doing, things that you do not mind doing, and things that you know
you have to do.  For the most part, most of the things that I do related to the project
are in the first two categories.   But strangely enough, the closer I get to a potential
release, the more that I am feeling that things are moving into that third category.&lt;/p&gt;
&lt;p&gt;Maybe it is just that after working on this project for over a year, I do not want it
to go the next level.  Once I release the project, I need to promote the project more
than on my own blog, and that will take time.  I must admit, I have a bit of
a concern that people are going to look at my code and go “why did you do that?”.&lt;/p&gt;
&lt;p&gt;Regardless, I am going to try and clear out the Priority 1 section as much as possible
and get ready for a beta release as soon as I can.  At least, that is what my plan is.
Here is hoping I can stick to it!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/88ad9002b296edc2763e498cb9fc2c99e9e74c60"&gt;25 Feb 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/902fbfbdffb4fb9684e00a8d973e53814d393368"&gt;28 Feb 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="performance-or-readability"&gt;Performance or Readability?&lt;a class="headerlink" href="#performance-or-readability" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After spending the last week working on performance improvements, I was left with one
potential improvement that I did not get around to looking at: string concatenation. As I
have explained in part articles, when I am solving an issue, I work the issue and fit
things together as I go. The rigor that I have built into my development process allows me
the freedom to do that, knowing that I will revisit the code at least once before I commit
it to the repository.  At that time, I know with certainty that I will give the code a
more thorough looking over, guided by the knowledge that the algorithm that the code is
implementing has been tested properly.  That process is just built into how I develop
projects.  And it was because of that rigor that I felt that it was time to give string
concatenation another look.&lt;/p&gt;
&lt;p&gt;When it comes to string concatenation, I figured that if it ever became an issue, I would
just give that code another look.  A such, I just added strings the normal way using the
&lt;code&gt;+&lt;/code&gt; operator.  However, I started to suspect that concatenating strings in this way was an
issue, so I surveyed the project code.  In the process, I found that there are many places
where strings are concatenated using the &lt;code&gt;+&lt;/code&gt; operator and almost none being concatenated
using any of the other methods. Performing some quick “off-the-cuff” performance tests, I
was able to find only miniscule improvement between the various methods of concatenating
strings.  As such, I was faced with a question of whether I wanted to refactor the code for
readability rather than performance.&lt;/p&gt;
&lt;h3 id="how-do-you-define-readability"&gt;How Do You Define Readability?&lt;a class="headerlink" href="#how-do-you-define-readability" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Readability is an interesting concept in software development because often it is thought of
as how easy it is for other people on the team to read it.  This is increasingly confusing
on a project like PyMarkdown where I am the only one on the team.  Technically speaking,
if I can read my own code with decent ease, the code is readable.  I would further argue
that the above definition does not really define what readability is, just what it is
within a limited scope.&lt;/p&gt;
&lt;p&gt;From my point of view, readability is more than that.  Having developed software
professionally in over 6 different languages, I believe that readability is more fluid
that that.  Unless there is a business reason to define it otherwise, my general
definition of readability is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Readability is defined as the confidence that the development team has in the ability of someone, who is outside of the team and is familiar with the given language, to look at the code and to be able to clearly read and understand the code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, obviously there are some caveats, but there it is.  In the case of the PyMarkdown
project, my goal for readability is that I follow standard Python programming practices and
write performant Python code according to those practices.  Following my definition of
readability, as stated above, I expect that a competent Python developer should be able to
look at the source code for the PyMarkdown project and read it without too many issues.
For me, string concatenation using the &lt;code&gt;+&lt;/code&gt; operator is one of those issues that I believe
impedes the readability of the code.  From my viewpoint, there are two other methods of
concatenation that are more readable because they are more concise.&lt;/p&gt;
&lt;p&gt;So, purely from
a position of wanting to increase the readability of the project, I decided to refactor
all string concatenations to those two other forms.  This meant I would need to switch
every string concatenation over to one of the two more readable forms: f-strings and
lists with join statements.&lt;/p&gt;
&lt;h3 id="f-strings"&gt;F-Strings&lt;a class="headerlink" href="#f-strings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Added in Python 3.6, f-strings are a special type of string that combines the previous
ways of formatting strings together in a way that just makes sense.  Take this example
from the &lt;code&gt;container_block_processor&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"{ContainerIndices:ulist_index:"&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ulist_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;";olist_index:"&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;olist_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;";block_index:"&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For debug purposes, this string is being composed of variables and constants weaved
together to create the resultant string.  While it creates a string with the desired
information, I often have a hard time reading strings formatted in that manner.
It is a long sequence of operands over multiple lines, and just seems broken up. Each of
those breaks causes me a bit of confusing when I try and figure out what piece goes
with that other piece.  Therefore, when I try and scan those lines with my eyes, I find
that I need to slow down and parse through the line mentally a couple of times before
getting a good understanding of that function.&lt;/p&gt;
&lt;p&gt;In comparison, here is that same code refactored to use a f-string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{{ContainerIndices:ulist_index:{self.ulist_index};olist_index:{self.olist_index};block_index:{self.block_index}}}"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For me, this is easier to read.  While the string itself is longer and I may have to
scroll to read it, it is one string that describes everything in order.  The “curly-brace”
characters &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; encompasses code that computes a value to be added to the
string.  The sequences &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; are used to add a single one of those characters to
the string.  The f-string itself is denoted by simply adding a &lt;code&gt;f&lt;/code&gt; character to the start
of an otherwise normal string.  It manages to keep the simple things simple.&lt;/p&gt;
&lt;p&gt;While it initially took me a bit to warm up to f-strings, I now find them to be more
readable by far. I can easily scan from left to right in the string and almost instantly
know how the code is going to
compose that string.  But what about strings with a variable number of arguments?  Or
strings that have a separator that would be burdensome to use repeatedly?
That is where lists come in.&lt;/p&gt;
&lt;h3 id="lists"&gt;Lists&lt;a class="headerlink" href="#lists" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While f-strings are very readable, they do not work with an optional number of
arguments.  For those cases, &lt;code&gt;list&lt;/code&gt; objects and their &lt;code&gt;join&lt;/code&gt; function are recommended.
Consider the following code for the &lt;code&gt;debug_string&lt;/code&gt; function of the &lt;code&gt;MarkdownToken&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;add_extra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;":"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;column_row_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"(&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;include_column_row_info&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"[&lt;/span&gt;&lt;span class="si"&gt;%s%s%s&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_row_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_extra&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After various refactors of this function, I had replaced the variable parts of the
string with ternary statements and used a &lt;code&gt;%&lt;/code&gt; style format to stitch those values
together.  But it still looked disjointed to me.  Even after changing the &lt;code&gt;%&lt;/code&gt; style
format strings into f-strings, I was not happy with how it read.  The part that was
bothering me was that the optional parts of the string were not clearly being represented
as optional when I read them.  Basically, if I just looked at the last line of that
function, I felt that each one of those strings would contribute all the time, not
optionally.  I just felt that was not a good thing.&lt;/p&gt;
&lt;p&gt;Therefore I switched the optional parts of that concatenation to a &lt;code&gt;list&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;debug_parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;include_column_row_info&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;debug_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"({self.line_number},{self.column_number})"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;debug_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;":{self.extra_data}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;debug_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug_parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For me, this reads cleaner than the previous iteration of this function.  The start of the
string and the end of the string are clearly stated.  The optional parts format their data
only if needed, and only then do they calculate and add those formatted results.  For me,
this is more readable because it clearly delineates between the optional parts of the
string and the mandatory parts of the string.&lt;/p&gt;
&lt;p&gt;But there are also other areas where I find using lists to concatenate strings useful.
Take this code from one of the &lt;code&gt;__init__&lt;/code&gt; functions for a token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_data_separator&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_data_separator&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;list_start_content&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like my statements above, I do not find this code easy to read.  When I try and
read this code, the &lt;code&gt;MarkdownToken.extra_data_separator&lt;/code&gt; takes up most of my attention
as I try and make sure each one is in the right place.  Instead of focusing on what
is between those strings, I find myself focusing on those strings.  As such, I rewrote
it using lists as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_data_separator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_start_content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I find this format a lot easier to read.  I can see that I have a list
of items and that they will be joined using the &lt;code&gt;MarkdownToken.extra_data_separator&lt;/code&gt;
string.  That fact is mentioned exactly once, and then I do not have to concern myself
with it again.  After I have read that, I can then clearly see the list of items that are
going to be joined together, allowing me to focus on the contents of that list instead of
the separator. For me, that is a win!&lt;/p&gt;
&lt;h3 id="after-four-days"&gt;After Four Days&lt;a class="headerlink" href="#after-four-days" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It took me roughly four days of evenings to go through the PyMarkdown code base and move
every string concatenation over to one of the above methods.  There were times during that
effort that I felt like I should give up, but I persevered.  And once I got to the end
of that huge effort, I almost immediately saw the payoff.  Looking over code that I
had changed during those four days, the code looked a lot more readable to me.  In
addition, finding string concatenations was a lot easier now.  Instead of searching for
the &lt;code&gt;+&lt;/code&gt; operator, which is also used in numeric calculations, I could search for the
sequence &lt;code&gt;f"&lt;/code&gt; to look for the search strings.  By searching for &lt;code&gt;.join(&lt;/code&gt;, I was able to
find both string concatenations and token list concatenations, but my naming practices
make differentiating those two groups of concatenations easy.&lt;/p&gt;
&lt;p&gt;It was a slog, but I believe my choice to improve readability with respect to string
concatenations was the correct one.  Not only could I find any concatenations easier
than before, but when I read the concatenations, they just were easier to read.
I just hope others think the code is more Pythonic and more readable as well.&lt;/p&gt;
&lt;h2 id="whittling-down-the-issues-list"&gt;Whittling Down The Issues List&lt;a class="headerlink" href="#whittling-down-the-issues-list" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having been on the issues list for a long time, I decided that I needed to make a good
dent in the issues list, specifically the items dealing with Hard Line Breaks.  I had
fixed some issues with Hard Line Break tokens in the last month or so, and I figured it
would be a good time to continue that effort.&lt;/p&gt;
&lt;p&gt;The first issue that I picked up on this theme was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;hard&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt;?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking through all the examples and scenarios that I have already implemented, I was
astounded that I did not have any scenarios where there was a Hard Line Break element
at the start of the line.  After adding four very simple tests, I executed those tests,
and the only issue was the firing of an &lt;code&gt;assert&lt;/code&gt; statement in the
&lt;code&gt;__verify_first_inline_paragraph&lt;/code&gt; of the consistency checks.  That was issue was remedied
within 10 minutes, and I then moved on to the next issue.&lt;/p&gt;
&lt;h3 id="hard-breaks-and-inline-types"&gt;Hard Breaks And Inline Types&lt;a class="headerlink" href="#hard-breaks-and-inline-types" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next item that I picked up regarding Hard Line Breaks was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;hard&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nv"&gt;followed&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;inline&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this item, I looked through the code base and found most of the examples that I
was looking for, but I felt that they were scattered all over the place.  With an eye to
resolve this item in the shortest time possible, with time for refactoring later, I simply
went through the list of available inline tokens and created functions
&lt;code&gt;test_hard_line_breaks_extra_03x&lt;/code&gt; to &lt;code&gt;test_hard_line_breaks_extra_03i&lt;/code&gt; for the
one Hard Line Break sequence &lt;code&gt;\&lt;/code&gt; and functions &lt;code&gt;test_hard_line_breaks_extra_04x&lt;/code&gt; to
&lt;code&gt;test_hard_line_breaks_extra_04i&lt;/code&gt; for the other Hard Line Break sequence &lt;code&gt;{space}{space}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Due to a lot of hard work in previous weeks, I was lucky in that I only had to make a
small change to how the &lt;code&gt;__complete_inline_block_processing&lt;/code&gt; function changed the
&lt;code&gt;end_string&lt;/code&gt; variable.  Double checking my work and running the scenario tests again,
just to make sure, I resolve this item and moved on.&lt;/p&gt;
&lt;h2 id="hard-line-break-grab-bag"&gt;Hard Line Break Grab Bag&lt;a class="headerlink" href="#hard-line-break-grab-bag" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Apart from the “big” item itself, what was left was a bit of a grab bag of issues:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;hard&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nv"&gt;followed&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;spaces&lt;/span&gt;, &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nv"&gt;emphasis&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;variations&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;extra&lt;/span&gt; &lt;span class="nv"&gt;spaces&lt;/span&gt; &lt;span class="nv"&gt;after&lt;/span&gt;, &lt;span class="nv"&gt;etc&lt;/span&gt;.
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;variation&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt;, &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nv"&gt;hard&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;, &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nv"&gt;something&lt;/span&gt; &lt;span class="nv"&gt;like&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt; &lt;span class="nv"&gt;again&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;.&lt;span class="nv"&gt;e&lt;/span&gt;. &lt;span class="nv"&gt;make&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;x02&lt;/span&gt; &lt;span class="nv"&gt;splitter&lt;/span&gt; &lt;span class="nv"&gt;come&lt;/span&gt; &lt;span class="nv"&gt;into&lt;/span&gt; &lt;span class="nv"&gt;affect&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I hopefully knew what I intended when I wrote those down, I was left a bit in the
dark as I now read them.  I knew that the lines that contain the sequence &lt;code&gt;/x02&lt;/code&gt; deal with
SetExt Heading tokens, as that is the only place that I used that sequence as a splitter.
So, between what I knew and what I could guess, I came up with five new scenario tests
that tried to capture the spirit of what I thought those statements meant.&lt;sup id="fnref:andYes"&gt;&lt;a class="footnote-ref" href="#fn:andYes"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;There was one issue that I needed to deal with after executing the new scenario tests.
In the &lt;code&gt;InlineProcessor&lt;/code&gt; class, the tokens were not being generated correctly
when dealing with leading spaces on a line that was preceded by a Hard Line Break
within the confine of a SetExt Heading element.  After I bit of debugging, I was
able to figure out the right setting for the three variables in question, and that
was fixed.  To balance that out, I needed to add code with the inverse functionality
to the &lt;code&gt;__verify_next_inline_hard_break&lt;/code&gt; function of the consistency checks to
correctly compensate for that first change.&lt;/p&gt;
&lt;p&gt;Another execution of the scenario tests, another double check that things were good,
and I was on to another issue.&lt;/p&gt;
&lt;h3 id="tabs"&gt;Tabs&lt;a class="headerlink" href="#tabs" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I grabbed the following item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;stop&lt;/span&gt; &lt;span class="nv"&gt;gap&lt;/span&gt; &lt;span class="nv"&gt;solution&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;handling&lt;/span&gt; &lt;span class="nv"&gt;Tabs&lt;/span&gt; &lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="nv"&gt;tab&lt;/span&gt; &lt;span class="nv"&gt;work&lt;/span&gt; &lt;span class="nv"&gt;can&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it was with the intent to document what needed to be done to properly handle tab
characters in various situations.  It was with delight that I looked at and experimented
with the source code to find out that I was almost there. With one small change to the
&lt;code&gt;parse_inline&lt;/code&gt; function, I was able to get all the GFM specification examples with
tabs characters to work.&lt;/p&gt;
&lt;p&gt;So, the short story for this item is that there was nothing else that currently needed
fixing with respect to tab characters.  The long story for this item is that I have over
2000 tests for various parts of the linter and less than 20 tests for tab characters.  As
such, I added a new item to the issues list to deal with this later.  I am not sure how
many users have tab characters in their documents, so right now, the priority of that
item’s priority is just a guess, based on my usage.&lt;/p&gt;
&lt;h3 id="false-alarms-but-good-alarms"&gt;False Alarms But Good Alarms&lt;a class="headerlink" href="#false-alarms-but-good-alarms" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having poked around the code while performing the refactor that I talked about
in the above section on
&lt;a href="https://jackdewinter.github.io/2021/03/08/markdown-linter-road-to-initial-release-cleaning-up-the-list-and-readability/#performance-or-readability"&gt;Performance or Readability&lt;/a&gt;,
I noticed that two of the
functions that I expected to have code in their body were mysteriously blank. As
such, I added the following items to the issues list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;__calculate_shortcut_collapsed_deltas&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="k"&gt;at&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;why&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;shotrcut&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;over&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;seem&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="k"&gt;any&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking into this, I did my research and added two extra scenario tests to be sure of
my results.  In both cases, everything was fine.  Digging deeper into the code, I found
the answer to why these functions were okay with an empty body.  As both of those two
scenarios rely heavily on the link label, which is common to all link types, any
calculations for the size of the link label are already factored into the code.
However, to prevent myself from looking at this again, I added some extra comments to
indicate what I had found, and why these functions being empty was okay.&lt;/p&gt;
&lt;h3 id="some-final-cleanup"&gt;Some Final Cleanup&lt;a class="headerlink" href="#some-final-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I picked this item from the list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_paragraph_series_m_ul_t_nl_ulb_nl_tb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hoped it was going to be simple to resolve.  When I created the M-series of paragraph
scenario tests, I noted that I did not have any more complicated tests and suggested
a variation of a test with multiple lines.  Creating a few variations on the initial
scenario test with more complex data, I added three tests with variations on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
  &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="c1"&gt;---&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I tested more than three scenario tests, I did not find anything wrong with any
of the tests that I tried.  Instead of adding a whole bunch of scenario tests with only
a guess that there might be a future problem, I whittled those tests down to the three
tests that I did add.&lt;/p&gt;
&lt;h2 id="getting-back-to-performance"&gt;Getting Back To Performance&lt;a class="headerlink" href="#getting-back-to-performance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a decent handful of issues resolved from the issues list, there was a tiny bit of
extra cleanup I wanted to do with respect to the plugins.  Having looked at their code
during breaks, I knew there were a couple of small changes I wanted to make before release.
My feeling was that if I waited until after release, those changes would become breaking
changes, and I wanted to avoid that if possible.&lt;/p&gt;
&lt;h3 id="calling-plugin-functions-only-when-necessary"&gt;Calling Plugin Functions Only When Necessary&lt;a class="headerlink" href="#calling-plugin-functions-only-when-necessary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having already reaped benfits from calling two of the plugin functions
&lt;a href="https://jackdewinter.github.io/2021/03/01/markdown-linter-road-to-initial-release-measured-performance-increases/#plugin-performance"&gt;only when necessary&lt;/a&gt;,
I decided that those changes were a good practice that I wanted to spread to each of the
functions that comprise the plugin’s interface.  I quickly made similar changes to the
&lt;code&gt;completed_file&lt;/code&gt; and &lt;code&gt;starting_new_file&lt;/code&gt; functions, went to measure their change, and…
well… I was not sure.&lt;/p&gt;
&lt;h3 id="rethinking-performance-measurements"&gt;Rethinking Performance Measurements&lt;a class="headerlink" href="#rethinking-performance-measurements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In previous sections on performance, I was thinking about performance as actual clock
time.  Spending some time thinking about this while walking our dog, I realized that
the main issue was that there was always going to be some difference in timing, even
if I took two measurements minutes apart from each other.  If something external to
the PyMarkdown project hit my hard drive when I was taking measurements, it could cause
the measured time to be off.  So, was clock time the best measurement to use?&lt;/p&gt;
&lt;p&gt;It was then that I decided to move from measuring clock time to measuring clock time
percentages.  While I was pretty sure that if I took three samples that I would get
different timings in each sample, I had a high degree of confidence that the percentage
of the time spent in each function would remain relatively the same.  Running some sample
tests, this theory bore out in practice.  While there were some
differences in the percentages of the top 25, they were mostly negligible.  When
there were differences, it was most often from the &lt;code&gt;print&lt;/code&gt; function or one of the
functions in the &lt;code&gt;io.builtin&lt;/code&gt; module.  Since those two function groups are used for
input and output, it made sense that there would be variations.&lt;/p&gt;
&lt;p&gt;Throwing together a simple Excel spreadsheet, I now had what I believe to be a better
way to measure performance.&lt;/p&gt;
&lt;h3 id="using-the-new-process"&gt;Using The New Process&lt;a class="headerlink" href="#using-the-new-process" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using that new process, I was able to compose a new spreadsheet to track any changes
and I found only negligible improvements.  I was sure that I was going to get a performance
boost out of those changes, so I checked the code base again and I found the issue:
the templated plugins.  When I was adding the original set of plugins to be implemented, I
added all the plugins that I had planned to implement with templated functions.  Those
templated function were placeholders in the plugin that did not have any body to the
function other than a &lt;code&gt;pass&lt;/code&gt; statement.  My thinking was that when I was ready to write
the code for the plugin, I could start right away without having to add templated stuff.&lt;/p&gt;
&lt;p&gt;While that worked as planned, it was now proving to be a performance issue.  Roughly one
third of all plugins have been coded, but all the plugins were being called regardless of
whether they had
any code other than a &lt;code&gt;pass&lt;/code&gt; statement in their function body.  So, I quickly went
through the plugins and removed any plugin function that did not have any meaningful
statements.
Once I completed that task, I measured the performance again, and entered the results into
&lt;a href="https://github.com/jackdewinter/pymarkdown/raw/b15a9d1da2d4938f97ef8956c3002a19f0916fe3/perf/2020Feb27%20-%20After%20initial%20refactor%20on%20plugins.xlsx"&gt;this spreadsheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It took me a minute to understand what I was looking at, but it then made sense to me. The
&lt;code&gt;next_line&lt;/code&gt; functions were a large part of the templated plugin functions that were
removed, so the measurements for that function dropped off the list.  This effectively
created n “vacuum” at the top of the measurements, causing other measurements to increase
slightly to compensate for it.   Specifically, the &lt;code&gt;debug&lt;/code&gt; function went from 10.49% of the
execution time to 11.51% of the execution time not because of any changes, but because
the item before it in the list was no longer there.  With that item no longer occupying
that “space”, the &lt;code&gt;debug&lt;/code&gt; function occupied a pro-rated portion of what that time that
item used to occupy.&lt;/p&gt;
&lt;p&gt;Running two extra sets of performance tests, I was able to replicate this behavior of
these performance test both times.  Looking at the clock time for each function alone,
I am not sure if I would have made the same observation as I did with the percentages,
so I was glad that I switched to it!&lt;/p&gt;
&lt;h3 id="setting-context"&gt;Setting Context&lt;a class="headerlink" href="#setting-context" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While it was more evident before the previous performance changes, there was also an issue
with the &lt;code&gt;set_context&lt;/code&gt; function.  Each time any of the plugin functions were called, a
separate call to the &lt;code&gt;set_context&lt;/code&gt; function was being made to establish the context
for any reporting that was done.  I am not sure why I thought that was a good idea,
but it looked like it was causing performance issues before the last change. Now that
I looked at the performance numbers, it was low down on the list, almost inconsequential.&lt;/p&gt;
&lt;p&gt;Sitting back and thinking about it, the reduction of the impact of the &lt;code&gt;set_context&lt;/code&gt;
function on the performance made sense to me.  With fewer plugins having eligible functions
to call, the number of times that the &lt;code&gt;set_context&lt;/code&gt; function was called was reduced at
the same rate.  Just as the &lt;code&gt;next_line&lt;/code&gt; function dropped off the top 25 list, the
&lt;code&gt;set_context&lt;/code&gt; function also dropped off that same list.&lt;/p&gt;
&lt;p&gt;But looking forward, I knew that those functions would soon be resurfacing on the
top 25 list.  I had removed those templated methods in the last section, as they were not
being used.  Somewhere between now and the intial release of the project, I know I have
plans to implement those missing plugins, thereby increasing their impact on the
performance once again.  So, while I could easily say I would do it later, it just made
more sense to me to do it now while I was in the code.  Also, by getting the refactoring
out of the way now, it would give me more time.&lt;/p&gt;
&lt;p&gt;It was a rather quick set of changes to make, and it was done within a couple of hours
including running the scenario tests and gathering the performance measurements.
Looking at the
&lt;a href="https://github.com/jackdewinter/pymarkdown/raw/a8b6f4edc84ab1644c54f3e36b19196fff66b952/perf/2020Feb28%20-%20After%20refactor%20on%20plugins%20to%20remove%20set_context.xlsx"&gt;measurements&lt;/a&gt;,
I had to look far down the list to find the plugin entries, but I found them and
added them to the spreadsheet below the normal area.  Before I removed the templated
functions, there were a combined 62,000 calls to the &lt;code&gt;next_line&lt;/code&gt; and &lt;code&gt;next_token&lt;/code&gt;
functions.  For those calls, there were 1.2 million calls to &lt;code&gt;set_context&lt;/code&gt; which took
0.16 seconds or 3.49% of the execution time.&lt;/p&gt;
&lt;p&gt;Based on those numbers alone, I felt like refactoring that now was still a good thing
to do from a performance point of view.  Maybe the effects of the change would not
show up right away, but I knew that it was quelling a future performance issue that
would have definitely occurred otherwise.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I am not sure I speak for everyone, I have an inkling that most software
developers exist on a spectrum of “so what” to “what if they say…” with respect to
others seeing their code.  If that were not the case, linters for various languages
and numerous articles on how to contribute successfully to a code review would not be
needed.  I know I am using PyLint and Flake8 as linters, and Black as a style formatter,
so I hope I am covered in those areas.  It is the other areas that I am concerned about.&lt;/p&gt;
&lt;p&gt;But, in my normal guest to continually learn, I know that if I do not put the code out
there, I will not get that feedback that I need to learn.  I do know that the parser behind
the linter passes every example in the GFM specification, along with every other case
that I have come up with and run against CommonMark 0.92.  I do know that I have a good
handle on what the initial group of rules should be, based on the rules as defined by
MarkdownLint.  I must put my faith in the work that I have done to architect
and design the project to meet my goals.&lt;/p&gt;
&lt;p&gt;With that bit of deep thinking out of the way, I am looking at the issues list with
a new eye to try and figure out what the minimum set of features that I need to have
really is.  What are the things that I will regret not having done before I release?
The answer to that question, however, is something for another article!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having resolved a number of other items on the issues list, there is once glaring one
that I need to resolve before I can use this project myself: a YAML/simple front loader.
Without it, using this linter on my own blog posts is a no-go.  As such, I tackle that!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:andYes"&gt;
&lt;p&gt;And yes, if that statement sounds wishy-washy, it is because it is. &lt;a class="footnote-backref" href="#fnref:andYes" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Measured Performance Increases</title><link href="https://jackdewinter.github.io/2021/03/01/markdown-linter-road-to-initial-release-measured-performance-increases/" rel="alternate"></link><published>2021-03-01T00:00:00-08:00</published><updated>2021-03-01T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-03-01:/2021/03/01/markdown-linter-road-to-initial-release-measured-performance-increases/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/22/markdown-linter-road-to-initial-release-starting-performance/"&gt;last article&lt;/a&gt;, I focused on
starting to gain experience with finding and improving performance on the PyMarkdown
project using cPython and SnakeViz. In this article, I talk about applying that
knowledge and doing more performance tuning on the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the last article, I earned first-hand …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/22/markdown-linter-road-to-initial-release-starting-performance/"&gt;last article&lt;/a&gt;, I focused on
starting to gain experience with finding and improving performance on the PyMarkdown
project using cPython and SnakeViz. In this article, I talk about applying that
knowledge and doing more performance tuning on the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the last article, I earned first-hand experience in profiling the PyMarkdown
project.  While getting that learning accomplished, I also managed to get a big
performance boost from writing a simple facade in
front of the Python logging libraries.  That is probably the only simple and big
performance boost that I am going to get, so I know I am going to have to start
digging to find the more difficult items to optimize.  And I am ready for that
work!&lt;/p&gt;
&lt;p&gt;From experience, I am also aware that not everything I am going to try will work.
I was lucky with the logging facade… that was just one big performance issue that
was extremely obvious.  This effort is still new, so I am hoping that I am still in
the honeymoon period.  While it is not the same as a
&lt;a href="https://politicaldictionary.com/words/honeymoon/"&gt;political honeymoon period&lt;/a&gt;,
it does share some characteristics with it.  Namely, it is during this period that
a lot of the performance improvements are obvious or easy to arrive at.  They might
entail some work, but there will be a very low failure rate.&lt;/p&gt;
&lt;p&gt;Here is hoping that the honeymoon lasts for a while longer!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/88ad9002b296edc2763e498cb9fc2c99e9e74c60"&gt;13 Feb 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/902fbfbdffb4fb9684e00a8d973e53814d393368"&gt;20 Feb 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="dipping-my-toes-into-the-waters-of-performance"&gt;Dipping My Toes Into the Waters of Performance&lt;a class="headerlink" href="#dipping-my-toes-into-the-waters-of-performance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was with a lot of nervousness that I started to work on performance improvements to
the project.  I know from experience that I can easily get lost in improving the
execution of an application, and this project is no different.  I need to make sure
that I focus on keeping this effort timeboxes so that I can get back to getting ready
for the initial release without too much of a delay.&lt;/p&gt;
&lt;p&gt;In documenting this work, I have tried to keep the explanations to a minimum, but I
am also trying to balance that with solid explanations of why I chose that
improvement and the thought processes around that decision.  Please bear with me as
I try and find that balance point between those two competing goals!&lt;/p&gt;
&lt;h3 id="starting-at-the-beginning"&gt;Starting At The Beginning&lt;a class="headerlink" href="#starting-at-the-beginning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using
&lt;a href="https://docs.python.org/3/library/profile.html#module-cProfile"&gt;cProfile&lt;/a&gt;
and
&lt;a href="https://jiffyclub.github.io/snakeviz/"&gt;SnakeViz&lt;/a&gt;,
I captured information about running the PyMarkdown project over the Markdown pages that
comprise this website.  This is what I initially saw:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-1.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;Looking at that information, the two lines that jumped out at me were the first
line, &lt;code&gt;debug&lt;/code&gt;, and the fourth line, &lt;code&gt;isEnabledFor&lt;/code&gt;.  These two functions were both part
of the recent work I did to improve the speed of debugging.  As logging was still showing
up high on the list, it was obvious to me that I needed to take another look and see
if I could fine tune it anymore.&lt;/p&gt;
&lt;p&gt;After looking at the code, the one line that seemed to me to be the most expensive was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabledFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The way I thought about it, every time that the &lt;code&gt;debug&lt;/code&gt; logging method was called, this
function was being called in the base of the Python &lt;code&gt;logging&lt;/code&gt; library.  While it was okay
to have that happen, I decided that it was too expensive to happen every time that
function was called, and it needed to be rewritten.&lt;/p&gt;
&lt;p&gt;To reduce the cost of calling that library function, it was necessary to change the
logging requirements of the project to achieve a bit of “wiggle room” to allow for the
change to
occur.  In this situation, the requirement that I changed was the ability to dynamically
change the logging level at any time.  Because of the way that the PyMarkdown project
is setup, it is highly unlikely that anyone will want to change the logging level in
the middle of a Markdown file scan.  As such, it seemed like it was a good thing to
trade off on.&lt;/p&gt;
&lt;p&gt;To replace that one line, I started by adding some extra code to the &lt;code&gt;ParserLogger&lt;/code&gt;
class as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;__global_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_logger&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_logger&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_info_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabledFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_debug_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabledFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__local_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserLogger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__global_count&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__reset_if_needed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ParserLogger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__global_count&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__local_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__local_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserLogger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__global_count&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_info_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabledFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_debug_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabledFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sync_on_next_call&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Sync the local instance of the logger on the next call.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;ParserLogger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__global_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of calling the &lt;code&gt;isEnabledFor&lt;/code&gt; function each time, I added some code to
cache the results of calling that function in &lt;code&gt;DEBUG&lt;/code&gt; mode.
To keep the ability to change the logging level alive, I added the &lt;code&gt;sync_on_next_call&lt;/code&gt;
function to set a class level member variable.  Then, instead of calling the
&lt;code&gt;isEnabledFor&lt;/code&gt; function, I replaced that line with these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__reset_if_needed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_debug_enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My hope was that by replacing the library call with the cached values, it would
improve performance.  But, as with any performance change, the only way to check is
to run tests after the change to show any changes.  Running those tests again, this
is the information that SnakeViz showed:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-2.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;The results?  The total time for &lt;code&gt;debug&lt;/code&gt; went from 1.3 seconds in first place to 0.5
seconds in fifth place.  The entry for &lt;code&gt;isEnabledFor&lt;/code&gt; went from 0.7 seconds in fourth
place to so far down on the list that I did not bother looking for it.  It was just the
first improvement, but that was a good one!  It took me only minutes to finish up
that change by implementing the same functionality for the &lt;code&gt;INFO&lt;/code&gt; related functions, before
moving on to the next change.&lt;/p&gt;
&lt;h2 id="plugin-performance"&gt;Plugin Performance&lt;a class="headerlink" href="#plugin-performance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before talking about this change, I want to address something important with measuring
performance: the measurements are volatile.  Especially with very fine differences
between measurements, it is very to measure the performance of whatever is
being changed without any changes, apply those changes, and then measure the performance
again with the changes.  In my case, I get things ready to go, use Git’s &lt;code&gt;stash&lt;/code&gt; command
to save the changes, restoring the stash before I take the second set of measurements.
If I had not done that, I would have been very surprised that the time taken for the
&lt;code&gt;debug&lt;/code&gt; statement to execute had crept up about 0.15 seconds.  I’ll speak about that
more at the end of this section.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-3.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;Examining the performance samples, the two lines that struck me as odd were the third line
containing &lt;code&gt;next_line&lt;/code&gt; and the fourth line contained &lt;code&gt;next_token&lt;/code&gt;.  Both these functions
exist as part of the plugin support and I could not think of any existing plugin that
required an examination of both lines and tokens.  At the same time, within a given
range, those two duration measurements were equal.&lt;sup id="fnref:whatIsEqual"&gt;&lt;a class="footnote-ref" href="#fn:whatIsEqual"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Given the requirement that PyMarkdown plugins only need to be called when they implement
a given function, I did some digging and tested this assignment out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_next_token_implemented_in_plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"next_token"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on some digging I did, this assignment sets the value of the member variable
&lt;code&gt;__is_next_token_implemented_in_plugin&lt;/code&gt; to indicate whether a given plugin
implements a given function, in this case the &lt;code&gt;next_token&lt;/code&gt; function.  After tests
confirmed that it was working, I added some extra code to the &lt;code&gt;apply_configuration&lt;/code&gt;
function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_next_token_implemented_in_plugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enabled_plugins_for_next_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, in the &lt;code&gt;next_token&lt;/code&gt; function of the &lt;code&gt;PluginManager&lt;/code&gt; class, I changed the
plugin notification code from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enabled_plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enabled_plugins_for_next_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result was that the plugin function &lt;code&gt;next_token&lt;/code&gt; was only called when it was
defined in the plugin itself, not in the base class.  After repeating this process for
the &lt;code&gt;next_line&lt;/code&gt; function, I ran the performance tests again:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-4.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;Instead of those values both being called, it now looked like the roughly 5.6 seconds
was being split between the two of them.  Another good start!&lt;/p&gt;
&lt;p&gt;As for the increase in the &lt;code&gt;debug&lt;/code&gt; function execution time?  I am not sure what
did it, but the total time duration was roughly equal between the before and after
samples, as were the next 2 to 3 items in the sample.  That means the process is working!
But if I was only comparing the sample to the previous sample taken under different
circumstances, I may have come to some other conclusion.  The key to getting these
good measurements was to ensure I was taking the before and after measurements within
minutes of each other.&lt;/p&gt;
&lt;h3 id="excessive-use-of-the-len-function"&gt;Excessive Use of the Len function&lt;a class="headerlink" href="#excessive-use-of-the-len-function" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Following my now established process, I ran the performance tests again to look for the
next item that caught my eye:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-5.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;This time, it was the line that includes &lt;code&gt;built-in method builtins.len&lt;/code&gt;.  Parsing any
kind of language is string intensive, so I did expect this measurement to be high, but
I did not expect it to be that high.  Digging into the code, I found a few things
that I thought I could change to make the code perform better.&lt;/p&gt;
&lt;p&gt;The first thing that I found were debug statements that included calls to &lt;code&gt;len&lt;/code&gt; that
did not provide any additional information.  Statements like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"parsed leaf&amp;gt;&amp;gt;$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"parsed leaf&amp;gt;&amp;gt;$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where the first statement is already implicitly providing the length of the array by
simply counting the number of elements displayed in the array’s debug output.  By
removing the second statement, I was able to make it more performant without changing
any information, just the way the information would be obtained in the future. Similarly,
there were cases where I was just logging information in the form of the second statement,
where the information from the first statement would suffice.  Both those changes were
easy to look for and make across the code base.&lt;/p&gt;
&lt;p&gt;Another change that I did was to cache the results of the &lt;code&gt;len&lt;/code&gt; function for a given
string within a single function.  There were quite a few cases where I was calling
the &lt;code&gt;len&lt;/code&gt; function 2 to 4 times within a function, or more if I called it from within
a loop.  In those cases, I found the first place in that function where it was used, say:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_parse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and replace it with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;string_to_parse_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;string_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;string_to_parse_length&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that code tested, I then proceeded to replace every other instance of
&lt;code&gt;len(string_to_parse)&lt;/code&gt; inside of that function with &lt;code&gt;string_to_parse_length&lt;/code&gt;
before testing again.&lt;/p&gt;
&lt;p&gt;That set of changes resulted in many modifications over most of the files in the project,
but it was accomplished quickly.  Once completed, the performance tests showed the
results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-6.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;The line that includes &lt;code&gt;built-in method builtins.len&lt;/code&gt; went from 6th place at
0.42 seconds to 17th place at 0.11 seconds.  At a solid 0.3 second difference, it
was a good optimization!&lt;/p&gt;
&lt;h3 id="going-back-to-logging"&gt;Going Back To Logging&lt;a class="headerlink" href="#going-back-to-logging" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Performance is not something you can measure once and be done with it.  It must be
continuously examined again and again to see how the program peforms under different
circumstances.  When I looked at this set of performance tests:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-7.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;I wondered if I had stopped optimizing the logging code too early.  As that code is the
most often called code in the project, I decided to spend some extra time looking at it.
When I did, I realized that if I traded my Don’t-Repeat-Yourself code for performance on
a limited scope, I could rewrite:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__reset_if_needed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ParserLogger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__global_count&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__local_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__reset_cache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By doing this, I was avoiding a function call by performing the same action
directly in the function, often referred to as inling.  Only in
those cases where the counts had changed, did the code need to reset the cache.
Given that I was pretty sure that changing logging levels was going to be an
extremely rare occurrence, I felt that this was an acceptable trade-off.&lt;/p&gt;
&lt;p&gt;This was a very localized change, so it was easy to make and test:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-8.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;With that small change, I reduced 1.8 seconds of duration between the first two lines
with 0.7 seconds of the new first line.  That was worth it!&lt;/p&gt;
&lt;h3 id="bending-the-rules-is-part-of-the-game"&gt;Bending The Rules Is Part Of The Game&lt;a class="headerlink" href="#bending-the-rules-is-part-of-the-game" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Looking at the next set of outputs from the performance tests:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-9.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;one thing was obvious. I was not going to be able to avoid looking at the
&lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function any longer.   But this one function was a tough
one.  This is the main function through which all the container processing and leaft
processing gets handled.  Without
it, the container block processing wouldn’t be done, and it wouldn’t be handing off the
leaf block processing as designed.  This was a pivotal function, but I was not seeing any
obvious places where I could make a good impact on the code’s performance.&lt;/p&gt;
&lt;p&gt;Thinking a bit about how I made the requirements trade-offs for the previous items,
I started thinking about how I could make a similar trade in requirements here.
Unfortunately, nothing was coming to mind at all.  That is, until I looked through
the function and realized that there was one thing I hadn’t considered: removing the
logging.&lt;/p&gt;
&lt;p&gt;Now, removing the logging itself would be harmful, as that logging had
helped me debug issues quite often, so the cost of outright removing the logging was
prohibitively high.  It would be like trying to tie your shoes in a knot while wearing a
cast on one hand and slinging a yoyo with the other hand.  However, I realized that if
I commented out the log statements, it would have the same effect as removing the log
statements.  Also, by commenting out those lines, I kept them in the project so that I
could add them back in when I needed them but leave them out during normal operation.&lt;/p&gt;
&lt;p&gt;The trade-off here?  Time to debug would increase if I needed to uncomment the debug
statements.
Thinking about it for a bit, I decided that for this function it was a good trade-off
and commented out every log statement inside of the function.  That resulted in the
following results from the performance tests:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-10.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;From 3rd place with 0.55 seconds down to 6th pace with 0.29 seconds.  At roughly half
the previous execution time, it was a good trade-off to make.  Granted, it is bending
the rules, but in a good way.&lt;/p&gt;
&lt;h3 id="there-is-a-limit-to-bending-the-rules"&gt;There Is A Limit to Bending The Rules&lt;a class="headerlink" href="#there-is-a-limit-to-bending-the-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After looking at the current performance test results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-11.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;it seemed like it was a good process to try again with the &lt;code&gt;__process_inline_text_block&lt;/code&gt;
function.  In my mind, I was worried that I was using this manner of performance
improvement too often, and I needed a hard limit.  In looking at this method,
through which all inline processing is done, I figured I was still within the limits
that I found acceptable.  I was close to what I considered the limit to be, but I
was confident that this change was within that bounds of that limit.&lt;/p&gt;
&lt;p&gt;With that, I repeated the commenting process that I used in the last section on this
function, with the following results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-12.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;While not as dramatic as before, I dropped the &lt;code&gt;__process_inline_text_block&lt;/code&gt; item from
3rd place and 0.37 seconds down to 13th and 0.12 seconds.&lt;/p&gt;
&lt;h3 id="having-some-fun"&gt;Having Some Fun&lt;a class="headerlink" href="#having-some-fun" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the fun things I love about doing performance testing and improving is that you get
to experiment with different approaches to see how they fare.  Looking at the latest
results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-13.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;I knew that I was going to have to get creative with the &lt;code&gt;index_any_of&lt;/code&gt; function.  It is
a simple function but one that is heavily used in the &lt;code&gt;InlineProcessor&lt;/code&gt; class.  During
the parsing of an inline block, the processor looks ahead to find the character which is
any one of a set of characters that denotes the possible start of an inline sequence.
Hence, the &lt;code&gt;index_any_of&lt;/code&gt; is used to find the first instance of any of those characters.
The original version of this function was as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;source_text_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;source_text_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;find_any&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;
        &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Knowing that this enhancement would soon make my to-do list, I had been experimenting on
different algorithms on the side, trying to find one that was better than what I had.
While I tested four variations that failed, I found one that performed better if
the number of characters to find was under 15 characters.&lt;/p&gt;
&lt;p&gt;During my reading on performance, one thing that was mentioned frequently was that many
of the Python builtins were more performant than Python code because it was precompiled
and optimized.  Taking a hint from that, my wining solution rewrote the above function
to leverage the builtin &lt;code&gt;index&lt;/code&gt; as much as possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;first_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_character&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;find_any&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_character&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;first_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;first_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;first_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;first_index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my simple tests, if I kept the length of the &lt;code&gt;find_any&lt;/code&gt; variable to 15
characters or less, it won over the other algorithms.  But those “test” results
did not mean anything if the same impact was not present when tested against the
project’s code.  So, it was time to test it out on the ‘real’ code:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-14.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;Moving from 3rd place with 3.8 seconds down to 9th place with 1.7 seconds of duration
was impressive! With my experience in performance tuning, I wasn’t sure if this was
one of those cases where it looked good in simple tests but failed when inserted
into the host project.  I was glad that it worked well in both situations!&lt;/p&gt;
&lt;h3 id="bending-or-breaking"&gt;Bending Or Breaking?&lt;a class="headerlink" href="#bending-or-breaking" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Remember back a couple of sections where I said there were times to bend the rules and
there were limits to how much you could bend them?  It was after looking at these
test results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-15.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;that I looked at the &lt;code&gt;__get_list_start_index&lt;/code&gt;. I knew I had to be honest with myself about
which side of that limit line this function was on.  The first function that I had
applied that process to was easy to decide on as it was the most heavily trafficked part of
the actual parsing code.  It was a no-brainer to reduce the logging in that function.  The
second function was not as easy of a decision to make, but as the second most heavily
trafficked function, it made sense.&lt;/p&gt;
&lt;p&gt;That left me with trying to figure out where the &lt;code&gt;__get_list_start_index&lt;/code&gt; function stood
in that spectrum.  It was while I was looking at the code that I realized that I needed
to bump this function’s importance up the chain 1 level.  This function was not called
once but twice every time it was needed: once for unordered list block and the second
time for ordered list blocks.&lt;/p&gt;
&lt;p&gt;As soon as I realized that fact, the decision was already made in my mind to go forward
with commenting out the debug statements.  Applying the process, I ran the performance
tests and held my breath:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-16.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;Looking for the &lt;code&gt;__get_list_start_index&lt;/code&gt; in the top 15, I did not see it at all.  When
I found it, it was down at the 96th position in the table.  From the 5th place in the
table with 0.29 second down to 96th place with 0.08 seconds.  That was cool.&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-16a.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;h3 id="is-the-honeymoon-over"&gt;Is The Honeymoon Over?&lt;a class="headerlink" href="#is-the-honeymoon-over" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the returns diminishing, as I write this article I am wondering if the honeymoon
period for finding “easy” performance fixes is over.  I do not know if it is or not,
but I do know that I have optimized a lot of the top 10 functions in the list.
This means that I am going to have to work harder for less return from here on out.
I do have a couple of ideas on how to improve things further, but that is for another
article!&lt;/p&gt;
&lt;p&gt;What is really evident to me though is that my current snapshot and seconds approach
to finding new items to try and optimize is almost hitting its limit.  It is becoming
harder to figure out what to try and optimize, and whether any changes help the
performance.  That is something that I am going to have to do some thinking on!&lt;/p&gt;
&lt;h2 id="cleaning-up"&gt;Cleaning Up&lt;a class="headerlink" href="#cleaning-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I was poking around the code, there were a handful of things that I wanted to
clean up, as usual.  When measuring the performance of these changes, most of these
changes resulted in a performance improvement on the order of 0.1 or 0.3 seconds over 10
million iterations.  But more than that, they just seemed like it made sense to clean
these things up for code maintenance reasons.&lt;/p&gt;
&lt;h3 id="return-statements"&gt;Return Statements&lt;a class="headerlink" href="#return-statements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Honest confession time.  I am not perfect.  When I am writing code, I get lost in the
moment, and write the code that I need to write, knowing I will come back and clean it
up later.  Sometimes, that is obvious.  Take this piece of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_length_less_than_or_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;adj_ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlockQuoteProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_quote_character&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yup, I wrote that.&lt;sup id="fnref:facePalmOn"&gt;&lt;a class="footnote-ref" href="#fn:facePalmOn"&gt;2&lt;/a&gt;&lt;/sup&gt;  It took me less than 10 seconds to rewrite
it, but it was me that originally wrote that.  Not:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_length_less_than_or_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;adj_ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
            &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;BlockQuoteProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_quote_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which would have made much more sense.&lt;sup id="fnref:facePalmOff"&gt;&lt;a class="footnote-ref" href="#fn:facePalmOff"&gt;3&lt;/a&gt;&lt;/sup&gt;  But then, we all do things
when we are writing code that we look back on, knowing we can do better.  Part of
my journey in writing this project is understanding that quality in a project is
very iterative.  For example, I found a couple more instance of that pattern in the
project’s code, but thankfully, not anymore.  I am learning to be okay with things like
that. I know I sometimes look at the code and go “What was I on when I wrote that?”, but
I also accept that it is an artifact of how I work.  Focus on the algorithm and clean up
the code later.  It just happens.&lt;/p&gt;
&lt;p&gt;A more frequent find was to find blocks of statements like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;processed_line&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"processed_line&amp;gt;&amp;gt;$&amp;lt;&amp;lt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;processed_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;processed_line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In cases like this, I made sure that the debug statement was not needed and removed it.
At that point, I have one statement that adds another string to its value, and another
statement that returns it.  It was more legible and performant to do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;processed_line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="removing-needless-default-variable-settings"&gt;Removing Needless Default Variable Settings&lt;a class="headerlink" href="#removing-needless-default-variable-settings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another frequent find was a block of statements like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;did_add_definition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;LinkHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__link_definitions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;did_add_definition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at those statements now, I realize that I probably added the &lt;code&gt;if&lt;/code&gt; block or the
&lt;code&gt;else&lt;/code&gt; block after the initial code was written.  While that was acceptable during the
building phase of the project, now that I was getting ready to release, I wanted to
clean scenarios like this up.&lt;/p&gt;
&lt;p&gt;That is why I refactored the code to be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;LinkHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__link_definitions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;did_add_definition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;did_add_definition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, there is no need to do an assignment to False, only to have the &lt;code&gt;False&lt;/code&gt; case
of the &lt;code&gt;if&lt;/code&gt; statement set it to &lt;code&gt;True&lt;/code&gt;.  To me, that is just a useless assignment that
can easily be avoided.  Also, from a readability viewpoint, that double assignment is
confusing to read.  For me, the &lt;code&gt;= False&lt;/code&gt; case stuck in my head in the first example.
In the second example, both &lt;code&gt;= False&lt;/code&gt; and &lt;code&gt;= True&lt;/code&gt; stuck in my head at the same level.
To me, that just makes sense.&lt;/p&gt;
&lt;p&gt;And looking over the code now, I realize I could have just set the variable
&lt;code&gt;did_add_definition&lt;/code&gt; to &lt;code&gt;link_name not in LinkHelper.__link_definitions&lt;/code&gt;.  The learning
continues.&lt;/p&gt;
&lt;h3 id="ternary-statements"&gt;Ternary Statements&lt;a class="headerlink" href="#ternary-statements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am not sure if everyone loves ternary statements, but I do.  For me, these statements
are very useful in cleanly encapsulating the setting of a single value depending on a
given condition.  From my point of view, why type in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;init_bq&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;init_bq&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;when the much shorter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;init_bq&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;init_bq&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is syntactically the same and more concise?&lt;/p&gt;
&lt;p&gt;In all fairness, when I am work on writing the code, I will almost always write
it in a long form.  The best answer that I can give as to why I do that is that I believe
that
ternary statements are great for final states, but not so for intermediate states.  By
leaving the statements in their original long form, I feel more ready to change the
conditions and values if needed.  However, once those are nailed down, its ternary
statements as much as possible!&lt;/p&gt;
&lt;h3 id="single-characters-startswith-and-endswith"&gt;Single Characters StartsWith and EndsWith&lt;a class="headerlink" href="#single-characters-startswith-and-endswith" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This cleanup was more of a pet peeve than any kind of performance improvement.  If
possible, I prefer to keep character references and string references separate. Seeing
as Python does not have a concept of a single character that is distinct from a string,
that is difficult.  For me, I feel that being more “honest” about the input allows me
to better design algorithms that use those inputs to achieve their goals.&lt;/p&gt;
&lt;p&gt;That is why I sent through the code and replaced occurrences of the &lt;code&gt;endswith&lt;/code&gt; and
&lt;code&gt;startswith&lt;/code&gt; function with their character-based equivalents.  That is why I
changed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InlineHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backslash_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;remaining_line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;InlineHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backslash_character&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I realize that it might not seem like a big change, to me, it is a more readable
and more honest form of the condition.&lt;/p&gt;
&lt;!--- pyml disable-next-line no-trailing-punctuation --&gt;
&lt;h3 id="when-in-rome"&gt;When In Rome…&lt;a class="headerlink" href="#when-in-rome" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Looking around for hints on how to improve performance in Python, I came across a handful
of documents that gave good hints on how to be more Pythonic.  The best way that I can
describe the feeling of these documents is that I need to follow the doctrine: When in
Rome, do as the Romans do.  Basically, if I want to leverage the power of the Python
language, I need to use the features it provides in ways that add clarity and readability
to the code.&lt;/p&gt;
&lt;p&gt;Because of the nature of this project, there is only one place in the entire project where
I found that a common Pythonic concept, list comprehensions, is useful.
&lt;a href="https://book.pythontips.com/en/latest/comprehensions.html"&gt;List comprehensions&lt;/a&gt;
are very Pythonic, involving the simplification of lists in a very performant manner.
I just have not found more than one use for them in the project.  Another very Pythonic
concept is the
&lt;a href="https://book.pythontips.com/en/latest/global_&amp;amp;_return..html#multiple-return-values"&gt;returning of multiple values&lt;/a&gt;
from a function.  While trickery can be used in other languages to get some level of the
same effect, Python’s first-class support for tuples makes this concept very useful and
very easy to use.&lt;/p&gt;
&lt;p&gt;A good example of this is when I changed this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;adjusted_text_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;
    &lt;span class="n"&gt;adjusted_index_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;adjusted_text_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;adjusted_index_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While these statements may look almost the same, I see a large difference in readability.
When I read the first example, the first questions that I usually have are around the
grouping of those two statements.  Are there blank lines before and after to separate them
into a group?  Are they related to each other?  These are some of the questions that I
think about when reading code.&lt;/p&gt;
&lt;p&gt;The second example takes most of those questions and tosses them out the window.  By using
that specific grouping, I feel that I invert the questions I ask, reducing them to one
question: Is there any reason that any one statement should not be in that group?  For me,
that is usually a far easier question to answer.  In that above case, it is a logical
grouping for me as both variables deal with text and the current index into that text.
Used at the start of a function, they communicate that those variables are all being
set to their initial states.&lt;/p&gt;
&lt;p&gt;Of course, there is also a simpler answer: I just think it looks more readable.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing that comes to mind is to answer the question of whether the
project is still in the honeymoon period as far as performance tuning goes.
As I am still seeing reductions in durations
of about 50% and very few experiment failures, I am convinced that I still have at least
a little way to go before it ends.  I am not sure how far, but there still is some time.
But with my desire to get an initial release out and circulating, I know the right
decision currently is to focus on items in the issues list that are blocking the
release.  And that means focusing on those items and not on performance.  And I am okay
with that.&lt;/p&gt;
&lt;p&gt;In terms of finding a balance and getting the project out there, I am feeling good
about that too.  Yes, I got sidetracked on performance. But honestly, I knew
that was going to happen.  I want to make the project better, and I know that focusing
on performance will increase the usability of the project.  I must remember
that people can easily focus on performance with no end in sight.  Unless I want to
succumb to that, I need to make sure I have good solid limits on performance tuning
and what is acceptable.  And I think I found that.&lt;/p&gt;
&lt;p&gt;Through the performance enhancements, I realized something with this round of
enhancements that really had not dawned on me before. Performance, like other parts of
a project, is a requirement that is just as malleable as any other.  Some of the
improvements that I made may appear to be tightening screws here and there, but they
were also flexing and bending requirements.  Caching logging levels?  That was reducing
the requirement to change log levels during program execution.  Caching calls to the
&lt;code&gt;len&lt;/code&gt; function?  That could be seen as reducing the readability of code by centralizing
that call in a location that might not be “correct” for some people.  Commenting out
debug statements?  That was a clear reduction of the immediate debuggability of those
functions to gain some performance.  In each case, it was finding a good balance
between those.  I may have “known” it before, but it was cool to understand it enough
at this point to be able to put it into words.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is one more performance improvement that I will talk about next time, and it
is a doozy of one.  Other than that, I am focusing on getting all the items in
the priority 1 section resolved.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:whatIsEqual"&gt;
&lt;p&gt;If you have ever looked at any polling, they will usually say that a poll is accurate to +/-3%, or something like that.  This same principle is usually applied to performance measurements, with similar levels of accuracy. &lt;a class="footnote-backref" href="#fnref:whatIsEqual" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:facePalmOn"&gt;
&lt;p&gt;Imagine me doing a face palm when I read that piece of code. &lt;a class="footnote-backref" href="#fnref:facePalmOn" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:facePalmOff"&gt;
&lt;p&gt;Going to try and move on now.  Damage done. &lt;a class="footnote-backref" href="#fnref:facePalmOff" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Starting Performance</title><link href="https://jackdewinter.github.io/2021/02/22/markdown-linter-road-to-initial-release-starting-performance/" rel="alternate"></link><published>2021-02-22T00:00:00-08:00</published><updated>2021-02-22T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-02-22:/2021/02/22/markdown-linter-road-to-initial-release-starting-performance/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/15/markdown-linter-road-to-initial-release-refactoring/"&gt;last article&lt;/a&gt;, I focused
on refactoring that was performed to clean up the code base of the PyMarkdown
project.  In this article, I talk about how I started to learn about finding and
implementing performance improvements in the PyMarkdown project using cPython and
SnakeViz.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/15/markdown-linter-road-to-initial-release-refactoring/"&gt;last article&lt;/a&gt;, I focused
on refactoring that was performed to clean up the code base of the PyMarkdown
project.  In this article, I talk about how I started to learn about finding and
implementing performance improvements in the PyMarkdown project using cPython and
SnakeViz.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have mentioned before that I was starting to investigate performance measurements
for the project, it was time to bring those measurements and my observations on those
measurements into the light.  Based on
initial measurements, I knew there was a big performance
degredation going on with the logging library and my use of it.  If I wanted the
PyMarkdown project to be even remotely performant, I knew I needed to deal with at
least that performance refactoring.  At the same time, as I knew I would need to apply
other performance improvements on the project down the road.  So, I just figured it was a
good time to learn about the analyze-deduce-change cycle of performance metrics and how
to perform it with a Python program.&lt;/p&gt;
&lt;p&gt;Basically, I needed to spend some time learning how to properly measure and improve
the performance of the PyMarkdown project.  I was stoked!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/c13f2d6ff8213b65d22f4e1a8cb358b1a15ae3e5"&gt;03 Feb 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/0337dbbf0af39efa5f31e5ebceb45fb3d9862e05"&gt;13 Feb 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="dipping-my-toes-into-the-water"&gt;Dipping My Toes Into the Water&lt;a class="headerlink" href="#dipping-my-toes-into-the-water" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having upgraded the PyMarkdown project to
&lt;a href="https://jackdewinter.github.io/2021/01/25/markdown-linter-delving-into-the-issues-18/#upgrading-to-python-38"&gt;Python 3.8&lt;/a&gt;,
I was able to use two Python tools that I was eager to learn from:
&lt;a href="https://docs.python.org/3/library/profile.html#module-cProfile"&gt;cProfile&lt;/a&gt;
and
&lt;a href="https://jiffyclub.github.io/snakeviz/"&gt;SnakeViz&lt;/a&gt;.
The best way to think about these tools is that cProfile allows the Python interpreter
to collect information on what happened during the execution of a program and
SnakeBiz is a useful way to present that information.  While I have tried to use cProfile
before to analyze this project, I found it too cumbersome to read effectively.  For my
use, I needed a GUI display that I could more easily navigate through.  For me,
SnakeViz provided just that interface.&lt;/p&gt;
&lt;h3 id="getting-started"&gt;Getting Started&lt;a class="headerlink" href="#getting-started" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Getting started using these tools was easy.  In the project’s home directory, I
have a script, named &lt;code&gt;run_blog.cmd&lt;/code&gt;, that I use to run the PyMarkdown project over all
my articles for this site.  This script is very basic and very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run python main.py --stack-trace -d MD018,MD020 ../blog-content/website/content/articles/SoftwareQuality
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, I copied that script to a file named &lt;code&gt;prof_blog.cmd&lt;/code&gt; and changed the contents
of the script file to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run python -m cProfile -o p0.prof main.py --stack-trace -d MD018,MD020 ../blog-content/website/content/articles/SoftwareQuality
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was it!  Nothing else was needed.  Running that new script, a new &lt;code&gt;p0.prof&lt;/code&gt; file
was deposited in the project directory.  To save time, I created a new file (with yet
another imaginative name) named &lt;code&gt;show_profile.cmd&lt;/code&gt; and place the following text into
that file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run snakeviz p0.prof
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running that script, it was obvious that it started a webserver on the command line, and
then proceeded to open up a new tab in my browser to show me the results on.&lt;/p&gt;
&lt;h3 id="looking-for-the-obvious-starting-point"&gt;Looking For The Obvious Starting Point&lt;a class="headerlink" href="#looking-for-the-obvious-starting-point" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I will not go into how to use SnakeViz, as I believe the
&lt;a href="https://jiffyclub.github.io/snakeviz/"&gt;SnakeViz homepage&lt;/a&gt;
does a real good job of walking users through the required steps.  It was presenting a lot
of information, and I needed to find a way to focus and walk through the data.  While I
did confirm that I need a GUI to help me walk through the data, it was not the graphs that
were helping me out.  It was being able to click on various parts of the tables and dig
down into the performance of the items that I clicked on.  That is what really helped
me understand things!&lt;/p&gt;
&lt;p&gt;After getting more comfortable with the output, I cleaned everything up and reran the
&lt;code&gt;prof_blog.cmd&lt;/code&gt; script, followed by the &lt;code&gt;show_profile.cmd&lt;/code&gt; script and was greeted
with this information:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Logging" src="https://jackdewinter.github.io/images/road-to-release-3/before-logging-refactor.png" title="Performance Before Logging Change"/&gt;&lt;/p&gt;
&lt;p&gt;As this learning was being done in the background as I was working on the project, I let
that picture sink in for a bit while I thought about the implications in my spare time.
But the results were obvious to me.  Based on what I
was seeing, the first 5 items in the performance list were taking 54 seconds of execution
time, with none of those items having anything to do with the processing.  That time was
being spent processing all the debug information that I had in place to help me diagnose
issues.  But as far as I knew, with the project at its default settings, the project was
using the &lt;code&gt;WARN&lt;/code&gt; debug level, and should not be outputting anything
to the logs.  As it should not be outputting anything to the logs, it logically
followed that it should not be creating debug strings that are used to place information
in those logs.  I was stumped.&lt;/p&gt;
&lt;h3 id="another-try-with-a-fresh-mind"&gt;Another Try With A Fresh Mind&lt;a class="headerlink" href="#another-try-with-a-fresh-mind" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After fixing some issues in the project, I returned
to this problem with a fresh mind.  This time, as I looked over the code, I noticed the
issue almost right away.  While the information was not being output to the logs, it was
being prepared and formatted assuming it was being added to the logs.  A good example of
this is this snippet of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"coalesce_text_blocks&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;&amp;lt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_value_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whether the information gets logged or not, the interpreter is going to go
through the process of preparing the string passed as a parameter into the &lt;code&gt;debug&lt;/code&gt;
function.  In this case, it is going to dereference the &lt;code&gt;first_pass_results&lt;/code&gt; list
using the index &lt;code&gt;coalesce_index&lt;/code&gt; and passing that into the
&lt;code&gt;ParserHelper.make_value_visible&lt;/code&gt; function.  Yup, that is the same &lt;code&gt;make_value_visible&lt;/code&gt;
function that is in the number 3 position on the above list.  To make matters worse,
the &lt;code&gt;first_pass_results&lt;/code&gt; list contains tokens that made it through the first pass of
parsing.  This means that the &lt;code&gt;debug_string&lt;/code&gt; function of the &lt;code&gt;MarkdownToken&lt;/code&gt; class is
being called for the token inside of the &lt;code&gt;make_value_visible&lt;/code&gt;.  And yes, that is the
same &lt;code&gt;debug_string&lt;/code&gt; that is in the number 1 position of that same list.&lt;/p&gt;
&lt;p&gt;Basically, every time that line is hit, the interpreter prepares the data, whether it is
needed or not.  For this line, that contributes to the &lt;code&gt;debug_string&lt;/code&gt; function being in
position 1 of that list and the &lt;code&gt;make_value_visible&lt;/code&gt; function being in position 3 of that
same list.  It was then that I knew that I needed to find a way to log the information
but delay evaluation of any parameters passed to it until the logger knows that it will be
logging that information.&lt;/p&gt;
&lt;h3 id="the-benefits-of-experience"&gt;The Benefits Of Experience&lt;a class="headerlink" href="#the-benefits-of-experience" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having faced issues like this before, I had some ideas on how to proceed, I just did not
know if Python supported any of them.  The best approach that I had in my developer’s
toolkit was to use a
&lt;a href="https://en.wikipedia.org/wiki/Facade_pattern"&gt;Facade pattern&lt;/a&gt;
to create a class that would handle any transformations of the parameters that I required,
but only apply those transformations if the information was actually going to be logged.&lt;/p&gt;
&lt;p&gt;Throwing something together quickly, I came up with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ParserLogger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_logger&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_logger&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log_format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabledFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__munge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log_format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__munge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log_format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;split_log_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;log_format&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;recipient_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_log_format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_array_index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recipient_array&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_array_index&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;recipient_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_array_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
                    &lt;span class="n"&gt;split_log_format&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_array_index&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;recipient_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_array_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
                    &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_value_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_array_index&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recipient_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully, the &lt;code&gt;__init__&lt;/code&gt; function and the &lt;code&gt;debug&lt;/code&gt; functions are self-explanatory as they
were the simplest parts of the class to write.  The rest took a bit of work to get working
right, but it was worth it.  Instead of passing in logger-formatted strings, I decided to
use my own formatting.  Therefore, in place of using the &lt;code&gt;%s&lt;/code&gt; sequence to key a
substitution as with normal logging
calls, I opted for the simpler &lt;code&gt;$&lt;/code&gt; sequence.  For debugging uses, I do not want to worry
about what type of object is being passed or making sure it is cast to a &lt;code&gt;string&lt;/code&gt; type.
That is why I created the &lt;code&gt;make_value_visible&lt;/code&gt; function.  But to seamlessly incorporate
those requirements together was going to take some work.&lt;/p&gt;
&lt;p&gt;The first thing that I needed to do was to create a list that would hold the information.
This meant that I had to have enough space for each part of the &lt;code&gt;log_format&lt;/code&gt; string
between &lt;code&gt;$&lt;/code&gt; characters and for each argument passed into the function.&lt;sup id="fnref:yes"&gt;&lt;a class="footnote-ref" href="#fn:yes"&gt;1&lt;/a&gt;&lt;/sup&gt;  With that
list created and initialized to &lt;code&gt;None&lt;/code&gt; instances, I then needed to populate that
list.  The function iterates from &lt;code&gt;0&lt;/code&gt; to the index that is 1 less than the size of the
list.  When the index is an even number (&lt;code&gt;if next_array_index % 2 == 0:&lt;/code&gt;), the next item
is populated with the information from the &lt;code&gt;log_format&lt;/code&gt; string split on the &lt;code&gt;$&lt;/code&gt;
character.  When the index is odd (the &lt;code&gt;else&lt;/code&gt; clause), the next item is populated with the
results of the next argument being processed through the &lt;code&gt;make_value_visible&lt;/code&gt; function.
Essentially, between the module operator &lt;code&gt;%&lt;/code&gt; and the divisor operator &lt;code&gt;/&lt;/code&gt;, the loop
takes elements from each list, alternating which list it is taking a value from.&lt;/p&gt;
&lt;p&gt;For me, the important part to concentrate on is that the formatting of the information,
including the call to the &lt;code&gt;make_value_visible&lt;/code&gt; function, is only done after the &lt;code&gt;debug&lt;/code&gt;
function has determined that debug logging is enabled.  If it is not enabled, the only
overhead was calling the function with the specified parameters and the &lt;code&gt;if&lt;/code&gt; statement at
the start of the &lt;code&gt;debug&lt;/code&gt; function. For me, that was ideal!&lt;/p&gt;
&lt;p&gt;And to be honest, in the first couple of iterations, I had to work on how the list was
populated with the information from the other two lists.  In the end, the modulo approach
was the most efficient and most tidy, so it won out.  I tried to be fancy with how I
was populating the lists, but they did not pan out.  The clear winner was the above
solution that used little code and basic high school math.&lt;/p&gt;
&lt;h3 id="almost-there"&gt;Almost There&lt;a class="headerlink" href="#almost-there" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It only took a couple of hours to come up with the &lt;code&gt;ParserLogger&lt;/code&gt; prototype, which was
encouraging.  Writing a couple of simple throwaway scenario tests, I was able to verify
that it was working properly almost right away.  There was just one small problem.
The source of the information.&lt;/p&gt;
&lt;p&gt;When any good logger logs information, it includes information that describes where
the log information was submitted from.  For example, in its default configuration,
the Python logging library output for our sample logging line is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DEBUG&lt;/span&gt;    &lt;span class="nv"&gt;pymarkdown&lt;/span&gt;.&lt;span class="nv"&gt;coalesce_processor&lt;/span&gt;:&lt;span class="nv"&gt;coalesce_processor&lt;/span&gt;.&lt;span class="nv"&gt;py&lt;/span&gt;:&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="nv"&gt;coalesce_text_blocks&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;[&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;,&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:&lt;span class="k"&gt;end&lt;/span&gt;:]&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But with the current implementation of the &lt;code&gt;ParserLogger&lt;/code&gt; class, the same logging location
was being logged for each line of information: the line in the &lt;code&gt;ParserLogger&lt;/code&gt; class where
the lower-level logger was being called.  From my experience, I expected this, so I turned
to the
&lt;a href="https://docs.python.org/3.8/library/logging.html#logging.Logger.debug"&gt;Python logging documentation&lt;/a&gt;
to look for something very specific.  On every platform where I have seen it supported,
the thing I was looking for was a parameter to the &lt;code&gt;debug&lt;/code&gt; function that, on logging
packages where it is supported, always had “stack” in the title.  This information helped
me to weed out parameters that were not helpful, landing on: &lt;code&gt;stacklevel&lt;/code&gt;.  Directly from that documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The third optional keyword argument is stacklevel, which defaults to 1. If greater than 1, the corresponding number of stack frames are skipped when computing the line number and function name set in the LogRecord created for the logging event. This can be used in logging helpers so that the function name, filename and line number recorded are not the information for the helper function/method, but rather its caller. The name of this parameter mirrors the equivalent one in the warnings module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Loggers are not a new feature in programming languages, and logging helpers are almost
as old as the logging features in those programming languages.  It stood to reason that
Python would have support for this, but I was surprised to find out that it was only
added in Python 3.8.  Lucky for me, as the
&lt;a href="https://stackoverflow.com/questions/49987228/alter-python-logger-stack-level"&gt;workarounds&lt;/a&gt;
are workarounds that I would prefer not to resort to.&lt;/p&gt;
&lt;p&gt;Armed with this information, I changed this line in the sample:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and everything just worked.  After that, I did a bit of cleaning up to make the
class more production ready before applying it on a grand scale.&lt;/p&gt;
&lt;h3 id="the-big-changeover"&gt;The Big Changeover&lt;a class="headerlink" href="#the-big-changeover" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While this would not be last big performance changeover in the history of the project,
it was the first.  As changeovers go, it was easy to do but large in scope.
I searched for the text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LOGGER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;at the top of each file and replaced it with the text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;POGGER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, it was a simple manner to search through the files, looking for any instances
of &lt;code&gt;LOGGER.debug&lt;/code&gt; and changing them to &lt;code&gt;POGGER.debug&lt;/code&gt;. As I changed the module the name
of the variable from &lt;code&gt;LOGGER&lt;/code&gt; to &lt;code&gt;POGGER&lt;/code&gt;, I also looked for any instances of &lt;code&gt;%s&lt;/code&gt; in the
string and transferred them over to the new &lt;code&gt;$&lt;/code&gt; syntax.  Finally, if there were any calls
to &lt;code&gt;str&lt;/code&gt; or &lt;code&gt;make_value_visible&lt;/code&gt;, I removed them, leaving only the bare minimum required
to log the requested information.&lt;/p&gt;
&lt;p&gt;A great example of this change is the sample logging line from above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"coalesce_text_blocks&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;&amp;lt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_value_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"coalesce_text_blocks&amp;gt;&amp;gt;&amp;gt;&amp;gt;$&amp;lt;&amp;lt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Smaller, more compact, and no need to call the &lt;code&gt;make_value_visible&lt;/code&gt; when passing in
the value.  A win from many viewpoints!&lt;/p&gt;
&lt;p&gt;It was a long process, but I was able to check along the way to see if the scenario tests
were still passing, correcting any errors as I went.  This helped me by breakig up that
long, boring task into smaller sections.  Then, after a lot of search-and-replace work, I
completed
the last change and ran the performance metrics again, and I was greeted with this
information.&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Logging" src="https://jackdewinter.github.io/images/road-to-release-3/after-logging-refactor.png" title="Performance After Logging Change"/&gt;&lt;/p&gt;
&lt;p&gt;Phew! All that work paid off.  From experience, I knew I was very lucky to have something
that was so obviously off balance as my first performance refactoring.  I went from having
the first 5 items in the performance list taking 54 seconds to a slightly different set
of 5 items taking 1.446 seconds to complete.  That was a win.&lt;/p&gt;
&lt;p&gt;I want to stress again for any readers: this was luck.  In my mind, there was a greater
chance that I would be met with a different set of 5 items at the start of the list that
were harder to improve.  This was a slam dunk of a change because it was so obvious.
Keeping that in mind, it was time to move on to other tasks.&lt;/p&gt;
&lt;h3 id="about-that-logger-name"&gt;About That Logger Name?&lt;a class="headerlink" href="#about-that-logger-name" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Oh… &lt;code&gt;POGGER&lt;/code&gt;?  Why &lt;code&gt;POGGER&lt;/code&gt;?  I thought that &lt;code&gt;PERFORMANCE_LOGGER&lt;/code&gt; was too long. I
thought that &lt;code&gt;PLOGGER&lt;/code&gt; was too short and I felt it might be confused with &lt;code&gt;LOGGER&lt;/code&gt; on a
quick
read.  After a couple of simple experiments, with me as the guinea pig, I was clearly
able to distinguish between &lt;code&gt;POGGER&lt;/code&gt; and &lt;code&gt;LOGGER&lt;/code&gt; in some test files.  Because of the
different replacement sequence (&lt;code&gt;$&lt;/code&gt;) and no need for calling &lt;code&gt;str&lt;/code&gt; around non-string
parameter, I felt that having that distinguished difference was important.&lt;/p&gt;
&lt;h2 id="once-again-link-reference-definitions"&gt;Once Again, Link Reference Definitions&lt;a class="headerlink" href="#once-again-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wish I could say that I could keep away from these tokens, but as they are the most
troublesome token, I guess I do not get my wish.  During the refactoring that was
documented
in the last article, I suspected that things might not be good with Link Reference
Definitions if they were inside of Fenced Code Blocks or HTML Code Blocks.  Based on a
couple of quick tests, those suspicions were confirmed.  For some reason, the logic for
preventing a Link Reference Definition from starting within one of those two blocks was
either missing or not working properly.  Time to debug!&lt;/p&gt;
&lt;p&gt;Since this article is mostly about me learning about performance tuning in Python,
I will not go into too
many details.  Let’s just say that the code that I thought I had in place to prevent
that happening was not there.  Even more than that, after working on it for a good
solid four hours in the evening, I only got most of the scenario tests working, with
nine scenario tests still left as disabled. As these scenarios are very much off the
beaten path, I felt okay in marking them as disabled and handling them in the future.&lt;/p&gt;
&lt;h2 id="link-tokens-and-image-tokens-the-gathering"&gt;Link Tokens and Image Tokens: The Gathering&lt;a class="headerlink" href="#link-tokens-and-image-tokens-the-gathering" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it probably sounded better in my head than when I typed it in, it did feel like a
cheesy name for an old 1980s series that was thankfully not produced.  This task
was a simple one: as much as possible, merge the code to handle link tokens and image
tokens.  The interesting thing was that this was already partially done.  In a fair
number of areas, such as the &lt;code&gt;__calculate_link_and_image_deltas&lt;/code&gt; function, there was
already code that handled both tokens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;active_link_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image_uri&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre_image_uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;active_link_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre_image_uri&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;active_link_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_uri&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre_link_uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;active_link_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre_link_uri&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It just made sense to make it official and merge them instead of having this artifical
divide between the two tokens.&lt;/p&gt;
&lt;p&gt;The first part was relatively easy.  Starting with a new base class for both tokens, I
carefully moved any member field that had the exact same name in both classes to the base
class.  At that point, there were only two fields that needed special attention and one
field that was distinct to the Image token: the &lt;code&gt;image_alt_text&lt;/code&gt; field.  The two fields,
&lt;code&gt;image_uri&lt;/code&gt; and &lt;code&gt;image_title&lt;/code&gt; were renamed to meet the Link token counterparts, &lt;code&gt;link_uri&lt;/code&gt;
and &lt;code&gt;link_title&lt;/code&gt;, with a global search and replace taking care of any occurrences of the
old name.&lt;/p&gt;
&lt;p&gt;But I was not done yet!  I had also wanted to simplify calls to those pairs of fields for
quite some time.  There are a couple of specific cases where the individual field is
needed and the &lt;code&gt;link_title&lt;/code&gt; field is used.  In some cases, the original form of the data
is needed and the &lt;code&gt;pre_link_title&lt;/code&gt; field is used.  To save space in the token, if both
fields have the same value, the &lt;code&gt;pre_link_title&lt;/code&gt; field is set to &lt;code&gt;None&lt;/code&gt;.  So, to make it
easier to deal with that, I added the &lt;code&gt;active_link_title&lt;/code&gt; property and the
&lt;code&gt;active_link_url&lt;/code&gt; property to fetch the value that I want.&lt;/p&gt;
&lt;p&gt;After all that work, the code above was replaced with this one line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;active_link_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active_link_uri&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="single-call-special-character-resolution"&gt;Single Call Special Character Resolution&lt;a class="headerlink" href="#single-call-special-character-resolution" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is another task that I have wanted to do for a while, and I am pleased
with how well it proceeded.  Along the way, I have needed to define special character
sequences to deal with the dual representation of data in the token: actualized for the
HTML rendering and source for the Markdown rendering.  To accommodate this representation,
to present the required aspect of that data, I have developed a series of functions in
the &lt;code&gt;remove_*&lt;/code&gt; and &lt;code&gt;resolve_*&lt;/code&gt; namespace of the &lt;code&gt;ParserHelper&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;But as I have been looking at the code in the last couple of weeks, one thought occurred
to me about the various invocations of the various functions to remove those characters.
Did I really need specific functions called all the time, or could I just call a “remove
everything” function most of the time and be safe?&lt;/p&gt;
&lt;p&gt;To answer that question, I created the &lt;code&gt;resolve_all_from_text&lt;/code&gt; function and the
&lt;code&gt;remove_all_from_text&lt;/code&gt; function.  For each function, I located what I thought was the
most consistent ordering of the main set of functions and placed them in those two
functions.  I then went through the source code, replacing one of more instances of the
main set of functions with these “shorthand” functions.  In the 41 instances where these
functions were called, either singly or in groups, there were only 3 instances where
calling the “everything” function was detrimental to the operation of the parser.
In the other 38 instances, multiple trips were avoided while cleaning up the code at
the same time.&lt;/p&gt;
&lt;h2 id="and-of-course-some-cleanup"&gt;And Of Course, Some Cleanup&lt;a class="headerlink" href="#and-of-course-some-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And what would a set of tasks be for me without some cleanup tasks?  There really was not
anything too spectacular that I changed in these tasks, just some little things here
and there.  I used my first list comprehension in the
&lt;code&gt;__calculate_for_container_blocks&lt;/code&gt; function and I believe I have determined that I cannot
use any more due to the nature of the PyMarkdown project.  It was not as hard as I thought
to create, but I still need to figure it out some more to really understand it.  In the
&lt;code&gt;HtmlHelper&lt;/code&gt; class, there were three functions that were using relatively big conditionals
to determine whether a character was valid for the given HTML construct.  After some
research to confirm that I messed up the &lt;code&gt;_&lt;/code&gt; character and the &lt;code&gt;-&lt;/code&gt; character in one of
the conditionals, I replaced all three with a simpler &lt;code&gt;in&lt;/code&gt; clause.&lt;/p&gt;
&lt;p&gt;As always, nothing too stellar, but a number of small items that made me feel better
about the state of the project.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I said in the Introduction section that I was stoked about this, I was not kidding.
Two constants in my development career that have always kept me young and looking forward
is that I love challenges and I love to learn.  But instead of learning finely tuned
concepts, I try and learn those concepts and the “meta” ideas behind them.&lt;/p&gt;
&lt;p&gt;Take performance tuning on a program.  To be honest, with few exceptions, the language
that the tuning is being applied to and the program that the tuning is being applied to
are not as important as the approach to tuning.  And that is where performance tuning
scares developer with faint hearts because of one glaring truth about performance
tuning.  There is a honeymoon period of tuning, where there are some low hanging
“performance” fruit that are easy to solve.  After that, the tuning is more miss than
hit.  From my experience, and the experience of others, once you are in that second
phase, you must be prepared to fail way more often than succeed.&lt;/p&gt;
&lt;p&gt;And that scares some people.  I know it sometimes scares me.  I like to be able to make
a change and see that change.  But performance tuning can be a lot of “nah, the readability
suffers too much for such a small improvement” or “nah, that difference in performance is
not significant”.  And even for good performance trained developers, the percentage of
“good” experiments often does not exceed 10% once past the honeymoon period.&lt;/p&gt;
&lt;p&gt;That is where my experience comes in.  I knew I was lucky to have such an obvious gift
presented to me in terms of where the performance hit for the project was.  I was also
appreciative that previous rounds of performance improvements on prior projects allowed
me to know an approximate name of the parameter that I wanted to look for.  And I am
also aware that the honeymoon period for finding the easy solutions was not going to
last much longer.&lt;/p&gt;
&lt;p&gt;But, due to my experience, I was okay with that.  I knew I was off to a good start, and
I now had good solid experience in the performance measuring cycle with Python. So, as
I said in the Introduction section:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I was stoked!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With one foot into performance improvements, it seems like a good time to go all in
and to try and improve the performance of the PyMarkdown project some more.  Stay Tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:yes"&gt;
&lt;p&gt;Yes, I am not doing any safety checking on this.  I was doing a simple test to see if this would work.  That kind of safety checking was added before I checked in the actual version of this class that made it into the repository. &lt;a class="footnote-backref" href="#fnref:yes" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Refactoring</title><link href="https://jackdewinter.github.io/2021/02/15/markdown-linter-road-to-initial-release-refactoring/" rel="alternate"></link><published>2021-02-15T00:00:00-08:00</published><updated>2021-02-15T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-02-15:/2021/02/15/markdown-linter-road-to-initial-release-refactoring/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/08/markdown-linter-road-to-initial-release-learned-and-useful-things/"&gt;last article&lt;/a&gt;, I took a break
to look back over the last year’s work and what I learned on my path to this point.
In this article, I look at some refactoring that I have wanted to do for a while,
and why I can accomplish …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/08/markdown-linter-road-to-initial-release-learned-and-useful-things/"&gt;last article&lt;/a&gt;, I took a break
to look back over the last year’s work and what I learned on my path to this point.
In this article, I look at some refactoring that I have wanted to do for a while,
and why I can accomplish those changes successfully.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Refactoring can often be a tricky subject to bring up with software developers.  Depending
on the specific goals and experiences of a given software developer, saying the phrase
“Can we talk about refactoring your code?” can either be met with enthusiasm, with
judgement, or with something in between.  In the majority of situations, developers have
been trained
to only write code that is good enough to meet the set of requirements before them, and
not more.  While this satisfies the immediate needs of the project, it can often cause
long term problems in terms of maintenance and support.
As with the more personal reactions to the phrase, I find that they occur more rarely
these days, but they still occur.  If someone hears that phrase, it is possible that they
think you are judging their code to not be correct or “good enough”.  In those cases,
you want to try and remove that judgement aspect from their and move on.&lt;/p&gt;
&lt;p&gt;Luckily for me, I am the only one on this project and I have a very enthusiastic response
to that phrase.  For me, if someone asks that questions, they are seeing the same problem
that I solved, but through a different light. I see it as a chance to see the given
project from a different viewpont, engaging in a good discussion along the way.
From there, if it is agree that I need to work on the refactoring, it is just a question of
making sure that I have solid requirements for any refactoring and a solid block of time
to work on them.&lt;/p&gt;
&lt;p&gt;As luck would have it, I control both for the PyMarkdown project, so let’s go!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/10473f951bc17c4f74eeb067b40e6417bcad8a25"&gt;27 Jan 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9433471e996e83bea13dbd6472ff447f29fff9a7"&gt;02 Feb 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="refactoring"&gt;Refactoring&lt;a class="headerlink" href="#refactoring" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most concise and accurate definition of what I believe refactoring to be, comes from
the website
&lt;a href="https://www.refactoring.com/#:~:text=verb%3A%20to%20restructure%20software%20%20by%20applying%20a,technique%20for%20improving%20the%20health%20of%20a%20code-base."&gt;Refactoring.Com&lt;/a&gt;
which defines refactoring as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;verb: to restructure software by applying a series of refactorings without changing its observable behavior.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For me, that definition hits all the salient points that I believe need to be in the
definition. The first point is “to restructure software”.  Refactoring is not about
adding any new features to the software project, it is about improving some aspect of
the software in question.  The second point is that it is “a series of refactorings”.
Very rarely in my years of experience have I found that a refactoring is as simple as
just a small change.  Usually, it involves a number of small changes that bring about
the stated requirements of the refactorings, each one doing their part to meet the
goal.&lt;/p&gt;
&lt;p&gt;The third point is “without changing its observable behavior”, and I mostly agree with
that statement.  In my eyes, to be more correct, I would add the phrase “unless directed
to” to the end of that statement.  It is normally correct that any refactoring should
not change
the observable behavior.  However, I would argue that there are times where the
purpose of the refactoring is to change that observable behavior along a very narrow and
specific axis.
A good example of this is performance refactoring.  In that case, I want every other
observable part of the system to remain the same, but I want the observed time taken
to process the data to be reduced.&lt;/p&gt;
&lt;p&gt;But with my little caveat at the end, I think it is a solid definition of refactoring.&lt;/p&gt;
&lt;h3 id="how-i-work"&gt;How I Work&lt;a class="headerlink" href="#how-i-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is my usual practice to start writing a new feature or resolving an issue by having
a group of scenario tests that clearly define the problem.  From there, I write the code
as it comes to me, iterating over it in a natural way until it passes the scenario tests
that I am coding against.  While this may not be the way others work, I find that it helps
me keep the big concepts broken up into smaller concepts that I can more deftly handle.
Once I am finished with the code and all the scenario tests are passing, I usually look
locally and see if there are any simple refactorings that I can do.  If I have something
specific in mind, I may look globally to see if I can apply whatever I just coded on a
more global scale, but in many cases, I leave that for later.&lt;/p&gt;
&lt;p&gt;This process is very useful to me because I am very insistent on keeping my code coverage
numbers above the 95% mark, and in many cases above the 99% mark.  While this can often
lead to some tests that are frustrating to write, the reward for that pain is in the
confidence with which I can make changes.  Due to my high code coverage percentage, I
can make changes in any given piece of code, knowing that if there are any unintended
side effects, the scenario tests providing that high code coverage will detect them.&lt;/p&gt;
&lt;p&gt;For me, that is a plus that allows me to perform certain tasks, such as refactoring,
with a very high degree of confidence.&lt;/p&gt;
&lt;h3 id="cleaning-up-requeuing"&gt;Cleaning Up Requeuing&lt;a class="headerlink" href="#cleaning-up-requeuing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the first things that I wanted to cleanup was my use of the parameters
&lt;code&gt;lines_to_requeue&lt;/code&gt; and &lt;code&gt;force_ignore_first_as_lrd&lt;/code&gt;.  A long time ago (in project years),
I needed to add code throughout the code base to handle the requeuing needed by Link
Reference Definition parsing.  That concept of requeuing was introduced
&lt;a href="https://jackdewinter.github.io/2020/04/06/markdown-linter-adding-link-reference-definitions/"&gt;in April 2020&lt;/a&gt;
along with an explanation of why Link Reference Definition parsing needs the ability to
rewind the stack.  At the time, I wasn’t sure if those two parameters were the only
two parameters that I would need for any needed requeues, or if there were any other
elements that would
require requeues.  After more than nine months with no changes, I believed that those two
parameters were the first target for refactoring.&lt;/p&gt;
&lt;p&gt;When I looked at that code, there were two possible refactorings that came to mind:
reducing the number of parameters to one and raising an exception instead of using
return codes.  Since the second refactoring would make use of the work done for the
first refactoring, it made sense to start with that refactoring.  But replacing
those two parameters with an instance of a new class would require some work.&lt;/p&gt;
&lt;h4 id="phase-1-search-and-replace"&gt;Phase 1: Search and Replace&lt;a class="headerlink" href="#phase-1-search-and-replace" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The first phase of the refactoring was dead simple: locate any instances of the variables
&lt;code&gt;lines_to_requeue&lt;/code&gt; and &lt;code&gt;force_ignore_first_as_lrd&lt;/code&gt; and place them within a new instance
of the newly created &lt;code&gt;RequeueLineInfo&lt;/code&gt; class.  This took a while to complete but it was
relatively easy
to do.  In each case, I started with a call to the &lt;code&gt;process_link_reference_definition&lt;/code&gt;
function and worked backwards through the code.  As I worked backwards from that function,
I changed the
calling function’s two return values to a new single instance of the &lt;code&gt;RequeueLineInfo&lt;/code&gt;
class.  To ensure that there were no external changes other than that, I
immediately dereferenced both member variables as local variables.  Because that practice
kept any changes localized, I was able to execute the scenario tests after each step to
verify that the current set of changes were correct.&lt;/p&gt;
&lt;p&gt;The big issues that I ran into with these changes were the blank line function
&lt;code&gt;handle_blank_line_fn&lt;/code&gt; and the close blocks function &lt;code&gt;close_open_blocks_fn&lt;/code&gt;.  As both
functions can terminate a Link Reference Definition, both had to be changed to return a
single argument instead of the double arguments.  While the change for the
&lt;code&gt;handle_blank_line_fn&lt;/code&gt; function only required 1 change, the change for the
&lt;code&gt;close_open_blocks_fn&lt;/code&gt; function had to be implemented in 22 separate calls, each change
following the pattern mentioned above.  It was a handful but was completed without
incident. Well, without incident after I corrected some typos.&lt;/p&gt;
&lt;p&gt;A good example of these changes are the changes performed to the
&lt;code&gt;__close_required_lists_after_start&lt;/code&gt; function.  Before this change, the function’s code
around the call to the &lt;code&gt;close_open_blocks_fn&lt;/code&gt; function looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;force_ignore_first_as_lrd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;until_this_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;last_list_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;caller_can_handle_requeue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the change, this code was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;until_this_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;last_list_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;caller_can_handle_requeue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;requeue_line_info&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;lines_to_requeue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;
            &lt;span class="n"&gt;force_ignore_first_as_lrd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;force_ignore_first_as_lrd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pivotal thing to notice here is that while the function was handling the single
&lt;code&gt;requeue_line_info&lt;/code&gt; return value instead of the two return values &lt;code&gt;lines_to_requeue&lt;/code&gt;
and &lt;code&gt;force_ignore_first_as_lrd&lt;/code&gt;, those changes are completely localized.  That isolation
of the change is what helped make this a great refactoring.&lt;/p&gt;
&lt;h4 id="phase-2-reduce-the-instances"&gt;Phase 2: Reduce the Instances&lt;a class="headerlink" href="#phase-2-reduce-the-instances" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;With the scenario tests still verifying that everything was working properly, I started to
work on reducing the number of new instances of the &lt;code&gt;RequeueLineInfo&lt;/code&gt; class.  While
isolating the changes was a good priority for Phase 1, it resulted in a lot of extra
overhead whenever those new instances were returned from a function.  For this phase, the
focus was on identifying paths where that dereferencing was not necessary, replacing
them with the returned instance of the &lt;code&gt;RequeueLineInfo&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;Following along with the example of the &lt;code&gt;__close_required_lists_after_start&lt;/code&gt; function,
that function was again modified.  Inside of that function, any references to the variable
&lt;code&gt;lines_to_requeue&lt;/code&gt; was replaced with a reference to &lt;code&gt;requeue_line_info.lines_to_requeue&lt;/code&gt;,
with a similar change being made for the &lt;code&gt;force_ignore_first_as_lrd&lt;/code&gt; variable.  At the end
of the function, instead of returning:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force_ignore_first_as_lrd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the following was returned:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At that point, any function that calls the function was located, and switched to use the
new single value instead of the old double value.  This was usually repeated until the
function to be modified was the main &lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Executing scenario tests as I went, there were only two issues that popped up.  The first
issue had to do with the &lt;code&gt;requeue_line_info&lt;/code&gt; being &lt;code&gt;None&lt;/code&gt;.  In those cases, I had to make
sure to add some &lt;code&gt;if requeue_line_info:&lt;/code&gt; statements around sensitive code, ensuring that it
wouldn’t fail.  As I worked my way back up to the main function, most of those &lt;code&gt;if&lt;/code&gt;
statements that I added were removed as I refactored my way up towards the main function.
The second issue occurred in
functions that had multiple paths that required the changes.  In that case, I simply noted
down the name of the functions as I went.  When I finished all the “easy” paths, I went
back to that list as started checking items off that list one-by-one.&lt;/p&gt;
&lt;p&gt;By the end of this phase, there were only a few handfuls of new instances being created.
Cleaning those up were my next priority.&lt;/p&gt;
&lt;h4 id="phase-3-and-then-there-was-one"&gt;Phase 3: And Then There Was One&lt;a class="headerlink" href="#phase-3-and-then-there-was-one" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;With the above work accomplished, there was only a little bit of cleanup left to do.
My goal was to get from the few new instances that still existed down to one new instance.
Ideally, the
&lt;code&gt;process_link_reference_definition&lt;/code&gt; function was the only function that needed to create
a new instance, and I wanted to make that so.&lt;/p&gt;
&lt;p&gt;The new instances that were usually in places that had already been transformed before
this refactoring began.  These were usually functions like the
&lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function which had been one of my test functions for
this refactoring.  In those cases, I simply repeated the process that I
used in Phase 2 to remove those extra instances.  In cleaning up those instances, there
were a few cases where a “non-requeue” was being returned in a &lt;code&gt;requeue_line_info&lt;/code&gt;
instance, accomplished by setting the &lt;code&gt;lines_to_requeue&lt;/code&gt; member variable to &lt;code&gt;None&lt;/code&gt;.  While
these were not difficult to deal with, it did increase the challenge factor for the
refactoring.&lt;/p&gt;
&lt;h4 id="the-result"&gt;The Result&lt;a class="headerlink" href="#the-result" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;At each step of each phase, I was able to execute the scenario tests, ensuring that the
changes were not changing the output of the parser.  This was pivotal.  With 238 additions
and 271 deletions over 11 changed files, I would not have noticed any bad effects from
some of these changes without those scenario tests.  This refactoring was also very pivotal
in ensuring that I had confidence to make other refactorings.  Because this was not a
simple refactoring, I knew that completing this refactoring meant many others were
not only possible, but possible with confidence that they could be accomplished.&lt;/p&gt;
&lt;p&gt;What about raising exceptions instead of returning the instances? After having done this
work, I had a high degree of confidence that there will be issues with that approach.
The main issue that I saw was that a few functions recursively call the
&lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function.  While I think that it may be possible,
I wanted to focus on refactorings that I believe will positively impact the code with
a high probability of success.  At the time that I wrapped the refactoring up, I made
a decision that raising an exception with the information fell below my definition of
“a high probability of success”.&lt;/p&gt;
&lt;h3 id="bolstering-the-consistency-checks"&gt;Bolstering The Consistency Checks&lt;a class="headerlink" href="#bolstering-the-consistency-checks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I scanned through items in the issues list, there were a couple of items that I
thought would be easy to either verify or complete.  The first one was about
confirming that the &lt;code&gt;rehydrate_index&lt;/code&gt; was being verified in the consistency checks.
Looking into that one, I was pleased to find that there was already a check in the
Markdown transformer.  Looking at the &lt;code&gt;verify_line_and_column_numbers.py&lt;/code&gt; module,
I did not find the same check, but adding it was very easy. Similarly, confirming the
presence of the same types of checks for the &lt;code&gt;leading_space_index&lt;/code&gt; was just as easy.
However, in this case, all the needed checks were already in place, so no code changes
were required.&lt;/p&gt;
&lt;h3 id="validating-inline-tokens"&gt;Validating Inline Tokens&lt;a class="headerlink" href="#validating-inline-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next item was not as easy, but it was close to it.  For some reason that is now lost
to me, I had a suspicion that I had a blind spot with the inline tokens at the end of
a Text block.  If I had to guess, I was worried that I did not have at least one example
of every Inline token and end Inline token at the end of a Text block, meaning there was
a possibility that one of those calculations were off.&lt;/p&gt;
&lt;p&gt;While I was pretty sure that I had since covered that item, I wanted to make sure that
I had concrete proof of that.  Looking around the scenario test groups, I was happy to
find that the Paragraph Series D tests were constructed to have only a single inline
element in each paragraph.  By that very definition, each of the inline elements used
in those tests were both the first and the last token in each paragraph.  After verifying
that each inline token was present at least once, I resolved that item.&lt;/p&gt;
&lt;h3 id="a-quick-refactor"&gt;A Quick Refactor&lt;a class="headerlink" href="#a-quick-refactor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before moving on to some more substantial refactorings, I wanted to make sure I had
a bit more practice to boost my confidence.  To that extent, I started by taking the
function &lt;code&gt;count_of_block_quotes_on_stack&lt;/code&gt; from the &lt;code&gt;BlockQuoteProcessor&lt;/code&gt; class
and moving it to the &lt;code&gt;ParserHelper&lt;/code&gt; class.  It just did not feel right being in the
&lt;code&gt;BlockQuoteProcessor&lt;/code&gt; class, and this took care of that problem.&lt;/p&gt;
&lt;p&gt;Once that task was accomplished, I started work on a new related function:
&lt;code&gt;find_last_block_quote_on_stack&lt;/code&gt;.  The purpose of function itself was simple.  Start at
the end of the &lt;code&gt;token_stack&lt;/code&gt; list and work backwards until a Block Quote token was
encountered. I was doing this manually in four different places, and this change
simplified that code in those four locations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_last_block_quote_on_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;last_stack_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;last_stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_document&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;last_stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;last_stack_index&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;last_stack_index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once that was completed, I also created variants of that function, the
&lt;code&gt;find_last_container_on_stack&lt;/code&gt; for finding the last container block on the stack
(which was useful) and the &lt;code&gt;find_last_list_block_on_stack&lt;/code&gt; function (which was not
useful).  While these refactorings did not have the impact that I had hoped, each
one still left the code more readable by describing what they were doing in their function
name.&lt;/p&gt;
&lt;h2 id="doing-more-of-a-heavy-lift"&gt;Doing More Of A Heavy Lift&lt;a class="headerlink" href="#doing-more-of-a-heavy-lift" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After completing the above tasks, I felt sufficiently confident to attempt some
more interesting refactorings.  These refactorings were only interesting in that the
code that used them was all over the place, usually in calculations that would have
to be individually examined before each refactoring.  But, as this group of refactorings is
a group that I have noted in the issues list, I need to push through them.  On top of that,
with my recent successes, it just felt
like the right time to deal with those issues.&lt;/p&gt;
&lt;p&gt;On the surface, none of these new functions created for the refactorings are special.
Each one does a single, very basic thing, but it does it once.  In visiting different
parts of the project’s code base, I had a
loosely organized picture of which patterns were common, and I started looking for them
to confirm that they were indeed common.  While I talk about the five patterns that I
noticed here, there were also two other patterns that I chose not to do as I did not see
a common pattern in them.  While I do believe that refactoring those patterns to clean
up the code would be useful, I do not believe that a refactoring of either one of those two
patterns would substantially benefit the code base.  At least not yet.&lt;/p&gt;
&lt;h3 id="count_newlines_in_text"&gt;count_newlines_in_text&lt;a class="headerlink" href="#count_newlines_in_text" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This function was already in the &lt;code&gt;ParserHelper&lt;/code&gt; class, but it was not widely used outside
of the parser code itself.  In particular, every instance of this pattern was found in
the consitency checks.  In each case, a pattern like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;inline_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resolved_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was replaced with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;inline_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count_newlines_in_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resolved_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It just made sense to replace the old code with the function call.  The function was
already in the &lt;code&gt;ParserHelper&lt;/code&gt; class and it was already battle tested.  In addition,
by using the function, the function itself could be tweaked to be more performant
without having to change the calling code.&lt;/p&gt;
&lt;h3 id="calculate_deltas"&gt;calculate_deltas&lt;a class="headerlink" href="#calculate_deltas" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always near the top of my “refactor list” was a new function to calculate the deltas
for the line number and column number for a given text string.  I already knew that I
had this copied this in various forms into at least eight locations, and it just seemed
bad form not to refactor it. While
this code was easy to use once tested, there were a number of small tunings that could
make it more performant once its various implementations were gathered together in a
function with one single implementation.&lt;/p&gt;
&lt;p&gt;The essence of this new function is the logic to ensure that the line/column number pair
is updated to properly account for any element that was just parsed.  While the case for
updating a single line element is trivial, there are a few steps that must be
followed to ensure that a multiple line element’s position is updated properly.  The
change in the line number is the simple part, being a count of the number of newline
characters in the element’s source text.  The column is trickier.  Once any special
characters have been removed, the new column number is the number of characters that
occur after the last newline character.  With its little nuances, it just seemed right
to do this properly once.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_deltas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_to_analyze&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;delta_line_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;delta_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text_to_analyze&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;split_raw_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_to_analyze&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;delta_line_number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_raw_tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="n"&gt;last_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_raw_tag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;last_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve_replacement_markers_from_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;last_element&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;last_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_escapes_from_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;length_of_last_elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;delta_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length_of_last_elements&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;delta_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_to_analyze&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;delta_line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delta_column_number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I picked up the code from one of the three places that I found the code and was able
to easily create the &lt;code&gt;calculate_deltas&lt;/code&gt; function.  Replacing the code from the original
function that I copied it from, I found it just as easy to replace the other two instances
of that code.  To make its use simpler, I did some extra work to massage the input to
include surrounding characters in the calculation, to avoid extra math.  For example,
in the &lt;code&gt;handle_angle_brackets&lt;/code&gt; function, instead of a more complex calculation of the
column number, I simply adjusted the &lt;code&gt;between_brackets&lt;/code&gt; variable passed to the
&lt;code&gt;calculate_deltas&lt;/code&gt; function to include the actual angle brackets that were used.&lt;/p&gt;
&lt;h3 id="calculate_last_line"&gt;calculate_last_line&lt;a class="headerlink" href="#calculate_last_line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is one that I thought I had in more places than I found when I started
looking.  I thought that I was splitting a line in more than two places, using that
last line to determine what was left on a line.  My best guess is that most of those
cases were removed when I condensed most of that logic into the &lt;code&gt;calculate_deltas&lt;/code&gt;
function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_last_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;split_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;split_label&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But even so, clearly spelling out that the code was working with the last line of
text in a multiple line string was worth it to me!&lt;/p&gt;
&lt;h3 id="recombine_string_with_whitespace"&gt;recombine_string_with_whitespace&lt;a class="headerlink" href="#recombine_string_with_whitespace" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The last refactoring that I wanted to get out of the way was essentially a
&lt;a href="https://en.wikipedia.org/wiki/Swiss_Army_knife"&gt;Swiss Army Knife&lt;/a&gt; function
that I could use to recombine a string with its leading whitespace.  In each case,
the pattern started the same: split the text, split the whitespace.  It was the next
part, piecing the whitespace and the text together once split, where the various
functions varied in their approach.  But, taking my time, I was able to assemble
a single function with five default parameters that worked in each of the twelve
instances where that logic appeared.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recombine_string_with_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;text_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;whitespace_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_replace_marker_if_empty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;post_increment_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_text_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_whitespace_after&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;split_text_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;split_whitespace_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;whitespace_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_text_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_text_string&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;post_increment_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;ew_part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_whitespace_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ew_part&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;add_replace_marker_if_empty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ew_part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_replace_with_nothing_marker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ew_part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;add_whitespace_after&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;split_text_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_text_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ew_part&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;split_text_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ew_part&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;split_text_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;post_increment_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_text_string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It looks a bit ugly because of the optional parameters, but it is basically simple.
Given a processed string with its leading spaces removed and a separate string with
those leading spaces that were removed, recombine them into the original string.
All the “ugliness” is making sure to handle the various combinations and twists
needed to accommodate each use of this function.&lt;/p&gt;
&lt;h3 id="calculate_next_leading_space_part"&gt;calculate_next_leading_space_part&lt;a class="headerlink" href="#calculate_next_leading_space_part" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Unlike the other refactorings in this section, this refactoring was added to the
&lt;code&gt;ContainerMarkdownToken&lt;/code&gt; class.  One pattern that I found was that I kept on
copying and pasting code to to deal with Block Quote tokens, specifically to determine
what part of the &lt;code&gt;leading_spaces&lt;/code&gt; property of a Block Quote token was current.
Furthermore, I also
needed to ensure that in multiple cases, if I used that leading space, that I incremented
the &lt;code&gt;leading_text_index&lt;/code&gt; member variable to reflect that usage.&lt;/p&gt;
&lt;p&gt;Hence, the &lt;code&gt;calculate_next_leading_space_part&lt;/code&gt; was created:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_next_leading_space_part&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;increment_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;leading_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;increment_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;leading_text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="and-it-logically-follows"&gt;And It Logically Follows&lt;a class="headerlink" href="#and-it-logically-follows" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After completing the last set of refactorings, I took a bit of time to look around the code
and see if I could see anything that jumped out at me.  The first thing that I noticed
was that the &lt;code&gt;recombine_string_with_whitespace&lt;/code&gt; was already set up to handle both single
line and multiple line strings.  As such, doing a check to see if the string being passed
into the &lt;code&gt;recombine_string_with_whitespace&lt;/code&gt; function contained a newline character did
not have any benefit.  Hence, I simplified a few &lt;code&gt;if&lt;/code&gt; statements that occurred before
a call to &lt;code&gt;recombine_string_with_whitespace&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once that was done, I also noticed that the &lt;code&gt;__handle_extracted_paragraph_whitespace&lt;/code&gt;
function was almost a duplicate for the &lt;code&gt;recombine_string_with_whitespace&lt;/code&gt; function.
This meant that I could rewrite the &lt;code&gt;__rehydrate_inline_code_span&lt;/code&gt; function to use
the &lt;code&gt;recombine_string_with_whitespace&lt;/code&gt; function instead.  The only other reference
to the &lt;code&gt;__handle_extracted_paragraph_whitespace&lt;/code&gt; function was in the
&lt;code&gt;__rehydrate_inline_raw_html&lt;/code&gt; function, which was mainly using it to increase the
&lt;code&gt;rehydrate_index&lt;/code&gt; if it was within a paragraph.  Once that code was written inline,
the entire &lt;code&gt;__handle_extracted_paragraph_whitespace&lt;/code&gt; function was deleted.&lt;/p&gt;
&lt;p&gt;While neither of these refactorings were needed, they both left the source code in
a better condition, so I went ahead and completed them.  In my evaluation, as I was
refactoring the code in that area anyways, it did not seem right to not do those
refactorings as a cleanup task.&lt;/p&gt;
&lt;h2 id="ending-on-a-high-note"&gt;Ending On A High Note&lt;a class="headerlink" href="#ending-on-a-high-note" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In some cases, a refactor is simple but looks really messy.  That is the case with the
commit for
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9433471e996e83bea13dbd6472ff447f29fff9a7"&gt;this refactoring&lt;/a&gt;.
If you look at the commit, it looks like I changed the entire function to do something,
but what that something is seems obscured by the changes.  Looking at that commit
closely, there are only two small changes.&lt;/p&gt;
&lt;p&gt;The first change was an extremely simple one.  I changed the code in the &lt;code&gt;except&lt;/code&gt; block
of the &lt;code&gt;__transform&lt;/code&gt; function from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;BadTokenizationError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;BadTokenizationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"An unhandled error occurred processing the document."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to provide more information to the user if such an exception is ever caught.  That change
is very clear in the commit referenced above.&lt;/p&gt;
&lt;p&gt;The second change in the commit was also an equally simple one.  I changed the bulk of the
code in the
&lt;code&gt;__parse_blocks_pass&lt;/code&gt; function to be enclosed in a &lt;code&gt;try/except&lt;/code&gt; block to be able to
more accurately report on any assertions that were fired within the code.  To be clear,
I added a &lt;code&gt;try:&lt;/code&gt; near the top of the function and the following code at the end of the
function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;error_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"A project assertion failed on line "&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" of the current document."&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;BadTokenizationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The rest of the changes that are reported?  Indentation.  Yes, adding an indentation of
four to ensure that it compiled properly created the mess that shows up as differences
in the commit log.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I am not a perfectionist in my coding, I do believe that I have a different sense
of weights when trying to figure out what level of weight to associate with an aspect of
a project.  For me, having 10 mostly working and tested scenarios is not as important as
having 3 or 4 well tested and maintainable scenarios.  While that is my default weighting,
I have also learned to be able to adjust that weighting depending on certain situations.
In my professional life, I think what helps me be successful with those changing weightings
is that I usually state each of the relevant options, their weightings, and how I
calculated the weighting.&lt;/p&gt;
&lt;p&gt;For this project, I am both the developer, the tester, and the manager, so it is a bit
more nuanced.  During most of the duration of this project, my focus was to drive
the project towards completion, so I use the set of weightings that allowed me to
develop and test more efficiently.  But I always knew that those weightings would be
temporary, and that I am now moving towards the proper set of weightings for this project.&lt;/p&gt;
&lt;p&gt;So why that long description?  It is to back up my statement which is: meh.  I am still
confident about this project, but refactorings of this type were always expected, and I
realized that.  As such, it is just something to get done.  No hype, no fanfare, just
grunt work.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong, I am happy that it moves me one more step towards the release, and
I am happy that it went off without that many issues, but it is just a step.  To me,
refactorings are just a fact of life when you are a software developer.  If you are doing
them right, they will be simple, methodical, and uneventful. As they should be.&lt;/p&gt;
&lt;p&gt;I was able to keep the refactorings uneventful by having some clear goals in mind.
The first goal I have is to maintain a set of scenario tests that provide a high percentage
of test coverage for the project.  If something changes, I want to know about it as
quickly as possbile. The second goal I have it to always take small enough steps that I
can use my scenario tests to continually ensure that any changes are going in the right
direction.  Finally, my third goal is to have a solid plan going into each refactoring,
ensuring that I don’t get distracted along the way.&lt;/p&gt;
&lt;p&gt;I believe it was by following these goals that I was able to keep these refactorings
simple, methodical, and uneventful!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I do continue with some refactorings next week, my big focus was to apply some
of my recent learnings regarding performance to the project.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Learned and Useful Things</title><link href="https://jackdewinter.github.io/2021/02/08/markdown-linter-road-to-initial-release-learned-and-useful-things/" rel="alternate"></link><published>2021-02-08T00:00:00-08:00</published><updated>2021-02-08T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-02-08:/2021/02/08/markdown-linter-road-to-initial-release-learned-and-useful-things/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/01/markdown-linter-delving-into-the-issues-19/"&gt;last article&lt;/a&gt;, I documented how
I worked hard to get to complete the unprioritized items in my issues list.  This
article takes a break from all that hard work to look back over the last year’s work,
and what I learned on my path to this …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/01/markdown-linter-delving-into-the-issues-19/"&gt;last article&lt;/a&gt;, I documented how
I worked hard to get to complete the unprioritized items in my issues list.  This
article takes a break from all that hard work to look back over the last year’s work,
and what I learned on my path to this point.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just over a year ago, I came across a problem that I really wanted to solve.  I had been
writing articles and posting them on my personal blog for about five months and I was not
happy with some parts of that process.  I was improving my writing process and finding
my voice, so that was not the problem.  It was the lack of process around the consistency
of the articles that I felt was the problem.  I needed a tool that would help me
maintain the consistency of my articles as a group, ensuring they all followed some
basic rules that I wanted to enforce.  It was then that I knew I wanted to write
my own Markdown linter to do exactly that.&lt;/p&gt;
&lt;p&gt;During the time that I have been working on this project, I have learned a lot about
myself and some good practices to keep
while undertaking such a project.  I will not be so bold as to call these “Best Common
Practices and Learnings”, but I will definitely step up and own them as “What Jack
Learned and Finds Useful”.  I know it is not as shiny of a title as the first one, but it
is one that I feel I can own while remaining honest and keeping a relatively level ego.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  Unlike past articles in this and related series,
the articles used as inspiration for this article range from my first article
on PyMarkdown titled
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;Markdown Linter - Collecting Requirements&lt;/a&gt;
to the article before this titled
&lt;a href="https://jackdewinter.github.io/2021/02/01/markdown-linter-delving-into-the-issues-19/"&gt;Markdown Linter - Delving Into Issues 19&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="learning-1-find-the-passion-for-your-project"&gt;Learning #1: Find The Passion For Your Project&lt;a class="headerlink" href="#learning-1-find-the-passion-for-your-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It might seem silly to some, but when it comes to a lot of things in my life, I like a
good, solid, dependable process.  It is okay with me if that process grows, matures, and
changes in response to perceived issues with that process, but not having a dependable
process is just one more thing I must worry about managing.  Basically, if I know
I am going to stress out about something, I try and have a process in place to help me
mitigate that stress. So, when it comes to my personal blog, I had a simple process for
writing my articles and the beginning of a manual process for publishing those articles,
but I did not feel that I had any process around maintaining a solid consistency level
throughout those articles.  That bothered me.&lt;/p&gt;
&lt;p&gt;Looking around for a tool that would fill this gap, the only tool that I found that was
close to what I wanted was the
Javascript
&lt;a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint"&gt;Markdown Lint&lt;/a&gt; program,
by David Anson.  This is a plugin for Visual Studio Code (VSCode)
that is easy to use, install, and get started with for linting Markdown documents
with VSCode. But even though that project is in wide use and obviously means well, I 
did not feel that it was the right tool for
the job.  I wanted to be able to run a finely tuned process over
my articles, ensuring their consistency.  As Markdown Lint was written to be applied to
text being processed by
the many Markdown processors out in the wild, there are a fair number of rules
that are not as fine-tuned as I would like them.  On top of that, I did not
feel that Node.Js was a good language for developing a parser in.  To me, the NPM
library system is good for websites, but lacks the accountability and stability I
believe is a requirement for any good parser.  For those reasons, I decided to start and
write my own Markdown to HTML parser, with a Markdown Linter built on top of that.&lt;/p&gt;
&lt;p&gt;At
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;that time&lt;/a&gt;,
it was relatively easy for me to come up with the basic list of requirements for the
project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;must be able to see an accurate tokenization of the markdown document before translating to HTML&lt;/li&gt;
&lt;li&gt;all whitespace must be encoded in that token stream as-is&lt;/li&gt;
&lt;li&gt;initial tokenization for GitHub Flavored Markdown only, add others later&lt;/li&gt;
&lt;li&gt;must be able to provide a consistent lexical scan of the Markdown document from the command line&lt;/li&gt;
&lt;li&gt;extending the base linting rules should require very little effort&lt;/li&gt;
&lt;li&gt;written in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With only one small modification, these requirements have remained the same since I
recorded them down in that article on 2019 Dec 08.  That one change?  That change is a
&lt;a href="https://jackdewinter.github.io/2021/01/25/markdown-linter-delving-into-the-issues-18/#which-to-choose"&gt;recent change&lt;/a&gt;,
changing “for GitHub Flavored Markdown only” to “for GitHub Flavored Markdown only (as
defined by the CommonMark reference implementation CommonMark.Js version 0.29.2).”&lt;/p&gt;
&lt;p&gt;This desire to have a tool that meets these requirements is a large part of the passion
that drives me forward on this project.  The other part of the passion is made up of my
desire to learn and grow.  While it might seem (and usually is) dry reading, by writing
about the work I did on the project EVERY week, I give myself the ability to look back
and see how much I have changed along the way.  Writing an article back at the beginning
of the project took almost 24 hours before I was happy with the content and style.  Now
I can usually write an article that I am happy with in 4-6 hours, with breaks in between
to spend time with my family.  That kind of growth is the other part of my passion, so
that works out very well!&lt;/p&gt;
&lt;p&gt;When I have trouble making progress forward or sitting down and doing work, these are
the main drivers that keep me moving forward through the many obstacles in my way.
These are critical to any project that you want to see succeed.  I now have my own
clear proof that confirms that is the case!&lt;/p&gt;
&lt;h2 id="learning-2-your-project-is-not-your-life"&gt;Learning #2: Your Project Is Not Your Life&lt;a class="headerlink" href="#learning-2-your-project-is-not-your-life" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I will easily admit that I worked harder in the first three months of the project (to get
it off the ground) than I have at any other point in the project.  But even then, I was
careful to not work too hard on the project at the expense of other things in my life.
Even when the pandemic hit and I was at home all
the time, I tried to make sure that I balanced my work on the PyMarkdown project with
the other projects that I wanted to do and with spending time with the people in my life.
Even though it was often difficult to resist the siren’s call of the latest issue that
needed solving, I put them on hold when I needed to.&lt;/p&gt;
&lt;p&gt;Do not get me wrong.  I often
chose to spend some extra time working on the project for one reason or another.  I
like challenges, and I have a passion for the project, so it makes sense that I would
spend extra time on the project.
But balancing that passion were the other times where I did not feel that I could give the
project my best work, and specifically chose not to work on the project.  Sometimes the
reason was that I was not feeling well.  Sometimes the reason was that the feeling of
being stuck at home ALL THE TIME during a pandemic was getting to me.  Sometimes, it
was just I did not feel like it.  Whatever the reason was, if I did not feel that I could
give the project the same level of professional respect that I give to my full-time
job, I did not work on the project.&lt;/p&gt;
&lt;p&gt;For me, I believe that is one of the reasons that I have stuck with this project.  Sure,
there are times that I do not want to work on “yet another #@$%^&amp;amp; parsing error”, and I
have to grit my teeth and work through them.  But I also know that if I need to walk
away from the issue to rethink my approach to it, that option is also on the table.
I am the only one making the decision when to work and what to work on, and
that is both empowering and a responsibility.  At the same time, that both gives me
the freedom to live my life properly, helping me decide how to balance this project
and other projects with my life.&lt;/p&gt;
&lt;h2 id="learning-3-be-honest-about-your-goals"&gt;Learning #3: Be Honest About Your Goals&lt;a class="headerlink" href="#learning-3-be-honest-about-your-goals" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are in a team, make sure you are honest with your team about you goals.  If you
are the team, make sure you are honest with yourself.  I know that might not make a lot
of sense or seem that it is too basic, but I believe that it is important to my success
with this project. Getting from ground zero to a fully compliant
&lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown&lt;/a&gt;
parser was not something that occurred overnight.  It took a lot of hard work and a lot of
goal setting along the way.  &lt;/p&gt;
&lt;p&gt;It all started with my first goal on 2019 Dec 16: getting my
&lt;a href="https://jackdewinter.github.io/2019/12/16/markdown-linter-setting-up-parser-tests/#starting-with-the-first-scenario-test"&gt;first scenario test&lt;/a&gt;
coded.  That was followed by my writing down the
&lt;a href="https://jackdewinter.github.io/2019/12/22/markdown-linter-parser-testing-strategy/"&gt;parser testing strategy&lt;/a&gt;
that I intended to use to move forward, along with how I intended to
&lt;a href="https://jackdewinter.github.io/2020/01/06/scenario-testing-python-scripts/"&gt;capture the scenario information&lt;/a&gt;
for each test.  By setting those goals at the start of the project, I have been able
to use them as the
&lt;a href="https://theminimalistvegan.com/north-star/"&gt;North Star&lt;/a&gt;
for the project, foundational goals that I can refer to if I get disoriented or lost
along the way.  And from my experience, everyone gets lost at some point, needing
some form of light to find their way back.  It is just a matter of being prepared for
it when it happens.&lt;/p&gt;
&lt;p&gt;From that point forwards, I set realistic goals on what I wanted to achieve in the next
block of work for the project. Having a single scenario test but no source code to test
against, my first goal was to write the parser code behind that first scenario.
With that accomplished, I broadened the goal to get the other the Markdown elements
parsing, so I started in January with the
&lt;a href="https://jackdewinter.github.io/2020/01/27/markdown-linter-parsing-normal-markdown-blocks/"&gt;straightforward blocks&lt;/a&gt;,
and reached the final Markdown elements,
&lt;a href="https://jackdewinter.github.io/2020/04/20/markdown-linter-adding-image-links-and-simple-cleanup/"&gt;links and images&lt;/a&gt;,
at the end of April.  My next goal was to prove that I could easily write a rule that
would take advantage of the PyMarkdown parser, so I spent my time in May working on
that
&lt;a href="https://jackdewinter.github.io/2020/05/04/markdown-linter-core-pre-rule-improvements/"&gt;initial rule support&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Having come across approximately ten bugs in how the parser handled certain situations, I
decided that the next goal needed to be one that would bring stability to the scenario
tests.  As I am always concerned about the quality of any project that I work on, I was
honest with myself that this goal: I would not finish it until I was confident that my
solution could catch any failures that I missed.  To accomplish that, I started working on
the main bulk of the
&lt;a href="https://jackdewinter.github.io/2020/06/15/markdown-linter-rabbit-hole-1-adding-consistency-checks/"&gt;consistency checks&lt;/a&gt;
in June, stopping at the
&lt;a href="https://jackdewinter.github.io/2020/09/21/markdown-linter-adding-remaining-inline-tokens/"&gt;end of September&lt;/a&gt;.
Even though I have since completed that work, I still maintain a goal that ensures that
any source code changes are accompanied by any required changes to ensure that the
consistency checks remain current.&lt;/p&gt;
&lt;p&gt;With those checks in pace, my next goal was to do experimental testing, adding new
scenario tests for any issues I found or areas that I wanted to make sure were tested.
That task took me from the
&lt;a href="https://jackdewinter.github.io/2020/09/28/markdown-linter-delving-into-the-issues-1/"&gt;last week of September&lt;/a&gt;
to the first week of
&lt;a href="https://jackdewinter.github.io/2021/02/01/markdown-linter-delving-into-the-issues-19/"&gt;February 2020&lt;/a&gt;.  There were many times in that time frame
where I questioned if I was being too picky about the scenario tests.  At those times,
I took another look at the GFM specification and the breadth of scenarios that it tries
to cover.  And while it might sound counterproductive, I also looked at the output
from the
&lt;a href="https://johnmacfarlane.net/babelmark2/"&gt;Babelmark 2&lt;/a&gt; tool.
While I spent most of my time looking at the output for the &lt;code&gt;commonmark.js 0.29.2&lt;/code&gt;
entries produced by that tool, I also looked at the other output provided for other
Markdown parsers.  That output reminded me of why I felt that the testing of all
these scenarios was important.  A couple of lines of Markdown is interpreted into
a multitude of different HTML output by different Markdown parsers.  But only one set of
that HTML output was the right one for this project: the CommonMark one that is the
reference parser for the GFM specification.&lt;/p&gt;
&lt;p&gt;It is not always easy to get to the next goal but being honest with myself about the
amount of work required to get to that next goal helps me deal with it in a concrete
fashion.  For me, that honesty is represented in the project’s
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md"&gt;readme.md file&lt;/a&gt;.
While I will rename it before I release the project, that file provides me with a simple
and stark view of what I need to accomplish before releasing the project.  Not
a list of issues that are easily dismissed, but a cohesive list of issues that I
look at every time I open the project.&lt;/p&gt;
&lt;p&gt;That level of honesty, about what needs to be done and the values I have, keeps me
honest with myself.  There is no pushing off the release for years, and there is no
skimping on quality.  As the television actor is misquoted as saying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just the facts, ma’am.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://idioms.thefreedictionary.com/Just+the+facts%2c+Ma%27am"&gt;Jack Webb&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="learning-4-find-a-process-that-works-for-you"&gt;Learning #4: Find A Process That Works For You&lt;a class="headerlink" href="#learning-4-find-a-process-that-works-for-you" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After working on this project for over a year, I have a clearly defined process that
I use with every change.  For any group of scenario tests that I add, I use the North Star
processes mentioned in the last section to set up those tests.  I then
pick one of those tests and first run it without any debug active, forming an initial
observation on what I am seeing and why that may be happening.  Either to clarify that
observation or to confirm that observation, I then enabled debugging and follow through
the flow of the data for the specific lines where I believe the issues manifests.  If
needed, I then refine my observations and examine the output again until I have the
clarity that I require to fix the issue.  Sometimes it means adding more debug,
sometimes it is so obvious that I almost laugh.&lt;/p&gt;
&lt;p&gt;With that clarified observation in hand, I then start looking at the source code,
making small debug modifications to verify that I am in the
right part of the source code for the issue I am observing.  I then use that information
to help me make a change to the source code to change the behavior of that function
from non-compliant results to compliant results.  That often takes a number of
iterations that can take anywhere from 5 minutes to 5 hours.  Once I have that one
specific scenario test working with the new code, I execute the entire collection of
scenario tests to determine if any of those tests were negatively affected.  If so,
I note that negative effect as an observation, and take another look at the change I
made, altering that change into one that does not have that negative effect on the other
tests.  Only when all active tests are passing do I consider the change as “good”.
And, while it is rare, there are cases where my observations are totally wrong, and I need
to back out any changes I made and start from the beginning.  Part of my process is that
I need to be able to make that call if I find myself hopeless lost.&lt;/p&gt;
&lt;p&gt;When I am finished with a group of changes, I go through the changes that I made with my
editor, looking for funny variable names and function names that I used as shortcuts during
the debugging process.  Then I execute my &lt;code&gt;clean.cmd&lt;/code&gt; script to start running the
Black code formatter and the Flake8 and PyLint linters on the Python source code.
As the final stage of that script is to re-run the scenario tests to ensure that they
are all passing, I have a double check in place to ensure that I do not commit changes
that break existing tests.  When those checks pass, I double check the changes, and then
run the &lt;code&gt;clean.cmd&lt;/code&gt; script with the &lt;code&gt;-p&lt;/code&gt; flag, publishing the number of tests and the test
coverage to the &lt;code&gt;publish&lt;/code&gt; directory, where I can examine them at a later date.&lt;/p&gt;
&lt;p&gt;While that entire process is long, it works for me.  For me, it is not too complicated
or too bulky, it is just right.  I keep things at a granular level, so I do not have to
worry about big blocks of features or issues to work on, just small changes that need
to be completed and verified.  And while I might occasionally skip running the
&lt;code&gt;clean.cmd&lt;/code&gt; script, I know that I will most likely execute it the next time, catching
anything that I missed from the time before.  As such, I try and run it every time,
just to keep the scope of the changes small and manageable.&lt;/p&gt;
&lt;p&gt;The big thing here is that this process works for me.  It gives me a solid framework
to focus on, and it gives me a plan on how to attack each issue that I am working on.
Until there are more people on the project, that process does not have to make sense
to anyone else or work for anyone else other than me.  And I am confident that the
process works well for me!&lt;/p&gt;
&lt;h2 id="learning-5-but-know-when-to-deviate"&gt;Learning #5: …But Know When To Deviate&lt;a class="headerlink" href="#learning-5-but-know-when-to-deviate" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But even though I like process, there are times that I know I need to deviate from
that process for my own good.  During the project, there have been a few times where
I knew that there were a group of issues that were all going to change code in one
specific area.  As such, I followed my usual process for the first two steps of my
development process, but then delayed the third step of that process.  I made that
decision with the intent to delay that third step but not to omit it.  I felt that it
would produce better results if I delayed that third step until all the changes
were completed, rather than trying to clean up intermediate steps.  So, I deviated.&lt;/p&gt;
&lt;p&gt;Another good example is the recent learning I have been doing on Python performance
profiling.  While I will be delving into what I learned in future articles, I needed
some space to start working with the performance tools and learn how to use them
effectively.  To accomplish this, I took a couple of my usual nights off and spent an hour
or so of each night going through some tutorials on &lt;code&gt;cProfile&lt;/code&gt; and &lt;code&gt;SnakeViz&lt;/code&gt;.  Any future
performance work will follow the normal process but getting to the point where I felt
comfortable enough with the tools took some work.  So, I deviated.&lt;/p&gt;
&lt;p&gt;Having a process is good, and for me, it is a necessity.  It helps me release my mind
from figuring out what order to do things in, as I already have a process for that.
But being bound to that process with no escape valve is not a good thing.  I know I
have a personal high bar on when I deviate from the project’s process. But I also know
I am honest with myself on when and why I believe I need to deviate.  And the two of those
concepts working together is what makes my escape valve work nicely.&lt;/p&gt;
&lt;h2 id="learning-6-know-how-you-rubber-duck-you"&gt;Learning #6: Know How You Rubber Duck You&lt;a class="headerlink" href="#learning-6-know-how-you-rubber-duck-you" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For reference, I have a little rubber duck on my desk called “Duckie” (named after
the character in the movie
&lt;a href="https://en.wikipedia.org/wiki/Pretty_in_Pink"&gt;Pretty in Pink&lt;/a&gt;).  While the development
process of
&lt;a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging"&gt;rubber ducking&lt;/a&gt;
does not require an actual rubber duck to talk to, I had one available and I found
that rubber ducking to an actual rubber duck amusing.  Duckie also serves as a visual
reminder to me to stop and think through what I am doing.  If the concept that I am
trying to get working is too complicated, how can I make it less complicated?  If I
can make it less complicated, it should mean that I can solve the problem by breaking
it down into smaller, easier to understand problems.  And I know it sounds
silly, but if I cannot break the problem down into a simple enough problem that I
can explain it to Duckie&lt;sup id="fnref:Duckie"&gt;&lt;a class="footnote-ref" href="#fn:Duckie"&gt;1&lt;/a&gt;&lt;/sup&gt; and have Duckie understand it, then I have some work
to do.&lt;/p&gt;
&lt;p&gt;For me personally, I also know that sometimes I need to walk our dog or just get out and do
something else and rubber duck with myself.  From my experience, if I stare at a problem
for long enough, the answer does not materialize, I just get sore eyes and a headache.  By
taking a break from the problem that I am trying to solve, I find my mind wanders and
just naturally starts sifting through the problem in the back of my head.  If you are
around me when I am doing this, it will appear that I am going mad, mumbling to
myself.  But this process helps me sort through stuff, allowing me to then re-engage with
the problem with a fresh set of eyes, hopefully observing something new that I missed
before.  As a plus, I think our dog likes the extra attention he gets during those walks,
as I think he thinks I am talking to him when I am actually just muttering to myself.&lt;/p&gt;
&lt;p&gt;My final level of rubber ducking is my wife.  At various times during the day,
we visit each other and ask each other how the other’s day is going.  If she needs
to talk through something with me, I give her the floor.  If I need to talk through
something with her, she gives me the floor.  We both know that the other is seldomly
going to be able to provide actual advice on the subject, but the mere act of talking
it through helps.  We both know a bit about what the other is doing, enough that we
can ask simple questions to seek clarity on certain things that we heard.  Between
the listening and the simple questions, my wife is one heck of a rubber duck!&lt;/p&gt;
&lt;p&gt;The important thing for me is not talking about how I rubber duck to give other people
ideas on how they can rubber duck.  Instead, I am trying to communicate that everyone
rubber ducks in their own way, and if it gets the job done, it is a good
rubber duck process.  It must be something that either helps you organize your
mind until you see the picture more clearly, or you focus your mind on something completely
different to give your mind a chance to reset.  It can be as simple as breathing
techniques,as complicated as solving some manner of puzzle, or as exhausting as a
10 kilometer run.  It is just something that works for you.&lt;/p&gt;
&lt;h2 id="learning-7-ask-for-the-right-kind-of-help"&gt;Learning #7: Ask For The Right Kind of Help&lt;a class="headerlink" href="#learning-7-ask-for-the-right-kind-of-help" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This final bit of learning is one that should be obvious but is not always obvious
all the time:  ask for help, but ask for the right kind of help and in the right way.&lt;/p&gt;
&lt;p&gt;I have always used
&lt;a href="https://talk.commonmark.org/"&gt;the forums&lt;/a&gt;
for the CommonMark reference implementation as a resource but have recently started
to ask questions in those forums.  For the first 95% of the parser, the specification
has great examples and great explanations for each scenario that I came across.  Which
has higher precedence: a link sequence or a code span sequence?  See
&lt;a href="https://github.github.com/gfm/#example-533"&gt;example 533&lt;/a&gt; and the text around it. Are
empty links allowed?  See
&lt;a href="https://github.github.com/gfm/#example-559"&gt;example 559&lt;/a&gt; and
&lt;a href="https://github.github.com/gfm/#example-560"&gt;example 560&lt;/a&gt;.  But the questions are not
always that easy to answer.&lt;/p&gt;
&lt;p&gt;Now that I am into that last 5% of scenarios for the parser, I often find myself outside
in the weeds as far as the specification and reference implementation goes.  In some
cases, the parser is wrong, and I need to understand how it is wrong to fix it properly.
In some cases, the specification is poorly worded or did not include some text required
to resolve the specific outside case that I found.  And in some rare cases, I find issues
with the reference implementation that I am not convinced are issues until I talk through
them with the forum.  In those cases, after discussion with the members of
that forum, I add issue reports to the respective GitHub repository for that parser.&lt;/p&gt;
&lt;p&gt;I believe that part of my success in communicating with that forum is based on a handful of
principles. The first principle is that no parser is wrong, it just depends on what the
specific requirements of that parser are.  The second principle is that I am
not there to point fingers at anyone or their implementation, but to ask questions and get
some help.  This means that I try and always word my questions using the word “I”.  “I am
having trouble understanding…” “I am not sure where I went wrong with…” “I am reading
the specification and…”  The third principle is that I always do my homework.  Before
I post something to the forums, I make sure I have looked at the problem from multiple
angles and try and document the relative research in my post.  I do not want anyone to do
more work than they have to in order to help me.  Maybe it is just me, but I find that
rude.  And finally, the last principle is an easy one.  Be gracious.  Everyone on
the forum is participating because they want to, and many of them are responding on their
own free time.&lt;/p&gt;
&lt;p&gt;Every time I ask for help, it is with those principles in mind.  And so far, it seems to
be working quite well!&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While this entire article is about my experiences and how I have learned from them,
the one thing that I have learned a lot more about in the last year of working on this
project is my ability to be patient.  I am not sure to which extent it is surviving through
this year of the pandemic or it is developing the project to meet my goals, but I know
both have contributed to a renewed sense of patience that I now have.&lt;/p&gt;
&lt;p&gt;In both cases, I think that things just are the way they are, and they must play out.
Sure, I can rush the PyMarkdown project and release early, but then I would not feel good
about the quality.  Yes, I can decide to not be careful with the pandemic around, but I
would feel terrible if someone near me got sick because of my actions.  With the project,
I have requirements and goals, and I just need to follow those as my North Star.  With my
life, I know that helping to ensure the health and safety of others is one of personal
life North Stars. In both cases, I must be patient follow what I believe to be
right.&lt;/p&gt;
&lt;p&gt;It took me a lot of effort, both project-wise and life-wise to get to this point in
the project.  Now that I am on a clearly defined road to release, I know that I can be
patient for just a little bit longer, without sacrificing any of my requirements.
For me, that is a great thing to realize and learn about myself!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having exhausted the list of unprioritized items in the issues list, it was time to
get to work on the Priority 1 and Priority 2 items on that list.  Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:Duckie"&gt;
&lt;p&gt;To be clear, Duckie is not sentient and does not speak to me.  It really is a test of whether or not I think that Duckie could understand it, if he had a decent enough amount of sentience. &lt;a class="footnote-backref" href="#fnref:Duckie" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 19</title><link href="https://jackdewinter.github.io/2021/02/01/markdown-linter-delving-into-the-issues-19/" rel="alternate"></link><published>2021-02-01T00:00:00-08:00</published><updated>2021-02-01T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-02-01:/2021/02/01/markdown-linter-delving-into-the-issues-19/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/25/markdown-linter-delving-into-the-issues-18/"&gt;last article&lt;/a&gt;, I documented how
I was working hard to get to the end of the unprioritized items in my issues list
and on to the prioritized parts of the list.  This article details the work that
I am performing to get to the end of the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/25/markdown-linter-delving-into-the-issues-18/"&gt;last article&lt;/a&gt;, I documented how
I was working hard to get to the end of the unprioritized items in my issues list
and on to the prioritized parts of the list.  This article details the work that
I am performing to get to the end of the unprioritized list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I started the week with one goal on my mind: to clear out any unprioritized items so that
I can start working on the prioritized items next week.  I knew that goal might not be
achievable, but that was okay for me.  It was something concrete that I could work towards.
Possibly achievable and concrete… sounded good to me!&lt;/p&gt;
&lt;p&gt;Internally, I was fighting a different battle.  I knew that I had some work to do to
finish off the unprioritized items. I knew that I also had some clearly defined priorities
that I had listed in the issues list.  But in the process of prioritizing items, I missed
the sections that occur after the &lt;code&gt;Bugs - Tabs&lt;/code&gt; section.  While not everything would be
actionable right away, I did need to take the time to figure out when those
sections will be handled.  Not having a plan with the release getting closer was just
getting to me.&lt;/p&gt;
&lt;p&gt;At the very least, I know that I could wait with a concrete decision on that question
until after all the unprioritized items were resolved, so off I went!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/31b0169baae52401112a4ae422aac4c4d333d0e5"&gt;20 Jan 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/e1dcba175cb9837f77ec9f7c5b82120c6cd8a394"&gt;24 Jan 2021&lt;/a&gt;.&lt;/p&gt;
&lt;!--- pyml disable-next-line no-trailing-punctuation --&gt;
&lt;h2 id="the-big-push"&gt;The Big Push!&lt;a class="headerlink" href="#the-big-push" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From the number of items in the issues list that were not prioritized, I knew that if I
focused for between a couple of days and a week, I could get every unprioritized item
resolved.  It was time for a big push!  &lt;/p&gt;
&lt;h3 id="yet-more-fun-with-link-reference-definitions"&gt;Yet More Fun With Link Reference Definitions&lt;a class="headerlink" href="#yet-more-fun-with-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It seems like I cannot get away from issues involving Link Reference Definitions, but
I was going to try by resolving this issue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dedup&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;append_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_reference_links_extra_03h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;hc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After consultation with the people on the
&lt;a href="https://talk.commonmark.org/t/hard-line-breaks-and-link-reference-definitions/3755"&gt;CommonMark forums&lt;/a&gt;,
I decided to double-down on my decision from last week to implement code that follows
the CommonMark reference implementation.  While I did get agreement that the Markdown
from function &lt;code&gt;test_reference_links_extra_03h&lt;/code&gt; should parse as a valid Link Reference
Definition, the current version of CommonMark (0.29.2) does not support that.  As such,
I had to make sure that the PyMarkdown parser does not support that.&lt;/p&gt;
&lt;p&gt;After adding a few extra test functions to make sure I had covered all the scenarios,
I started debugging and found the issue almost immediately.  In processing the line
within the Link Reference Definition using the &lt;code&gt;__is_link_reference_definition&lt;/code&gt; function,
the function was always finding that the Link Reference Definition was valid, including
when it ended with the Hard Line Break elements backslash &lt;code&gt;\&lt;/code&gt; character.  Adding some
extra code to the &lt;code&gt;__is_link_reference_definition&lt;/code&gt; function solved that issue, only to
show another issue.&lt;/p&gt;
&lt;p&gt;In some rare cases, a line can end with an escaped backslash character, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, the final backslash is escaped, and is represented in the token by
the Python string &lt;code&gt;bar\\\b\\\nfoo&lt;/code&gt;.  As Python escapes a backslash with another
backslash, that string is effectively read as the text &lt;code&gt;bar&lt;/code&gt;, an escaped backslash &lt;code&gt;\\&lt;/code&gt;,
a backspace special character &lt;code&gt;\b&lt;/code&gt;, another escaped backslash &lt;code&gt;\\&lt;/code&gt;, the newline character,
and finally the text &lt;code&gt;foo&lt;/code&gt;.  As I have mentioned in previous articles regarding the
project’s use of the backspace character, the first escaped backslash will be countered by
the backspace character, effectively leaving a single backslash followed by a newline
character as the most interesting character sequences in that string.  While it can be
a bit confusing to read (even to me sometimes!), that encoding allows a process to decide
whether to look at that string in its original Markdown form or in its target HTML form.&lt;/p&gt;
&lt;p&gt;While that interpretation of the sequence is correct, the parser needed to be changed
to prevent that particular end-of-line sequence from being recognized as a
Hard Line Break element.  That sequence was not really a &lt;code&gt;\&lt;/code&gt; character at the end of the
line, it was an escaped &lt;code&gt;\&lt;/code&gt; character at the end of the line.
Having identified the issue, I quick worked to modify the &lt;code&gt;handle_line_end&lt;/code&gt;
function to verify that the characters before a backslash at the end of the line were
not the sequence &lt;code&gt;\\\b&lt;/code&gt;.  After running the tests a couple of times and performing
some extra verification steps to make sure I got it right, it was on to the next issue.&lt;/p&gt;
&lt;h2 id="link-reference-definitions-and-list-boundaries"&gt;Link Reference Definitions and List Boundaries&lt;a class="headerlink" href="#link-reference-definitions-and-list-boundaries" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the goal of resolving this item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_link_reference_definitions_extra_01c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I enabled test function &lt;code&gt;test_link_reference_definitions_extra_01c&lt;/code&gt; and added a new
test function &lt;code&gt;test_link_reference_definitions_extra_01d&lt;/code&gt;.  Then I started looking at
the test examples, and I realized that I needed to think carefully about them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I knew it was a Link Reference Definition that should be broken, but I was not 100% sure
why it was broken.  Working through it on paper, I got the concrete answer that I needed.
At the end of line 1, the parser has a
single list started, with a partial Link Reference Definition active.  However, when the
second line starts with a character that is not part of a valid Link Reference Definition,
the processing is rewound, and the first line is reinterpreted as plaintext.  From there,
it becomes a single list with two list items, each list item containing half of the
“almost” Link Reference Definition.&lt;/p&gt;
&lt;p&gt;With that research in hand, I started debugging and realized two things.  The first was
that the &lt;code&gt;caller_can_handle_requeue&lt;/code&gt; argument on the &lt;code&gt;close_open_blocks_fn&lt;/code&gt; function
was not set to &lt;code&gt;True&lt;/code&gt;.  This meant that the Link Reference Definitions would never be
closed by that function.  When I addressed that issue, I found the second thing: turning
that flag on and supporting the rewind or requeue from that point required a lot of
argument passing.  While I didn’t have a lot of time to address it now, I made sure
that there was something in the issues list about addressing the issue of passing too
many arguments along and moved on.&lt;/p&gt;
&lt;h2 id="link-reference-definitions-and-block-quote-boundaries"&gt;Link Reference Definitions and Block Quote Boundaries&lt;a class="headerlink" href="#link-reference-definitions-and-block-quote-boundaries" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Being in the same area as with Link Reference Definitions and List Boundaries, I figured
that dealing with this item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_link_reference_definitions_extra_02b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was a good use of my time.  The research for this item almost followed the exact same path
that my research had followed for List Blocks.  The only difference was that they
were working on Block Quote boundaries instead of List boundaries.  Using the same
manner of fixing this issue for Block Quotes as I used for List Blocks, this issue was
quickly fixed.  This fix also carried over to the next issue that I addressed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;increases&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;LRD&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a matter of fact, I did not have to add any extra code to the parser above the code
that I originally added for function &lt;code&gt;test_link_reference_definitions_extra_02b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But having seen that I missed on a number of these scenarios involving non-paragraph
Leaf Block elements, I wanted to make sure that I had some coverage in there for the
other Leaf Block elements, hence, the issue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;introduces&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To address that issue, I added new scenario tests, test function
&lt;code&gt;test_block_quotes_229c&lt;/code&gt; to test function &lt;code&gt;test_block_quotes_229j&lt;/code&gt;.  I just started with
Indented Code Blocks, proceeded to Fenced Code Blocks, ending up on HTML Code Blocks.
With various variations in place, when I was done there were nine new scenario tests,
with five of those tests being disabled.  I had some work to do!&lt;/p&gt;
&lt;h2 id="before-signing-off-for-the-night"&gt;Before Signing Off For The Night&lt;a class="headerlink" href="#before-signing-off-for-the-night" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before I shutdown my system for the night, I looked around and noticed that there was
another item that was like the one I had just added tests for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;518&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;518&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;inside&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;test_paragraph_extra_j0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I had also forgotten to run Black on my last couple of commits, it was a good chance
to see if I had even more work to do, or if I would get a break and have some good,
positive test karma come my way.  I added test function &lt;code&gt;test_paragraph_extra_j0e&lt;/code&gt;
and two variations, one with the same thing in a Block Quote element and the other
with the same thing in a List Block element.  The good news? It worked first time,
with no test needing to be disabled.  It was a good way to end that day!&lt;/p&gt;
&lt;h2 id="friday-night-blues"&gt;Friday Night Blues&lt;a class="headerlink" href="#friday-night-blues" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As Friday night rolled around, I found that I had some spare time to work on the PyMarkdown
project that evening, but I was less than enthusiastic about it.  It seemed that every
time I worked on the project, I would resolve two or three items from the issues list,
only to add another three or
four items to that same list.  It felt like I was spinning my wheels and getting nowhere.
It took me looking at the specification and the existing scenario tests to realize that
I was just hitting a lot of boundary conditions for Block Quote elements.  At that moment
it dawned on me:  I was not adding hard-to-solve items to the issues list, I was adding
little issues that were, in all honesty, way off the beaten path of Markdown. Not to
sound too negative, but I was dealing with the nit-picky scenarios!  That helped me to
get my mind in the correct perspective!&lt;/p&gt;
&lt;p&gt;It was with that renewed sense of purpose that I refocused to work on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_block_quotes_229d&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;BQ&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ICB&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Working through the debug logs, I quickly came to an interesting conclusion.  Due to
paragraph continuation lines, most of the existing Block Quote tests would either
maintain or increase their level of Block Quotes, but never decrease.  If one of the
Block Quote start characters was missing within a paragraph, the paragraph continuation
rule would kick in the Block Quote would continue along without any disruptions.&lt;/p&gt;
&lt;p&gt;But that was not so with other, non-Paragraph elements.  Focusing on the item that
I was currently working on, I changed the &lt;code&gt;__ensure_stack_at_level&lt;/code&gt; function to
properly determine when the stack needed to increase (&lt;code&gt;stack_increase_needed&lt;/code&gt;) and
when the stack needed to decrease (&lt;code&gt;stack_decrease_needed&lt;/code&gt;).  With that code in place,
I added code to reduce the Block Quote count if needed, closing any open elements
until the proper Block Quote count was reached.&lt;/p&gt;
&lt;p&gt;And while a lot of issues I fixed in this time were only with the parser itself, this
issue required changes in the Markdown transformer.  It was not anything big, but to
make sure that the Block Quote token’s &lt;code&gt;leading_text_index&lt;/code&gt; field was properly maintained,
the &lt;code&gt;__rehydrate_block_quote&lt;/code&gt; function and the &lt;code&gt;__rehydrate_block_quote_end&lt;/code&gt; function
needed to properly increase that variable if needed.  After a bit of fiddling and
verification to make sure that everything was once again passing, it was off to
relax before a long day on Saturday.&lt;/p&gt;
&lt;h2 id="saturdays-slog"&gt;Saturday’s Slog&lt;a class="headerlink" href="#saturdays-slog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Knowing that I would have a big chunk of time on Saturday, I resolved to myself to push
hard to see if I could get to the end of the unprioritized list by the end of the day.  In
my mind, I was not sure if I would be able to do it, but I figured a good push to resolve
issues wouldn’t hurt either way.  With that, and some loud music in the background,
I hunkered down and got to work.&lt;/p&gt;
&lt;h3 id="block-quotes-and-html-blocks"&gt;Block Quotes and HTML Blocks&lt;a class="headerlink" href="#block-quotes-and-html-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having had good success with Indented Code Blocks and Block Quotes the night before,
I decided to just power ahead and deal with this item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_block_quotes_229i&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;test_block_quotes_229j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;BQ&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Doing some testing against BabelMark, I soon found out that unlike the Indented Code
Block element, HTML Code Blocks inside of a Block Quote element treated any extra
Block Quote start characters as Code Block text.  Looking over the GFM specification
and thinking about it a bit, this made sense to me.  The HTML Code Block has five different
start sequences and five matching close sequences.  Other than the Block Quote sequences
that were in place when it started, unless it matched one of those close sequences,
it would just treat any increases as text that was a part of the Code Block itself.
But that wasn’t how the parser was interpreting it. It was trying to open a new
Block Quote when it saw the extra Block Quote prefix character.&lt;/p&gt;
&lt;p&gt;To address this, I had to modify the &lt;code&gt;__count_block_quote_starts&lt;/code&gt; function to recognize
that situation, and then respond to that with changes in the
&lt;code&gt;__get_nested_container_starts&lt;/code&gt; function to ignore a change in Block Quote starts.
With those changes in place, enabling test function &lt;code&gt;test_block_quotes_229j&lt;/code&gt; was trivial,
modifying this piece of code from the function &lt;code&gt;__ensure_stack_at_level&lt;/code&gt; from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;stack_decrease_needed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top_token_on_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_indented_code_block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;stack_decrease_needed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;top_token_on_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_indented_code_block&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;top_token_on_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_html_block&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running the tests, the scenario tests now passed, and it was on to the next item.&lt;/p&gt;
&lt;!--- pyml disable-next-line no-trailing-punctuation --&gt;
&lt;h2 id="two-code-blocks-down"&gt;Two Code Blocks Down…&lt;a class="headerlink" href="#two-code-blocks-down" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And one type of code block left to deal with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_block_quotes_229g&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;test_block_quotes_229h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;BQ&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;FCB&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I would love to say that fixing these tests just required one or two lines of
code, that would be dishonest.  Because the processing of the Fenced Code Block elements
is sufficiently different from the other Code Blocks, the handling of it in the
&lt;code&gt;__handle_block_quote_section&lt;/code&gt; function was separate from the other token types.  But
while I had to repeat changes that were like the ones made for Indented Code Blocks
and HTML Code Blocks, it was very beneficial to have them to use as templates.  I
effectively used them to shortcut my debugging processes, getting both tests working
in what I would consider record time!&lt;/p&gt;
&lt;h2 id="just-to-be-sure"&gt;Just To Be Sure&lt;a class="headerlink" href="#just-to-be-sure" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was confident that I had properly addressed all the issues that had been raised so far,
but I was also concerned that I was being shortsighted.  So, at that time, I added
the item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="n"&gt;levels&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="n"&gt;over&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="n"&gt;transitions&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I re-read that item before starting to work on it, I clearly understood that it
was to question whether I
had coded the Block Quote transitions for the “plus one” cases or the “plus any” cases.  I
realize that it may not seem like a large difference to others, but I was concerned that I
had used an &lt;code&gt;if&lt;/code&gt; statement and checked at one level instead of using a &lt;code&gt;while&lt;/code&gt; statement,
checking until multiple levels had been processed.  &lt;/p&gt;
&lt;p&gt;After adding 10 new tests that did multiple increases and multiple decreases within
various Leaf Block elements, I held my breath and ran the scenario tests.  Did I get all
the cases the first time around?  How many did I miss?  Was the work to correct them
going to be difficult or easy to complete?  I just wanted to get this done.&lt;/p&gt;
&lt;p&gt;Having worked myself up over a possible lengthy set of fixes, I was pleased to find out
that only one change was required.  In the &lt;code&gt;__adjust_paragraph_for_block_quotes&lt;/code&gt; function,
I had coded a check to look for a Block Quote end token that was preceded by a Fenced
Code Block end token.  While the purpose of the check remained the same, I needed to
adjust it a bit for a case of multiple Block Quote transitions.  That check went from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block_end&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;number_of_block_quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;number_of_block_quotes&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;number_of_block_quotes&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block_end&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Other than that change, which took approximately 10 minutes to debug and implement,
all the other tests passed without requiring any changes.&lt;/p&gt;
&lt;h2 id="the-last-unprioritized-item"&gt;The Last Unprioritized Item&lt;a class="headerlink" href="#the-last-unprioritized-item" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, there was only one item left in the &lt;code&gt;Uncategorized&lt;/code&gt; section:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;single&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like the work done in the last section, I believe this was a reminder to myself
to not forget that List Blocks can also be encapsulated within a Block Quote block.
So, with the learnings of the past two sections in mind, I put together a series of
four new scenario tests for List Blocks within Block Quotes and ran the tests without
thinking about it.  They all worked on the first try, with no other changes required
in the project!  It was a good end to this series of work!&lt;/p&gt;
&lt;!--- pyml disable-next-line no-trailing-punctuation --&gt;
&lt;h3 id="and-done"&gt;And… Done!&lt;a class="headerlink" href="#and-done" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And it was with that commit that I finished working on the unprioritized items in the
issues list.  From here on, it was getting prioritized items out of the way for the
release!&lt;/p&gt;
&lt;h2 id="starting-on-prioritized-issues"&gt;Starting On Prioritized Issues&lt;a class="headerlink" href="#starting-on-prioritized-issues" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having spent a lot of my mental capital to get to this point in the project, I was
explicitly looking for some issues that were
&lt;a href="https://idioms.thefreedictionary.com/low-hanging+fruit"&gt;low hanging fruits&lt;/a&gt;.
While I knew that there were some bulkier items to deal with in the list, i wanted to try
and clear some of the light issues away to get a clearer picture of what was left.&lt;/p&gt;
&lt;h2 id="some-simple-research"&gt;Some Simple Research&lt;a class="headerlink" href="#some-simple-research" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Intending to start with something simple, this item seemed like a good fit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;where&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; `&lt;span class="nv"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;starting_whitespace&lt;/span&gt;:` &lt;span class="nv"&gt;used&lt;/span&gt;? &lt;span class="nv"&gt;why&lt;/span&gt;? &lt;span class="nv"&gt;better&lt;/span&gt; &lt;span class="nv"&gt;way&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt;?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thinking way back to when I added this, I remember wondering why I needed to do this in
addition to the other code in this function, and what effect it has.  To be honest, I
have written a lot of code for the PyMarkdown project in the last year.  While I try and
be clear with everything I write, I dropped the ball on this one.  Time to figure it out!&lt;/p&gt;
&lt;p&gt;Digging into this issue, I searched for the text &lt;code&gt;elif starting_whitespace:&lt;/code&gt; and replaced
that string with &lt;code&gt;elif False and starting_whitespace:&lt;/code&gt;.  After running the scenario tests,
I picked one of the failures at random, test function &lt;code&gt;test_atx_headings_extra_42&lt;/code&gt; and
looked at the failure.  As soon as I started looking at the test output, memories of this
change came flooding back to me.  Within an Atx Heading Element, there is at least one
space character between the start character (&lt;code&gt;#&lt;/code&gt;) and the text in the heading.  The HTML
output that is generated is fine, but when the Markdown transformer tries to reconstruct
the original Markdown, that leading space is not represented in the tokens.  To address
that issue, in those cases where it is not otherwise present in the list of tokens,
that code kicks in and adds a Text token with the right markers to resolve the issue.&lt;/p&gt;
&lt;p&gt;Experimenting with three or four alternate solutions to the issue, only one of those
solutions worked, and it was a lot more convoluted than the existing solution.  If there
is no text to create a Text token with that the parser can attach some extra whitespace to,
then create a Text token specially to hold that extra whitespace.  Basically, it
was good that I thought I could do better, but I already had the best solution for
the job!&lt;/p&gt;
&lt;h3 id="dealing-with-multiply-defined-link-reference-definitions"&gt;Dealing With Multiply Defined Link Reference Definitions&lt;a class="headerlink" href="#dealing-with-multiply-defined-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having thought about the item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;Link_helper&lt;/span&gt;.&lt;span class="nv"&gt;py&lt;/span&gt;&lt;span class="sc"&gt;#86&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;link&lt;/span&gt; &lt;span class="nv"&gt;already&lt;/span&gt; &lt;span class="nv"&gt;registered&lt;/span&gt;, &lt;span class="nv"&gt;should&lt;/span&gt; &lt;span class="nv"&gt;warn&lt;/span&gt;?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;at length, resolving it was easy.  While I could add something specific to deal with
that one case, it made more sense to just add a rule to deal with that case.  After a quick
check to verify that the &lt;code&gt;LinkReferenceDefinitionMarkdownToken&lt;/code&gt; class has a
&lt;code&gt;did_add_definition&lt;/code&gt; field, I resolved this one as done.&lt;/p&gt;
&lt;h2 id="picking-another-easy-one"&gt;Picking Another Easy One&lt;a class="headerlink" href="#picking-another-easy-one" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another easy item from the list was the item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;look&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;cases&lt;/span&gt; &lt;span class="nv"&gt;where&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;used&lt;/span&gt;, &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;convert&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;whitespace&lt;/span&gt; &lt;span class="nv"&gt;helper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This refactor was so easy, I almost feel that it is a waste talking about it.  Like the
replacement of the &lt;code&gt;\n&lt;/code&gt; character with &lt;code&gt;ParseHelper.newline_character&lt;/code&gt;, this
replacement was to replace the space character with &lt;code&gt;ParserHelper.space_character&lt;/code&gt; to
make it more visible.  While I was doing that, I noticed that there were a few
cases where I was trying to make those spaces visible using code like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;s"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To solve that issue, I cloned a copy of the &lt;code&gt;make_value_visible&lt;/code&gt; function, calling it
&lt;code&gt;make_whitespace_visible&lt;/code&gt;, and moving that code, plus code for the other whitespace
characters &lt;code&gt;\t&lt;/code&gt; and &lt;code&gt;\n&lt;/code&gt; into that function.  After refactoring the other occurrences
of that text to the use the new function, the work on that item was completed.&lt;/p&gt;
&lt;h3 id="wrapping-up-for-the-night"&gt;Wrapping Up For The Night&lt;a class="headerlink" href="#wrapping-up-for-the-night" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I was winding down to spend some time with my family, I wanted a simple task to help
me relax before stopping for the night.  While it was not very productive, I inspected
the code using PyCharm, resolving three very simple issues.  Combined with a full
run of my &lt;code&gt;clean&lt;/code&gt; script that runs Black, the changes were minor but useful.  Nothing
spectacular was changed, but it left the code “just that much better” and allowed me
to sign off for the night with a good feeling.  I had reached my goal for the week,
and I had also managed to clean some little things up as well.  A good combination!&lt;/p&gt;
&lt;h2 id="sunday-morning-refactoring"&gt;Sunday Morning Refactoring&lt;a class="headerlink" href="#sunday-morning-refactoring" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a long and productive Saturday, I decided to give myself a bit of a pass on the
hard work and resolve some easy “off-the-books” items.  Where possible, I have tried to
adhere to good
&lt;a href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;object-oriented programming&lt;/a&gt;
practices, encapsulating data within an object that cleanly encapsulates the purpose
behind the object.  From my experience, the problem with doing this with any kind of
language parser is that
there are often a group of miscenalenous variables that do not cohesively fall under a
single theme.  Often, I find that they are just a loose group of variables that need
to be maintained to get the job done.  Having the same type of problem with the
main processing phase of the PyMarkdown parser, I decided to just go ahead and group
these variables under the &lt;code&gt;ParserState&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;Over three commits, I managed to clarify the usage pattern for the four variables
already in that object.  This was done by adding a &lt;code&gt;__&lt;/code&gt; prefix to each of those
variables to ensure that only private usage of that field was allowed.  For external
usage of those variables, I added a new getter property for each variable with the same
name as the original variable.
In this way, I guaranteed that existing code that did not modify those variables would
remain as it was, while strengthening the usage pattern for those variables.
The additional eight variables were moved into the &lt;code&gt;ParserState&lt;/code&gt; class following a similar
pattern.  Instead of changing the name of the variable to include a &lt;code&gt;__&lt;/code&gt; prefix, the
variable was added to the class with the prefix already added, with the provided getter
function being added with the name of the variable minus the prefix.&lt;/p&gt;
&lt;p&gt;With those changes in place, I started to run the tests, and encountered and handful of
cases where the parser needed to change one of those variables during its processing.
In each of those cases, I looked at the code and tried to determine the best
way to set the information to the desired value while minimizing the exposure of that
variable to the rest of the parser.  In the case of the &lt;code&gt;set_no_para_start_if_empty&lt;/code&gt;
function, that exposure was just the name of the function, as the body of the function
only sets the &lt;code&gt;__no_para_start_if_empty&lt;/code&gt; variable to &lt;code&gt;True&lt;/code&gt;.  For the
&lt;code&gt;mark_start_information&lt;/code&gt; function, called when the container processor is invoked for a
new line, six of the variables in the class are set to their initial values, keeping any
changes in those variables within the class.  In all
cases, these were what I felt were the most minimal exposure that was needed for
other functions and classes dependent on the &lt;code&gt;ParserState&lt;/code&gt; class and its variables.&lt;/p&gt;
&lt;h3 id="more-cleanup"&gt;More Cleanup&lt;a class="headerlink" href="#more-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once those variables were placed within the &lt;code&gt;ParserState&lt;/code&gt; class with their getters and
setters, I started going through downstream functions.  In each case, I looked for the name
of one of the variables that I moved into the class and determined if it could be replaced
by a simple reference to the &lt;code&gt;parser_state&lt;/code&gt; variable that was used for the current instance
of the &lt;code&gt;ParserState&lt;/code&gt; class.  When I could replace it, I simply took the function argument,
say &lt;code&gt;original_stack_depth&lt;/code&gt;, and replaced it with &lt;code&gt;parser_state.original_stack_depth&lt;/code&gt; where
it was used in the function.  At that point, when I completed that task properly, the
argument would show up as unused, and I would remove it from the function’s argument list,
also removing it from the arguments passed to that function wherever it was called from.
At that point, it was simply another case of
&lt;a href="https://en.wikipedia.org/wiki/Lather,_rinse,_repeat"&gt;lather-rinse-repeat&lt;/a&gt;
until all non-class references were replaced with class references.&lt;/p&gt;
&lt;p&gt;And to be honest, here was where having the solid heft of the scenario tests came in very
handy.  Instead of just praying that I had made the right changes, every couple of changes
was followed with the execution of the complete set of scenario tests.  If there was a
failure, I would investigate and find out the reason why it failed, addressing that issue.
If things were fine, I would stage the changes in Git, allowing me to progress forward with
confidence that I could back out any change at any time.  While this process was a long
process, the confidence that it gave me that I was making the right changes was priceless.
With over 99.5% code coverage, if I messed something up in the refactoring, I found out
about it right away.  &lt;/p&gt;
&lt;p&gt;I was making the right changes to clean up the project code, and I was not negatively
impacting the code.  It was good to be able to do both with the security and confidence
of a well-tested project.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking back at the work I did during the week, it was hard not to get jazzed by the
fact that I set a goal to eliminate all non-prioritized items from the issues list.  That
was tampered with the question about what to do with the other sections that I had forgot
about, but it was still a win.  And in its own way, resolving the unprioritized section
of the issues list helped me answer my own question. I would just prioritize them!&lt;/p&gt;
&lt;p&gt;The remaining sections are cleanly divided into two groups: features and bugs.  With the
possible exception of front matter&lt;sup id="fnref:front"&gt;&lt;a class="footnote-ref" href="#fn:front"&gt;1&lt;/a&gt;&lt;/sup&gt;, while the other features would be nice to
have, I didn’t
need any of them for the initial release.  The bugs that remained also divided nicely
into two groups: Tabs and Rules.  As a linter is nothing without some good rules to
show its power, fixing the items in the Rules sections before release was non-negotiable.&lt;/p&gt;
&lt;p&gt;The issues in the Tabs section were a different story.  Making sure that the Tab support
was spot on was going to be a sub-project, not something that I wanted
to rush.  Provided that I can come up with an “almost” interim solution for Tabs, I should
be okay. Not great, but okay.  The only reason I have confidence in saying that is because
most people that I know shy away from tab character in their documents and source code,
mostly due to questions on how they are interpreted.  So, while I do have to address Tabs
properly at some point, it doesn’t need to be until after the release.&lt;/p&gt;
&lt;p&gt;Getting everything fixed and coming up with a good plan for the rest of the sections was
just what I needed.  Another concrete goal that I can see myself achieving.  And yet
another step closer to the release!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After 19 articles detailing how I was attacking each group of issues, I thought it
would be useful to look back over that effort and determine how things went and lessons
learned.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:front"&gt;
&lt;p&gt;Since every article I write has a front matter section to it, I strongly feel that including that one feature into the release should be a priority. &lt;a class="footnote-backref" href="#fnref:front" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 18</title><link href="https://jackdewinter.github.io/2021/01/25/markdown-linter-delving-into-the-issues-18/" rel="alternate"></link><published>2021-01-25T00:00:00-08:00</published><updated>2021-01-25T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-01-25:/2021/01/25/markdown-linter-delving-into-the-issues-18/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/18/markdown-linter-delving-into-the-issues-17/"&gt;last article&lt;/a&gt;, I documented how
I was working hard to get to the end of the unprioritized items in my issues list
and on to the prioritized parts of the list.  This article details the work that
I am doing to make that push happen.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/18/markdown-linter-delving-into-the-issues-17/"&gt;last article&lt;/a&gt;, I documented how
I was working hard to get to the end of the unprioritized items in my issues list
and on to the prioritized parts of the list.  This article details the work that
I am doing to make that push happen.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now a week or so removed from the New Year’s Holiday break, it was refreshing to know
that I was still able to resolve a healthy collection of items from the issues list.
Sure, it was not the same volume as during the holiday, but it was still a healthy
volume of issues to resolve.&lt;/p&gt;
&lt;p&gt;And I definitely felt that I was getting closer to the end of the initial phase of the
PyMarkdown project.  I was pretty sure that I would not be able to resolve every item
from the unprioritized section of the issues list this week, but I was confident that
it was going to happen in the week after.  I just had to maintain a good velicity of
resolving issues, and I would get there soon!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/dcffbeb19cce01f2a4acdf51c572712b0e303af8"&gt;11 Jan 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/8b0e5abc8ba7996ed35387c44914e3696b068885"&gt;17 Jan 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="doing-some-simple-cleanup"&gt;Doing Some Simple Cleanup&lt;a class="headerlink" href="#doing-some-simple-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As always, I try and ease into the project work for the week with something simple.  This
week was no different.  And while this change might seem to be of no consequence to others,
to me it was a question of readability and searchability.  The task?  To replace newline
characters in the source code with &lt;code&gt;ParserHelper.newline_character&lt;/code&gt; and to replace the
colon character (&lt;code&gt;:&lt;/code&gt;) separating the extra data field for the Markdown tokens with
&lt;code&gt;MarkdownToken.extra_data_separator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While it might not be obvious to people that are not dealing with the source code, the
presence of those two characters in an unescaped and unreferenced form had caused me a lot
of frustration.  I guess if I had to pin down a cause why that happened, it was because
a newline character and a single colon character are easy to miss when scanning through
source code.  I wanted something that I could easily find, and not something that I would
easily miss, as had happened numerous times during debugging sessions.  For me, the
cost of this change was easily outweighed by the benefit for readability.&lt;/p&gt;
&lt;p&gt;It was not a change that fixed an issue or enabled a scenario tests, but I was able
to notice the difference almost instantly.  It just helped me see the code better,
and that was its goal!&lt;/p&gt;
&lt;h2 id="upgrading-to-python-38"&gt;Upgrading To Python 3.8&lt;a class="headerlink" href="#upgrading-to-python-38" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having started a year ago, Python 3.7 was the stable release of Python at the time the
project started.  At that time, Python 3.8 had just been released on 14 October 2019
&lt;sup id="fnref:courtesy"&gt;&lt;a class="footnote-ref" href="#fn:courtesy"&gt;1&lt;/a&gt;&lt;/sup&gt;, a couple of weeks before I started working on the code.  With the
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d2c3b2c2cbbc6e9f5524c38571dedcec305915b0"&gt;first commit&lt;/a&gt;
of the source code on 22 Nov 2019, it just seemed like a safer bet to stay with version
3.7 until the bugs were worked out of the then brand new Python release.&lt;/p&gt;
&lt;p&gt;Just over a year later, with Python 3.9 released on 15 Oct 2020&lt;sup id="fnref2:courtesy"&gt;&lt;a class="footnote-ref" href="#fn:courtesy"&gt;1&lt;/a&gt;&lt;/sup&gt;, it felt like a
good time to upgrade one minor version with the same reasoning in mind.  However, there was
also another reason: performance.  Having started to explore the performance of the project
on sample Markdown pages, I found that the project’s parser was taking a long time to
parse a simple Markdown file.  Using
&lt;a href="https://docs.python.org/3/library/profile.html#module-cProfile"&gt;cProfile&lt;/a&gt; and
&lt;a href="https://jiffyclub.github.io/snakeviz/"&gt;SnakeViz&lt;/a&gt;,
I knew that the number one problem that I had with performance was the way I used log
statements.  Without going too far into my research&lt;sup id="fnref:moreLater"&gt;&lt;a class="footnote-ref" href="#fn:moreLater"&gt;2&lt;/a&gt;&lt;/sup&gt;, in order solve the
performance issue while keeping the extra functionality that helped me debug more
efficiently, I would soon need to write my own logging wrapper.  To do this properly, my
&lt;a href="https://docs.python.org/3/library/logging.html#logging.Logger.debug"&gt;research on logging&lt;/a&gt;
indicated that I would need to use the &lt;code&gt;stacklevel&lt;/code&gt; argument to allow the wrapper to
function while logging the location where the wrapper’s log statement was called from.
The catch?  It was introduced in Python 3.8.&lt;/p&gt;
&lt;p&gt;With a good reason to update and a good, stable version of Python 3.8 to update to, I
proceeded with the upgrade with relatively few issues.  The main issue that I hit was that
I needed to ensure that I uninstalled Python 3.7 in the project, install Python 3.8 on my
system (including all environment variables), and then install Python 3.8 in the project.
Once that was done, the only other issue that I had was with the
&lt;a href="https://pypi.org/project/black/"&gt;Black&lt;/a&gt;
Python formatter.  In that case, I needed to examine the graph for that package and make
sure that I installed the correct version of the dependent library in the project.&lt;/p&gt;
&lt;p&gt;After that small headache, which took minutes to solve, everything was working fine and continues to work fine.&lt;/p&gt;
&lt;h2 id="more-fun-with-link-reference-definitions"&gt;More Fun With Link Reference Definitions&lt;a class="headerlink" href="#more-fun-with-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing to mention about the next task is that while the commit was performed
earlier than the 3.8 Upgrade commit, chronologically this task came after the upgrade
task.  The reason that this is relevant is that the project uses the default settings
for Black, and either those defaults or the algorithm implementing the line folding
changed after the upgrade was completed.  Why is this relevant?  While the commit itself
looks like it has a lot of changes, many of those changes occurred in folding the lines
according to upgraded settings.  And as I was focused on the Link Reference Definitions,
I did not notice those formatting changes until after I had made a number of changes.
It was just easier to commit them together at that point than to pull them apart.&lt;/p&gt;
&lt;p&gt;Other than that noise, there were three new scenario tests introduced, testing
Link Reference Definition elements broken up across container block boundaries.  The
first test added, test function &lt;code&gt;test_link_reference_definitions_extra_01&lt;/code&gt;, was created
with a single Unordered List element character, followed by a valid Link Reference
Definition spread over two lines, with the second line not being indented:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second test, function &lt;code&gt;test_link_reference_definitions_extra_02&lt;/code&gt;, used the same
format, but used a Block Quote element prefix instead of an Unordered List prefix.
Finally, to provide a touchstone, I added function
&lt;code&gt;test_link_reference_definitions_extra_02&lt;/code&gt; that has both lines of the Link Reference
Definition preceded by the Block Quote element prefix.  While it was a duplicate
test, I felt it was a good reminder of how a test with both lines worked, and thus
it was a good reference test.&lt;/p&gt;
&lt;p&gt;Now, according to the specification, the List element continues if the next line starts
with enough whitespace
to maintain the indent or if it is a continuation of a Paragraph within the list.  As the
Link Reference Definition is not a Paragraph when parsed the first time, the second line
terminates the list, and causes the Link Reference Definition to be requeued and parsed as
a normal Paragraph on the second parse through.  Or so I thought.&lt;/p&gt;
&lt;h3 id="github-flavored-markdown-vs-commonmark"&gt;Github Flavored Markdown vs CommonMark&lt;a class="headerlink" href="#github-flavored-markdown-vs-commonmark" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While both specification are usually in sync with each other, sometimes the
&lt;a href="https://github.github.com/gfm/"&gt;GFM Specification&lt;/a&gt;
and the reference CommonMark implementation
&lt;a href="https://github.com/commonmark/commonmark.js"&gt;CommonMark.Js&lt;/a&gt;
called from
&lt;a href="https://johnmacfarlane.net/babelmark2/"&gt;Babelmark 2&lt;/a&gt;
differ in small implementation details.  I had experimented with the Block Quote
scenario test for three or so hours before I submitted a question to the
&lt;a href="https://talk.commonmark.org/t/block-quotes-laziness-and-link-reference-definitions/3751"&gt;CommonMark forums&lt;/a&gt;
asking if I had misunderstood something in the specification.&lt;/p&gt;
&lt;p&gt;The answer that came back was a supportive answer, but at the same time, an honest answer.
The approach that CommonMark’s reference parser had taken was to parse the lines as the
start of an Unordered List followed by a Paragraph block.  Only after that Paragraph block
had been parsed, with the paragraph continuation kicking in, does the parser look for a
Link Reference Definition at the start of that Paragraph.&lt;/p&gt;
&lt;p&gt;Is this 100% according to the GFM specification?  No.  But does it make sense for the
CommonMark team to do this?  I would argue yes.  Getting Link Reference Definitions correct
in the PyMarkdown parser has continued to be a pain to this day.  Based on my limited
experience, while
Link Reference Definitions can be spread over multiple lines, there are very few cases
where that is done in “real life”.  From a correctness viewpoint, if I had to guess on the
percentages,
I believe I would estimate that their approach correctly parses 99.5% of the Link Reference
Definition elements, with only some “weird” multiline Link Reference Definition scenarios
not being parsed.&lt;/p&gt;
&lt;p&gt;But that left me with a decision.  What was the correct thing to do for the PyMarkdown
parser?&lt;/p&gt;
&lt;h3 id="which-to-choose"&gt;Which To Choose?&lt;a class="headerlink" href="#which-to-choose" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After thinking about this overnight, I decided that the best approach for the project was
to align with the CommonMark reference implementation, while also discussing the
differences from
the GFM Specification with the CommonMark team in the forums.  By making that choice,
I had confidence that I would have something to compare against for correctness that was
both concrete and
measurable.  It either would parse properly against &lt;code&gt;commonmark.js 0.29.2&lt;/code&gt; and be
considered correct or it would
not and be considered a parsing failure. As for any differences, I could clearly note
them in documentation somewhere, and talk about them on the forums with the owners of
CommonMark and the GFM specification, trying to improve both.  It was not a perfect answer,
things rarely are perfect.&lt;/p&gt;
&lt;p&gt;With that decision in hand, I marked all three new tests as skipped before starting to
work on the Block Quote functions.  Based on what I was seeing in the test failures,
everything looked fine in the HTML output, except that the output was missing an entry
in the Block Quote for the parsed line.  Taking a wild guess, I determined that I needed
to introduce something in the &lt;code&gt;handle_block_quote_block&lt;/code&gt; function to ensure that the number
of lines in the Block Quote element were correct.&lt;/p&gt;
&lt;p&gt;Surprisingly, that was the fix that was needed.  No changes in the Markdown transformer
were needed, and no changes in the consistency check was needed.  Not sure what I had
going on that evening, I decided to mark the List Block version of the scenario test,
the function &lt;code&gt;test_link_reference_definitions_extra_01&lt;/code&gt;, as disabled.  Cleaning up
the code and committing it to the repository.  It was a good place to stop while I
figured out what was going on in the evening.&lt;/p&gt;
&lt;h3 id="getting-back-to-it"&gt;Getting Back To It&lt;a class="headerlink" href="#getting-back-to-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the plans for that evening falling through, I found that I had a couple of hours
free that evening. Not wanting to let them go to waste, I decided to see if I could tackle
the
&lt;code&gt;test_link_reference_definitions_extra_01&lt;/code&gt; function that I elected not to get working
in the previous section.  To ensure I was moving in the correct direction, I added
extra variations of the test that included one and two spaces before the second half
of the Link Reference Definition element, as well as one with each half of the Link
Reference Definition in its own List Item.&lt;/p&gt;
&lt;p&gt;As I have had numerous problems with List Blocks in the past, I expected to expend a
lot of effort to clean these cases up, but only a little bit of effort was required.
Specifically, the only change that was needed with in the &lt;code&gt;ListBlockProcessor&lt;/code&gt; class
and its &lt;code&gt;__check_for_list_closures&lt;/code&gt; function.  Like the previous section and the
Link Reference Definition element that spanned Block Quote element levels, the CommonMark
reference implementation was treating the Link Reference Definition text as a Paragraph
before detecting the Link Reference Definition element itself.  To replicate this
behavior, I needed to modify the &lt;code&gt;__check_for_list_closures&lt;/code&gt; function to keep the
‘paragraph’ open if it was parsing a Link Reference Definition.&lt;/p&gt;
&lt;p&gt;Making those modification, I was able to get the main function,
&lt;code&gt;test_link_reference_definitions_extra_01&lt;/code&gt;, working, as well as the sibling functions
&lt;code&gt;test_link_reference_definitions_extra_01a&lt;/code&gt; and
&lt;code&gt;test_link_reference_definitions_extra_01b&lt;/code&gt;.  This meant that a Link Reference
Definition split over a List Block and the end of that block with various amounts of
indentation was working properly.  However, function
&lt;code&gt;test_link_reference_definitions_extra_01c&lt;/code&gt;, where I split the Link Reference Definition
over two List Items was not working at all.  With my time used up in the evening, I
marked it as skipped, cleaned it up, committed it, and went to sleep for the night.&lt;/p&gt;
&lt;h2 id="and-more-link-reference-definitions"&gt;And More Link Reference Definitions&lt;a class="headerlink" href="#and-more-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I was looking at the content of the existing scenario tests, I noticed that I
did not have a couple of tests that had simple multi-line Raw HTML elements and
multi-line Code Span elements in links.  Basically, I wanted to take
&lt;a href="https://github.github.com/gfm/#example-644"&gt;example 644&lt;/a&gt; for Raw HTML elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="c1"&gt;-- this is a&lt;/span&gt;
&lt;span class="k"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;hyphen&lt;/span&gt; &lt;span class="c1"&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and &lt;a href="https://github.github.com/gfm/#example-345"&gt;example 345&lt;/a&gt; for Code Spans:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;``&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;bar&lt;/span&gt;  
&lt;span class="n"&gt;baz&lt;/span&gt;
&lt;span class="o"&gt;``&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and place them within both Inline Links and Reference Links.  I was hoping that this
was a simple test, but I was not sure.&lt;/p&gt;
&lt;p&gt;Adding all four tests, (two for Inline Links and two for Reference Links), I was pleasantly
surprised that all four tests passed without any changes.  While I am aware that I am
getting closer and closer to the initial release of the project, I still find that I
expect things to fail as a default setting.  As I am usually an optimistic person, my
only explanation for that failure viewpoint is one of writing too many automation tests
in my career.  When I note something down in the issues list, I believe that I feel that
most of those items are going to be things that I forgot to cover, not things that I wish
to ensure are covered.&lt;/p&gt;
&lt;p&gt;Regardless, I need to figure that out and work on it a bit.  I do have a lot of confidence
in the PyMarkdown project and its accuracy, and I need to project that more.&lt;/p&gt;
&lt;h2 id="fixing-disabled-tests"&gt;Fixing Disabled Tests&lt;a class="headerlink" href="#fixing-disabled-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a good night’s sleep and a good day’s worth of work under my belt, I settled down
in the evening to work on the next issue: enabling test functions
&lt;code&gt;test_block_quotes_extra_02ax&lt;/code&gt; to &lt;code&gt;test_block_quotes_extra_02ad&lt;/code&gt;.  The good news was
that the HTML transformer and the Markdown transformer were both working properly.
The bad news was that the consistency checks were failing for all these tests.&lt;/p&gt;
&lt;p&gt;It took me a bit to get going that evening, but when I did, it was obvious to me that the
problem was that the consistency checks were not recognizing the active Block Quote
element.  Following along in the &lt;code&gt;verify_line_and_column_numbers&lt;/code&gt; method, it became
obvious that the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was not evaluating to &lt;code&gt;true&lt;/code&gt; for the four test functions that I was evaluating.  But
how to fix them?&lt;/p&gt;
&lt;p&gt;It took me a while to realize that the reason that the condition was not evaluating to
&lt;code&gt;True&lt;/code&gt; was that the Block Quote token was not always the last token on that list.
When I read the variable named &lt;code&gt;container_block_stack&lt;/code&gt;, in my head I was parsing it as
“the stack for container Block Quotes”, not “the stack for container blocks”.  Once
I figured that out, the answer became obvious.  I created a new function
&lt;code&gt;find_last_block_quote_on_stack&lt;/code&gt; that went back in the stack until it found to last
Block Quote token and returned it.  From there, I replaced any occurrence of
&lt;code&gt;container_block_stack[-1]&lt;/code&gt; with &lt;code&gt;last_block_quote_token&lt;/code&gt;.  Therefore, the code
from above became:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;last_block_quote_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_last_block_quote_on_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;container_block_stack&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_block_quote_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I ran the tests, and after clearing up a couple of typing mistakes, the tests all
worked properly, and they were now passing!&lt;/p&gt;
&lt;!--- pyml disable-next-line no-trailing-punctuation --&gt;
&lt;h2 id="a-quick-fix-i-hope"&gt;A Quick Fix… I Hope!&lt;a class="headerlink" href="#a-quick-fix-i-hope" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the end of the uncategorized section of the issues list, there was one item
that I felt confident that I could quickly deal with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;634&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;forcing&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To start working on this item, I made six copies of test function &lt;code&gt;test_html_blocks_123&lt;/code&gt;.
The first copy was in a List Block element, the next three copies were in various forms
of a Block Quote element, the fifth copy was within a SetExt Heading element, and the
last copy was within an Atx Heading element.  The hard part of each of these tests was
that I needed to make sure I was generating an HTML Block token and not a Raw HTML
token.  That took extra care but did not slow me down that much.&lt;/p&gt;
&lt;p&gt;Like a handful of other issues like this that I have fixed, the answer to this
one leapt out at me as soon as I looked through the log files.  When the next line
was examined to figure out if the Block Quote element should be continued, the
&lt;code&gt;check_for_lazy_handling&lt;/code&gt; was allowing it to continue.  The only issue here was that
it was an HTML block, a leaf block type that does not have any continuation logic in
the specification.  Having noticed that, it was easy to change the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_leaf_block_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_html_block&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_leaf_block_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;thereby fixing the issue.  Running the scenario tests again, the tests were indeed fixed
without needed any other changes.&lt;/p&gt;
&lt;h2 id="that-weeks-big-thing"&gt;That Week’s Big Thing&lt;a class="headerlink" href="#that-weeks-big-thing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Wrapping up the work for that week, I wanted to make another dent in the issues list,
so I decided to at least get the tests set up for the following item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="k"&gt;inner&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;mine&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;__collect_text_from_blocks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The base concept of this item was simple: create a group of tests to verify how inline
elements were represented when placed within a Link element.  To make sure that I was
doing a good scenario test, I made the choice to use a Reference Link element.  By
doing this, I would be testing the link label normalization code and the representation
code at the same time.&lt;/p&gt;
&lt;p&gt;Starting with &lt;code&gt;test_reference_links_extra_03x&lt;/code&gt;, I created a Link element with a link
label that contained a backslash in the link label:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, I then created a copy of that test that encapsulated that link label within
another link label:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and finally, I created a copy of that test, changing the Link element to an Image element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, after a bit of thinking, I decided there was only one combination I was missing,
so I added that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That being done, I then repeated that process with &lt;code&gt;&amp;amp;amp;&lt;/code&gt; and &lt;code&gt;&amp;amp;copy;&lt;/code&gt; for character
entity references, code spans, emphasis, autolinks, raw HTML, and hard line breaks.
By the time I was done, I had added 40 scenario tests to cover all these cases.&lt;/p&gt;
&lt;p&gt;Starting to execute the scenario tests, all the tests that just dealt with Link elements
were passing without any changes.  The Image elements, they were a different story.
The failures seemed to stare back at me, standing in the way of me writing the
article for that week.  It was just time to start debugging and figuring things out.&lt;/p&gt;
&lt;p&gt;After a bit of debugging, I seemed to notice that the test failures seemed to be in three
separate groups of issues.  The first group of issues was that the
&lt;code&gt;__collect_text_from_blocks&lt;/code&gt; function used to grab the existing tokens and render them
as text was not complete.  But that was not the entire issue, but I felt that there
was too much “noise” in the way for me to see the issue clearly.  Resolving to reduce
the noise in the issue, I started working on the main part of the issue.  In the cases
where the inline element was on its own inside the parent
Link element, the Code Span element, the Raw HTML element, and the Autolink element
were not representing their elements properly.  A bit of exploration and debugging took
care of that.  With that noise out of the way, I was able to see the other part of that
issue better, and added the condition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_inside_of_link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;at the start of each of those handlers.  The noise that I had experience was simply that
in cases where a possible Link element was within another Link element’s link label,
each of the changed elements just needed to emit nothing to the collection.  Running
the tests again, it verified that observations, but I also saw something else.&lt;/p&gt;
&lt;p&gt;Only after getting rid of those issues was I able to see that the
&lt;code&gt;__consume_text_for_image_alt_text&lt;/code&gt;
function was not handling Emphasis start and end elements properly, failing an assert
near the end of that function.  That fix was easy, adding four lines to the &lt;code&gt;elif&lt;/code&gt;
statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;inline_blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_emphasis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;inline_blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_emphasis_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With both of those issues dealt with, the couple of failures that remained were easy ones.
Looking at the HTML output, there were a number of &lt;code&gt;/a&lt;/code&gt; character sequences in the HTML
output.  Being the signature for replacement references, I quickly change of the code for
the Text element from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;image_alt_text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;inline_blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;image_alt_text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve_references_from_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;inline_blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="beware-of-special-cases"&gt;Beware Of Special Cases&lt;a class="headerlink" href="#beware-of-special-cases" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Running the tests again, all the tests were passing except for those that dealt with the
&lt;code&gt;&amp;amp;amp;&lt;/code&gt; sequence.  All the tests dealing with the &lt;code&gt;&amp;amp;copy;&lt;/code&gt; sequence were working fine,
so I had to think quickly to figure out what the problem might be.  Because I am used to
looking at processed HTML code, I initially did not see any problem with a &lt;code&gt;&amp;amp;amp;&lt;/code&gt; sequence
in the HTML output.  It looked right.&lt;/p&gt;
&lt;p&gt;Then it hit me.  The problem was not with the HTML output, it was with the processing of
the Markdown input.  In the cases that I had problems with, the desired HTML output had
&lt;code&gt;&amp;amp;amp;amp;&lt;/code&gt; which did not look right until I thought about it.  Whereas the &lt;code&gt;&amp;amp;copy;&lt;/code&gt;
character sequence is interpreted as a named charactery entity and replaced with the
© symbol, the sequence &lt;code&gt;&amp;amp;amp;&lt;/code&gt; was not being interpreted in the same way.  The
desired HTML output was correct!  The initial &lt;code&gt;&amp;amp;&lt;/code&gt; from the sequence was being replaced
with the sequence &lt;code&gt;&amp;amp;amp;&lt;/code&gt; to ensure it was displayed properly, removing any chance of
it being interpreted as a named character entity.&lt;/p&gt;
&lt;p&gt;Making a quick decision, I looked at the &lt;code&gt;InlineHelper&lt;/code&gt; class and noticed the
&lt;code&gt;append_text&lt;/code&gt; function used to ensure that such strings were properly interpreted.
Taking a quick look at the imports for &lt;code&gt;InlineHelper&lt;/code&gt; and &lt;code&gt;LinkHelper&lt;/code&gt;, I thought there
was a chance of a circular reference occurring.  Given that observation, I decided to
make a copy of the &lt;code&gt;append_text&lt;/code&gt; function in the &lt;code&gt;LinkHelper&lt;/code&gt; class to get around the
possibility of the circular reference.&lt;/p&gt;
&lt;p&gt;Finally, after a couple of hours of work, all 40 tests were passing.  It was a bit of
a trek to get there, but it was worth it!&lt;/p&gt;
&lt;h2 id="whoops"&gt;Whoops&lt;a class="headerlink" href="#whoops" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I was starting to write the article, I also started to look into what it would take
to remove the duplicate of the &lt;code&gt;append_text&lt;/code&gt; function in the &lt;code&gt;LinkHelper&lt;/code&gt; class.  I had
introduced the clone into the &lt;code&gt;LinkHelper&lt;/code&gt; class to avoid any issues with referencing
the &lt;code&gt;InlineHelper&lt;/code&gt; class from the &lt;code&gt;LinkHelper&lt;/code&gt; class.  It was as I was starting my
research into this task that I discovered something that I had previously missed.  The
&lt;code&gt;LinkHelper&lt;/code&gt; class was already referencing the &lt;code&gt;InlineHelper&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;After a bit of “how did I miss that?”, I replaced the call to &lt;code&gt;LinkHelper.append_text&lt;/code&gt; with
&lt;code&gt;InlineHelper.append_text&lt;/code&gt; and everything worked fine.  Removing the instance of the
&lt;code&gt;append_text&lt;/code&gt; function from the &lt;code&gt;LinkHelper&lt;/code&gt; class, I ran the complete suite of scenario
tests again, and everything worked fine.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking back at the work I did during the week, it was hard not to get jazzed
about the progress.  I started off by doing a simple fix that made the source code
more readable, enhancing my ability to read the source code.  Then I upgraded the
base Python version to 3.8, knowing that it would allow me to write the wrapper I wanted
around Python’s logging functions.  Add to that the coverage and testing I was able to
add and verify for Link elements, Image elements, and Link Reference Definitions, and
it was really good work!  &lt;/p&gt;
&lt;p&gt;At some point I noticed the number of scenario tests that I execute with each change.
At approximately 2000 tests, I am confident that I am hitting a very large degree of
all scenarios for Markdown transformation, not just the “Golden” scenarios, and that
was also a boost to my confidence.  While I can expect things that I note as an issue
to not work, I also need to make sure I appreciate what is working.  Having a solid
set of tests like that is what allows me to refactor with confidence that I am not
negatively impact the code.&lt;/p&gt;
&lt;p&gt;Refactor?  Sigh.  One of the things I know I am looking forward to is looking at
the refactor tasks in the prioritized sections and getting a couple of them underway.
The fact that they are present in those sections is a good reminder to me that I
can always learn how to do things better, and how to make the project more maintainable.
And that is always something I can look forward to!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a solid amount of work done this week, I am hoping to be able to clear out the
uncategorized section of the issues list in the next week.  Will I make it?  Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:courtesy"&gt;
&lt;p&gt;Information courtesy of the &lt;a href="https://www.python.org/downloads/"&gt;Python download page&lt;/a&gt;. &lt;a class="footnote-backref" href="#fnref:courtesy" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:courtesy" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:moreLater"&gt;
&lt;p&gt;I will be covering this in a separate series of articles in the near future. &lt;a class="footnote-backref" href="#fnref:moreLater" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 17</title><link href="https://jackdewinter.github.io/2021/01/18/markdown-linter-delving-into-the-issues-17/" rel="alternate"></link><published>2021-01-18T00:00:00-08:00</published><updated>2021-01-18T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-01-18:/2021/01/18/markdown-linter-delving-into-the-issues-17/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/11/markdown-linter-delving-into-the-issues-16/"&gt;last article&lt;/a&gt;,
I continued working on some big-ticket items from the issues list, making the most
of my New Year Holiday break.  Back in “normal time”, I am tackling Block Quote items,
to try to get to the prioritized part of my issues list within the next …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/11/markdown-linter-delving-into-the-issues-16/"&gt;last article&lt;/a&gt;,
I continued working on some big-ticket items from the issues list, making the most
of my New Year Holiday break.  Back in “normal time”, I am tackling Block Quote items,
to try to get to the prioritized part of my issues list within the next week or two.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I knew that I was not going to solve the same volume of items as last week, I was
confident that I could use this week to make some good
progress in dealing with Block Quote elements and their interaction with other elements.
I also knew that my mental space was going to be limited this week due to the end of
the holidays.  I was not the only one that took the time off from my day job, as most of
the company that I work for took the same two weeks off.  And with everyone coming back to
work at the same time, there were bound to be lots of meetings to make sure everyone was
resynced for the New Year. And that week there… were… lots… of… meetings.&lt;/p&gt;
&lt;p&gt;Factoring that into account, I started my work for that week with a reset of my personal
expectations on what I believe I can accomplish in a week. I felt that it was important to
my sanity to take the time to seriously understand that I did not need to continue taking
care of multiple big-ticket items. Just a handful of normal items would suffice.  I knew
that if I could manage to make the
switch to that mindset, it would be a good week.  So, with that in mind, the work started.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/a6390d02a8dc98e2092e0494f31f5f0a1fd3b5ba"&gt;07 Jan 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/8b0e5abc8ba7996ed35387c44914e3696b068885"&gt;11 Jan 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="starting-with-something-simple"&gt;Starting with Something Simple&lt;a class="headerlink" href="#starting-with-something-simple" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a matter of pride, I try and keep the PyMarkdown code base clean and following
&lt;a href="https://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt; and
&lt;a href="https://pylint.org/"&gt;pylint&lt;/a&gt;
guidelines.  While I mostly correct any raised issues right away, I often choose to
temporarily disable these issues until another time where I can resolve them. My logic
in making that decision is that it usually better for me to concentrate on the big picture
in the moment, addressing any raised issues when I have some less hectic bursts time.
As such, at various points in the code base, there are comments such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pylint: disable=too-many-public-methods&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to disable a warning and:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pylint: enable=too-many-public-methods&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to enable the warning again.&lt;/p&gt;
&lt;p&gt;But as I am only human, I sometimes forget to balance these statements out, disabling a
warning that
is only disabled, not enabling a warning that was disabled, or enabling a warning that was
not disabled.  Writing up a simple Python script, I quickly figured out where these issues
were and corrected them.  While it was not a very important thing to do, it was just nice
to ensure that I had these nailed down.  A good start to the week.&lt;/p&gt;
&lt;h2 id="rounding-out-multiline-inline-elements"&gt;Rounding Out Multiline Inline Elements&lt;a class="headerlink" href="#rounding-out-multiline-inline-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing that I was sure that I had not covered properly were newline characters
contained with
Code Span elements and Raw HTML elements.  While I had corrected a handful of issues from
this area in the past, I did not feel that I had properly covered all the necessary cases,
and I wanted to address that discrepancy.&lt;/p&gt;
&lt;p&gt;Like I normally do, I started with scenario test creation.  This began by taking
a good look at the available scenario tests in the &lt;code&gt;test_markdown_raw_html.py&lt;/code&gt; module and
the
&lt;code&gt;test_markdown_code_spans.py&lt;/code&gt; module.  For the first module, I added variations of test
function &lt;code&gt;test_raw_html_634&lt;/code&gt;, focusing on any container block elements
or leaf block elements that I had not covered elsewhere.  I then repeated this process
for the other module by adding variations on the &lt;code&gt;test_code_spans_346&lt;/code&gt; test function.
This resulted in eleven new scenario tests being added, four for the Raw Html element and
seven for the Code Span element.&lt;/p&gt;
&lt;p&gt;From a top-level point of view, the scenario tests for Raw HTML elements worked fine, and
did not reveal
any additional issues.  The Code Span element tests were another matter.  While I had
previously dealt with newline characters in the main body of the Code Span element, I had
forgotten to perform the same actions on the leading and trailing whitespace for the
element.  Feeling embarrassed that I forgot the whitespace parts of the token, I quickly
made changes to the &lt;code&gt;handle_inline_backtick&lt;/code&gt; function and the &lt;code&gt;__collect_text_from_blocks&lt;/code&gt;
function to ensure that the correct tokens were being generated.&lt;/p&gt;
&lt;p&gt;To balance these changes out, I also changed the &lt;code&gt;__verify_next_inline_code_span&lt;/code&gt; function
in the consistency checks to pay attention to the leading and trailing whitespace.  Like
the changes detailed in the last paragraph, these changes were not difficult once I knew
what the problem was.  But looking at the code while I was making these changes, I realized
that I should not feel embarrassed.  While I was being thorough with my testing, the issues
that I was finding were more corner cases than anything else.  Put bluntly, unless I was
testing corner cases, I was sure that I would not create a Raw Html element like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;""&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or a Code Span element like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;some&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;
&lt;span class="n"&gt;really&lt;/span&gt; &lt;span class="n"&gt;nasty&lt;/span&gt;
&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unless some specific formatting called for it in a really weird circumstance, I believe I
would always write them on one line, not multiple lines.&lt;/p&gt;
&lt;p&gt;But it was good to get the corner cases.  In my head, I know that if I am focusing on the
corner cases, I feel confident about the normal cases.  That is a good place for me to be!&lt;/p&gt;
&lt;h2 id="adding-glob-support"&gt;Adding Glob Support&lt;a class="headerlink" href="#adding-glob-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While not a part of the issues list, one of the things that I had been experimenting on
in some “down time” was adding
&lt;a href="https://docs.python.org/3/library/glob.html"&gt;Glob support&lt;/a&gt;
to the project.  This work came about as the quick script that I threw together for
validating
&lt;a href="https://jackdewinter.github.io/2021/01/18/markdown-linter-delving-into-the-issues-17/#starting-with-something-simple"&gt;PyLint disables and enables&lt;/a&gt;
needed to be able to specify a targetted set of files with Python &lt;code&gt;glob&lt;/code&gt; support. Using
the same type of mainline base as the PyMarkdown project,
I figured the PyLint scanner script was a low-cost, low-risk place to see how much
effort it would take to implement it in the PyMarkdown project.&lt;/p&gt;
&lt;p&gt;It turned out to be very easy.  The &lt;code&gt;__determine_files_to_scan&lt;/code&gt; function was the main
point of contact for determining the files to process.  It took exact file paths,
to either a directory or a file, and returned set containing all valid paths.  In the
case of a file path, it simply added the full path to that file to the collection to be
returned.  In the case of a directory, the directory was scanned, and all matching files
were added to that same collection.  Nice, self-contained, and simple.&lt;/p&gt;
&lt;p&gt;Being self-contained, it was easy to modify this function to add glob support.  To handle
those simple cases, I moved that functionality out of the main function and into a new
helper function &lt;code&gt;__process_next_path&lt;/code&gt;.  With that extracted, I rewrote the
&lt;code&gt;__determine_files_to_scan&lt;/code&gt; function as follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_path&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;"?"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;globbed_paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;globbed_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"Provided glob path '"&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;next_path&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"' did not match any files."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;did_error_scanning_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_globbed_path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;globbed_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;next_globbed_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_globbed_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__process_next_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_globbed_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__process_next_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files_to_parse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;did_error_scanning_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the call &lt;code&gt;glob.glob&lt;/code&gt; already returns an array of matching elements, I was already
most of the way to having this implemented. All I needed to do was to properly add the
elements returned from the &lt;code&gt;glob&lt;/code&gt; call to the collection.  So, instead of rewriting the
code to add matching elements to the &lt;code&gt;files_to_parse&lt;/code&gt; variable, I just called the already
debugged &lt;code&gt;__process_next_path&lt;/code&gt; function to do all the heavy lifting.&lt;/p&gt;
&lt;p&gt;Once that was done, manual testing of the new functionality went fine.  Some new scenario
tests needed to be added, and a couple of existing scenario tests needed to be changed
slightly, but nothing unexpected.  After an hour or so, the work was done and tested.
While not terribly exciting, I could now do some manual testing of the PyMarkdown project
against a set of files that was not a single file, nor every eligible file in that
directory.  And it just felt good to get a small task like that out of the way!&lt;/p&gt;
&lt;h2 id="filling-out-existing-tests"&gt;Filling Out Existing Tests&lt;a class="headerlink" href="#filling-out-existing-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Narrowing down the items to work on from the issues list, the one that I settled on was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_block_quotes_extra_02a&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="n"&gt;levels&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To start the work on this item, I added three variations of the
&lt;code&gt;test_block_quotes_extra_02&lt;/code&gt; test function, altering the number of lists in the document
and their locations.  Noticing that I could do the same type
of variations for Block Quote elements, I also added ten new scenario test functions
that were variation on the &lt;code&gt;test_block_quotes_extra_04&lt;/code&gt; function, mixing Block Quote
elements with the various types of non-inline elements.&lt;/p&gt;
&lt;p&gt;Executing the bulk of the new tests, I was pleasantly surprised that everything except for
the consistency checks were passing without any changes being needed.  Even the changes
needed for the consistency checks were relatively minor and in two main groups.&lt;/p&gt;
&lt;p&gt;The first group of changes were in the inline handling part of the
&lt;code&gt;verify_line_and_column_numbers&lt;/code&gt; function.  These changes were not material in nature
but served to ensure that the &lt;code&gt;leading_text_index&lt;/code&gt; field from the Block Quote token
was properly updated.  This required the inspection of each inline token to determine if
any newline characters are encountered.  If any are encountered, the &lt;code&gt;leading_text_index&lt;/code&gt;
field is incremented by the number of newline characters, ensuring that any references
to that field reference the correct line prefix.&lt;/p&gt;
&lt;p&gt;Seemingly balancing that change, there were a handful of end Leaf tokens that also needed
adjusting to properly support the
&lt;code&gt;leading_text_index&lt;/code&gt; field.  Through trial and error, I quickly
isolated each type of token, and was able to properly increment the
&lt;code&gt;leading_text_index&lt;/code&gt; field to handle the end token.  It was not a big task, but it was one
that I needed to be very methodical on.  I did find that I needed to do adjust each at
least once as each test was providing coverage for a specific scenario that had been
missed.  While it was not that much extra work for each individual test, the amount of work
required over all the tests added up quickly.&lt;/p&gt;
&lt;h2 id="properly-handling-link-reference-definitions"&gt;Properly Handling Link Reference Definitions&lt;a class="headerlink" href="#properly-handling-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the case of test function &lt;code&gt;test_block_quotes_extra_04f&lt;/code&gt;, the issue was that it
was just broken.  No niceties or anything else, just broken.  Added during the
last section’s work and disabled, the Markdown was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; [
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;abc&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ]&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;uri&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What made this test function broken was not the Markdown itself, but the generated tokens
for it.  For whatever reason, the parsing of the Block Quote was both started and ended
on the first line, only to be restarted on the second line.  Because of the container
nature of the Block Quote element, this then spread the text required for the Inline Link
element split over two distinct Block Quotes.  It was just wrong!&lt;/p&gt;
&lt;h3 id="setting-the-stage"&gt;Setting the Stage&lt;a class="headerlink" href="#setting-the-stage" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The debugging took a couple of hours to work through, but it was rewarding when I solved
it.  The problem with the parsing boiled down to my favorite element (heavy sarcasm
is implied), the Link Reference Definition element.  Because of the unique nature of this
element and how it is parsed, I had to add the ability to rewind or requeue the parser so
that failed lines from a Link Reference Definition could be properly processed.  And while
it had worked properly until this point, test function &lt;code&gt;test_block_quotes_extra_04f&lt;/code&gt;
provided an interesting twist to normal operation, and therefore, an interesting problem.  &lt;/p&gt;
&lt;p&gt;Because of design decisions for Markdown, the Link element and the Link Reference
Definition element both start with the same sequence: &lt;code&gt;[link]&lt;/code&gt;.  If this sequence is
followed by an
open square bracket character &lt;code&gt;[&lt;/code&gt;, then it probably specifies a collapsed or full link.
If this sequence is followed by an open parenthesis character &lt;code&gt;(&lt;/code&gt;, then it probably
specifies an inline link.  If this sequence is followed by a colon character &lt;code&gt;:&lt;/code&gt;, then it
probably specifies a Link Reference Definition.  And finally, if not followed by any of
the above, it is probably a shortcut link.&lt;/p&gt;
&lt;p&gt;Most of those combinations do not matter, except for my friend (once again, heavy sarcasm
implied), the Link Reference Definition.  While the Link element and its types are all
processed in the inline phase of processing, the Link Reference Definition is processed
much earlier in the block phase of processing.  Due to that difference, the Link element
processing is done with the entire contents of the processed Text token being available,
but the Link Reference Definition processing is done one line at a time.&lt;/p&gt;
&lt;h3 id="working-through-the-process"&gt;Working Through the Process&lt;a class="headerlink" href="#working-through-the-process" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Why was that information relevant?  In the case of the above Markdown, the specified text
supports both
a Link element and a Link Reference Definition element until line 3.  Before that point,
the Link Reference Definition processing continues forward.  When that point is reached on
line 3, the line is processed for
suitability as a Link Reference Definition, it fails, and the requeue mechanism needs to
be enacted so that the lines can be interpreted properly.  Unlike any previous scenario
tests, in this case, that requeue mechanism was not sufficient.&lt;/p&gt;
&lt;p&gt;What was being requeued was only the information after processing.  When the requeue
mechanism kicked in, it was trying to return to the state that was in place when
the Link Reference Definition started.  But when it started processing the requeued
information, it did so with the processed line of information.  That line was missing the
Block Quote prefix, causing the Block Quote to be closed.  It took a while to get there,
but I did figure out why that was happening with the closing of the Block Quote!&lt;/p&gt;
&lt;h3 id="fixing-the-issue"&gt;Fixing the Issue&lt;a class="headerlink" href="#fixing-the-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this case, the line that had been passed to the Link Reference Definition processor
did not have the Block Quote prefix attached to it.  Having been removed at the container
level before being passed on for Leaf Block processing, the lines to requeue were
missing information.  To fix that issue, I had to figure out a way to ensure that I could
retain that information so that it could be requeued if needed.  Therefore, I introduced a
the &lt;code&gt;unmodified_line_to_parse&lt;/code&gt; variable that contains the line as read, unmodified by
any processing.&lt;/p&gt;
&lt;p&gt;This got me a lot of mileage in fixing this issue, but after rerunning some of the tests,
a couple of the tests were failing because there was another issue somewhere.  Debugging
that issue over the course of
an hour, I found that there was another requeue issue that I needed to address: the
main document and the main token stack.  In a couple of the new scenarios, when the
processing of the Link Reference Definition was started, another type of block element was
ended.  The effect of this was that a new Markdown token was placed in the document and a
new stack token was placed on the main token stack.  While the rewinding took care of the
data, it did not take care of that state information.&lt;/p&gt;
&lt;p&gt;Dealing with that issue was somewhat simple but took a while to get right.  Before
starting the processing of the Link Reference Definition, I keep track of the lengths
of both the main document and the token stack.  If I need to requeue elements, I simply
remove any entries that are past that mark.  It is not very graceful, but it was
successful and worked wonderfully.&lt;/p&gt;
&lt;h2 id="squeezing-one-more-task-in"&gt;Squeezing One More Task In&lt;a class="headerlink" href="#squeezing-one-more-task-in" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If things are going normally, I organize and write my articles on Sunday, with the
editing the draft article going into Monday evening.  During that time, I do take a
fair number of breaks to ensure that I am writing and editting with a clear mind.
But just because I start
working on the article, it does not mean that I stop thinking about whatever it is I was
working on.  Usually, it is a battle between getting the writing done and my urge to
complete what I started.  Most of the time, the article wins. In this case, it did not.&lt;/p&gt;
&lt;p&gt;On Saturday morning, I had started working on figuring out
how to get test function &lt;code&gt;test_block_quotes_extra_03b&lt;/code&gt; working.  And while I had made some
progress on it, I was still working on it.  For whatever reason, when placed within a
Block Quote element, Link Reference Definitions were not being recognized properly. I had
started working on this right after fixing test function &lt;code&gt;test_block_quotes_extra_04f&lt;/code&gt;
and  I had spent a decent amount of time trying to get it working. But with a busy weekend
in my personal life, I was not able to get a good, solid, contiguous couple of hours to
work on this
issue as I had hoped to do.  As such, I had started to try to figure out this issue about
five times and gave up after each short try.  It gnawed at me that I could not figure it
out.  It had not taken me long to resolve the previous set of issues, why was it
taking me so long with this one?&lt;/p&gt;
&lt;h3 id="regrouping"&gt;Regrouping&lt;a class="headerlink" href="#regrouping" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After completing the bulk of the rough draft of the article, I took some time to relax
and clear my head, knowing that I needed to look at the problem again.&lt;/p&gt;
&lt;p&gt;This time, I had a lot better results with my debugging.  Starting with the basics,
I turned on debug logging for the test and followed along in the source code as I read each
line of the debug output.  It was then that I noticed the issue: the Block Quote token
itself was wrong.  As I looked through the logs, everything was fine up until the requeue
from the Link Reference Definition happened.  From there, everything was just off.&lt;/p&gt;
&lt;p&gt;Taking some time to think about it, I decided to take our dog Bruce for a walk.  During
that walk, I tried hard not to think about the issue, and mostly succeeded.  When I came
back, I was able to examine the log files again, knowing that the Block Quote token was
off, and that I had to find the cause.  Within five minutes, I had the answer.  It was
once again a state issue.  Before the requeue happened, as each line was being processed
within a Block Quote, new information was added to the Block Quote token.  This information
was about the leading text that was removed from each line in the container processor,
ensuring that the leaf processor only had to deal with leaf block related issues.  To
ensure that the Markdown could be properly rehydrated, this information was stored in the
Block Quote token itself.  But when the requeue happened, nothing was done to erase the
information added to the token between the start of the Link Reference Definition parsing
and the start of the requeue.  Or at least that is what I thought had happened.&lt;/p&gt;
&lt;p&gt;Doing some quick testing, I quickly proved my theory to be correct.  As I followed
along in the logs for the test function, I saw the amount of leading text in the Block
Quote token increase, but never decrease.  To further prove that I was on the right track,
I compared the number of lines that were requeued to the number of extra lines of leading
text present in the token, and it was a match!&lt;/p&gt;
&lt;h3 id="fixing-the-issue_1"&gt;Fixing The Issue&lt;a class="headerlink" href="#fixing-the-issue_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a solid lead on what the cause was, the most concrete manner of proving that I had
the right cause to fix it.  After mulling around various ideas in my head, the one that
won out was to simply store a copy of the Block Quote token in the Link Reference
Definition token at the start of processing.  With the other requeue logic in place,
once I had done all the other requeuing, I simply replaced the changed Block Quote token
with the copy of the original token.  Running through the tests, this worked right away!&lt;/p&gt;
&lt;p&gt;After having taken such a long way to get there, I now had it fixed.  But since I had
ended up solving the issue somewhat late on Sunday evening, I decided to put the changed
code
aside and to continue edit that week’s article.  It was enough to knowing that I had
solved it and that it just needed cleaning up before committing.  It was then after I
had completed my final edit of the article on Monday night that I noticed that I had
finished early on Monday night with a lot of time to spare.  With that extra time in hand,
I was able to take the roughly finished solution and polish it up enough to commit it.
While technically it should be a part of next week’s article, it just felt right to
include it with this article, as that is where most of the work occurred.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a busy week of getting rid of some big-ticket issues, it was very nice to
reduce my scope and focus on the smaller items.  Not that I mind working on the big
items, it is just that they require me to maintain a larger scope of focus, thereby
tiring me out a bit more.  The smaller items are not always as satisfying to resolve,
but they are also not as draining.&lt;/p&gt;
&lt;p&gt;During the article, I mentioned that I was becoming more aware that I was dealing more
with corner cases than anything else, and that was a good feeling.  I am very confident
that any of the main scenarios driving the parser have already been addressed. With those
out of the way, it stands to reason that any issues that I am finding are the weird cases
that do not occur that often.  It just makes sense to me.&lt;/p&gt;
&lt;p&gt;It also means that I am getting more confident that I am nearing the end of this testing
phase of the PyMarkdown project.  My main drive for the project was to complete the project
on my own terms, with the level of quality and testing that I expect from other projects.
While I could have started releasing this project a while ago, I wanted to make sure that
I have reached that level before I ship the project, and work on improving it from there.
And with the knowledge that I am cleaning up corner cases, I know that I now closer to
that point with the PyMarkdown project than I have ever been before!&lt;/p&gt;
&lt;p&gt;And it is a good feeling!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I do not want to sound like a broken record, but it is back to the same process of
finding the next item to work on, and getting it resolved.  The only difference was
that I was getting close to eliminating all the “open range” items in favor of the
prioritized issues.  Progress!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 16</title><link href="https://jackdewinter.github.io/2021/01/11/markdown-linter-delving-into-the-issues-16/" rel="alternate"></link><published>2021-01-11T00:00:00-08:00</published><updated>2021-01-11T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-01-11:/2021/01/11/markdown-linter-delving-into-the-issues-16/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/04/markdown-linter-delving-into-the-issues-15/"&gt;last article&lt;/a&gt;,
I continued working on Block Quote issues and some general clean up that I have wanted to
do for a couple of months now.  With one week left in my holiday, I wanted to make sure
I tackled as many of the big-ticket items that …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/04/markdown-linter-delving-into-the-issues-15/"&gt;last article&lt;/a&gt;,
I continued working on Block Quote issues and some general clean up that I have wanted to
do for a couple of months now.  With one week left in my holiday, I wanted to make sure
I tackled as many of the big-ticket items that I can while I have the time.  If I am
going to be doing some work during my holiday, I want to make it count!&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a couple of weeks off for the holidays and relatively light “honey-do”&lt;sup id="fnref:honey"&gt;&lt;a class="footnote-ref" href="#fn:honey"&gt;1&lt;/a&gt;&lt;/sup&gt;
schedule,
I had some free time to devote to getting the project closer to the goal line.  While
I did not want to lose focus on getting the smaller items completed, I had a number
of big-ticket items that I wanted to do.  Because of their size or scope, I wanted to
ensure that I had a dedicated amount of contiguous time to work on each item.  Except
for the occasional weekend, I figured that this would be the best time to work on them
and hopefully get all of them completed in one big push. With a good week left of
New Year’s holiday left to go, it seemed like a good idea to try and get as much done
as i could in the short amount of time I had.  At least, that was my plan.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9582d7f984dad91539877a073ef251f272f592e5"&gt;28 Dec 2020&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/a0281da5414ec2c45fb32c3d687027ba21f1ccb6"&gt;03 Jan 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="enhancing-code-quality"&gt;Enhancing Code Quality&lt;a class="headerlink" href="#enhancing-code-quality" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Continuing with the large item cleanup that I had started in the previous week; I was
eager to get some refactoring done on the Markdown token classes.  The first step towards
refactoring those classes was to make each token as read-only as possible, to avoid the
possibility of changing the tokens.  To accomplish this task, I just went through each
token in
order, adding the &lt;code&gt;__&lt;/code&gt; prefix to most of the field names, thereby making them private.
With each of those fields now private, I added a new getter property for each field
named after the original field name.  As the property name for the new getter function
matched the old name of the field, any read-only access was able to continue without any
issues.&lt;/p&gt;
&lt;p&gt;As with any such change, there are always exceptions that need to be dealt with
individually.  One such case was the &lt;code&gt;active&lt;/code&gt; field of the &lt;code&gt;SpecialTextMarkdownToken&lt;/code&gt;
class. The first exception was that instead of retaining the name &lt;code&gt;active&lt;/code&gt;, I felt that
the name &lt;code&gt;is_active&lt;/code&gt; was more descriptive.  The second exception was that this token
type is used to look for starts and ends of various inline token sequences.  As such,
when those sequences are found, the previous instances of those tokens are marked as
inactive, meaning they will not be used any more.  To take care of this, I introduced
to that token a new function &lt;code&gt;deactivate&lt;/code&gt;, specifically used to deactivate the token
without exposing the token’s member variable in its private form.&lt;/p&gt;
&lt;p&gt;Once this refactoring was completed, I realized that the &lt;code&gt;markdown_token.py&lt;/code&gt; module
was way too large for my liking and needed to be broken down.  Keeping the base
&lt;code&gt;MarkdownToken&lt;/code&gt; and &lt;code&gt;EndMarkdownToken&lt;/code&gt; classes in their original file, I started to
move every Markdown token to one of three new modules: one for container block tokens,
one for leaf block tokens, and one for inline tokens.  Once the tokens were in their
new modules and all tests passed, I added a new base token class for each of the three
new modules and switched the base class for each token to the new base token in the
same module.  By switching over each token to use these three new base classes, I was
able to further reduce the amount of code in each token.  While it was not too much of
a reduction, it was a reduction I felt good about.&lt;/p&gt;
&lt;h2 id="enhancing-some-more"&gt;Enhancing Some More&lt;a class="headerlink" href="#enhancing-some-more" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started working on this group of tasks, the first thing that came to mind was
the words to an old campfire song I learned long ago in Boy Scouts of Canada.  While
it is a silly song named
&lt;a href="https://makingmusicfun.net/htm/f_mmf_music_library_songbook/nelly_in_the_barn_lyrics.php"&gt;Nelly In The Barn&lt;/a&gt;,
the bit between the verses goes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Second verse, same as the first, a little bit louder and a little bit worse!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I could think of no phrase better to describe what I needed to do with the &lt;code&gt;StackToken&lt;/code&gt;
class.  Having had good success with changing all the &lt;code&gt;MarkdownToken&lt;/code&gt; classes to use
private fields and &lt;code&gt;is_x&lt;/code&gt; methods (as detailed in my last article), I felt that the
&lt;code&gt;StackToken&lt;/code&gt; class needed the same treatment.&lt;/p&gt;
&lt;p&gt;Unlike the almost 20 classes for &lt;code&gt;MarkdownToken&lt;/code&gt; descended classes, the transformation
on the 9 classes descended from &lt;code&gt;StackToken&lt;/code&gt; went by quickly.  Like the changes made to the
&lt;code&gt;MarkdownToken&lt;/code&gt;
classes, I was emboldened to make these changes due to the confidence of having a large
group of scenario tests that I can use to look for any issues.  Without that large
group of tests, I would be worried that I would fix one thing, only to break something
else in a related piece of code that I forgot about.&lt;/p&gt;
&lt;h2 id="closing-the-test-loop"&gt;Closing the Test Loop&lt;a class="headerlink" href="#closing-the-test-loop" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I noted in the section of the last article entitled
&lt;a href="{filename}/articles/SoftwareQuality/#making-the-test-invocation-more-efficient#making-the-test-invocation-more-efficient"&gt;Making the Test Invocation More Efficient&lt;/a&gt;,
I implemented a change to how I invoked the test infrastructure to reduce the needed code
from eight lines (1 blank line, 2 comment lines, and 5 code lines) to two lines (1 comment
line and 1 code line).  Having done some further examination of those changes, I felt that
those changes had settled in nicely and it was time to propagate those changes to all
similar test functions.&lt;/p&gt;
&lt;p&gt;I had a good model for the changes, but even so, the work was very monotonous.  With just
short of 2000 scenario tests that required changing, it was a test of wills: me versus
the code base.  To keep myself motivated, I kept a search window open on the side of my
editor, selecting a new group of tests to modify whenever I found myself getting bored.
Even after taking extra breaks to do household chores, I still found that it was a tough
task.  But I knew it was a good task to do, so even though I could feel the lobes of my
brain numbing with each keystroke, I pressed forward with making the changes.&lt;/p&gt;
&lt;h2 id="keeping-things-simple"&gt;Keeping Things Simple&lt;a class="headerlink" href="#keeping-things-simple" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having ensured that all end Markdown tokens had their &lt;code&gt;start_markdown_token&lt;/code&gt; field set, I
looked at the code to figure out if there were any redundancies that were introduced with
that change.  As
that field points to the start Markdown token, there was a good chance that I had stored
duplicate data in the &lt;code&gt;EndMarkdownToken&lt;/code&gt; to avoid having to calculate the start Markdown
token for some of the tokens.  It was just a matter of identifying any such tokens.&lt;/p&gt;
&lt;p&gt;While I was sincerely expecting more of an impact, the only change that I was able to
perform was around the end Markdown token generated for the &lt;code&gt;EmphasisMarkdownToken&lt;/code&gt;
token.  To get around the constraints at the time that it was written, I had added
duplicated data to that end token
to denote the length of the emphasis and the emphasis character.  With that actual start
token now available for reference, I was able to replace the duplicate data stored in the
&lt;code&gt;EndMarkdownToken&lt;/code&gt; with a reference to the &lt;code&gt;EmphasisMarkdownToken&lt;/code&gt; instance.&lt;/p&gt;
&lt;p&gt;No longer needing that duplicate data, I removed it from the &lt;code&gt;__process_emphasis_pair&lt;/code&gt;
function. The fallout of that change was approximately 200 instances where I needed to
replace the now useless data with the string &lt;code&gt;:&lt;/code&gt;.  To make things easier while editing,
I simply kept the text &lt;code&gt;:::&lt;/code&gt; in the clipboard, searched for &lt;code&gt;[end-emphasis(&lt;/code&gt;, and replaced
the first three characters after the &lt;code&gt;)&lt;/code&gt; character.  It was mind numbing work that I did
in three or four shifts, but I got it done.  Running the tests, everything was working
except for a couple of tests.  Investigating each of those failed tests, the failures
were all simple typing errors, quickly fixed to make the tests pass.&lt;/p&gt;
&lt;h2 id="reorganizing-the-series-m-file"&gt;Reorganizing the Series M File&lt;a class="headerlink" href="#reorganizing-the-series-m-file" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This task was a pure cut-and-paste task, but one that I really needed to do. At over
10 thousand lines of code, the &lt;code&gt;test_markdown_paragraph_series_m.py&lt;/code&gt; module was just
way too big!  I was initially okay with the size of the module, seeing that all the
scenario tests in the file were related to each other.  But as I started to add more
and more tests to that one large file, it was becoming too difficult to work on
in that form.  As such, I simply create one file for each group of tests, such
as &lt;code&gt;test_markdown_paragraph_series_m_fb.py&lt;/code&gt; for the Fenced Code Block tests, and moved
the test functions into their new home.&lt;/p&gt;
&lt;h2 id="collapsing-ordered-and-unordered-list-processing"&gt;Collapsing Ordered and Unordered List Processing&lt;a class="headerlink" href="#collapsing-ordered-and-unordered-list-processing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At the start of the project, while I was working through the initial parts of the parser,
I was not sure that the processing of Ordered List Blocks and Unordered List Blocks would
overlap.  With almost a year of processing accomplished, I now had a very solid observation
on that subject.  Most of the processing overlapped, and overlapped cleanly.  Now it was
just a manner of taking the time to surgically merge two List Block token concepts into one
in different places in the source code.&lt;/p&gt;
&lt;h3 id="the-first-step"&gt;The First Step&lt;a class="headerlink" href="#the-first-step" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A big first step on this journey was to move the code for calculating the looseness of
a HTML rendered list from the &lt;code&gt;TransformToGfm&lt;/code&gt; class into the new
&lt;code&gt;TransformToGfmListLooseness&lt;/code&gt; class.  While it was just a simple cut-and-paste move,
I feel that the move left the &lt;code&gt;TransformToGfm&lt;/code&gt; class better able to focus on the HTML
transformation, instead of also having the responsibility of figuring out the list
looseness.  It just felt cleaner to have that responsibility in its own class and module.&lt;/p&gt;
&lt;p&gt;Along with that change, I made equal changes to how the List Block starts were processed
in the HTML transformer and the Markdown Transformer.  In the HTML transformer, the
&lt;code&gt;__handle_start_unordered_list_token&lt;/code&gt; function was renamed to &lt;code&gt;__handle_start_list_token&lt;/code&gt;
and the &lt;code&gt;__handle_start_ordered_list_token&lt;/code&gt; function code was merged into that function.
In the Markdown transformer, the same process was repeated with the
&lt;code&gt;__rehydrate_unordered_list_start&lt;/code&gt; function was renamed to &lt;code&gt;__rehydrate_list_start&lt;/code&gt;
and the &lt;code&gt;__rehydrate_unordered_list_start_end&lt;/code&gt; function code was merged into that function.&lt;/p&gt;
&lt;p&gt;That merge allowed for the handler calls in each module to deal more simply with the List
Blocks, something that was worth it to me.&lt;/p&gt;
&lt;h3 id="equalizing-the-two-list-blocks"&gt;Equalizing the Two List Blocks&lt;a class="headerlink" href="#equalizing-the-two-list-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having done a lot of testing with the Unordered List Blocks, I felt it was time to give
some extra focus to the Ordered List Blocks.  Before the holiday break
started, I had noticed a handful of cases where the Ordered List Blocks had errors in
them that I thought should have been caught by existing tests.  While fixing this issue
was not the primary goal of this round of refactoring, I considered it a simple  secondary
goal that I should only have to fix list issues once, not twice.&lt;/p&gt;
&lt;p&gt;Looking at the second half of the &lt;code&gt;is_ulist_start&lt;/code&gt; function, I noticed that there
were significant differences from its sibling &lt;code&gt;is_olist_start&lt;/code&gt; function.  Slowly, I started
making changes to the &lt;code&gt;is_ulist_start&lt;/code&gt; function, bringing it more in line with it sibling.
But after making those changes, I still had the task of making sure that those changes
were working properly.  As any failures were not already caught, but discovered through
other tests, I figured that I needed to stop up my test game.&lt;/p&gt;
&lt;p&gt;To start this off, I picked six scenarios from each of Series M tests and made copies of
those tests.  Instead of using the Order List Blocks in those tests, I replaced the Ordered
List Blocks with Unordered List Blocks.  It was only after adding those 108 scenario tests
that I was confident that those changes had a good start at getting coverage.  And it paid
off too.  The only issues that were found were in the
&lt;code&gt;__perform_container_post_processing_lists&lt;/code&gt; function, where the data to be merged with
the surrounding list had to be massaged before a call to &lt;code&gt;__merge_with_container_data&lt;/code&gt; and
restored after that call was completed.&lt;/p&gt;
&lt;h3 id="refining-list-start-functions"&gt;Refining List Start Functions&lt;a class="headerlink" href="#refining-list-start-functions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The final set of functionality to merge was the &lt;code&gt;is_ulist_start&lt;/code&gt; function and the
&lt;code&gt;is_olist_start&lt;/code&gt; function.  Both of these functions had been on my “refactor” list for a
while, so I was glad to get started on them.  On closer examination, there were only a
few statements or values that changed between the two functions.  Once
the setup was accomplished in the first half of the function, the second half was near
identical.  Creating a new &lt;code&gt;__xxx&lt;/code&gt; function, I cut the second half of one of those two
functions and pasted it in that new function.  After checking to make sure nothing was lost
in the cut-and-paste, I compared it line-by-line with the similar code in the other
function, adjusting both functions to be represented by the new function.&lt;/p&gt;
&lt;p&gt;After a couple of rewind moments, the new &lt;code&gt;__xxx&lt;/code&gt; function incorporated the process from
both original functions.  With that accomplished and staged, I removed the second function
and used the new function in its place.  After fixing a couple of small issues, the new
function was up and running and working for both Ordered List Blocks and Unordered List
Blocks.&lt;/p&gt;
&lt;p&gt;At that time, I remember looking at the code and thinking that I had only completed half
of the job.  Repeating the same process that got me to that point, I soon renamed the
&lt;code&gt;__xxx&lt;/code&gt; function to &lt;code&gt;__is_start_phase_two&lt;/code&gt;, and further extracted code into a new
&lt;code&gt;__is_start_phase_one&lt;/code&gt; function.  With that done, the &lt;code&gt;is_olist_start&lt;/code&gt; function was
already slim, and I extracted the remaining logic into the &lt;code&gt;__is_start_olist&lt;/code&gt; function
to keep it slim, replicating that processing with the &lt;code&gt;is_ulist_start&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;In the end, I was very satisfied with the amount of refactoring that I was able to
accomplish.  Both methods were now six statements long, with 95% of the differing
functionality in the &lt;code&gt;__is_start_olist&lt;/code&gt; function and the &lt;code&gt;__is_start_ulist&lt;/code&gt; function.
While it was a good feeling getting the refactoring done, it was an even better feeling
knowing that I had a healthy set of test cases that I could count on when refactoring!&lt;/p&gt;
&lt;h2 id="consolidating-new-block-starts"&gt;Consolidating New Block Starts&lt;a class="headerlink" href="#consolidating-new-block-starts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having poured through the code looking for things to simplify, I was keenly aware of one
set of function calls that I could simplify: detecting new block starts.  Developed in
different parts of the code for similar reasons, both the List Block Processor’s
&lt;code&gt;__check_for_list_closures&lt;/code&gt; function and the Block Quote Processor’s
&lt;code&gt;check_for_lazy_handling&lt;/code&gt; function were performing almost the same set of
instructions.  One by one, the different Leaf Block start functions were being invoked
to determine if a newline indicated the start of a new block.&lt;/p&gt;
&lt;p&gt;It was not a big change but consolidating that code into the
&lt;code&gt;is_paragraph_ending_leaf_block_start&lt;/code&gt; function just made things cleaner.  There was just
one function to call with good documentation on what was going on.  It just made sense
to me.&lt;/p&gt;
&lt;h2 id="verifying-paragraph-usage"&gt;Verifying Paragraph Usage&lt;a class="headerlink" href="#verifying-paragraph-usage" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just before I started writing on that Sunday morning, I decided to add something that was
hopefully going to be a slam dunk.  While I was reasonably sure that all the various
referenced to Paragraph elements and any newlines within them were accounted for, I wanted
to be doubly sure.  So, to be sure of that, I added the following code to the end of
the &lt;code&gt;__rehydrate_paragraph_end&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;rehydrate_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rehydrate_index&lt;/span&gt;
        &lt;span class="n"&gt;expected_rehydrate_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;rehydrate_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_rehydrate_index&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"rehydrate_index+1="&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rehydrate_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;";expected_rehydrate_index="&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_rehydrate_index&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, by the end of the Paragraph element’s processing, the &lt;code&gt;rehydrate_index&lt;/code&gt; member
variable should have been incremented once for each newline contained within the paragraph.
If this did not happen, it means that the use of that &lt;code&gt;rehydrate_index&lt;/code&gt; member variable is
potentially off and needs to be fixed.&lt;/p&gt;
&lt;p&gt;Surprisingly, even after adding some extra tests, the only one element had issues: the
Raw HTML element.  In the main parser’s &lt;code&gt;parse_raw_html&lt;/code&gt; function, the raw text to use
for the tag was not properly accounting for the newline, something that was quickly fixed.
This pattern continued in the Markdown generator’s &lt;code&gt;__rehydrate_inline_raw_html&lt;/code&gt; function,
where I specifically created the &lt;code&gt;__handle_extracted_paragraph_whitespace&lt;/code&gt; to handle the
pulling apart and reintegration of that information.  This was a useful function to have
as I found some small issues with the &lt;code&gt;__rehydrate_inline_code_span&lt;/code&gt; function that required
applying that function to the various parts of the Code Span element.  Finally, to round
out the fixes, the &lt;code&gt;__verify_next_inline_raw_html&lt;/code&gt; function needed to have a similar
approach taken to address the last issues with the &lt;code&gt;rehydrate_index&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Given that it could have been a lot more cumbersome to fix, I was happy that I got off with
a relatively light amount of work!&lt;/p&gt;
&lt;!--- pyml disable-next-line no-trailing-punctuation --&gt;
&lt;h2 id="as-i-was-making-these-changes"&gt;As I Was Making These Changes…&lt;a class="headerlink" href="#as-i-was-making-these-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During the middle of these changes, I rearranged the items in the issues list.  My goal was
to take the priorities that I had in my mind and reinforce them in the list.  The only
exceptions to this reorganization were anything that was an immediate focus of what I was
doing at the moment.  The way I rationalized this was that anything that I could set down
for a while was something that I could figure out when to get to it.  With an item that
remained on the list or was newly added to the list, I deemed that the items were more of
an immediate task to get done, and just needed doing.&lt;/p&gt;
&lt;p&gt;While it may seem like a bit of a wishy-washy rule, it was one that I still felt fine with
after a couple of days of having the prioritization in place.  Granted, it felt like I was
churning through the immediate task section, but that also felt right.  As I am working on
whatever current task that I need to work on, I observe things in the code and have
questions about whether I took the right approach.  Writing those things down in
the issues list allows me to continue with the task without losing too much of the essence
of what I wanted to verify or question.  To me, that just seems like a good approach!&lt;/p&gt;
&lt;h2 id="preparing-for-the-future"&gt;Preparing for The Future&lt;a class="headerlink" href="#preparing-for-the-future" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A major part of this week’s work was to clean things up a bit with bigger tasks that I
do not normally have time for.  As such, I decided to spend about four to five hours during
the week experimenting with &lt;code&gt;SnakeViz&lt;/code&gt; and incorporating primitive SnakeViz support
into the project.  While it is too early to say what needs the most
improvement, I can say that I was able to get some good experience working with the tool
and the output HTML that helps visualize the performance.  I engaged in the
experimentation specifically to gain some experience with code profiling, and I can
honestly say that I think I got the experience that I was looking for!&lt;/p&gt;
&lt;p&gt;The smart thing about using SnakeViz to profile is that it is interactive.  To ensure
that a user can dig down and get relevant information, SnakeViz takes a performance
analysis file and hosts fragments of it through a webserver that it starts.  As the
webserver is starting, SnakeViz also launches it own page in its users own browser.
After that, it is just a matter of clicking around and displaying information on any
number of functions that were executed during the code profile run.&lt;/p&gt;
&lt;p&gt;I do not know if everyone will have the same experience that I did, but I found the
interface simple and easy to use.  When I start focusing on performance, I know I will
spend a decent amount of time looking at the &lt;code&gt;tottime&lt;/code&gt; column which displays the total
amount of time that was spent in each function during the entire code profile run.
I expect I will look at the top few items on that list and try and figure out why they
are taking that much time.  After making some guesses and changes to the code to match,
rerunning the code profile run with the exact same data will be pivotal.&lt;/p&gt;
&lt;p&gt;While it is still at least a month or so off, I am looking forward to using this tool
and making the code perform well!&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In terms of actual issues that I fixed during this week, the count was either low or
zero depending on who was doing the accounting.  But the big win was getting most of
the big-ticket items taken care of.  To be honest, it was a lot of pressure off my
mind getting those big items done.  From my viewpoint, I am not sure that I would have
felt okay with an initial release the project without those items being addressed.  It
was just good housekeeping, and now it was done!&lt;/p&gt;
&lt;p&gt;It just felt good to make the time to get those big-ticket items resolved.  While it
can be argued that there were not that many real changes to the code base, each of those
changes made a significant impact to my confidence about the project.  The refactoring
to provide easy and private access to the tokens?  It increased my confidence that I
have not missed any weird side effects.  The reorganizing and simple cleanup? It increased
my confidence that I had extra “stuff” to maintain across the code base that would make
things more complicated.  Consolidating the List Block code?  It increased my confidence
that I have captured a healthy set of scenarios that properly test both Ordered List Blocks
and Unordered List Blocks.  Each change simply increased my confidence by safely
reducing the amount of required code in the project.&lt;/p&gt;
&lt;p&gt;It also felt good for another reason: it was fun.  Sure, there were boring parts, like
making 2000 changes for the scenario test refactor.  That was definitely not fun.  But
that was kind of fun because it was something for the project that was different.  It
was not the same old test-fix-run and repeat process that I had been doing for months.  It
was just something different.  And that was just fun to do sometimes.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With most of the big-ticket tasks out of the way, I needed to buckle down and try and
resolve as many of the Block Quote items in the unprioritized section as possible.
While it would not be as fun as the big-ticket items, it knew they were worth doing and
it would get me closer to an initial release.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:honey"&gt;
&lt;p&gt;To be fair, in our household we have one honey-do list for me and one honey-do list for my spouse.  And we both ignore some items until reminded and get some items off the list on our own.  You know, typical list. &lt;a class="footnote-backref" href="#fnref:honey" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry></feed>