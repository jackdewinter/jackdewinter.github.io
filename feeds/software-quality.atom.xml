<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack's Digital Workbench - Software Quality</title><link href="https://jackdewinter.github.io/" rel="alternate"></link><link href="https://jackdewinter.github.io/feeds/software-quality.atom.xml" rel="self"></link><id>https://jackdewinter.github.io/</id><updated>2023-05-15T00:00:00-07:00</updated><entry><title>Addressing The Elephant In The Room</title><link href="https://jackdewinter.github.io/2023/05/15/addressing-the-elephant-in-the-room/" rel="alternate"></link><published>2023-05-15T00:00:00-07:00</published><updated>2023-05-15T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2023-05-15:/2023/05/15/addressing-the-elephant-in-the-room/</id><summary type="html">&lt;p&gt;Note: I believe I did a good job in describing my journey to dealing with this
issue in the &lt;a href="https://github.com/jackdewinter/pymarkdown_test"&gt;PyMarkdown_Test&lt;/a&gt;
project, so I decided to cheat a little and just include it here.  Hope any
readers do not mind.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;It may not be an elephant to other people, it is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Note: I believe I did a good job in describing my journey to dealing with this
issue in the &lt;a href="https://github.com/jackdewinter/pymarkdown_test"&gt;PyMarkdown_Test&lt;/a&gt;
project, so I decided to cheat a little and just include it here.  Hope any
readers do not mind.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;It may not be an elephant to other people, it is to me.  For me, the
elephant that I have not been talking about is a poor release process for the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;The thing that has been bothering me for the last three to four weeks are the
errors I made in releasing version 0.9.10 of the PyMarkdown project.  I dropped
the ball in effectively testing the product before its release, and I feel bad about
it.  It is even more embarrassing that I had something in place, and it failed to
recognize any errors.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ever since the first release of the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project, I have had a local directory on my machine called &amp;ldquo;pym_test&amp;rdquo;.  In that
directory, I had a couple of batch scripts that reach over to the PyMarkdown project,
install the release packages into the local directory, and execute tests of PyMarkdown.
These tests were simple tests, but they made sure that the releases of PyMarkdown
went smoothly.&lt;/p&gt;
&lt;p&gt;Until they didn&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;Sometime after release 0.9.5, there were a couple of times where I caught something
just before or after it was released and was able to mitigate it.  And then
the release of 0.9.10 happened.  For whatever reason (still researching), that release
worked fine on my machine, but failed on other machines.&lt;/p&gt;
&lt;p&gt;My test scripts were mainly testing a packaged PyMarkdown, with only a passing
glance at the &lt;a href="https://pre-commit.com/"&gt;Pre-Commit&lt;/a&gt; usage of &lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/pre-commit.md"&gt;PyMarkdown&lt;/a&gt;
as a pre-commit hook. To accommodate a required increase
in one of the project&amp;rsquo;s dependent packages, I changed the &lt;code&gt;Piplock&lt;/code&gt; file to access
the changed API and tested locally with that configuration.  All the scenario
tests passed, so I thought all was good.  Even after running my local test scripts,
all tests were passing and everything looked good.&lt;/p&gt;
&lt;p&gt;After doing some debugging, I found out that I had changed the &lt;code&gt;Piplock&lt;/code&gt; file, but
I had not changed the &lt;code&gt;install-requirements.txt&lt;/code&gt; file used by the package install
scripts.  This resulted in both package installations and the Pre-Commit installations
failing. My cobbled together tests on my machine were passing.  Installed on another
machine, those same tests were failing.  There was a problem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is how the &lt;a href="https://github.com/jackdewinter/pymarkdown_test"&gt;PyMarkdown_Test&lt;/a&gt;
project was started.  The project goes into more details on how I solved those
problems, but I am feeling a lot better about the status of the release tests.
And since the PyMarkdown workflow kicks off the PyMarkdown_Test workflow under
certain conditions, I know that it is going to be executed with enough frequency
to hopefully avoid situations like release 0.9.10.&lt;/p&gt;
&lt;p&gt;I might play around&amp;hellip; er&amp;hellip; experiment scientifically on fine tuning bits of the
new project, but right now I am happy with how it is performing.  But I am hoping
to make progress on other projects that I am working on, as well as getting some
more of the PyMarkdown scenario tests passing.  Stay Tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="software quality"></category></entry><entry><title>Taking A Long Look At My Work</title><link href="https://jackdewinter.github.io/2023/05/01/taking-a-long-look-at-my-work/" rel="alternate"></link><published>2023-05-01T00:00:00-07:00</published><updated>2023-05-01T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2023-05-01:/2023/05/01/taking-a-long-look-at-my-work/</id><summary type="html">&lt;p&gt;It is not an understatement to say that a lot of my professional and personal
software development revolves around doing things smarter, not working harder.
While I joke that I am being lazy&amp;hellip; er&amp;hellip; efficient, it is just a standard
point of view that I believe I have.  I would …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is not an understatement to say that a lot of my professional and personal
software development revolves around doing things smarter, not working harder.
While I joke that I am being lazy&amp;hellip; er&amp;hellip; efficient, it is just a standard
point of view that I believe I have.  I would prefer to do things once or have
things done once and iterate on that.&lt;/p&gt;
&lt;p&gt;Starting from square one is not always the right answer.  It took me about twenty
years of my career to figure that out, but I did get there eventually.  With everything
that you do, there is a balance to be struck between cost, benefit, and impact.
While there are professional &amp;ldquo;things&amp;rdquo; that are easy to associate with those three
concepts, I started to realize that the personal version of those &amp;ldquo;things&amp;rdquo; was
even more costly.&lt;/p&gt;
&lt;p&gt;Let me use cost as an example.  From a business point of view, the &amp;ldquo;thing&amp;rdquo; in question
can mainly be broken down into two categories: resource cost and opportunity cost.
Resource cost is an easy one to calculate.  How many people does it take and at what
price point to complete the task?  The tricky part here is that most teams do not
carefully consider maintenance and bugs fixes as an upfront cost, and instead
deal with them as they show up.  The infrastructure and other resources that the
team needs to stand up their work is also a resource cost.  With billing in place
in professional settings, which is an easy cost to measure.&lt;/p&gt;
&lt;p&gt;Opportunity cost is a bit more difficult to measure, but one that management battles
with all the time.  In its simplest form, this is the cost of not doing something.
As an example, say there are three features you can work on, Feature A, Feature B,
and Feature C.  Then assume you can only work on one of those features.  There are
also customers lined up to pay for a product that contains each of the three features.
That means that the cost of working on Feature A is perhaps not getting the customers
for Features B and C to use the product.  And if you can get them to use the application,
it is usually with a contract promise that their feature will be completed by a
given date.  From there, it often snowballs.&lt;/p&gt;
&lt;p&gt;Whether it be personal time software development or personal life issues, similar
costs apply.  When I look at the next feature or issue to address in any of my projects,
I must think about the amount of effort it will take and what I will not be able to
add to my other projects because of it.  Even more importantly, there are the personal
life issue costs.&lt;/p&gt;
&lt;p&gt;As a dyed-in-the-wool geek, I would love to be able to do stuff like software development
all day, every day&amp;hellip; but I just do not have it in me anymore.  I love the creative
process of writing open-source software, but there are real-life costs that must
be paid to make that creative freedom occur.  A good example was this weekend. I
have been putting off cleaning up the garage for a couple of weeks, so I finally
decided the opportunity cost of not having it done was getting too high.  That and
the cost of me swearing at the work needed to clean up the garage was just getting
annoying.  So, it got to a point where the cost was one worth paying.&lt;/p&gt;
&lt;p&gt;But there is also a hidden cost about not taking time to appreciate the world around
you and to ground yourself in that world.  As lazy as it sounds, I took time
to sit outside this weekend and just relax working on a handful of crossword puzzles. It
was just something very low-key and somewhat boring, but it was relaxing.  Listening
to our dog snore, the bird chirping, and getting fresh air helped me connect with
the world in a small way.  Then later when I was working on open-source
projects, I was able to focus on those projects with a clearer head because I took
the time to recharge in that uncomplicated way.&lt;/p&gt;
&lt;p&gt;How does this come back to my open-source work?  I have lately been just taking
time to look at the projects and see if there is any low-cost refactoring
that I can do to make those projects better.  Nothing spectacular, but better.
Keeping in mind that everything must have a balance, I just want to note down
a list of things that I can work on in the next few months to make my own personal
effort more efficient.  And I believe that is a good cost for me to figure out
every so often.&lt;/p&gt;</content><category term="Software Quality"></category><category term="software quality"></category></entry><entry><title>You Can Do Most Things Right...</title><link href="https://jackdewinter.github.io/2023/04/17/you-can-do-most-things-right/" rel="alternate"></link><published>2023-04-17T00:00:00-07:00</published><updated>2023-04-17T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2023-04-17:/2023/04/17/you-can-do-most-things-right/</id><summary type="html">&lt;p&gt;When my kids were growing up, I tried to install in them some of the wisdom in them that
my mother gave to me.  Certain things stuck and other things, not so much.  But when
it comes down to it, all I can hope for is that between things I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When my kids were growing up, I tried to install in them some of the wisdom in them that
my mother gave to me.  Certain things stuck and other things, not so much.  But when
it comes down to it, all I can hope for is that between things I stressed and things
that they learn, that they will get to a good point in their lives a lot quicker
than I did.&lt;/p&gt;
&lt;p&gt;One of the most crucial people in my life was my mother.  Now that she is no longer
in my life, I find myself reflecting on all the kindness and understanding that
she was able to give to the people around her.  It was my mother who first told
me &amp;ldquo;It doesn&amp;rsquo;t matter how many times you get knocked down, as long as you get up
each time!&amp;rdquo;  I thought it was a silly saying at the time, only to give her a big
hug in my forties and let her know how much that helped me.&lt;/p&gt;
&lt;p&gt;Software development is a part of life, and that saying is something that I think
about each day when I am working on the computer. It is a rare day when I do not
make a handful of mistakes, each one of them requiring me to check my ego at the
door, figure out what went wrong, dust myself off, and stand up again.  But today,
I was greeted with one of these scenarios where I was least expecting it&amp;hellip; in the
recent release of the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project.&lt;/p&gt;
&lt;p&gt;This scenario is one that can happen with interpreted languages and is a splendid
example of why code coverage is great for interpreted languages.  On the weekend,
I wrapped up the work I was doing on the project, and double checked everything.
With everything looking good, I used my &lt;code&gt;package.cmd&lt;/code&gt; script to create the new
&lt;code&gt;v0.9.10&lt;/code&gt; package so that I could run it through my pre-release tests.  The tests
themselves are not extensive tests, but tests to ensure that at least eighty percent
of the code is working properly.  Simple things like testing out the subcommands
and scanning a set of curated Markdown documents to make sure things work.  These
tests are meant to catch the odd case where things were missed, which does happen
from time to time.&lt;/p&gt;
&lt;p&gt;In this case, the scenario slipped through the cracks.  As Python is interpreted,
you must interpret a given line to test whether it works properly.  In this
case, I had made a change to my &lt;code&gt;application-properties&lt;/code&gt; package to expose
new functionality that PyMarkdown needed: default configuration files. Over in
that project, I made the changes and bumped the version to &lt;code&gt;0.6.0&lt;/code&gt;.  In the PyMarkdown
project, I used &lt;code&gt;pipenv&lt;/code&gt; to make the equivalent change to the project.  When I
was ready for the release, I ran my normal tests, and everything passed.&lt;/p&gt;
&lt;p&gt;The problem was that I did not update the project&amp;rsquo;s &lt;code&gt;install-requirements.txt&lt;/code&gt;
file that details the project&amp;rsquo;s non-developmental dependencies.  In this case,
my release testing did not have simple tests that involved the changed interface,
so it passed without issue.&lt;/p&gt;
&lt;p&gt;So now I need to pick myself back up and start to figure out how to solve
that issue.  It must be a test that is quick to execute, and a test that is not
just a repeat of the scenario tests.  Those are detailed tests that dig down
into the core of the project.  I just need something that will help me identify
issues with dependencies.  Not sure yet what it will be, but I hope to talk about
it next time.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>It Feels Good To Fix Bugs</title><link href="https://jackdewinter.github.io/2023/04/03/it-feels-good-to-fix-bugs/" rel="alternate"></link><published>2023-04-03T00:00:00-07:00</published><updated>2023-04-03T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2023-04-03:/2023/04/03/it-feels-good-to-fix-bugs/</id><summary type="html">&lt;p&gt;Do not get me wrong, I would rather not introduce any bugs into any code that I
write.  But having bugs in code is normal for any program with over five lines.
From my professional experience, the real question is what is done to prevent the
most severe bug and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Do not get me wrong, I would rather not introduce any bugs into any code that I
write.  But having bugs in code is normal for any program with over five lines.
From my professional experience, the real question is what is done to prevent the
most severe bug and what is done to correct those bugs with respect to priority.&lt;/p&gt;
&lt;p&gt;Let me break that down a bit.  I am a firm believer that it is increasingly difficult
to keep a program bug free once it exceeds five lines of code.  Call me a pragmatist,
but I am a firm believer in the adage &amp;ldquo;it is not if a program breaks, but what circumstances
are needed to break it and how often do they occur&amp;rdquo;.  As soon as a program interfaces
with something outside of itself, the number of circumstances to protect against
increases.  Each interface adds to the complexity of features that need to be tested
to have confidence that the most severe issues are properly dealt with.&lt;/p&gt;
&lt;p&gt;Add in to that equation the common use of libraries for developing applications.
They are great in that they provide functionality at a low cost, but there has to
be an examination of the testing process performed against those libraries. For
example, while it may be true that the current project handles file access errors
properly, it is not a given that all libraries will give the project team that
same level of confidence regarding error handling.&lt;/p&gt;
&lt;p&gt;It takes a lot of testing to cover every case, in fact one could argue that
the most testing can do is handle the highest impact and most predictable things
that can happen.  And it is a matter of balancing cost and benefit.  The &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project has perfect code coverage because of perseverance and because I believe
tools should have as close to full coverage as possible.  Hence, I expended the
cost to ensure the high level of code coverage.&lt;/p&gt;
&lt;p&gt;But I did not stop there. I went on to come up with a very comprehensive set of
scenario tests that include translating Markdown to tokens to HTML and translating
Markdown to tokens and back to Markdown.  Since each rule is based upon a correct
interpretation of Markdown, I felt that anything less would not be correct.  And
that decision has proven to be the correct decision, as over seventy-five percent
of the bugs are a result of parsing issues, not rule issues.&lt;/p&gt;
&lt;p&gt;And that is why I feel that it just feels good to fix bugs.  I am firmly aware that
I am human and that I am fallible.  I cannot cover every scenario, and users of
the PyMarkdown project find issues with their usage of the project.  I am also
happy to say that in all cases so far, I promise to give their issue it&amp;rsquo;s required
time and I get a thank you from each person.  When I fix the bug, or consider an
enhancement to the project, I start a conversation with each user to ensure that
their problems with the project are dealt with before closing the issue.&lt;/p&gt;
&lt;p&gt;Call me weird, but I like those conversations.  Sometimes the issue may take weeks
to fix, but one friendly conversation at the end is worth it to me!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Plans Do Not Usually Go This Well For Me</title><link href="https://jackdewinter.github.io/2023/03/21/plans-do-not-usually-go-this-well-for-me/" rel="alternate"></link><published>2023-03-21T00:00:00-07:00</published><updated>2023-03-21T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2023-03-21:/2023/03/21/plans-do-not-usually-go-this-well-for-me/</id><summary type="html">&lt;p&gt;After a week working on the scenario tests for handling Markdown with tab characters
in it, I am convinced that the preparation time I took in getting ready for this
block of work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project
was the right choice.  It was by no means easy work, but I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After a week working on the scenario tests for handling Markdown with tab characters
in it, I am convinced that the preparation time I took in getting ready for this
block of work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project
was the right choice.  It was by no means easy work, but I firmly believe that I
was able to make more progress because of the time I took to refactor.&lt;/p&gt;
&lt;p&gt;That assertion is based on my observation that I found it easier
to navigate around the code when I was looking for patterns.  For those that have
not read about my seemingly arcane debugging practices, I use a lot of log files
for projects such as these.  From my perspective, debuggers are great at providing
a close up view of what is going on, but cannot display the information that I
need to spot patterns.  That big picture view is where I tend to use log files
as a debugging tools.&lt;/p&gt;
&lt;p&gt;For issues like fixing the handling of tab characters in the tokens, I find it
invaluable to be able to examine the log files, looking for the ebb and flow of
the data as each line is parsed and tokens are emitted.  During this task of placing
the tab characters back into tokens, I have often resorted to tracking the flow
of data between two log files.  On one monitor I have an editor open with the actual
scenario test that I am debugging, and on the other monitor I have another editor
open with the &amp;ldquo;spaces only&amp;rdquo; version of that test.&lt;/p&gt;
&lt;p&gt;Basically, if I have the logs for one scenario test for a sequence like &lt;code&gt;{space}{tab}&lt;/code&gt;
on one monitor, the other one contains the logs for the test with the sequence
&lt;code&gt;{space}{space}{space}{space}&lt;/code&gt;. By making only that change to the scenario test,
I can examine the log files and see where the handling diverges.  While it might
seem boring (because it usually is), it is effective.  As an added feature, when
I think I have narrowed down the issue to a specific section of code, using a
statement like &lt;code&gt;assert False&lt;/code&gt; in the offending code stops the processing cold.
That action just helps me not get frustrated at having to go through too many lines
in the log files.&lt;/p&gt;
&lt;p&gt;While the log files do not help me clean up the code, they do help me isolate
the code that causes the issue.  And if the last week&amp;rsquo;s experience keeps paying
dividends, it is because I can then deal with smaller objects once I find the area
to focus on. Even with a good grasp of logic and programming languages, there are
a finite amount of objects one can keep in their head at time.  If I had to take
an educated guess based on further observations, I would guess that by having smaller
methods with better names helps me to &amp;ldquo;hold&amp;rdquo; on to the methods and their purposes
better.  If that is the case, it would then follow that I would retain that information
better due to that grip.&lt;/p&gt;
&lt;p&gt;I am not sure it that makes any sense.  Refactoring and observations are funny things.
What may look cleaner and obvious to one person may look the exact opposite to
someone else.  One thing I am sure of is that the pre-work helped me with this work,
and for that I am grateful.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Scenario Tests Need Focus and Quality</title><link href="https://jackdewinter.github.io/2023/03/14/scenario-tests-need-focus-and-quality/" rel="alternate"></link><published>2023-03-14T00:00:00-07:00</published><updated>2023-03-14T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2023-03-14:/2023/03/14/scenario-tests-need-focus-and-quality/</id><summary type="html">&lt;p&gt;First, to any readers out there, a happy &lt;a href="https://en.wikipedia.org/wiki/Pi_Day"&gt;Pi Day&lt;/a&gt;
to you all.  As to how I am doing, I will let everyone know once I finish the rather
large apple pie that my partner got me for today.  And that is after I walk off that
sugar by walking …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, to any readers out there, a happy &lt;a href="https://en.wikipedia.org/wiki/Pi_Day"&gt;Pi Day&lt;/a&gt;
to you all.  As to how I am doing, I will let everyone know once I finish the rather
large apple pie that my partner got me for today.  And that is after I walk off that
sugar by walking Bruce to the moon and back!&lt;/p&gt;
&lt;p&gt;That aside, I have made good strides in moving things forward with the refactoring
of the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project and into
more tab fixing work.  The refactoring was very important for me to get to a certain
stage, because I am sure that the planned work on fixing tab support and
making sure nested containers work properly will definitely use that code.  Call
me a pragmatist, but as that work will already be complicated, I want to reduce
the effort required for that work where possible.&lt;/p&gt;
&lt;p&gt;So, in between starting to clean up the house and doing yardwork here in the Pacific
North West, I started to figure out how I wanted to take care of the remaining work
for tab support.  Whether it is correct or not, I believe that the remaining work
can be broken down into two chunks:  leaf blocks and container blocks.  And while
I feel that focusing on nested container blocks is more important, I decided to
focus on getting the first pass at the leaf blocks done.&lt;/p&gt;
&lt;p&gt;Here is my thinking.  I have a decent set of cases specified for Atx Heading blocks
and how they interact with tab characters.  That is to say, I have good tests that
deal with those blocks on their own and those blocks with up to two levels of nested
container blocks.  While I would prefer to have up to three levels of container
blocks, I believe that breadth is currently more important than depth.  Continuing
on that thought, it followed that getting all the leaf blocks to the same level
of coverage as the Atx Heading blocks seemed to be intuitive.&lt;/p&gt;
&lt;p&gt;Following that decision, I took a look at the whitespace tests for the Atx Heading
blocks and the whitespace tests for the Thematic Break elements, and started marching
down the list of what each test covered.  For the most part, it was pedantic, but
easy.&lt;/p&gt;
&lt;p&gt;To be blunt, when I say easy, I mean that coming up with the test cases was
easy.  As I wanted the container section of both tests to line up with each other,
I made sure that the next four to five scenario tests were aligned with each other,
one with Thematic Breaks and one with Atx Headings.  After that block of tests were
updated, I started at the start of the file and compared both files, line by line.
Call it being pedantic or call it being paranoid, but I just wanted to make sure
that each scenario test lined up in both files.&lt;/p&gt;
&lt;p&gt;And it took me a while, but I got there.  Before writing this article on Monday,
I had an updated set of Atx Heading scenario tests working, with only five tests
to get either working of skipped once I finish authoring this article.  And that
is where I wanted to be.  I had no delusions that all Thematic Break tests were
going to pass.  I know I need to fix them.  But using the Atx Heading work as a
template, hopefully I can make good progress on that this week.&lt;/p&gt;
&lt;p&gt;For me, that is what I mean by scenario tests need focus and quality.  It is not
enough for me to say that I have scenario tests, but I need to be able to plan out
what tests I need to add, and focus on getting them in place.  Hopefully most of
those tests pass, but I always plan on a handful of the tests failing. So now I
can go into next week with some wind at my back, with confidence I am taking the
right approach for me and this project.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Refactoring Can Be Addictive</title><link href="https://jackdewinter.github.io/2023/03/06/refactoring-can-be-addictive/" rel="alternate"></link><published>2023-03-06T00:00:00-08:00</published><updated>2023-03-06T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2023-03-06:/2023/03/06/refactoring-can-be-addictive/</id><summary type="html">&lt;p&gt;As I mentioned last week, after the latest release of my
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project, I wanted to take
time to do some decent refactoring to the project.  But refactoring can be
addictive.&lt;/p&gt;
&lt;p&gt;In these cases, I am doing some refactoring that I have been putting off for a
long time.  That …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I mentioned last week, after the latest release of my
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project, I wanted to take
time to do some decent refactoring to the project.  But refactoring can be
addictive.&lt;/p&gt;
&lt;p&gt;In these cases, I am doing some refactoring that I have been putting off for a
long time.  That is to say that I have let a lot of the individual files grow to
a large enough size that they routinely have multiple responsibilities.  While I
often allow that in smaller files where it makes sense, on the larger files it
just makes things easier to work with.&lt;/p&gt;
&lt;p&gt;So let me start with an easy file that does not need much refactoring: the file
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/main.py"&gt;main.py&lt;/a&gt;.
At just over 450 lines, it is a bit too long for me to be comfortable with it, but
it takes care of the main orchestration of the application as its single responsibility.
Sure, it takes care of command orchestration, initialization, and parsing of the
command line, but I consider each of those concepts to be part of the main application
orchestration task.  Given that context, the &lt;code&gt;main.py&lt;/code&gt; file does not require any
&amp;ldquo;reduction refactoring&amp;rdquo; to reduce the size of the file by properly refactoring the
code according to the responsibilities.&lt;/p&gt;
&lt;p&gt;Next on the list are files such as
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/leaf_markdown_token.py"&gt;leaf_markdown_token.py&lt;/a&gt;.
Files like this are technically not too long, but they do contain many responsibilities.
In the case of the &lt;code&gt;leaf_markdown_token.py&lt;/code&gt; file, it contains a collection of Markdown
token classes grouped by their token type.  While not ideal, it was convenient at
the time.  These types of files are slated for long term refactoring.  In the long
run, I want to pull as much information about a given token as possible into a
single file for that one token.  But for right now, things are good as they are.&lt;/p&gt;
&lt;p&gt;That leaves me with the files that are too large and have too many responsibilities.
A good example of that is the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/9224088bac0db7740397908f8c4e409702331ecf/pymarkdown/inline_processor.py"&gt;inline_processor.py&lt;/a&gt;
file from the beginning of February 2023.  At 2795 lines, it was a beast to work
with and to scan through.  It was not created that way initially, but it did grow
that way unabated. As such, it is a file that was on my list of files to look at
for &amp;ldquo;reduction refactoring&amp;rdquo;.  And by the time this article is published, the file
should be broken up into a few distinct files, each with a single responsibility.&lt;/p&gt;
&lt;p&gt;The reason that I bring this up is that I find there is a fine line between trying
to optimize everything through refactoring and making progress on other goals.
Refactoring is addictive.  Making things better can give you a jump in your step,
just knowing you made things better.  But there is a point of diminishing returns.&lt;/p&gt;
&lt;p&gt;For me, this kind of refactoring is something I should have been doing all along,
but I focused on the tab reintegration and nested container blocks, not paying
attention to how disorganized the files were getting.  For me, this is not making
things better, this is technical debt that I owed the project.&lt;/p&gt;
&lt;p&gt;Hope that helps people figure out why I am spending so much time on the current
refactoring, even though I want to get back to adding more scenario tests!
Please stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>It Took A While... v0.9.9</title><link href="https://jackdewinter.github.io/2023/02/27/it-took-a-while-v099/" rel="alternate"></link><published>2023-02-27T00:00:00-08:00</published><updated>2023-02-27T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2023-02-27:/2023/02/27/it-took-a-while-v099/</id><summary type="html">&lt;p&gt;It took a while to get there, but today I am happy to release the latest
patch versions of the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project.  And while I had a lot of life happening, as I talked about in
these articles, I did make a lot of progress in dealing with things.&lt;/p&gt;
&lt;p&gt;While …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It took a while to get there, but today I am happy to release the latest
patch versions of the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project.  And while I had a lot of life happening, as I talked about in
these articles, I did make a lot of progress in dealing with things.&lt;/p&gt;
&lt;p&gt;While there have been a handful of issues fixed in the last six months, the
bulk of the work was aimed at shoring up two major areas: tabs and nested
container blocks.&lt;/p&gt;
&lt;p&gt;As I talked about in my previous article
&lt;a href="{filename}/articles/SoftwareQuality/progress-with-tabs.md/#history-with-tabs#history-with-tabs"&gt;Making Progress With Tabs&lt;/a&gt;,
I made a decision early in the project to handle tab characters as space characters
rather than as tab characters.  This made a lot of things easier, especially the
computation of indents at the start of a line.  But as I get closer to having a
totally compliant parser, it made sense to go back and ensure that any tab characters
were properly represented in the token format.  That action also has the benefit
of allowing the parser to emit the HTML output format that the project uses to
verify the Markdown translation.&lt;/p&gt;
&lt;p&gt;But that is not always an easy task.  Markdown treats tab characters as tab
stops, a single tab character will translate into either 1, 2, 3, or 4 space characters,
depending on where it occurs in the current line.  As such, there is no easy substitution
that can be used to go back from space characters to tab characters.  And because
of that, there is the possibility of the tab characters being expanded to multiple
tab characters that span elements.  Consider the Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="k"&gt;second&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first line sets up an unordered list block, and the second line is translated
into &lt;code&gt;{space}{space}{space}{space}second line&lt;/code&gt;.  The first two of those space characters
belong to the list element, and the second two space characters belong to the paragraph
element containing the text &lt;code&gt;second line&lt;/code&gt;.  Those situations cause for what I call
a &amp;ldquo;split tab&amp;rdquo; situation, and they are tricky to handle properly.&lt;/p&gt;
&lt;p&gt;In the end, those issues are always resolvable, it just takes time.  In most cases,
I quickly figure out what needs to be done, but as they say, &amp;ldquo;the devil is in the
details!&amp;rdquo;.  Finding the correct situations that solve a specific issue is not usually
the problem.  The problem arises when I try and make sure the new code only
fires when it is supposed to and does not fire in the other cases.  Finding the
right combination of things to check for takes a lot of experimentation.  And that
just takes times.&lt;/p&gt;
&lt;p&gt;Because I am trying to test some weird cases with tab characters, I also ran into
issues with nested container blocks arising from combinations that I have not covered
yet.  This was not a surprise for me, but it did take some time to get my head
around.  The good news for those issues is that they mostly occurred when the parser
moves from a sublist back to its parent list.  The calculations for those were
just a slight bit off.  All those issues were worthwhile to find, they just took
time.&lt;/p&gt;
&lt;p&gt;And hopefully this does not sound like an excuse, but I do need a clear head to
properly think through these issues and debug them properly.  I had a lot going
on since the previous release, and the amount of &amp;ldquo;quality&amp;rdquo; development time I had
was limited.  Not an excuse in my books, just life.  And yes, I must remind
myself that life happens, and not to be hard on myself for not getting farther
faster.&lt;/p&gt;
&lt;p&gt;I am starting to see the end of the tunnel for the main phase
of this project.  The first roadblock is proper support for tab characters, and
I believe I am closing in on having that taken care of.  Following that, there
is testing that I want to do to ensure that the nested container blocks are working
properly.  Finally, after that, I have some work to do on properly handling container
blocks that start at different positions and accounting for that.&lt;/p&gt;
&lt;p&gt;For what it is worth, I also believe that is the correct order of issues to be working
on.  While they are not plentiful, I have started to see more Markdown documents
that contain tab characters.  The count of those documents is definitely greater
than the documents that I have seen with deeply
nested container blocks or starting lists and block quotes at different locations
on a line.  If I had to guess, I would suggest that when people are authoring Markdown
documents, they want things to look &amp;ldquo;right&amp;rdquo;, and those two formatting choices are
not conducive to looking &amp;ldquo;right&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Regardless, those issues are on my list, and I will hopefully be picking up momentum
on closing them out.  There of course will be more refactoring that I want to do
as I proceed through those areas, but I am hopeful that the refactoring will allow
me to speed up the fixing of the other issues, not delay them.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Getting Back To Normal</title><link href="https://jackdewinter.github.io/2023/02/13/getting-back-to-normal/" rel="alternate"></link><published>2023-02-13T00:00:00-08:00</published><updated>2023-02-13T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2023-02-13:/2023/02/13/getting-back-to-normal/</id><summary type="html">&lt;p&gt;Wow&amp;hellip; I never thought that getting back in shape with respect to my online activities
would be so difficult.  While there have been days in the last two weeks where
I have had aches and a sore back, there were many more days where I had a bad case
of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Wow&amp;hellip; I never thought that getting back in shape with respect to my online activities
would be so difficult.  While there have been days in the last two weeks where
I have had aches and a sore back, there were many more days where I had a bad case
of the &amp;ldquo;done whannas&amp;rdquo;.  For any non-English speakers out there, assume I am saying
the words &amp;ldquo;don&amp;rsquo;t want to&amp;rdquo;, but slurring it heavily because&amp;hellip; well, I don&amp;rsquo;t want
to.&lt;/p&gt;
&lt;p&gt;My vices?  Basically, any science fiction long movie, science fiction or fantasy
short films, and anime. The fun part is that with the anime, I will watch it multiple
times looking for things I may have missed. Some movies are like that too. It
can be looking for something interesting (Tenet and Inception) or just because it
has an enjoyable story arc.  It does not matter.&lt;/p&gt;
&lt;p&gt;But sometimes I relax too much when I know that I want to accomplish things like
getting further with the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project.  That is when it gets in the way. And now that I am feeling better, trying
to get back into the habit of working on my open-source projects, as time allows.&lt;/p&gt;
&lt;p&gt;While I am just completing some refactoring work that I will talk about next week,
I wanted to focus on some interesting issues that I found and fixed.  Yes, issues,
otherwise known as bugs or features with a bowtie.  And yes, my code has issues.
I have never denied it.  I just try my best to reduce the number of issues in any
code that I write by taking a wholistic approach to testing.&lt;/p&gt;
&lt;p&gt;Two weeks ago, I wrote about the example that I was working on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It did take me a bit to deal with its predecessor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then to fix the instance with the tab, but it was a good issue to fix.  And
it took about a week and a half to fix!&lt;/p&gt;
&lt;p&gt;It took me a whole two days to read the example without the tab character properly.
To help any readers out there, hopefully the first two lines are simple to parse:
an ordered list on line 1 with an ordered sublist on line 2.  For some reason,
when I read line 3, my mind said that it was another item for the sublist.  It
took me taking my time and checking against &lt;a href="https://babelmark.github.io/?text=1.+abc%0A+++1.+def%0A++++%23+abc%0A"&gt;Babelmark&lt;/a&gt;
to confirm the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;abc
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;def&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;abc&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is correct.  The Atx Header item on line 3 is not indented enough to continue
the sublist, causing it to terminate and the Atx Header is kept within the main
list.  That was a bit embarrassing when I figured it out.  But it was not too embarrassing
for me as the parsing was reporting back the same thing that I assumed.&lt;/p&gt;
&lt;p&gt;Taking a look at the code at that time, it made sense.  Both:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
   &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
      &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;were parsing properly.  It was when the text was indented four or five spaces that
the parsing failed.  In that case, it was continuing the sublist with another list
item, and getting things wrong.&lt;/p&gt;
&lt;p&gt;It took most of a week&amp;rsquo;s worth of evenings and spare time on that weekend to figure
out all the little issues with it, but I did!  The main problem that I had is that
when I coded a lot of the list indent logic, I used the &lt;code&gt;indent_level&lt;/code&gt; of the two
list tokens and the list item token for all operations.  In the first case, using
the &lt;code&gt;indent_level&lt;/code&gt; level was the wrong thing to do.  I needed to change the first
part of the comparison to the &lt;code&gt;position_marker&lt;/code&gt; and its &lt;code&gt;index_number&lt;/code&gt; field. That
allowed me to properly look to see that the Atx Header starts at column 4, which
is greater than or equal to the &lt;code&gt;indent_level&lt;/code&gt; for the main list, but is less than
the &lt;code&gt;indent_level&lt;/code&gt; of the sublist.  And as I have done that in multiple places in
the code, I am sure I am going to run into that again.&lt;/p&gt;
&lt;p&gt;There were of course other little issues with the code.  In some cases, I needed
to make a small fix, but that small fix broke other parts of the code.  It is in
those circumstances that I am grateful that I have a deep battery of tests to
keep me on the straight and narrow.  I cursed at them when I hit them, but I was
grateful for them to back me up.&lt;/p&gt;
&lt;p&gt;With that block of fixes out of the way, I decided to deal with a couple of bugs
that I needed to get to, do some refactoring, and then get ready for a new release.
But that is next week.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Getting Over Covid Is Hard</title><link href="https://jackdewinter.github.io/2023/01/31/getting-over-covid-is-hard/" rel="alternate"></link><published>2023-01-31T00:00:00-08:00</published><updated>2023-01-31T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2023-01-31:/2023/01/31/getting-over-covid-is-hard/</id><summary type="html">&lt;p&gt;The last week has been a lesson in humilty and making sure I keep to my word and
get healthy before digging full bore into the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;So the bad news is that my recovery is going slower than I wish. I guess that is
probably true of any …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The last week has been a lesson in humilty and making sure I keep to my word and
get healthy before digging full bore into the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;So the bad news is that my recovery is going slower than I wish. I guess that is
probably true of any illness, but this one seems particularly sticky.  Since I work
during the day, I have to limit my time in the evening to make sure I have enough
energy in the &amp;ldquo;tank&amp;rdquo; for the next day.  That means setting an earlier cut off time
for my weekday working.  That has taken some adjusting to.  Hopefully I can start
to scale it back to where it was before I got Covid.&lt;/p&gt;
&lt;p&gt;The good news is that I have made progress in figuring things out.  As I was going
through a number of cases, I came across an interesting case dealing with a tab
character:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It it not really that special, just using a single tab character as an indent. But
in this case, that translates into:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and that was not working either.  So to fix the one with that tabs, I needed to
fix the one with just spaces.&lt;/p&gt;
&lt;p&gt;For another lesson in humility, you deeply understand how lucky you are to be able
to think clearly when you take on a complicated task like debugging. What would
normally take me a day or two to complete took many hours to handle.  The cheer
coming out of my mouth when I found the correct answer was enough to startle the
dog and have him run to the other end of the house.  The fun thing was that I had
most of the code in place, I just needed to add two lines to use the code that
was already there.&lt;/p&gt;
&lt;p&gt;With the spaces-only case now working, I am working on the tab version, and I
hope to have something committed by the end of the week, brain cells permitting.
Stay Tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Things Are Looking Brighter</title><link href="https://jackdewinter.github.io/2023/01/23/things-are-looking-brighter/" rel="alternate"></link><published>2023-01-23T00:00:00-08:00</published><updated>2023-01-23T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2023-01-23:/2023/01/23/things-are-looking-brighter/</id><summary type="html">&lt;p&gt;As I reported last week, the fog of Covid is lifting and I am getting back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;.  I am making progress
but am currently stuck on a problem.  Unlike the other issues I have faced while
adding proper tab support, this one is a beauty.  For some reason …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I reported last week, the fog of Covid is lifting and I am getting back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;.  I am making progress
but am currently stuck on a problem.  Unlike the other issues I have faced while
adding proper tab support, this one is a beauty.  For some reason, given the set
of conditions that I currently have, a total unexpected set of properties are
being assigned to a list token.  Those properties are different enough that everything
else after it fails.&lt;/p&gt;
&lt;p&gt;Basically, I am working on a fun issue to debug, currently stuck on it, and should
have more information next week.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Continued Progress with Tabs</title><link href="https://jackdewinter.github.io/2022/11/14/continued-progress-with-tabs/" rel="alternate"></link><published>2022-11-14T00:00:00-08:00</published><updated>2022-11-14T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-11-14:/2022/11/14/continued-progress-with-tabs/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/10/24/making-progress-with-tabs/"&gt;last article&lt;/a&gt;, I talked
about the process I have made in adding tab support to the project.  This week, I
will talk about the various issues that I have encountered.&lt;/p&gt;
&lt;h2 id="before-we-start"&gt;Before We Start&lt;a class="headerlink" href="#before-we-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My writing has been spotty at best lately.  Part of that is due to …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/10/24/making-progress-with-tabs/"&gt;last article&lt;/a&gt;, I talked
about the process I have made in adding tab support to the project.  This week, I
will talk about the various issues that I have encountered.&lt;/p&gt;
&lt;h2 id="before-we-start"&gt;Before We Start&lt;a class="headerlink" href="#before-we-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My writing has been spotty at best lately.  Part of that is due to lack of energy
and the rest is due to lack of quality.  Life has been punching hard lately
and I needed to take the time to get things back to allow me to move
forward.  While everything is not back where I needed it to be, it is slowly moving
back in that direction.&lt;/p&gt;
&lt;p&gt;For me, work can often be a distraction from the real world.  When I am working on
one of my projects, such as the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project, I can just focus on it and not worry about the things around me.  While
the other stuff that has happened to me in the past month was a bit much, I was
starting to get a handle on it when &lt;a href="https://jackdewinter.github.io/2022/11/07/saying-goodbye-is-never-easy/"&gt;my mother passed away&lt;/a&gt;.
That really knocked me down and out for a bit.&lt;/p&gt;
&lt;p&gt;While it may seem like a bit of a crutch, having my projects as a distraction has
allowed me to channel my negative energy into a positive effort… something that
my mother would have approved of.  It has also allowed me to reduce the flow of
those negative emotions to a level where I can more readily deal with them. And
given that my mother was one of my closest friends, I definitely needed that in
the last couple of weeks.&lt;/p&gt;
&lt;p&gt;It will still take me a while to complete the processing of those feelings, but
I am dealing with them at my own pace.  At the very least, it allows me to pace
myself most of the time. Sometimes those emotions just come out and I must
take a break and work on them.  It is just life.  It is not predictable, and it is
not always fun.  But for me, working through these emotions helps me understand
what is important in life.  And for that I am grateful.&lt;/p&gt;
&lt;h2 id="where-were-we"&gt;Where Were We?&lt;a class="headerlink" href="#where-were-we" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As it has been a couple of weeks, I thought a quick catch up was warranted. The
last time I wrote, I was working to figure out how to represent Indented Code
Blocks whitespace properly, with Link Reference Definitions and Container Blocks
on the horizon.  I needed to deal with the possibility of the
Indented Code Blocks splitting a tab character when it was set up properly.&lt;/p&gt;
&lt;p&gt;The short story: things have progressed.  The first thing that I was lucky to
encounter was that those complexities were avoided without containers.  Because
the parser treats the tabs characters like tab stops, the only way to get to the four
characters needed for an Indented Code Block without a container were up to
three space characters followed by a tab character.  Once the parser observed
the tab character, the tab stop of four gave the Indented Code Block its required
four characters, and any other characters went into the Code Block itself.&lt;/p&gt;
&lt;p&gt;After making a bit of an attempt at working on the Link Reference Definitions,
they proved too much for me to handle along with what was going on in life.
That was not a big deal at the time.  I knew that I would have to handle them,
and I was okay with putting them aside.  As they have an increased difficulty
level, I felt that getting some more tab handling under my belt was a good thing
to accomplish before dealing with them.  They are still on the list as of
the writing of this article, but they are now at the top of the list.&lt;/p&gt;
&lt;h2 id="dealing-with-block-quotes"&gt;Dealing With Block Quotes&lt;a class="headerlink" href="#dealing-with-block-quotes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The list of elements to work on was shrinking to the point that only container
blocks were left on the list.  Looking at the choices of Lists and Block
Quotes, I felt that the Block Quotes were the easier of the two to deal with
first.  When I say they were easier, it was that the number of permutations of
whitespace tied to the Block Quotes is two: is it followed by a space character
or not.  The permutations for List elements and potential padding characters were
an extensive list.  Better to handle it later.&lt;/p&gt;
&lt;p&gt;But it meant dealing with split tab characters.  I was not looking forward to
that.&lt;/p&gt;
&lt;p&gt;What is a split tab?  When writing Markdown text for inclusion into a Block Quote
container, the text &lt;code&gt;&amp;gt;{space}text&lt;/code&gt; is as valid as &lt;code&gt;&amp;gt;text&lt;/code&gt;.  That is to say that
a single space character before the text within the Block Quote line is optional.
When dealing with HTML output, that is not an issue as the whitespace is
thrown away.  When dealing with space characters in Markdown output, that is not
an issue as a space character is an atomic construct.  Each space character will
only ever be one space character.&lt;/p&gt;
&lt;p&gt;The problem with the tab character is that it can represent between one and four
space characters, depending on where it is situated in the line. If the text
&lt;code&gt;&amp;gt;{tab}text&lt;/code&gt; is presented to the parser, the tab character is expanded to three
space characters, effectively becoming &lt;code&gt;&amp;gt;{space}{space}{space}text&lt;/code&gt;.  But when
the parser goes to associate those space characters with specific Markdown elements,
there is an ownership problem.  Which element gets the tab character?&lt;/p&gt;
&lt;p&gt;Doing my usual experimentation and research, I noticed that while there were
complexities, they did not end up being as bad as I thought they would be.  In the
above case, I needed to do two things to properly split the tab.  The first of those
things was to place the tab character with the element that was nested inside of
the container.  While this did impact each Leaf Block element type, it was not that
bad.  And a simple search early in the matching process allowed me to detect the
split tab case with ease.&lt;/p&gt;
&lt;p&gt;The other part took a bit of thinking, but it was to remove the space that was
at the end of the Block Quote leading_space field.  As the Block Quote contents
are being created, a &lt;code&gt;\n&amp;gt;{space}&lt;/code&gt; is added to the owning single depth block quote
element to denote the new line.  The &lt;code&gt;\n&lt;/code&gt; indicate that it is a new line and the
&lt;code&gt;&amp;gt;{space}&lt;/code&gt; provide for the normal use of the Block Quote with a space.  As the
HTML does not require the space and the Markdown token has the tab character,
the Block Quote’s trailing space character can be removed.&lt;/p&gt;
&lt;p&gt;It was an easy answer, but one that I was not sure of at first.  I needed to
work through the first three element types nested within a Block Quote element
to really get a sense that it was the right answer.  And it was not that I did
not trust my own research, but the answer seemed too simple.  As I was going
through a lot in my personal life, I was concerned that I was taking a short cut
that I would not normally take.&lt;/p&gt;
&lt;p&gt;But time bore out the research and the solution.  The code to handle it was simple,
somewhat eloquent, and easy to match to each element.&lt;/p&gt;
&lt;h2 id="block-quotes-were-hard"&gt;Block Quotes Were Hard&lt;a class="headerlink" href="#block-quotes-were-hard" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that out of the way, I proceeded to work on different permutations of the
Block Quote elements and tab characters for each of the elements.  There were
a handful that were easy to get right, and another handful that had a lot of
trick scenarios that I had to work through.  If memory serves, I do not believe
any of them fell in the middle of that equation.&lt;/p&gt;
&lt;p&gt;A good example of the difficult cases was Fenced Code Blocks and Indented
Code Blocks.  The bare implementation of these is easy.  But when I placed
them inside the Block Quote element, I had to rework a certain amount of the code.
For Indented Code Blocks, the consuming of the first four whitespace characters
caused a lot of split tab situations that I had to get right.  For the Fenced
Code Blocks, it was the same thing but depended on the indentation of the opening
Fence Block element.  In both cases, I had to be sure to follow the specification
on how to deal with them.&lt;/p&gt;
&lt;p&gt;And just when I thought I was finished with Block Quotes, I hit myself with a set
of tests that I needed to fix.  For laughs and giggles, I added a series of tests
with each Leaf Block element inside of a Block Quote, with every whitespace replaced
with a tab character.  I was not laughing when most of the tests failed.  In most
cases, it was not something too serious to fix.  It just took some extra time to
work through those cases.  And while I cleaned up those tests, I found a single
test that I should have fixed that I did not.  Another detour.&lt;/p&gt;
&lt;h2 id="is-it-worth-it"&gt;Is It Worth It?&lt;a class="headerlink" href="#is-it-worth-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I was getting ready to author this article tonight, I asked myself that question
a couple of times.  I personally do not include tab characters in my Markdown
documents as they are not predictable.  I realize that the parser interprets them
as tab stops, but my mind is keyed to seeing them expanded
into a constant set of space characters.  That is just my opinion, not anyone else’s.
When I am typing, I want to know exactly where the spacing is.&lt;/p&gt;
&lt;p&gt;I could just get away without implementing proper support for tab characters,
but that would not sit well with me either.  It is part of the specification, and
I would feel like I missed it on purpose.  So that was out.&lt;/p&gt;
&lt;p&gt;With those tasks mostly completed, my answer was: yes, it is worth it.  I still
have some more ways to go, but it is indeed worth it.  For people that do not use
tabs characters, I have a solid linter that is compliant with the
&lt;a href="https://github.github.com/gfm"&gt;GitHub Flavored Markdown&lt;/a&gt; specification. If there
are any issues with compliancy, I will work to fix them.  This was no different.&lt;/p&gt;
&lt;p&gt;Was the decision to fix the Tab characters as a post-process a good one?  I am
not 100% sure, but I believe so.  While it may be taking extra work to get there,
it leaves the core parser and linter intact unless the line being processed
includes tab characters.&lt;/p&gt;
&lt;p&gt;But from a personal pride point of view, I want to complete it for my own
reasons.  And for me, that is good enough.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Making Progress with Tabs</title><link href="https://jackdewinter.github.io/2022/10/24/making-progress-with-tabs/" rel="alternate"></link><published>2022-10-24T00:00:00-07:00</published><updated>2022-10-24T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-10-24:/2022/10/24/making-progress-with-tabs/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/10/10/hitting-the-mark-with-tabs/"&gt;last article&lt;/a&gt;, I talked
about how I am making strides to get any remaining whitespace issues dealt with.
Namely, tab characters. In this week’s article, I will talk about the process I have made
in doing just that.&lt;/p&gt;
&lt;h2 id="before-we-start"&gt;Before We Start&lt;a class="headerlink" href="#before-we-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I apologize to any readers …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/10/10/hitting-the-mark-with-tabs/"&gt;last article&lt;/a&gt;, I talked
about how I am making strides to get any remaining whitespace issues dealt with.
Namely, tab characters. In this week’s article, I will talk about the process I have made
in doing just that.&lt;/p&gt;
&lt;h2 id="before-we-start"&gt;Before We Start&lt;a class="headerlink" href="#before-we-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I apologize to any readers out there, but I was unable to author an article last week.
Due to a small accident  and family commitments, I had some bad headaches and little
energy left after dealing with both of those things.  It does not happen too often,
but I just did not have any mental space to write anything publishable.  I hope that
I can do better this week!&lt;/p&gt;
&lt;h2 id="history-with-tabs"&gt;History With Tabs&lt;a class="headerlink" href="#history-with-tabs" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned in the last article, when I started with the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project a few years ago,
I needed to decide how to manage tab characters.  At the time, I thought
that the right decision was to deal with space characters instead of tab characters
and space characters.  Following that belief, I converted all tabs to the correct
number of tabs, following Markdown’s “tabs as tab stops” rule. However, looking back
at my project requirements, I decided that to be faithful to my requirements, I needed
to add tab character support back in.&lt;/p&gt;
&lt;p&gt;And despite having to take it easy for the better part of a week off due to my accident,
things are going ahead nicely.  As of last night, all elements have support for tab characters
except for lists, block quotes, and link reference definitions.  And while the progress
has not been steady, it continues forward at a good pace.&lt;/p&gt;
&lt;h2 id="taking-a-short-side-trip"&gt;Taking A Short Side Trip&lt;a class="headerlink" href="#taking-a-short-side-trip" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Last week I took a couple of days and tried out a “what if” scenario.
The question that I wanted to play out was whether I was
correct in fixing tab characters after parsing.  Insteadm what if I had started to
go through the code and expect the code to manage space characters and tab characters?
I wanted it to be more than a thought experiment.  I wanted to try it out and see
what the cost would be.&lt;/p&gt;
&lt;p&gt;While the first results were positive, the rest of the results went downhill quickly.  One thing
that I found was that the initial transformation brought to the parser was a clear standard
on the length of certain elements.  As the transformation was performed at the start
of the line, there was no need to track the number of characters that occurred before
the start of the line… it was always zero.  Since Markdown uses tab stops, knowing
the start position for interpreting a tab character is essential.  Having to track that
through multiple functions was just messy, and I got it wrong multiple times. That
was easily one headache that I dodged.&lt;/p&gt;
&lt;p&gt;Another thing that was an issue was interpreting tab stops on the fly.  Not to
complain too much, but it was painful.  Instead of seeing the correct number of space
characters from an algorithm that I knew was correct, I had to figure out the start
of the string each time.  If I was off by one, the length of the string would not
be correct.  And I realize that it may sound like whining but looking at two strings
with tabs in each end mentally trying to compare them was simply hard.  When going
through this experiment, I found that when I was looking at parts of the code, I was
focusing more on the tab expansions than the code itself.  It just felt off.&lt;/p&gt;
&lt;p&gt;And finally, perhaps from a biased viewpoint, my confidence was down as I was playing
out this “what if” scenario.  It can very well be that I have grown reliant on the
fact that the string &lt;code&gt;x\ty&lt;/code&gt; will get translated into &lt;code&gt;x   y&lt;/code&gt;, if it starts at the
beginning of the line. To me, it just looks cleaner.  And when I am verifying the
code or debugging the code, I want clean and easy to read. When I look at the
translation algorithm and the output from that algorithm, I have a tremendous amount
of confidence that I translated the tab characters properly.  When I looked at
the same types of scenarios in the debugger with an untranslated tab character,
my confidence was noticeably lower.&lt;/p&gt;
&lt;p&gt;Was it the right choice for everyone? Possibly not.  But as I am the maintainer
and developer for the project, what is important is that it was the right choice
for me.  And now I have that confidence that I made the right choice.&lt;/p&gt;
&lt;h2 id="translating-tabs-back"&gt;Translating Tabs Back&lt;a class="headerlink" href="#translating-tabs-back" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Except for Link Reference Definitions, all other Inline elements and
Leaf Block elements are done.  Some were a bit trickier than others, but they
are all done.  In all cases, that work involved matching up where each index
was in the “normal” line and matching it up to the same index in the “tabified”
line.  With those anchors in place, it was just a matter of replacing a part
of the normal line with the same part from the tabified line, and things we
done.&lt;/p&gt;
&lt;p&gt;It took a bit to translate each element, including extra test scenarios
for most elements, but it was worth it.&lt;/p&gt;
&lt;h2 id="what-happened-with-indented-code-blocks"&gt;What Happened With Indented Code Blocks?&lt;a class="headerlink" href="#what-happened-with-indented-code-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having completed Indented Code Blocks, I can say that their translation was only
a slight bit trickier than the other elements.  Nothing much to report there.
What I thought was going to be an issue with tab characters and Indented Code
Block elements was about housing them inside of containers.  But more
on that later.&lt;/p&gt;
&lt;h2 id="what-about-link-reference-definitions"&gt;What About Link Reference Definitions?&lt;a class="headerlink" href="#what-about-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The thing that I am going to work on starting tomorrow are Link Reference Definitions.  The
difficult part with these elements is their capability for rewinding.  As I
covered in other articles, a parser can only tell if a Link Reference Definition
is complete by one of two methods: a full Link Reference Definition is parsed
OR the next line is examined, not found to be a continuation, and then having
a rewind mechanism to manage rewinding the input.  While there are other ways
to manage that last method, they are not guaranteed to work and have their own
issues.  As painful as rewinding is, it is the most dependable.&lt;/p&gt;
&lt;p&gt;When I added the current Link Reference Definition support to the parser, I did not have to worry
about reverting to an original form of the string.  As such, I added
code to kind of handle it, but that code was not thoroughly tested. Well… it
is now going to get tested.  I know I need to place the tabified string in the
queue to get reprocessed, I am just not sure how I will carry that out. I
either need to adjust the normal string or have another queue to handle a
special tabified string.&lt;/p&gt;
&lt;p&gt;But as that is the first task for this week, I am not worried about it. Yet.&lt;/p&gt;
&lt;h2 id="what-about-lists-and-block-quotes"&gt;What About Lists and Block Quotes?&lt;a class="headerlink" href="#what-about-lists-and-block-quotes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is where the fun comes in.  As I showed in last week’s article,
changing tabs into spaces and back can be tricky in some situations.  From
last week, consider the Markdown snippets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;second&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tsecond&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From a translation to HTML and understand point of view, both snippets
are easy to parse.  In the first snippet, the tab expands to four characters of
prefix, effectively creating a triply nested Unordered List block, with a single
item having the text &lt;code&gt;third line&lt;/code&gt;.  The second snippet is similar but creates
a singly nested Unordered List with a single item having the text
&lt;code&gt;first line\nsecond line&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But there is more to see when examined from a tokenization point of view.  The tab that is translated
in the first snippet is translated to four space characters that are exclusively in the
list item’s prefix area.  While that might cause some issues spanning two List Blocks, let me table that observation.
The real problem appears when generating tokens for the second snippet. The tab
character is at the same column as in the first snippet, so it expands to four space
characters.&lt;/p&gt;
&lt;p&gt;The real question is how are those space characters distributed between the Unordered List
token of the owning list and the Text token containing the line’s text?&lt;/p&gt;
&lt;h2 id="working-out-the-kinks"&gt;Working Out The Kinks&lt;a class="headerlink" href="#working-out-the-kinks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Strangely, it took some experimentation with Indented Code Blocks to figure this out.&lt;/p&gt;
&lt;p&gt;Note, for simplicity’s sake, in the following snippets I am representing space characters as &lt;code&gt;\b&lt;/code&gt; and tab characters
as &lt;code&gt;\t&lt;/code&gt; in the following snippets. Otherwise, it would be hard to see the differences!&lt;/p&gt;
&lt;p&gt;Using the Babelmark tool, I submitted &lt;a href="https://babelmark.github.io/?text=%09%09foo"&gt;this snippet&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tfoo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and received back the following HTML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;\tfoo
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the GitHub Flavored Markdown specification, there is a stated principle referred
to as the &lt;a href="https://github.github.com/gfm/#principle-of-uniformity"&gt;principle of uniformity&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;principle of uniformity: if a chunk of text has a certain meaning, it will continue
to have the same meaning when put into a container block (such as a list item
or blockquote).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically, if we take our first snippet and place it within a container block, the
original block of text should retain its meaning.  Therefore, we can submit
&lt;a href="https://babelmark.github.io/?text=-+%09%09foo"&gt;this snippet&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tfoo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and observe its HTML output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;\b\bfoo
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Taking the container HTML code away, the principle is supported as the Indented
Code Block is still there, but with a slight variation.  That variation is that
the entire indent was translated into space characters, totally removing any trace
of the tab characters.&lt;/p&gt;
&lt;h2 id="what-is-going-on"&gt;What Is Going On?&lt;a class="headerlink" href="#what-is-going-on" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After doing my usual scribbling, here is what I believe is happening.  Because of its location
in column three, the first tab character is expanded to two characters and the second
tab character is expanded to four characters for a total of six characters.  Allowing
for four space characters to be used for the Indented Code Block, which leaves the
two space characters that are seen preceding the word &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I repeated this experiment with other elements, number of tabs, and number of spaces,
and that relationship seemed to always hold.  From this, the reasonable conclusion
is that to avoid any problems, any leading tab characters are always represented as
spaces.  This makes sense and this is backed up by experimental data.&lt;/p&gt;
&lt;p&gt;Why is this important?  Because it gives me a solid rule to follow when translating
the spaces back into tab characters.  And that helps me out when I need to come up
with an algorithm for how to tokenize the tabs.  I do not have that algorithm yet,
but after I deal with Link Reference Definitions, which is the next thing on my plate.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Hitting The Mark with Tabs</title><link href="https://jackdewinter.github.io/2022/10/10/hitting-the-mark-with-tabs/" rel="alternate"></link><published>2022-10-10T00:00:00-07:00</published><updated>2022-10-10T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-10-10:/2022/10/10/hitting-the-mark-with-tabs/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/Personal/keeing-focus.md"&gt;last article&lt;/a&gt;, I talked
about how I try my best to maintain focus on my various endeavors. In this
article, I talk about how I am making strides to get any remaining whitespace
issues dealt with.  Namely, tab characters.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When going through the initial requirements for …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/Personal/keeing-focus.md"&gt;last article&lt;/a&gt;, I talked
about how I try my best to maintain focus on my various endeavors. In this
article, I talk about how I am making strides to get any remaining whitespace
issues dealt with.  Namely, tab characters.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When going through the initial requirements for the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project
a couple of weeks ago in &lt;a href="https://jackdewinter.github.io/2022/09/26/thinking-about-direction/"&gt;that week’s article&lt;/a&gt;,
I was pleasantly surprised to find that I was closer to a final release than I thought
I was.  Specifically speaking, it was comforting to find I only have a little bit left
to do with respect to whitespace handling.  More specifically, there is only
a little bit of work left to do with the handling of tab characters as whitespace.&lt;/p&gt;
&lt;h2 id="tabs-are-evil-no-really"&gt;Tabs Are Evil… No, Really&lt;a class="headerlink" href="#tabs-are-evil-no-really" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just like many older software development professionals, I have a bit of a hate
relationship with the tab character.  It is nothing personal against the actual
character itself.  It is just that for the majority of my professional development life
I have had other developer imply that tab characters are evil.&lt;/p&gt;
&lt;p&gt;I think that feeling may come from “ye olde
&lt;a href="https://haacked.com/archive/2006/02/08/OnReligiousWarsinSoftware.aspx"&gt;religious wars&lt;/a&gt;” of years
past.  It was not uncommon in the 1990s and 2000s to hear conversations between
developers extolling the virtues of “tabs as 2 spaces” versus “tabs as 4 spaces”
versus “tabs as 8 spaces”.  They were always conversations that I put into the
category of conversations known as &lt;a href="https://en.wiktionary.org/wiki/bikeshedding"&gt;bike shedding&lt;/a&gt;.
They were mostly trivial conversations with little hard evidence.&lt;/p&gt;
&lt;p&gt;My point of view on concepts like software style have remained static over
the years.  I do not care much for any reasonable style or coding guidelines if
it is clearly documented.  Bonus points to any team that is using code analysis
to ensure that every commit follows those guidelines.  I just remember too many
“deep” conversations on teams about tabs and how they converted into spaces to
really care one way or the other.  And like most developers, I just stopped using
tab characters to avoid the noise of those conversations.&lt;/p&gt;
&lt;h2 id="markdown-takes-a-different-tact"&gt;Markdown Takes A Different Tact&lt;a class="headerlink" href="#markdown-takes-a-different-tact" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The people authoring the &lt;a href="https://github.github.com/gfm/#tabs"&gt;GitHub Flavored Markdown&lt;/a&gt;
specification had probably also had some of the same experiences I had, so they created
an entire section to detail how they want tabs to be handled.  And instead of taking
one of the approaches detailed in the last section, they changed it up a bit.  From
the specification:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tabs in lines are not expanded to spaces. However, in contexts where whitespace helps
to define block structure, tabs behave as if they were replaced by spaces with a tab
stop of 4 characters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, parts of that are somewhat vague, but they spelled out the important part: that
one tab character is a tab stop of four characters.&lt;/p&gt;
&lt;p&gt;What is a tab stop?  On old typewriters and word processors, there was the choice to
specify multiple locations on a given line that were destinations for the tab key.
When the tab key was pressed, the position on the line would move to the next place
that the tab key was told to stop.  Hence the name, tab stop.
When this functionality was moved into word processors, this same behavior was
replicated to allow people to seamlessly translate their typing skills between
typewriters and the word processors.  As some of the more popular applications
in the first personal computers involved creating documents, this was probably
a good direction to take.&lt;/p&gt;
&lt;p&gt;Hopefully not sounding too ancient, I remember taking typing classes on electronic
typewriters and loved that I was able to translate my typing skills to the new computers in
the computer lab.  While we used those computers to create programs during computer labs, we also
found out that it was easier to type our essays and other assignments those same computers.
When I used a typewriter to type those same essays, I always needed a healthy supply of
&lt;a href="https://en.wikipedia.org/wiki/Liquid_Paper"&gt;Liquid Paper&lt;/a&gt; on hand
to help correct all the mistakes I made.  Being able to use a computer to craft the
documents like I am doing with this article was a new concept… something that we
now take for granted.&lt;/p&gt;
&lt;p&gt;These days, tab stops are still in use.  When authoring this article, I tested out
the tab support with both Markdown files and Python files and learned that Visual
Studio Code (VSCode) uses tabs stops of four for both types of files.  To be honest, I hoped
that VSCode would support for Markdown files, but was not sure.  I was happily
surprised at the tab stop support for Python files.  From my own viewpoint, that
one observation gave the authors of the GitHub Flavored Markdown specification
extra credibility in their choice.  It was a still a pain to implement it, but
that was on me, not them.&lt;/p&gt;
&lt;h2 id="taking-a-short-cut"&gt;Taking A Short Cut&lt;a class="headerlink" href="#taking-a-short-cut" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now, at almost three years after I started writing PyMarkdown, I have a better
appreciation for the tab character and how it can be used creatively.  But when
I started writing the original implementation for PyMarkdown, having tab characters
being interpreted as a tab stop of four was a nuisance.  From my developer point
of view, anyone in their right mind would always use spaces instead of tabs.  It
was the quickest way to avoid the “tabs as…” holy wars after all.&lt;/p&gt;
&lt;p&gt;As such, when I added support for tabs to PyMarkdown I used a shortcut.  As I was
convinced that any “sane” person would shy away from tab characters, I wanted to
take the quickest path to implementing tab characters.  From my point of view, why
add support for something most people are not going to use?  As such, I added the
support at the highest level of the tokenizer to replace tabs characters with
the proper space characters.  All done and correct, right?&lt;/p&gt;
&lt;p&gt;Fast forward to the current day with more experience and a deeper understanding
of Markdown.  Some readers may question why I started talking about my days with
electric typewriters and word processors.  But from my new point of view, I believe
that thinking back to those days helped me understand why the specification has
support for tab characters as tab stops.&lt;/p&gt;
&lt;p&gt;That point of view is a simple one: replacing tabs with a constant number of space
characters is how a developer thinks, but it is not how people usually think when
writing documents.  When people open word processors, they expect that word processor
to support tab stops.  However, most people will not think about it in that way.
For the most part, if they use tabs in their documents, they will use those tabs to
line up columns of information.  If they need something fancy, they may try and
insert tables and play with column widths and titles.  But for something quite simple,
tab characters come in very handy.&lt;/p&gt;
&lt;p&gt;It was with that new viewpoint that I looked at the issues left to take care of
and decided that I needed to add proper tab support in to PyMarkdown.  The next
question was how to add it back in.&lt;/p&gt;
&lt;h2 id="balancing-alternatives"&gt;Balancing Alternatives&lt;a class="headerlink" href="#balancing-alternatives" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I had two choices on how to add tab characters support back in. The first was to
replace code that was currently working with code that also supported tab
characters.  The second choice was to do post-processing in select sections to convert
space characters back into the tab characters that spawned them.&lt;/p&gt;
&lt;p&gt;After back and forth on the pros and cons, I decided on the second approach.
While it is adding complexity to the project, I believe it was a valid
calculated risk that I needed to take.  If I take tab support out of the equation,
I am happy and confident with PyMarkdown as it stands.  I do find the odd issue
here and there, but that is normal with most projects.  From my point of view, I wanted
to add tab support back in as a solid feature, not a bug fix.  As such, adding extra
support in to properly translate space characters back to tab characters seemed like
the right approach.&lt;/p&gt;
&lt;p&gt;That approach is paying off well so far, except for Indented Code blocks,
I believe all the Leaf Block elements are taken care of.  As of the writing of this
article, I am currently working to flush out the paragraph support for handling
generic text that has tab characters.  Since elements such as autolinks
are invalid if they have any tab characters, they can present themselves as
paragraph text.  It just seemed like a clever idea to make sure those bases were
covered.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps&lt;a class="headerlink" href="#next-steps" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Based on what I was working on last night, I hope to have paragraphs wrapped up and
committed within the next couple of days.  That leaves Inline Elements, Indented Code
blocks, and Container Blocks that I need to work on.  I am not too worried about
Inline Elements, but I am concerned about the other two.  To properly capture the
tab character in Markdown that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;second&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is easy.  The tab character becomes four space characters to help it reach
the next tab stop. But this Markdown is a bit more nuanced:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tsecond&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The same character expansion occurs, but which of the two elements should “control”
the tab character.  The token for the list block or the text token for the list content?&lt;/p&gt;
&lt;p&gt;I am not sure at this point… but I am hoping to have an answer by next week.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Thinking About Direction</title><link href="https://jackdewinter.github.io/2022/09/26/thinking-about-direction/" rel="alternate"></link><published>2022-09-26T00:00:00-07:00</published><updated>2022-09-26T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-09-26:/2022/09/26/thinking-about-direction/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/09/19/debugging-the-story-continues/"&gt;last article&lt;/a&gt;, I talked the artform
called debugging. In this article, I am going to think aloud about the various
things that I am thinking about for the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="it-all-takes-planning"&gt;It All Takes Planning&lt;a class="headerlink" href="#it-all-takes-planning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project,
I just wanted to prove that I …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/09/19/debugging-the-story-continues/"&gt;last article&lt;/a&gt;, I talked the artform
called debugging. In this article, I am going to think aloud about the various
things that I am thinking about for the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="it-all-takes-planning"&gt;It All Takes Planning&lt;a class="headerlink" href="#it-all-takes-planning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project,
I just wanted to prove that I could write a parser in Python and have it been
decent.  While I have proven the first part, that I can write a parser in Python, I
am still struggling with whether I would call it a decent parser.  For me to
call it a decent parser means that I have thought out and implemented a variety of
things that I would say is essential to a parser.&lt;/p&gt;
&lt;h2 id="starting-with-the-specification-and-specification-test-cases"&gt;Starting With The Specification and Specification Test Cases&lt;a class="headerlink" href="#starting-with-the-specification-and-specification-test-cases" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For me, the start of any parser is having a good understanding of what it is that
I am trying to parse.  In the beginning, I do not need to understand the entire
specification, but I do need to have read the entire thing from the first line
to the last line.  Call me foolish, but until I have the one complete pass through
the specification, I do not believe I have an adequate picture to start with.&lt;/p&gt;
&lt;p&gt;I know I am not going to remember the entire specification.
I would be impressed by anyone who can remember the entire specification after
just one pass.  What I look for are those parts of the specification that I
can figure out will cause me issues. At the very least, I want to try and keep
those in mind for my designing of the parser components. If possible, I write down scenario
tests against the specification that I can use to properly test my parser.  But
to be honest, from a first pass, that is a nice-to-have, not a must have.&lt;/p&gt;
&lt;p&gt;For any Markdown parser, the golden specification is the
&lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown&lt;/a&gt; specification. As a
mature specification, it not only has the raw specification itself, but over six hundred
scenarios and their expected HTML output.  While many specifications have not
included this information in the past, this is starting to become a more frequent
occurrence.  If not in the document itself, those test cases appear in a companion document
and are being seen as the best way to concretely describe the specification. As a
bonus, there are some rudimentary scenarios that the parser is expected to manage.&lt;/p&gt;
&lt;p&gt;From a parser point of view, I believe that the PyMarkdown project has accomplished
that goal in spades.  With over five thousand scenario tests currently passing against the
project, I can confidently state that 99% of the scenario tests pass, and I am
getting those remaining tests passing.  To be clear, there are four tests dealing
with block quotes and lists starting in different columns, and that is on the near
future list of things to address.&lt;/p&gt;
&lt;h2 id="clear-goals-and-requirements"&gt;Clear Goals and Requirements&lt;a class="headerlink" href="#clear-goals-and-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having one or more clear goals are important before working on any project.
For the PyMarkdown project, the main goal was a simple one: to provide a framework
with which I can create rules that can evaluate Markdown and provide feedback on
its structure.  From there, the main requirements were developed.&lt;/p&gt;
&lt;p&gt;For those readers that do not want to read the entire article from
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;December 2019&lt;/a&gt;,
those requirements are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;must be able to see an accurate tokenization of the markdown document before translating to HTML&lt;/li&gt;
&lt;li&gt;all whitespace must be encoded in that token stream as-is&lt;/li&gt;
&lt;li&gt;initial tokenization for GitHub Flavored Markdown only, add others later&lt;/li&gt;
&lt;li&gt;must be able to provide a consistent lexical scan of the Markdown document from the command line&lt;/li&gt;
&lt;li&gt;extending the base linting rules should require very little effort&lt;/li&gt;
&lt;li&gt;written in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Coming up on three years since that article was written, it is fair to
look back and figure out how the project is meeting those requirements.&lt;/p&gt;
&lt;p&gt;From a project perspective, the good news is that the project itself has come a long
way in meeting those requirements.  Without reservation, I believe that
the accurate tokenization, GFM parsing, consistent tokenization, and written
in Python requirements have been solidly met.  And to be clear, I do mean without
reservation, not close to with a few reservations.  With the entire parser
written in Python and over five thousand scenario tests, there is no doubt in my mind that
it meets those requirements.&lt;/p&gt;
&lt;p&gt;With respect to the whitespace encoding requirement, the project is most of the
way there.  To finish things up, I just need to change the whitespace
tests that I recently wrote to properly look for tabs where tabs were specified.
It is not a big change, but it will finish the adherence to this requirement.&lt;/p&gt;
&lt;p&gt;That leaves the extending requirement, and it is an important enough requirement
that I have added a full section for that below.  Looking at how things are
so far, that comes out to the main goal being met, four of six requirements being
met, one of those requirements being within reach, and one to be talked about later.
Not bad.&lt;/p&gt;
&lt;h2 id="clean-separation-of-responsibilities"&gt;Clean Separation of Responsibilities&lt;a class="headerlink" href="#clean-separation-of-responsibilities" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Call it an old habit of mine, but I believe that one of my successes in
both the testing field and the development field is my strict regimen around keeping
a clear separation of responsibilities between various parts of a project.  Unless
there is no other way to accomplish it, I passionately believe that each section of a project
should be consistently separate from the others.
For the PyMarkdown project, I think I have made substantial progress is this area.  To be
blunt though, I probably crossed that line more often than I should have.  Sometimes
it was just more expedient to deal with it in that manner.  But I also know that I
usually pay for crossing that line later.&lt;/p&gt;
&lt;p&gt;There are good examples of where I have implemented clean separations
in the PyMarkdown project.  The first is the clear separation of the three stages of
parsing into three separate processors: the block processor, the coalesce processor,
and the inline processor.  The first processor takes care of any blocks and produces a token
stream of those container blocks and leaf blocks.  The second processor takes care of coalescing
any consecutive text tokens to allow the third processor to do the inline processing
without having to span text tokens.  Keeping each of those processors focused on
one main concept is one of the things that I believe made the parser work as well
as it has.&lt;/p&gt;
&lt;p&gt;Not everything is perfect though.  While the inline processing works well, and the
handling of leaf blocks works well, the handling of container blocks needs
a lot of work.  One of the reasons that I have invested time into writing more
scenario tests for the container blocks is that they need work.  And
once I get all those tests passing, I want to take the time to see if I can
break down the container handling and refactor it.  There are just too many little
fixes in it for my taste.&lt;/p&gt;
&lt;h2 id="extensibility"&gt;Extensibility&lt;a class="headerlink" href="#extensibility" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Extensibility is the one thing that is tricky to implement in a parser.  The rules
themselves are extensible by design, so I get some points there.  But when it comes
to the parser itself, there are glimpses of getting ready to extend the parser, but
no concrete steps.&lt;/p&gt;
&lt;p&gt;One reason for that is that adding something to a parser can often introduce
scenarios that were not thought of originally.  Let me use one of the feature
requests as an example.  One of the users wants to be able to have support for
Latex formulas and properly detecting any whitespace, like how normal emphasis
works.  This is required as normal Latex formulas can have arbitrary spacing and
formulas can use the &lt;code&gt;*&lt;/code&gt; character as part of the formula.&lt;/p&gt;
&lt;p&gt;But adding in support for Latex blocks come with questions that may be difficult to
answer.  Are there solid specifications for Latex Markdown blocks?  What are the
differences between those blocks and emphasis blocks or codespan blocks?  Would I
need to add new support code, or could I leverage existing code?  What are the
border cases that I need to deal with?
And those are only the questions that come up with Latex formulas themselves.  I
also must figure out if there are any interactions with other elements, and what
those interactions are.  &lt;/p&gt;
&lt;p&gt;Even before that starts, I need to take the time to extract the non-container
code for elements and make them more modular.  That is going to have its own
problems.  It is something I know I need to do, but I have put it off until I
can make sure that the existing code is very solid.  But that time is
just around the corner, so I need to get ready.&lt;/p&gt;
&lt;h2 id="quality"&gt;Quality&lt;a class="headerlink" href="#quality" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From a history of working on projects from a test and quality perspective, this is always
a concern of mine, even though I rarely state it explicitly.  It is just part of how I
work.  If I do not have near 95% plus test coverage, I need a good reason.  If I do not
have good user stories and scenarios, I take the time to research them.  It is just part
of my normal development process.&lt;/p&gt;
&lt;p&gt;One of the most important decisions on quality that I made is not to trust myself
with writing the best Python code possible.  Do not get me wrong, I am very decent
at writing Python code, but I would not categorize myself in the “best” category. That
is why I use tools like Pyroma, Flake8, PyLint, and Sourcery.Io to scan my code with
each commit.  Running these tools does not make my code perfect, but they
make my code better.  And that is good enough for me.&lt;/p&gt;
&lt;h2 id="where-does-that-leave-the-project"&gt;Where Does That Leave The Project?&lt;a class="headerlink" href="#where-does-that-leave-the-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let me recap where my thinking is so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clear specification and test cases. &lt;em&gt;Check&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Need to work on variable start position cases.&lt;/li&gt;
&lt;li&gt;Clear goal and clear requirements.  &lt;em&gt;Check&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Most of the requirements are already met, so getting the whitespace requirement completed is a priority.&lt;/li&gt;
&lt;li&gt;Separation of responsibilities. &lt;em&gt;Check&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Most of the code is in decent shape, with the container block processing being one of the outliers.&lt;/li&gt;
&lt;li&gt;It is “working”, but I want to take the time to make it cleaner.&lt;/li&gt;
&lt;li&gt;Extensibility. &lt;em&gt;Meh&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Plugins are extensible, but parser itself is not.&lt;/li&gt;
&lt;li&gt;Need to move common elements out into their own modules.&lt;/li&gt;
&lt;li&gt;Quality. &lt;em&gt;Check&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Continuous integration with checks, both locally and on GitHub.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be honest, when I started this article, I was concerned that I was going to
uncover more things to be done than I have just listed.  That is a relief.
But at the same time, it is a good working list that will help me move the project
forward!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Inspiration Comes At Weird Moments In Our Life</title><link href="https://jackdewinter.github.io/2022/09/06/inspiration-comes-at-weird-moments-in-our-life/" rel="alternate"></link><published>2022-09-06T00:00:00-07:00</published><updated>2022-09-06T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-09-06:/2022/09/06/inspiration-comes-at-weird-moments-in-our-life/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/29/tackling-whitespace/"&gt;last article&lt;/a&gt;, I talked about
my work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project to solidify
how it manages whitespace.  In this article, I talk about how inspiration struck me
for this article… and when.&lt;/p&gt;
&lt;h2 id="to-get-things-started"&gt;To Get Things Started&lt;a class="headerlink" href="#to-get-things-started" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First off, I want to be honest with any readers on …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/29/tackling-whitespace/"&gt;last article&lt;/a&gt;, I talked about
my work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project to solidify
how it manages whitespace.  In this article, I talk about how inspiration struck me
for this article… and when.&lt;/p&gt;
&lt;h2 id="to-get-things-started"&gt;To Get Things Started&lt;a class="headerlink" href="#to-get-things-started" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First off, I want to be honest with any readers on the timing of this article.
It is Tuesday afternoon and I had almost given up on authoring an article this
week.  At this point in most weeks, I have either finished the article and
it is posted, or I am giving it a “24 hour” no-read period to make sure it still
reads like I want it to.  Basically, it is either posted or within two or three
small edits from being posted.  Call me old fashioned, but I always feel better
knowing that I can go back to a document 24 hours after I have finished writing it,
still having it sound the way I wanted it to be.&lt;/p&gt;
&lt;p&gt;This week was different.  With Labor Day here in North America, I spent part of
the day doing yard work and part of the day working on the whitespace handling
that I mentioned last week.  By Monday evening I am usually polishing the article
up if it is not already finished.  But this week I had nothing unique that I
wanted to say.  Sure, I could have put together a low-quality article that said what I
was doing, but it would have been a status report more than an article.&lt;/p&gt;
&lt;p&gt;So, it was interesting to me that I got the inspiration for this article when I sat
down to do some more work on Tuesday evening.  Inspiration is weird.&lt;/p&gt;
&lt;h2 id="the-journey-here"&gt;The Journey Here&lt;a class="headerlink" href="#the-journey-here" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To understand the inspiration, I need to explain how I got there.  The first
part is the easy part: hard work.  In the last week, I have resolved most of
the whitespace issues that I documented prior to last week.  The first
skipped test and the skipped test with tabs and code spans are the only two skipped tests that are
left to fix.  Through hard work and imagination, I managed to crack
through and correct the other thirty-one scenario tests and get them working.&lt;/p&gt;
&lt;p&gt;For the most part, that hard work was correcting one thing or another. A good
example of that was coming up with better names for the various helper functions
that I used to extract whitespace.  To be blunt, my naming sucked.  Granted,
it sucked after learning more about the three types of whitespace, but it still
sucked.  Instead of a generic &lt;code&gt;whitespace&lt;/code&gt; in function names, I created variants
of those functions that used &lt;code&gt;space&lt;/code&gt;, &lt;code&gt;ascii_whitespace&lt;/code&gt;, or &lt;code&gt;unicode_whitespace&lt;/code&gt;
properly.  That took a while to carry out, but it felt good to have those functions
with names that reflected my new understanding.  And as it felt like I was changing
the entire code base, I also refactored a handfull of large functions while I was there. “Always
leave an area better than when you found it” is a good motto of mine.&lt;/p&gt;
&lt;p&gt;To that extent, I just bore down and started working through each of the
thirty-three skipped scenarios, from the bottom to the top.  Why? Because I did
not want to get bored, and I figured starting from the bottom would help me not get bored. Basically,
for no reason other than to do something different.  After all, a list of thirty-three
failed tests is the same to me whether I start at the bottom of the top: they all
need to be fixed.&lt;/p&gt;
&lt;p&gt;For the most part, the last thirty (or first thirty, depending on viewpoint) scenario
tests were relatively easy to fix.  In some cases, I had skipped the test because
I had “thought” it might be bad.  In those cases, I just made sure to verify the
test data and everything worked properly.  There were other cases where I had collected
the expected output HTML improperly, and I just went ahead and fixed those.&lt;/p&gt;
&lt;p&gt;That left the significant issues for me to fix.  The next batch of issues that
I dealt with were dealing with removing whitespace from the start and end of
paragraphs.  Originally, I was removing only &lt;code&gt;spaces&lt;/code&gt;, but the
&lt;a href="https://github.github.com/gfm/"&gt;specification&lt;/a&gt; clearly says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The paragraph’s raw content is formed by concatenating the lines and removing initial and final whitespace.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That took a little bit of figuring out on how to resolve it, but I was able to
resolve it with a minimal amount of code changing.  That was a good find.&lt;/p&gt;
&lt;p&gt;The next issue that I tackled was properly dealing with whitespace at the end of
the end of a fenced code block.  While I was producing the right HTML, I was
not storing that whitespace in the end token.  As a result, when I tried to
rehydrate the Markdown in function &lt;code&gt;test_whitespaces_fenced_code_closed_with_spaces_after&lt;/code&gt;,
there was no space to rehydrate with.  That was a bit more of a chore, requiring
me to add a new field to the end fenced code block token to store that whitespace.
The downside to that was that there was already an optional field at the end of
that token, therefore it made more sense to add it before the serialization of that optional
field.  This affected every end fenced code block token in the scenario tests,
but it was a quick search-and-replace to fix them all. Even so, let me just say
I stopped counting the instances after the first fifty and leave it at that.&lt;/p&gt;
&lt;p&gt;Having completed dealing with the issue of bad whitespace storage in the end
fenced code block token, I thought it was only fitting to look at a similar issue
with not properly stripping whitespace at the end of the fenced code block’s
&lt;code&gt;info string&lt;/code&gt; construct.  Like my quote for paragraphs is the quote for
info strings:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The line with the opening code fence may optionally contain some text following
the code fence; this is trimmed of leading and trailing whitespace and called the info string.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this instance, the start of the info string element was being trimmed properly,
but the end of that same element was only handling &lt;code&gt;spaces&lt;/code&gt; and not &lt;code&gt;whitespace&lt;/code&gt;.
Most of the work there was just handling the extra whitespace characters, but it
did take some time to work out.&lt;/p&gt;
&lt;p&gt;Basically, up to this point everything I did to fix those issues required some
thinking or some changes, but nothing major.  Just me applying solid debugging practices
to every test, putting in the time and getting it working.  By far, the
costliest fix was having to do the search-and-replace for the end fenced code block token,
and that was only tedious, not difficult.  But that would change on Monday.&lt;/p&gt;
&lt;h2 id="and-then-came-monday"&gt;And Then Came Monday&lt;a class="headerlink" href="#and-then-came-monday" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that everyone is caught up, that is when Monday started.  At the start of
Monday, I had three scenario tests that I needed to get working.  One dealt with
properly recognizing a hard break, one was properly handing spaces inside of a
code span, and the last was very first scenario test in the file, the one I have
not even looked at yet.&lt;/p&gt;
&lt;p&gt;This was the place that I needed any inspiration I could find.  This was an interesting problem
to solve and not an easy one.  To make things easier for the project, I replaced any tab characters with the proper
count of space characters.  The downside to approach was that the parser loses any context of
where the original tab characters were.  I knew I did not have an idea on how to
fix it, hence I decided to do something else for a while. Enter yardwork.&lt;/p&gt;
&lt;p&gt;It might sound counter-intuitive, but I find the best way to solve problems and
get inspiration is to do something that is not connected to the problem you are
trying to solve.  In this case, it was a section of our yard that I decided to
not weed, only to change my mind later.  Just freely thinking about things and
staring out into the blue sky helped me reset my mind.  That and clearing about
fifty square feet of backyard from weeds and filling up our yard waste bin to the
top.&lt;/p&gt;
&lt;p&gt;When I came inside, I looked at the problem again and came up with a solution
almost immediately.  I knew that the first thing that I needed to do was to pass the original
string to the lower levels of the parser, to allow the parser tell what the original
whitespace was.  That was easy enough on its own, but it was not enough.  That
change enabled me to properly deal with container tokens and leaf tokens, but
not the inline tokens.  For those tokens, I quickly figured out that I needed to add an optional
field in the text token for a &lt;code&gt;tabified_text&lt;/code&gt; field that would only be populated
for original lines that had tab characters in them.&lt;/p&gt;
&lt;p&gt;As a proof of concept, I worked on the hard break issue and got it working properly
within a couple of hours.  To be fair, most of that time was getting the &lt;code&gt;tabified_text&lt;/code&gt; field
working properly.  Once that was done, I looked back at the specification where
it says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A line break (not in a code span or HTML tag) that is preceded by two or more spaces
and does not occur at the end of a block is parsed as a hard line break&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But in the scenario test where a line in a paragraph ended with two tab characters,
the parser rightfully saw the more than two space characters and decided that there
should be a hard break.  With the new &lt;code&gt;tabified_text&lt;/code&gt; field, I was able to change
the parser to notice that the line did not end with two space characters, returning
the proper HTML.  Once I was inspired to put the right data in the text token,
the rest of the solution almost wrote itself.&lt;/p&gt;
&lt;h2 id="and-then-it-hit-me"&gt;And Then It Hit Me&lt;a class="headerlink" href="#and-then-it-hit-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once again, inspiration comes at weird moments in our life. Having given up on
authoring an article this week, I finished some work downstairs and was taking a quick
shower before starting work on the project for the evening.  As per my routine, I
mentally went over what I did yesterday and what I planned to do today. Just my
usual routine.&lt;/p&gt;
&lt;p&gt;And then a weird thought came into my head.  Instead of using the same backwards
tab lookup concept to fix one or two small issues, what if I used the same approach
to fix all the tab issues?&lt;/p&gt;
&lt;p&gt;To be clear, after the raw line is passed into the Container Block Processor to
look for blocks, one of the first things that is done is to translate the line
into a detabified format.  From that point on, the line information is passed
without any space characters.  But with the original string now available, other
options opened.  It was then that the ideas started flowing.&lt;/p&gt;
&lt;p&gt;The first one was a simple one: what if I applied the same solution to other
elements?  If I had the original line within reach, I should be able to
pull match things up and figure out which space characters belonged to each tab.&lt;/p&gt;
&lt;p&gt;The second idea was a more radical one.  What if I specifically only looked at
any leading whitespace and translated any tabs in that leading whitespace to
space characters.  For the most part, the translated tab characters are only
beneficial for indentation purposes, so it might work.&lt;/p&gt;
&lt;h2 id="where-to-go-from-here"&gt;Where To Go From Here?&lt;a class="headerlink" href="#where-to-go-from-here" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be honest, I am not sure which choice I am going to take.  But that is the
beauty of inspiration!  Not only do I have one possible solution, but that
solution inspired me to think of the other solution.  And not only do I have
two possibly viable solutions to my tab issues, but I had good inspiration for an
article!&lt;/p&gt;
&lt;p&gt;For me, the bonus is that even in my fifties, I am finding new ways of exploring
and analyzing that I previously thought were dead ends.  This is one of the reasons
that I am starting to cultivate other hobbies that deal less and less with computers,
video, and audio and rooting myself more in the real world.  Not only is it better
for me, but it allows me to be inspired more often.  And that is always a good thing!
After all, you never know what weird thought and weird moments in your life will
inspire you!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Tackling Whitespace</title><link href="https://jackdewinter.github.io/2022/08/29/tackling-whitespace/" rel="alternate"></link><published>2022-08-29T00:00:00-07:00</published><updated>2022-08-29T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-08-29:/2022/08/29/tackling-whitespace/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/22/figuring-out-the-best-course-of-action/"&gt;last article&lt;/a&gt;, I talked about
my continuing work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project,
and how I evaluated the adding of new features to the project. In this article,
I talk about going back and ensuring that one of the foundations of any word-based parser
is solid: whitespace handling …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/22/figuring-out-the-best-course-of-action/"&gt;last article&lt;/a&gt;, I talked about
my continuing work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project,
and how I evaluated the adding of new features to the project. In this article,
I talk about going back and ensuring that one of the foundations of any word-based parser
is solid: whitespace handling.&lt;/p&gt;
&lt;h2 id="it-all-starts-with-whitespace"&gt;It All Starts With Whitespace&lt;a class="headerlink" href="#it-all-starts-with-whitespace" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my experience writing over ten different parsing engines over the years, the
one aspect that does not get enough attention is the definition of whitespace
and how it applies to the parser.  For code parsers, whitespace is often seen as
unimportant and is seen as space-filler between the “real” focus of the language:
the keywords.  Even Python, with its indent-based semantics, is not far from that
appraisal.&lt;/p&gt;
&lt;p&gt;But when translating from one language or format to another, whitespace can play
a key role in deciding how something is interpreted.  That is how things are
structured with Markdown, specifically &lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavoured Markdown&lt;/a&gt;
or GFM.  As one of the main goals of Markdown is to allow people to author documents
in a near-authentic format, adding any unnecessary verbiage or formatting was frowned
up.  Specifically, the &lt;a href="https://github.github.com/gfm/#what-is-markdown-"&gt;GFM states&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The overriding design goal for Markdown’s formatting syntax is to make it as readable
as possible. The idea is that a Markdown-formatted document should be publishable as-is,
as plain text, without looking like it’s been marked up with tags or formatting instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To preserve that readability, whitespace is used creatively in Markdown.  A good
example of this is the Indented Code Block.  This is a section of the document,
often computer related code, which needs to be passed unaltered to the reader. As the
name suggests, each line in this code block is preceded by an indent of at least
four spaces.  While it does not have the language naming capability of its sibling
the Fenced Code Block, the Indented Code Block supplies the same code block
experience without negatively affecting the readability.&lt;/p&gt;
&lt;p&gt;But support different experiences in different situations, the use of whitespace
must be broken down a bit.&lt;/p&gt;
&lt;h2 id="whitespace-and-markdown"&gt;Whitespace and Markdown&lt;a class="headerlink" href="#whitespace-and-markdown" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To keep things simple, Markdown provides for three types of whitespace.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.github.com/gfm/#space"&gt;space character&lt;/a&gt; is written as &lt;code&gt;U+0020&lt;/code&gt;
or &lt;code&gt;\u0020&lt;/code&gt; depending on the format.  In many of the cases where
a space is allowed, a &lt;a href="https://github.github.com/gfm/#tabs"&gt;tab character&lt;/a&gt; (&lt;code&gt;\t&lt;/code&gt; or &lt;code&gt;\u0009&lt;/code&gt;)
is allowed and is treated as up to four spaces as if the tab character was a tab stop.  The
fun part there is that most developers think that the tab character is unilaterally
expanded to four spaces, instead of interpreting it as a tab stop.  Therefore,
when reading the specification, any reference to &lt;code&gt;spaces&lt;/code&gt; means a specified number
of space characters or tab characters.&lt;/p&gt;
&lt;p&gt;Expanding from that simple definition of spaces is the definition for
&lt;a href="https://github.github.com/gfm/#whitespace-character"&gt;whitespace characters&lt;/a&gt;.  This
definition includes both the space character and the tab character but adds the
newline character (&lt;code&gt;\n&lt;/code&gt; or &lt;code&gt;\u000a&lt;/code&gt;), line tabulation character (&lt;code&gt;\u000b&lt;/code&gt;),
form feed character (&lt;code&gt;\f&lt;/code&gt; or &lt;code&gt;\u000c&lt;/code&gt;), and carriage return character (&lt;code&gt;\r&lt;/code&gt; or &lt;code&gt;\u000d&lt;/code&gt;).
Basically, what this does is to allow for a whitespace construct that includes any
character that is typically used to separate words, lines or paragraphs.&lt;/p&gt;
&lt;p&gt;Finally, there is the &lt;a href="https://github.github.com/gfm/#unicode-whitespace-character"&gt;Unicode whitespace character&lt;/a&gt;.
This is a more expansive version of the whitespace character, adding all the
characters from the Unicode &lt;code&gt;Zs&lt;/code&gt; and subtracting the line tabulation character.
While I am clear on &lt;a href="https://stackoverflow.com/questions/58421027/what-is-the-use-for-control-characters-in-string-printable#"&gt;the prior use&lt;/a&gt;
of the line tabulation character, I am less clear on why it has fallen out of
use.  My best guess is that with modern systems, the concept of scrolling down
to a given line is outdated, and hence its inclusion into whitespace is less
important than it once was.  But as it is in the specification, I follow it!&lt;/p&gt;
&lt;p&gt;Getting these definitions clear in my head was important to me.  If I am going
to increase my confidence that I have the right type of whitespace selected for
a given element, I need to know what those whitespace types are.&lt;/p&gt;
&lt;p&gt;And before anyone asks… no, this is not glorious work.  But this is necessary work.
The items in the whitespace section have been on the issues list for almost as long
as the project has been around.  I need to make sure that I have a clear
implementation of the whitespace handling for the project.  Not for any sense of ego
or anything like that, but to make sure it is right for the users.  I want that
confidence that I implemented the whitespace handling correctly.&lt;/p&gt;
&lt;h2 id="issue-456-cleaning-up-whitespace"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/456"&gt;Issue 456&lt;/a&gt; - Cleaning Up Whitespace&lt;a class="headerlink" href="#issue-456-cleaning-up-whitespace" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was originally coding the parser behind PyMarkdown, I did not understand
these distinct types of whitespace as I do now.  To bring my understanding more
in line with the specification, I have made minor changes to the way the parser
handles whitespace over the last two years.  But in the back of my mind, I was always
concerned that I missed something.  Hence, there was a section in the original
&lt;code&gt;issues.md&lt;/code&gt; file that dealt with whitespace and correctness.  Having taken a quick
look at that section again, I thought it was an opportune time to finally resolve any confidence
issues I had with whitespace.&lt;/p&gt;
&lt;p&gt;Opening a new issue, I decided to take a muti-task approach to solving any
outstanding issues.  The first part of that was making sure that I had a clear
understanding of what the three distinct types of whitespace were.  Once that
was taken care of, I carefully went through the specification and created a list
in the issue’s ticket, detailing each element and the types of whitespaces contained
within that element.&lt;/p&gt;
&lt;p&gt;The results of that list were interesting: there were four types of whitespace
involved.  The most prevalent whitespace type was the &lt;em&gt;spaces&lt;/em&gt; type, which seems
to be the default whitespace type, appearing in ten elements.  From there, the
&lt;em&gt;whitespaces&lt;/em&gt; type was the next most popular, appearing in six of the elements.
In a tie for last are the whitespace type used in link labels and the whitespace
type used in emphasis.  The emphasis type is the &lt;em&gt;Unicode whitespace&lt;/em&gt; type and
is very expansive on what it includes.&lt;/p&gt;
&lt;p&gt;The new type is the &lt;em&gt;Unicode case fold&lt;/em&gt; used to compare link labels with a matching
Link Reference Definition element.  The best description that I found is
&lt;a href="https://github.com/arodland/Unicode-CaseFold#what-is-case-folding"&gt;in this project&lt;/a&gt;
and basically walks through the answer to the question: how to do a case insensitive
match with a full Unicode codeset.  While I could try and describe the folding
process more, I believe the article does a much better job of explaining it and
would suggest any readers check that article out if they want more information.&lt;/p&gt;
&lt;h2 id="creating-the-scenario-tests"&gt;Creating The Scenario Tests&lt;a class="headerlink" href="#creating-the-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the list compiled, I started the process of adding a new set of scenario test
cases to the project.  As I am a big proponent of Test-Driven Development, it was
imperative that I implemented the tests first so I could understand the scope
of what I needed to deal with. As I have detailed in earlier articles, this is not a fun
process, but a necessary one.  Over three days, I added 166 new scenario tests to
the project, all dealing with testing how whitespace is handled for each of
the elements in the list.  As emphasis is the only element to use the Unicode
whitespace type, and I want to test Unicode punctuation support at the same time,
I left emphasis scenario tests out of that list for now.&lt;/p&gt;
&lt;p&gt;It was a brutal process, but I was used to it (somewhat) by now.  Working through the list,
I copied a series of tests from the series before it, changed the function name and
the function description, and changed the internals.  Then the process was a
simple one: change the Markdown sample to demonstrate the scenario, verify with
Babelmark that &lt;a href="https://commonmark.org/"&gt;CommonMark&lt;/a&gt; produces the same HTML results
that I calculated, and then run the tests themselves.  With the test output, I then
verified that the HTML output matched CommonMark and that the generated PyMarkdown
tokens looked correct.  Lather rinse repeat.  Many times.&lt;/p&gt;
&lt;h2 id="more-work-yet-to-come"&gt;More Work Yet To Come&lt;a class="headerlink" href="#more-work-yet-to-come" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am done generating the 166 new scenario tests.  Along the way, I noticed that
33 of those scenario tests were not functioning properly, so I marked them as
skipped.  My plan for this week is to start attacking that list and see how many
of the scenario tests I can get working by the end of the weekend.  Since it
is the Labor Day holiday weekend, I am going to take it somewhat easy, but I
still want to make significant progress on this task.&lt;/p&gt;
&lt;p&gt;On one hand, the items have lasted almost two years without any progress, so
what is another week.  But that is not good enough for me!  Now that I have an
idea of the work involved,  I want to solve any issues and finally put whitespace issues to
rest.  Stay tuned for the progress!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Figuring Out The Best Course of Action</title><link href="https://jackdewinter.github.io/2022/08/22/figuring-out-the-best-course-of-action/" rel="alternate"></link><published>2022-08-22T00:00:00-07:00</published><updated>2022-08-22T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-08-22:/2022/08/22/figuring-out-the-best-course-of-action/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/15/dealing-with-long-standing-issues/"&gt;last article&lt;/a&gt;, I talked
my continuing work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project,
aiming to get it closer to a solid release.  In this article,
I talk about my thoughts around adding new features to the project.&lt;/p&gt;
&lt;h2 id="adding-features-that-make-sense"&gt;Adding Features That Make Sense&lt;a class="headerlink" href="#adding-features-that-make-sense" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Usually, most new features make sense.  Adding …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/15/dealing-with-long-standing-issues/"&gt;last article&lt;/a&gt;, I talked
my continuing work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project,
aiming to get it closer to a solid release.  In this article,
I talk about my thoughts around adding new features to the project.&lt;/p&gt;
&lt;h2 id="adding-features-that-make-sense"&gt;Adding Features That Make Sense&lt;a class="headerlink" href="#adding-features-that-make-sense" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Usually, most new features make sense.  Adding support to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project to scan for other
extensions besides &lt;code&gt;.md&lt;/code&gt;, that was an easy decision to make.  Adding support for
reading from standard input, a bit more of a nuanced decision, but still a relatively
easy decision to make.&lt;/p&gt;
&lt;p&gt;Then there was the decision to fix a long-standing issue, &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/330"&gt;issue 330&lt;/a&gt;.
That I wanted to fix this was obvious to me, but until recently, the cost of fixing
that issue always outweighed the cost.  To make things easier in the initial stages of
development, I added a couple of &lt;code&gt;replace("\\", "/")&lt;/code&gt; statements in the file scanning
code to allow for Windows backslash separators to be treated as the Posix slash
separator.  Why?  Because then the output always dealt with slashes, regardless of the
operating system involved.  Therefore, the test output always used slashes.&lt;/p&gt;
&lt;p&gt;But after adding the support for standard input, it just felt wrong to leave those
replacement statements in the code.  But paying the cost of fixing that issue was not going to be easy.
Properly fixing the source code for that issue took thirty minutes including
rudimentary testing.  After a quick run of all tests, the impact of fixing the tests was clear: over
450 scenario tests were failing because of that change.  Digging in a bit more, that
was only the failure impact.  If I wanted to do things properly, any of the tests for
rules plugins needed to be changed to use proper pathing instead of the
Posix pathing.  I believe when I sketched things out, I took a guess that over
700 scenario tests would need to change.&lt;/p&gt;
&lt;p&gt;That is not a small number, it is roughly fifteen percent of the scenario tests.
In each test, I would need to change the path of the file to scan from something
like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;source_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"test/resources/rules/md007/some_file_to_scan.md"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;source_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"resources"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"md007"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"some_file_to_scan.md"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;adding that at the top of the scenario test if it was not already there.
With that change done, I then needed to look for any instances of the first
string in the rest of the scenario tests, replacing it with either &lt;code&gt;source_path&lt;/code&gt;
or &lt;code&gt;{source_path}&lt;/code&gt;, depending on if it was already in a string or not.&lt;/p&gt;
&lt;p&gt;But, when I weighed everything out, it was worth it.  This was something that
I had put off for long enough, and the increase in quality was worth the cost
to me. Granted, I thought I could make the transformation in ten hours, but it
was still worth the cost after eighteen hours of changes.  Each change
manual.  It was not fun, but it was a good change.&lt;/p&gt;
&lt;p&gt;The next change was going to be different.  It was going to require deep
thinking on my part.&lt;/p&gt;
&lt;h2 id="sometimes-the-decision-is-not-an-easy-one"&gt;Sometimes, The Decision Is Not An Easy One&lt;a class="headerlink" href="#sometimes-the-decision-is-not-an-easy-one" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned in the last article, one of the users reached out with
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/382"&gt;Issue 382&lt;/a&gt; and asked if
can add support for scanning Markdown in Jupyter notebooks.  Needing to
think things over a bit, I added the support for processing standard input
as it was a good feature and I thought I might need it for this new feature.&lt;/p&gt;
&lt;p&gt;But the big question in my mind was: was this actually a new feature?  Not that
someone could not use this functionality, but was it a feature of PyMarkdown?
Or was it a separate utility? This was not an easy question for me to answer.  I
could see both side of this solution, and in mind, they were balanced almost
equally.&lt;/p&gt;
&lt;p&gt;On the side of adding this support as a PyMarkdown feature, there were two
good points to support it.  The first of those points was that it fit in with the main goal
of the project: to provide a solid Markdown scanner.  It just so happened that
every Markdown sample that I have seen up to this point was either the entire
contents of a file or the entire contents of the standard input.  In my line
of work, which is what we call an implementation detail.  The second of these
points was the ease of use of the scanner.  Programmatically, I could see connecting
the various file types to “input filters”, selecting the correct filter based
on the provide input.  I had done variations on that for extensions and rules
plugins, so would one more plugin type hurt?&lt;/p&gt;
&lt;p&gt;The opposing side was a bit more nuanced.  Depending on how I read the main
goals of the PyMarkdown project, the target could be seen in one of two ways.&lt;br/&gt;
Going all the way back to an article I wrote on &lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;2019 Dec 08&lt;/a&gt;,
there is one line that summarizes this intent:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;must be able to provide a consistent lexical scan of the Markdown document from the command line&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I take that statement literally, then the scan should be dealing with documents, not
smaller units of text.  Of course, an argument could be made that any text “blob” is a
document, but I feel that it is just bending words to fit a scenario, and not
honoring the intent.  Throughout the PyMarkdown project, files are referenced
as a proxy for documents, instead of using terms like file fragments.&lt;/p&gt;
&lt;p&gt;Less nuanced and more pronounced is my sense that including this kind of
support into the PyMarkdown project will make the project too big.  More precisely,
I feel that expanding the scope of the project to include the concept of
“input filters” is not called for.  From a cost-benefit analysis, the cost of
supporting another plugin interface, or even a hard-wired interface, does not
match the perceived benefit.  At least not to me.&lt;/p&gt;
&lt;h2 id="and-the-decision-is"&gt;And The Decision Is…&lt;a class="headerlink" href="#and-the-decision-is" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, after thinking about it and weighing the pros and cons of this support, I
decided to support these features, but in their own project.  That new project will
take care of doing the necessary management to convert the Jupyter notebook
Markdown fragments into a scannable form for PyMarkdown to handle.  To that end,
I will need to enhance the main PyMarkdown module, but I believe those enhancements
will be minor.&lt;/p&gt;
&lt;p&gt;And after worrying about a satisfactory solution for this issue for a couple of weeks, I
am pleased with my decision.  I feel that this will provide a template for any other
such features in the future, allowing me to keep a steady handle on the PyMarkdown
project.  But at the same time, it will allow me to grow the project family while
meeting the needs of the users.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Dealing With Long Standing Issues</title><link href="https://jackdewinter.github.io/2022/08/15/dealing-with-long-standing-issues/" rel="alternate"></link><published>2022-08-15T00:00:00-07:00</published><updated>2022-08-15T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-08-15:/2022/08/15/dealing-with-long-standing-issues/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/08/dealing-with-the-ups-and-downs/"&gt;last article&lt;/a&gt;, I talked
about how my personal life is encountering issues that I need to take
extra time to deal with. This week, I am talk about the continuing work on
the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project to get it
closer to a solid release.&lt;/p&gt;
&lt;h2 id="things-just-take-longer"&gt;Things Just Take Longer …&lt;/h2&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/08/dealing-with-the-ups-and-downs/"&gt;last article&lt;/a&gt;, I talked
about how my personal life is encountering issues that I need to take
extra time to deal with. This week, I am talk about the continuing work on
the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project to get it
closer to a solid release.&lt;/p&gt;
&lt;h2 id="things-just-take-longer"&gt;Things Just Take Longer&lt;a class="headerlink" href="#things-just-take-longer" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With all the easy items out of the way, the items that I do pick up seem to take
more time.  But when I think about that, it does make sense.  There is more
experimentation needed, more debugging needed, and often a lot more
thinking about the problem is needed.  And while I wish I could get through to
the finished stage without as much “experimental failure”, I know that it is part
of the process, and just comes with the territory.&lt;/p&gt;
&lt;h2 id="issue-419-empty-space-causes-failure"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/419"&gt;Issue 419&lt;/a&gt; - Empty Space Causes Failure&lt;a class="headerlink" href="#issue-419-empty-space-causes-failure" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Okay, maybe a better title would be helpful.  But honestly, it was hard to try and
summarize it into four words or less.  This was an issue that I found when I was doing
experimentation with the last batch of nested container tests.  Just for laughs,
I added an extra space after an empty list start (&lt;code&gt;1.&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; on its own line) expecting
everything to be fine.  It was not, hence, the issue.&lt;/p&gt;
&lt;p&gt;To start with, I was having a bit of an issue visualizing the code for handling leaf
nodes, which is what I originally thought the problem was.  To help myself, I decided
to split the paragraph handling functions out into their own module, since I have been
thinking about doing that for a while.  Did not help me solve the issue, but it was
another small thing off the list.&lt;/p&gt;
&lt;p&gt;After that I went back and forth between the list processor and the leaf processor,
trying to figure out where the issue was.  I spent a couple of hours
on one, document for myself what I found during those hours, and revert the changes for the next
day.  A couple of iterations into this, I found something interesting.  I had been
convinced that it was not the leaf processing of the paragraphs, but I was starting
to doubt that.  It was just the way the variables were changing that lead me to
double check my assumptions.  And behold, it was one slight change to the calling
of the &lt;code&gt;parser_state.close_open_blocks_fn&lt;/code&gt; function within the &lt;code&gt;__handle_paragraph_prep&lt;/code&gt;
function to set the &lt;code&gt;include_block_quotes&lt;/code&gt; parameter to &lt;code&gt;True&lt;/code&gt;.  And it worked.&lt;/p&gt;
&lt;p&gt;Hrm.  For those who may not be aware, when I do something I consider stupid, I say
something like “hrm” which is effectively me saying the word “hum” with my mouth
closed.  It is my way of asking myself “why did I not see that before?”
In this case, when I moved the paragraph code over, I did some checks to see if it
could be that code, and determined the answer was no.  Instead of including it
in the code paths that I reverified, I assumed it was good and left it out.
As I said at the start of the paragraph, hrm.&lt;/p&gt;
&lt;h2 id="issue-412-double-check-your-results"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/412"&gt;Issue 412&lt;/a&gt; - Double Check Your Results&lt;a class="headerlink" href="#issue-412-double-check-your-results" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having logged this issue while doing the previous work on the nested containers,
I had just filed this issue because I thought there may be a problem.  To be blunt,
during that work, I was happy to log issues that may be a problem after only
doing a small amount of work to prove them as probably broken.&lt;/p&gt;
&lt;p&gt;Specifically, this issue dealt with pairs of the nested container scenarios that
included dropping of container blocks for the next line.  During the debugging
phase, it looked like the tokens produced after dropping the outermost container
block on the next line were the same as for keeping the block in the Markdown.
It just looked weird, so I decided to save it for later when I could give it the
time that I thought it needed.&lt;/p&gt;
&lt;p&gt;I was probably deep in thought when I logged this issue, as the token streams
mentioned in the issue were in fact different.  The normal case had three
space characters in the paragraph token, and the drop case did not have those
characters, as I would have expected all along.  But, in fairness, I did log
this issue thinking that there may be an issue, and I wanted to check it.
Just to be sure, I spent time looking
at the code, verifying that result.  After I made assumptions with the last
issue, I did not want to repeat that!&lt;/p&gt;
&lt;h2 id="issue-301-clarifying-rule-for-md007"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/301"&gt;Issue 301&lt;/a&gt; - Clarifying Rule for MD007&lt;a class="headerlink" href="#issue-301-clarifying-rule-for-md007" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue was an interesting one in that I had to really dig into some areas of
the rule to make sure that I had made the right decision.  As the comments for this
issue show, the submitter thought that the Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Ordered&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Sub&lt;/span&gt; &lt;span class="n"&gt;unordered&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with a command line of &lt;code&gt;--set=plugins.md007.indent='$#4'&lt;/code&gt; should not trigger the rule
as it did:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test.md:7:5: MD007: Unordered list indentation [Expected: 4, Actual=5] (ul-indent)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To save readers the trouble of looking up the documentation for the rule, the indent
configuration informs rule Md007 that indents for unordered lists should occur every
4 characters.  And with an apparent indent of 5, it did not look right.  So,
to be honest, I agreed with him.  I have been looking at this issue on and off
since it was logged in February, but never really dedicated time to figuring it
out.  But I was never sure if it was correct or not.&lt;/p&gt;
&lt;p&gt;In taking a concentrated look at this issue, the first thing that I noticed was
that the tokens looked off.  Upon further examination, the parsing of the Markdown text
that exists before the above sample was not closing both lists, only the outermost
list.  As a result, the two lists started with the above sample were considered to
be a second and third level list, not a first and second level list.  Making some
changes to the &lt;code&gt;__close_next_level_of_lists&lt;/code&gt; function to properly close the lists
solved that issue, but did not solve the main question: was the triggered
error correct?&lt;/p&gt;
&lt;p&gt;After going outside and doing some yardwork, I came back inside with a nice cool
glass of water and started to look at the problem again.  Keeping in mind that
assumptions got me in trouble before, I decided to throw them all out and start
fresh.  It was then that I re-read the documentation for the rule and came across
the following text near the end:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The original rule did not work for Unordered List elements within Ordered List elements. For example, the original rule does not fire
on the following sample:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;along with a sample that includes a pair of unordered list elements within an
ordered list.  Perfect for this case!&lt;/p&gt;
&lt;p&gt;Digging into the code for the rule a bit more, the changes I made to support this
rule firing within an ordered list item became clear. If the new ordered
list item was contained in anything other than an ordered list, it reset the depth
to &lt;code&gt;0&lt;/code&gt;.  In the case of the above example, the rule considered the depth of
the unordered list item to be &lt;code&gt;0&lt;/code&gt;.  It took me a while to get there, but I agreed
that the rule was correct.  But how to change the documentation?&lt;/p&gt;
&lt;p&gt;To properly document this issue, I added that information to the documentation in
a new section named &lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/rules/rule_md007.md#notes"&gt;Notes&lt;/a&gt;.
I am probably going to go back and see if I can write a better description in a
while, but I think it is good enough for now.&lt;/p&gt;
&lt;h2 id="issue-441-support-for-stdin"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/441"&gt;Issue 441&lt;/a&gt; - Support For StdIn&lt;a class="headerlink" href="#issue-441-support-for-stdin" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the users reached out with &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/382"&gt;Issue 382&lt;/a&gt;,
asking if it would be possible to use the PyMarkdown linter on Markdown within a
Jupyter notebook.  Working with him, I was able to get the context that one of the
types of information within the notebook are simple Markdown cells that usually
contain notes or instructions for the reader of the notebook.&lt;/p&gt;
&lt;p&gt;To make a move in the direction of making that possible, I knew that the first thing
that I needed to do was to uncouple the linting engine from the file system.  At that
point, the PyMarkdown project only worked on existing text files with the correct
extension.  While I am not sure yet what the best way to support Jupyter notebooks
is, I do know that it will probably involve passing the cells into the linter
without writing a file.  Or at the very least, I want to have that option available.&lt;/p&gt;
&lt;p&gt;I started work on this on Sunday morning, and after working on that around other
things I needed to do, I came to startling conclusion: I loved the argparse library,
but I also hated it.  I had spent over four hours trying to get my way with the
library, with so many Google and Bing searches that I lost count.  It was frustrating
because I had the actual standard in handling written, I just needed to finish
the work on the command line.&lt;/p&gt;
&lt;p&gt;All I wanted to do was to have groups of options that were mutually exclusive from
each other.  Ideally, I wanted an &lt;code&gt;-s&lt;/code&gt; option to trigger the reading from standard
input, raising an error if any of the file-based options were specified.  From a
concept point of view, it was clear: if I was using &lt;code&gt;-s&lt;/code&gt; to read from standard input,
I did not need options like &lt;code&gt;-r&lt;/code&gt; to specify recursion through the directories.&lt;/p&gt;
&lt;p&gt;The implementation was another story.  I would like to think that I came close to
the answer a few times, but that is probably just my ego talking.  Using the
&lt;code&gt;argparse&lt;/code&gt; library, it is possible to specify that single options are mutually
exclusive, such as &lt;code&gt;-s&lt;/code&gt; and &lt;code&gt;-r&lt;/code&gt;.  However, that is as far as it goes.  I found,
through trial, error, and Google, that any kind of arguments groups do not nest.
As such, I could not tell it that &lt;code&gt;-s&lt;/code&gt; was mutually exclusive with a specified
group of arguments.&lt;/p&gt;
&lt;p&gt;While it was not my first pick, I decided to go with a subcommand for the argument
parsing implementation.  I do not think it is as elegant as my proposed solution,
but it works.  Instead of using the &lt;code&gt;scan&lt;/code&gt; command and its arguments, I created
a new subcommand &lt;code&gt;scan-stdin&lt;/code&gt; that had no arguments.  It seems a bit awkward from
my point of view, but it accomplishes the goals, which is the important part.&lt;/p&gt;
&lt;h2 id="thinking-about-the-notebook"&gt;Thinking About the Notebook&lt;a class="headerlink" href="#thinking-about-the-notebook" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am still thinking about how to do the notebook.  I am sure that I am going to
find a solution for the user, I am just not sure what it is yet.  I know that I
now have more options since I have added standard input support, but I will
be taking time this week to think through it properly and talk with the
user.&lt;/p&gt;
&lt;p&gt;It was frustrating at times, and I feel like I could have gotten more done, but
it is still a good feeling to knock some items off the list!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Plugging Away At The Issues</title><link href="https://jackdewinter.github.io/2022/07/25/plugging-away-at-the-issues/" rel="alternate"></link><published>2022-07-25T00:00:00-07:00</published><updated>2022-07-25T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-07-25:/2022/07/25/plugging-away-at-the-issues/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/18/confidence-one-bad-apple/"&gt;last article&lt;/a&gt;, I talked
about my struggles to regain my confidence, since my crash at the end of May.
This week, I got back to work and was able to deal with issues on
my &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It certainly has been a roller-coaster of a ride …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/18/confidence-one-bad-apple/"&gt;last article&lt;/a&gt;, I talked
about my struggles to regain my confidence, since my crash at the end of May.
This week, I got back to work and was able to deal with issues on
my &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It certainly has been a roller-coaster of a ride since my crash on my side projects
at the end of May.  By personal life has been great and my professional life has
been great.  And while I usually try my best to keep my side projects separate
from the rest of my life, I decided to borrow a bit of positivity over the last
couple of weeks to get me over the rough spot.  Luckily, it was with good results.&lt;/p&gt;
&lt;h2 id="easing-back-into-addressing-issues"&gt;Easing Back Into Addressing Issues&lt;a class="headerlink" href="#easing-back-into-addressing-issues" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the commit list for this article, I was initially a bit disappointed
that I have not done more to fix issues since the
&lt;a href="https://github.com/jackdewinter/pymarkdown/releases/tag/v0.9.7"&gt;version 0.9.7 release&lt;/a&gt;.
After all, it has been three weeks since that happened.  But as I sat back and
thought about things, it has been a productive few weeks.  Most of the
work has been about me trying to get back to where I was before, but that still
counts as work.&lt;/p&gt;
&lt;h2 id="more-testing-of-nested-blocks"&gt;More Testing Of Nested Blocks&lt;a class="headerlink" href="#more-testing-of-nested-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One easy thing that I did was to go through the tests in the
&lt;a href="https://github.com/jackdewinter/pymarkdown/tree/main/test/nested_three"&gt;nested_three directory&lt;/a&gt;
and split them out into two separate files.  Initially, I did not think the collection
of scenarios would grow to be so large, but it did.  Splitting each of those files
in half helped a bit, which was good enough for a while.  At the very least,
it was easier to find things when I was looking for samples by nesting types instead
of specific scenarios.&lt;/p&gt;
&lt;p&gt;Looking at a series of tests to get cleaned up, I started working on
the Block/Block/Ordered tests, otherwise known as the tests in the
&lt;code&gt;test_markdown_nested_three_block_block_ordered.py&lt;/code&gt; file.  Looking at the
size of that file, it took me less than five seconds to think about splitting that
file into the &lt;code&gt;test_markdown_nested_three_block_block_ordered_max.py&lt;/code&gt; file and
the &lt;code&gt;test_markdown_nested_three_block_block_ordered_nomax.py&lt;/code&gt; file.  That decision
was an easy decision.&lt;/p&gt;
&lt;h2 id="issue-408-cleaning-up-tests"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/408"&gt;Issue 408&lt;/a&gt; - Cleaning Up Tests&lt;a class="headerlink" href="#issue-408-cleaning-up-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given those files, I worked through and validated every test and filed clear issues
for the things that needed to be fixed.  That also was an easy decision.  While the commit
just shows the file being split into two, there was a lot of work that went on to get there.
I went through and plugged each of the Markdown inputs into the CommonMark parser, ensuring
that the produced HTML output in the tests were correct.  Visually, I checked to
see if the tokens looked correct, especially noting down a few instances where I thought
the tokenization was off a bit.  While the main part of the tokens were all fine,
I was looking for issues with the recorded whitespace.  There were some
surprises, so I noted them down, and moved on.&lt;/p&gt;
&lt;h2 id="issue-413-filling-out-the-scenarios"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/413"&gt;Issue 413&lt;/a&gt; - Filling Out The Scenarios&lt;a class="headerlink" href="#issue-413-filling-out-the-scenarios" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue is where a lot of the initial time was spent on this block of work.
During the cleanup noted above, I noticed that there were a couple of experimental
tests that were failing.  Nothing major, but enough to cause me concern. Both
scenarios involved the line following either the main list start or a new list
item, and a line with not enough indent to meet the list constraints.  As an
example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, line 3 starts a new list that is contained within a single block
quote.  The following line keeps the block quote active (starts are by
indent count, not column number), but does not have any indentation to keep the
list going.  Thankfully, line 4 is treated as a paragraph continuation of the
“paragraph” started on line 3, and the list item and the ordered list are both
closed after line 4.&lt;/p&gt;
&lt;p&gt;I cannot remember exactly which one of these situations forced me to look at
these combinations, but it was enough to put some work in to find out the
health of these scenarios.  For the example above, since I was dropping the
indent to the level of the list item, I added &lt;code&gt;_drop_ordered&lt;/code&gt; to the test
function name.  The function with the suffix &lt;code&gt;_drop_ordered_block&lt;/code&gt; took back
the indents to the visual level of the block quote character and the
function with the suffix &lt;code&gt;_drop_ordered_block_block&lt;/code&gt; removed all indentation.&lt;/p&gt;
&lt;p&gt;After adding 185 tests, all the combinations were covered and only seven
tests in those 185 were marked as skipped.  It was exhausting, but I had
a complete picture of how things looked with dropping of the indentation.
Part of that was due to some work I did along the way. Those issues
were simple enough that I thought it was best to fix them as I went.&lt;/p&gt;
&lt;h3 id="empty-lists-and-nested-blocks"&gt;Empty Lists And Nested Blocks&lt;a class="headerlink" href="#empty-lists-and-nested-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first of the two issues that I found and fixed dealt with an empty
list item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example might look simple, but there was an issue.  If there is text at the end
of line 1, then the text in line 2 becomes part of a paragraph continuation.  Because
that text is not present, the paragraph continuation does not take effect, leaving
the text &lt;code&gt;item&lt;/code&gt; to be part of a paragraph outside of the list.  At least, that is
what was supposed to be parsed.  Due to the benefits from the increase logging
that I mentioned a couple of weeks ago, I was able to diagnose this issue rather
quickly, making a change to the &lt;code&gt;__calculate_current_indent_level&lt;/code&gt; function to
properly shut down the list before the text &lt;code&gt;item&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="we-all-start-together"&gt;We All Start Together&lt;a class="headerlink" href="#we-all-start-together" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The second issue was a rather tricky issue with two block quotes and an ordered
list all starting on the same line.  While the tokens were being parsed correctly,
the recombining code from the verification was off.  Doing a bit of legwork, I
was able to come up with a way to detect the bad whitespace and account for it.&lt;/p&gt;
&lt;p&gt;To be honest, the whitespace issue is a bit of a tricky issue for me.  The fact
that I must adjust my recombining code to account for weird situations does
not sit well with my values.  If possible, I want there to be clear
guidelines on how the whitespace gets put back together.  If I have those guidelines,
I can document them and explain them anyone who wants to write plugin rules.
Right now, I approach that, but especially when it comes to containers, I fall
short of that goal.&lt;/p&gt;
&lt;p&gt;But for me, that is a slippery slope.  Based on a quick scan though the
&lt;code&gt;transform_to_markdown.py&lt;/code&gt; module, I would guess that approximately 1500 lines of
the 2500 lines are dedicated to handling containers and their special cases.
Some of that code is necessary, and some of that code is hacks to deal with
improper tokenization.  However, if all the special cases only deal with whitespace
and not the rest of the content of the rehydrated Markdown, I am somewhat okay
with that.  Sure, I would like to remove it, but I am not sure if the benefit is
there to justify the cost.  At least, not yet.&lt;/p&gt;
&lt;h2 id="issue-410-cleaning-up-whitespace"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/410"&gt;Issue 410&lt;/a&gt; - Cleaning Up Whitespace&lt;a class="headerlink" href="#issue-410-cleaning-up-whitespace" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I was able to fix a couple of instances of whitespace issues, there were
other instances where I knew I was going to need more than fifteen minutes to
diagnose the failures and fix it.  With seven tests to address, it took a bit
of time to find the first case, and luckily enough, the rest of the cases were
all variations of the first.&lt;/p&gt;
&lt;p&gt;In all cases, the parser was applying the leading space, resulting in twice the
whitespace appearing in the rehydrated Markdown.  They all tracked down to one
of two scenarios.  The first was that the leading space was being stored in the
list token, but the internal variable representing the line was not being updated
to account for that.  Without that updating, the parser saw the whitespace and
rightfully added it to the text.  The other scenario was that the string was fine,
but the index pointing into the string was not properly adjusted.  Different cause,
but same effect.&lt;/p&gt;
&lt;h2 id="issue-420-and-issue-421-revisiting-old-friends"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/420"&gt;Issue 420&lt;/a&gt; and &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/421"&gt;Issue 421&lt;/a&gt; - Revisiting Old Friends&lt;a class="headerlink" href="#issue-420-and-issue-421-revisiting-old-friends" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After going through those fixes, I looked at the other scenario tests that were
currently disabled and ran through them to see if they were fixed or easy to
fix.  The first one I addressed was test &lt;code&gt;test_list_blocks_271a&lt;/code&gt;, followed by
tests &lt;code&gt;test_list_blocks_271c&lt;/code&gt;, &lt;code&gt;test_list_blocks_270c&lt;/code&gt;, and &lt;code&gt;test_list_blocks_270a&lt;/code&gt;.
While these tests were not at once fixed by the previous work, they looked
like they were close enough that it made sense to fix them.&lt;/p&gt;
&lt;p&gt;Following good practices, I went through each of the tokens by hand and verified
that they were correct, or at least looked correct.  After doing silly things
such as counting the number of &lt;code&gt;&amp;gt;&lt;/code&gt; characters in the whitespace area of the tokens,
everything looked good.  Looking at the debugging from the Markdown rehydration,
it looked okay as well, but something was off.&lt;/p&gt;
&lt;p&gt;It took me about an hour of work, with futzing on a project outside and
grabbing some food, before I figured it out.  In certain cases,
when the container text was being added back into the Markdown, the index into
container token whitespace was off.  And that little discrepancy was just enough
to point to the wrong whitespace part, which in return added the wrong whitespace
to the rehydrated token.&lt;/p&gt;
&lt;h2 id="issue-407-adding-alternate-extensions"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/407"&gt;Issue 407&lt;/a&gt; - Adding Alternate Extensions&lt;a class="headerlink" href="#issue-407-adding-alternate-extensions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking over the work to do in the issues list, I reviewed each issue and
came across this request from a user.  In his case, due to a preprocessing need,
the Markdown he wants to scan is in a file that has a different extension that
&lt;code&gt;.md&lt;/code&gt;.  As such, he asked if it would be possible to support alternate extensions
to scan.&lt;/p&gt;
&lt;p&gt;I do remember thinking “why doesn’t he just change the extension, scan, and then
change it back?”  I also remember me following up that thought with “I don’t think
I would do that unless I REALLY had to.”  As such, I started working on supplying
support for alternate extensions.  It is currently in the main code base with
the &lt;code&gt;--alternate-extensions&lt;/code&gt; argument, and I hope to get some time next week to
properly document it for the next release.  It is just a simple argument that takes
a comma-separated list of extensions, with a default of &lt;code&gt;.md&lt;/code&gt;.  It was easy to
write, easy to test, and hopefully the user will like it.&lt;/p&gt;
&lt;h2 id="despise-my-earlier-opinion"&gt;Despise My Earlier Opinion&lt;a class="headerlink" href="#despise-my-earlier-opinion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Despite what I had through previously, I believe I did have a good couple of
weeks fixing issue.  It was not glamorous and exciting, but there was a lot of
good, solid work.&lt;/p&gt;
&lt;p&gt;The one thing that I want to call out are the changes I made to the Container
Block Processor and the grab bag object.  When I added support for that object
in a couple of weeks ago, I was not sure how much difference it would make.
I had hoped it would make a significant difference, but I was not sure.&lt;/p&gt;
&lt;p&gt;I am now sure.  Instead of having to add debug statements to keep track
of variable state, it was all there in the log file.  It is a small amount of
work to look back in the log file to see what the last value is.  But that amount
of work is nothing compared to adding in a log statement, making sure it has the
right information, and running the tests again to see what the value is.  In my
opinion, it was just an order of magnitude better.&lt;/p&gt;
&lt;h2 id="a-final-note"&gt;A Final Note&lt;a class="headerlink" href="#a-final-note" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it is true that I do the work on these projects and these articles, it is
a group of people that help me in many ways that enable me to do these things.
I have known for 51 years a certain guy who, despite our issues in our first twenty
years, has stuck by me and I by him.  We have been through some rough patches
together, but I know I can just send an email, a text, or a phone call, and
he will listen with a wisdom that I would have never guessed at.  Yup, I am talking
about my brother, Mike.&lt;/p&gt;
&lt;p&gt;I am proud to say that I am going to be spending time with that gentleman and
his fiancé this weekend, as they tie the know and make it official.  And as
Mike is family and a dear friend who I have not seen since this pandemic
thing started, my wife and I are going to take some time to enjoy the socialization.
Best wishes to Mike, and I will be back in a couple of weeks! Stay Tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Are Scenario Tests Worth It?</title><link href="https://jackdewinter.github.io/2022/07/12/are-scenario-tests-worth-it/" rel="alternate"></link><published>2022-07-12T00:00:00-07:00</published><updated>2022-07-12T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-07-12:/2022/07/12/are-scenario-tests-worth-it/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/05/when-are-grab-bags-okay-in-software/"&gt;last article&lt;/a&gt;, I talked
about the refactoring work I did in the previous week.  This week, I talk about
my progress on adding scenario tests for the nested container scenarios.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I am doing any action that is even remotely technical, I think about three
things …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/05/when-are-grab-bags-okay-in-software/"&gt;last article&lt;/a&gt;, I talked
about the refactoring work I did in the previous week.  This week, I talk about
my progress on adding scenario tests for the nested container scenarios.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I am doing any action that is even remotely technical, I think about three
things in quick unison.  What is the cost of doing that action?  What is the benefit
of doing that action?  What are the risks of doing that action?&lt;/p&gt;
&lt;p&gt;Having had those questions drilled into my brain for years, they form the basis of what
is known as Risk-Cost-Benefit Analysis.  A quick search with any search engine
turns up multiple hits for articles on the subject, with more hits for the simplified
Cost-Benefit Analysis.&lt;/p&gt;
&lt;p&gt;As a Software Development Engineer in Test, one of my primary
tasks is to do these analyses and use automation to mitigate the risks where possible.
Therefore, it should not be a surprise that when I am working on my own projects,
these questions are ones that I ask myself.  Especially after my efforts during
the last week, I believe having a satisfactory answer to those questions regarding the addition
of more scenario tests to
the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="what-are-scenario-tests"&gt;What Are Scenario Tests?&lt;a class="headerlink" href="#what-are-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While there are many &lt;a href="https://en.wikipedia.org/wiki/Scenario_testing"&gt;definitions&lt;/a&gt; of
what scenario tests are, the simplest answer is the one that I give to people that ask
about my work.&lt;/p&gt;
&lt;p&gt;User stories are a set of actions where I walk through the
actions that a specific user would do to accomplish a given goal.  A good example of
a user story is “Fred the manager logs on to the web site and requests an activity
report for their direct reports.”  That user story is good because it contains
useful information on the user and what they want to accomplish.&lt;/p&gt;
&lt;p&gt;From a project level, user stories are great.  They communicate the intent and goal of
a set of actions that are typical of that user.  But those same stories lack enough
specificity for a software developer to act on.  That is where scenarios
come in.  A scenario is a constrained action that accomplishes a specific goal.
My general rule is that a good scenario usually avoids the word “and” where
possible.  Therefore, breaking down the user story from above, I include scenarios
such as “The user logs on to the website,”
“Manager requests information on direct reports,” and “Manager requests activity
report”.  Each one of these scenarios is integral to the user story, but together
they spell out how the application solves for those user stories.&lt;/p&gt;
&lt;p&gt;From there, the jump from a scenario to a scenario test is a simple one.
A scenario test is just a test that clearly focuses on that one scenario. If
possible, interactions with any other scenarios are removed and the focus is
solely on that one scenario.  The success and usefulness of any scenario test is related
to what kind of scenarios it covers and how frequently it needs modification
for unrelated changes.  If it is focused enough on the scenario, those modifications
are usually minimal.&lt;/p&gt;
&lt;h2 id="why-are-they-important-to-the-project"&gt;Why Are They Important To The Project?&lt;a class="headerlink" href="#why-are-they-important-to-the-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In a web application or a desktop application, the generation of scenarios
deals more with the user interacting with the application than the various parts
of the application itself.  The basis for that assumption is that those application
are primarily created to interact with the end user to provide a desired result.
Therefore, it is that interaction that is central to the scenarios that will make
that application a success.&lt;/p&gt;
&lt;p&gt;For backend applications such as the PyMarkdown project, the focus is still on
the user interaction.  However, that user interaction takes place using files or
payloads to be parsed or actioned upon.
Accordingly, the focus in placed on the input that is presented to that application
on behalf of the user.  For the PyMarkdown project, that input is in the form
of Markdown files which have a clearly defined specification that must be adhered
to.&lt;/p&gt;
&lt;p&gt;The PyMarkdown Linter is a linting rules engine based on top of a
&lt;a href="https://github.github.com/gfm/"&gt;Github Flavored Markdown&lt;/a&gt; compliant parser.  The
starting point for the scenario tests was the specification itself.  However, since
the specification focuses on HTML output and the parser focuses on Markdown itself,
I felt that expanding the testing effort to include other Markdown inputs was
warranted.  As each different input is a slightly unique way to “phrase” the
Markdown document, I felt that associating each input with a scenario and a scenario
test was appropriate.&lt;/p&gt;
&lt;p&gt;And while I would love for there to be no issues at all with the PyMarkdown
project, I am still finding scenario test failures that I need to deal with.&lt;/p&gt;
&lt;h2 id="the-work"&gt;The Work&lt;a class="headerlink" href="#the-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When it comes those scenario test failures, I have three buckets
that I file those failures into.  The first
bucket is that the application aborts, either from an &lt;code&gt;assert&lt;/code&gt; statement or any
other exception that is thrown.  This bucket is a high priority as it will stop
the application from processing anything else in the document.  That, and it also
looks bad to the end user.  The second bucket is for parsing errors that result
in an incorrect Markdown token stream being generated.  These errors are caught
when generating HTML from
the tokens as a double-check.  This bucket is a medium priority because it looks
bad and feels bad since these are very visible to the end-user but are typically
low impact.  Finally, the third bucket is reserved for whitespace errors
that affect the tokens themselves, but only in a minor way.  The tests catch these
errors when generating the original Markdown from the Markdown tokens.  This
bucket is low priority because while there are rules that are dependent on
whitespace in tokens, there are only a handful of them.&lt;/p&gt;
&lt;p&gt;Getting back to my work on the project, I started adding a new set of scenario tests
to the project.  After four or five days of work, I had 224 new scenario tests
implemented and committed, with only nine tests failing.  Compared to the work
I did in the spring where I had over fifty tests failing, I was happy with
only having to fix nine tests in two groups.  Honestly, there is a third group that
I need to look at more closely, but I will get to double checking those results
after I deal with the first two groups.&lt;/p&gt;
&lt;p&gt;The good news?  Only two of the failing tests were due to parsing errors, the rest
all dealt with whitespace errors.  I found no crashing scenarios and
only a couple of parsing scenarios, with less than ten whitespace scenarios to
fix.  That was a good result.&lt;/p&gt;
&lt;p&gt;But should I fix them?  That is the question that I started to ask myself.&lt;/p&gt;
&lt;h2 id="the-risk"&gt;The Risk&lt;a class="headerlink" href="#the-risk" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Of all three questions, this was the easiest one for me to answer.  The risk of
not having a test for a given scenario is that a user decides not to use the project
for their needs.  However, that risk is balanced out by the frequency of a given
scenario failing in normal use.&lt;/p&gt;
&lt;p&gt;Applying those metrics to these scenarios, I would like to reduce the risk if
possible. But nothing that I found made me feel like I had to stop all work and
fix those scenarios right now.  If I make steady work to mitigate the
risk of all three-level nested container scenarios, I am good.  I would feel
better if I had diversity in the scenarios that I am missing, and I need
to be able to factor that into my risk analysis. More on that later.&lt;/p&gt;
&lt;h2 id="the-cost"&gt;The Cost&lt;a class="headerlink" href="#the-cost" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The next question for me to answer was the cost.  Based on my experience of adding
those 224 new scenario tests, I know that it will take me approximately 11 or 12
hours to complete.  That time is not wall-clock time, but active task time.  That
time does not consider any breaks that I take to do work around the house
or to relax between sets of scenario tests.  That time is spent following
a recipe that I determined beforehand.  For this latest group of scenario tests,
which meant taking each existing scenario test and creating three (or four) additional
tests where any indentation for the containers was removed on the last line of
the Markdown.&lt;/p&gt;
&lt;p&gt;Another part of the cost is the mental fatigue and boredom.  The task is not
suited for automation, meaning the generation of the scenarios must be done manually.
For this past week, which meant taking over seventy existing scenario tests and performing
that transformation on each test.  That also meant verifying the HTML output against
the canonical &lt;code&gt;commonmark.js&lt;/code&gt; parser and fixing any typing errors as I went.  It
was boring, but it needed to be done.&lt;/p&gt;
&lt;p&gt;There is also the cost of not adding other scenario tests or addressing other issues.
Often referred to as &lt;a href="https://www.investopedia.com/terms/o/opportunitycost.asp"&gt;opportunity cost&lt;/a&gt;,
there may be other issues that I could be working on that would solidify the application
more.  That one is harder to quantify, so I keep it in mind as a bit of a tiebreaker.&lt;/p&gt;
&lt;h2 id="the-benefit"&gt;The Benefit&lt;a class="headerlink" href="#the-benefit" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The final question that I need to answer is about the benefit of adding more
scenario coverage.  For me personally, this is more difficult for me to gauge.
When I am using a tool like this, I expect three major things to be in place:
a decent application, a decent issues process, and a decently responsive application
team.  I do not expect applications to be perfect, but the application needs to
show me that the team cares and is being honest with what they believe they can
accomplish.  An “everything working fine” solution that is filled with issues is
a big turn off.  However, the same application with a “we are working to get this
to a better application” sign is perfectly acceptable.  For me, it is all about
setting reasonable expectations.&lt;/p&gt;
&lt;p&gt;I have a decent issues process in place and try and be responsive
to any users to file issues.  Based on that opinion, I hope I am okay with not
worrying about disappointing any users in that way.  Therefore, focusing on the
application and its expectations, I am also in decent shape there.  I
believe I have decent documentation and a nice section near the top of the main
page reading:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id="note"&gt;Note&lt;a class="headerlink" href="#note" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This project is currently in beta, and some of these documented things may not work 100% as advertised until after the final release. However, everything should be close enough to done that if you find something missing, please let us know.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I do know that users have asked for improvements and pointed out issues that
they have asked to be fixed, so I have confidence that I am setting the expectations
with my users correctly.&lt;/p&gt;
&lt;p&gt;That leaves the determination of value of the benefit in my court.
I will have to think about that some more.&lt;/p&gt;
&lt;h2 id="the-result"&gt;The Result&lt;a class="headerlink" href="#the-result" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To summarize, from a risk point of view, the amount of risk associated
with hitting significant issues in the remaining “nested three container” scenarios is
medium-to-low.  From a cost point of view, I am confident that adding another
one of the “nested three container” scenario groups is going to take approximately
12 hours to complete, task time.  I am also aware that I am going to get bored with
that process, and that I am going to have to take extra breaks to make sure I stay
on top of my game.  And with the benefit, I am not sure what I am going to land
on that but working through this exercise has helped me out a bit.&lt;/p&gt;
&lt;p&gt;I know that there are more than thirty issues in the old issues list, with some more
urgent issues in the current issues list. As issues in the current issues list are
suggestions from users, I feel that any user issues must have a higher priority
than the ones I entered.  From that point of view, there is an opportunity cost
that I am paying in not getting those issues dealt with.  I just do not know how
to weigh any interest in those issues.&lt;/p&gt;
&lt;p&gt;To balance that out, I also feel that addressing three groups of scenarios in the
“nested three container” scenarios group would help me reduce my estimated risk
from medium-to-low to low.  The first group of these scenarios revolves around
the whitespace before list items.  For example, does this Markdown parse
correctly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those scenarios, an add-on to the work that I just completed, would increase my
confidence that I have the list item support working properly in the parser. The
other two groups of scenarios are variations on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For me, replicating my recent work (with the addition of the above group) on those
two sets of scenarios would give me confidence that I have addressed the highest
risk scenarios.&lt;/p&gt;
&lt;p&gt;For me, reducing the risk that I have missed something is worth the benefit,
if I can respond to user requests.  I think.&lt;/p&gt;
&lt;h2 id="and-that-means"&gt;And That Means…&lt;a class="headerlink" href="#and-that-means" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So given all that hand-waving… I am going to think about this for a week or
two as I try to fix the issues that came up during the last week.  That will
allow me to make progress that I know will bring the project benefit while
giving me some more time to figure out how I feel about the above decision.&lt;/p&gt;
&lt;p&gt;There is lots of work to do, and I do not have any pressure to
make a speedy decision, just a good decision.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>When Are Grab Bags Okay in Software?</title><link href="https://jackdewinter.github.io/2022/07/05/when-are-grab-bags-okay-in-software/" rel="alternate"></link><published>2022-07-05T00:00:00-07:00</published><updated>2022-07-05T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-07-05:/2022/07/05/when-are-grab-bags-okay-in-software/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/06/28/getting-back-to-business/"&gt;last article&lt;/a&gt;, I talked about how
I was getting back to work on my project after taking a few weeks to recover from
a crash.  In this article, I talk about the refactoring work I did in the last
week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During my recovery phase from my …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/06/28/getting-back-to-business/"&gt;last article&lt;/a&gt;, I talked about how
I was getting back to work on my project after taking a few weeks to recover from
a crash.  In this article, I talk about the refactoring work I did in the last
week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During my recovery phase from my crash, I decided to do some low-cost
refactoring of the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
And while the refactoring was easy to do, it did make me think about the
way in which I was refactoring the class.&lt;/p&gt;
&lt;h2 id="but-first-an-aside"&gt;But First, An Aside&lt;a class="headerlink" href="#but-first-an-aside" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Any avid readers of these articles will notice that I am writing this and posting
this on a Tuesday.  I was a victim of “National Scare The Crap Out Of
Your Pets” Day.  For any Canadian readers, Happy Canada Day and for any American
readers, Happy Independence Day.  That means one thing: a lot
of partying and a lot of fireworks.&lt;/p&gt;
&lt;p&gt;From a pet owner’s point of view, it was just an exceptionally long weekend.  Our dog Bruce
is a lovable doofus, but he fears loud noises.  By the time Sunday rolled
around, people in our neighborhood were already starting to set off fireworks.
That meant that Bruce was unsettled and looking for the places in our house
with good sound proofing.  That either meant our master bathroom shower (with
the bathroom fan running of course) or in the basement with the door closed.
On Sunday night, Bruce hid in those locations when he could, but on Monday night,
hiding in one of those two locations was a necessity.&lt;/p&gt;
&lt;p&gt;Why do I mention this?  Because to a certain extent, I was doing the same
thing as Bruce.  My office is a wonderful place for working, but not a good place for
blocking out outside noise.  On most days, I can play my music and it covers
most of the outside noise. But the past Sunday night and Monday night were not
about normal outside
noise.  Even with my music turned up, I was still hearing the fireworks that were
going off outside.  Combining that with my Autism meant that I was losing focus
every time a firework went off outside.&lt;/p&gt;
&lt;p&gt;And while I am a bit tired from last night (see the earlier mention of Bruce
being anxious about the noise), it is peacefully quiet outside.  Birds chirping,
the odd car driving by the house, and no fireworks.  That means, I found my
space to write this week’s article.  Sorry for the delay!&lt;/p&gt;
&lt;h2 id="simple-refactoring-is-not-always-simple"&gt;Simple Refactoring Is Not Always Simple&lt;a class="headerlink" href="#simple-refactoring-is-not-always-simple" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now, back to the focus of this article: grab bags.  I am not sure what
the actual name of these objects are, but I have always heard them referred
to as grab bags.  In a physical sense, a grab bag or a go bag is a short
form for a grab-and-go bag.  These grab-and-go bags are actual bags, usually
a large purse or a backpack, that disaster preparers keep ready for emergencies.
The general idea is that with one of these bags, a person has enough of their
basic needs met to keep them going through at least 72 hours of an emergency.&lt;/p&gt;
&lt;h3 id="back-to-basics"&gt;Back To Basics&lt;a class="headerlink" href="#back-to-basics" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From my years of experience, one of the development paradigms that I find useful
is the object-oriented development paradigm.  Without going too far into
the explanation of what &lt;a href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;object-oriented development (OOP)&lt;/a&gt;
is, one of the underlying facets of this type of programming is that common
elements are grouped together in objects, those objects usually being referred
to as classes.  Therefore, an object that deals with a position on a map
should be represented by a class with either two or three
numeric values specifying a relative location.  If dealing with other concerns
about that object are required, then OOP allows for a new class to be created
with those concerns, inheriting the base elements from the original class.&lt;/p&gt;
&lt;p&gt;What does this look like?  Using a simple Python data class, the original
class would look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyPosition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x_location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;y_location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;z_location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using inheritance, if I want to add extra concerns to that class, such
as a name, we can create a new class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyNamedPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyPosition&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here I am using the &lt;code&gt;@dataclass&lt;/code&gt; modifier to simplify things, but if I write it
out in long form, the same rules still apply.  The class &lt;code&gt;MyNamedPosition&lt;/code&gt; contains
four properties, three from the &lt;code&gt;MyPosition&lt;/code&gt; class and one that it generates itself.&lt;/p&gt;
&lt;p&gt;The important thing here is that there is cohesion between the data elements and
the functions that use them.  When I look at either of those two classes, the
collection or data elements I see in each class is a cohesive group that work
together.  This is enough of a grounded concept that there is an existing
metric called &lt;a href="https://www.aivosto.com/project/help/pm-oo-cohesion.html#:~:text=Cohesion%20metrics%20measure%20how%20well%20the%20methods%20of,be%20restructured%20into%20two%20or%20more%20smaller%20classes."&gt;Lack of Cohesion of Methods&lt;/a&gt;
that is documented at the above link.  At that site, one of the recommendations
for objects that have low cohesion is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Low cohesion indicates inappropriate design and high complexity. It has also been found to indicate a high likelihood of errors. The class should probably be split into two or more smaller classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And for the most part, I sincerely agree with their arguments and try
and keep my classes cohesive, with a single responsibility if possible.&lt;/p&gt;
&lt;h3 id="enter-the-container-block-processor-and-the-grab-bag"&gt;Enter The Container Block Processor and the Grab Bag&lt;a class="headerlink" href="#enter-the-container-block-processor-and-the-grab-bag" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In trying to simplify and refactor the &lt;code&gt;ContainerBlockProcessor&lt;/code&gt; class, I was faced
with an interesting dilemma.  While there are a handful of variables used by
the class that can be grouped together, most of the variables denote a distinct action
that was undertaken or a distinct measurement that was performed.  As such, any attempt
on my part to clean up the arguments being passed between functions would
result in almost as many new classes as there were existing common arguments.&lt;/p&gt;
&lt;p&gt;As someone who believes in using Best Common Practices, I believe
that the &lt;a href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;Single Responsibility Principle&lt;/a&gt;
and Object-Oriented Development are solid ways of creating and refactoring code.
I did not like all the arguments being passed between the various functions
in the class, but I could not find enough common responsibility between the
variables to have a manageable number of classes that I could pass around
instead of those arguments.&lt;/p&gt;
&lt;p&gt;Enter the programming grab bag.  In the physical world, a grab bag is a bag
that can be grabbed that holds a mix of things that are probably not related,
except for them being needed in an emergency.  In the development world, the
normal practice of maintaining a single responsibility for the class and cohesion
within that class is suspended in favor of having one location for all variable
related to the parent class.  In this case, I created the &lt;code&gt;ContainerGrabBag&lt;/code&gt; class
to hold the various variables I collected from the arguments of the functions
of the &lt;code&gt;ContainerBlockProcessor&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;This decision was somewhat dangerous from a maintenance point for one simple
reason: multiple responsibilities and low cohesion means that understanding
the flow of the parent object is going to be more difficult than it should be.
However, since I was starting with arguments that were being passed up and down
the function chain, I decided that the grab bag approach was going to be the
better approach.  To further enhance the maintainability of the grab bag,
I made sure to log initial states and every change of state of any of the elements
within the grab bag.  I figured out that while I cannot reduce the count of
elements in the grab bag, I can improve maintainability by clearly noting
when any of the states change.&lt;/p&gt;
&lt;p&gt;But when I sat back and thought about it, the refactoring was needed.
Based on my development principles, I would not have taken this route from
the start, as I believed that I could find simple responsibilities that
I could factor out from the arguments.  I had that belief right up until
the point when I decided that using a grab bag was the only way to
solve the issue.  In the end, it was a calculated move that one class with
many variables and logging of any changes in those variables would be
more maintainable than passing arguments around.&lt;/p&gt;
&lt;h3 id="the-refactoring-took-many-weeks"&gt;The Refactoring Took Many Weeks&lt;a class="headerlink" href="#the-refactoring-took-many-weeks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Even factoring in my recover over the last few weeks, this type of refactoring
takes a long time.  Adding the new variable to the &lt;code&gt;ContainerGrabBag&lt;/code&gt; class was easy.
That part of the refactoring took less than five minutes.  I then had to
scan for that variable throughout the &lt;code&gt;ContainerBlockProcessor&lt;/code&gt; class and
figure out whether each reference was referring to the “global” variable being
passed around, or if it was a special case.  Most of the extracted variables
just referred to the “global” variable, but the ones that did not caused me
enough concern that I took things slowly.&lt;/p&gt;
&lt;p&gt;Slowly meant making a small set of changes, executing &lt;code&gt;ptest -m&lt;/code&gt; to execute
the scenario tests, and then waiting
for those tests to complete.  If everything was fine, it was on to the next change
in the search results.  If not, I had to go back and figure out why the change
failed and adjust for those results.  Guessing the amount of time taken
for each iteration of that loop, I would say it averaged about 3-4 minutes
between the successes and failures.  Multiple that time by the number of
variables in the &lt;code&gt;ContainerGrabBag&lt;/code&gt; class and the number of times that they
occurred in the original &lt;code&gt;ContainerBlockProcessor&lt;/code&gt; class, and that is a
substantial duration of time.  If I had to guess, that duration
would be days, not hours.&lt;/p&gt;
&lt;p&gt;Once that was all cleaned up, the other parts of the refactoring were less
time consuming.  Since any state change was being logged as part of the
&lt;code&gt;ContainerGrabBag&lt;/code&gt; class, removing any lines that were in the original
class to trace values was a simple operation.  Then, going through the
search results for the transferred object, I was able to quickly isolate
arguments and return values that were no longer needed now that the
value was in the grab bag.  I usually cleaned up two or three functions
at once, so the overhead of executing the scenario tests was not too
expensive.&lt;/p&gt;
&lt;p&gt;Finally, I was left with two sets of operations of the variable that
I was working on: those that did actual work and those that were setting
the variable to its default value.  While that distinction may appear
to be a simple calculation, it was not always like that.  In cases where
the variable was set in multiple locations, I had to comment out that
set statement and verify that it was indeed setting the variable to the
same value.  And yes, that meant another set of scenario test runs.&lt;/p&gt;
&lt;h3 id="what-is-the-end-result"&gt;What Is The End Result?&lt;a class="headerlink" href="#what-is-the-end-result" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Based on a couple of attempts at debugging a couple of minor issues,
I can verify that the newly reworked code is indeed easier to maintain.
While I know distinct objects would be easier for me to model in my head
while debugging, the logging of any state change to the log file helps
mitigate that negative.  It is a somewhat weird balance that I need to get
used to, but I am getting used to it.  Instead of keeping that
information in my head, I am getting used to checking the previous lines
in the logs to figure out when the states changes and what they changed
to.&lt;/p&gt;
&lt;p&gt;It is an ongoing process, and it is working better, which is what my primary goal was.
From that point of view, even an incremental improvement is a success.&lt;/p&gt;
&lt;h2 id="release-097"&gt;Release 0.9.7&lt;a class="headerlink" href="#release-097" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the refactoring of the Container Block Processor class completed, I looked
at the project history and realized that it had been over three months since
I created a new release.  While a month of that was covered by the crash and
recovering from the crash, I had completed cleaning up the remaining scenarios
for the nested container scenarios that I had added back in the February-March
period.  As such, I thought it was long time that I created a release.&lt;/p&gt;
&lt;p&gt;There was not anything fancy added in the release, but for me it was important
to release a more stable version of the project.  I still have two more classes
of scenarios to cover, but I was proud to have eradicated all the issues that
I had found to this point.  I also have faith that the remaining issues that
I have found through random testing will be covered by the next groups of
test scenarios that I will add.&lt;/p&gt;
&lt;h2 id="how-am-i-feeling"&gt;How Am I Feeling?&lt;a class="headerlink" href="#how-am-i-feeling" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be blunt… almost back to normal.  One of the things that my crash illustrated
for me is that I need work more diligently on a good balance in my life.  Without
that balance, I know it is only a matter of time before I get into another situation
like the one that caused my crash.  I need to feel okay about stepping away from
my projects for a bit to clear my head.&lt;/p&gt;
&lt;p&gt;But on the other side, I also need to make sure I am not taking too much time
away from them either.  I enjoy working on my projects, and they do require a
certain level of focus to maintain my interest in them.  After taking some time
off, I am finding that it is more difficult to find that balance between
too much project time and too little project time… with the focus on the too
little side.&lt;/p&gt;
&lt;p&gt;But other than that, I am feeling better physically and mentally, and I
did enjoy spending time working on the projects this weekend.  Well,
before the fireworks started going off that is!&lt;/p&gt;</content><category term="Software Quality"></category><category term="grab bags"></category></entry><entry><title>Markdown Linter - Shifting Left</title><link href="https://jackdewinter.github.io/2022/05/17/markdown-linter-shifting-left/" rel="alternate"></link><published>2022-05-17T00:00:00-07:00</published><updated>2022-05-17T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-05-17:/2022/05/17/markdown-linter-shifting-left/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/"&gt;last article&lt;/a&gt;, I
talked about working on some of my projects to get their code coverage up to
100% and why I felt that the effort was important.  In this article, I focus
more on the work I have been doing in the background on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/"&gt;last article&lt;/a&gt;, I
talked about working on some of my projects to get their code coverage up to
100% and why I felt that the effort was important.  In this article, I focus
more on the work I have been doing in the background on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, I have been doing work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project in the background.  I may not be visible, but it is going on.  It was not
until this week that I have something concrete to show for that work.  And since
not having something to talk about on my flagship project caused me concern,
I thought I would devote an article to the reason for that delay: debugging.&lt;/p&gt;
&lt;h2 id="shift-left"&gt;Shift Left&lt;a class="headerlink" href="#shift-left" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During my recent round of interviews, one of the concepts that I talked about was
shifting the debugging process left as much as possible using automated
testing.  As an SDET (Software Development Engineer in Test), a large part of my
job is to provide solid automated tests that can be executed within a continuous
integration pipeline.  Shortened to “shift left”, this form of thinking strives
to get any kind of test failure as close to the development of the code being tested
as possible.  And yes, that does include trying to find things at the architecture
and design phases if possible.&lt;/p&gt;
&lt;h3 id="what-do-you-mean-left"&gt;What Do You Mean “Left”?&lt;a class="headerlink" href="#what-do-you-mean-left" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let me start with the “left” part of that phrase.  In most development processes,
whether it is explicit or not, there is a workflow that happens from ideation to
release.  In more formal environments, these steps are usually something like
ideation/requirements, architecture, design, vetting the design prior to implementation,
implementation, unit and functional testing, peer review, integration and end-to-end
testing, and
release.  In less formal environments, these steps are still there, just compressed
into fewer steps with some steps “missing” or “implied.  While each of those individual
steps is deserving of an article of its own,
the important thing that I want to communicate is that flow from “an idea” to
“a released thing”.&lt;/p&gt;
&lt;p&gt;Technically speaking, once the bug fix or feature has been released, there may
be added iterations of that workflow.  These iterations can be done to tighten
up misunderstood requirements but are most often performed to address bugs in the
design or implementation.  It might be tempting to think of that new workflow
as part of the original workflow, I believe there are clear reasons that the workflow
is separate.  As that is probably enough content for a separate article, please
take my word on that belief for now.&lt;/p&gt;
&lt;p&gt;Given those foundations, it should be easy to see that the further left in the workflow
that a team gets, the more cost accumulates from the previous steps.  Before the
implementation step, most likely everything has been done with some form of project
lifecycle management system, be it something like the popular &lt;a href="https://www.atlassian.com/software/jira"&gt;Jira&lt;/a&gt;,
using a whiteboard, or writing things down on paper. The implementation and first
testing step introduce code provided by a developer, increasing the cost by a
sizable amount.  Peer review adds to that by bringing the cost of having multiple
developers spend time looking at the changed code, as well as any requested changes
that they ask for to be implemented.  The second level of testing, integration and
end-to-end testing, adds another cost multiplier as those types of tests are
more fragile automated tests because of their distance from the implemented code.
Finally, the release step
adds another multiplier of cost as any issues that are reported once a change is
released must go through yet another team of people to report any issues with
those changes, prioritize those issues, and create new workflows to address any
prioritized issues.&lt;/p&gt;
&lt;p&gt;As someone who has done a lot over thirty years of development in his career, please believe me.
The further an issue makes it into that workflow, the more costly it is.
When I say “costly”, those multipliers are usually between three times multipliers and
10 times multipliers.  And that is if the team is lucky.&lt;/p&gt;
&lt;h3 id="so-where-does-the-left-come-in"&gt;So Where Does the Left Come In?&lt;a class="headerlink" href="#so-where-does-the-left-come-in" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given that information about the traditional development workflow, there is a simple
directionality to it.  Writing that information on a whiteboard, I would simply
create a simple line with dots on the line representing the various points in the
workflow.  At each point, I would annotate the point with one of the names
associated with the workflow.  Given that perspective, the workflow has a simplified
flow from the left of the line to the right of the line.&lt;/p&gt;
&lt;p&gt;Therefore, when I am talking about “Shift Left”, I am talking about trying to detect
issues in a project as early on in the project as possible.  While this may seem like
a “duh” moment to some people, having issues creep to the left is a quite common
occurrence on development teams.
As a developer, I want my code to get out there and be used.  As a developer, I want
to do something interesting, not the same old thing repeatedly.  And as a
developer, I have felt pressure from above to get one thing done and to more on to
the next thing on my plate.&lt;/p&gt;
&lt;p&gt;However, about 12 years ago when I was a developer, I realized I was more concerned
about the quality of what my team was producing than the velocity with which my
team was producing.
I was more concerned with taking extra time to ensure that the requirements were
correct before moving forward with implementing them.  And automated testing? Back
then I faced a lot of pushbacks for adding too many tests to a project, as those
tests were believed to be unwieldy and hard to support.&lt;/p&gt;
&lt;p&gt;But my justifications for wanting to do those tests were solid.  Based on my experience
and my reading of peer articles, others in the industry had started to see things
in a similar light.  More importantly, they were starting to talk about it in more
clear terms than I could manage at the time.  For those of us who “saw the light”,
it came down to a simple bit of calculus. Either a team can impose a small overheard to
take care of those issues before they escape OR that team can pay a cost for
those issues later.  A team can call those issues “tech debt” or anything
else they want to, but they are misses for the team just the same.&lt;/p&gt;
&lt;p&gt;And those misses are costly and can be demoralizing.  The cost part of any miss is easy
one to calculate.  Instead of incurring a small cost to find and solve the issue
before it escapes the team’s view, one or more distinct workflows must be spun up to
address that issue.  In terms of human cost, one workflow is that people were needed
to report the issue and people were needed to confirm that it is an issue.  Another
workflow was then needed to triage the issue to figure out if it has a high enough
priority to fix.  And those two workflows are needed before the team needs to create
a new workflow to fix the issue.  In financial costs, each person in those workflows
has a salary.  Paying a team to fix issues means that the team cannot be working on
improvements to the project. There is the cost for them contributing to one or more
workflows, and there is the cost of not having those people working on new work.
Simple math.&lt;/p&gt;
&lt;p&gt;As to the demoralizing aspect, that aspect is one that I have seen quite often.
I have been in meetings where teams have been told of the issues related to their
project. Most teams try not to assign blame, but it does happen. There are often
questions raised as to
how the team missed finding that issue.  If I had a dollar for each time in my
career that I have heard “How did we miss that?” in a meeting, I would be able to
buy my wife a fancy seafood dinner with an expensive bottle of wine.  And
when the team gets such a backlog of issues that they must dedicate an entire
block of work to dealing with those issues?  Let me just say that I can usually
sense a drop in the energy level in the room without much effort when the manager
says, “we are going to need a bug fixing sprint.”&lt;/p&gt;
&lt;h3 id="shift-left-is-about-paying-the-right-cost-at-the-earliest-time"&gt;Shift Left Is About Paying The Right Cost At The Earliest Time&lt;a class="headerlink" href="#shift-left-is-about-paying-the-right-cost-at-the-earliest-time" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;“Shifting Left” is about dealing with these issues as efficiently as possible.
To get a project to be better,
the proper investments need to be made as far to the left in the workflow as possible.
Problems with architecture and design?  Make sure the requirements are solid and
the architects and designers understand those requirements, with a solid understanding
of the tools and choices at their disposal.  Problems with poor implementations?
Make sure the developers understand the requirements and designs and supply guidelines
for them to follow to prove that they have met those goals.  Problems with changes
to implementations creating new issues?  Make sure that there are solid integration
tests that are independent from the developer-created tests.&lt;/p&gt;
&lt;p&gt;Will these catch everything?  Not even a chance.  However, when I have seen practices
like this implemented, it has always made a sizable impact in the quality of the
project.  And truthfully, any decent reduction in the cost of a change is usually
worth it.  It is just about paying the right cost as the earliest
time possible.  Noticing a requirement seems off before coding starts?  It can
be a five-minute conversation, or it may evolve into a meeting with a small group.
But avoiding the act of properly reading that requirement until one or more integration
tests expose that issue?  That cost will definitely exceed the cost of that small
group meeting.&lt;/p&gt;
&lt;p&gt;And the other part of that is simple. As a developer, I always wanted to write decent
quality code, because the person maintaining that code was most likely going to be
me.&lt;/p&gt;
&lt;h2 id="shift-left-on-pymarkdown"&gt;Shift Left on PyMarkdown&lt;a class="headerlink" href="#shift-left-on-pymarkdown" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;How does this all apply to the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project?&lt;/p&gt;
&lt;p&gt;While I try as hard as possible to catch everything up front during the implementation
phase, things do slip through.  As of this Sunday morning, I have 4530 scenario tests
that are executed for each change.  Of those tests, 36 are skipped with 12 of those
skips being for placeholder implementations of extensions.  That leaves 24 scenario
tests for issues that slipped through the cracks. According to my math, which means
that over 99.4% of the scenario tests are passing.  Not a bad number, but I still
would like it to be better.&lt;/p&gt;
&lt;p&gt;And to be clear, that count of 4530 scenario tests are not just the test scenarios
provided by the &lt;a href="https://github.github.com/gfm/"&gt;Github Flavored Markdown&lt;/a&gt; specification,
but every scenario test I have been able to create.  That includes the 673 scenarios
presented in the GFM specification, but also stresses the complications that arise
from container elements.  If I had to guess, I would say that at least half of the
current scenario tests are tests specifically for the handling of container elements.&lt;/p&gt;
&lt;p&gt;But that percentage of passing tests is a deliberate focus of mine to “Shift Left”
on this and other projects.  While it can often lead me to be frustrated with a new
feature or change not working properly in all cases, I sincerely believe that this
is the right approach.  As I find a single issue at any point in the process, I
look and see if it is an isolated issue or part of a bigger issue.  If it is part
of a bigger issue, I try and identify related scenarios in the “area” of that issue
and add more scenario tests.&lt;/p&gt;
&lt;p&gt;If possible, I do this when I am adding something new, but I am not always
that lucky.  But from where I sit, I am still trying to push it to the left.  I am
not waiting around for a user to complain that it is not working properly, I am
actively investing my time to prove to myself that the project is working properly.
Sure, some of the scenario tests are probably never going to get hit by users,
but those tests are still important. Each one of those tests is a path that may
not have been covered before.&lt;/p&gt;
&lt;p&gt;What it comes down to me is the answer to a simple question: What amount of confidence
do I have that the project is working properly?  My simple answer is: yes! I have
thrown everything I can think of against it and can prove that.  And if I miss
something, I am graceful in that I know I cannot think of everything and use that
new information to build better tests.&lt;/p&gt;
&lt;p&gt;For me, shifting left just helps me get that confidence as efficiently as possible.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having recently been able to squash an issue that impacted three scenario tests,
I compiled a brief list of other tests to revisit.  I am not sure if I will be able
to find their solutions, but at least I feel momentum in that direction.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>PyLint Utilities - Reaching For High Code Coverage</title><link href="https://jackdewinter.github.io/2022/05/02/pylint-utilities-reaching-for-high-code-coverage/" rel="alternate"></link><published>2022-05-02T00:00:00-07:00</published><updated>2022-05-02T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-05-02:/2022/05/02/pylint-utilities-reaching-for-high-code-coverage/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/"&gt;last article&lt;/a&gt;, I
talked about the first
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; plugin that I created
as part of my
&lt;a href="https://github.com/jackdewinter/pylint_utils"&gt;PyLint Utilities&lt;/a&gt; project.
In this article, I talk about the changes that I incorporated into both projects
to get their code coverage percentages up to 100%.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From past articles …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/"&gt;last article&lt;/a&gt;, I
talked about the first
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; plugin that I created
as part of my
&lt;a href="https://github.com/jackdewinter/pylint_utils"&gt;PyLint Utilities&lt;/a&gt; project.
In this article, I talk about the changes that I incorporated into both projects
to get their code coverage percentages up to 100%.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From past articles, longtime readers will understand that I view quality and
the metrics that help me understand that quality on a sliding scale.  One of the most
basic and useful metrics that use is tracking the code coverage of tests that are in place
for the components being tested.  To be clear, I agree with  people that argue that
code coverage is not the be all and end all of quality.  But I also argue
very confidently that it is not a metric to be easily dismissed.&lt;/p&gt;
&lt;p&gt;Code coverage does not measure if a project is working properly. It
measures whether each line of code has been executed at least once.  A project can
have 100% code coverage and still fail to meet its criteria for a project that
meets its intended goal.
From my point of view, which is where scenario tests come in.  And whether those
tests are a complete picture of how the team envisions the project being used is
a trickier thing to measure.  That is why many teams, for each piece of work,
construct individual
&lt;a href="https://www.leadingagile.com/2014/09/acceptance-criteria/"&gt;acceptance criteria&lt;/a&gt;
or maintain collections of rules called
&lt;a href="https://www.leadingagile.com/2017/02/definition-of-done/"&gt;Definition of Done&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To be honest, I have not seen any automated way to review either of these.  As a
professional, I can create scenario tests that exercise these two concepts with
respect to what I am testing.  But those scenario tests need human review
to determine if they are doing what they are supposed to.  But by combining the
exactness of code coverage with the observable scenario tests, I believe it is
possible to get a product that is well-tested and that does what it is supposed
to do.&lt;/p&gt;
&lt;p&gt;And most of the time, getting there is half the fun.&lt;/p&gt;
&lt;h2 id="slight-adjustments-to-project-summarizer"&gt;Slight Adjustments to Project Summarizer&lt;a class="headerlink" href="#slight-adjustments-to-project-summarizer" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To start off, before I made these adjustments to deal with this new plugin, I had
confidence that the scenario tests were testing the right things and I knew that
the code coverage was at one hundred percent.  From my viewpoint, it was a well tested
project that was doing what I needed it to do.  And it meant that I wanted to
keep those confidence levels where they were going forward.&lt;/p&gt;
&lt;p&gt;Cue the hard work!&lt;/p&gt;
&lt;h3 id="nice-side-effect-finding-a-setup-issue"&gt;Nice Side Effect - Finding A Setup Issue&lt;a class="headerlink" href="#nice-side-effect-finding-a-setup-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the start of testing the new plugin, I ran into an issue right away: I
could not execute the Project Summarizer from its package.  I tried executing it
locally, and there were no problems, but when I looked in the local package that
I was using, some of the files were missing.&lt;/p&gt;
&lt;p&gt;After a bit of work, I found myself looking at these lines in the &lt;code&gt;setup.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PACKAGE_MODULES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"project_summarizer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the uploaded package, everything was fine.  I knew something changed.
Examining the contents of the new package more closely, I noticed that only the
files that I refactored into their own directories were missing.  Given that observation,
I tried this change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PACKAGE_MODULES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"project_summarizer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"project_summarizer.plugin_manager"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"project_summarizer.plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And was greeted with success!  I was able to execute the Project Summarizer project
without any issues.  Talk about a bit of a testing hole that I need to address in
the future!&lt;/p&gt;
&lt;h3 id="debugging-the-dictionary-issue"&gt;Debugging The Dictionary Issue&lt;a class="headerlink" href="#debugging-the-dictionary-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One command line argument that I have in other projects that I had not added to this
project was the &lt;code&gt;--stack-trace&lt;/code&gt; argument.  It is a simple argument that instructs
the error handling to also print out a stack trace.  It is not useful in everyday
use, but when I need a stack trace of a failure, it is invaluable.&lt;/p&gt;
&lt;p&gt;And this was the case with the new plugin and the &lt;code&gt;save_summary_file&lt;/code&gt; function.
When the exception occurred, it was reporting that it was having issues dealing
with generating a report, but nothing more specific.  That was by intentional and by design.
When things fail, I do not want any users getting cryptic error
messages that confuse them.  As such, I keep the error messages as generic and
easy to read as possible.&lt;/p&gt;
&lt;p&gt;But in this case, I needed to debug the issue and I just wanted something simple.
Remembering that I have the &lt;code&gt;--stack-trace&lt;/code&gt; argument in other projects, I quickly
added it to the Project Summarizer project, where it immediately pointed out that
the issue was with the &lt;code&gt;save_summary_file&lt;/code&gt; and that it was passed a dictionary
object to save.  As the object to save was already a dictionary, calling &lt;code&gt;to_dict&lt;/code&gt;
on it was causing the error.  A quick fix and some added tests, and that issue was
cleared up.&lt;/p&gt;
&lt;p&gt;While I hope to not need that argument again, I now know it is there in case
I need it for future debugging sessions.&lt;/p&gt;
&lt;h3 id="easy-is-not-always-easy"&gt;Easy Is Not Always Easy&lt;a class="headerlink" href="#easy-is-not-always-easy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I designed the plugin architecture, I wanted something that was simple and
easy to use.  I did not anticipate any large manipulation of
data within the plugins: they were supposed to summarize data that was already
present.&lt;/p&gt;
&lt;p&gt;But then when I started testing the PyLint_Utils plugin, I
hit a snag.  The current design allowed each plugin to format the data
and print it out in its own format.  Since I want to keep things simple, I coded
all three implemented plugins to use the &lt;code&gt;columnar&lt;/code&gt; package to format the data.
I did not have any issues with this approach for the first two plugins, so I
did not anticipate any issues using it again for the PyLint_Utils plugin. Until it
failed.  It was able to load
the plugin module but failed to load the &lt;code&gt;columnar&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;I researched this for two nights before determining that it was likely
not possible to do.  What I mean by that is that it may be possible, but after two
nights and five hours of research and experimentation, I was not able to find it.
I needed a Plan B.  Seeing as I figured out that every plugin was going to be
using some manner of package for outputting the summary… I cheated.  While
there are other columnizers out there, I already have &lt;code&gt;columnar&lt;/code&gt; installed for
the base package.  As such, I just changed the interface to the &lt;code&gt;generate_report&lt;/code&gt;
function.  If a tuple is returned, it is used as the three primary parameters
for &lt;code&gt;columnar&lt;/code&gt;: justification, title, and rows.  Problem solved.  Not pretty,
but problem solved.&lt;/p&gt;
&lt;h2 id="switching-to-pylint_utilities"&gt;Switching To PyLint_Utilities&lt;a class="headerlink" href="#switching-to-pylint_utilities" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With those issues dealt with, the Project Summarizer project was back at
100% code coverage and all relevant scenario tests were in place.  So, it was time to
get back to the thing that initiated those changed, the PyLint_Utils project.
It turns out that more then half of the changes I needed to execute the PyLint_Utils
project were in the Project Summarizer, so I thought I was home free.&lt;/p&gt;
&lt;p&gt;And then I got down to improving the code coverage.&lt;/p&gt;
&lt;h3 id="there-is-only-so-much-you-can-cover-normally"&gt;There Is Only So Much You Can Cover Normally&lt;a class="headerlink" href="#there-is-only-so-much-you-can-cover-normally" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First off, I want to stress that I am a bit of a fanatic about scenario test coverage
and code coverage.  If it is a normal application, I have a general rule that it
should have at least 75% code coverage, scenario tests for all “good” paths, and
scenario tests for any “bad” paths that a team feels will be hit a fair amount.
And yes, “a fair amount” is a judgement call.&lt;/p&gt;
&lt;p&gt;The good paths are an easy goal for me to
justify. If everything goes properly, you know that users will hit those paths.  The bad
paths are a bit more nuanced.  From my viewpoint, I start with this question: what
are the things that I would mess up or have messed up when using the application?
Things like missing parameters and bad or wrong file names are easy targets.  I mess
those up all the time.  That is usually a good starting point for error-related or
“bad” pieces of the project to include.&lt;/p&gt;
&lt;p&gt;From there, the cost of covering the paths start going uphill very quickly. And for
each path, it comes down to the question of whether the cost of covering that “bad”
path is enough of a benefit to warrant the cost involved.  And the cost can be
varied.&lt;/p&gt;
&lt;h3 id="hiding-things-in-plain-sight"&gt;Hiding Things In Plain Sight&lt;a class="headerlink" href="#hiding-things-in-plain-sight" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing that I do to determine cost is to try and see if I can do something
simple to write
a new scenario test without too many changes.  Can I change the file from a JSON file to a
non-JSON file or a directory to set off error handling?  Can I use two parameters
together and make sure they do not conflict?  Is there an existing path that I
can leverage?&lt;/p&gt;
&lt;p&gt;But sometimes, I must be sneaky.  Take this “hidden” parameter that I
have in the PyLint_Utils project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"--x-display"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"x_test_display"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUPPRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That parameter is not visible using &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt;, but if you use it in a normal
command line, the application will not complain.  How is that? The &lt;code&gt;argparse.SUPPRESS&lt;/code&gt;
suppresses that argument from being shown.&lt;/p&gt;
&lt;p&gt;So why take this approach?  In this case, that flag sets off this logic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__display_progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isatty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x_test_display&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__verbose_mode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have no control over what &lt;code&gt;sys.stdout.isatty()&lt;/code&gt; returns, at least not yet.  As
such, this is a simple and easy to read way to alter the results of that function.&lt;/p&gt;
&lt;h3 id="what-about-mocks"&gt;What About Mocks?&lt;a class="headerlink" href="#what-about-mocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is where the &lt;code&gt;not yet&lt;/code&gt; from the previous paragraph kick in.&lt;/p&gt;
&lt;p&gt;From my experience, mocks are most useful when you want to test something that has
many moving pieces to it.  To use the equation, I postulated a couple of sections
ago, is the cost of making the change worth the benefit of that change?&lt;/p&gt;
&lt;p&gt;For me, the answer to that question is heavily based on experience.  The benefit
of that equation is the easy part to define.  Either using some other method or
completing the block will properly test part of the code.  The cost is much
more difficult to define.&lt;/p&gt;
&lt;p&gt;A good example of this difficulty is the &lt;code&gt;PatchBuiltinOpen&lt;/code&gt; class that I use for mocking file
open calls, located &lt;a href="https://github.com/jackdewinter/pyscan/blob/master/test/patch_builtin_open.py"&gt;here&lt;/a&gt;.
I have used this for testing various smaller Python projects for almost as long as I have
been working in Python, and I find this object really good at getting into tight
places for code coverage.  This mock class patches the built-in &lt;code&gt;open&lt;/code&gt; call for
files and provides the &lt;code&gt;register_text_content&lt;/code&gt; function and the &lt;code&gt;register_exception&lt;/code&gt;
function to control what gets controlled.  If the filename passed to those functions
matches the argument for the &lt;code&gt;open&lt;/code&gt; function, one of those two behaviors is returned.
If not, the mock object needs to carefully un-patch itself, call the original function,
and then patch itself again.&lt;/p&gt;
&lt;p&gt;Even without looking at the source code for the &lt;code&gt;PatchBuiltinOpen&lt;/code&gt; class, it is obvious
that the function has a significant amount of code to accomplish those tasks.  Why?
Because it takes a sizeable number of sentences to describe what it does.  And then
there is the invocation of this behavior.  To mock an &lt;code&gt;open&lt;/code&gt; function call that is
buried within the code called from the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;execute_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;supplied_arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this is the code required:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pbo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PatchBuiltinOpen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pbo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;test_file_to_scan_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"wt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception_message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock_exception_message&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pbo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;execute_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;supplied_arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pbo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not simple.  This is a sledgehammer.  Granted, a nice sledgehammer that
has been well used, well-polished, and carefully taken care of, but it is a
sledgehammer.  And in my experience, code sledgehammers increase cost.&lt;/p&gt;
&lt;h3 id="but-sometimes-there-are-no-other-options"&gt;But Sometimes There Are No Other Options&lt;a class="headerlink" href="#but-sometimes-there-are-no-other-options" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having taken care of the majority of the code coverage for the project, I was left with
a small amount of code to cover.  This code was code that was enacted after the
&lt;code&gt;subprocess.Popen&lt;/code&gt; function is called when PyLint_Utils calls PyLint itself.
In terms of benefit, it was the only handful of lines that were not covered.
In terms of cost, the only option was to mock out the function call.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;PatchSubprocessPopen&lt;/code&gt; was the result.  Copying the bulk of the functionality
from the &lt;code&gt;PatchBuiltinOpen&lt;/code&gt; class, I was able to save a lot of time.  Another
thing that kept the cost down was that as of right now, I only needed the mock
object to be specifically for this one scenario test.  As such, I was able to
tailor it very specifically for the tests in which it was used.&lt;/p&gt;
&lt;p&gt;But even then, it was a headache to get right.  I had to make sure I read each
variable from the &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt; parameters properly, translating them
into values I could use.  As &lt;code&gt;POpen&lt;/code&gt; can be called multiple times, I had to
make sure I had a passthrough in there.  And debugging it was not the best
experience I had.&lt;/p&gt;
&lt;p&gt;But in the end, to get from over 99.5% to 100% was worth it to me.  I was
able to get more experience with mock objects in Python, and I was able to
close the gap in code coverage.&lt;/p&gt;
&lt;p&gt;For me, it was worth it.  But it was costly.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What Is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that bulk of work wrapped up, I am hoping to get some time back on
the PyMarkdown project in the next week.  Here is hoping for that!
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="pylint_utils"></category></entry><entry><title>PyLint Utilities - A Long Time Coming</title><link href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/" rel="alternate"></link><published>2022-04-25T00:00:00-07:00</published><updated>2022-04-25T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-04-25:/2022/04/25/pylint-utilities-a-long-time-coming/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/18/project-summarizer-filling-out-plugin-support/"&gt;last article&lt;/a&gt;, I
talked about taking my plugin work on the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
project to its logical conclusion by adding proper plugin support to the project.
In this article, I talk about the first external plugin: PyLint Utilities.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe that most software development professionals have …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/18/project-summarizer-filling-out-plugin-support/"&gt;last article&lt;/a&gt;, I
talked about taking my plugin work on the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
project to its logical conclusion by adding proper plugin support to the project.
In this article, I talk about the first external plugin: PyLint Utilities.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe that most software development professionals have little packages of
utilities that they use personally.  Be it something simple to set up their
environment consistently or a more complex utility to handle something that
is either bothersome or error prone.  We have all got fed up with having to do
repeat something repeatedly.  And once it hits a certain threshold in
our brain, we decide to write something to deal with it.&lt;/p&gt;
&lt;p&gt;Most of the time, those utilities never seen public consumption.  I mean, they
are OUR utilities.  But sometimes, as with my
&lt;a href="https://github.com/jackdewinter/pylint_utils"&gt;PyLint Utilities&lt;/a&gt;
project, they get to a point where we want to clean them up and share them.
This is one of the utilities that I want to share.&lt;/p&gt;
&lt;h2 id="why-a-long-time-coming"&gt;Why A Long Time Coming?&lt;a class="headerlink" href="#why-a-long-time-coming" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, the easy answer to that question is that I have been working on the
&lt;a href="https://github.com/jackdewinter/pylint_utils"&gt;PyLint Utilities&lt;/a&gt;
project for at least the last four months.  According to the commit logs
for the project, it was 2021 Nov 26 when I added the first commit to the project.
Following that, I did work over the Christmas holidays to start padding it
out.  But I have been using it in various forms during that time to help guide
me on how things are going with my projects, especially on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;Between the start of the year and April, I made small modifications to the
various utilities, tuning them and making them work better.  Nothing significant,
just minor changes to make them work better under various conditions.  It was
when I sat back and looked at the collection of utilities as a whole did I realize
that I had an application which had utilities that might be useful to others.  It was
only then that added the necessary project files and scenario tests to bring the
project up to a releasable level.&lt;/p&gt;
&lt;p&gt;Up to that point, it essentially was just a place for me to “doodle with code”
to try and address some issues that I was trying to solve.  It meant a bit of
a mindset change on how I looked at the project, but after a couple of weeks,
I was okay with it.  It just felt weird taking a proof-of-concept (what I
would refer to as a “code doodle”) and releasing it as a project.  I am getting
used to it though.&lt;/p&gt;
&lt;h2 id="so-what-are-those-utilities"&gt;So What Are Those Utilities?&lt;a class="headerlink" href="#so-what-are-those-utilities" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be honest, this project started out as a bit of a toy application that helped me with
my PyLint suppressions.  Each one of the concerns that I had was addressed with
one of the utilities that I added.  I did not consider any of the utilities
noteworthy on their own, but they were still useful to me.&lt;/p&gt;
&lt;h3 id="balanced-suppressions"&gt;Balanced Suppressions&lt;a class="headerlink" href="#balanced-suppressions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I measure quality in a project on a sliding scale.  I have no problem with warnings
of any quality analysis being suppressed if there is some accounting for
those suppressions within a project.  I am not talking about the rare 2-4
suppressions that I typically do in a project where the code coverage mechanism
does not cover something that I know is covered.  Those are what I would consider to
be a “cost of doing business”.  These are unique to the project warnings that are
actual warning signals, not warning noise.&lt;/p&gt;
&lt;p&gt;To that extent, I believe that each suppression should be added to the code with
the smallest scope possible.  If I am not excluding that suppression throughout
the entire project in configuration files, that I feel that I should be expected
to present a focused suppression around where that warning occurs.  Otherwise,
I feel that I am doing myself and the project a disservice.&lt;/p&gt;
&lt;p&gt;And I am particularly good with following that policy around 95% of the time.  However,
I acknowledge that
I am not perfect.  There are times that I have disabled a warning on line 50 of
a 900+ line Python file, only to forget to enable it again on line 90 when the
function was finished.  There are times where I have copied and pasted an enable
suppression line to the start of a function, only to wonder why it is still showing
up when I run PyLint, because I am 100% positive that when I read &lt;code&gt;enabled&lt;/code&gt;, it
said &lt;code&gt;disabled&lt;/code&gt;. Yup… I hope I am not alone in making those mistakes.  As an old
college professor once reminded us “sometimes you cannot see the forest because you
are too busy looking at the trees.”&lt;/p&gt;
&lt;p&gt;To account for myself making those mistakes, the first utility that I added was for
balanced suppressions.
The rules are simple.  Except for &lt;code&gt;too-many-lines&lt;/code&gt;, any &lt;code&gt;disable&lt;/code&gt; must be followed
by an &lt;code&gt;enable&lt;/code&gt;.  Disabling something that is already disabled is not allowed, as
well as enabling something that is already enabled.  And yes, I have done each of
those before, at least five times each… this month.  The utility simple loads up
each Python file, parses for suppression lines, and looks for regions that do not
follow those rules.  If any mismatch is found, an error is reported.  Simple.&lt;/p&gt;
&lt;p&gt;Now, I do realize that this kind of utility might seem silly to other developers,
but for me it is about my confidence in my work.  After I run that utility, I am
confident that my suppressions are properly balanced.  No guesswork involved.
To me, that confidence is worth a bit of code and investment.&lt;/p&gt;
&lt;h3 id="generating-reports"&gt;Generating Reports&lt;a class="headerlink" href="#generating-reports" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With that utility completed, the next utility that I added was to report on the suppressions
that exist in the code.  As I measure quality on a sliding scale, it was important
for me to know where I stood with PyLint suppressions in my various projects.  To
be clear, I do not believe there is any concrete “thou must have” or “thou must not”
have rules in a code base.  My thoughts are that “should have” things increase the
quality and “should not have” things decrease the quality.  As such, keeping track
of the suppressions in the project helps me track where any suppression is on
that scale.&lt;/p&gt;
&lt;p&gt;This utility was simple to write, especially after my work in the previous
utility to make verify that each set of suppressions are balanced.  It ended up
being a few lines of code added to the tracking of each &lt;code&gt;disabled&lt;/code&gt; suppression
in the code, keeping a running total of how many times the utility encountered each
suppression and where that suppression was encountered.  After that, it was just
throwing the data into a JSON object and writing the file somewhere.&lt;/p&gt;
&lt;p&gt;An example of that report file for the &lt;code&gt;PyLint_Utils&lt;/code&gt; project itself is currently
as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"disables-by-file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/__init__.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/__main__.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/file_scanner.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/main.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"broad-except"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"too-many-arguments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"too-many-locals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/pylint_comment_scanner.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/simple_logging.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/version.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;"disables-by-name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"broad-except"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"too-many-arguments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"too-many-locals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use this report as more of a sanity check than a guide to refactoring.
The JSON object that I write includes a &lt;code&gt;disables-by-file&lt;/code&gt; section as well as
a &lt;code&gt;disables-by-name&lt;/code&gt; section.  If something looks weird in the &lt;code&gt;disables-by-name&lt;/code&gt;
section, I can quickly look to see where the modules that use that section
are and look at each one individually.  From there, it is a judgement call on
my part as to whether I should refactor.&lt;/p&gt;
&lt;p&gt;The benefit of this utility to me is in having that information presented to me
in a clear format that informs on my judgement calls. And removing some of the
guesswork from that judgement call is a win in my books.&lt;/p&gt;
&lt;h3 id="finding-unused-suppressions"&gt;Finding Unused Suppressions&lt;a class="headerlink" href="#finding-unused-suppressions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the interesting utility for me.  When I do decide to take those steps to
refactor a function, I want to have something simple to tell me if I have
mitigated the need for a suppression.  From experience, even if there is another
reason for the refactoring, it typically will include a desire to reduce some
manner of suppressions.  And while I can run PyLint again and not see the warning,
PyLint does not tell me if a suppression already in the code base is no longer
needed.&lt;/p&gt;
&lt;p&gt;Logically following that, I ended up writing something simple to rescan files with individual suppressions
disabled. It is a bit terse, but it works.  The utility simply takes that file,
rewrites it without a given pair of suppression statements, and verifies that
the warning is still emitted.  If it is not emitted, then the suppression is no
longer needed.&lt;/p&gt;
&lt;p&gt;And for any readers of this blog, the benefit of that to me should be obvious.
I love keeping my code clean!&lt;/p&gt;
&lt;h2 id="why-talk-about-it-now"&gt;Why Talk About It Now?&lt;a class="headerlink" href="#why-talk-about-it-now" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given that information about the utilities I created, I noticed one thing about how
I was using those utilities: I was using them to track PyLint suppressions and
keep my usage of those suppression in check.
Specifically, it occurred to me that since I am tracking the number of tests and
code coverage for those tests, it just made sense to me to track the PyLint suppressions
in an equivalent manner.&lt;/p&gt;
&lt;p&gt;To roll things back a bit, let me start at the beginning.
Collecting information about the tests that were run and their execution states
was an easy decision for me.  By using the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project,
I can make sure to keep track of how many tests are in place and if any of them
are failing.  While I have always made sure all new tests and old tests were passing
before committing code, test-driven development allows for committing failing tests
that get enabled when they pass.  I just work in small increments and use &lt;code&gt;skip&lt;/code&gt;
statements to achieve the same effect without failing tests.  Just a small personal
change to test-driven development that gets the same results.&lt;/p&gt;
&lt;p&gt;Then there is the matter of collecting information about the code coverage metrics
for those tests.  Once again, the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project
allows me to track the coverage percentage on two distinct levels (lines and branches)
to ensure that the percentage is a healthy one for the project.  While my absolute
baseline percentage for a released project is 75%, I can drive that number up into
the high 90s without that much effort.  And as most of the projects that I work
on are lower-level projects, it makes sense to me to ensure that code coverage
percentages are more than 95%.  For me, if I will not accept a package into any
of my projects without decent testing or decent code coverage, I need to be showing
that same respect to users of my projects.&lt;/p&gt;
&lt;p&gt;And that brings me to the PyLint Utilities project.  Both the first and third purposes of
these utilities, ensuring balanced suppressions and finding unused suppressions,
are actions that are taken to improve the projects.  But generating reports, the
second purpose, is one that fits in very nicely like the two existing plugins for
the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project.&lt;/p&gt;
&lt;h3 id="tell-me-more"&gt;Tell Me More&lt;a class="headerlink" href="#tell-me-more" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Why is that?  I believe I have said before that it is more important to track
quality in a project than to get it to a “golden” state.  Noting that a project
only has a handful of tests is more important than immediately adding new tests.
The most obvious reason for that is that it is best to understand what needs to
be tested before adding those new tests.&lt;/p&gt;
&lt;p&gt;That is where noting the code coverage for a project comes into play.  I have joined
teams with no quality measurement in place.  The first thing I say to that team is
not “shame, no code coverage”, but “we need to know what we are dealing with in order
to move forward”.  Besides coming across as a jerk with the first suggestions,
it will [reduce their desire to] improve the code coverage.  In addition, there
is a chance that their code coverage is already decent for their project and the
stage it is at.  Only after doing a good analysis of the project can things move forward.&lt;/p&gt;
&lt;p&gt;Which brings me to PyLint suppressions.  As I have mentioned before, I use these
suppressions to effectively confirm that I have seen the warning and know about
it.  To me, that warning itself is not a big thing, but just a thing.  What concerns
me is a pattern of suppressing the warnings without trying to improve on the code
to make those warnings not needed.  This philosophy merges in very well with my
philosophy on code coverage.  It is my belief that my comments in the previous
paragraph about code coverage, knowing what we are dealing with, and moving
forward are as equally applicable to suppressions as to code coverage.&lt;/p&gt;
&lt;p&gt;From those similarities, it should be easy to see why I want to add a plugin
for the Project Summarizer project to report this.  I mean, if it is good enough
for code coverage, it should be good enough for suppressions.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What Is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that I have gone through the new utility project that I have just made
public, next week I am going to start providing plugin integration to the
Project Summarizer project.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="pylint_utils"></category></entry></feed>