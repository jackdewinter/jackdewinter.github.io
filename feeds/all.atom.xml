<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack's Digital Workbench</title><link href="https://jackdewinter.github.io/" rel="alternate"></link><link href="https://jackdewinter.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jackdewinter.github.io/</id><updated>2022-09-12T00:00:00-07:00</updated><entry><title>My Love of Short Film</title><link href="https://jackdewinter.github.io/2022/09/12/my-love-of-short-film/" rel="alternate"></link><published>2022-09-12T00:00:00-07:00</published><updated>2022-09-12T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-09-12:/2022/09/12/my-love-of-short-film/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/09/06/inspiration-comes-at-weird-moments-in-our-life/"&gt;last article&lt;/a&gt;, I talked about
how inspiration struck me for that article… and when.  Continuing along with that
train of thought, I thought I would talk about my love of film, especially short film.
Especially how it inspires me.&lt;/p&gt;
&lt;h2 id="it-started-a-long-time-ago"&gt;It Started A Long Time Ago&lt;a class="headerlink" href="#it-started-a-long-time-ago" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/09/06/inspiration-comes-at-weird-moments-in-our-life/"&gt;last article&lt;/a&gt;, I talked about
how inspiration struck me for that article… and when.  Continuing along with that
train of thought, I thought I would talk about my love of film, especially short film.
Especially how it inspires me.&lt;/p&gt;
&lt;h2 id="it-started-a-long-time-ago"&gt;It Started A Long Time Ago&lt;a class="headerlink" href="#it-started-a-long-time-ago" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I think back to the most memorable times of my life, there are usually
movies associated with each of those moments.  Before my parents split up, I can remember
watching Godzilla movies like &lt;a href="https://letterboxd.com/film/godzilla-vs-mechagodzilla/"&gt;Godzilla Vs Mechagodzilla&lt;/a&gt;
with my cousins at their house.  I can remember the many
Christmastimes where my mother and I watched &lt;a href="https://letterboxd.com/film/white-christmas/"&gt;White Christmas&lt;/a&gt;
and sang along with the songs that we knew by heart.  I can remember my mother
saving up money so that we could see &lt;a href="https://letterboxd.com/film/star-wars/"&gt;Star Wars&lt;/a&gt;
together as a family (minus my dad) after my parents divorced.  And after my youngest son was born, I
fondly remember going to see &lt;a href="https://letterboxd.com/film/the-country-bears/"&gt;The Country Bears&lt;/a&gt;
with my daughter.&lt;/p&gt;
&lt;p&gt;I can go on and on, with interesting memories of movies and the times and
circumstances around those movies.  But there are also movies that I watched just
to watch a movie and see if the people behind the movie were going to do something
interesting.  As someone who is creative in his personal life and professional
life, it interests me to see what people come up with.
Be it an interesting plot twist or a very predictable plot twist done
with style, it does not really matter.  It is the craft with which these
movies are made that speaks to me.  And different movies speak to me in different
ways.&lt;/p&gt;
&lt;p&gt;For example, let me start with &lt;a href="https://letterboxd.com/film/avatar/"&gt;Avatar&lt;/a&gt;.  I
have had interesting discussions on whether this is a good movie with many people.
Some people say it is overrated and some say the acting is wooden. Some people say
there is too much animation and some people say there is enough animation.  I think
they are all missing the point. From my viewpoint, James Cameron had a vision of
how he wanted the movie to look and sound, and he delivered on that vision.
I personally liked the movie’s other qualities, as did many other people apparently
judging by the box office numbers. But for me it was more about the cinematography,
the animation, the audio, and the creativity that made this a fantastic movie for me.&lt;/p&gt;
&lt;p&gt;On the other side of the coin, there is &lt;a href="https://letterboxd.com/film/flash-gordon-1980/"&gt;Flash Gordon&lt;/a&gt;.
I do admit, this is one of the corniest favorite movies of mine, but I will not
back down from saying it is a great movie.  First off, I am a major fan of the rock
group Queen, and they wrote and performed most of the music in the movie.
Next are the visuals.  The original &lt;a href="https://letterboxd.com/film/flash-gordon/"&gt;Flash Gordon&lt;/a&gt;
movies came out in the late 1930s and I passionately believe that the producers of the
1980 film tried to keep the look and feel of the 1930s movie, while upgrading them
to be a bit psychedelic for the 1980s.  Finally… it is a movie that does not take
itself seriously.  From my point of view, which is what completes the movie.  Though
I must admit, seeing &lt;a href="https://letterboxd.com/actor/brian-blessed/"&gt;Brian Blessed&lt;/a&gt; as
a hawkman still makes me smile to this day.&lt;/p&gt;
&lt;p&gt;When I am looking for a new movie to watch, I am looking for a wise way to invest a
good ninety minutes or more in something that may interest me.  It can be
&lt;a href="https://letterboxd.com/film/the-rocky-horror-picture-show/"&gt;schlocky&lt;/a&gt;
or &lt;a href="https://letterboxd.com/bellargregory/list/lord-of-the-rings/"&gt;classic&lt;/a&gt;,
&lt;a href="https://letterboxd.com/film/moon/"&gt;thought provoking&lt;/a&gt;
or &lt;a href="https://letterboxd.com/film/solaris/"&gt;mind-bending&lt;/a&gt;,
&lt;a href="https://letterboxd.com/film/voyage-to-the-bottom-of-the-sea/"&gt;old-time science fiction&lt;/a&gt; or
&lt;a href="https://letterboxd.com/film/forbidden-planet/"&gt;golden-age science fiction&lt;/a&gt;,
&lt;a href="https://letterboxd.com/film/carrie-1976/"&gt;horror&lt;/a&gt; or
&lt;a href="https://letterboxd.com/film/the-devil-and-daniel-mouse/"&gt;downright silly&lt;/a&gt;.
It really does not matter to me.  It just needs to be something where I can
say “yeah, I don’t mind investing that time.”.&lt;/p&gt;
&lt;h2 id="short-films"&gt;Short Films&lt;a class="headerlink" href="#short-films" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As life goes on, the things that you need to do in life build up and consume time.  In
addition, that thing called “energy”, which seems to be in shorter supply these days than
it was in my youth.  On top of that, instead of most movies being ninety minutes as
they were when I was growing up, it is common for movies to be around the two hour
mark, with movies with good stories edging closer to three hours.  But the longer
a movie is, the more it needs to deliver on its value to the movie watcher.  If it
does not deliver, people get bored, give it bad reviews, and stop watching it.&lt;/p&gt;
&lt;p&gt;Let me use the Rocky Horror Picture Show as an example of that.  It is one of the
campiest movies I have ever seen, and I love it!  But at a run time of one hundred
minutes, I must admit that I wish that the movie ended about seven to eight minutes
earlier than it did.  I feel that there are parts of the movie that could have been
tightened up or dropped on the cutting room floor.  But with a run time of
one hundred minutes (and me singing along with the songs in the movie), I would
argue that it has a good length for the film that it is.  A longer movie would
have to have something stellar added in to make
up for the added run time.  And I just do not think that would be possible with
that movie.&lt;/p&gt;
&lt;p&gt;The answer to the run time issue for me are short films.
Short films offer me a chance to roll the dice with many small movies and see
if I like what they are delivering.  Most of these films are between twelve minutes
and thirty minutes in length, allowing me to watch multiple short films in a single
night.  Because I have interesting tastes in movies, I can usually follow the
YouTube recommendations and find interesting themes to go with.  And because the
run time is so low, I do not feel bad if I watch something that is a waste of
time.&lt;/p&gt;
&lt;p&gt;To be honest though, I rarely skip through a movie without giving it at least
three chances.  If I find myself looking at what is next in my queue during the movie, that is
one strike.  If I find myself looking to see what other people have said about
the movie during the movie, that is another strike.  If I find myself wishing the movie would
just end… NOW… that is the third strike.  If it fails on all three counts,
it is likely not to get any better with any added runtime.&lt;/p&gt;
&lt;h2 id="everyone-starts-somewhere"&gt;Everyone Starts Somewhere&lt;a class="headerlink" href="#everyone-starts-somewhere" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are lucky in life, you get to see the early work of someone who later
becomes famous.  I remember talking to someone from nearby Brantford, Ontario who
saw Wayne Gretzky play for his high school team before making it big.  The
man said that he could just see Gretzky naturally figure out how things worked
in that ice rink.  He recalled watching Gretzky play later in life for the Edmonton
Oilers and the Los Angeles Kings, telling me that parts of his play style matured
and parts just remained as iconic as the first time he saw him.  It was just
magic for that hockey fan getting to see someone at both ends of a stellar career.&lt;/p&gt;
&lt;p&gt;In the film world, that person is George Lucas.  Lucas wrote and directed
the film &lt;a href="https://letterboxd.com/film/electronic-labyrinth-thx-1138-4eb/"&gt;Electronic Labyrinth: THX 1138 4EB&lt;/a&gt;
while he was still in film school.  After school Lucas expanded on that fifteen
minute short film and directed &lt;a href="https://letterboxd.com/film/thx-1138/"&gt;THX 1138&lt;/a&gt;
before directing the &lt;a href="https://letterboxd.com/film/star-wars/"&gt;Star Wars&lt;/a&gt; movies
and producing &lt;a href="https://letterboxd.com/producer/george-lucas-1/"&gt;other movies&lt;/a&gt;,
including the &lt;a href="https://letterboxd.com/film/raiders-of-the-lost-ark/"&gt;Indiana Jones&lt;/a&gt;
movies and television series.  But without that first movie and its fifteen
minute run length, it is entirely possible that the rest of his movie career
might not have taken off.&lt;/p&gt;
&lt;p&gt;And especially with smart phones being so advanced these days, it is easier
to express your creativity than ever before.  There are plenty of people
that have promising ideas and just want to get them out there. And to be fair,
there are lots of people with so-so ideas and nasty ideas as well.  But by
the time I find those movies, they have usually been filtered out of what
I am searching for.  But whether I am seeing the next Gretzky, the next Lucas,
or just someone living out their dream to direct a movie, if I can
see their creativity, it is okay with me.&lt;/p&gt;
&lt;p&gt;Short films are a godsend for me.  I get to relax and watch something to see
if it piques my interest, and I get to see if someone might be doing something
interesting enough that I want to see more of their films.  That is something
that I consider inspiring.  Any decent talent can make the second Star Wars
movie, but it took Lucas, his creativity, and the willingness to put himself
out there to make the first Star Wars movie.  That is what these people are
doing… being creative and taking a chance that what they produce will
resonate with viewers.&lt;/p&gt;
&lt;p&gt;And that is what I consider inspiring.&lt;/p&gt;</content><category term="Personal"></category><category term="short film"></category></entry><entry><title>Inspiration Comes At Weird Moments In Our Life</title><link href="https://jackdewinter.github.io/2022/09/06/inspiration-comes-at-weird-moments-in-our-life/" rel="alternate"></link><published>2022-09-06T00:00:00-07:00</published><updated>2022-09-06T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-09-06:/2022/09/06/inspiration-comes-at-weird-moments-in-our-life/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/29/tackling-whitespace/"&gt;last article&lt;/a&gt;, I talked about
my work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project to solidify
how it manages whitespace.  In this article, I talk about how inspiration struck me
for this article… and when.&lt;/p&gt;
&lt;h2 id="to-get-things-started"&gt;To Get Things Started&lt;a class="headerlink" href="#to-get-things-started" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First off, I want to be honest with any readers on …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/29/tackling-whitespace/"&gt;last article&lt;/a&gt;, I talked about
my work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project to solidify
how it manages whitespace.  In this article, I talk about how inspiration struck me
for this article… and when.&lt;/p&gt;
&lt;h2 id="to-get-things-started"&gt;To Get Things Started&lt;a class="headerlink" href="#to-get-things-started" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First off, I want to be honest with any readers on the timing of this article.
It is Tuesday afternoon and I had almost given up on authoring an article this
week.  At this point in most weeks, I have either finished the article and
it is posted, or I am giving it a “24 hour” no-read period to make sure it still
reads like I want it to.  Basically, it is either posted or within two or three
small edits from being posted.  Call me old fashioned, but I always feel better
knowing that I can go back to a document 24 hours after I have finished writing it,
still having it sound the way I wanted it to be.&lt;/p&gt;
&lt;p&gt;This week was different.  With Labor Day here in North America, I spent part of
the day doing yard work and part of the day working on the whitespace handling
that I mentioned last week.  By Monday evening I am usually polishing the article
up if it is not already finished.  But this week I had nothing unique that I
wanted to say.  Sure, I could have put together a low-quality article that said what I
was doing, but it would have been a status report more than an article.&lt;/p&gt;
&lt;p&gt;So, it was interesting to me that I got the inspiration for this article when I sat
down to do some more work on Tuesday evening.  Inspiration is weird.&lt;/p&gt;
&lt;h2 id="the-journey-here"&gt;The Journey Here&lt;a class="headerlink" href="#the-journey-here" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To understand the inspiration, I need to explain how I got there.  The first
part is the easy part: hard work.  In the last week, I have resolved most of
the whitespace issues that I documented prior to last week.  The first
skipped test and the skipped test with tabs and code spans are the only two skipped tests that are
left to fix.  Through hard work and imagination, I managed to crack
through and correct the other thirty-one scenario tests and get them working.&lt;/p&gt;
&lt;p&gt;For the most part, that hard work was correcting one thing or another. A good
example of that was coming up with better names for the various helper functions
that I used to extract whitespace.  To be blunt, my naming sucked.  Granted,
it sucked after learning more about the three types of whitespace, but it still
sucked.  Instead of a generic &lt;code&gt;whitespace&lt;/code&gt; in function names, I created variants
of those functions that used &lt;code&gt;space&lt;/code&gt;, &lt;code&gt;ascii_whitespace&lt;/code&gt;, or &lt;code&gt;unicode_whitespace&lt;/code&gt;
properly.  That took a while to carry out, but it felt good to have those functions
with names that reflected my new understanding.  And as it felt like I was changing
the entire code base, I also refactored a handfull of large functions while I was there. “Always
leave an area better than when you found it” is a good motto of mine.&lt;/p&gt;
&lt;p&gt;To that extent, I just bore down and started working through each of the
thirty-three skipped scenarios, from the bottom to the top.  Why? Because I did
not want to get bored, and I figured starting from the bottom would help me not get bored. Basically,
for no reason other than to do something different.  After all, a list of thirty-three
failed tests is the same to me whether I start at the bottom of the top: they all
need to be fixed.&lt;/p&gt;
&lt;p&gt;For the most part, the last thirty (or first thirty, depending on viewpoint) scenario
tests were relatively easy to fix.  In some cases, I had skipped the test because
I had “thought” it might be bad.  In those cases, I just made sure to verify the
test data and everything worked properly.  There were other cases where I had collected
the expected output HTML improperly, and I just went ahead and fixed those.&lt;/p&gt;
&lt;p&gt;That left the significant issues for me to fix.  The next batch of issues that
I dealt with were dealing with removing whitespace from the start and end of
paragraphs.  Originally, I was removing only &lt;code&gt;spaces&lt;/code&gt;, but the
&lt;a href="https://github.github.com/gfm/"&gt;specification&lt;/a&gt; clearly says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The paragraph’s raw content is formed by concatenating the lines and removing initial and final whitespace.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That took a little bit of figuring out on how to resolve it, but I was able to
resolve it with a minimal amount of code changing.  That was a good find.&lt;/p&gt;
&lt;p&gt;The next issue that I tackled was properly dealing with whitespace at the end of
the end of a fenced code block.  While I was producing the right HTML, I was
not storing that whitespace in the end token.  As a result, when I tried to
rehydrate the Markdown in function &lt;code&gt;test_whitespaces_fenced_code_closed_with_spaces_after&lt;/code&gt;,
there was no space to rehydrate with.  That was a bit more of a chore, requiring
me to add a new field to the end fenced code block token to store that whitespace.
The downside to that was that there was already an optional field at the end of
that token, therefore it made more sense to add it before the serialization of that optional
field.  This affected every end fenced code block token in the scenario tests,
but it was a quick search-and-replace to fix them all. Even so, let me just say
I stopped counting the instances after the first fifty and leave it at that.&lt;/p&gt;
&lt;p&gt;Having completed dealing with the issue of bad whitespace storage in the end
fenced code block token, I thought it was only fitting to look at a similar issue
with not properly stripping whitespace at the end of the fenced code block’s
&lt;code&gt;info string&lt;/code&gt; construct.  Like my quote for paragraphs is the quote for
info strings:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The line with the opening code fence may optionally contain some text following
the code fence; this is trimmed of leading and trailing whitespace and called the info string.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this instance, the start of the info string element was being trimmed properly,
but the end of that same element was only handling &lt;code&gt;spaces&lt;/code&gt; and not &lt;code&gt;whitespace&lt;/code&gt;.
Most of the work there was just handling the extra whitespace characters, but it
did take some time to work out.&lt;/p&gt;
&lt;p&gt;Basically, up to this point everything I did to fix those issues required some
thinking or some changes, but nothing major.  Just me applying solid debugging practices
to every test, putting in the time and getting it working.  By far, the
costliest fix was having to do the search-and-replace for the end fenced code block token,
and that was only tedious, not difficult.  But that would change on Monday.&lt;/p&gt;
&lt;h2 id="and-then-came-monday"&gt;And Then Came Monday&lt;a class="headerlink" href="#and-then-came-monday" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that everyone is caught up, that is when Monday started.  At the start of
Monday, I had three scenario tests that I needed to get working.  One dealt with
properly recognizing a hard break, one was properly handing spaces inside of a
code span, and the last was very first scenario test in the file, the one I have
not even looked at yet.&lt;/p&gt;
&lt;p&gt;This was the place that I needed any inspiration I could find.  This was an interesting problem
to solve and not an easy one.  To make things easier for the project, I replaced any tab characters with the proper
count of space characters.  The downside to approach was that the parser loses any context of
where the original tab characters were.  I knew I did not have an idea on how to
fix it, hence I decided to do something else for a while. Enter yardwork.&lt;/p&gt;
&lt;p&gt;It might sound counter-intuitive, but I find the best way to solve problems and
get inspiration is to do something that is not connected to the problem you are
trying to solve.  In this case, it was a section of our yard that I decided to
not weed, only to change my mind later.  Just freely thinking about things and
staring out into the blue sky helped me reset my mind.  That and clearing about
fifty square feet of backyard from weeds and filling up our yard waste bin to the
top.&lt;/p&gt;
&lt;p&gt;When I came inside, I looked at the problem again and came up with a solution
almost immediately.  I knew that the first thing that I needed to do was to pass the original
string to the lower levels of the parser, to allow the parser tell what the original
whitespace was.  That was easy enough on its own, but it was not enough.  That
change enabled me to properly deal with container tokens and leaf tokens, but
not the inline tokens.  For those tokens, I quickly figured out that I needed to add an optional
field in the text token for a &lt;code&gt;tabified_text&lt;/code&gt; field that would only be populated
for original lines that had tab characters in them.&lt;/p&gt;
&lt;p&gt;As a proof of concept, I worked on the hard break issue and got it working properly
within a couple of hours.  To be fair, most of that time was getting the &lt;code&gt;tabified_text&lt;/code&gt; field
working properly.  Once that was done, I looked back at the specification where
it says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A line break (not in a code span or HTML tag) that is preceded by two or more spaces
and does not occur at the end of a block is parsed as a hard line break&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But in the scenario test where a line in a paragraph ended with two tab characters,
the parser rightfully saw the more than two space characters and decided that there
should be a hard break.  With the new &lt;code&gt;tabified_text&lt;/code&gt; field, I was able to change
the parser to notice that the line did not end with two space characters, returning
the proper HTML.  Once I was inspired to put the right data in the text token,
the rest of the solution almost wrote itself.&lt;/p&gt;
&lt;h2 id="and-then-it-hit-me"&gt;And Then It Hit Me&lt;a class="headerlink" href="#and-then-it-hit-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once again, inspiration comes at weird moments in our life. Having given up on
authoring an article this week, I finished some work downstairs and was taking a quick
shower before starting work on the project for the evening.  As per my routine, I
mentally went over what I did yesterday and what I planned to do today. Just my
usual routine.&lt;/p&gt;
&lt;p&gt;And then a weird thought came into my head.  Instead of using the same backwards
tab lookup concept to fix one or two small issues, what if I used the same approach
to fix all the tab issues?&lt;/p&gt;
&lt;p&gt;To be clear, after the raw line is passed into the Container Block Processor to
look for blocks, one of the first things that is done is to translate the line
into a detabified format.  From that point on, the line information is passed
without any space characters.  But with the original string now available, other
options opened.  It was then that the ideas started flowing.&lt;/p&gt;
&lt;p&gt;The first one was a simple one: what if I applied the same solution to other
elements?  If I had the original line within reach, I should be able to
pull match things up and figure out which space characters belonged to each tab.&lt;/p&gt;
&lt;p&gt;The second idea was a more radical one.  What if I specifically only looked at
any leading whitespace and translated any tabs in that leading whitespace to
space characters.  For the most part, the translated tab characters are only
beneficial for indentation purposes, so it might work.&lt;/p&gt;
&lt;h2 id="where-to-go-from-here"&gt;Where To Go From Here?&lt;a class="headerlink" href="#where-to-go-from-here" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be honest, I am not sure which choice I am going to take.  But that is the
beauty of inspiration!  Not only do I have one possible solution, but that
solution inspired me to think of the other solution.  And not only do I have
two possibly viable solutions to my tab issues, but I had good inspiration for an
article!&lt;/p&gt;
&lt;p&gt;For me, the bonus is that even in my fifties, I am finding new ways of exploring
and analyzing that I previously thought were dead ends.  This is one of the reasons
that I am starting to cultivate other hobbies that deal less and less with computers,
video, and audio and rooting myself more in the real world.  Not only is it better
for me, but it allows me to be inspired more often.  And that is always a good thing!
After all, you never know what weird thought and weird moments in your life will
inspire you!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Tackling Whitespace</title><link href="https://jackdewinter.github.io/2022/08/29/tackling-whitespace/" rel="alternate"></link><published>2022-08-29T00:00:00-07:00</published><updated>2022-08-29T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-08-29:/2022/08/29/tackling-whitespace/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/22/figuring-out-the-best-course-of-action/"&gt;last article&lt;/a&gt;, I talked about
my continuing work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project,
and how I evaluated the adding of new features to the project. In this article,
I talk about going back and ensuring that one of the foundations of any word-based parser
is solid: whitespace handling …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/22/figuring-out-the-best-course-of-action/"&gt;last article&lt;/a&gt;, I talked about
my continuing work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project,
and how I evaluated the adding of new features to the project. In this article,
I talk about going back and ensuring that one of the foundations of any word-based parser
is solid: whitespace handling.&lt;/p&gt;
&lt;h2 id="it-all-starts-with-whitespace"&gt;It All Starts With Whitespace&lt;a class="headerlink" href="#it-all-starts-with-whitespace" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my experience writing over ten different parsing engines over the years, the
one aspect that does not get enough attention is the definition of whitespace
and how it applies to the parser.  For code parsers, whitespace is often seen as
unimportant and is seen as space-filler between the “real” focus of the language:
the keywords.  Even Python, with its indent-based semantics, is not far from that
appraisal.&lt;/p&gt;
&lt;p&gt;But when translating from one language or format to another, whitespace can play
a key role in deciding how something is interpreted.  That is how things are
structured with Markdown, specifically &lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavoured Markdown&lt;/a&gt;
or GFM.  As one of the main goals of Markdown is to allow people to author documents
in a near-authentic format, adding any unnecessary verbiage or formatting was frowned
up.  Specifically, the &lt;a href="https://github.github.com/gfm/#what-is-markdown-"&gt;GFM states&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The overriding design goal for Markdown’s formatting syntax is to make it as readable
as possible. The idea is that a Markdown-formatted document should be publishable as-is,
as plain text, without looking like it’s been marked up with tags or formatting instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To preserve that readability, whitespace is used creatively in Markdown.  A good
example of this is the Indented Code Block.  This is a section of the document,
often computer related code, which needs to be passed unaltered to the reader. As the
name suggests, each line in this code block is preceded by an indent of at least
four spaces.  While it does not have the language naming capability of its sibling
the Fenced Code Block, the Indented Code Block supplies the same code block
experience without negatively affecting the readability.&lt;/p&gt;
&lt;p&gt;But support different experiences in different situations, the use of whitespace
must be broken down a bit.&lt;/p&gt;
&lt;h2 id="whitespace-and-markdown"&gt;Whitespace and Markdown&lt;a class="headerlink" href="#whitespace-and-markdown" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To keep things simple, Markdown provides for three types of whitespace.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.github.com/gfm/#space"&gt;space character&lt;/a&gt; is written as &lt;code&gt;U+0020&lt;/code&gt;
or &lt;code&gt;\u0020&lt;/code&gt; depending on the format.  In many of the cases where
a space is allowed, a &lt;a href="https://github.github.com/gfm/#tabs"&gt;tab character&lt;/a&gt; (&lt;code&gt;\t&lt;/code&gt; or &lt;code&gt;\u0009&lt;/code&gt;)
is allowed and is treated as up to four spaces as if the tab character was a tab stop.  The
fun part there is that most developers think that the tab character is unilaterally
expanded to four spaces, instead of interpreting it as a tab stop.  Therefore,
when reading the specification, any reference to &lt;code&gt;spaces&lt;/code&gt; means a specified number
of space characters or tab characters.&lt;/p&gt;
&lt;p&gt;Expanding from that simple definition of spaces is the definition for
&lt;a href="https://github.github.com/gfm/#whitespace-character"&gt;whitespace characters&lt;/a&gt;.  This
definition includes both the space character and the tab character but adds the
newline character (&lt;code&gt;\n&lt;/code&gt; or &lt;code&gt;\u000a&lt;/code&gt;), line tabulation character (&lt;code&gt;\u000b&lt;/code&gt;),
form feed character (&lt;code&gt;\f&lt;/code&gt; or &lt;code&gt;\u000c&lt;/code&gt;), and carriage return character (&lt;code&gt;\r&lt;/code&gt; or &lt;code&gt;\u000d&lt;/code&gt;).
Basically, what this does is to allow for a whitespace construct that includes any
character that is typically used to separate words, lines or paragraphs.&lt;/p&gt;
&lt;p&gt;Finally, there is the &lt;a href="https://github.github.com/gfm/#unicode-whitespace-character"&gt;Unicode whitespace character&lt;/a&gt;.
This is a more expansive version of the whitespace character, adding all the
characters from the Unicode &lt;code&gt;Zs&lt;/code&gt; and subtracting the line tabulation character.
While I am clear on &lt;a href="https://stackoverflow.com/questions/58421027/what-is-the-use-for-control-characters-in-string-printable#"&gt;the prior use&lt;/a&gt;
of the line tabulation character, I am less clear on why it has fallen out of
use.  My best guess is that with modern systems, the concept of scrolling down
to a given line is outdated, and hence its inclusion into whitespace is less
important than it once was.  But as it is in the specification, I follow it!&lt;/p&gt;
&lt;p&gt;Getting these definitions clear in my head was important to me.  If I am going
to increase my confidence that I have the right type of whitespace selected for
a given element, I need to know what those whitespace types are.&lt;/p&gt;
&lt;p&gt;And before anyone asks… no, this is not glorious work.  But this is necessary work.
The items in the whitespace section have been on the issues list for almost as long
as the project has been around.  I need to make sure that I have a clear
implementation of the whitespace handling for the project.  Not for any sense of ego
or anything like that, but to make sure it is right for the users.  I want that
confidence that I implemented the whitespace handling correctly.&lt;/p&gt;
&lt;h2 id="issue-456-cleaning-up-whitespace"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/456"&gt;Issue 456&lt;/a&gt; - Cleaning Up Whitespace&lt;a class="headerlink" href="#issue-456-cleaning-up-whitespace" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was originally coding the parser behind PyMarkdown, I did not understand
these distinct types of whitespace as I do now.  To bring my understanding more
in line with the specification, I have made minor changes to the way the parser
handles whitespace over the last two years.  But in the back of my mind, I was always
concerned that I missed something.  Hence, there was a section in the original
&lt;code&gt;issues.md&lt;/code&gt; file that dealt with whitespace and correctness.  Having taken a quick
look at that section again, I thought it was an opportune time to finally resolve any confidence
issues I had with whitespace.&lt;/p&gt;
&lt;p&gt;Opening a new issue, I decided to take a muti-task approach to solving any
outstanding issues.  The first part of that was making sure that I had a clear
understanding of what the three distinct types of whitespace were.  Once that
was taken care of, I carefully went through the specification and created a list
in the issue’s ticket, detailing each element and the types of whitespaces contained
within that element.&lt;/p&gt;
&lt;p&gt;The results of that list were interesting: there were four types of whitespace
involved.  The most prevalent whitespace type was the &lt;em&gt;spaces&lt;/em&gt; type, which seems
to be the default whitespace type, appearing in ten elements.  From there, the
&lt;em&gt;whitespaces&lt;/em&gt; type was the next most popular, appearing in six of the elements.
In a tie for last are the whitespace type used in link labels and the whitespace
type used in emphasis.  The emphasis type is the &lt;em&gt;Unicode whitespace&lt;/em&gt; type and
is very expansive on what it includes.&lt;/p&gt;
&lt;p&gt;The new type is the &lt;em&gt;Unicode case fold&lt;/em&gt; used to compare link labels with a matching
Link Reference Definition element.  The best description that I found is
&lt;a href="https://github.com/arodland/Unicode-CaseFold#what-is-case-folding"&gt;in this project&lt;/a&gt;
and basically walks through the answer to the question: how to do a case insensitive
match with a full Unicode codeset.  While I could try and describe the folding
process more, I believe the article does a much better job of explaining it and
would suggest any readers check that article out if they want more information.&lt;/p&gt;
&lt;h2 id="creating-the-scenario-tests"&gt;Creating The Scenario Tests&lt;a class="headerlink" href="#creating-the-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the list compiled, I started the process of adding a new set of scenario test
cases to the project.  As I am a big proponent of Test-Driven Development, it was
imperative that I implemented the tests first so I could understand the scope
of what I needed to deal with. As I have detailed in earlier articles, this is not a fun
process, but a necessary one.  Over three days, I added 166 new scenario tests to
the project, all dealing with testing how whitespace is handled for each of
the elements in the list.  As emphasis is the only element to use the Unicode
whitespace type, and I want to test Unicode punctuation support at the same time,
I left emphasis scenario tests out of that list for now.&lt;/p&gt;
&lt;p&gt;It was a brutal process, but I was used to it (somewhat) by now.  Working through the list,
I copied a series of tests from the series before it, changed the function name and
the function description, and changed the internals.  Then the process was a
simple one: change the Markdown sample to demonstrate the scenario, verify with
Babelmark that &lt;a href="https://commonmark.org/"&gt;CommonMark&lt;/a&gt; produces the same HTML results
that I calculated, and then run the tests themselves.  With the test output, I then
verified that the HTML output matched CommonMark and that the generated PyMarkdown
tokens looked correct.  Lather rinse repeat.  Many times.&lt;/p&gt;
&lt;h2 id="more-work-yet-to-come"&gt;More Work Yet To Come&lt;a class="headerlink" href="#more-work-yet-to-come" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am done generating the 166 new scenario tests.  Along the way, I noticed that
33 of those scenario tests were not functioning properly, so I marked them as
skipped.  My plan for this week is to start attacking that list and see how many
of the scenario tests I can get working by the end of the weekend.  Since it
is the Labor Day holiday weekend, I am going to take it somewhat easy, but I
still want to make significant progress on this task.&lt;/p&gt;
&lt;p&gt;On one hand, the items have lasted almost two years without any progress, so
what is another week.  But that is not good enough for me!  Now that I have an
idea of the work involved,  I want to solve any issues and finally put whitespace issues to
rest.  Stay tuned for the progress!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Figuring Out The Best Course of Action</title><link href="https://jackdewinter.github.io/2022/08/22/figuring-out-the-best-course-of-action/" rel="alternate"></link><published>2022-08-22T00:00:00-07:00</published><updated>2022-08-22T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-08-22:/2022/08/22/figuring-out-the-best-course-of-action/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/15/dealing-with-long-standing-issues/"&gt;last article&lt;/a&gt;, I talked
my continuing work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project,
aiming to get it closer to a solid release.  In this article,
I talk about my thoughts around adding new features to the project.&lt;/p&gt;
&lt;h2 id="adding-features-that-make-sense"&gt;Adding Features That Make Sense&lt;a class="headerlink" href="#adding-features-that-make-sense" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Usually, most new features make sense.  Adding …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/15/dealing-with-long-standing-issues/"&gt;last article&lt;/a&gt;, I talked
my continuing work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project,
aiming to get it closer to a solid release.  In this article,
I talk about my thoughts around adding new features to the project.&lt;/p&gt;
&lt;h2 id="adding-features-that-make-sense"&gt;Adding Features That Make Sense&lt;a class="headerlink" href="#adding-features-that-make-sense" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Usually, most new features make sense.  Adding support to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project to scan for other
extensions besides &lt;code&gt;.md&lt;/code&gt;, that was an easy decision to make.  Adding support for
reading from standard input, a bit more of a nuanced decision, but still a relatively
easy decision to make.&lt;/p&gt;
&lt;p&gt;Then there was the decision to fix a long-standing issue, &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/330"&gt;issue 330&lt;/a&gt;.
That I wanted to fix this was obvious to me, but until recently, the cost of fixing
that issue always outweighed the cost.  To make things easier in the initial stages of
development, I added a couple of &lt;code&gt;replace("\\", "/")&lt;/code&gt; statements in the file scanning
code to allow for Windows backslash separators to be treated as the Posix slash
separator.  Why?  Because then the output always dealt with slashes, regardless of the
operating system involved.  Therefore, the test output always used slashes.&lt;/p&gt;
&lt;p&gt;But after adding the support for standard input, it just felt wrong to leave those
replacement statements in the code.  But paying the cost of fixing that issue was not going to be easy.
Properly fixing the source code for that issue took thirty minutes including
rudimentary testing.  After a quick run of all tests, the impact of fixing the tests was clear: over
450 scenario tests were failing because of that change.  Digging in a bit more, that
was only the failure impact.  If I wanted to do things properly, any of the tests for
rules plugins needed to be changed to use proper pathing instead of the
Posix pathing.  I believe when I sketched things out, I took a guess that over
700 scenario tests would need to change.&lt;/p&gt;
&lt;p&gt;That is not a small number, it is roughly fifteen percent of the scenario tests.
In each test, I would need to change the path of the file to scan from something
like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;source_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"test/resources/rules/md007/some_file_to_scan.md"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;source_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"resources"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"md007"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"some_file_to_scan.md"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;adding that at the top of the scenario test if it was not already there.
With that change done, I then needed to look for any instances of the first
string in the rest of the scenario tests, replacing it with either &lt;code&gt;source_path&lt;/code&gt;
or &lt;code&gt;{source_path}&lt;/code&gt;, depending on if it was already in a string or not.&lt;/p&gt;
&lt;p&gt;But, when I weighed everything out, it was worth it.  This was something that
I had put off for long enough, and the increase in quality was worth the cost
to me. Granted, I thought I could make the transformation in ten hours, but it
was still worth the cost after eighteen hours of changes.  Each change
manual.  It was not fun, but it was a good change.&lt;/p&gt;
&lt;p&gt;The next change was going to be different.  It was going to require deep
thinking on my part.&lt;/p&gt;
&lt;h2 id="sometimes-the-decision-is-not-an-easy-one"&gt;Sometimes, The Decision Is Not An Easy One&lt;a class="headerlink" href="#sometimes-the-decision-is-not-an-easy-one" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned in the last article, one of the users reached out with
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/382"&gt;Issue 382&lt;/a&gt; and asked if
can add support for scanning Markdown in Jupyter notebooks.  Needing to
think things over a bit, I added the support for processing standard input
as it was a good feature and I thought I might need it for this new feature.&lt;/p&gt;
&lt;p&gt;But the big question in my mind was: was this actually a new feature?  Not that
someone could not use this functionality, but was it a feature of PyMarkdown?
Or was it a separate utility? This was not an easy question for me to answer.  I
could see both side of this solution, and in mind, they were balanced almost
equally.&lt;/p&gt;
&lt;p&gt;On the side of adding this support as a PyMarkdown feature, there were two
good points to support it.  The first of those points was that it fit in with the main goal
of the project: to provide a solid Markdown scanner.  It just so happened that
every Markdown sample that I have seen up to this point was either the entire
contents of a file or the entire contents of the standard input.  In my line
of work, which is what we call an implementation detail.  The second of these
points was the ease of use of the scanner.  Programmatically, I could see connecting
the various file types to “input filters”, selecting the correct filter based
on the provide input.  I had done variations on that for extensions and rules
plugins, so would one more plugin type hurt?&lt;/p&gt;
&lt;p&gt;The opposing side was a bit more nuanced.  Depending on how I read the main
goals of the PyMarkdown project, the target could be seen in one of two ways.&lt;br/&gt;
Going all the way back to an article I wrote on &lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;2019 Dec 08&lt;/a&gt;,
there is one line that summarizes this intent:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;must be able to provide a consistent lexical scan of the Markdown document from the command line&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I take that statement literally, then the scan should be dealing with documents, not
smaller units of text.  Of course, an argument could be made that any text “blob” is a
document, but I feel that it is just bending words to fit a scenario, and not
honoring the intent.  Throughout the PyMarkdown project, files are referenced
as a proxy for documents, instead of using terms like file fragments.&lt;/p&gt;
&lt;p&gt;Less nuanced and more pronounced is my sense that including this kind of
support into the PyMarkdown project will make the project too big.  More precisely,
I feel that expanding the scope of the project to include the concept of
“input filters” is not called for.  From a cost-benefit analysis, the cost of
supporting another plugin interface, or even a hard-wired interface, does not
match the perceived benefit.  At least not to me.&lt;/p&gt;
&lt;h2 id="and-the-decision-is"&gt;And The Decision Is…&lt;a class="headerlink" href="#and-the-decision-is" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, after thinking about it and weighing the pros and cons of this support, I
decided to support these features, but in their own project.  That new project will
take care of doing the necessary management to convert the Jupyter notebook
Markdown fragments into a scannable form for PyMarkdown to handle.  To that end,
I will need to enhance the main PyMarkdown module, but I believe those enhancements
will be minor.&lt;/p&gt;
&lt;p&gt;And after worrying about a satisfactory solution for this issue for a couple of weeks, I
am pleased with my decision.  I feel that this will provide a template for any other
such features in the future, allowing me to keep a steady handle on the PyMarkdown
project.  But at the same time, it will allow me to grow the project family while
meeting the needs of the users.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Dealing With Long Standing Issues</title><link href="https://jackdewinter.github.io/2022/08/15/dealing-with-long-standing-issues/" rel="alternate"></link><published>2022-08-15T00:00:00-07:00</published><updated>2022-08-15T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-08-15:/2022/08/15/dealing-with-long-standing-issues/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/08/dealing-with-the-ups-and-downs/"&gt;last article&lt;/a&gt;, I talked
about how my personal life is encountering issues that I need to take
extra time to deal with. This week, I am talk about the continuing work on
the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project to get it
closer to a solid release.&lt;/p&gt;
&lt;h2 id="things-just-take-longer"&gt;Things Just Take Longer …&lt;/h2&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/08/08/dealing-with-the-ups-and-downs/"&gt;last article&lt;/a&gt;, I talked
about how my personal life is encountering issues that I need to take
extra time to deal with. This week, I am talk about the continuing work on
the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project to get it
closer to a solid release.&lt;/p&gt;
&lt;h2 id="things-just-take-longer"&gt;Things Just Take Longer&lt;a class="headerlink" href="#things-just-take-longer" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With all the easy items out of the way, the items that I do pick up seem to take
more time.  But when I think about that, it does make sense.  There is more
experimentation needed, more debugging needed, and often a lot more
thinking about the problem is needed.  And while I wish I could get through to
the finished stage without as much “experimental failure”, I know that it is part
of the process, and just comes with the territory.&lt;/p&gt;
&lt;h2 id="issue-419-empty-space-causes-failure"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/419"&gt;Issue 419&lt;/a&gt; - Empty Space Causes Failure&lt;a class="headerlink" href="#issue-419-empty-space-causes-failure" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Okay, maybe a better title would be helpful.  But honestly, it was hard to try and
summarize it into four words or less.  This was an issue that I found when I was doing
experimentation with the last batch of nested container tests.  Just for laughs,
I added an extra space after an empty list start (&lt;code&gt;1.&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; on its own line) expecting
everything to be fine.  It was not, hence, the issue.&lt;/p&gt;
&lt;p&gt;To start with, I was having a bit of an issue visualizing the code for handling leaf
nodes, which is what I originally thought the problem was.  To help myself, I decided
to split the paragraph handling functions out into their own module, since I have been
thinking about doing that for a while.  Did not help me solve the issue, but it was
another small thing off the list.&lt;/p&gt;
&lt;p&gt;After that I went back and forth between the list processor and the leaf processor,
trying to figure out where the issue was.  I spent a couple of hours
on one, document for myself what I found during those hours, and revert the changes for the next
day.  A couple of iterations into this, I found something interesting.  I had been
convinced that it was not the leaf processing of the paragraphs, but I was starting
to doubt that.  It was just the way the variables were changing that lead me to
double check my assumptions.  And behold, it was one slight change to the calling
of the &lt;code&gt;parser_state.close_open_blocks_fn&lt;/code&gt; function within the &lt;code&gt;__handle_paragraph_prep&lt;/code&gt;
function to set the &lt;code&gt;include_block_quotes&lt;/code&gt; parameter to &lt;code&gt;True&lt;/code&gt;.  And it worked.&lt;/p&gt;
&lt;p&gt;Hrm.  For those who may not be aware, when I do something I consider stupid, I say
something like “hrm” which is effectively me saying the word “hum” with my mouth
closed.  It is my way of asking myself “why did I not see that before?”
In this case, when I moved the paragraph code over, I did some checks to see if it
could be that code, and determined the answer was no.  Instead of including it
in the code paths that I reverified, I assumed it was good and left it out.
As I said at the start of the paragraph, hrm.&lt;/p&gt;
&lt;h2 id="issue-412-double-check-your-results"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/412"&gt;Issue 412&lt;/a&gt; - Double Check Your Results&lt;a class="headerlink" href="#issue-412-double-check-your-results" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having logged this issue while doing the previous work on the nested containers,
I had just filed this issue because I thought there may be a problem.  To be blunt,
during that work, I was happy to log issues that may be a problem after only
doing a small amount of work to prove them as probably broken.&lt;/p&gt;
&lt;p&gt;Specifically, this issue dealt with pairs of the nested container scenarios that
included dropping of container blocks for the next line.  During the debugging
phase, it looked like the tokens produced after dropping the outermost container
block on the next line were the same as for keeping the block in the Markdown.
It just looked weird, so I decided to save it for later when I could give it the
time that I thought it needed.&lt;/p&gt;
&lt;p&gt;I was probably deep in thought when I logged this issue, as the token streams
mentioned in the issue were in fact different.  The normal case had three
space characters in the paragraph token, and the drop case did not have those
characters, as I would have expected all along.  But, in fairness, I did log
this issue thinking that there may be an issue, and I wanted to check it.
Just to be sure, I spent time looking
at the code, verifying that result.  After I made assumptions with the last
issue, I did not want to repeat that!&lt;/p&gt;
&lt;h2 id="issue-301-clarifying-rule-for-md007"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/301"&gt;Issue 301&lt;/a&gt; - Clarifying Rule for MD007&lt;a class="headerlink" href="#issue-301-clarifying-rule-for-md007" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue was an interesting one in that I had to really dig into some areas of
the rule to make sure that I had made the right decision.  As the comments for this
issue show, the submitter thought that the Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Ordered&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Sub&lt;/span&gt; &lt;span class="n"&gt;unordered&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with a command line of &lt;code&gt;--set=plugins.md007.indent='$#4'&lt;/code&gt; should not trigger the rule
as it did:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test.md:7:5: MD007: Unordered list indentation [Expected: 4, Actual=5] (ul-indent)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To save readers the trouble of looking up the documentation for the rule, the indent
configuration informs rule Md007 that indents for unordered lists should occur every
4 characters.  And with an apparent indent of 5, it did not look right.  So,
to be honest, I agreed with him.  I have been looking at this issue on and off
since it was logged in February, but never really dedicated time to figuring it
out.  But I was never sure if it was correct or not.&lt;/p&gt;
&lt;p&gt;In taking a concentrated look at this issue, the first thing that I noticed was
that the tokens looked off.  Upon further examination, the parsing of the Markdown text
that exists before the above sample was not closing both lists, only the outermost
list.  As a result, the two lists started with the above sample were considered to
be a second and third level list, not a first and second level list.  Making some
changes to the &lt;code&gt;__close_next_level_of_lists&lt;/code&gt; function to properly close the lists
solved that issue, but did not solve the main question: was the triggered
error correct?&lt;/p&gt;
&lt;p&gt;After going outside and doing some yardwork, I came back inside with a nice cool
glass of water and started to look at the problem again.  Keeping in mind that
assumptions got me in trouble before, I decided to throw them all out and start
fresh.  It was then that I re-read the documentation for the rule and came across
the following text near the end:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The original rule did not work for Unordered List elements within Ordered List elements. For example, the original rule does not fire
on the following sample:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;along with a sample that includes a pair of unordered list elements within an
ordered list.  Perfect for this case!&lt;/p&gt;
&lt;p&gt;Digging into the code for the rule a bit more, the changes I made to support this
rule firing within an ordered list item became clear. If the new ordered
list item was contained in anything other than an ordered list, it reset the depth
to &lt;code&gt;0&lt;/code&gt;.  In the case of the above example, the rule considered the depth of
the unordered list item to be &lt;code&gt;0&lt;/code&gt;.  It took me a while to get there, but I agreed
that the rule was correct.  But how to change the documentation?&lt;/p&gt;
&lt;p&gt;To properly document this issue, I added that information to the documentation in
a new section named &lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/rules/rule_md007.md#notes"&gt;Notes&lt;/a&gt;.
I am probably going to go back and see if I can write a better description in a
while, but I think it is good enough for now.&lt;/p&gt;
&lt;h2 id="issue-441-support-for-stdin"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/441"&gt;Issue 441&lt;/a&gt; - Support For StdIn&lt;a class="headerlink" href="#issue-441-support-for-stdin" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the users reached out with &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/382"&gt;Issue 382&lt;/a&gt;,
asking if it would be possible to use the PyMarkdown linter on Markdown within a
Jupyter notebook.  Working with him, I was able to get the context that one of the
types of information within the notebook are simple Markdown cells that usually
contain notes or instructions for the reader of the notebook.&lt;/p&gt;
&lt;p&gt;To make a move in the direction of making that possible, I knew that the first thing
that I needed to do was to uncouple the linting engine from the file system.  At that
point, the PyMarkdown project only worked on existing text files with the correct
extension.  While I am not sure yet what the best way to support Jupyter notebooks
is, I do know that it will probably involve passing the cells into the linter
without writing a file.  Or at the very least, I want to have that option available.&lt;/p&gt;
&lt;p&gt;I started work on this on Sunday morning, and after working on that around other
things I needed to do, I came to startling conclusion: I loved the argparse library,
but I also hated it.  I had spent over four hours trying to get my way with the
library, with so many Google and Bing searches that I lost count.  It was frustrating
because I had the actual standard in handling written, I just needed to finish
the work on the command line.&lt;/p&gt;
&lt;p&gt;All I wanted to do was to have groups of options that were mutually exclusive from
each other.  Ideally, I wanted an &lt;code&gt;-s&lt;/code&gt; option to trigger the reading from standard
input, raising an error if any of the file-based options were specified.  From a
concept point of view, it was clear: if I was using &lt;code&gt;-s&lt;/code&gt; to read from standard input,
I did not need options like &lt;code&gt;-r&lt;/code&gt; to specify recursion through the directories.&lt;/p&gt;
&lt;p&gt;The implementation was another story.  I would like to think that I came close to
the answer a few times, but that is probably just my ego talking.  Using the
&lt;code&gt;argparse&lt;/code&gt; library, it is possible to specify that single options are mutually
exclusive, such as &lt;code&gt;-s&lt;/code&gt; and &lt;code&gt;-r&lt;/code&gt;.  However, that is as far as it goes.  I found,
through trial, error, and Google, that any kind of arguments groups do not nest.
As such, I could not tell it that &lt;code&gt;-s&lt;/code&gt; was mutually exclusive with a specified
group of arguments.&lt;/p&gt;
&lt;p&gt;While it was not my first pick, I decided to go with a subcommand for the argument
parsing implementation.  I do not think it is as elegant as my proposed solution,
but it works.  Instead of using the &lt;code&gt;scan&lt;/code&gt; command and its arguments, I created
a new subcommand &lt;code&gt;scan-stdin&lt;/code&gt; that had no arguments.  It seems a bit awkward from
my point of view, but it accomplishes the goals, which is the important part.&lt;/p&gt;
&lt;h2 id="thinking-about-the-notebook"&gt;Thinking About the Notebook&lt;a class="headerlink" href="#thinking-about-the-notebook" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am still thinking about how to do the notebook.  I am sure that I am going to
find a solution for the user, I am just not sure what it is yet.  I know that I
now have more options since I have added standard input support, but I will
be taking time this week to think through it properly and talk with the
user.&lt;/p&gt;
&lt;p&gt;It was frustrating at times, and I feel like I could have gotten more done, but
it is still a good feeling to knock some items off the list!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Dealing With The Ups and Downs</title><link href="https://jackdewinter.github.io/2022/08/08/dealing-with-the-ups-and-downs/" rel="alternate"></link><published>2022-08-08T00:00:00-07:00</published><updated>2022-08-08T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-08-08:/2022/08/08/dealing-with-the-ups-and-downs/</id><summary type="html">&lt;p&gt;Upfront, I want to add this disclaimer for any relatives that may decide
to read this article.  I am going to be honest about how I felt and
what we talked about on my trip.  You may not agree with what I say or what we
decided, but our parents …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Upfront, I want to add this disclaimer for any relatives that may decide
to read this article.  I am going to be honest about how I felt and
what we talked about on my trip.  You may not agree with what I say or what we
decided, but our parents asked us to make sure they were taken care of, and their
wishes followed.  All three of us talked about what they had asked for, and
while we all agreed, I am the eldest son. If you want to blame anyone for things
not going your way, blame me.  My shoulders are wide enough and strong enough.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Wow, the last two weeks have been one heck of a roller coaster ride
for me personally.  From joyful highs to mournful lows, I have seen it all
in the last two weeks.&lt;/p&gt;
&lt;p&gt;The joyous highs were all about my brother and his longtime girlfriend
getting married in Lunenburg, Nova Scotia on 30 July.  Not one to shy away
from doing things with a bit of pomp and circumstance, the wedding party
was a sight to see.  The women were all dressed in lovely dresses and beautiful
shows, and the men were dressed in khakis, Hawaiian shirts, and sandals.  The
thing is, knowing my brother and his now wife (and my new sister!), that was not
out of character.  It just worked.&lt;/p&gt;
&lt;p&gt;As we left the hotel, a wonderful gentleman named Colin (hope I got the name
right, it was a busy day!) bagpiped us from the hotel to the dock where we
boarded the sailing ship to take us out into the bay.  Even through all of
fuss of getting everyone on board, Colin played strongly and consistently
until it was time to cast off.  After waiting almost ten years for this
wedding, my brother&amp;rsquo;s wife did not want to do anything second rate.  A
wonderful sailing vessel with a wonderful crew, and a wedding on the water.&lt;/p&gt;
&lt;p&gt;Even more interesting was that the rain that happened that day did not seem
to dampen anyone&amp;rsquo;s spirits in the least.  Sure, it meant donning rain ponchos
for some of us and umbrellas for others, but everything was still a go with
everyone having big smiles on their faces.  And with the backdrop of the
Lunenburg lighthouse in the background, the minister presided over the ceremony
like the champ that we all knew her to be.&lt;/p&gt;
&lt;p&gt;And as luck would have it, with the speaking of the words &amp;ldquo;You may now kiss
the bride&amp;rdquo;, the rain stopped.  Within fifteen minutes, the sun was out and
within another half an hour, most of us were at least partially dry.  But it
didn&amp;rsquo;t matter in the least.  It was not about the weather.  It was not about
the sailboat.  It was not about the bagpiper.  It was about my brother and
his wife getting married.  And nothing was going to damper the happiness of
that event!&lt;/p&gt;
&lt;p&gt;But the next morning, reality started to kick back in.  My wife and I had
planned a nice drive along the coast from Lunenburg to Peggy&amp;rsquo;s Cove, one
of the famous places in Canada.  The sun was shining, and the coast
was beautiful, but my mind was already starting to turn inward.  I tried
to suppress that urge inward during the drive, but it was a daunting task.
Finally, after suppressing the urge all day, I started to turn inward as
we rested at our hotel in Halifax for the evening.&lt;/p&gt;
&lt;p&gt;It had been over four years since the three of us had gotten together, so there
was much catching up to do.  Well, I say there was much catching up
to do, but really it was just listening to the same stories and information
we had heard on the phone calls we try and have each month.  Those same stories
just seemed to have a different shine to them when told in person.  Everything
just was &amp;ldquo;that much&amp;rdquo; better.  Of course, being a true Canadian, it did not
hurt that we talked over dinner or over that day&amp;rsquo;s Tim Horton run.&lt;/p&gt;
&lt;p&gt;But the one thing I knew we needed to talk about before the end of the trip
were my parents.  We all knew the pieces of those stories, but we
all felt that it was important to make sure that we were all in unison going
forward.&lt;/p&gt;
&lt;p&gt;The easy one was my father. My father passed away recently in Halifax, with
specific instructions on how he wanted to be buried and where he wanted to be
buried.  The problem there was that it was back in the Toronto area, and my
brother and his wife would not be going back for a while.  They just finished
their wedding, my brother is finishing school, and his wife is working.  It
will happen when it happens, and we all agreed to adhere to my dad&amp;rsquo;s wishes.&lt;/p&gt;
&lt;p&gt;For any readers that have read my articles, they will know that my dad and
I were not close.  One of the reasons is that I believe my dad was on the
Autism spectrum, just like me and my son.  Connection with other people was always
difficult for him, and I remember a handful of conversations where I believe
he was trying to understand why that happened, but to no avail.  I sincerely
believe he tried, but he just did not have the tools or support to make it
happen.  Most of the other serious conversations that we had were about the war.&lt;/p&gt;
&lt;p&gt;Being born in 1933, my dad was in his teens during World War II.  I had heard
stories from him about how things were, but only a couple of times.  He really
did not want to remember it at all.  He did join the Belgian Army once he was
of age, but he developed PTSD from that stint in the army.  By the time I was
old enough to talk with him about it and understand parts of what he said, he either shied
away from talking about the war and the army or talked about it like tar was
dripping from his mouth.  I did not see my father cry that many times in my
life, but in each conversation that included the war, he always cried.&lt;/p&gt;
&lt;p&gt;Between all those circumstances, he just got to a place where he
could not manage being a full-time father, and my parents got divorced.  It
took me a long time to process what happened and what the factors involved were.
I believe that having PTSD and probably having undiagnosed Autism played big
factors.  I think he would have stood a chance at being a good father if he had
been born forty years later, but it just was not so.  Without the understanding of PTSD
and Autism that we even had in the 90s, he did not stand a chance.&lt;/p&gt;
&lt;p&gt;I can say a few things about my dad for certain.  He hated any war and tried to
avoid conflict.  He felt sorry that he could not be a better father and tried
to overcome that deficiency in his own way.  He often wanted to communicate; he
just did not have the tools to communicate effectively. Because of his hate
of war and conflict, he just wanted to be buried alongside other family members,
just as a normal person, leaving any of the military experience that he felt
ruined his life behind.&lt;/p&gt;
&lt;p&gt;With that agreed on, we turned to talk about my mother.  With her having late-stage
dementia, my sister moved my mother to a long-term care facility a couple of
months ago.  It was heartbreaking to have my sister describe her recent visit
with my mom, but I believe she thought it was the right thing to do.  Even so,
I almost started crying myself as my sister fought back the tears and described
her visit.&lt;/p&gt;
&lt;p&gt;Dementia is a vile disease that takes parts of the person away bit by bit
until only a shell is left.  It started with her forgetting certain things around
her home, such as whether she locked the door or whether she already had her
meals.  After she moved into an assisted care facility, she stabilized for a
while before more things disappeared from her mind.  Before long, she was walking
into other people&amp;rsquo;s rooms, thinking that it was her room she was walking into.
By the time she was moved to a long-term care facility, even that was mostly
gone.&lt;/p&gt;
&lt;p&gt;It was weird talking about my mom in the past tense, but it felt like the right
thing to do.  There was a person that looked like my mom in the pictures that
I saw. But according to my sister, she is not sure that there is anyone she
recognizes in that body anymore.  The only communication that my mom seems to
do is with people that are not there anymore.  We are not sure if she is replaying
memories in her mind or talking to people that have passed before her.  We
do not even know if she is aware of where she is.  But to us, as terrible as
it sounds, she is not there anymore.&lt;/p&gt;
&lt;p&gt;Getting agreement between the three of us on what to do when it is my mother&amp;rsquo;s
time, which was the easy part.  She was a devout Roman Catholic and wanted to
be buried beside her second husband by her home parish priest.  With the state
of air flights, the way they are, the only questions were around what will we do if we
cannot get a flight to Toronto when she passes away.  And we agreed that I will
try my best, and we will cross that bridge if and when it is needed.&lt;/p&gt;
&lt;p&gt;Grieving about what is happening is the hard part though.  How do you imagine
a world without the one person who gave up her marriage without a second though
because of the effects of my father&amp;rsquo;s PTSD?  Someone who was there to listen,
whether she agreed with you or not.  Someone who gave back to her community
in any way she could up until the dementia made it dangerous.&lt;/p&gt;
&lt;p&gt;The only good news is that the meeting with my siblings I think
helped the grieving and healing processes along.  But it is going to take
a long time for me to process this.  Step by step, day by day.  Remembering
the good moments of both parents, whether they were only a couple or whether
they were as bountiful as the flowers that were always in my mother&amp;rsquo;s
gardens.&lt;/p&gt;</content><category term="Personal"></category></entry><entry><title>Plugging Away At The Issues</title><link href="https://jackdewinter.github.io/2022/07/25/plugging-away-at-the-issues/" rel="alternate"></link><published>2022-07-25T00:00:00-07:00</published><updated>2022-07-25T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-07-25:/2022/07/25/plugging-away-at-the-issues/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/18/confidence-one-bad-apple/"&gt;last article&lt;/a&gt;, I talked
about my struggles to regain my confidence, since my crash at the end of May.
This week, I got back to work and was able to deal with issues on
my &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It certainly has been a roller-coaster of a ride …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/18/confidence-one-bad-apple/"&gt;last article&lt;/a&gt;, I talked
about my struggles to regain my confidence, since my crash at the end of May.
This week, I got back to work and was able to deal with issues on
my &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It certainly has been a roller-coaster of a ride since my crash on my side projects
at the end of May.  By personal life has been great and my professional life has
been great.  And while I usually try my best to keep my side projects separate
from the rest of my life, I decided to borrow a bit of positivity over the last
couple of weeks to get me over the rough spot.  Luckily, it was with good results.&lt;/p&gt;
&lt;h2 id="easing-back-into-addressing-issues"&gt;Easing Back Into Addressing Issues&lt;a class="headerlink" href="#easing-back-into-addressing-issues" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the commit list for this article, I was initially a bit disappointed
that I have not done more to fix issues since the
&lt;a href="https://github.com/jackdewinter/pymarkdown/releases/tag/v0.9.7"&gt;version 0.9.7 release&lt;/a&gt;.
After all, it has been three weeks since that happened.  But as I sat back and
thought about things, it has been a productive few weeks.  Most of the
work has been about me trying to get back to where I was before, but that still
counts as work.&lt;/p&gt;
&lt;h2 id="more-testing-of-nested-blocks"&gt;More Testing Of Nested Blocks&lt;a class="headerlink" href="#more-testing-of-nested-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One easy thing that I did was to go through the tests in the
&lt;a href="https://github.com/jackdewinter/pymarkdown/tree/main/test/nested_three"&gt;nested_three directory&lt;/a&gt;
and split them out into two separate files.  Initially, I did not think the collection
of scenarios would grow to be so large, but it did.  Splitting each of those files
in half helped a bit, which was good enough for a while.  At the very least,
it was easier to find things when I was looking for samples by nesting types instead
of specific scenarios.&lt;/p&gt;
&lt;p&gt;Looking at a series of tests to get cleaned up, I started working on
the Block/Block/Ordered tests, otherwise known as the tests in the
&lt;code&gt;test_markdown_nested_three_block_block_ordered.py&lt;/code&gt; file.  Looking at the
size of that file, it took me less than five seconds to think about splitting that
file into the &lt;code&gt;test_markdown_nested_three_block_block_ordered_max.py&lt;/code&gt; file and
the &lt;code&gt;test_markdown_nested_three_block_block_ordered_nomax.py&lt;/code&gt; file.  That decision
was an easy decision.&lt;/p&gt;
&lt;h2 id="issue-408-cleaning-up-tests"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/408"&gt;Issue 408&lt;/a&gt; - Cleaning Up Tests&lt;a class="headerlink" href="#issue-408-cleaning-up-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given those files, I worked through and validated every test and filed clear issues
for the things that needed to be fixed.  That also was an easy decision.  While the commit
just shows the file being split into two, there was a lot of work that went on to get there.
I went through and plugged each of the Markdown inputs into the CommonMark parser, ensuring
that the produced HTML output in the tests were correct.  Visually, I checked to
see if the tokens looked correct, especially noting down a few instances where I thought
the tokenization was off a bit.  While the main part of the tokens were all fine,
I was looking for issues with the recorded whitespace.  There were some
surprises, so I noted them down, and moved on.&lt;/p&gt;
&lt;h2 id="issue-413-filling-out-the-scenarios"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/413"&gt;Issue 413&lt;/a&gt; - Filling Out The Scenarios&lt;a class="headerlink" href="#issue-413-filling-out-the-scenarios" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue is where a lot of the initial time was spent on this block of work.
During the cleanup noted above, I noticed that there were a couple of experimental
tests that were failing.  Nothing major, but enough to cause me concern. Both
scenarios involved the line following either the main list start or a new list
item, and a line with not enough indent to meet the list constraints.  As an
example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, line 3 starts a new list that is contained within a single block
quote.  The following line keeps the block quote active (starts are by
indent count, not column number), but does not have any indentation to keep the
list going.  Thankfully, line 4 is treated as a paragraph continuation of the
“paragraph” started on line 3, and the list item and the ordered list are both
closed after line 4.&lt;/p&gt;
&lt;p&gt;I cannot remember exactly which one of these situations forced me to look at
these combinations, but it was enough to put some work in to find out the
health of these scenarios.  For the example above, since I was dropping the
indent to the level of the list item, I added &lt;code&gt;_drop_ordered&lt;/code&gt; to the test
function name.  The function with the suffix &lt;code&gt;_drop_ordered_block&lt;/code&gt; took back
the indents to the visual level of the block quote character and the
function with the suffix &lt;code&gt;_drop_ordered_block_block&lt;/code&gt; removed all indentation.&lt;/p&gt;
&lt;p&gt;After adding 185 tests, all the combinations were covered and only seven
tests in those 185 were marked as skipped.  It was exhausting, but I had
a complete picture of how things looked with dropping of the indentation.
Part of that was due to some work I did along the way. Those issues
were simple enough that I thought it was best to fix them as I went.&lt;/p&gt;
&lt;h3 id="empty-lists-and-nested-blocks"&gt;Empty Lists And Nested Blocks&lt;a class="headerlink" href="#empty-lists-and-nested-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first of the two issues that I found and fixed dealt with an empty
list item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example might look simple, but there was an issue.  If there is text at the end
of line 1, then the text in line 2 becomes part of a paragraph continuation.  Because
that text is not present, the paragraph continuation does not take effect, leaving
the text &lt;code&gt;item&lt;/code&gt; to be part of a paragraph outside of the list.  At least, that is
what was supposed to be parsed.  Due to the benefits from the increase logging
that I mentioned a couple of weeks ago, I was able to diagnose this issue rather
quickly, making a change to the &lt;code&gt;__calculate_current_indent_level&lt;/code&gt; function to
properly shut down the list before the text &lt;code&gt;item&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="we-all-start-together"&gt;We All Start Together&lt;a class="headerlink" href="#we-all-start-together" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The second issue was a rather tricky issue with two block quotes and an ordered
list all starting on the same line.  While the tokens were being parsed correctly,
the recombining code from the verification was off.  Doing a bit of legwork, I
was able to come up with a way to detect the bad whitespace and account for it.&lt;/p&gt;
&lt;p&gt;To be honest, the whitespace issue is a bit of a tricky issue for me.  The fact
that I must adjust my recombining code to account for weird situations does
not sit well with my values.  If possible, I want there to be clear
guidelines on how the whitespace gets put back together.  If I have those guidelines,
I can document them and explain them anyone who wants to write plugin rules.
Right now, I approach that, but especially when it comes to containers, I fall
short of that goal.&lt;/p&gt;
&lt;p&gt;But for me, that is a slippery slope.  Based on a quick scan though the
&lt;code&gt;transform_to_markdown.py&lt;/code&gt; module, I would guess that approximately 1500 lines of
the 2500 lines are dedicated to handling containers and their special cases.
Some of that code is necessary, and some of that code is hacks to deal with
improper tokenization.  However, if all the special cases only deal with whitespace
and not the rest of the content of the rehydrated Markdown, I am somewhat okay
with that.  Sure, I would like to remove it, but I am not sure if the benefit is
there to justify the cost.  At least, not yet.&lt;/p&gt;
&lt;h2 id="issue-410-cleaning-up-whitespace"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/410"&gt;Issue 410&lt;/a&gt; - Cleaning Up Whitespace&lt;a class="headerlink" href="#issue-410-cleaning-up-whitespace" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I was able to fix a couple of instances of whitespace issues, there were
other instances where I knew I was going to need more than fifteen minutes to
diagnose the failures and fix it.  With seven tests to address, it took a bit
of time to find the first case, and luckily enough, the rest of the cases were
all variations of the first.&lt;/p&gt;
&lt;p&gt;In all cases, the parser was applying the leading space, resulting in twice the
whitespace appearing in the rehydrated Markdown.  They all tracked down to one
of two scenarios.  The first was that the leading space was being stored in the
list token, but the internal variable representing the line was not being updated
to account for that.  Without that updating, the parser saw the whitespace and
rightfully added it to the text.  The other scenario was that the string was fine,
but the index pointing into the string was not properly adjusted.  Different cause,
but same effect.&lt;/p&gt;
&lt;h2 id="issue-420-and-issue-421-revisiting-old-friends"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/420"&gt;Issue 420&lt;/a&gt; and &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/421"&gt;Issue 421&lt;/a&gt; - Revisiting Old Friends&lt;a class="headerlink" href="#issue-420-and-issue-421-revisiting-old-friends" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After going through those fixes, I looked at the other scenario tests that were
currently disabled and ran through them to see if they were fixed or easy to
fix.  The first one I addressed was test &lt;code&gt;test_list_blocks_271a&lt;/code&gt;, followed by
tests &lt;code&gt;test_list_blocks_271c&lt;/code&gt;, &lt;code&gt;test_list_blocks_270c&lt;/code&gt;, and &lt;code&gt;test_list_blocks_270a&lt;/code&gt;.
While these tests were not at once fixed by the previous work, they looked
like they were close enough that it made sense to fix them.&lt;/p&gt;
&lt;p&gt;Following good practices, I went through each of the tokens by hand and verified
that they were correct, or at least looked correct.  After doing silly things
such as counting the number of &lt;code&gt;&amp;gt;&lt;/code&gt; characters in the whitespace area of the tokens,
everything looked good.  Looking at the debugging from the Markdown rehydration,
it looked okay as well, but something was off.&lt;/p&gt;
&lt;p&gt;It took me about an hour of work, with futzing on a project outside and
grabbing some food, before I figured it out.  In certain cases,
when the container text was being added back into the Markdown, the index into
container token whitespace was off.  And that little discrepancy was just enough
to point to the wrong whitespace part, which in return added the wrong whitespace
to the rehydrated token.&lt;/p&gt;
&lt;h2 id="issue-407-adding-alternate-extensions"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/407"&gt;Issue 407&lt;/a&gt; - Adding Alternate Extensions&lt;a class="headerlink" href="#issue-407-adding-alternate-extensions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking over the work to do in the issues list, I reviewed each issue and
came across this request from a user.  In his case, due to a preprocessing need,
the Markdown he wants to scan is in a file that has a different extension that
&lt;code&gt;.md&lt;/code&gt;.  As such, he asked if it would be possible to support alternate extensions
to scan.&lt;/p&gt;
&lt;p&gt;I do remember thinking “why doesn’t he just change the extension, scan, and then
change it back?”  I also remember me following up that thought with “I don’t think
I would do that unless I REALLY had to.”  As such, I started working on supplying
support for alternate extensions.  It is currently in the main code base with
the &lt;code&gt;--alternate-extensions&lt;/code&gt; argument, and I hope to get some time next week to
properly document it for the next release.  It is just a simple argument that takes
a comma-separated list of extensions, with a default of &lt;code&gt;.md&lt;/code&gt;.  It was easy to
write, easy to test, and hopefully the user will like it.&lt;/p&gt;
&lt;h2 id="despise-my-earlier-opinion"&gt;Despise My Earlier Opinion&lt;a class="headerlink" href="#despise-my-earlier-opinion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Despite what I had through previously, I believe I did have a good couple of
weeks fixing issue.  It was not glamorous and exciting, but there was a lot of
good, solid work.&lt;/p&gt;
&lt;p&gt;The one thing that I want to call out are the changes I made to the Container
Block Processor and the grab bag object.  When I added support for that object
in a couple of weeks ago, I was not sure how much difference it would make.
I had hoped it would make a significant difference, but I was not sure.&lt;/p&gt;
&lt;p&gt;I am now sure.  Instead of having to add debug statements to keep track
of variable state, it was all there in the log file.  It is a small amount of
work to look back in the log file to see what the last value is.  But that amount
of work is nothing compared to adding in a log statement, making sure it has the
right information, and running the tests again to see what the value is.  In my
opinion, it was just an order of magnitude better.&lt;/p&gt;
&lt;h2 id="a-final-note"&gt;A Final Note&lt;a class="headerlink" href="#a-final-note" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it is true that I do the work on these projects and these articles, it is
a group of people that help me in many ways that enable me to do these things.
I have known for 51 years a certain guy who, despite our issues in our first twenty
years, has stuck by me and I by him.  We have been through some rough patches
together, but I know I can just send an email, a text, or a phone call, and
he will listen with a wisdom that I would have never guessed at.  Yup, I am talking
about my brother, Mike.&lt;/p&gt;
&lt;p&gt;I am proud to say that I am going to be spending time with that gentleman and
his fiancé this weekend, as they tie the know and make it official.  And as
Mike is family and a dear friend who I have not seen since this pandemic
thing started, my wife and I are going to take some time to enjoy the socialization.
Best wishes to Mike, and I will be back in a couple of weeks! Stay Tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Confidence... One Bad Apple</title><link href="https://jackdewinter.github.io/2022/07/18/confidence-one-bad-apple/" rel="alternate"></link><published>2022-07-18T00:00:00-07:00</published><updated>2022-07-18T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-07-18:/2022/07/18/confidence-one-bad-apple/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/12/are-scenario-tests-worth-it/"&gt;last article&lt;/a&gt;, I talked
about my progress in adding scenario tests for the nested container scenarios
for the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about the struggles to regain my confidence that I have been having
since my crash at the &lt;a href="https://jackdewinter.github.io/2022/05/30/crashing-on-a-side-project/"&gt;end of May&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/12/are-scenario-tests-worth-it/"&gt;last article&lt;/a&gt;, I talked
about my progress in adding scenario tests for the nested container scenarios
for the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about the struggles to regain my confidence that I have been having
since my crash at the &lt;a href="https://jackdewinter.github.io/2022/05/30/crashing-on-a-side-project/"&gt;end of May&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am going to let any readers of this article in on a little secret.  I do not
like reality television shows where people expect to get famous and do stupid things.
However, I do like reality shows where the show documents one or more interesting
aspects of work that gets done or where people are help each other.  Especially
if one of those two things are done in a weird or novel way, I am in!  Be it
&lt;a href="https://en.wikipedia.org/wiki/Dirty_Jobs"&gt;Dirty Jobs&lt;/a&gt; or
&lt;a href="https://www.imdb.com/title/tt13833752/?ref_=ttfc_fc_tt"&gt;Backroad Truckers&lt;/a&gt;,
the way that the producers highlight the work always surprises me.  On the other
side of the coin, shows like &lt;a href="https://en.wikipedia.org/wiki/Bar_Rescue"&gt;Bar Rescue&lt;/a&gt;
and &lt;a href="https://en.wikipedia.org/wiki/Restaurant:_Impossible"&gt;Restaurant Impossible&lt;/a&gt;
hit me in a separate way.  Part car crash, part counselling session, it is the
creative aspects of the hosts and how they try and resolve issues that appeal to
me.&lt;/p&gt;
&lt;p&gt;And as much as I watch those shows as entertainment, in real life, I do take away
things from watching those shows.&lt;/p&gt;
&lt;h2 id="life-is-not-static"&gt;Life Is Not Static&lt;a class="headerlink" href="#life-is-not-static" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As with many things in life, I must monitor and adapt to the continually shifting
priorities that are an everyday part of my life.  If I do not do that, one or more parts of my
life suffers, with the underlying issue becoming more difficult to correct with each passing day.
While I have been able to keep my personal life and professional life relatively
well balanced in the last couple of months, it has come at the expense of my side-project
life.&lt;/p&gt;
&lt;p&gt;The balance in my personal and professional life is largely in part due to the
support I get from my wife and from the people that I work with.  Right now, my wife
and are I trying to figure out how to make
our house more “us”.  This includes equal parts thinking, trying things out, and just
doing the hard work.  Like any good science guy or engineer, I understand that
failure is not only an option, but it is an exceptionally good teacher.  While I hope for
things to work out on the first attempt, that is almost never the case.  With my
profession, I find that I am only as good as the people that I surround myself
with.  Having good people around me helps me elevate my game and keeps me motivated
to do my best. That and it keeps me on my toes.&lt;/p&gt;
&lt;p&gt;If I must be brutally honest, I try and use only a bit of the positive
energy from one part of my life in the other parts of my life. That is not as much
wisdom on my part as it is a safety mechanism.  I can afford to siphon off a bit of
that energy, but I need to ensure that my focus and confidence in each area remains
at a healthy level for me to continue to succeed in life.  Due to
past experiences, I am extermely aware that what I just described as positive
energy and confidence can also apply to negative energy and a lack of confidence.&lt;/p&gt;
&lt;p&gt;Looking back at May, the crash that happened was just a shopping cart looking for
a parked car.  Unless it was dealt with properly, it was an accident
that was inevitably going to happen.  Just like the opening acts of the reality
shows that I like watching, to anyone looking at that situation from the outside,
it was obvious that something needed fixing.  But in the moment, I was oblivious.
But due to the way I try and keep the parts of my life seperated, it was mainly
my side-project that suffered.  There was a bit of overlap, that was unavoidable.
But that well-earned wisdom helped me keep an even keel and not shake me up… too
much.&lt;/p&gt;
&lt;p&gt;At this point, I am approximately eight weeks past the crash, with most of the serious
stuff from the crash are now behind me.  Currently, my main personal project is to
slowly rework the backyard into something that is relaxing for my wife and I.  Due
to smaller successes and talking things through, I have confidence that we are
moving in a good direction.  In my professional life, I was tasked with doing a lot
of work on another project, with the team lead expressing his confidence in me based
on how he saw me handle small situations.  Based on that feedback and other pieces of
feedback at work, I am confident that I am going in a good direction at work.&lt;/p&gt;
&lt;p&gt;On my &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project, it is a
slightly different story.&lt;/p&gt;
&lt;p&gt;It is hard for me to admit this, especially to myself, but my confidence in the
project is not even close to where I want it to be.  Normally, I
stagger the work for the different parts of my life to make sure I am giving
each part what is needed for me to be happy and successful in that area.  While
I am getting what I need for the other parts of my life, I am struggling to get
to that same place with the PyMarkdown project.&lt;/p&gt;
&lt;p&gt;As I have explained before, that process that I take to author my articles is to
think about things and write down loose notes.  Borrowing from work, I call this
my ideation phase.  I usually write my ideation notes down in a very
technical manner or a &lt;a href="https://en.wikipedia.org/wiki/Stream_of_consciousness"&gt;stream of consciousness&lt;/a&gt;
manner, and this week it was stream of consciousness manner. When I performed my
ideation exercise for this week’s article, as soon as I wrote down “confidence?”,
I put my pen down.  Seeing how I was writing the article, I decided to stare at it
for a while and just let it sink in.    The fact that I had
wrote down that word and followed it up with a question mark was a bit stunning
to me.  But as I thought about it more, I could not argue with it.&lt;/p&gt;
&lt;p&gt;There were little hints in my behavior that I had missed, but they were there.
In most of the cases, there were small things that I had chalked up to various
legitimate reasons.  What I had not noticed was that I was spending more focus
on those areas, which allowed me to succeed a bit more in those areas.  However,
those successes were at the expense of my side-project work.  Instead of doubling
down and focusing on getting debugging done, I was finding other stuff to do that
did not have to do with the project.  But why?&lt;/p&gt;
&lt;p&gt;After thinking about it for a couple of hours, I realized that I was scared. Over
my lifetime, there have been numerous times where I have come close to being
burnt out and at least one time where I burnt out.  When I really, deeply, and
honestly thought about it, I feared burning out.  The fact was, I had a
minor crash that I was able to recover from.  But instead of it being a fight to
get to the point where I crashed, it snuck up on me and ambushed me. Realistically,
I know that is not how it happened, but that is how I felt like it happened.
And bluntly, I was scared that it was going to happen again.&lt;/p&gt;
&lt;p&gt;There is an old saying that “one bad apple can spoil the barrel.”  The meaning
behind that saying is that negative things can slowly pollute and degrade the
good things around them over time.  In this case, the negative thing was the
crash and the things to spoil was my confidence.  I got burned by the crash
and I have worked hard to deal with the main effects that happened due to the
crash.  Now that I have a good handle on those, it is time that I deal with
this piece of shrapnel and look for any other pieces that are lying around.&lt;/p&gt;
&lt;p&gt;But how do I deal with this lack of confidence in my work on the PyMarkdown
project?
Since these issues only came to me as I was writing this article, I sincerely do
not have an answer to the problem yet. I think that lack of an answer is
comforting to me because I would feel like I was being dishonest with myself
if I just came up with something that might work.  I would rather dedicate
time to think about how to increase my confidence while trying it
out on the project. Anything else would feel cheap and superficial.&lt;/p&gt;
&lt;p&gt;Crossing my fingers for the next week. Stay tuned.&lt;/p&gt;</content><category term="Personal"></category><category term="crashing"></category></entry><entry><title>Are Scenario Tests Worth It?</title><link href="https://jackdewinter.github.io/2022/07/12/are-scenario-tests-worth-it/" rel="alternate"></link><published>2022-07-12T00:00:00-07:00</published><updated>2022-07-12T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-07-12:/2022/07/12/are-scenario-tests-worth-it/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/05/when-are-grab-bags-okay-in-software/"&gt;last article&lt;/a&gt;, I talked
about the refactoring work I did in the previous week.  This week, I talk about
my progress on adding scenario tests for the nested container scenarios.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I am doing any action that is even remotely technical, I think about three
things …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/07/05/when-are-grab-bags-okay-in-software/"&gt;last article&lt;/a&gt;, I talked
about the refactoring work I did in the previous week.  This week, I talk about
my progress on adding scenario tests for the nested container scenarios.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I am doing any action that is even remotely technical, I think about three
things in quick unison.  What is the cost of doing that action?  What is the benefit
of doing that action?  What are the risks of doing that action?&lt;/p&gt;
&lt;p&gt;Having had those questions drilled into my brain for years, they form the basis of what
is known as Risk-Cost-Benefit Analysis.  A quick search with any search engine
turns up multiple hits for articles on the subject, with more hits for the simplified
Cost-Benefit Analysis.&lt;/p&gt;
&lt;p&gt;As a Software Development Engineer in Test, one of my primary
tasks is to do these analyses and use automation to mitigate the risks where possible.
Therefore, it should not be a surprise that when I am working on my own projects,
these questions are ones that I ask myself.  Especially after my efforts during
the last week, I believe having a satisfactory answer to those questions regarding the addition
of more scenario tests to
the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="what-are-scenario-tests"&gt;What Are Scenario Tests?&lt;a class="headerlink" href="#what-are-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While there are many &lt;a href="https://en.wikipedia.org/wiki/Scenario_testing"&gt;definitions&lt;/a&gt; of
what scenario tests are, the simplest answer is the one that I give to people that ask
about my work.&lt;/p&gt;
&lt;p&gt;User stories are a set of actions where I walk through the
actions that a specific user would do to accomplish a given goal.  A good example of
a user story is “Fred the manager logs on to the web site and requests an activity
report for their direct reports.”  That user story is good because it contains
useful information on the user and what they want to accomplish.&lt;/p&gt;
&lt;p&gt;From a project level, user stories are great.  They communicate the intent and goal of
a set of actions that are typical of that user.  But those same stories lack enough
specificity for a software developer to act on.  That is where scenarios
come in.  A scenario is a constrained action that accomplishes a specific goal.
My general rule is that a good scenario usually avoids the word “and” where
possible.  Therefore, breaking down the user story from above, I include scenarios
such as “The user logs on to the website,”
“Manager requests information on direct reports,” and “Manager requests activity
report”.  Each one of these scenarios is integral to the user story, but together
they spell out how the application solves for those user stories.&lt;/p&gt;
&lt;p&gt;From there, the jump from a scenario to a scenario test is a simple one.
A scenario test is just a test that clearly focuses on that one scenario. If
possible, interactions with any other scenarios are removed and the focus is
solely on that one scenario.  The success and usefulness of any scenario test is related
to what kind of scenarios it covers and how frequently it needs modification
for unrelated changes.  If it is focused enough on the scenario, those modifications
are usually minimal.&lt;/p&gt;
&lt;h2 id="why-are-they-important-to-the-project"&gt;Why Are They Important To The Project?&lt;a class="headerlink" href="#why-are-they-important-to-the-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In a web application or a desktop application, the generation of scenarios
deals more with the user interacting with the application than the various parts
of the application itself.  The basis for that assumption is that those application
are primarily created to interact with the end user to provide a desired result.
Therefore, it is that interaction that is central to the scenarios that will make
that application a success.&lt;/p&gt;
&lt;p&gt;For backend applications such as the PyMarkdown project, the focus is still on
the user interaction.  However, that user interaction takes place using files or
payloads to be parsed or actioned upon.
Accordingly, the focus in placed on the input that is presented to that application
on behalf of the user.  For the PyMarkdown project, that input is in the form
of Markdown files which have a clearly defined specification that must be adhered
to.&lt;/p&gt;
&lt;p&gt;The PyMarkdown Linter is a linting rules engine based on top of a
&lt;a href="https://github.github.com/gfm/"&gt;Github Flavored Markdown&lt;/a&gt; compliant parser.  The
starting point for the scenario tests was the specification itself.  However, since
the specification focuses on HTML output and the parser focuses on Markdown itself,
I felt that expanding the testing effort to include other Markdown inputs was
warranted.  As each different input is a slightly unique way to “phrase” the
Markdown document, I felt that associating each input with a scenario and a scenario
test was appropriate.&lt;/p&gt;
&lt;p&gt;And while I would love for there to be no issues at all with the PyMarkdown
project, I am still finding scenario test failures that I need to deal with.&lt;/p&gt;
&lt;h2 id="the-work"&gt;The Work&lt;a class="headerlink" href="#the-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When it comes those scenario test failures, I have three buckets
that I file those failures into.  The first
bucket is that the application aborts, either from an &lt;code&gt;assert&lt;/code&gt; statement or any
other exception that is thrown.  This bucket is a high priority as it will stop
the application from processing anything else in the document.  That, and it also
looks bad to the end user.  The second bucket is for parsing errors that result
in an incorrect Markdown token stream being generated.  These errors are caught
when generating HTML from
the tokens as a double-check.  This bucket is a medium priority because it looks
bad and feels bad since these are very visible to the end-user but are typically
low impact.  Finally, the third bucket is reserved for whitespace errors
that affect the tokens themselves, but only in a minor way.  The tests catch these
errors when generating the original Markdown from the Markdown tokens.  This
bucket is low priority because while there are rules that are dependent on
whitespace in tokens, there are only a handful of them.&lt;/p&gt;
&lt;p&gt;Getting back to my work on the project, I started adding a new set of scenario tests
to the project.  After four or five days of work, I had 224 new scenario tests
implemented and committed, with only nine tests failing.  Compared to the work
I did in the spring where I had over fifty tests failing, I was happy with
only having to fix nine tests in two groups.  Honestly, there is a third group that
I need to look at more closely, but I will get to double checking those results
after I deal with the first two groups.&lt;/p&gt;
&lt;p&gt;The good news?  Only two of the failing tests were due to parsing errors, the rest
all dealt with whitespace errors.  I found no crashing scenarios and
only a couple of parsing scenarios, with less than ten whitespace scenarios to
fix.  That was a good result.&lt;/p&gt;
&lt;p&gt;But should I fix them?  That is the question that I started to ask myself.&lt;/p&gt;
&lt;h2 id="the-risk"&gt;The Risk&lt;a class="headerlink" href="#the-risk" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Of all three questions, this was the easiest one for me to answer.  The risk of
not having a test for a given scenario is that a user decides not to use the project
for their needs.  However, that risk is balanced out by the frequency of a given
scenario failing in normal use.&lt;/p&gt;
&lt;p&gt;Applying those metrics to these scenarios, I would like to reduce the risk if
possible. But nothing that I found made me feel like I had to stop all work and
fix those scenarios right now.  If I make steady work to mitigate the
risk of all three-level nested container scenarios, I am good.  I would feel
better if I had diversity in the scenarios that I am missing, and I need
to be able to factor that into my risk analysis. More on that later.&lt;/p&gt;
&lt;h2 id="the-cost"&gt;The Cost&lt;a class="headerlink" href="#the-cost" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The next question for me to answer was the cost.  Based on my experience of adding
those 224 new scenario tests, I know that it will take me approximately 11 or 12
hours to complete.  That time is not wall-clock time, but active task time.  That
time does not consider any breaks that I take to do work around the house
or to relax between sets of scenario tests.  That time is spent following
a recipe that I determined beforehand.  For this latest group of scenario tests,
which meant taking each existing scenario test and creating three (or four) additional
tests where any indentation for the containers was removed on the last line of
the Markdown.&lt;/p&gt;
&lt;p&gt;Another part of the cost is the mental fatigue and boredom.  The task is not
suited for automation, meaning the generation of the scenarios must be done manually.
For this past week, which meant taking over seventy existing scenario tests and performing
that transformation on each test.  That also meant verifying the HTML output against
the canonical &lt;code&gt;commonmark.js&lt;/code&gt; parser and fixing any typing errors as I went.  It
was boring, but it needed to be done.&lt;/p&gt;
&lt;p&gt;There is also the cost of not adding other scenario tests or addressing other issues.
Often referred to as &lt;a href="https://www.investopedia.com/terms/o/opportunitycost.asp"&gt;opportunity cost&lt;/a&gt;,
there may be other issues that I could be working on that would solidify the application
more.  That one is harder to quantify, so I keep it in mind as a bit of a tiebreaker.&lt;/p&gt;
&lt;h2 id="the-benefit"&gt;The Benefit&lt;a class="headerlink" href="#the-benefit" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The final question that I need to answer is about the benefit of adding more
scenario coverage.  For me personally, this is more difficult for me to gauge.
When I am using a tool like this, I expect three major things to be in place:
a decent application, a decent issues process, and a decently responsive application
team.  I do not expect applications to be perfect, but the application needs to
show me that the team cares and is being honest with what they believe they can
accomplish.  An “everything working fine” solution that is filled with issues is
a big turn off.  However, the same application with a “we are working to get this
to a better application” sign is perfectly acceptable.  For me, it is all about
setting reasonable expectations.&lt;/p&gt;
&lt;p&gt;I have a decent issues process in place and try and be responsive
to any users to file issues.  Based on that opinion, I hope I am okay with not
worrying about disappointing any users in that way.  Therefore, focusing on the
application and its expectations, I am also in decent shape there.  I
believe I have decent documentation and a nice section near the top of the main
page reading:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id="note"&gt;Note&lt;a class="headerlink" href="#note" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This project is currently in beta, and some of these documented things may not work 100% as advertised until after the final release. However, everything should be close enough to done that if you find something missing, please let us know.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I do know that users have asked for improvements and pointed out issues that
they have asked to be fixed, so I have confidence that I am setting the expectations
with my users correctly.&lt;/p&gt;
&lt;p&gt;That leaves the determination of value of the benefit in my court.
I will have to think about that some more.&lt;/p&gt;
&lt;h2 id="the-result"&gt;The Result&lt;a class="headerlink" href="#the-result" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To summarize, from a risk point of view, the amount of risk associated
with hitting significant issues in the remaining “nested three container” scenarios is
medium-to-low.  From a cost point of view, I am confident that adding another
one of the “nested three container” scenario groups is going to take approximately
12 hours to complete, task time.  I am also aware that I am going to get bored with
that process, and that I am going to have to take extra breaks to make sure I stay
on top of my game.  And with the benefit, I am not sure what I am going to land
on that but working through this exercise has helped me out a bit.&lt;/p&gt;
&lt;p&gt;I know that there are more than thirty issues in the old issues list, with some more
urgent issues in the current issues list. As issues in the current issues list are
suggestions from users, I feel that any user issues must have a higher priority
than the ones I entered.  From that point of view, there is an opportunity cost
that I am paying in not getting those issues dealt with.  I just do not know how
to weigh any interest in those issues.&lt;/p&gt;
&lt;p&gt;To balance that out, I also feel that addressing three groups of scenarios in the
“nested three container” scenarios group would help me reduce my estimated risk
from medium-to-low to low.  The first group of these scenarios revolves around
the whitespace before list items.  For example, does this Markdown parse
correctly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those scenarios, an add-on to the work that I just completed, would increase my
confidence that I have the list item support working properly in the parser. The
other two groups of scenarios are variations on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For me, replicating my recent work (with the addition of the above group) on those
two sets of scenarios would give me confidence that I have addressed the highest
risk scenarios.&lt;/p&gt;
&lt;p&gt;For me, reducing the risk that I have missed something is worth the benefit,
if I can respond to user requests.  I think.&lt;/p&gt;
&lt;h2 id="and-that-means"&gt;And That Means…&lt;a class="headerlink" href="#and-that-means" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So given all that hand-waving… I am going to think about this for a week or
two as I try to fix the issues that came up during the last week.  That will
allow me to make progress that I know will bring the project benefit while
giving me some more time to figure out how I feel about the above decision.&lt;/p&gt;
&lt;p&gt;There is lots of work to do, and I do not have any pressure to
make a speedy decision, just a good decision.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>When Are Grab Bags Okay in Software?</title><link href="https://jackdewinter.github.io/2022/07/05/when-are-grab-bags-okay-in-software/" rel="alternate"></link><published>2022-07-05T00:00:00-07:00</published><updated>2022-07-05T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-07-05:/2022/07/05/when-are-grab-bags-okay-in-software/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/06/28/getting-back-to-business/"&gt;last article&lt;/a&gt;, I talked about how
I was getting back to work on my project after taking a few weeks to recover from
a crash.  In this article, I talk about the refactoring work I did in the last
week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During my recovery phase from my …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/06/28/getting-back-to-business/"&gt;last article&lt;/a&gt;, I talked about how
I was getting back to work on my project after taking a few weeks to recover from
a crash.  In this article, I talk about the refactoring work I did in the last
week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During my recovery phase from my crash, I decided to do some low-cost
refactoring of the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
And while the refactoring was easy to do, it did make me think about the
way in which I was refactoring the class.&lt;/p&gt;
&lt;h2 id="but-first-an-aside"&gt;But First, An Aside&lt;a class="headerlink" href="#but-first-an-aside" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Any avid readers of these articles will notice that I am writing this and posting
this on a Tuesday.  I was a victim of “National Scare The Crap Out Of
Your Pets” Day.  For any Canadian readers, Happy Canada Day and for any American
readers, Happy Independence Day.  That means one thing: a lot
of partying and a lot of fireworks.&lt;/p&gt;
&lt;p&gt;From a pet owner’s point of view, it was just an exceptionally long weekend.  Our dog Bruce
is a lovable doofus, but he fears loud noises.  By the time Sunday rolled
around, people in our neighborhood were already starting to set off fireworks.
That meant that Bruce was unsettled and looking for the places in our house
with good sound proofing.  That either meant our master bathroom shower (with
the bathroom fan running of course) or in the basement with the door closed.
On Sunday night, Bruce hid in those locations when he could, but on Monday night,
hiding in one of those two locations was a necessity.&lt;/p&gt;
&lt;p&gt;Why do I mention this?  Because to a certain extent, I was doing the same
thing as Bruce.  My office is a wonderful place for working, but not a good place for
blocking out outside noise.  On most days, I can play my music and it covers
most of the outside noise. But the past Sunday night and Monday night were not
about normal outside
noise.  Even with my music turned up, I was still hearing the fireworks that were
going off outside.  Combining that with my Autism meant that I was losing focus
every time a firework went off outside.&lt;/p&gt;
&lt;p&gt;And while I am a bit tired from last night (see the earlier mention of Bruce
being anxious about the noise), it is peacefully quiet outside.  Birds chirping,
the odd car driving by the house, and no fireworks.  That means, I found my
space to write this week’s article.  Sorry for the delay!&lt;/p&gt;
&lt;h2 id="simple-refactoring-is-not-always-simple"&gt;Simple Refactoring Is Not Always Simple&lt;a class="headerlink" href="#simple-refactoring-is-not-always-simple" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now, back to the focus of this article: grab bags.  I am not sure what
the actual name of these objects are, but I have always heard them referred
to as grab bags.  In a physical sense, a grab bag or a go bag is a short
form for a grab-and-go bag.  These grab-and-go bags are actual bags, usually
a large purse or a backpack, that disaster preparers keep ready for emergencies.
The general idea is that with one of these bags, a person has enough of their
basic needs met to keep them going through at least 72 hours of an emergency.&lt;/p&gt;
&lt;h3 id="back-to-basics"&gt;Back To Basics&lt;a class="headerlink" href="#back-to-basics" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From my years of experience, one of the development paradigms that I find useful
is the object-oriented development paradigm.  Without going too far into
the explanation of what &lt;a href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;object-oriented development (OOP)&lt;/a&gt;
is, one of the underlying facets of this type of programming is that common
elements are grouped together in objects, those objects usually being referred
to as classes.  Therefore, an object that deals with a position on a map
should be represented by a class with either two or three
numeric values specifying a relative location.  If dealing with other concerns
about that object are required, then OOP allows for a new class to be created
with those concerns, inheriting the base elements from the original class.&lt;/p&gt;
&lt;p&gt;What does this look like?  Using a simple Python data class, the original
class would look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyPosition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x_location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;y_location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;z_location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using inheritance, if I want to add extra concerns to that class, such
as a name, we can create a new class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyNamedPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyPosition&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here I am using the &lt;code&gt;@dataclass&lt;/code&gt; modifier to simplify things, but if I write it
out in long form, the same rules still apply.  The class &lt;code&gt;MyNamedPosition&lt;/code&gt; contains
four properties, three from the &lt;code&gt;MyPosition&lt;/code&gt; class and one that it generates itself.&lt;/p&gt;
&lt;p&gt;The important thing here is that there is cohesion between the data elements and
the functions that use them.  When I look at either of those two classes, the
collection or data elements I see in each class is a cohesive group that work
together.  This is enough of a grounded concept that there is an existing
metric called &lt;a href="https://www.aivosto.com/project/help/pm-oo-cohesion.html#:~:text=Cohesion%20metrics%20measure%20how%20well%20the%20methods%20of,be%20restructured%20into%20two%20or%20more%20smaller%20classes."&gt;Lack of Cohesion of Methods&lt;/a&gt;
that is documented at the above link.  At that site, one of the recommendations
for objects that have low cohesion is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Low cohesion indicates inappropriate design and high complexity. It has also been found to indicate a high likelihood of errors. The class should probably be split into two or more smaller classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And for the most part, I sincerely agree with their arguments and try
and keep my classes cohesive, with a single responsibility if possible.&lt;/p&gt;
&lt;h3 id="enter-the-container-block-processor-and-the-grab-bag"&gt;Enter The Container Block Processor and the Grab Bag&lt;a class="headerlink" href="#enter-the-container-block-processor-and-the-grab-bag" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In trying to simplify and refactor the &lt;code&gt;ContainerBlockProcessor&lt;/code&gt; class, I was faced
with an interesting dilemma.  While there are a handful of variables used by
the class that can be grouped together, most of the variables denote a distinct action
that was undertaken or a distinct measurement that was performed.  As such, any attempt
on my part to clean up the arguments being passed between functions would
result in almost as many new classes as there were existing common arguments.&lt;/p&gt;
&lt;p&gt;As someone who believes in using Best Common Practices, I believe
that the &lt;a href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;Single Responsibility Principle&lt;/a&gt;
and Object-Oriented Development are solid ways of creating and refactoring code.
I did not like all the arguments being passed between the various functions
in the class, but I could not find enough common responsibility between the
variables to have a manageable number of classes that I could pass around
instead of those arguments.&lt;/p&gt;
&lt;p&gt;Enter the programming grab bag.  In the physical world, a grab bag is a bag
that can be grabbed that holds a mix of things that are probably not related,
except for them being needed in an emergency.  In the development world, the
normal practice of maintaining a single responsibility for the class and cohesion
within that class is suspended in favor of having one location for all variable
related to the parent class.  In this case, I created the &lt;code&gt;ContainerGrabBag&lt;/code&gt; class
to hold the various variables I collected from the arguments of the functions
of the &lt;code&gt;ContainerBlockProcessor&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;This decision was somewhat dangerous from a maintenance point for one simple
reason: multiple responsibilities and low cohesion means that understanding
the flow of the parent object is going to be more difficult than it should be.
However, since I was starting with arguments that were being passed up and down
the function chain, I decided that the grab bag approach was going to be the
better approach.  To further enhance the maintainability of the grab bag,
I made sure to log initial states and every change of state of any of the elements
within the grab bag.  I figured out that while I cannot reduce the count of
elements in the grab bag, I can improve maintainability by clearly noting
when any of the states change.&lt;/p&gt;
&lt;p&gt;But when I sat back and thought about it, the refactoring was needed.
Based on my development principles, I would not have taken this route from
the start, as I believed that I could find simple responsibilities that
I could factor out from the arguments.  I had that belief right up until
the point when I decided that using a grab bag was the only way to
solve the issue.  In the end, it was a calculated move that one class with
many variables and logging of any changes in those variables would be
more maintainable than passing arguments around.&lt;/p&gt;
&lt;h3 id="the-refactoring-took-many-weeks"&gt;The Refactoring Took Many Weeks&lt;a class="headerlink" href="#the-refactoring-took-many-weeks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Even factoring in my recover over the last few weeks, this type of refactoring
takes a long time.  Adding the new variable to the &lt;code&gt;ContainerGrabBag&lt;/code&gt; class was easy.
That part of the refactoring took less than five minutes.  I then had to
scan for that variable throughout the &lt;code&gt;ContainerBlockProcessor&lt;/code&gt; class and
figure out whether each reference was referring to the “global” variable being
passed around, or if it was a special case.  Most of the extracted variables
just referred to the “global” variable, but the ones that did not caused me
enough concern that I took things slowly.&lt;/p&gt;
&lt;p&gt;Slowly meant making a small set of changes, executing &lt;code&gt;ptest -m&lt;/code&gt; to execute
the scenario tests, and then waiting
for those tests to complete.  If everything was fine, it was on to the next change
in the search results.  If not, I had to go back and figure out why the change
failed and adjust for those results.  Guessing the amount of time taken
for each iteration of that loop, I would say it averaged about 3-4 minutes
between the successes and failures.  Multiple that time by the number of
variables in the &lt;code&gt;ContainerGrabBag&lt;/code&gt; class and the number of times that they
occurred in the original &lt;code&gt;ContainerBlockProcessor&lt;/code&gt; class, and that is a
substantial duration of time.  If I had to guess, that duration
would be days, not hours.&lt;/p&gt;
&lt;p&gt;Once that was all cleaned up, the other parts of the refactoring were less
time consuming.  Since any state change was being logged as part of the
&lt;code&gt;ContainerGrabBag&lt;/code&gt; class, removing any lines that were in the original
class to trace values was a simple operation.  Then, going through the
search results for the transferred object, I was able to quickly isolate
arguments and return values that were no longer needed now that the
value was in the grab bag.  I usually cleaned up two or three functions
at once, so the overhead of executing the scenario tests was not too
expensive.&lt;/p&gt;
&lt;p&gt;Finally, I was left with two sets of operations of the variable that
I was working on: those that did actual work and those that were setting
the variable to its default value.  While that distinction may appear
to be a simple calculation, it was not always like that.  In cases where
the variable was set in multiple locations, I had to comment out that
set statement and verify that it was indeed setting the variable to the
same value.  And yes, that meant another set of scenario test runs.&lt;/p&gt;
&lt;h3 id="what-is-the-end-result"&gt;What Is The End Result?&lt;a class="headerlink" href="#what-is-the-end-result" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Based on a couple of attempts at debugging a couple of minor issues,
I can verify that the newly reworked code is indeed easier to maintain.
While I know distinct objects would be easier for me to model in my head
while debugging, the logging of any state change to the log file helps
mitigate that negative.  It is a somewhat weird balance that I need to get
used to, but I am getting used to it.  Instead of keeping that
information in my head, I am getting used to checking the previous lines
in the logs to figure out when the states changes and what they changed
to.&lt;/p&gt;
&lt;p&gt;It is an ongoing process, and it is working better, which is what my primary goal was.
From that point of view, even an incremental improvement is a success.&lt;/p&gt;
&lt;h2 id="release-097"&gt;Release 0.9.7&lt;a class="headerlink" href="#release-097" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the refactoring of the Container Block Processor class completed, I looked
at the project history and realized that it had been over three months since
I created a new release.  While a month of that was covered by the crash and
recovering from the crash, I had completed cleaning up the remaining scenarios
for the nested container scenarios that I had added back in the February-March
period.  As such, I thought it was long time that I created a release.&lt;/p&gt;
&lt;p&gt;There was not anything fancy added in the release, but for me it was important
to release a more stable version of the project.  I still have two more classes
of scenarios to cover, but I was proud to have eradicated all the issues that
I had found to this point.  I also have faith that the remaining issues that
I have found through random testing will be covered by the next groups of
test scenarios that I will add.&lt;/p&gt;
&lt;h2 id="how-am-i-feeling"&gt;How Am I Feeling?&lt;a class="headerlink" href="#how-am-i-feeling" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be blunt… almost back to normal.  One of the things that my crash illustrated
for me is that I need work more diligently on a good balance in my life.  Without
that balance, I know it is only a matter of time before I get into another situation
like the one that caused my crash.  I need to feel okay about stepping away from
my projects for a bit to clear my head.&lt;/p&gt;
&lt;p&gt;But on the other side, I also need to make sure I am not taking too much time
away from them either.  I enjoy working on my projects, and they do require a
certain level of focus to maintain my interest in them.  After taking some time
off, I am finding that it is more difficult to find that balance between
too much project time and too little project time… with the focus on the too
little side.&lt;/p&gt;
&lt;p&gt;But other than that, I am feeling better physically and mentally, and I
did enjoy spending time working on the projects this weekend.  Well,
before the fireworks started going off that is!&lt;/p&gt;</content><category term="Software Quality"></category><category term="grab bags"></category></entry><entry><title>Getting Back To Business?</title><link href="https://jackdewinter.github.io/2022/06/28/getting-back-to-business/" rel="alternate"></link><published>2022-06-28T00:00:00-07:00</published><updated>2022-06-28T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-06-28:/2022/06/28/getting-back-to-business/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/06/14/still-recovering-from-the-crash/"&gt;last article&lt;/a&gt;, I talked about how
my recovery from my crash was going.  In this article, I talk about how I am
getting back to work on my projects.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes you just need to unplug to get back to work.  That is what the last two …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/06/14/still-recovering-from-the-crash/"&gt;last article&lt;/a&gt;, I talked about how
my recovery from my crash was going.  In this article, I talk about how I am
getting back to work on my projects.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes you just need to unplug to get back to work.  That is what the last two
weeks have been for me.  With some success and some failures.&lt;/p&gt;
&lt;h2 id="where-am-i-now"&gt;Where Am I Now?&lt;a class="headerlink" href="#where-am-i-now" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned in my last article, I decided that I needed to take time off
to recover from my recent crash.  There were a handful of things that I had been
putting off around our house, and it was an opportune time to address them. The
fact that they had nothing to do with computers was a bonus.&lt;/p&gt;
&lt;p&gt;When it came down to it, I just needed to shut down for a while.  I have been
pushing hard on my projects for months without a real break, and I was feeling
more of the disaster than the aster.&lt;sup id="fnref:YoungJustice"&gt;&lt;a class="footnote-ref" href="#fn:YoungJustice"&gt;1&lt;/a&gt;&lt;/sup&gt;  On one hand, I knew that
I needed to take a break to make sure that I could recover properly and deal with
the anxiety that I have experience about my projects.  On the other hand, I was
just tired.  In looking back on that fateful weekend, I wonder if I was so
tired that I just pushed ahead “to get it done” without thinking of the ramifications.&lt;/p&gt;
&lt;p&gt;Either way, I sincerely believe it was the right move for me.  While the low
energy that I am feeling right now is mostly due to relaxing and working around
the house for the last two weeks, I can already feel it lifting bit-by-bit.&lt;/p&gt;
&lt;p&gt;And with that, I am pretty much at the end of what I have to say for this article.
Not much life related or project related that has changed in the last two weeks,
so nothing much to write about.  Next week?  Now I am hoping to have more to write
next week, so stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:YoungJustice"&gt;
&lt;p&gt;Yes, I am a fan of the Young Justice cartoon, which is where I heard “aster” for the first time. &lt;a class="footnote-backref" href="#fnref:YoungJustice" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Personal"></category><category term="crashing"></category></entry><entry><title>Still Recovering from the Crash</title><link href="https://jackdewinter.github.io/2022/06/14/still-recovering-from-the-crash/" rel="alternate"></link><published>2022-06-14T00:00:00-07:00</published><updated>2022-06-14T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-06-14:/2022/06/14/still-recovering-from-the-crash/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/06/07/recovering-from-the-crash/"&gt;last article&lt;/a&gt;, I talked about how I
was recovering from my recent crash while working on my
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project. In this article,
I talk about how things are going with that.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the most important things for me about working on a side project is …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/06/07/recovering-from-the-crash/"&gt;last article&lt;/a&gt;, I talked about how I
was recovering from my recent crash while working on my
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project. In this article,
I talk about how things are going with that.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the most important things for me about working on a side project is balancing
my project work with my home life and my professional life.  It is especially important
to order those three things in the correct order.  For me, that order is home life,
then professional life, then project work.  And when I do not keep that in mind,
I often get confused and place them in the wrong order.  A couple of weeks ago,
that is what happened, with bad results: a crash.&lt;/p&gt;
&lt;h2 id="where-am-i-today"&gt;Where Am I Today&lt;a class="headerlink" href="#where-am-i-today" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned in my &lt;a href="https://jackdewinter.github.io/2022/06/07/recovering-from-the-crash/"&gt;last article&lt;/a&gt;,
I am recovering from a crash from pushing work on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.  As of today,
I feel that I am mostly back to where I was before the crash, but I am still feeling
a bit of the aftereffects of the crash.  For the most part, my mind and energy
levels are back to where they need to be. But my anxiety is another issue.&lt;/p&gt;
&lt;p&gt;Why is that?  Because it was painful, and I have an anxiety disorder.  That is the
short answer.  The long answer is more detailed.&lt;/p&gt;
&lt;p&gt;I am not shy about talking about having Autism, and I am not going to start now.
While my major diagnosis is Autism, I have minor diagnoses of Sensory Overload
Disorder and Autism-related Anxiety Disorder.&lt;sup id="fnref:note"&gt;&lt;a class="footnote-ref" href="#fn:note"&gt;1&lt;/a&gt;&lt;/sup&gt;  What the first means is that a lot
of sensory input, such as being in a crowded restaurant, will overload me and cause
me to get exhausted very quickly.  This happens so often that my wife and I have our
own special code that I can use if the noise gets too much.  We have an agreement
that allows me to use that code without any downside. After more than ten years
with this code in place, I am finally starting to use it without feeling like I am
letting my wife down.  As this requires me to be in place that is noisy, I have
a great deal of control about when this hits me, allowing me to mitigate it very
effectively.&lt;/p&gt;
&lt;p&gt;The Anxiety Disorder is another story.  This is the fun one that I deal with on
a near daily basis.  Unlike a
normal person’s anxiety disorder, my disorder is tied to my ability to analyze
problems.  The issue that I have is that it is incredibly difficult for me to
not analyze things.  Basically, it is very hard to turn it off. That is one of
the reasons that music helps me concentrate when I do any mental work, be
it coding, writing, or thinking.  If I do not
have something “predictable” for my brain to latch on to, it starts to analyze
every bit of noise
around me, distracting me very quickly.  On the other hand, if I have music
that I normally listen to playing, I can jam and rock out without losing my train
of thought once.&lt;/p&gt;
&lt;p&gt;But in the absence of something to allow my mind to analyze at a low level, my
mind starts racing away from me.  While I have medicine and breathing techniques
to help with my anxiety, I still must do the work to find something to
counteract my anxiety.  And while certain techniques work most of the time,
nothing works all the time.&lt;/p&gt;
&lt;h2 id="anxiety-hurts"&gt;Anxiety Hurts&lt;a class="headerlink" href="#anxiety-hurts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am not sure if everyone experiences anxiety in the same way that I do, but for
me, anxiety hurts.  Parts of my anxiety cloud my mind with analyses of what can
possibly happen. Most of the time, I can feel the anxiety as the slight tightening
of the muscles in my body, especially my chest.  Nothing serious, but I can easily feel my body
tensing up as if something terrible is coming.  Of course, I know that it is mostly
in my head. But in the moment, that knowledge tends not to help much.&lt;/p&gt;
&lt;p&gt;From a purely mental point of view, feeling anxiety means that I miss
things with my family, my friends, and my environment.  Because my head is stuck
in a rut on whatever it is that is stressing me out, it means I cannot always focus my
time on what is around me.  And to be blunt, those things that I keep around me
are what really make my life worth living.  I know that movies are fun to watch,
and games are great to play, but it is the living things around me that help me
find satisfaction in life.  So not being able to focus on those things hurts.&lt;/p&gt;
&lt;p&gt;From a more physical point of view, my anxiety tends to kick off my “fight-or-flight”
reflexes more than I would like them to.  Those extra hormones that are released
with those reflexes have side effects as well.  If my anxiety kicks off just before
I go to bed, it means I will have issues falling asleep or staying asleep, both of
which are not good.  If they kick off during the day, it can cause me to not be
able to focus on my tasks as well as I would like.&lt;/p&gt;
&lt;p&gt;However, the main physical side effect of my anxiety is on my energy levels.
Everything in life strives to find balance, and my energy levels are no exception.
When my anxiety kicks off my reflexes, I get a burst of energy that is almost
always inconvenient to deal with in the moment.  After the situation goes away,
I have the inverse problem: low energy.  As the anxiety focused my energy to
deal with “the crisis”, it is then followed by a lull while my body recharges.
Even with doctor prescribed medication to help mitigate these symptoms, it still
sucks.&lt;/p&gt;
&lt;h2 id="keeping-things-low-key"&gt;Keeping Things Low-Key&lt;a class="headerlink" href="#keeping-things-low-key" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Keeping that information in mind, I decided last week to take a low-key approach and
work on low priority items that have been on my to-do list of a long time.
From a code-clean point of view, I was never happy with the number of arguments
that I am passing around from function to function.  After thinking about it for
a couple of hours last week, I decided that this would be a good task to take
on while I am recovering.  Not a lot of thinking and not a lot of pressure.
Just clean refactoring.&lt;/p&gt;
&lt;p&gt;I know that this work is not terribly important, that is why it is low-key. But
it is helping me clean things up in the project and giving me time to recover.
More importantly, it is helping me make progress with the project while not doing
anything too taxing.  And it is working.  It is taking time, but my anxiety is
slowly dissipating.&lt;/p&gt;
&lt;p&gt;Pushing myself to the point of crashing had lasting effects, and this
low key working is helping me fight the remaining side effect: my anxiety.
In trying to analyze why my anxiety is acting up, the best answer I can give
is this: my body does not want another crash.  I feel that this is going to
get better with more distance from that crash, but I just have to give my
mind and body the time that they need to recover.&lt;/p&gt;
&lt;h2 id="i-thought-long-and-hard-about-this"&gt;I Thought Long And Hard About This&lt;a class="headerlink" href="#i-thought-long-and-hard-about-this" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, with my anxiety still acting up from my crash, and the low key work helping to
get me back on track, I have decided that the best thing for me to do for a couple
of weeks is to take a break from my side projects and focus on non-mental projects
around the house.  I am not going to abandon my projects… I love working on them
too much!  But I know that if I want to be able to work on them with a clear mind,
I need to take a break.&lt;/p&gt;
&lt;p&gt;So, unless things change, back in a couple of weeks!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:note"&gt;
&lt;p&gt;I am not a psychologist or a medical doctor.  I have been formally diagnosed with these by a fully licensed psychologist who specializes in Autism.  The information presented here is from that diagnosis and is specific to me.  Please keep that in mind. &lt;a class="footnote-backref" href="#fnref:note" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Personal"></category><category term="crashing"></category></entry><entry><title>Recovering from the Crash</title><link href="https://jackdewinter.github.io/2022/06/07/recovering-from-the-crash/" rel="alternate"></link><published>2022-06-07T00:00:00-07:00</published><updated>2022-06-07T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-06-07:/2022/06/07/recovering-from-the-crash/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/05/30/crashing-on-a-side-project/"&gt;last article&lt;/a&gt;, I talked about how I
had suffered a major crash while working on my
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project. In this article,
I talk about continuing to battle those effects.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The build up to last weekend was nasty.  After spending 30 months working on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/05/30/crashing-on-a-side-project/"&gt;last article&lt;/a&gt;, I talked about how I
had suffered a major crash while working on my
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project. In this article,
I talk about continuing to battle those effects.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The build up to last weekend was nasty.  After spending 30 months working on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project,
I do not believe I have ever had a time where I crashed as hard as I did that
weekend.  From that aspect of things, I was long overdue.  And now, I get
to deal with the long path to recovery.&lt;/p&gt;
&lt;h2 id="one-size-does-not-fit-all"&gt;One Size Does Not Fit All&lt;a class="headerlink" href="#one-size-does-not-fit-all" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From over thirty years of professional experience, and even more experience working
on my own projects, I know that there are four level of crashing that I have encountered.&lt;/p&gt;
&lt;h3 id="level-1-the-simple-crash"&gt;Level 1: The “Simple” Crash&lt;a class="headerlink" href="#level-1-the-simple-crash" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first level for me is the simple crash.  The reason I call this a “simple” crash is
because the path to get there is simple, the cause is simple, and the path to recover
is simple.  This is the crash that I tend to hit a lot, mostly because I like to push
myself a bit past what I am comfortable dealing with.  These
situations are when I am running out of energy when working outdoors or feel that
I need “just a little bit more” experimentation to get a problem solved.  The wonderful
thing about these situations is that the recovering from them is simple: relax and
take it easy.  A couple of hours with my feet up and watching a good movie and I
am ready to go again.&lt;/p&gt;
&lt;p&gt;As the side effects are short term and are typically good for increasing stamina,
I am usually okay with these crashes.  I do watch out for their effects though,
making sure that the effects are not cumulative and do have a tangible benefit.
If not, I try and find a way to avoid the crash completely.&lt;/p&gt;
&lt;h3 id="level-2-the-eyes-wide-shut-crash"&gt;Level 2: The “Eyes Wide Shut” Crash&lt;a class="headerlink" href="#level-2-the-eyes-wide-shut-crash" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The second level for me is the “eyes wide shut” crash. I tried to find another name for
this crash, but none of them had the same emphasis that I believe this name gives it.
While I do run into this physically on occasion, I run into this more with mental
problems through which I am working.  As much as it pains me to say it, this level
of crash is where the physical and mental damage starts to set in.  A good physical
example for me is going on a long hike after a dormant winter.  I can do the longer
hikes, but I must get back in shape first.  You know, make intelligent
decisions.&lt;/p&gt;
&lt;p&gt;And it is with those intelligent decisions that I get into the mental aspect of
this type of crash.  Telling myself “I can make it to the end” when I can see the
end of a hike is one thing.  Pushing myself regardless of the consequences when I
can still see the start is another thing entirely.  Mentally speaking, I get into
these situations when I do not pay attention to where I am at in solving a problem,
only telling myself that the problem must be solved.  However, instead of a sore
body from a hike, the damage is in my ability to solve other problems.  Instead
of thinking about the best approach, I just charge forward.&lt;/p&gt;
&lt;p&gt;To bring this back to the name of the crash, it is as if I closed my eyes as hard
as I can, continuing to walk towards the end of the hike. Given that image, I
cannot see any way in which I would not harm myself.  Get lucky that it was not
a bad injury.  But at least minimal injuries are bound to occur.  And as these injuries are
a bit more severe than just the “simple” crash, the recovery is more prolonged.
For me, I need multiple days where I specifically focus on avoiding the areas
where the injuries occurred.  If I injure my legs from a hike, it means I sit down
with my legs raised.  Similarly, if I injure myself mentally, it means avoiding doing
the same type of work that I was doing that caused the injury.&lt;/p&gt;
&lt;p&gt;I would love to say that I do not crash like this frequently, but the best I can
do is to say that I do not crash like this as frequently as before.  There are
times where I push past the “simple” crash more than I should, and usually I
have a good reason for doing that.  But with these crashes, I am more
concerned about the injuries, mental and physical, and how they accumulate.
From my point of view, there usually is a good reason for pushing as far as I
did, but I know I am going to pay for it later.&lt;/p&gt;
&lt;h3 id="level-3-the-crossover-crash"&gt;Level 3: The “Crossover” Crash&lt;a class="headerlink" href="#level-3-the-crossover-crash" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The third level that I have experienced is the “crossover” crash.  Once again, I spent time agonizing over
a good name for this crash before settled on this one.  The reason for that specific name is
hopefully self-evident.  When this type of crash occurs, it means I pushed through
the “eyes wide shut” crash to the point where any injuries crossed over from
the mental to the physical and vice versa.  While there are other ways to get to this
type of crash, such as getting into an automobile accident, I am going to focus
on those situations where I have a decent ability to affect the outcome.&lt;/p&gt;
&lt;p&gt;From that narrowed point of view, the best description is that I end up working
on something until I am sick of it.  I have not encountered this physically in
my life, but I have hit this mentally about ten times in my life.  In each case,
I pushed through the small injuries, weathering through the multiple, larger
injuries until I reached a breaking point.  Quite simply, I got to a point where
I just did not have any more left to give.&lt;/p&gt;
&lt;p&gt;Based on my own nomenclature, this is where I ended up a week or so ago. My mind
was crashing so hard that I was feeling physical symptoms in my body.  And unlike
the recovery steps for the previous two situations, the steps to recovery for each
of these situations has been very specifically keyed to that situation.  For this last crash, I
had to immediately stop doing anything that did not feel right, which started out being most things.
For the first couple of days, even doing LEGO or watching some more interesting
movies was too much.  I just had to take it slow, evaluating where I am at each
day and adjusting for that.  Eventually I got to the point where I was able to
some debugging and writing of code, but I had to make sure to not push it too far.
And things did get better… just very slowly.&lt;/p&gt;
&lt;h3 id="level-4-burnout"&gt;Level 4: Burnout&lt;a class="headerlink" href="#level-4-burnout" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the level that nobody wants to be at: burnout.  I have been there once
in my life, and that was enough for me.  This is the crossover crash on
steroids.  When this hit me, my life energy just drained away from most of the
aspects of my life.  It was just nasty.  So nasty in fact, that I am just going
to say “seriously, do not get this far” and leave it at that.  It still hurts me
mentally to think back to that time.  And the recovery is just as brutal, taking
multiple weeks only to find myself back to the crossover crash stage and starting
my recover there.&lt;/p&gt;
&lt;p&gt;Those were what I refer to as the “dark days.” That was a time in my life when I
really had no choice but to keep on pushing.  This was back in the 2002-2003 time
frame when the tech bubble had burst and there was hardly any work to be found anywhere.
So, when I did find contract work here and there, I worked myself to the bone.  There
were times where I was working on two full time contracts just to make ends meet.  It
was bad.  It was not a fun time for me or my family.&lt;/p&gt;
&lt;p&gt;Having been there, I thought that there was nothing else I could do.  With twenty years
of experience since that year, I now understand that it may look like there were no
alternatives at the time, but there are always alternatives.  These were not the best
alternative, but they would have kept me from going through that dark time.  My advice
to any in a comparable situation is to please look for these alternatives, even if they
are not the best alternative, and achieve those alternatives.  Focus on the
things that mean a lot to you, which in my case is family.  Now, I do not really hate anyone,
and definitely do not have anyone that I would call an enemy, but as the saying
goes, “I wouldn’t want to wish that on my worst enemy.”&lt;/p&gt;
&lt;p&gt;When I finally recovered, I know I spent extra time with my family to make up for
wasting time with them when I was burned out.  Just do not go there. Find a way to
avoid going there.&lt;/p&gt;
&lt;h2 id="where-am-i-at-now"&gt;Where Am I At Now?&lt;a class="headerlink" href="#where-am-i-at-now" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, first off, I had to delay the publishing of this article by a day because I am
still recovering from that weekend. Normally the words for the articles just flow from
my fingers.  But that “flow” was just not there on
Sunday and Monday night.  On both nights, I pushed until I started feeling resistance
and then I backed off.  I decided that a good article a day late with a healthy mind
was better than adding extra time to my recovery.&lt;/p&gt;
&lt;p&gt;Other than that, the recovery is going well.  I am not at 100% yet, but I can see my own
progress in getting there.  I still took breaks this week and weekend while I was
working on fixing issues, but the frequency and duration of those breaks was noticeably
lower.  I also noticed that when I got to the point to take a break, it was more
of a nudge in my mind that I should stop, rather than any kind of yelling in my
ears.  So, while I am not back to where I was before that weekend, I can see that
happening in the next couple of weeks.&lt;/p&gt;
&lt;p&gt;From a project point of view… well, I honestly wish I had hit that brick wall sooner.
Before I crashed, I worked an entire weekend without making any headway on the
remaining container issues on which I was working.  As of this past Sunday afternoon,
all three groups of issues are debugged, fixed, and committed.  To be clear, while recovering
and not at full strength, I was able to solve those issues when a mostly healthy
me could not make a dent in those same issues over that fateful weekend.&lt;/p&gt;
&lt;p&gt;If nothing else, that kind of information makes me feel humble. It helps me to
understand that I still have room to grow, especially when it comes to taking care
of myself.  One of my views on that information is: debugging and solving issues
is just as much about wisdom as it is about intelligence.  Brute force attacking
those issues just got me into a bad mental and physical state.  But a more
measured recovery attempt worked well, achieving my desired goals.  Sometimes,
all the pressure just gets in the way where a more measured and relaxed approach
works more seamlessly.&lt;/p&gt;
&lt;p&gt;I do not believe I am a good poster child for what to do when developing software
and testing that same software.  I am still learning, and I still on the journey
to be better.  But I do know that this experience has taught me to be more honest
with myself about debugging code and solving issues.  If not, then I can expect
another repeat of this in the future.  And though I do stupid things from time to
time, I would prefer to learn from them than repeat them.  It just seems easier
to me.&lt;/p&gt;</content><category term="Personal"></category><category term="crashing"></category></entry><entry><title>Crashing On A Side Project</title><link href="https://jackdewinter.github.io/2022/05/30/crashing-on-a-side-project/" rel="alternate"></link><published>2022-05-30T00:00:00-07:00</published><updated>2022-05-30T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-05-30:/2022/05/30/crashing-on-a-side-project/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/05/17/markdown-linter-shifting-left/"&gt;last article&lt;/a&gt;, I
talked about the work I have been doing in the background on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project. In this
article, I talk about the effect that work had on me personally.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, this is a personal article. In addition, any longtime readers may notice that …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/05/17/markdown-linter-shifting-left/"&gt;last article&lt;/a&gt;, I
talked about the work I have been doing in the background on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project. In this
article, I talk about the effect that work had on me personally.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, this is a personal article. In addition, any longtime readers may notice that
this article was posted a week later than I usually post.  Basically, what happened
is that while working on my side projects last weekend, I crashed and crashed hard.&lt;/p&gt;
&lt;p&gt;Being my usual self, I thought it would be cool to try and help others avoid the
negativity of crashing and to help show the positives of taking care of one’s self
after such a crash.  Basically, how to avoid the pitfalls and help get on your
feet faster afterwards.&lt;/p&gt;
&lt;h2 id="the-crash-itself"&gt;The Crash Itself&lt;a class="headerlink" href="#the-crash-itself" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That weekend started like many other weekends I have spent working on my open
source projects.  I talked with my spouse and made sure that I had a clear idea of
what our schedule was like for the weekend, planning my project work around those
scheduled items.  Experience has taught me to include buffer time and extra “spouse”
time, so added that as well.  After that was all taken care of, I had a good idea
of the time I could spend on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project and looked forward to clearing up some of the remaining issues.&lt;/p&gt;
&lt;p&gt;To be honest, there are not that many issues left that I consider blocking issues,
but there are at least three issues that I believe meet that criteria.  Those issues
are all issues that were recorded during the addition of my latest round of container
combinations.  And as I am being honest, I will say this very bluntly: I was upset
with myself that I still had three issues left.&lt;/p&gt;
&lt;p&gt;I was not upset with myself for finding those issues.  Those issues were all good
finds due to the combinations.  What I was upset with is that it had been a good
couple of months since I found them, and they were still on the active issues list.
I temporarily forgot that I had a series of interview loops followed by on-boarding
at my new job.  And as I started locating those issues and dealing
with them, I slowly turned that weekend from a fun weekend improving the quality
of the project into a compulsive need to get those issues dealt with.&lt;/p&gt;
&lt;h3 id="how-did-it-happen"&gt;How Did It Happen?&lt;a class="headerlink" href="#how-did-it-happen" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Even after a good eight days since it happened, most of what happened
that weekend is still clouded in my mind.  I know that initially I wanted to get
those issues dealt with, but I was forgiving with myself because of what had been
going on in my life.  But I also know that I had been trying to make headway
with those issues during the week, and I had not made any progress on any of those
three issues.&lt;/p&gt;
&lt;p&gt;And that is where I think I started to descend into madness, so to speak.  While
I am usually forgiving with myself for life’s circumstances, I can be equally
unforgiving when I do not feel that I am making reasonable progress.  Put another
way, I wonder if I thought that I should have made more progress on those three
issues.  If so, then my lack of progress might have kicked off my anxiety and
then everything would have snowballed.&lt;/p&gt;
&lt;h3 id="what-did-it-feel-like"&gt;What Did It Feel Like?&lt;a class="headerlink" href="#what-did-it-feel-like" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The honest answer to the earlier question is: I can only guess.  I am not trying
to hide the truth, I honestly do not remember much of my work on that weekend.
I remember some stuff from Friday when I started working on debugging.  Project-wise,
I do not remember much until around 6PM on Sunday when I locked my computer and
buried my head
in my hands.  The little bits that I do remember between those two points are
filled with anger and frustration, and me trying to push past those to try and
get something done… and failing.  Not good memories.&lt;/p&gt;
&lt;p&gt;I remember stopping at 6PM on Sunday with the intense feeling that I had pushed
myself too far.  The thought of unlocking my computer to start writing my weekly
article caused me to be nauseous. The thought of double checking my research from
the past two days to see if I missed something made me sick to my stomach.  I left
my computer locked, exited my office, and closed the door.  If the door had a
lock on it, I would have locked it as well. I was done.&lt;/p&gt;
&lt;p&gt;I just vegged out for the rest of the night, hoping to get a few of my brain cells back.
As long as I did not think about my project, I was fine.  I had some conversations
with my spouse, watched a couple of recorded Champion’s League matches, and
did work on one of my LEGO models.  My brain cells were all working in those areas.
As long as I mentally stayed away from the project, I was fine.&lt;/p&gt;
&lt;p&gt;When I went to work the next day, everything was fine there too. It was a good Monday
workwise, and I got a healthy amount of stuff done.  But the second I stopped
working and I went to my home computer, that sense of dread came back.  Reading
e-mail was fine, but anything more than that and that intense negative feeling just
crept back into my head.  I took until Wednesday before I was able to logon to that
computer to do something other than read e-mail.&lt;/p&gt;
&lt;h2 id="responding-to-my-crash-with-honesty"&gt;Responding To My Crash With Honesty&lt;a class="headerlink" href="#responding-to-my-crash-with-honesty" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wish I could say that I was smart enough to avoid the crash in the first place, but
obviously I was not.  Because of the cloud around that entire weekend, I cannot
even take an honest look back at that time and figure out how to approach that
work differently.  I can guess, but that is all that it is, a guess.&lt;/p&gt;
&lt;p&gt;Having been through situations like this over the years, the important part for
me was understanding that I had crashed and being honest with myself that I had
crashed.  This was not just a bad day or something that I would just “get over”,
it was a crash.  This was a negative situation that I knew I had to manage properly
if I wanted to recover quickly and with as few remnants hanging around as possible.
In lay terms, if I did not take care of myself properly, one or more of the
bad parts of this situation could say around.&lt;/p&gt;
&lt;p&gt;Being honest with the little bit that I could remember, I was pretty sure that I
had pushed myself too far, too many times over that weekend.  Based on how I was
feeling on Sunday night, which was my best guess.
As such, I knew that I needed to avoid pushing myself for at least a week or so
until I started feeling better.  For me, that is a hard thing to do.  The only
thing driving my open source projects forward is me making the time and effort to
work on them.  As such, taking a break from any work like that is like nails on a
chalkboard for me.&lt;/p&gt;
&lt;p&gt;The thing that stopped me from doing that was my honesty with myself and my experience
with crashes in the past.  Based on that experience, even if I wanted to rush forward
to work on the projects, I knew that it was the wrong
thing to do in this case.  Forget about a little voice telling myself that it
was the wrong thing, it was a huge, booming, echoing voice.  That voice was telling
me that it was okay to evaluate myself for five or less minutes a day to see how I was
doing, but any more effort was going to be hurtful.&lt;/p&gt;
&lt;p&gt;So, I waited.  I tried each day to see how I was doing, but I waited.&lt;/p&gt;
&lt;h2 id="and-then-the-recovery"&gt;And Then, The Recovery&lt;a class="headerlink" href="#and-then-the-recovery" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And it was the following Saturday morning before I evaluated myself for five minutes
without feeling decreased negative pressure. Assuming that I am usually able to
exert 100% effort, if I had to gauge where my energy or effort was at, then this
effort felt like it was in the 20-30% range.  It was not much, but it was a good start.&lt;/p&gt;
&lt;p&gt;Using that level of effort, I started to work, taking decent breaks through
the rest of the day.  At any point, if I felt any pushback from myself, I simply
said “that is enough”, and walked away from the computer for at least an hour.
And through the course of the day, I must have done that around six times.
From a pure time point of view, it was not a good day for me working on the
PyMarkdown project.&lt;/p&gt;
&lt;p&gt;But from an effort point of view, it was encouraging.  By the end of that
Saturday, I would have to guess that I was more in the 45-55% range as far as
my effort was concerned.  More importantly, I had solved one of the issues that
had caused me to get into the negative situation in the first place.  It was
humbling.  What I had tried to do with each of the three remaining issues over
that nasty weekend, I had accomplished with less than half my usual effort while
I was recovering.&lt;/p&gt;
&lt;p&gt;The news gets better.  Doing some more work yesterday, I was able to raise
my effort level to around 60-70%.  And while I did not solve either one of the
two remaining issues, I have been able to make substantial progress to get one
of them solved.  While I do not want to jinx anything, I am confident that with
more of the save level of work, I should be able to get that issue resolved
by the end of the week.  And if I do not get it done, I know I have to be easy
on myself.&lt;/p&gt;
&lt;h2 id="issues-for-thought"&gt;Issues For Thought&lt;a class="headerlink" href="#issues-for-thought" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a father and friend, I have tried to impart many small pieces of wisdom that
I have gained only though a lot of sacrifice. One of those bits of wisdom is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It does not matter how many times you get knocked down to your knees.  What matters
is how many times you decide to get up, dust yourself off, and try not to get
knocked down again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are all human beings, each of us in our own way.  And one of the unenviable
truths of being human is that we learn best from failure instead of success.  My
big failure was in not recognizing that I was in some form of a downward spiral
until I hit the bottom of that spiral.  But my success was in being truthful with
myself and acknowledging that I was at the bottom.  That success continued when I
concluded that I needed to take care of myself to get out of there.
It needed to be my choice to dust myself off after getting knocked down, and no
one else’s. And while it was not any easy choice, I believe it was the right choice
to make.&lt;/p&gt;
&lt;p&gt;In summary, in a typical “me” move, instead of focusing on the fact that I crashed,
I decided to share my experience and try and to figure out how to grow from it.
It took me over twenty years to learn this particular pattern… I hope I can
help shortcut some of that time for others.&lt;/p&gt;</content><category term="Personal"></category><category term="crashing"></category></entry><entry><title>Markdown Linter - Shifting Left</title><link href="https://jackdewinter.github.io/2022/05/17/markdown-linter-shifting-left/" rel="alternate"></link><published>2022-05-17T00:00:00-07:00</published><updated>2022-05-17T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-05-17:/2022/05/17/markdown-linter-shifting-left/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/"&gt;last article&lt;/a&gt;, I
talked about working on some of my projects to get their code coverage up to
100% and why I felt that the effort was important.  In this article, I focus
more on the work I have been doing in the background on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/"&gt;last article&lt;/a&gt;, I
talked about working on some of my projects to get their code coverage up to
100% and why I felt that the effort was important.  In this article, I focus
more on the work I have been doing in the background on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, I have been doing work on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project in the background.  I may not be visible, but it is going on.  It was not
until this week that I have something concrete to show for that work.  And since
not having something to talk about on my flagship project caused me concern,
I thought I would devote an article to the reason for that delay: debugging.&lt;/p&gt;
&lt;h2 id="shift-left"&gt;Shift Left&lt;a class="headerlink" href="#shift-left" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During my recent round of interviews, one of the concepts that I talked about was
shifting the debugging process left as much as possible using automated
testing.  As an SDET (Software Development Engineer in Test), a large part of my
job is to provide solid automated tests that can be executed within a continuous
integration pipeline.  Shortened to “shift left”, this form of thinking strives
to get any kind of test failure as close to the development of the code being tested
as possible.  And yes, that does include trying to find things at the architecture
and design phases if possible.&lt;/p&gt;
&lt;h3 id="what-do-you-mean-left"&gt;What Do You Mean “Left”?&lt;a class="headerlink" href="#what-do-you-mean-left" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let me start with the “left” part of that phrase.  In most development processes,
whether it is explicit or not, there is a workflow that happens from ideation to
release.  In more formal environments, these steps are usually something like
ideation/requirements, architecture, design, vetting the design prior to implementation,
implementation, unit and functional testing, peer review, integration and end-to-end
testing, and
release.  In less formal environments, these steps are still there, just compressed
into fewer steps with some steps “missing” or “implied.  While each of those individual
steps is deserving of an article of its own,
the important thing that I want to communicate is that flow from “an idea” to
“a released thing”.&lt;/p&gt;
&lt;p&gt;Technically speaking, once the bug fix or feature has been released, there may
be added iterations of that workflow.  These iterations can be done to tighten
up misunderstood requirements but are most often performed to address bugs in the
design or implementation.  It might be tempting to think of that new workflow
as part of the original workflow, I believe there are clear reasons that the workflow
is separate.  As that is probably enough content for a separate article, please
take my word on that belief for now.&lt;/p&gt;
&lt;p&gt;Given those foundations, it should be easy to see that the further left in the workflow
that a team gets, the more cost accumulates from the previous steps.  Before the
implementation step, most likely everything has been done with some form of project
lifecycle management system, be it something like the popular &lt;a href="https://www.atlassian.com/software/jira"&gt;Jira&lt;/a&gt;,
using a whiteboard, or writing things down on paper. The implementation and first
testing step introduce code provided by a developer, increasing the cost by a
sizable amount.  Peer review adds to that by bringing the cost of having multiple
developers spend time looking at the changed code, as well as any requested changes
that they ask for to be implemented.  The second level of testing, integration and
end-to-end testing, adds another cost multiplier as those types of tests are
more fragile automated tests because of their distance from the implemented code.
Finally, the release step
adds another multiplier of cost as any issues that are reported once a change is
released must go through yet another team of people to report any issues with
those changes, prioritize those issues, and create new workflows to address any
prioritized issues.&lt;/p&gt;
&lt;p&gt;As someone who has done a lot over thirty years of development in his career, please believe me.
The further an issue makes it into that workflow, the more costly it is.
When I say “costly”, those multipliers are usually between three times multipliers and
10 times multipliers.  And that is if the team is lucky.&lt;/p&gt;
&lt;h3 id="so-where-does-the-left-come-in"&gt;So Where Does the Left Come In?&lt;a class="headerlink" href="#so-where-does-the-left-come-in" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given that information about the traditional development workflow, there is a simple
directionality to it.  Writing that information on a whiteboard, I would simply
create a simple line with dots on the line representing the various points in the
workflow.  At each point, I would annotate the point with one of the names
associated with the workflow.  Given that perspective, the workflow has a simplified
flow from the left of the line to the right of the line.&lt;/p&gt;
&lt;p&gt;Therefore, when I am talking about “Shift Left”, I am talking about trying to detect
issues in a project as early on in the project as possible.  While this may seem like
a “duh” moment to some people, having issues creep to the left is a quite common
occurrence on development teams.
As a developer, I want my code to get out there and be used.  As a developer, I want
to do something interesting, not the same old thing repeatedly.  And as a
developer, I have felt pressure from above to get one thing done and to more on to
the next thing on my plate.&lt;/p&gt;
&lt;p&gt;However, about 12 years ago when I was a developer, I realized I was more concerned
about the quality of what my team was producing than the velocity with which my
team was producing.
I was more concerned with taking extra time to ensure that the requirements were
correct before moving forward with implementing them.  And automated testing? Back
then I faced a lot of pushbacks for adding too many tests to a project, as those
tests were believed to be unwieldy and hard to support.&lt;/p&gt;
&lt;p&gt;But my justifications for wanting to do those tests were solid.  Based on my experience
and my reading of peer articles, others in the industry had started to see things
in a similar light.  More importantly, they were starting to talk about it in more
clear terms than I could manage at the time.  For those of us who “saw the light”,
it came down to a simple bit of calculus. Either a team can impose a small overheard to
take care of those issues before they escape OR that team can pay a cost for
those issues later.  A team can call those issues “tech debt” or anything
else they want to, but they are misses for the team just the same.&lt;/p&gt;
&lt;p&gt;And those misses are costly and can be demoralizing.  The cost part of any miss is easy
one to calculate.  Instead of incurring a small cost to find and solve the issue
before it escapes the team’s view, one or more distinct workflows must be spun up to
address that issue.  In terms of human cost, one workflow is that people were needed
to report the issue and people were needed to confirm that it is an issue.  Another
workflow was then needed to triage the issue to figure out if it has a high enough
priority to fix.  And those two workflows are needed before the team needs to create
a new workflow to fix the issue.  In financial costs, each person in those workflows
has a salary.  Paying a team to fix issues means that the team cannot be working on
improvements to the project. There is the cost for them contributing to one or more
workflows, and there is the cost of not having those people working on new work.
Simple math.&lt;/p&gt;
&lt;p&gt;As to the demoralizing aspect, that aspect is one that I have seen quite often.
I have been in meetings where teams have been told of the issues related to their
project. Most teams try not to assign blame, but it does happen. There are often
questions raised as to
how the team missed finding that issue.  If I had a dollar for each time in my
career that I have heard “How did we miss that?” in a meeting, I would be able to
buy my wife a fancy seafood dinner with an expensive bottle of wine.  And
when the team gets such a backlog of issues that they must dedicate an entire
block of work to dealing with those issues?  Let me just say that I can usually
sense a drop in the energy level in the room without much effort when the manager
says, “we are going to need a bug fixing sprint.”&lt;/p&gt;
&lt;h3 id="shift-left-is-about-paying-the-right-cost-at-the-earliest-time"&gt;Shift Left Is About Paying The Right Cost At The Earliest Time&lt;a class="headerlink" href="#shift-left-is-about-paying-the-right-cost-at-the-earliest-time" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;“Shifting Left” is about dealing with these issues as efficiently as possible.
To get a project to be better,
the proper investments need to be made as far to the left in the workflow as possible.
Problems with architecture and design?  Make sure the requirements are solid and
the architects and designers understand those requirements, with a solid understanding
of the tools and choices at their disposal.  Problems with poor implementations?
Make sure the developers understand the requirements and designs and supply guidelines
for them to follow to prove that they have met those goals.  Problems with changes
to implementations creating new issues?  Make sure that there are solid integration
tests that are independent from the developer-created tests.&lt;/p&gt;
&lt;p&gt;Will these catch everything?  Not even a chance.  However, when I have seen practices
like this implemented, it has always made a sizable impact in the quality of the
project.  And truthfully, any decent reduction in the cost of a change is usually
worth it.  It is just about paying the right cost as the earliest
time possible.  Noticing a requirement seems off before coding starts?  It can
be a five-minute conversation, or it may evolve into a meeting with a small group.
But avoiding the act of properly reading that requirement until one or more integration
tests expose that issue?  That cost will definitely exceed the cost of that small
group meeting.&lt;/p&gt;
&lt;p&gt;And the other part of that is simple. As a developer, I always wanted to write decent
quality code, because the person maintaining that code was most likely going to be
me.&lt;/p&gt;
&lt;h2 id="shift-left-on-pymarkdown"&gt;Shift Left on PyMarkdown&lt;a class="headerlink" href="#shift-left-on-pymarkdown" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;How does this all apply to the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project?&lt;/p&gt;
&lt;p&gt;While I try as hard as possible to catch everything up front during the implementation
phase, things do slip through.  As of this Sunday morning, I have 4530 scenario tests
that are executed for each change.  Of those tests, 36 are skipped with 12 of those
skips being for placeholder implementations of extensions.  That leaves 24 scenario
tests for issues that slipped through the cracks. According to my math, which means
that over 99.4% of the scenario tests are passing.  Not a bad number, but I still
would like it to be better.&lt;/p&gt;
&lt;p&gt;And to be clear, that count of 4530 scenario tests are not just the test scenarios
provided by the &lt;a href="https://github.github.com/gfm/"&gt;Github Flavored Markdown&lt;/a&gt; specification,
but every scenario test I have been able to create.  That includes the 673 scenarios
presented in the GFM specification, but also stresses the complications that arise
from container elements.  If I had to guess, I would say that at least half of the
current scenario tests are tests specifically for the handling of container elements.&lt;/p&gt;
&lt;p&gt;But that percentage of passing tests is a deliberate focus of mine to “Shift Left”
on this and other projects.  While it can often lead me to be frustrated with a new
feature or change not working properly in all cases, I sincerely believe that this
is the right approach.  As I find a single issue at any point in the process, I
look and see if it is an isolated issue or part of a bigger issue.  If it is part
of a bigger issue, I try and identify related scenarios in the “area” of that issue
and add more scenario tests.&lt;/p&gt;
&lt;p&gt;If possible, I do this when I am adding something new, but I am not always
that lucky.  But from where I sit, I am still trying to push it to the left.  I am
not waiting around for a user to complain that it is not working properly, I am
actively investing my time to prove to myself that the project is working properly.
Sure, some of the scenario tests are probably never going to get hit by users,
but those tests are still important. Each one of those tests is a path that may
not have been covered before.&lt;/p&gt;
&lt;p&gt;What it comes down to me is the answer to a simple question: What amount of confidence
do I have that the project is working properly?  My simple answer is: yes! I have
thrown everything I can think of against it and can prove that.  And if I miss
something, I am graceful in that I know I cannot think of everything and use that
new information to build better tests.&lt;/p&gt;
&lt;p&gt;For me, shifting left just helps me get that confidence as efficiently as possible.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having recently been able to squash an issue that impacted three scenario tests,
I compiled a brief list of other tests to revisit.  I am not sure if I will be able
to find their solutions, but at least I feel momentum in that direction.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Autism And Imposter's Syndrome</title><link href="https://jackdewinter.github.io/2022/05/10/autism-and-imposters-syndrome/" rel="alternate"></link><published>2022-05-10T00:00:00-07:00</published><updated>2022-05-10T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-05-10:/2022/05/10/autism-and-imposters-syndrome/</id><summary type="html">&lt;p&gt;As I mentioned a couple of weeks ago in the &lt;a href="https://jackdewinter.github.io/2022/04/04/markdown-linter-back-to-project-summarizer-the-long-way/"&gt;software part&lt;/a&gt;
of my blog, I have started a job with a new company.  With that came the necessary
interviews that were needed to get the job.  And in that endeavor, I was not shy
about talking about my professional …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I mentioned a couple of weeks ago in the &lt;a href="https://jackdewinter.github.io/2022/04/04/markdown-linter-back-to-project-summarizer-the-long-way/"&gt;software part&lt;/a&gt;
of my blog, I have started a job with a new company.  With that came the necessary
interviews that were needed to get the job.  And in that endeavor, I was not shy
about talking about my professional competencies with confidence. In addition,
I told each set of interviewers that I have Autism, and that I am open, honest,
and straightforward.  After all, I felt that if I could not be myself with prospective
employers, what was the use?&lt;/p&gt;
&lt;p&gt;Why? Roughly, most people spend one third of their life asleep, one third of their life
at work, and one third of their life doing their own thing.  Since we are not doing
anything active during the sleep third of that equation, I believe that a clearer
picture is best obtained by taking that third out of the equation.  With sleep removed,
people spend one half of their waking moments at work and one half of their waking
moments doing non-work-related activities.  Those numbers may change, but I believe
that they are a good baseline.&lt;/p&gt;
&lt;p&gt;Given that baseline, when interviewing, you need to decide if you want to be honest
or dishonest with the people that you spend half your life with.  Personally, I would
rather put all relevant information
on the table, both about my professional competencies and who I am, and let things
fall where they may.  I would rather go to work each day being able to focus on
what I am supposed to focus on, and not trying to remember what kind of mask I
need to wear for which people.  I would rather just be my genuine self, all the time.&lt;/p&gt;
&lt;p&gt;But that decision, living the core values that I genuinely believe in, also has consequences.
For me, I feel that one of the major consequences that derives from that decision
is my belief that I have Imposter Syndrome.  According
to &lt;a href="https://www.psychologytoday.com/us/basics/imposter-syndrome"&gt;Psychology Today&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;People who struggle with imposter syndrome believe that they are undeserving of
their achievements and the high esteem in which they are, in fact, generally held.
They feel that they aren’t as competent or intelligent as others might think—and
that soon enough, people will discover the truth about them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As soon as I read that definition to myself, right on cue, I instantly found myself
agreeing with both sentences.  Even though I have worked professionally for thirty
years and continued to hone my craft in each of those years, I often do not
believe that I am anything special.
Along with that belief is a recurring feeling that I will let down people that I
work with because I feel there is a disconnect between what they see and what I
really am.&lt;/p&gt;
&lt;p&gt;The interesting part of those feelings is that to get my new job, I went through
a round of interviews in which I had to explain myself and why I thought I was a
great fit for the job.  And for any of those interviewers who may be reading my
blog, I did not lie in the least.  Imposter Syndrome for me is something that I
fight against on an almost daily basis.  As such, some days are better than others.
But regardless of how I felt on any given day during the interview cycles, I needed
to push those feelings out of the way to promote myself in a truthful and confident
manner.&lt;/p&gt;
&lt;p&gt;Therefore, interviewing was exhausting.  I finished each interview and wondered
how it went almost at once.  Then my Autism kicked in, and I would start to
analyze the interview
and how I thought it went.  Was the interviewer engaged with me?  Was I engaged
with them?  When I said, &amp;ldquo;I have Autism&amp;rdquo;, did they flinch?  And if so, how much?
What was their reaction to me starting that I am &amp;ldquo;open, honest, and straightforward&amp;rdquo;?
Did I answer enough of the technical question?  Did I explain my thinking as I
was working through the question?  And do not get me started on the soft-skill questions.
There are so many ways to answer those questions that the analysis patterns are
more in-depth and complicated.&lt;/p&gt;
&lt;p&gt;For me, it was during the late stages of that analysis phase when my Imposter
Syndrome kicked into high gear.  I went from being confident during the interview
to questioning every word that came out of my mouth.  It was not fun. I
went from confident, to questioning, to doubt.  Since I have battled this
daemon for many years, I was able to expect that this pattern would happen.
But even then, it still took most of my will to fight back against it.&lt;/p&gt;
&lt;p&gt;The good news is that I have taken time to try and push through the various aspects
of these feelings of negativity to lessen their hold on me. In
fact, writing this blog was one of those things that I tried. Looking back at the
almost weekly entries that I created, I can see a progression in myself and how
my writing style has developed.  In the beginning, I was just struggling to find
something to say, and I was petrified of saying anything.  After all, who wants
to hear the prattling of a fifty-something developer guy?  I kept on thinking
&amp;ldquo;What makes me different enough to be interesting?&amp;rdquo; and coming up with empty
responses.&lt;/p&gt;
&lt;p&gt;It was only after about a year of writing that I made a transition from writing
for people to read my articles to writing for my own sake.  I found a voice in
writing about the personal projects I was working on and about the challenges
I face in my life.  It was then that I found at least part of my answer. I
am different enough because I am truthful to myself and not afraid to share
that truth
with others.  Even two years ago, I do not think that I had the guts
or the trust in myself to author this article.  Because of well-placed
feedback honestly given by people I care about; I have faith I can do this
article justice.  But even then, the ugly head of doubt shows up in my mind
as I am writing articles.  I am just more experienced at pushing it away.&lt;/p&gt;
&lt;p&gt;The majority of the negativity associated my Imposter Syndrome is in battling
what I call &amp;ldquo;echoes&amp;rdquo;.
As my Autism was not diagnosed until later in life, I went for a long time not
knowing why I was the way I was.  Frankly, I was almost always the person that did not
quite fit in.  If I was with the right group of people, I was just someone who
was a little bit different, but acceptably so.  However, most of the time I was
with people that were not afraid to call me things like weird and kooky.  And
that was when they were being nice.  When they were not being nice, they said
things that were probably correct, but only from a very fearful and very unforgiving
point of view.&lt;/p&gt;
&lt;p&gt;After years of trying to work though those echoes, I do not blame those people
as much as I used to.  Life is hard.  I looked up various statistics and talked
with people about how various things affected their lives.  Just from my college
years alone, I suspect that at least five to ten percent of the people that I hung
around with had abuse in their lives.  And that is just one of the many
statistics that I looked up. For most of those people, I suspect that they
were fearful of anything that they could not understand. Enter one freaky looking
guy who does not seem to understand social situations
&amp;ldquo;like he should&amp;rdquo;, and their fear quotient increases.&lt;/p&gt;
&lt;p&gt;But whether they had a good reason for saying what they did or acting the
way that they did, things were said and done.  Things that might have seemed small
to them, formed emotional craters in my life.  I am not saying that to create sympathy
or to attach blame, just to convey the impact.  At the time, I did not know why I
was different, just that I was different.  And without thinking about it, I suppressed
most of those comments and placed them in my head in little boxes to deal with later.&lt;/p&gt;
&lt;p&gt;Well, later was not when I had planned for them to be brought of their boxes. They
just came out on their own at moments of stress. If I was lucky, then they came
out one at a time.  The various situations triggered related echoes.  My lack of
understanding social cues due to my Autism made many situations worse.&lt;/p&gt;
&lt;p&gt;On top of that, there were the earlier parts of my career where my Autism caused
former companies to see me as being less than human.  While there were some solid
companies in there, more than half of them were upset with me for not &amp;ldquo;getting
with the program&amp;rdquo;.  In fact, one company offered my counselling to help, and
expected everything to be all taken care of in six months.  When they were not,
I was politely asked to quietly leave within the next year.  According to them,
professionally my skills were fine, but personally I was not enough.&lt;/p&gt;
&lt;p&gt;Still, I am not one to give up, so I just continued to work on myself and kept
on improving myself.  It was not always easy, but it was always worth it. It
just meant opening myself up to continuous learning and being honest with myself.&lt;/p&gt;
&lt;p&gt;At this point in my life, it has been twelve years since I met my current wife,
I have made more progress
on getting those &amp;ldquo;imposter&amp;rdquo; voices to quiet down.  While I still believe she is
biased when she says I am awesome, the rapport we have helps me to work through
stuff.  It probably helps that we are both introverts, but the most important thing
is that I trust in her ability to see through my bullshit and ask me the questions
that matter to get me thinking.  I have faith that those questions are never asked
from a hurtful position, which helps them get through the echoes.  As partners,
one thing we focus on is helping each other become better versions of ourselves
with honest candor.  That has tended to cut through a lot on its own, and I am
grateful for that.&lt;/p&gt;
&lt;p&gt;The continuous learning habit that I picked up helped as well.  Instead of making
little applications that I was afraid to share with everyone, I decided that I
wanted to build what would become my &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown project&lt;/a&gt;.
I challenged myself to learn more Python, and to take the time to do things in a
way that I would be proud of them.  It was a concrete project that others can
see that forced me to admit I can do things like that.  I mean, I cannot really
hide something once people are starting to use it, can I?  And since I was
learning new things, it was harder for me to say that I cannot do things, since
I was aware that I was capable of learning what I needed to for that project.
Basically, part of the benefit was the project itself, and part of the benefit
was the journey to build the project.&lt;/p&gt;
&lt;p&gt;And with each little thing that I learned; I believe that small pieces of my
feelings of being an imposter started to fade.  It is still around, and I do
feel it more when I am really stressed, but I believe it is at a more manageable
level than it was twelve years ago.  But I feel that my real learning came from
starting to talk about Imposter Syndrome and how I battle it in the latest round
of interviews.  Perhaps it was my openness that triggered their discussions, but
I clearly remember a handful of great discussions with my interviewers and I
talking openly about how we battle Imposter Syndrome.  It was refreshing.&lt;/p&gt;
&lt;p&gt;If you have read this article down to this point, I think it is fair to say that
either you feel that you have Imposter Syndrome or know somebody that believes that
they do.  My various pieces of advice are all simple.  Honesty with oneself is
important.  That can only be done with a lot of hard work.  That work will
be easier if you have someone in your corner that you trust, but you really need
to trust them and engage with them.&lt;/p&gt;
&lt;p&gt;And my best advice: you are not alone.  If nothing else, you know one other
person that has Imposter Syndrome.  Me.&lt;/p&gt;</content><category term="Autism"></category><category term="Autism"></category></entry><entry><title>PyLint Utilities - Reaching For High Code Coverage</title><link href="https://jackdewinter.github.io/2022/05/02/pylint-utilities-reaching-for-high-code-coverage/" rel="alternate"></link><published>2022-05-02T00:00:00-07:00</published><updated>2022-05-02T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-05-02:/2022/05/02/pylint-utilities-reaching-for-high-code-coverage/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/"&gt;last article&lt;/a&gt;, I
talked about the first
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; plugin that I created
as part of my
&lt;a href="https://github.com/jackdewinter/pylint_utils"&gt;PyLint Utilities&lt;/a&gt; project.
In this article, I talk about the changes that I incorporated into both projects
to get their code coverage percentages up to 100%.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From past articles …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/"&gt;last article&lt;/a&gt;, I
talked about the first
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; plugin that I created
as part of my
&lt;a href="https://github.com/jackdewinter/pylint_utils"&gt;PyLint Utilities&lt;/a&gt; project.
In this article, I talk about the changes that I incorporated into both projects
to get their code coverage percentages up to 100%.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From past articles, longtime readers will understand that I view quality and
the metrics that help me understand that quality on a sliding scale.  One of the most
basic and useful metrics that use is tracking the code coverage of tests that are in place
for the components being tested.  To be clear, I agree with  people that argue that
code coverage is not the be all and end all of quality.  But I also argue
very confidently that it is not a metric to be easily dismissed.&lt;/p&gt;
&lt;p&gt;Code coverage does not measure if a project is working properly. It
measures whether each line of code has been executed at least once.  A project can
have 100% code coverage and still fail to meet its criteria for a project that
meets its intended goal.
From my point of view, which is where scenario tests come in.  And whether those
tests are a complete picture of how the team envisions the project being used is
a trickier thing to measure.  That is why many teams, for each piece of work,
construct individual
&lt;a href="https://www.leadingagile.com/2014/09/acceptance-criteria/"&gt;acceptance criteria&lt;/a&gt;
or maintain collections of rules called
&lt;a href="https://www.leadingagile.com/2017/02/definition-of-done/"&gt;Definition of Done&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To be honest, I have not seen any automated way to review either of these.  As a
professional, I can create scenario tests that exercise these two concepts with
respect to what I am testing.  But those scenario tests need human review
to determine if they are doing what they are supposed to.  But by combining the
exactness of code coverage with the observable scenario tests, I believe it is
possible to get a product that is well-tested and that does what it is supposed
to do.&lt;/p&gt;
&lt;p&gt;And most of the time, getting there is half the fun.&lt;/p&gt;
&lt;h2 id="slight-adjustments-to-project-summarizer"&gt;Slight Adjustments to Project Summarizer&lt;a class="headerlink" href="#slight-adjustments-to-project-summarizer" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To start off, before I made these adjustments to deal with this new plugin, I had
confidence that the scenario tests were testing the right things and I knew that
the code coverage was at one hundred percent.  From my viewpoint, it was a well tested
project that was doing what I needed it to do.  And it meant that I wanted to
keep those confidence levels where they were going forward.&lt;/p&gt;
&lt;p&gt;Cue the hard work!&lt;/p&gt;
&lt;h3 id="nice-side-effect-finding-a-setup-issue"&gt;Nice Side Effect - Finding A Setup Issue&lt;a class="headerlink" href="#nice-side-effect-finding-a-setup-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the start of testing the new plugin, I ran into an issue right away: I
could not execute the Project Summarizer from its package.  I tried executing it
locally, and there were no problems, but when I looked in the local package that
I was using, some of the files were missing.&lt;/p&gt;
&lt;p&gt;After a bit of work, I found myself looking at these lines in the &lt;code&gt;setup.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PACKAGE_MODULES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"project_summarizer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the uploaded package, everything was fine.  I knew something changed.
Examining the contents of the new package more closely, I noticed that only the
files that I refactored into their own directories were missing.  Given that observation,
I tried this change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PACKAGE_MODULES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"project_summarizer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"project_summarizer.plugin_manager"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"project_summarizer.plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And was greeted with success!  I was able to execute the Project Summarizer project
without any issues.  Talk about a bit of a testing hole that I need to address in
the future!&lt;/p&gt;
&lt;h3 id="debugging-the-dictionary-issue"&gt;Debugging The Dictionary Issue&lt;a class="headerlink" href="#debugging-the-dictionary-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One command line argument that I have in other projects that I had not added to this
project was the &lt;code&gt;--stack-trace&lt;/code&gt; argument.  It is a simple argument that instructs
the error handling to also print out a stack trace.  It is not useful in everyday
use, but when I need a stack trace of a failure, it is invaluable.&lt;/p&gt;
&lt;p&gt;And this was the case with the new plugin and the &lt;code&gt;save_summary_file&lt;/code&gt; function.
When the exception occurred, it was reporting that it was having issues dealing
with generating a report, but nothing more specific.  That was by intentional and by design.
When things fail, I do not want any users getting cryptic error
messages that confuse them.  As such, I keep the error messages as generic and
easy to read as possible.&lt;/p&gt;
&lt;p&gt;But in this case, I needed to debug the issue and I just wanted something simple.
Remembering that I have the &lt;code&gt;--stack-trace&lt;/code&gt; argument in other projects, I quickly
added it to the Project Summarizer project, where it immediately pointed out that
the issue was with the &lt;code&gt;save_summary_file&lt;/code&gt; and that it was passed a dictionary
object to save.  As the object to save was already a dictionary, calling &lt;code&gt;to_dict&lt;/code&gt;
on it was causing the error.  A quick fix and some added tests, and that issue was
cleared up.&lt;/p&gt;
&lt;p&gt;While I hope to not need that argument again, I now know it is there in case
I need it for future debugging sessions.&lt;/p&gt;
&lt;h3 id="easy-is-not-always-easy"&gt;Easy Is Not Always Easy&lt;a class="headerlink" href="#easy-is-not-always-easy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I designed the plugin architecture, I wanted something that was simple and
easy to use.  I did not anticipate any large manipulation of
data within the plugins: they were supposed to summarize data that was already
present.&lt;/p&gt;
&lt;p&gt;But then when I started testing the PyLint_Utils plugin, I
hit a snag.  The current design allowed each plugin to format the data
and print it out in its own format.  Since I want to keep things simple, I coded
all three implemented plugins to use the &lt;code&gt;columnar&lt;/code&gt; package to format the data.
I did not have any issues with this approach for the first two plugins, so I
did not anticipate any issues using it again for the PyLint_Utils plugin. Until it
failed.  It was able to load
the plugin module but failed to load the &lt;code&gt;columnar&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;I researched this for two nights before determining that it was likely
not possible to do.  What I mean by that is that it may be possible, but after two
nights and five hours of research and experimentation, I was not able to find it.
I needed a Plan B.  Seeing as I figured out that every plugin was going to be
using some manner of package for outputting the summary… I cheated.  While
there are other columnizers out there, I already have &lt;code&gt;columnar&lt;/code&gt; installed for
the base package.  As such, I just changed the interface to the &lt;code&gt;generate_report&lt;/code&gt;
function.  If a tuple is returned, it is used as the three primary parameters
for &lt;code&gt;columnar&lt;/code&gt;: justification, title, and rows.  Problem solved.  Not pretty,
but problem solved.&lt;/p&gt;
&lt;h2 id="switching-to-pylint_utilities"&gt;Switching To PyLint_Utilities&lt;a class="headerlink" href="#switching-to-pylint_utilities" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With those issues dealt with, the Project Summarizer project was back at
100% code coverage and all relevant scenario tests were in place.  So, it was time to
get back to the thing that initiated those changed, the PyLint_Utils project.
It turns out that more then half of the changes I needed to execute the PyLint_Utils
project were in the Project Summarizer, so I thought I was home free.&lt;/p&gt;
&lt;p&gt;And then I got down to improving the code coverage.&lt;/p&gt;
&lt;h3 id="there-is-only-so-much-you-can-cover-normally"&gt;There Is Only So Much You Can Cover Normally&lt;a class="headerlink" href="#there-is-only-so-much-you-can-cover-normally" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First off, I want to stress that I am a bit of a fanatic about scenario test coverage
and code coverage.  If it is a normal application, I have a general rule that it
should have at least 75% code coverage, scenario tests for all “good” paths, and
scenario tests for any “bad” paths that a team feels will be hit a fair amount.
And yes, “a fair amount” is a judgement call.&lt;/p&gt;
&lt;p&gt;The good paths are an easy goal for me to
justify. If everything goes properly, you know that users will hit those paths.  The bad
paths are a bit more nuanced.  From my viewpoint, I start with this question: what
are the things that I would mess up or have messed up when using the application?
Things like missing parameters and bad or wrong file names are easy targets.  I mess
those up all the time.  That is usually a good starting point for error-related or
“bad” pieces of the project to include.&lt;/p&gt;
&lt;p&gt;From there, the cost of covering the paths start going uphill very quickly. And for
each path, it comes down to the question of whether the cost of covering that “bad”
path is enough of a benefit to warrant the cost involved.  And the cost can be
varied.&lt;/p&gt;
&lt;h3 id="hiding-things-in-plain-sight"&gt;Hiding Things In Plain Sight&lt;a class="headerlink" href="#hiding-things-in-plain-sight" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing that I do to determine cost is to try and see if I can do something
simple to write
a new scenario test without too many changes.  Can I change the file from a JSON file to a
non-JSON file or a directory to set off error handling?  Can I use two parameters
together and make sure they do not conflict?  Is there an existing path that I
can leverage?&lt;/p&gt;
&lt;p&gt;But sometimes, I must be sneaky.  Take this “hidden” parameter that I
have in the PyLint_Utils project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"--x-display"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"x_test_display"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUPPRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That parameter is not visible using &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt;, but if you use it in a normal
command line, the application will not complain.  How is that? The &lt;code&gt;argparse.SUPPRESS&lt;/code&gt;
suppresses that argument from being shown.&lt;/p&gt;
&lt;p&gt;So why take this approach?  In this case, that flag sets off this logic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__display_progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isatty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x_test_display&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__verbose_mode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have no control over what &lt;code&gt;sys.stdout.isatty()&lt;/code&gt; returns, at least not yet.  As
such, this is a simple and easy to read way to alter the results of that function.&lt;/p&gt;
&lt;h3 id="what-about-mocks"&gt;What About Mocks?&lt;a class="headerlink" href="#what-about-mocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is where the &lt;code&gt;not yet&lt;/code&gt; from the previous paragraph kick in.&lt;/p&gt;
&lt;p&gt;From my experience, mocks are most useful when you want to test something that has
many moving pieces to it.  To use the equation, I postulated a couple of sections
ago, is the cost of making the change worth the benefit of that change?&lt;/p&gt;
&lt;p&gt;For me, the answer to that question is heavily based on experience.  The benefit
of that equation is the easy part to define.  Either using some other method or
completing the block will properly test part of the code.  The cost is much
more difficult to define.&lt;/p&gt;
&lt;p&gt;A good example of this difficulty is the &lt;code&gt;PatchBuiltinOpen&lt;/code&gt; class that I use for mocking file
open calls, located &lt;a href="https://github.com/jackdewinter/pyscan/blob/master/test/patch_builtin_open.py"&gt;here&lt;/a&gt;.
I have used this for testing various smaller Python projects for almost as long as I have
been working in Python, and I find this object really good at getting into tight
places for code coverage.  This mock class patches the built-in &lt;code&gt;open&lt;/code&gt; call for
files and provides the &lt;code&gt;register_text_content&lt;/code&gt; function and the &lt;code&gt;register_exception&lt;/code&gt;
function to control what gets controlled.  If the filename passed to those functions
matches the argument for the &lt;code&gt;open&lt;/code&gt; function, one of those two behaviors is returned.
If not, the mock object needs to carefully un-patch itself, call the original function,
and then patch itself again.&lt;/p&gt;
&lt;p&gt;Even without looking at the source code for the &lt;code&gt;PatchBuiltinOpen&lt;/code&gt; class, it is obvious
that the function has a significant amount of code to accomplish those tasks.  Why?
Because it takes a sizeable number of sentences to describe what it does.  And then
there is the invocation of this behavior.  To mock an &lt;code&gt;open&lt;/code&gt; function call that is
buried within the code called from the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;execute_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;supplied_arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this is the code required:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pbo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PatchBuiltinOpen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pbo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;test_file_to_scan_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"wt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception_message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock_exception_message&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pbo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;execute_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;supplied_arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pbo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not simple.  This is a sledgehammer.  Granted, a nice sledgehammer that
has been well used, well-polished, and carefully taken care of, but it is a
sledgehammer.  And in my experience, code sledgehammers increase cost.&lt;/p&gt;
&lt;h3 id="but-sometimes-there-are-no-other-options"&gt;But Sometimes There Are No Other Options&lt;a class="headerlink" href="#but-sometimes-there-are-no-other-options" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having taken care of the majority of the code coverage for the project, I was left with
a small amount of code to cover.  This code was code that was enacted after the
&lt;code&gt;subprocess.Popen&lt;/code&gt; function is called when PyLint_Utils calls PyLint itself.
In terms of benefit, it was the only handful of lines that were not covered.
In terms of cost, the only option was to mock out the function call.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;PatchSubprocessPopen&lt;/code&gt; was the result.  Copying the bulk of the functionality
from the &lt;code&gt;PatchBuiltinOpen&lt;/code&gt; class, I was able to save a lot of time.  Another
thing that kept the cost down was that as of right now, I only needed the mock
object to be specifically for this one scenario test.  As such, I was able to
tailor it very specifically for the tests in which it was used.&lt;/p&gt;
&lt;p&gt;But even then, it was a headache to get right.  I had to make sure I read each
variable from the &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt; parameters properly, translating them
into values I could use.  As &lt;code&gt;POpen&lt;/code&gt; can be called multiple times, I had to
make sure I had a passthrough in there.  And debugging it was not the best
experience I had.&lt;/p&gt;
&lt;p&gt;But in the end, to get from over 99.5% to 100% was worth it to me.  I was
able to get more experience with mock objects in Python, and I was able to
close the gap in code coverage.&lt;/p&gt;
&lt;p&gt;For me, it was worth it.  But it was costly.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What Is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that bulk of work wrapped up, I am hoping to get some time back on
the PyMarkdown project in the next week.  Here is hoping for that!
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="pylint_utils"></category></entry><entry><title>PyLint Utilities - A Long Time Coming</title><link href="https://jackdewinter.github.io/2022/04/25/pylint-utilities-a-long-time-coming/" rel="alternate"></link><published>2022-04-25T00:00:00-07:00</published><updated>2022-04-25T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-04-25:/2022/04/25/pylint-utilities-a-long-time-coming/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/18/project-summarizer-filling-out-plugin-support/"&gt;last article&lt;/a&gt;, I
talked about taking my plugin work on the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
project to its logical conclusion by adding proper plugin support to the project.
In this article, I talk about the first external plugin: PyLint Utilities.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe that most software development professionals have …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/18/project-summarizer-filling-out-plugin-support/"&gt;last article&lt;/a&gt;, I
talked about taking my plugin work on the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
project to its logical conclusion by adding proper plugin support to the project.
In this article, I talk about the first external plugin: PyLint Utilities.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe that most software development professionals have little packages of
utilities that they use personally.  Be it something simple to set up their
environment consistently or a more complex utility to handle something that
is either bothersome or error prone.  We have all got fed up with having to do
repeat something repeatedly.  And once it hits a certain threshold in
our brain, we decide to write something to deal with it.&lt;/p&gt;
&lt;p&gt;Most of the time, those utilities never seen public consumption.  I mean, they
are OUR utilities.  But sometimes, as with my
&lt;a href="https://github.com/jackdewinter/pylint_utils"&gt;PyLint Utilities&lt;/a&gt;
project, they get to a point where we want to clean them up and share them.
This is one of the utilities that I want to share.&lt;/p&gt;
&lt;h2 id="why-a-long-time-coming"&gt;Why A Long Time Coming?&lt;a class="headerlink" href="#why-a-long-time-coming" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, the easy answer to that question is that I have been working on the
&lt;a href="https://github.com/jackdewinter/pylint_utils"&gt;PyLint Utilities&lt;/a&gt;
project for at least the last four months.  According to the commit logs
for the project, it was 2021 Nov 26 when I added the first commit to the project.
Following that, I did work over the Christmas holidays to start padding it
out.  But I have been using it in various forms during that time to help guide
me on how things are going with my projects, especially on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;Between the start of the year and April, I made small modifications to the
various utilities, tuning them and making them work better.  Nothing significant,
just minor changes to make them work better under various conditions.  It was
when I sat back and looked at the collection of utilities as a whole did I realize
that I had an application which had utilities that might be useful to others.  It was
only then that added the necessary project files and scenario tests to bring the
project up to a releasable level.&lt;/p&gt;
&lt;p&gt;Up to that point, it essentially was just a place for me to “doodle with code”
to try and address some issues that I was trying to solve.  It meant a bit of
a mindset change on how I looked at the project, but after a couple of weeks,
I was okay with it.  It just felt weird taking a proof-of-concept (what I
would refer to as a “code doodle”) and releasing it as a project.  I am getting
used to it though.&lt;/p&gt;
&lt;h2 id="so-what-are-those-utilities"&gt;So What Are Those Utilities?&lt;a class="headerlink" href="#so-what-are-those-utilities" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be honest, this project started out as a bit of a toy application that helped me with
my PyLint suppressions.  Each one of the concerns that I had was addressed with
one of the utilities that I added.  I did not consider any of the utilities
noteworthy on their own, but they were still useful to me.&lt;/p&gt;
&lt;h3 id="balanced-suppressions"&gt;Balanced Suppressions&lt;a class="headerlink" href="#balanced-suppressions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I measure quality in a project on a sliding scale.  I have no problem with warnings
of any quality analysis being suppressed if there is some accounting for
those suppressions within a project.  I am not talking about the rare 2-4
suppressions that I typically do in a project where the code coverage mechanism
does not cover something that I know is covered.  Those are what I would consider to
be a “cost of doing business”.  These are unique to the project warnings that are
actual warning signals, not warning noise.&lt;/p&gt;
&lt;p&gt;To that extent, I believe that each suppression should be added to the code with
the smallest scope possible.  If I am not excluding that suppression throughout
the entire project in configuration files, that I feel that I should be expected
to present a focused suppression around where that warning occurs.  Otherwise,
I feel that I am doing myself and the project a disservice.&lt;/p&gt;
&lt;p&gt;And I am particularly good with following that policy around 95% of the time.  However,
I acknowledge that
I am not perfect.  There are times that I have disabled a warning on line 50 of
a 900+ line Python file, only to forget to enable it again on line 90 when the
function was finished.  There are times where I have copied and pasted an enable
suppression line to the start of a function, only to wonder why it is still showing
up when I run PyLint, because I am 100% positive that when I read &lt;code&gt;enabled&lt;/code&gt;, it
said &lt;code&gt;disabled&lt;/code&gt;. Yup… I hope I am not alone in making those mistakes.  As an old
college professor once reminded us “sometimes you cannot see the forest because you
are too busy looking at the trees.”&lt;/p&gt;
&lt;p&gt;To account for myself making those mistakes, the first utility that I added was for
balanced suppressions.
The rules are simple.  Except for &lt;code&gt;too-many-lines&lt;/code&gt;, any &lt;code&gt;disable&lt;/code&gt; must be followed
by an &lt;code&gt;enable&lt;/code&gt;.  Disabling something that is already disabled is not allowed, as
well as enabling something that is already enabled.  And yes, I have done each of
those before, at least five times each… this month.  The utility simple loads up
each Python file, parses for suppression lines, and looks for regions that do not
follow those rules.  If any mismatch is found, an error is reported.  Simple.&lt;/p&gt;
&lt;p&gt;Now, I do realize that this kind of utility might seem silly to other developers,
but for me it is about my confidence in my work.  After I run that utility, I am
confident that my suppressions are properly balanced.  No guesswork involved.
To me, that confidence is worth a bit of code and investment.&lt;/p&gt;
&lt;h3 id="generating-reports"&gt;Generating Reports&lt;a class="headerlink" href="#generating-reports" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With that utility completed, the next utility that I added was to report on the suppressions
that exist in the code.  As I measure quality on a sliding scale, it was important
for me to know where I stood with PyLint suppressions in my various projects.  To
be clear, I do not believe there is any concrete “thou must have” or “thou must not”
have rules in a code base.  My thoughts are that “should have” things increase the
quality and “should not have” things decrease the quality.  As such, keeping track
of the suppressions in the project helps me track where any suppression is on
that scale.&lt;/p&gt;
&lt;p&gt;This utility was simple to write, especially after my work in the previous
utility to make verify that each set of suppressions are balanced.  It ended up
being a few lines of code added to the tracking of each &lt;code&gt;disabled&lt;/code&gt; suppression
in the code, keeping a running total of how many times the utility encountered each
suppression and where that suppression was encountered.  After that, it was just
throwing the data into a JSON object and writing the file somewhere.&lt;/p&gt;
&lt;p&gt;An example of that report file for the &lt;code&gt;PyLint_Utils&lt;/code&gt; project itself is currently
as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"disables-by-file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/__init__.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/__main__.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/file_scanner.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/main.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"broad-except"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"too-many-arguments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"too-many-locals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/pylint_comment_scanner.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/simple_logging.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nt"&gt;"pylint_utils/version.py"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;"disables-by-name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"broad-except"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"too-many-arguments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"too-many-locals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use this report as more of a sanity check than a guide to refactoring.
The JSON object that I write includes a &lt;code&gt;disables-by-file&lt;/code&gt; section as well as
a &lt;code&gt;disables-by-name&lt;/code&gt; section.  If something looks weird in the &lt;code&gt;disables-by-name&lt;/code&gt;
section, I can quickly look to see where the modules that use that section
are and look at each one individually.  From there, it is a judgement call on
my part as to whether I should refactor.&lt;/p&gt;
&lt;p&gt;The benefit of this utility to me is in having that information presented to me
in a clear format that informs on my judgement calls. And removing some of the
guesswork from that judgement call is a win in my books.&lt;/p&gt;
&lt;h3 id="finding-unused-suppressions"&gt;Finding Unused Suppressions&lt;a class="headerlink" href="#finding-unused-suppressions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the interesting utility for me.  When I do decide to take those steps to
refactor a function, I want to have something simple to tell me if I have
mitigated the need for a suppression.  From experience, even if there is another
reason for the refactoring, it typically will include a desire to reduce some
manner of suppressions.  And while I can run PyLint again and not see the warning,
PyLint does not tell me if a suppression already in the code base is no longer
needed.&lt;/p&gt;
&lt;p&gt;Logically following that, I ended up writing something simple to rescan files with individual suppressions
disabled. It is a bit terse, but it works.  The utility simply takes that file,
rewrites it without a given pair of suppression statements, and verifies that
the warning is still emitted.  If it is not emitted, then the suppression is no
longer needed.&lt;/p&gt;
&lt;p&gt;And for any readers of this blog, the benefit of that to me should be obvious.
I love keeping my code clean!&lt;/p&gt;
&lt;h2 id="why-talk-about-it-now"&gt;Why Talk About It Now?&lt;a class="headerlink" href="#why-talk-about-it-now" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given that information about the utilities I created, I noticed one thing about how
I was using those utilities: I was using them to track PyLint suppressions and
keep my usage of those suppression in check.
Specifically, it occurred to me that since I am tracking the number of tests and
code coverage for those tests, it just made sense to me to track the PyLint suppressions
in an equivalent manner.&lt;/p&gt;
&lt;p&gt;To roll things back a bit, let me start at the beginning.
Collecting information about the tests that were run and their execution states
was an easy decision for me.  By using the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project,
I can make sure to keep track of how many tests are in place and if any of them
are failing.  While I have always made sure all new tests and old tests were passing
before committing code, test-driven development allows for committing failing tests
that get enabled when they pass.  I just work in small increments and use &lt;code&gt;skip&lt;/code&gt;
statements to achieve the same effect without failing tests.  Just a small personal
change to test-driven development that gets the same results.&lt;/p&gt;
&lt;p&gt;Then there is the matter of collecting information about the code coverage metrics
for those tests.  Once again, the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project
allows me to track the coverage percentage on two distinct levels (lines and branches)
to ensure that the percentage is a healthy one for the project.  While my absolute
baseline percentage for a released project is 75%, I can drive that number up into
the high 90s without that much effort.  And as most of the projects that I work
on are lower-level projects, it makes sense to me to ensure that code coverage
percentages are more than 95%.  For me, if I will not accept a package into any
of my projects without decent testing or decent code coverage, I need to be showing
that same respect to users of my projects.&lt;/p&gt;
&lt;p&gt;And that brings me to the PyLint Utilities project.  Both the first and third purposes of
these utilities, ensuring balanced suppressions and finding unused suppressions,
are actions that are taken to improve the projects.  But generating reports, the
second purpose, is one that fits in very nicely like the two existing plugins for
the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project.&lt;/p&gt;
&lt;h3 id="tell-me-more"&gt;Tell Me More&lt;a class="headerlink" href="#tell-me-more" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Why is that?  I believe I have said before that it is more important to track
quality in a project than to get it to a “golden” state.  Noting that a project
only has a handful of tests is more important than immediately adding new tests.
The most obvious reason for that is that it is best to understand what needs to
be tested before adding those new tests.&lt;/p&gt;
&lt;p&gt;That is where noting the code coverage for a project comes into play.  I have joined
teams with no quality measurement in place.  The first thing I say to that team is
not “shame, no code coverage”, but “we need to know what we are dealing with in order
to move forward”.  Besides coming across as a jerk with the first suggestions,
it will [reduce their desire to] improve the code coverage.  In addition, there
is a chance that their code coverage is already decent for their project and the
stage it is at.  Only after doing a good analysis of the project can things move forward.&lt;/p&gt;
&lt;p&gt;Which brings me to PyLint suppressions.  As I have mentioned before, I use these
suppressions to effectively confirm that I have seen the warning and know about
it.  To me, that warning itself is not a big thing, but just a thing.  What concerns
me is a pattern of suppressing the warnings without trying to improve on the code
to make those warnings not needed.  This philosophy merges in very well with my
philosophy on code coverage.  It is my belief that my comments in the previous
paragraph about code coverage, knowing what we are dealing with, and moving
forward are as equally applicable to suppressions as to code coverage.&lt;/p&gt;
&lt;p&gt;From those similarities, it should be easy to see why I want to add a plugin
for the Project Summarizer project to report this.  I mean, if it is good enough
for code coverage, it should be good enough for suppressions.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What Is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that I have gone through the new utility project that I have just made
public, next week I am going to start providing plugin integration to the
Project Summarizer project.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="pylint_utils"></category></entry><entry><title>Project Summarizer - Filling Out Plugin Support</title><link href="https://jackdewinter.github.io/2022/04/18/project-summarizer-filling-out-plugin-support/" rel="alternate"></link><published>2022-04-18T00:00:00-07:00</published><updated>2022-04-18T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-04-18:/2022/04/18/project-summarizer-filling-out-plugin-support/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/11/project-summarizer-loading-plugins/"&gt;last article&lt;/a&gt;, I
talked about starting to add proper plugin support to
the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project.
In this article, I take that work to its logical conclusion by adding proper
plugin support to the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It took me a while to figure out the right way …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/11/project-summarizer-loading-plugins/"&gt;last article&lt;/a&gt;, I
talked about starting to add proper plugin support to
the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project.
In this article, I take that work to its logical conclusion by adding proper
plugin support to the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It took me a while to figure out the right way to add plugins for the Project
Summarizer project.  But when I did my research and worked through everything,
I ended up with a solid loading strategy that I knew worked.  What was left?
To implement the plugins properly, of course!&lt;/p&gt;
&lt;h2 id="implementing-the-plugins"&gt;Implementing The Plugins&lt;a class="headerlink" href="#implementing-the-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is a simple phrase: “to implement the plugins properly.”  But it was not
going to be easy.  I had experience implementing plugins, but I
was not sure how much of that experience would carry over.  I knew it was
going to be enough to implement the base part of the plugins, that much was
certain.  But since it is a completely different project, I was not sure if
I was going to meet something I hadn’t encountered before.&lt;/p&gt;
&lt;h3 id="refactoring-plugin-related-code"&gt;Refactoring Plugin Related Code&lt;a class="headerlink" href="#refactoring-plugin-related-code" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From experience with the PyMarkdown project, there were two things that I was
sure that I needed to do if I wanted to be successful with these refactorings:
move the plugins related code under a new &lt;code&gt;plugins&lt;/code&gt; directory and create a new
&lt;code&gt;plugin_manager&lt;/code&gt; directory to contain the management of those plugins. By taking
the step of creating these two directories, I knew that I was cleanly defining
the parts of the project that were related to plugins and to management of those
plugins.&lt;/p&gt;
&lt;p&gt;The easy part was moving the existing code for the Cobertura plugin and the
Junit plugin into those directories.  A couple of quick name changes here along with
moving their related measurement classes into the same directory, and those were
done.  The hard part was the management of those plugins.&lt;/p&gt;
&lt;p&gt;The first thing that I created was a new class &lt;code&gt;BadPluginError&lt;/code&gt;.  Copying heavily
from the PyMarkdown project, I knew that I needed to have a singular exception that
I could throw whenever something bad happened.  Instead of different exceptions
for different issues, I decided on keeping the “one exception to rule them all”
approach.  While I might experiment with subclasses of this exception in the future,
having all the exception handling in one exception makes it easy to deal with.
The only part of the exception that is difficult is the formatting of the message,
but with a bit of refactoring, it will not be too bad.&lt;/p&gt;
&lt;p&gt;I then created the new &lt;code&gt;PluginManager&lt;/code&gt; class and started moving code that was
plugin related in the &lt;code&gt;main.py&lt;/code&gt; module over to the new class.  It was a bit
scary at first, as I am not used to seeing VSCode present me with so many code
errors at one time.  But as I added the required import statements and moved
the functions over, those code errors slowly started disappearing.  I knew in my head that
those errors were only temporary, but it sure was a relief to see those errors
go away.&lt;/p&gt;
&lt;p&gt;But after everything was moved over, there still was cleanup to complete.
There were a couple of places where a &lt;code&gt;sys.exit(1)&lt;/code&gt; was used instead of throwing
the new &lt;code&gt;BadPluginError&lt;/code&gt; exception, so that needed to be addressed.  Along with
that, I added &lt;code&gt;try/except(BadPluginError)&lt;/code&gt; blocks around the sensitive code blocks,
to ensure that those thrown exceptions were properly handled.  To centralize that
in one location, I added a &lt;code&gt;__report_error&lt;/code&gt; function to the &lt;code&gt;main.py&lt;/code&gt; module
specifically to ensure that there was a single location for reporting errors.&lt;/p&gt;
&lt;p&gt;And that work continued for a bit longer.  To make sure that every call into a
plugin was properly protected, I added more &lt;code&gt;try/except&lt;/code&gt; blocks around each call
into a plugin.  While it is not always a good practice, I used an &lt;code&gt;except Exception&lt;/code&gt;
to capture any exception, creating a new &lt;code&gt;BadPluginError&lt;/code&gt; from that exception.&lt;/p&gt;
&lt;p&gt;After all that work was done, I knew that I could start breathing again.  The
hard part of the work was done.&lt;/p&gt;
&lt;h3 id="aside-on-general-exceptions-catching"&gt;Aside on General Exceptions Catching&lt;a class="headerlink" href="#aside-on-general-exceptions-catching" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Generally, the problem with catching a general &lt;code&gt;Exception&lt;/code&gt; is that an overly broad
caught exception can catch more serious issues than the desired exceptions.
If developers are not careful, serious exceptions like the &lt;code&gt;OutOfMemoryException&lt;/code&gt;
and the &lt;code&gt;DivideByZeroException&lt;/code&gt; can be caught and ignored when the proper action
should have been taken to deal with those types of serious issues more… well,
seriously.  And usually, I try and avoid catching those Exceptions.  It just
does not look right to me.&lt;/p&gt;
&lt;p&gt;But in this instance, there were two things working for me catching &lt;code&gt;Exception&lt;/code&gt;.
One instance in which I believe it is okay to catch general exceptions is with a large enough
change of responsibility within the code being executed.  Consider the following
code from the &lt;code&gt;add_command_line_arguments_for_plugins&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;plugin_argument_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;plugin_variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_plugin_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_command_line_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;BadPluginError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_plugin_instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;formatted_message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Bad Plugin Error calling add_command_line_arguments."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From a puritanical point of view, this is a terrible thing to do.  However, I believe
that from a realistic point of view, it is the correct thing to do.  When the
function &lt;code&gt;next_plugin_instance.add_command_line_arguments&lt;/code&gt; is executed, the
responsibility for the executing code changes from the Project Summarizer project
and its &lt;code&gt;PluginManager&lt;/code&gt; class to that of the plugin itself.  Bluntly said, there
is nothing that the Project Summarize project can do to prevent the plugin from
executing any code that it wants to.  It is the responsibility of the plugin to
adhere to any provided interface as closely as possible.  Even so, there is no uncomplicated
way to define which exceptions can be raised by the plugin, and therefore which
exceptions to protect against with an &lt;code&gt;except&lt;/code&gt; block.  Hence, &lt;code&gt;except Exception&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That brings me to the second thing work for me in this code: the handling of the
&lt;code&gt;BadPluginError&lt;/code&gt; itself.  I did a quick check through the code as I was drafting
this article, and I could not find a single instance where the raising of the
&lt;code&gt;BadPluginError&lt;/code&gt; was not handled by cleaning stopping the application as soon as
possible.  This means that every time that exception is raised, the application
ends.  With very few exceptions (no pun intended), when one of those serious
exceptions are raised, the best response is to terminate the application itself.
As the Project Summarizer takes those serious exceptions and wraps them in a &lt;code&gt;BadPluginError&lt;/code&gt;
to supply additional context before rethrowing the caught exception, I believe I have a good argument that
those exceptions are being handled in an appropriate manner.&lt;/p&gt;
&lt;h3 id="little-things"&gt;Little Things&lt;a class="headerlink" href="#little-things" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the challenging work of the refactoring done, I knew I needed to focus on the little things that
needed to be addressed.  Basically, dotting each i and crossing each t.&lt;/p&gt;
&lt;p&gt;The first of those things was to stop initializing the &lt;code&gt;self.__available_plugins&lt;/code&gt;
array with the two built-in summarizer plugins and load them dynamically with the
other plugins.  While it would have been fine to load them the other way, I just
felt it was more consistent to load them this way.  This meant that all plugins
were being loaded the same way, which just made sense.&lt;/p&gt;
&lt;p&gt;As I was looking through the code, I noticed that there were optimizations
that could be performed on the code.  In earlier iterations, I had files like
the &lt;code&gt;test_results_model.py&lt;/code&gt; file that contained the &lt;code&gt;TestTotals&lt;/code&gt; class and
the &lt;code&gt;TestMeasurement&lt;/code&gt; class.  Instead of artificially grouping them together,
I decided to split them up into their own files. It just made sense as they
were different concepts.  One bonus to that was that it made the typing of
those classes easier, as they were in separate files now.&lt;/p&gt;
&lt;p&gt;And then it hit me, I did not have details support.&lt;/p&gt;
&lt;h3 id="adding-details-support"&gt;Adding Details Support&lt;a class="headerlink" href="#adding-details-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One thing that I learned from the PyMarkdown project was that it was exceptionally useful
to have explicit command line arguments that would detail which plugins were present
and enabled.  While the plugins for the Project Summarizer project are more directly
visible on the command line, I thought about whether to include this kind of support
for a couple of days.  In the end, the cost is low and the benefit to the user is
decent enough, that the benefit outweighed the cost.&lt;/p&gt;
&lt;p&gt;With that decided on, I added a simplified version of the &lt;code&gt;PluginsDetail&lt;/code&gt; class
from the PyMarkdown project.  I was sure that I did not need to enable or disable
plugins at all.  The basis for that certainty was the command line interface.
If a user does not want to use a plugin, they can simply not use the command line
argument related to the plugin.  I might change my mind down the road, but that
was where I landed.&lt;/p&gt;
&lt;p&gt;I did feel that it is right to add support, but I am still figuring out what kind
of information would look right in the details.  As such, I started out with a
basic set of properties: &lt;code&gt;plugin_id&lt;/code&gt;, &lt;code&gt;plugin_name&lt;/code&gt;, &lt;code&gt;plugin_version&lt;/code&gt; and
&lt;code&gt;plugin_interface_version&lt;/code&gt;.  It was just simple information that I knew that I could easily expand
on later.  Given that, I made sure to include the &lt;code&gt;plugin_interface_version&lt;/code&gt; property and set it
to the new constant: &lt;code&gt;VERSION_BASIC&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="lots-of-testing"&gt;Lots Of Testing&lt;a class="headerlink" href="#lots-of-testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In case anyone thinks otherwise, this entire process followed good test-driven
development practices, with many tests added and performed.  There is an
incredibly small chance that I would write anything other than a Proof-Of-Concept
without solid tests in place first.  It just doesn’t feel right.&lt;/p&gt;
&lt;p&gt;And believe me, during the refactoring, that adherence to test-driven development
saved me a couple of times.  While I would like to think that I have vast amounts of energy
all the time, I am human.  As such, there were days where I was more tired than
others and tended to make more small mistakes.  Mistakes that were caught by the
decent set of tests that I have covering the project.&lt;/p&gt;
&lt;p&gt;And to be clear to any readers, even on good days I make mistakes.  My family and
I call it “fat-finger syndrome” and I suffer from it continuously.  When I am
authoring articles like this one, I most often think as I type, and those two actions
are coordinated with each other.  But when I am writing code, I tend to have
those two actions get out-of-sync with each other… with alarming frequency.
But because I know I do this and have a solid process backing me up, I do not worry
about it as much these days because I have confidence in the process.&lt;/p&gt;
&lt;h2 id="updating-badges"&gt;Updating Badges&lt;a class="headerlink" href="#updating-badges" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After I did chores around the house and outside in our yard, I found myself
having some extra time before writing I started my writing on Sunday afternoon.
As such, I wanted to have a decent sized task that I could conduct, but not
so big as that it would take over my Sunday evening writing.
Going to a couple of my projects, one thing that I noticed is that I was still
not happy with how the badges look.  I had a good amount of time to use, and I
figured that was a task that was just around the correct size.&lt;/p&gt;
&lt;p&gt;Badges are simple.  Multiple sites on the internet provide images that can be used
on web pages to denote various things.  Most badges that I use are either
static, based off the GitHub project, or based of the package information at
&lt;a href="pypi.org"&gt;PyPi.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you look at the &lt;a href="https://github.com/jackdewinter/pyscan/blob/master/README.md"&gt;README.md file&lt;/a&gt;
for the Project Summarizer project, you will see pictures that look like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jackdewinter/pyscan"&gt;&lt;img alt="GitHub top language" src="https://img.shields.io/github/languages/top/jackdewinter/pyscan"/&gt;&lt;/a&gt;
&lt;img alt="platforms" src="https://img.shields.io/badge/platform-windows%20%7C%20macos%20%7C%20linux-lightgrey"/&gt;
&lt;a href="https://pypi.org/project/project_summarizer"&gt;&lt;img alt="Python Versions" src="https://img.shields.io/pypi/pyversions/project_summarizer.svg"/&gt;&lt;/a&gt;
&lt;a href="https://pypi.org/project/project_summarizer"&gt;&lt;img alt="Version" src="https://img.shields.io/pypi/v/project_summarizer.svg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jackdewinter/pyscan/actions/workflows/main.yml"&gt;&lt;img alt="GitHub Workflow Status (event)" src="https://img.shields.io/github/workflow/status/jackdewinter/pyscan/Main"/&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/jackdewinter/pyscan"&gt;&lt;img alt="codecov" src="https://codecov.io/gh/jackdewinter/pymarkdown/branch/main/graph/badge.svg?token=PD5TKS8NQQ"/&gt;&lt;/a&gt;
&lt;img alt="GitHub Pipenv locked dependency version (branch)" src="https://img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pyscan/black/master"/&gt;
&lt;img alt="GitHub Pipenv locked dependency version (branch)" src="https://img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pyscan/flake8/master"/&gt;
&lt;img alt="GitHub Pipenv locked dependency version (branch)" src="https://img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pyscan/pylint/master"/&gt;
&lt;a href="https://sourcery.ai"&gt;&lt;img alt="Sourcery" src="https://img.shields.io/badge/Sourcery-enabled-brightgreen"/&gt;&lt;/a&gt;
&lt;a href="https://github.com/jackdewinter/pyscan/stargazers"&gt;&lt;img alt="Stars" src="https://img.shields.io/github/stars/jackdewinter/pyscan.svg"/&gt;&lt;/a&gt;
&lt;a href="https://pypistats.org/packages/project_summarizer"&gt;&lt;img alt="Downloads" src="https://img.shields.io/pypi/dm/project_summarizer.svg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jackdewinter/pyscan/issues"&gt;&lt;img alt="Issues" src="https://img.shields.io/github/issues/jackdewinter/pyscan.svg"/&gt;&lt;/a&gt;
&lt;a href="https://github.com/jackdewinter/pyscan/blob/main/LICENSE.txt"&gt;&lt;img alt="License" src="https://img.shields.io/github/license/jackdewinter/pyscan.svg"/&gt;&lt;/a&gt;
&lt;a href="https://github.com/jackdewinter/pyscan/graphs/contributors"&gt;&lt;img alt="Contributors" src="https://img.shields.io/github/contributors/jackdewinter/pyscan.svg"/&gt;&lt;/a&gt;
&lt;a href="https://github.com/jackdewinter/pyscan/network/members"&gt;&lt;img alt="Forks" src="https://img.shields.io/github/forks/jackdewinter/pyscan.svg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.linkedin.com/in/jackdewinter/"&gt;&lt;img alt="LinkedIn" src="https://img.shields.io/badge/-LinkedIn-black.svg?logo=linkedin&amp;amp;colorB=555"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those images are generated by the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitHub&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/languages/top/jackdewinter/pyscan)](https://github.com/jackdewinter/pyscan)&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;platforms&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/badge/platform-windows%20%7C%20macos%20%7C%20linux-lightgrey)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Versions&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/pypi/pyversions/project_summarizer.svg)](https://pypi.org/project/project_summarizer)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/pypi/v/project_summarizer.svg)](https://pypi.org/project/project_summarizer)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitHub&lt;/span&gt; &lt;span class="n"&gt;Workflow&lt;/span&gt; &lt;span class="n"&gt;Status&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/workflow/status/jackdewinter/pyscan/Main)](https://github.com/jackdewinter/pyscan/actions/workflows/main.yml)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;codecov&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//codecov.io/gh/jackdewinter/pymarkdown/branch/main/graph/badge.svg?token=PD5TKS8NQQ)](https://codecov.io/gh/jackdewinter/pyscan)&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitHub&lt;/span&gt; &lt;span class="n"&gt;Pipenv&lt;/span&gt; &lt;span class="n"&gt;locked&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;)](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pyscan/black/master)&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitHub&lt;/span&gt; &lt;span class="n"&gt;Pipenv&lt;/span&gt; &lt;span class="n"&gt;locked&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;)](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pyscan/flake8/master)&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitHub&lt;/span&gt; &lt;span class="n"&gt;Pipenv&lt;/span&gt; &lt;span class="n"&gt;locked&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;)](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pyscan/pylint/master)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sourcery&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/badge/Sourcery-enabled-brightgreen)](https://sourcery.ai)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Stars&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/stars/jackdewinter/pyscan.svg)](https://github.com/jackdewinter/pyscan/stargazers)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Downloads&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/pypi/dm/project_summarizer.svg)](https://pypistats.org/packages/project_summarizer)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Issues&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/issues/jackdewinter/pyscan.svg)](https://github.com/jackdewinter/pyscan/issues)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;License&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/license/jackdewinter/pyscan.svg)](https://github.com/jackdewinter/pyscan/blob/main/LICENSE.txt)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Contributors&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/contributors/jackdewinter/pyscan.svg)](https://github.com/jackdewinter/pyscan/graphs/contributors)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Forks&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/github/forks/jackdewinter/pyscan.svg)](https://github.com/jackdewinter/pyscan/network/members)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LinkedIn&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/badge/-LinkedIn-black.svg?logo=linkedin&amp;amp;colorB=555)](https://www.linkedin.com/in/jackdewinter/)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes, it is a lot of work for seventeen small images, but I feel they are worth it.
Each badge related something that I feel is important about the project.  That part I
was okay with.  It just didn’t look nice to me.&lt;/p&gt;
&lt;p&gt;Yes, “nice”.  It was not a very quantifiable word that I picked.  That bugged we
enough that I started playing around to figure out why I thought that.  After some
research, I found out that for me “nice” was the same as “organized” in this context.
I liked the information, just did not like how it was being displayed.&lt;/p&gt;
&lt;p&gt;Using that knowledge, I took another hour and kept on changing organizations of
those tags until I came up with the current organization that you can see on the
project’s &lt;a href="https://github.com/jackdewinter/pyscan/blob/master/README.md"&gt;README.md page&lt;/a&gt;.
The first thing I decided to do was to put the information in Markdown tables to
give it clear organization.  After that quick fix, coming up with the categories
required a bit more work and fiddling around.  I played with different badges in
each “category” and looked to see if they looked right together.  Once I got a
set that looked right, giving that category a name was simple.&lt;/p&gt;
&lt;p&gt;The only category that I had problems with was the non-category for the third
line of the badges.  I wanted to call that &lt;code&gt;Dependencies&lt;/code&gt;, but I did not want
to add a list of every dependency.  But I did want to call out the various
packages that I use to increase and maintain the quality of the project.
In the end, I decided to just leave the title for that category blank, essentially
becoming a second line for the &lt;code&gt;Quality&lt;/code&gt; category.  I am not sure if it will
stay like that, but for now I feel it is a good compromise.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What Is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Project Summarizer plugin design.  Check.  Project Summarizer plugin loading
code.  Check.  Flushing out Project Summarizer plugins.  Check.  With all that
work done, I have been working on a project for a couple of months that will make
an ideal plugin.  Here is hoping I can move it along and have it ready by
next week!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Project Summarizer - Loading Plugins</title><link href="https://jackdewinter.github.io/2022/04/11/project-summarizer-loading-plugins/" rel="alternate"></link><published>2022-04-11T00:00:00-07:00</published><updated>2022-04-11T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-04-11:/2022/04/11/project-summarizer-loading-plugins/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/04/markdown-linter-back-to-project-summarizer-the-long-way/"&gt;last article&lt;/a&gt;, I
talked about more Type Hint work across the multiple projects that I support.
In this article, I talk about starting to add proper plugin support to
the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am not superstitious in the least, but now that I have started …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/04/04/markdown-linter-back-to-project-summarizer-the-long-way/"&gt;last article&lt;/a&gt;, I
talked about more Type Hint work across the multiple projects that I support.
In this article, I talk about starting to add proper plugin support to
the &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am not superstitious in the least, but now that I have started at my new
job, I feel I can talk more freely about it.  It is a fantastic opportunity and
I get to help people.  For me, those are two main pluses that I was looking for.
That is what has been occupying most of my time in the last 4 weeks: getting
that job and then starting at that job. Can you say “firehose of information”
five times real fast?&lt;/p&gt;
&lt;p&gt;But in the evenings, it was useful to have something I can work on and move
forward.  I know my day job is going to have good days and bad days, but I find
the lack of pressure for my open-source projects to be gratifying.  But I still
feel that I want to move the bar forward with them.  I want to do things that
help people write better Python projects, and to that end, I continue working
towards that goal.  And this week, it was mostly about the Project Summarizer
project.&lt;/p&gt;
&lt;h2 id="pull-request-merge-wait-and-repeat"&gt;Pull Request, Merge, Wait, and Repeat&lt;a class="headerlink" href="#pull-request-merge-wait-and-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having spread the Type Hint work across the various projects that I maintain,
I spent a fair amount of time this week getting those projects upgraded to their most recent versions.
The actual process is easy: just click the merge button on the Pull Requests
in GitHub and confirm it worked.  But while the &lt;code&gt;Pipfile&lt;/code&gt; has only a single line change, the
&lt;code&gt;Pipfile.lock&lt;/code&gt; contains more information.  And as those changes conflicted,
I had to merge each change, wait for the old Pull Requests to resolve again, and
then see if I can merge them.&lt;/p&gt;
&lt;p&gt;For the most part, the task is that simple.  Except when it is not.  One of those
“not” cases surfaced this past week: a merge error with the new PyLint and PyMarkdown.  The
&lt;a href="https://github.blog/2020-06-01-keep-all-your-packages-up-to-date-with-dependabot/"&gt;Dependabot&lt;/a&gt;
scan increased the version from &lt;code&gt;2.12.2&lt;/code&gt; to &lt;code&gt;2.13.5&lt;/code&gt;.  An otherwise
simple change, but it had effects on scanning of the code.  Where things were fine
before, it was now complaining about &lt;code&gt;too-many-branches&lt;/code&gt; in fourteen different
script files.  It was time for me to knuckle down and get to my research.&lt;/p&gt;
&lt;p&gt;Around three hours later, I had an observation and a partial solution.  The reason
I say &lt;em&gt;partial&lt;/em&gt; is that I had to change my &lt;code&gt;clean.cmd&lt;/code&gt; script to work around the
issue.  It was better than nothing and I was able to move forward with that work
around, and that is what really matters. And of course, I logged a new issue against
&lt;a href="https://github.com/PyCQA/pylint/issues/6242"&gt;PyLint&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;The issue itself?  For some reason, PyLint version &lt;code&gt;2.13.0&lt;/code&gt; and higher behaves differently
when I specify each individual package distinctly on the command line, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run pylint --rcfile&lt;span class="o"&gt;=&lt;/span&gt;setup.cfg pymarkdown pymarkdown/plugins
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;instead of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run pylint --rcfile&lt;span class="o"&gt;=&lt;/span&gt;setup.cfg --recursive&lt;span class="o"&gt;=&lt;/span&gt;y pymarkdown
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run pylint --rcfile&lt;span class="o"&gt;=&lt;/span&gt;setup.cfg pymarkdown/plugins/rule_md_033.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The module &lt;code&gt;rule_md_033.py&lt;/code&gt; was one of the failure cases.  When I went to
check and module &lt;code&gt;rule_md_033.py&lt;/code&gt; by using the third command line, PyLint
did not report any errors.  However, when I used the first command line, I got:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pymarkdown\plugins\rule_md_033.py:68:4: R0912: Too many branches (14/12) (too-many-branches)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, after doing research on PyLint’s command line, I came across the
&lt;code&gt;--recursive=y&lt;/code&gt; flag, and tried it out, producing the second command line.  This
was the change I ultimately made to the &lt;code&gt;clean.cmd&lt;/code&gt; script to solve the issue.
While there was still an issue with PyLint, a usage point of view, the new approach
is a cleaner approach and solves the issue, so it is good.  Not really three hours
of time wasted, but it was three hours that was used up just the same.&lt;/p&gt;
&lt;h2 id="adding-plugins-to-project-summarizers-command-line"&gt;Adding Plugins To Project Summarizer’s Command Line&lt;a class="headerlink" href="#adding-plugins-to-project-summarizers-command-line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that work being completed as a background task, I started developing a good
command line interface for the plugins that matched my rough designs.  While I had
a couple of loose ideas on how to do it, none of them seemed right to me.  Since
I love experimenting with code, I just spent some “fun” time trying different approaches
out until I found one that felt right and worked.&lt;/p&gt;
&lt;h3 id="brute-force-just-get-it-done"&gt;Brute Force - Just Get It Done&lt;a class="headerlink" href="#brute-force-just-get-it-done" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My first attempt was a brute force attempt at parsing the command line.  In Python,
the command line is presented as an array in &lt;code&gt;sys.argv&lt;/code&gt;.  The script that is
invoked from the command line is stored at index 0 with the rest of the items in
the array comprising the remaining arguments.  To keep things simple, I added a temporary constraint that
new plugins could only be added at the start of the command line using the
&lt;code&gt;--add-plugin&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;But this brute force method just did not work for me.  The first thing I had to
add to this method was a check that there was another argument after the &lt;code&gt;--add-plugin&lt;/code&gt;
argument.  Then I had to add a check to see if that argument started with a dash.
Then I had to add an option that the argument could include an &lt;code&gt;=&lt;/code&gt; sign and separate
the argument and the value that way.  It just seemed like needless work.&lt;/p&gt;
&lt;h3 id="revise-and-conquer"&gt;Revise and Conquer?&lt;a class="headerlink" href="#revise-and-conquer" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I decided to look to refine that approach a bit more, and to see if that would
help me feel more positive about that approach. Instead of looking only at the start of
the array, I tried to implement a more complex algorithm to find that pattern at
any point in the array.  The basic part of the algorithm was easy.  It was the
boundary cases that were the problem.
Some of the boundary cases were already managed using the extra work that I did
in the first iteration of this approach.  But I had other boundary cases to
consider.  The big one was a nasty one to solve: what would my code to if another
argument wanted to have &lt;code&gt;--add-plugin&lt;/code&gt; as its value?&lt;/p&gt;
&lt;p&gt;I started playing around to figure out what &lt;code&gt;argparse&lt;/code&gt; did for those situations
and found that any value in the command line that starts with a &lt;code&gt;-&lt;/code&gt; character
is assumed to be its own argument.  As such, I was safe in assuming that any instance
of the &lt;code&gt;--add-plugin&lt;/code&gt; argument in the command line array would be a valid one.&lt;/p&gt;
&lt;p&gt;But that finding got me thinking.  What other cases was I missing? Were there combinations
that the &lt;code&gt;argparse&lt;/code&gt; package was made to deal with that I did not know about? Weird
boundary conditions that I would have to mitigate later?  To me, it just made more
sense to try and let &lt;code&gt;argparse&lt;/code&gt; oversee the heavy lifting, and for me to take advantage
of the package whichever way I could.  But how?&lt;/p&gt;
&lt;h3 id="thinking-out-of-the-box"&gt;Thinking Out Of The Box&lt;a class="headerlink" href="#thinking-out-of-the-box" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I cannot remember exactly how I ended up with the idea for the solution, but it was just
one of those “why not? let’s try it and see if it works!” ideas. In this approach,
I decided to use the &lt;code&gt;argparse&lt;/code&gt; package twice, once for the &lt;code&gt;--add-plugin&lt;/code&gt; argument
and once for the remaining arguments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;remaining_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;additional_plugins_to_load&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;remaining_arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;last_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remaining_arguments&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;

        &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allow_abbrev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;PluginManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_plugin_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;known_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_known_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;remaining_arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;known_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_plugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;additional_plugins_to_load&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;known_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;remaining_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;known_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_arguments&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="the-main-loop"&gt;The Main Loop&lt;a class="headerlink" href="#the-main-loop" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It is not pretty to look. But let me break the code down.
Initially, the &lt;code&gt;remaining_arguments&lt;/code&gt;
variable is set to a slice of the command line arguments array, starting at
index 1.  This ensures that only workable arguments and interpreted, and not the
name of the script.  The next part to get right is the loop started on line 3.&lt;/p&gt;
&lt;p&gt;For the main conditional, I decided to just condition the loop off whether
there are still arguments to process.  If all arguments have been processed, there
is nothing left to do.  The assumption that I made here is that the process of
parsing the command line would consume the desired arguments as it goes.  I was
hoping to go with a “consuming” approach for the inner processing, so this fell
in line with the rest of my thinking.&lt;/p&gt;
&lt;p&gt;For the second conditional, I decided to use an &lt;code&gt;if&lt;/code&gt; statement and a &lt;code&gt;break&lt;/code&gt;
statement.  I could have put this conditional into the main loop, but I felt that
it read better with these two statements at the end of the loop.  To power this
conditional, I created a copy of the &lt;code&gt;remaining_arguments&lt;/code&gt; variable in &lt;code&gt;last_args&lt;/code&gt;
at the start of the loop.  By making the inner processing consume the arguments,
I was able to have the conditional check if the last set of arguments (&lt;code&gt;len(last_args)&lt;/code&gt;)
has the same length as the current &lt;code&gt;remaining_arguments&lt;/code&gt; variable (&lt;code&gt;len(remaining_arguments)&lt;/code&gt;).
If those two lengths are equal, then no arguments were consumed by the inner processing,
and the loop ends using the &lt;code&gt;break&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;As I said above, I am not sure if the design of the loop is “correct”, but for me,
it is very readable.  There are two major conditions for exiting the loop, and each
condition is distinct from each other.  From my viewpoint, that just makes it more
readable.&lt;/p&gt;
&lt;h4 id="inner-processing"&gt;Inner Processing&lt;a class="headerlink" href="#inner-processing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I must admit, I did resort to a bit of trickery to get this part working properly,
and not on my first try either.  The first two lines were standard to each approach
that I tried: create a parser and add the &lt;code&gt;--add-path&lt;/code&gt; argument to it using a
call to the &lt;code&gt;add_plugin_arguments&lt;/code&gt; function.  Why?  By doing it this way, I was
able to parse that argument independently of the main parser, but still have the
help for the &lt;code&gt;--add-path&lt;/code&gt; argument show up normally.  Basically, even though any
eligible instances of that argument would be removed by the inner processing, the
main processing help would still report on that argument properly.&lt;/p&gt;
&lt;p&gt;The next line was the pivotal line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;known_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_known_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;remaining_arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By invoking the &lt;code&gt;argparser&lt;/code&gt; package using the &lt;code&gt;parse_known_args&lt;/code&gt; function, I got
the benefit of return values were different than normal.  With this function, the
standard &lt;code&gt;argparse.Namespace&lt;/code&gt; typed value is returned as the first value in a &lt;code&gt;Tuple&lt;/code&gt;,
but the second value returned is an array
with all unused arguments. This made the rest of the inner processing easy, as
this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;remaining_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;known_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was all that was needed to figure out the remaining arguments and assign them to
the proper variable.  After adding the lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;known_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_plugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;additional_plugins_to_load&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;known_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to add the parsed &lt;code&gt;--add-path&lt;/code&gt; argument to the array of plugins to load, the only
other change that was required was to wire up the &lt;code&gt;main&lt;/code&gt; function with the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;remaining_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_plugins&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__parse_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and change the code in the &lt;code&gt;__parse_arguments&lt;/code&gt; function to parse the list that
was passed in instead of the default &lt;code&gt;sys.argv&lt;/code&gt; value.  Some quick testing and
adding of use cases, and everything looked good.&lt;/p&gt;
&lt;h2 id="not-giving-up"&gt;Not Giving Up&lt;a class="headerlink" href="#not-giving-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That process was by no means easy.  As my son often says “sometimes you have to
throw a lot of spaghetti against the wall just to find one that sticks.”  The
important thing to me was that the approaches that I took did not feel right, and I needed
to keep on searching until I found something that did feel right.  While that is
not always the right thing to do, I believe it was the right thing to do in this
scenario.  It was because of that feeling that I kept on changing my approach
until I found that unorthodox solution with the &lt;code&gt;argparse&lt;/code&gt; package.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the command line parsing for adding new plugins completed, I knew that I
need to spend time adding a good array of tests.  Following that, there
was the adaptation of the plugin logic from the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project that needed to be completed.  Not a clean copy, but an adaptation to
suit the Project Summarizer project.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Back To Project Summarizer... The Long Way</title><link href="https://jackdewinter.github.io/2022/04/04/markdown-linter-back-to-project-summarizer-the-long-way/" rel="alternate"></link><published>2022-04-04T00:00:00-07:00</published><updated>2022-04-04T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-04-04:/2022/04/04/markdown-linter-back-to-project-summarizer-the-long-way/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/03/28/markdown-linter-python-type-hinting/"&gt;last article&lt;/a&gt;, I
talked about applying Python Type Hints to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project.  In this article, I talk about more Type Hint work across the multiple
projects that I maintain.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes projects can take on a mind of their own.  That is how I felt about …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/03/28/markdown-linter-python-type-hinting/"&gt;last article&lt;/a&gt;, I
talked about applying Python Type Hints to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project.  In this article, I talk about more Type Hint work across the multiple
projects that I maintain.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes projects can take on a mind of their own.  That is how I felt about
the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project and adding Python Type Hints to it.  It was just soaking
up time like a dry sponge.  It is true that I could have taken a break from adding
the hints for a while, but in that case, I was sure that I was going to feel like
the job was incomplete.  While it may not have been the most pressing task
to complete, I decided to move forward with it anyway.&lt;/p&gt;
&lt;p&gt;However, there was a silver lining.  Along the way, I was able to start providing
updates to my other project and getting them all coordinated with scripts and supporting
Type Hints.  To me, that was a plus!&lt;/p&gt;
&lt;h2 id="issue-319-the-final-commit"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/319"&gt;Issue 319&lt;/a&gt; - The Final Commit?&lt;a class="headerlink" href="#issue-319-the-final-commit" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having rare available time during the week, I decided to move forward with
Type Hints and the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project, or at least move ahead as much as time
would allow.  It wasn’t always pretty work, as I detailed in my
&lt;a href="https://jackdewinter.github.io/2022/03/28/markdown-linter-python-type-hinting/#paying-the-price"&gt;last article&lt;/a&gt;,
but it was good work none the less. Starting at 1147 issues, by the middle of the
week, I was able to get the number down to around 125 issues before the fun began.&lt;/p&gt;
&lt;h3 id="sometimes-you-just-need-to-be-literal"&gt;Sometimes, You Just Need To Be Literal&lt;a class="headerlink" href="#sometimes-you-just-need-to-be-literal" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I winnowed down the issues to that group of 125, I started to encounter a number
of interesting scenarios. One of these scenarios was with the
&lt;code&gt;generate_close_markdown_token_from_markdown_token&lt;/code&gt; function in the &lt;code&gt;MarkdownToken&lt;/code&gt;
module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_close_markdown_token_from_markdown_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extra_end_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I coded it up, everything looked fine.  And then it hit me.  I had just added
a return type hint of &lt;code&gt;MarkdownToken&lt;/code&gt; within the module &lt;code&gt;MarkdownToken&lt;/code&gt;.  The yellow
error line in VSCode under the class name confirmed it.  Therefore, it was no surprise
that after starting a quick run of the project tests that I got my expected
confirmation response back:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pymarkdown\markdown_token.py:22: in &amp;lt;module&amp;gt;
    class MarkdownToken:
pymarkdown\markdown_token.py:585: in MarkdownToken
    ) -&amp;gt; MarkdownToken:
E   NameError: name 'MarkdownToken' is not defined
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Doing quick research on the subject, my thoughts were spot on.
Until the Python class is completed, it is not registered
as a complete class.  As such, any type hint to the class to itself is not legitimate.
That was the bad news.  The good news is that when the type hints framework was being
designed, this scenario had been prepared for.  By changing the last line from
specifying the type hint as a type (&lt;code&gt;) -&amp;gt; MarkdownToken:&lt;/code&gt;) to specifying the type
hint as a literal (&lt;code&gt;) -&amp;gt; "MarkdownToken":&lt;/code&gt;), the error disappeared.
Covered in the documentation of
&lt;a href="https://peps.python.org/pep-0484/#forward-references"&gt;PEP 484 - Type Hints&lt;/a&gt; as
forward references, these exist to resolve thorny cyclic imports and cases where
a class holds references to itself.&lt;/p&gt;
&lt;p&gt;After fixing the handful of issues like this, it was then on to the last major set
of issues: stubs.&lt;/p&gt;
&lt;h2 id="stubs-application_properties"&gt;Stubs: Application_Properties&lt;a class="headerlink" href="#stubs-application_properties" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the remaining issues, the one group of remaining issues were issues
that had problems with imported types.  Specifically, there were three
imported packages that did not have any type information:
&lt;code&gt;columnar&lt;/code&gt;, its dependent package &lt;code&gt;wcwidth&lt;/code&gt;, and the &lt;code&gt;applications_properties&lt;/code&gt;
package.  To effectively use Mypy to verify the types used by the PyMarkdown project,
it needed to know the types of the classes in those three external packages.&lt;/p&gt;
&lt;p&gt;After doing my usual research, I found that for the first two packages, &lt;code&gt;columnar&lt;/code&gt; and
&lt;code&gt;wcwidth&lt;/code&gt;, the best solution was to use the &lt;em&gt;stubgen&lt;/em&gt; command.  Packaged with the
Mypy package, stubgen tries to generate a set of importable stubs that are somewhat
close to the actual types that should have been included with the package.  If that
sounds like I am choosing my words carefully, it is because I am.  Based on their
document and my experience, using &lt;em&gt;stubgen&lt;/em&gt; in the following way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stubgen --output stubs -p columnar
stubgen --output stubs -p wcwidth
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;generated stub files into the &lt;code&gt;stubs&lt;/code&gt; directory for those two packages.  Those
stubs files were not spot on, but they were reasonably close. If I had to associate
a percentage with their accuracy, I would say their initial accuracy was in the
80-90% range.  Outside of that range, there was far more usage of the &lt;code&gt;Any&lt;/code&gt; type
than I was comfortable with, with numerous cases where the type hints were missing.
But with extra research and experimentation, including a healthy dose of trial
and error, I was able to quickly tune the stubs into a usable format.&lt;/p&gt;
&lt;p&gt;That left the &lt;code&gt;application_properties&lt;/code&gt; package.  I know that I could have taken
the same route as with the other packages, but I decided to spend time to improve
the &lt;code&gt;application_properties&lt;/code&gt; project, setting it up properly with the correct type
information.&lt;/p&gt;
&lt;p&gt;However, once I had that type information
dialed in, I found out that there were additional changes that I needed to make
to allow Mypy to see that type information.  The
first change was to add a &lt;code&gt;py.typed&lt;/code&gt; file in the package’s directory to let Mypy
know that it had type information that was available.  This also meant adding that
file to the &lt;code&gt;MANIFRST.in&lt;/code&gt; file to ensure it was copied as part of the package.
Then I added an array to the &lt;code&gt;__all__&lt;/code&gt; variable in the package’s &lt;code&gt;__init__.py&lt;/code&gt;
file to ensure that Mypy had a good list of all the classes to load.  That took
a couple of hours and a healthy dose of trial and error, but it was all worth it!&lt;/p&gt;
&lt;p&gt;After that, deciding to leave things better than I found them (an old scouting
and hiking habit), I upgraded a handful of support files in the project.  Most of the
scripts were over six months old and out of date with my other projects, so I just
went ahead on updated them.  At the same time, the &lt;code&gt;Pipfile&lt;/code&gt; that I use with
&lt;code&gt;pipenv&lt;/code&gt; was complete,
but had two original packages whose version was &lt;code&gt;*&lt;/code&gt; and six copied packages with
the same &lt;code&gt;*&lt;/code&gt; version.  To be consistent, I looked up their versions and set those
looked-up versions into the &lt;code&gt;Pipfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Why did I do that?  Call it covering all bases.  From my experience, it is particularly
useful to drop any variables where possible.  A version identifier of &lt;code&gt;*&lt;/code&gt; means
that the version used is always the latest version, which is a moving target.  I
ran across a good example of how that can affect things this week, with a weird change to the
&lt;code&gt;black&lt;/code&gt; package.  As I updated the &lt;code&gt;black&lt;/code&gt; package’s version, the project’s &lt;code&gt;clean.cmd&lt;/code&gt; script
(which uses &lt;code&gt;black&lt;/code&gt;) started reporting errors.  Basically, there was a disconnect
between the &lt;code&gt;black&lt;/code&gt; package and the &lt;code&gt;click&lt;/code&gt; package, as
&lt;a href="https://github.com/psf/black/issues/2964"&gt;documented here&lt;/a&gt;.  If I had specified
the &lt;code&gt;black&lt;/code&gt; package with a &lt;code&gt;*&lt;/code&gt; version, I would have not been able to execute
the &lt;code&gt;black&lt;/code&gt; formatter for as long as this fix took to create and release.&lt;/p&gt;
&lt;p&gt;I did a small handful of other changes, which I considered bookkeeping.
I added a &lt;code&gt;main.yml&lt;/code&gt; file that was a close copy of the one from the PyMarkdown
project.  Nothing fancy, just there to execute scenario tests and lint tests as part
of the merge process.  I added some &lt;code&gt;pre-commit&lt;/code&gt; configuration and set it to
scan the project root and project &lt;code&gt;docs&lt;/code&gt; directory using PyMarkdown.  With all
that work completed, I did not want it to fall into disrepair, so I added a
&lt;code&gt;dependabot.yml&lt;/code&gt; file to automatically scan for newer package versions.&lt;/p&gt;
&lt;p&gt;With a quick release of version &lt;code&gt;0.5.2&lt;/code&gt; of the project, it was then back to
the other work.&lt;/p&gt;
&lt;h2 id="back-to-issue-319"&gt;Back to Issue 319&lt;a class="headerlink" href="#back-to-issue-319" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a healthy amount of testing done on the new release of &lt;code&gt;application_properties&lt;/code&gt;,
I switched the package version in PyMarkdown’s &lt;code&gt;Pipfile&lt;/code&gt; from &lt;code&gt;0.5.0&lt;/code&gt; to
&lt;code&gt;0.5.2&lt;/code&gt; and removed the test files that I had in the &lt;code&gt;stubs/application_properties&lt;/code&gt;
directory.  As I started my &lt;code&gt;clean.cmd&lt;/code&gt; script, I held my breath.  I had done
the work to hopefully make this work, but this is what it all came down to.
And after a good minute or two, I was rewarded with a complete execution of
the &lt;code&gt;clean.cmd&lt;/code&gt; script with no errors.&lt;/p&gt;
&lt;p&gt;I was close to being done.  Turning on the strict mode for Mypy, I had around thirty
issues that I had yet to resolve, each of them being resolved within minutes of
each other.  Within forty-five minutes, those issues were gone and Mypy was
being called with strict mode enabled and no issues being reported!&lt;/p&gt;
&lt;h2 id="pymarkdown-release-096"&gt;PyMarkdown Release 0.9.6&lt;a class="headerlink" href="#pymarkdown-release-096" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I decided that I had a good, healthy number of changes queued up, and a point release
was overdue.  Putting together a quick mental list of things to clean up before
I released the project, I made quick work of those issues.&lt;/p&gt;
&lt;p&gt;While I do try and maintain the &lt;code&gt;changelog.md&lt;/code&gt; file, I often fall behind.  Knowing that, I
took some time and cleaned up that file and double checked it for accuracy. Repeating
the work on the &lt;code&gt;application_properties&lt;/code&gt; project and its &lt;code&gt;Pipfile&lt;/code&gt;, I went through
and adjusted the file to remove any &lt;code&gt;*&lt;/code&gt; version identifiers.  I also added the same &lt;code&gt;dependabot.yml&lt;/code&gt;
file to the PyMarkdown project that was in the &lt;code&gt;application_properties&lt;/code&gt; project.
After changing the version to &lt;code&gt;0.9.6&lt;/code&gt;, setting the tag, creating the package, and
uploading the package, I was at a good point with the PyMarkdown project.&lt;/p&gt;
&lt;h2 id="getting-back-to-the-project-summarizer-project"&gt;Getting Back To The Project Summarizer Project&lt;a class="headerlink" href="#getting-back-to-the-project-summarizer-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having done all that work by Friday night, I was faced with a weekend with no planned
work ahead of me.  I had honestly thought it was going to take me all week to resolve
the Mypy issues, so I was a bit lost on what to do when Saturday afternoon came around.
Taking a page from the work that I did during the week, I went through and applied
the same kind of updates to the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
project as I had to the other two projects.&lt;/p&gt;
&lt;p&gt;With all projects updated to my current specifications, I started to work on my design
for adding plugin support to the Project Summarizer project.  From my perspective,
the key to having a good summarizer was allowing for end users to add functionality
for their own situations.  As such, I was confident that this meant supporting
plugins in a fashion like what I had done with the PyMarkdown project.
But I also know that this was going to be different because the requirements were
slightly different.  In the case of the Project Summarizer project, I figured out
that the plugins needed to be parsed and at least partially acted upon before the
normal command line processing.&lt;/p&gt;
&lt;p&gt;The reasoning for that was quite clear to me.  Unlike the other projects I have
added plugin support to, the plugins for the Project Summarizer project needed to
be able to inject command line arguments into the normal command line processing
workflow.  The summarizer works by taking existing reporting files and supplying
summaries of the content contained within.  Simply put, if I wanted the plugins
to be able specify the report files to act on, I needed to evaluate the plugins
to use before the normal processing occurred.&lt;/p&gt;
&lt;p&gt;Doing a bit of experimentation, I was sure I would be able to come up with something
decent, it was just a matter of which one of those options worked better than the
others.&lt;/p&gt;
&lt;p&gt;But, with my research completed and a long week ahead of me, I decided to leave it
there.  I was sure to have more time in the middle of the week to work on things,
and that was good enough for me.  I know that I want to make progress with plugins
for the Project Summarizer project, and I want to keep working on my other projects,
not just the PyMarkdown project.  With that focus in mind, I put my computer to
sleep on an early Sunday night.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having focused exclusively on the PyMarkdown project for a couple of months, I am
going to try harder to split my time between my different projects.  At the very
least, I hope to try harder to do so.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Python Type Hinting</title><link href="https://jackdewinter.github.io/2022/03/28/markdown-linter-python-type-hinting/" rel="alternate"></link><published>2022-03-28T00:00:00-07:00</published><updated>2022-03-28T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-03-28:/2022/03/28/markdown-linter-python-type-hinting/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/03/14/markdown-linter-pi-day-blues/"&gt;last article&lt;/a&gt;, I
talked about drifting back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project for a while and talk about what is happening there.  One of the things
that I latched on to was Python Type Hints, which is what I dug into the past
week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things have been …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/03/14/markdown-linter-pi-day-blues/"&gt;last article&lt;/a&gt;, I
talked about drifting back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project for a while and talk about what is happening there.  One of the things
that I latched on to was Python Type Hints, which is what I dug into the past
week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things have been very time-consuming in my life recently.  Perhaps in the next couple
of months, I will write an article about it.  Who knows?
The effect of those things happening is that I did not publish an article
last week.  I was about 60% done with a first draft of the article, and I just
ran out of steam.  Nothing bad really happened, it was just that life was very
draining for a couple of weeks, and it caught up to me.&lt;/p&gt;
&lt;p&gt;When it came down to it, I just didn’t feel that I could do my best to complete
the article.  Quite simply, I did not feel that I could author an article
that I would be proud of.  So, I decided to wait to complete it.  And as
the week went on, things in my life resolved and lightened up considerably.&lt;/p&gt;
&lt;p&gt;So here goes.  Sorry for the wait.&lt;/p&gt;
&lt;h2 id="python-is"&gt;Python Is…&lt;a class="headerlink" href="#python-is" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the wonderful things that I like about the Python programming language is
that it is wonderfully untyped.  As someone who is creative, I often find that my
creativity in other languages is slowed down by trying to figure out what types
to use in what scenarios.  Not that types are a bad thing, I just find that using
strict type systems often hinder my creative process.&lt;/p&gt;
&lt;p&gt;As I understand it, one of the cornerstones of the Python language is that it is
the behavior that dictates the language, not the other way around.  To illustrate
that understanding, consider two separate objects that are both initialized to
have a &lt;code&gt;self.my_var&lt;/code&gt; member variable.  The underlying assumption is that if I have
a function whose behavior is to act on that variable, it does not matter which
object or which instance of a class holds that member variable.  The passing of
that object into the function is behavior enough.&lt;/p&gt;
&lt;p&gt;And that kind of thinking that “we are adults in the room” permeates through a
lot of Python.  There are no interfaces as in Java and C#.  Because of the loose
typing, there are no needs for generics.  Things just work.&lt;/p&gt;
&lt;p&gt;But using a language that does not have strict typing also has its share of
problems.  For one, since everything looks the same, any kind of function hinting
in source editors struggles to figure out the proper set of functions to display.
Say a variable was initialized to a &lt;code&gt;None&lt;/code&gt;, then an &lt;code&gt;int&lt;/code&gt;, and then a &lt;code&gt;str&lt;/code&gt;. What
function hints should the editor display and when? It is situations like that
where things get complicated.&lt;/p&gt;
&lt;h2 id="introducing-python-type-hints"&gt;Introducing Python Type Hints&lt;a class="headerlink" href="#introducing-python-type-hints" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have used Python for over four years now, it was only in the last couple
of months that I came across Python Type Hints.  To be clear, the name is exactly
as it sounds.  These are hints, not mandates, for how to interpret types within
the Python languages space.  To use a simple example, consider this Python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"something"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is not really that interesting, therefore it is easy to read.  Therefore, compare
it to the following code, from PyMarkdown’s &lt;code&gt;main.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Main entrance point.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__parse_arguments&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__set_initial_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;new_handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_error_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_strict_mode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;new_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_logging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_plugins_and_extensions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Determining files to scan."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;files_to_scan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;did_error_scanning_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__determine_files_to_scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recurse_directories&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;did_error_scanning_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;total_error_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_main_list_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files_to_scan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files_to_scan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__scan_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;BadPluginError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_scan_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;BadTokenizationError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_scan_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;formatted_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Configuration Error: {this_exception}"&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;new_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plugins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number_of_scan_failures&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;total_error_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What makes this function readable is that most of the heavy lifting has been delegated
off to the ten functions that &lt;code&gt;main&lt;/code&gt; function itself calls.  But look at
the function call to the &lt;code&gt;__determine_files_to_scan&lt;/code&gt;.  What kind of arguments does
that function require?  What kind of return values does that function produce?
Without good answers to those questions, using that function creates some hurdles
that we must jump over.  But what if we could reduce those hurdles a bit?&lt;/p&gt;
&lt;p&gt;That is where type hints come in.  Having already been modified during this past
week, that function definition currently looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__determine_files_to_scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eligible_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;recurse_directories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-are-type-hints-used-for"&gt;What Are Type Hints Used For?&lt;a class="headerlink" href="#what-are-type-hints-used-for" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be redundantly clear, Python type hints are exactly that, hints.  Any Python
code with type hints is
interpreted by Python interpreters without using those type hints.  However,
packages like the &lt;code&gt;Mypy&lt;/code&gt; package and the Python extension for VSCode can be used
to take advantage of those type hints.&lt;/p&gt;
&lt;p&gt;In the case of VSCode, the use of those type hints allows it to provide
better feedback to someone editing Python code.  Having started to apply type hints
to my Python code, I can already see the benefits as I am editing that same code.
Instead of me having to do search-and-replace to find the definition of the
function to determine how to interact with it, most of that information is displayed
in a handy popup that appears when I add the open parenthesis for the function call.
At the top are any type hints that I provided, and at the bottom is any documentation
that I added with a docstring.  That is useful.&lt;/p&gt;
&lt;p&gt;The other strong use that I have found for type hints are in the usage of the
&lt;a href="http://mypy-lang.org/"&gt;Mypy&lt;/a&gt; type checking tool.  From my understanding of this
process, Mypy builds a model of what it is being scanned, including any type hints.
It then compares usage of variables and function to what it believes to be the correct
typing, emitting warnings when the usage does not mirror what it believes to be the
correct types.&lt;/p&gt;
&lt;p&gt;In its normal mode, this is useful in making sure that there is consistent usage
of variables and types throughout a module.  But with that, there is a price to
pay.&lt;/p&gt;
&lt;h2 id="paying-the-price"&gt;Paying The Price&lt;a class="headerlink" href="#paying-the-price" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My first stab at adding type hints started fifteen days ago
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/b469155be7757209fea149e8ca534e3ab63feea2"&gt;with this commit&lt;/a&gt;.
It was not anything grand, but it was a start.  Just some simple changes to see
how things work.  From there, I started to pick off individual modules and
start to convert them where possible.&lt;/p&gt;
&lt;p&gt;Basically, find something to work on, fix it, validate it, and move on.
Then repeat that pattern many, many times.  I found that I was shifting between
responding to the result of this command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run mypy --strict pymarkdown stubs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to figure out what the next change to tackle was, and this command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run mypy pymarkdown stubs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to resolve any fallout from those changes.  Then, when I thought I had a good chunk
of work changed, I would enter this command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ptest -m
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to execute the complete set of tests to verify the changes worked.  And it just
kept on going.  The good news is that I started with over 4400 issues found with
&lt;strong&gt;strict mode&lt;/strong&gt; enabled, and now that is down to 1147 issues.  Getting close to
being done, but not there yet.&lt;/p&gt;
&lt;p&gt;And it is a very costly process to add it to an already existing project.&lt;/p&gt;
&lt;h3 id="cost-1-optional-values"&gt;Cost 1: Optional Values&lt;a class="headerlink" href="#cost-1-optional-values" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the things that I did not think about while writing the Python for the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project was my use of
the &lt;code&gt;None&lt;/code&gt; value.  Instead of producing good default values to denote that
some action was not performed, I just assigned the &lt;code&gt;None&lt;/code&gt; value to the
corresponding variable.&lt;/p&gt;
&lt;p&gt;What was wrong with that?  Nothing at the time.  But when I added type hints, it
forced me to use the &lt;code&gt;Optional&lt;/code&gt; type around the type of the variable.  Instead
of using a type like &lt;code&gt;int&lt;/code&gt;, I found that I had to use the type &lt;code&gt;Optional[int]&lt;/code&gt;.
And that brought a whole lot of extra effort to adding type hints.
Because the keyword literally means that the value can be a valid integer or the
value &lt;code&gt;None&lt;/code&gt;, in places where it was introduced, I had two options.&lt;/p&gt;
&lt;p&gt;The first option was to use the type as it was, returning &lt;code&gt;Optional[int]&lt;/code&gt; from
that function if needed.  But then, I was just delaying the evaluation of the second
option.  If I needed to return an &lt;code&gt;int&lt;/code&gt; or pass an &lt;code&gt;int&lt;/code&gt; while calling another
function, the second option was to do something to remove the &lt;code&gt;Optional&lt;/code&gt; around the type. In
a handful of cases, a well-placed &lt;code&gt;if variable:&lt;/code&gt; statement was used to do just that.
But in most cases, the variable was wrapped in an &lt;code&gt;Optional&lt;/code&gt; type in
the rare occurrence that it would be set to &lt;code&gt;None&lt;/code&gt;.  In those cases, I simply preceded
any reference to that variable with &lt;code&gt;assert variable is not None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That was painful but it was what was needed.  The painful part was that I needed
to then run the &lt;code&gt;ptest -m&lt;/code&gt; command to make sure that all paths through the code
were not triggering that assertion.  And while I would like to see I got them
all on the first try, that was not the case.  In those cases, it was reset and
try again.&lt;/p&gt;
&lt;h3 id="cost-2-getting-types-wrong-in-tokens"&gt;Cost 2: Getting Types Wrong in Tokens&lt;a class="headerlink" href="#cost-2-getting-types-wrong-in-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So far, it has only happened two times, but having a single variable that contains
multiple types is not desirable.  That practice is very undesirable when those
variables are member variables of Markdown tokens.  Because each basic scenario test
validates the list of Markdown tokens produced by the parser, in addition to verifying
the HTML produced by applying a transformation to those tokens, any change in what
is being tokenized can require many scenario tests to change.&lt;/p&gt;
&lt;p&gt;It is through sheer luck that these have been kept to a minimum.  In one case,
it resulted in the correction of three scenario tests.  In the other case, over
three hundred scenario tests needed to be fixed.  The issue?  In some of the failure
cases, the variable was set to the string value of &lt;code&gt;""&lt;/code&gt; instead of the boolean
value of &lt;code&gt;False&lt;/code&gt;.  While both values equal to &lt;code&gt;False&lt;/code&gt; when used in a
Python conditional, enforcing a &lt;code&gt;bool&lt;/code&gt; type meant changing many empty string values
in that particular token to a &lt;code&gt;False&lt;/code&gt; boolean value.&lt;/p&gt;
&lt;h3 id="cost-3-resolving-cycles"&gt;Cost 3: Resolving Cycles&lt;a class="headerlink" href="#cost-3-resolving-cycles" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another cost is one of making sure that I get each module agreeing on which other
modules they need to import, and in which order to import them.  This is particularly important as
Python has no ability to resolve module cycles using forward references. Instead,
as soon as the modules try and resolve their import statements during interpretation,
a cycle is detected, and a cycle exception is raised.  From my research, there are two
ways to get around this.&lt;/p&gt;
&lt;p&gt;The first way is to make sure that the
functions and classes are cleanly organized so that cycles do not occur.  A good
example of this are classes like &lt;code&gt;InlineRequest&lt;/code&gt; and &lt;code&gt;InlineResponse&lt;/code&gt;.  These two
classes used to be contained in the &lt;code&gt;InlineProcessor&lt;/code&gt; module before this work
started.  However, there were a small number of cases where the &lt;code&gt;InlineProcessor&lt;/code&gt;
module imported another module that also needed the &lt;code&gt;InlineRequest&lt;/code&gt; or
&lt;code&gt;InlineResponse&lt;/code&gt; classes.  As such, that other module would try and import those
classes from the &lt;code&gt;InlineProcessor&lt;/code&gt; module, causing a cycle to occur.&lt;/p&gt;
&lt;p&gt;The solution?  By lifting those two classes out of the &lt;code&gt;InlineProcessor&lt;/code&gt; module
and into their own modules, other modules could them import those two classes
without importing the &lt;code&gt;InlineProcessor&lt;/code&gt; module.  This was the easiest way to break
the cycle.&lt;/p&gt;
&lt;p&gt;But in some cases, this was not possible.  While things worked properly when
typing was not in the picture, there were a small number of cases where the
&lt;code&gt;import&lt;/code&gt; statement was needed with no way to reduce the cycle.
That is where the second method of avoiding cycles comes in.
For these
cases, the following pattern was used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TYPE_CHECKING&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;TYPE_CHECKING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# pragma: no cover&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown.tokenized_markdown&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ParseBlockPassProperties&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It took me a while to find this, but it works cleanly.  Having a good understanding
of how type hints could get complicated, the &lt;code&gt;TYPE_CHECKING&lt;/code&gt; global variable was
added as a work-around.  Set to &lt;code&gt;False&lt;/code&gt; by default and to &lt;code&gt;True&lt;/code&gt; by Mypy, the
above fragment of code only imports if type checking is enabled.&lt;/p&gt;
&lt;p&gt;How does this help?  As the code works fine without the type hints, the above
import is only being done to ensure that the type hints are correct.  As type
hints are not necessary for the normal interpretation of the Python code, the
interpreter can safely disregard any type hints.  Therefore, as the type hints
are only used for type checkers like Mypy, the &lt;code&gt;TYPE_CHECKING&lt;/code&gt; global variable
is used to detect if that is the current evaluation mode of the module, only
importing if that is the case.&lt;/p&gt;
&lt;p&gt;It took me a while to get behind it.  But from my experience, it is both simple
and brilliant at the same time.  It is a good example of cleanly dividing
responsibilities.&lt;/p&gt;
&lt;h2 id="how-is-the-work-coming-along-is-it-worth-it"&gt;How Is the Work Coming Along?  Is It Worth It?&lt;a class="headerlink" href="#how-is-the-work-coming-along-is-it-worth-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned early, Mypy has gone from detecting issues in the 4500-issue range
to the 1100-issue range, with that number decreasing with each change.  It is a
prolonged process, but I feel that it is a good one.  I can already
see benefits in VSCode when I am editing the project.  On top of that, it has
helped me to clarify some of the implementation details that I have done over the
course of the last two years.  Those are good things.&lt;/p&gt;
&lt;p&gt;But do not get me wrong, it is a slog.  This effort does not erase any technical debt
and does not make the project function any better.  What it is doing for me is
to make the code more maintainable and more readable. While it is not erasing
any technical debt, it is improving the quality of the project.  That it not as
quantifiable to others, but to me it is an important quantification.&lt;/p&gt;
&lt;p&gt;And while others might not understand that difference, it is good enough for me.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With over 75% of the project converted, the best answer that I can give right now
is that I hope to have the conversion finished by the end of the week.  Not sure
if it is possible, but I am going to try for it!
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Pi Day Blues</title><link href="https://jackdewinter.github.io/2022/03/14/markdown-linter-pi-day-blues/" rel="alternate"></link><published>2022-03-14T00:00:00-07:00</published><updated>2022-03-14T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-03-14:/2022/03/14/markdown-linter-pi-day-blues/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;, I
talked about the reasoning and designs behind the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
too that I use.  In this article, I drift back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project for a while and talk about what is happening there.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things over here at my house have been a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;, I
talked about the reasoning and designs behind the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
too that I use.  In this article, I drift back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project for a while and talk about what is happening there.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things over here at my house have been a bit rocky professionally and personally.
It is nothing serious and nothing that I cannot deal with given the proper time
and mindset to deal with it.  Just multiple things converging at the same time
making life difficult for a while.  As such, while I did want to make more progress with the
Project Summarizer tool, the extra bandwidth in my personal life just was not there.
Rather than try and force work on the tool and then not being happy with myself
or my effort, I decided to bounce back to the PyMarkdown project and concentrate
on familiar ground for a while.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/152c2561f569dd4444c2f8f8f4625bf67ae7e774"&gt;13 Feb 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/524c38ea3af62cfbef285452cab8b370f1904926"&gt;13 Mar 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="state-of-the-project"&gt;State Of The Project&lt;a class="headerlink" href="#state-of-the-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Wow… a whole month has passed and there have been a lot of minor changes here
and there to the PyMarkdown project.  While there are no new stellar features to
report, I feel that the nested container testing is coming along.  Granted,
it is coming along slowly, but I can see that the progress in stability is worth
the effort.&lt;/p&gt;
&lt;p&gt;I guess that is why, during this weird time where multiple negative events seem
to be hitting at the same, I find solace in this work.  Do not get me wrong.  The
work itself is needed for the project. And it is creative, but
it is also a very constrained problem space.  Somewhat like a logical fuzzy blanket
that I can use for a while.&lt;/p&gt;
&lt;p&gt;For those that do not understand, let me try and explain it this way.  Sometimes,
when walking through our house, things can seem out of sort to me.  When this happens,
I look around for a handful of things
that I can clean up in five or ten minutes that will have a decent impact on how
I think the room looks.  I might not clean everything up and I might just reorganize
things to look cleaner, but that action helps me put my mind at ease. And for the record,
the messiest room in our house is not my office, it is the kitchen followed closely
by our dining room table.&lt;/p&gt;
&lt;p&gt;In a similar fashion, I find that cleaning up code and making a project
better helps me to clean up some of the “mess” in my mind. It is not the
same thing, nor does it have the same level of impact.  But still, it helps.  Whether
it is improving documentation, adding more specific scenarios tests, or cleaning up code that
I was not happy with, it is all about leaving the project a bit better than when
I found it. That is what helps me put my mind at ease.&lt;/p&gt;
&lt;h2 id="python-dataclasses-typing-and-mypy"&gt;Python, DataClasses, Typing, and Mypy&lt;a class="headerlink" href="#python-dataclasses-typing-and-mypy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have been learning and exploring in Python over the last five years.  In that
learning, I often find that the learning takes its own time and happens at the
weirdest of times. And I just hit one of those learning “bumps”.&lt;/p&gt;
&lt;p&gt;During the odd downtime in my professional job or in my personal projects, I browse
various parts of the web.  In some cases, it is to search for a better way to do
something, and in other cases it is just about exploring.  Either way, I often learn
about interesting things that spark my creativity.&lt;/p&gt;
&lt;p&gt;It was while I was working on research for another project that I came across a
concept known as data classes.  Covered more completely at the
&lt;a href="https://docs.python.org/3.8/library/dataclasses.html"&gt;Python Docs Pages&lt;/a&gt;,
the base concept behind dataclasses is a simple one.  Instead of setting up a class
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="nd"&gt;@x_index.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="nd"&gt;@y_index.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you can set up a class like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;

&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even more interesting are the cases where you do not want those values to be
changed.  In that case, using &lt;code&gt;@dataclass(frozen=True)&lt;/code&gt; will not generated any
setters for the class.&lt;/p&gt;
&lt;p&gt;To be clear, truly immutable objects in Python is not possible, but this language
feature comes close to it. Knowing the design of the PyMarkdown project
as I do, I thought dataclasses would be useful and started looking at them more
in-depth.&lt;/p&gt;
&lt;h2 id="python-typing"&gt;Python Typing&lt;a class="headerlink" href="#python-typing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My research flowed from dataclasses into one of the concepts
that they introduced me to: Python Typing.  In the dataclass example above, the variable
is specified with a type that follows it.  That type is what Python calls a “Type
Hint” and simply supplies a hint as to what the developer thought that type should
be.  The Python interpreters do not do anything with that themselves, but tools
such as &lt;code&gt;Mypy&lt;/code&gt; use that information to check to see if each type usage lines up.&lt;/p&gt;
&lt;p&gt;After reading the &lt;a href="http://mypy-lang.org/"&gt;Mypy documentation&lt;/a&gt;, or at least
a good handful of examples, I was hooked. There really is not a TL;DR on this, but
here is my first take on it.&lt;/p&gt;
&lt;p&gt;Type Hints are exactly as they sound, hints.  In a normal Python interpreter,
if the type hints do anything, they are essentially null operations.  But with other
tools, such as editors and Mypy, they provide extra type information that is used
is various forms. For editors, this information is often used to show type information
when the developer is changing a Python file. For Mypy, it evaluates assignments
and parameters to ensure that the specified types suggested by the developer are
being adhered to.&lt;/p&gt;
&lt;p&gt;That is it. But in that lies its simplicity and usefulness.  There is no switch
in the Python interpreter that says “Thou shalt use type hints!”  Instead, as things
progress, I can add type hints to different classes as I have time. After I have
added those type hints, Mypy will start checking assignments to and within those
classes. And my VSCode editor will have extra type information to provide better
information when I am editing the project files.&lt;/p&gt;
&lt;h3 id="where-does-this-lead"&gt;Where Does This Lead?&lt;a class="headerlink" href="#where-does-this-lead" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over the course of the next few weeks, I am going to try and add in Type Hints
where I can and see how that goes. I have already transformed a handful of data-only
classes into &lt;code&gt;dataclasses&lt;/code&gt;, and that went off without any fuss. I am plodding
along with resolving the parsing issues, but I am “plodding” at a good pace.&lt;/p&gt;
&lt;p&gt;One thing that I have noticed is that it has been over a month since the last
incremental release.  My current plan is that once I hit a solid wall with any
remaining issues, I am going to make sure things are clean and get that next
incremental release out.  I know I still have more scenario tests to add and
test, but the fixes from the last month are decent and need to be published so
that users can receive fixes for those issues.&lt;/p&gt;
&lt;p&gt;I wish that I had the extra bandwidth to be creative and work on the Project
Summarizer tool, but I acknowledge that my head is just not currently in the
right space for that.  But that doesn’t mean I cannot still be productive!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am hoping that things start settling down in my life in the next week or two.
But a lot of that is currently out of my control. I am dealing with it at a good
pace, just a decent number of things to figure out and deal with.  So, to be honest, I am
not sure what I am going to work on this week.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Project Summarizer - Designing and Implementing the Summarizer</title><link href="https://jackdewinter.github.io/2022/02/28/project-summarizer-designing-and-implementing-the-summarizer/" rel="alternate"></link><published>2022-02-28T00:00:00-08:00</published><updated>2022-02-28T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-02-28:/2022/02/28/project-summarizer-designing-and-implementing-the-summarizer/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;, I
talked about the reasoning behind one of the tools I use:
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;.
In this article, I talk more about the reasoning and designs behind the tool, and
the recent improvements I have made to it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes you can use a screwdriver when …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;, I
talked about the reasoning behind one of the tools I use:
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;.
In this article, I talk more about the reasoning and designs behind the tool, and
the recent improvements I have made to it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes you can use a screwdriver when you need a hammer, and sometimes you can
use a hammer when you need a screwdriver.  But more often than not, you really
need to have the right tool for the job you are doing.  If nothing else, you want
to make sure that you know you did things right and did not take any short cuts.&lt;/p&gt;
&lt;p&gt;Once I had identified a set of requirements and could not find
a tool that was meeting those requirements, I knew I needed to do something. The
result of meeting those requirements was the Project Summarizer tool.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pyscan/commit/379b519ffe0652cebbdc9a94d7a84023f925d46f"&gt;15 Feb 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pyscan/commit/f09dac83bdd0dcc2f8895c0f91b68bc04a8d5923"&gt;20 Feb 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="some-quick-design-work"&gt;Some Quick Design Work&lt;a class="headerlink" href="#some-quick-design-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned in my &lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;,
I had a set of requirements that were not being fulfilled by other tools.  Namely,
those requirements were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to summarize the analyses of other tools&lt;/li&gt;
&lt;li&gt;to give me immediate feedback on how my changes affect code metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While these were not very extensive requirements, they were the guiding principles
that drove the initial development of the Project Summarizer tool.&lt;/p&gt;
&lt;p&gt;From the beginning, the way I envisioned this tool as something that was fast and took
information from other tools to summarize.  The first use case was for my own
Python projects, so meeting those requirements for my Python projects was of course my
first goal.  To carry out that goal,
the new tool needed to fit into the scripts that I use to run tests on my projects.
Added as part of the test scripts, I knew that I had two output files at my disposal:
the XML coverage file from &lt;code&gt;coverage.py&lt;/code&gt; and the XML tests file from &lt;code&gt;pytest&lt;/code&gt;.
Using those files, I knew I could provide a summary of any changes in tests or test
status, and I could provide a summary of high-level coverage numbers.&lt;/p&gt;
&lt;h2 id="is-it-enough-to-help-me"&gt;Is It Enough To Help Me?&lt;a class="headerlink" href="#is-it-enough-to-help-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Would that buy me enough benefit to make it worth the cost?  Yes!  At the time,
once I finished making changes, the four questions that I always found myself
asking were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;did I make the right fix?&lt;/li&gt;
&lt;li&gt;how did it affect the tests that I already had in place?&lt;/li&gt;
&lt;li&gt;did the fix require the addition of new tests to cover the new code in the fix?&lt;/li&gt;
&lt;li&gt;did the fix create code that is no longer needed, and is safe to be deleted?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first question is one that I seriously believe can only be answered by thorough
testing, experience with the code, and time.  The best answer that I can usually
hope for to that question is “yes, for now”.  As time goes on, that answer will
either lean towards or away from that “yes”.  It is often hard to tell in isolation.&lt;/p&gt;
&lt;p&gt;However, I felt that the remaining three questions could easily be answered by
data.  How did I know that?  Because I had manual tasks that I performed to answer
those questions.  For the first question, I looked at the PyTest output to see
if anything failed.  If something failed, I look at the PyTest HTML files to see
what tests failed and why.  For the second and third questions, I went right to
the HTML coverage output, and followed a similar procedure.  And I figured that
if I could do it manually, I could automate it.&lt;/p&gt;
&lt;p&gt;If I could automate that process, it would be good enough for me.&lt;/p&gt;
&lt;h2 id="getting-off-the-ground"&gt;Getting Off The Ground&lt;a class="headerlink" href="#getting-off-the-ground" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The initial version of Project Summarizer (originally called PyScan) was quickly
put together, meeting these
requirements head on.  Using the XML files as input, I quickly dug the
required statistics out of those files.  For the test output files, I only needed
to know if a test was added, removed, or changed status.  For the coverage output
files, I only needed to know if the various coverage metrics changed.&lt;/p&gt;
&lt;p&gt;At that point, I realized that I needed to introduce a third requirement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to create a “checkpoint” that could be used to compare current values against.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I looked at the raw summary numbers from the file, the one thing that they were
missing was context.  To be blunt, I found it difficult to remember if I had 128
tests or 129 tests before I made the change to add a new test.  I did not care
most of the time. What I cared about was whether the number of tests increased
by one to match the one test that I added.  This pattern carried over into the
coverage requirements.  I only cared about the change in coverage, not the current
coverage number.&lt;/p&gt;
&lt;p&gt;But to generate a difference value, you need to have a value to compare the current
value against.  That was missing at that point, so I created it.  Thus, the &lt;code&gt;publish&lt;/code&gt;
directory was created and the &lt;code&gt;--publish&lt;/code&gt; flag added to the Project Summarizer.
By publishing the existing summary to the &lt;code&gt;publish&lt;/code&gt; directory, any current change
was able to be measured against that checkpoint.  I did have to establish a habit
of running my &lt;code&gt;clean&lt;/code&gt; test script with the &lt;code&gt;-p&lt;/code&gt; option to publish the results when
I closed out a fix, but that habit was not too bad to form.&lt;/p&gt;
&lt;p&gt;And things were coming together nicely.  I was able to update either source code
or test code, and a summary of those changes was being reported
to the command line.  After a couple of weeks, I invested some time into learning
about the &lt;a href="https://pypi.org/project/columnar"&gt;Columnar&lt;/a&gt; package and used it to better organize the output.
And it was not fancy, but it worked and worked well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Results Summary
--------------------


  CLASS NAME                               TOTAL TESTS  FAILED TESTS  SKIPPED TESTS

  test.nested_three.test_markdown_nested_     133             1 (+1)         8 (-1)
  three_block_ordered
  test.test_markdown_extra                     87 (+7)        2 (+2)         1
  ---                                        ----             -            ---
  TOTALS                                     4528 (+7)        3 (+3)       171 (-1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Taken from some work that I did during the past week, this clearly showed me what
was going on with my changes.
As this was a focused execution of tests, I had the coverage summary disabled.  But
the information provided by the test results was particularly useful.  I had added seven
tests and removed the &lt;code&gt;@pytest.mark.skip&lt;/code&gt; from one test, which is reflected in
the output.  And as I was working on resolving issues, I had five of the tests
taken care of, with three failed tests remaining.  That was exactly the information
that I needed to know I was going in the right direction.&lt;/p&gt;
&lt;h2 id="time-passes-and-the-tool-matures"&gt;Time Passes… And The Tool Matures&lt;a class="headerlink" href="#time-passes-and-the-tool-matures" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continued to use the Project Summarizer tool for about a year before I started
to think about making changes to it.  And even then, it took me having a couple of
issues calling it from another script to get me to realize that I needed to make
a couple of changes.  And those changes were not substantial changes, but simple usability
changes.&lt;/p&gt;
&lt;p&gt;I had one issue when calling Project Summarizer from a script, where it had a
challenging time figuring out a consistent answer to the question “what is the width of
the screen”.  As &lt;a href="https://pypi.org/project/columnar"&gt;Columnar&lt;/a&gt; bases its organization of the columns on the
number of character columns on the display, it raised an interesting question of
what to do if there was no actual terminal.  There are defaults built into Columnar,
but they did not seem to be consistent.  And if I wanted predictable behavior, I
needed consistency.&lt;/p&gt;
&lt;p&gt;Therefore, the &lt;code&gt;--columns&lt;/code&gt; argument was added.  This would override any calculated
values and force the Columnar package to a specific size.  At the same time, I
figured that there were cases where that output was not important.  As such, I
also added a &lt;code&gt;--quiet&lt;/code&gt; argument to suppress the columnized output.&lt;/p&gt;
&lt;p&gt;The second issue that I had was that the reporting and publishing directories were
both hardcoded.  That was easily fixed with the &lt;code&gt;--report-dir&lt;/code&gt; and &lt;code&gt;--publish-dir&lt;/code&gt;
arguments.  While I do not predict changing these directories in my own setup,
it did sound like a solid addition to the tool.&lt;/p&gt;
&lt;h2 id="why-now"&gt;Why Now?&lt;a class="headerlink" href="#why-now" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I guess the question that I left unanswered was: why did I feel that I needed to
work on this now?&lt;/p&gt;
&lt;p&gt;The simple answer was that I found other things to measure.  One of the things that I
currently measure is the number of PyLint warnings in the current project.  But
that information is hard to see, and I would like to have better visibility into
how those values have changed on an ongoing basis.  But when I thought about how
to design that tool to include summary information, I decided instead that it would
be better for the Project Summarizer to do that reporting for me.&lt;/p&gt;
&lt;p&gt;But that meant I needed to update the Project Summarizer to manage more information.
As I started to do that design, it just seemed like the right thing to get those
changes I had in mind out of my head and into the project. The good news is
that even after I got those changes out of the way, it still felt like a good idea
to upgrade the Project Summarizer tool to be extendible.&lt;/p&gt;
&lt;p&gt;In fact, I seriously think it is a great idea!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week, I plan to do more research and design into making the Project Summarizer
tool more extensible.  Hopefully, that means I will have something interesting
to report next week.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="project summarizer"></category></entry><entry><title>Project Summarizer - Why Was It Needed?</title><link href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/" rel="alternate"></link><published>2022-02-21T00:00:00-08:00</published><updated>2022-02-21T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-02-21:/2022/02/21/project-summarizer-why-was-it-needed/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/14/markdown-linter-grinding-away-at-issues/"&gt;last article&lt;/a&gt;, I talked
about taking a break from scenario testing the nested containers in the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project
and just getting back to fixing simple issues.  In this article, I talk about taking more of
a break to upgrade one of the tools I use: Project Summarizer …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/14/markdown-linter-grinding-away-at-issues/"&gt;last article&lt;/a&gt;, I talked
about taking a break from scenario testing the nested containers in the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project
and just getting back to fixing simple issues.  In this article, I talk about taking more of
a break to upgrade one of the tools I use: Project Summarizer&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If a competent developer is talking honestly about their development prowess, the
lion’s share of that prowess is because of the tools they use every day in their
work.  If a developer must stop and think about how to use the tools at their
disposal, they often lose track of what they were thinking about.  After a task-
switch or context-switch like that, it can take up to half an hour to get back
to where they were.&lt;/p&gt;
&lt;p&gt;That is why good tools are important.  The tools that a developer uses must be
able to make the developer more efficient by keeping the developer &lt;em&gt;in the moment&lt;/em&gt;
and solving the problem that they are working on.  Not in trying to figure out how
to bend the tools they use to their needs.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pyscan/commit/379b519ffe0652cebbdc9a94d7a84023f925d46f"&gt;15 Feb 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pyscan/commit/f09dac83bdd0dcc2f8895c0f91b68bc04a8d5923"&gt;20 Feb 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-makes-a-good-tool"&gt;What Makes A Good Tool?&lt;a class="headerlink" href="#what-makes-a-good-tool" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From my experience, there are three types of tools that are useful for developer efficiency:
editors, monitoring, and analysis.  While there may be more tools from someone else’s
point of view, those are the categories that I use.&lt;/p&gt;
&lt;h3 id="editors"&gt;Editors&lt;a class="headerlink" href="#editors" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The choice of an editor for a developer is very much a religious thing.  For all
intents and purposes, this is where the developer will live while they are writing
their programs.  As such, it needs to feel right to them.  If it does not feel right
to them, they will not be as efficient as with a “good” editor.  And to be honest,
the &lt;em&gt;feel&lt;/em&gt; of an editor really does depend on the developer.&lt;/p&gt;
&lt;p&gt;Take the editor &lt;code&gt;vi&lt;/code&gt;.  A standard of Linux systems since the beginning, it is a very
capable editor, but one with a steep learning curve.  However, I have known developers
that can make the keys fly and just make the editor sing with their code changes.  Then there
are the families of editors, such as the &lt;a href="https://www.jetbrains.com/"&gt;JetBrains&lt;/a&gt;
family of editors.  Supporting a staggering twelve development environments, JetBrains
is clearly a leader when it comes to development editors.  In their case, they
leverage a common look and feel, along with well tested development tools, to provide multiple
native editors for twelve distinct languages.  This works well because developers often
use multiple languages, and with a JetBrains editor, you can switch languages without
having to relearn large parts of the editor’s look and feel.&lt;/p&gt;
&lt;p&gt;And that brings me to &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;.  At some point, Microsoft
decided that they wanted to join the fray, and their answer was VSCode.  Immensely popular
with developers across many languages, it uses extensions and plugins to allow developers to customize
their development experience to the way they want it.  For example, on my instance of
VSCode I have the Python extension and the Pylance extension enabled for writing
Python, with &lt;a href="https://sourcery.ai/"&gt;Sourcery&lt;/a&gt; and
&lt;a href="https://www.codiga.io/"&gt;Code Inspector&lt;/a&gt; to supply an instant analysis.  I am currently
narrowing down my favorite Git extension to one of two plugins, but VSCode is okay
with me having both installed at the same time.&lt;/p&gt;
&lt;p&gt;That is why I feel that the true reason VSCode is popular: because it is so configurable.  As I
mentioned at the top of this section, the choice of editors is a religious thing.
If something is not working well for me, I can try new extensions to bring it more
in line with my developer process.  Basically, I can fine-tune the &lt;em&gt;feel&lt;/em&gt; as much
as I want to.  And that is what makes VSCode such a powerful editor for me.  I can
write Bash scripts in it, Python modules in it, or C++ files.  Each language with
the same level of support as the other two.&lt;/p&gt;
&lt;p&gt;The common thread here is that for an editor to be effective for a given developer,
it must make them more efficient and not get in the way.  And that means being
very customizable.&lt;/p&gt;
&lt;h3 id="monitoring"&gt;Monitoring&lt;a class="headerlink" href="#monitoring" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Monitoring tools are often forgotten, but I believe that they are a major component of a developer’s
toolbox.  These tools are anything that allow the developer to examine and monitor
their applications in action once they have been completed.  Whether it is something
as simple as having the Windows Task Manager application open in Summary View mode
(go to &lt;code&gt;Performance&lt;/code&gt;, right click on &lt;code&gt;CPU&lt;/code&gt;, and select &lt;code&gt;Summary View&lt;/code&gt;), or pairs
of applications such as Linux’s &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;watch df -h&lt;/code&gt; commands, these tools help
the developer to decide if their applications are behaving properly.&lt;/p&gt;
&lt;p&gt;And while it might not be a popular choice, I also throw Unit Testing and Scenario
Testing into this part of the toolbox.  Because these tests are actively examining
the output of the application with various inputs, I feel that they are critical
in determining if the application is performing as expected. Especially if these
tests are paired with a solid Continuous Integration workflow, their monitoring
of any external changes in the application are pivotal to the application’s success.&lt;/p&gt;
&lt;p&gt;The common thread for these monitoring tools is that the monitoring tools must present
the developer a solid look at the application, both the environment that it
is executing in and how it is performing itself within that environment.&lt;/p&gt;
&lt;h3 id="analysis-tools"&gt;Analysis Tools&lt;a class="headerlink" href="#analysis-tools" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And finaly, there are the Analysis tools.  These can often be the most controversial
tools to talk about because of what they do: analyze how well the application measures
against a given metric.  These tools can include, but are not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;formatters that automatically change the &lt;em&gt;style&lt;/em&gt; of the code to match a single style&lt;/li&gt;
&lt;li&gt;linters that scan the code for known errors or anti-patterns, and reporting them&lt;/li&gt;
&lt;li&gt;coding assistant that provides analysis within the editor&lt;/li&gt;
&lt;li&gt;summarizers that take a more complicated analysis and break it down into easier to digest bites&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good example of the formatter tool is &lt;a href="https://pypi.org/project/black/"&gt;Black&lt;/a&gt;.
Used on the various projects that I work on; this formatter ensures that every
line of Python is formatted in a single consistent manner.  From their website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Blackened code looks the same regardless of the project you’re reading. Formatting becomes transparent after a while and you can focus on the content instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And from experience, it is particularly good at achieving that goal.   I do not find myself
focusing on the formatting at all, because I know Black will pick that up.&lt;/p&gt;
&lt;p&gt;In that same vein, the &lt;a href="https://www.pylint.org/"&gt;PyLint&lt;/a&gt; linting tool provides a
useful tool for scanning for well-known issues in Python code.  It does not have
a great tag line like Black but provides useful indicators that help me
write better Python code every day.  I can honestly say that I have avoided a
lot of coding issues simply by dealing with most PyLint warnings. Like
my use of Black for formatting, my experience with PyLint allows me to write
Python code without worrying about the &lt;a href="https://www.merriam-webster.com/dictionary/nitty-gritty"&gt;nitty-gritty&lt;/a&gt;
of the language.  I have confidence that PyLint has my back when it comes to
catching a lot of the commonly seen antipatterns.&lt;/p&gt;
&lt;p&gt;Next up are the coding assistant tools.   These are analyzers that are executed within
the scope of the editors and supply near instant feedback.  The reason that these tools are
useful is that instead of waiting until the code is completed, these tools provide
near-immediate feedback on what a developer is writing.  I currently use
&lt;a href="https://www.codiga.io/"&gt;Code Inspector&lt;/a&gt; to run a version of the PyLint checks
as well as &lt;a href="https://sourcery.ai/"&gt;Sourcery.Ai&lt;/a&gt; for more insightful analyses.
Both tools provide different insights while I am writing my Python code,
but both are useful.  And as those insights are being provided as I
code, I can wait for a good breaking point, check out those insights, and determine
how best to respond to them.  It just works.&lt;/p&gt;
&lt;h4 id="why-can-these-analysis-tools-be-controversial"&gt;Why Can These Analysis Tools Be Controversial?&lt;a class="headerlink" href="#why-can-these-analysis-tools-be-controversial" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Just a note here.  This is my opinion, from my experiences.  The experiences
of readers may vary from what I am about to say.  Basically, read these next
paragraphs with an open mind.&lt;/p&gt;
&lt;p&gt;From my experience, software developers have a tough time removing themselves from
the code that they write.  As such, if you run an analysis on “their” code, they
can feel that you are judging them, as they created the code.  And people do not
like being judged.  Therefore, they would rather feel better and not analyze their
code to see how it can be better.&lt;/p&gt;
&lt;p&gt;Now, that is a loaded viewpoint, but I believe it is a fairly accurate one.  Even I
suffered from that tainted viewpoint of “my code is my me” in the early stages of
my career.  But after a while,
I realized that while my code is an expression of myself, so are the tools that I
can use to make that code better.  However, that was not an easy step for
me to take.  It took about a decade for me to make that transition, and there
were many times I moved one step forward only to follow that with two steps
backward.&lt;/p&gt;
&lt;p&gt;Finally, at one point, it was a conversation with a colleague that cemented by
current view for me.  When talking about code analysis tools and code coverage, he
mentioned his skills as a carpenter.  He mentioned that no one would have a
problem if he came to a project with a new hammer or a different tool than
expected if the results justify it.  He then continued on that path
and switched to software projects, where he saw many of his colleagues wince at
his suggestion of a better tool or a separate way of approaching the process.
He thought it was… er… stupid and silly.  But that conversation is the one
that finally got me cemented on my current way of thinking about analysis tools.&lt;/p&gt;
&lt;p&gt;But not everyone is there.  And it takes experience to know to walk that path.&lt;/p&gt;
&lt;h2 id="summarizer-tools"&gt;Summarizer Tools&lt;a class="headerlink" href="#summarizer-tools" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But what about summarizer tools?&lt;/p&gt;
&lt;p&gt;To be blunt, I did not find any.  And it was driving me nuts.  I love having
a short cycle between making changes and seeing their results.  The shorter
the better.&lt;/p&gt;
&lt;p&gt;But when it came to Python tests via PyTest, the closest thing
to a tool I had was to manually open the PyTest results page and look through
there.   The main console display would show me pass/fail easily enough, but
it would not group them according to the file.  That was only available by examining
the HTML output.  A similar pattern existed with Code Coverage.  I would make
a change, test it out, and then have to open the HTML coverage webpage to figure
out if I had every line and path covered.  I had to type those two URLs into
the browser so often that I created a new script with the content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;start report\coverage\index.html
start report\report.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But I knew there had to be a better way of doing things.  I quickly came
to one conclusion. I needed to write my own tool to summarize the analyses
of other tools.  I needed something I could run with every commit and between
commits to give me immediate feedback on how I was doing.&lt;/p&gt;
&lt;p&gt;And thus, Project Summarizer was born.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having laid the groundwork for why I needed Project Summarizer, it was time
for me to design it with good requirements in place.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="project summarizer"></category></entry></feed>