<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack's Digital Workbench</title><link href="https://jackdewinter.github.io/" rel="alternate"></link><link href="https://jackdewinter.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jackdewinter.github.io/</id><updated>2021-12-27T00:00:00-08:00</updated><entry><title>Markdown Linter - Deciding What Is Important</title><link href="https://jackdewinter.github.io/2021/12/27/markdown-linter-deciding-what-is-important/" rel="alternate"></link><published>2021-12-27T00:00:00-08:00</published><updated>2021-12-27T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-12-27:/2021/12/27/markdown-linter-deciding-what-is-important/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/20/markdown-linter-getting-back-to-work/"&gt;last article&lt;/a&gt;, I talked
about getting back to work on testing the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about taking some time to do things right.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes, you just need to take some time and get things done right.  In the last
couple of weeks …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/20/markdown-linter-getting-back-to-work/"&gt;last article&lt;/a&gt;, I talked
about getting back to work on testing the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about taking some time to do things right.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes, you just need to take some time and get things done right.  In the last
couple of weeks, I made major modifications to the whitespace tracking system used
within the PyMarkdown project.  And that brought out some issues.  Some of those
issues were hiding from before, and some of those are new issues.  Both need to be
fixed.&lt;/p&gt;
&lt;h2 id="figuring-out-what-is-importand-to-me"&gt;Figuring Out What Is Importand To Me&lt;a class="headerlink" href="#figuring-out-what-is-importand-to-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, that happened.  After I rewrote the whitespace tracking system, I added a couple
of assert statements to make sure that I did not lose track of those whitespace
characters again.  And they triggered.  I thought I had all combinations put together
and tested, but I missed some.  The question was, how many other ones did I miss?&lt;/p&gt;
&lt;p&gt;As fate would have it, the morning before I was supposed to head over the mountain
to visit my relatives, there was a Winter Weather Advisory for the mountains passes
that I use to get over there.  I talked about going over the mountain with my wife
and her father, and we all agreed that safety and sanity were our number one priorities.
So, I stayed at home.&lt;/p&gt;
&lt;p&gt;Now, I have other stuff I want to get done as well, but I had around three days
of “extra” time available to me.  How did I want to spend it?  I love movies, and
I am watching a couple of movies a day, as well as getting caught up on various
series.  But that only takes up so much time.  And I like to be doing stuff that
has focus.&lt;/p&gt;
&lt;p&gt;Ultimately, I had to figure out what was important for me to accomplish during
the period between Christmas Eve Day and New Years Day.  I do want to work on
getting some other smaller projects ready for publishing, and that is a priority
for me.  Doing some learning is also a priority, as learning helps me professionally
and it also recharges my batteries.  But what about the PyMarkdown project?&lt;/p&gt;
&lt;p&gt;I am firm that I do not want to spend all my time on the PyMarkdown project, but
with the question of “what did I miss?” hanging over my head, I wanted to at
least be able to answer that question.  More importantly, I want to be able to
have a good idea of the scope of the issues, as well as their impact on the project
itself.&lt;/p&gt;
&lt;h2 id="making-that-decision"&gt;Making that Decision&lt;a class="headerlink" href="#making-that-decision" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that in mind, I decided to take a solid three days and to add a new level of
testing to the PyMarkdown project.  It was not going to be an easy three days
or a fun three days, but it was something that I felt I needed to do.  The way
I figured it out in my head, each day was going to be focused on one part of
putting the new scenario tests together.  Day One was dedicated to simply grunting
through the creation of all the test functions with their Markdown. Day Two was
dedicated to the painful process of executing every new scenario test and marking
each failed test as skipped.  Day Three was dedicated to going through the failures
and categorizing those failures into categories.&lt;/p&gt;
&lt;p&gt;And in case anyone asks, yes, there are that many combinations.  To be blunt, the
combinations spiral out of control specifically with three features: continuation
lines, “collapsed” block quotes, and new list items.   While I have yet to add proper
testing for new list items, I believe I have decent coverage of the other two features.&lt;/p&gt;
&lt;p&gt;Because of continuation lines, I not only have to test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but I have to test three related scenarios: without the first &lt;code&gt;&amp;gt;&lt;/code&gt; character, without
the second &lt;code&gt;&amp;gt;&lt;/code&gt; character, and without both &lt;code&gt;&amp;gt;&lt;/code&gt; characters.&lt;/p&gt;
&lt;p&gt;Because of “collapsed” block quotes, I not only have to test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but I have to test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And with new list items, it is more that the code I have in place recognizes
that a new list item can set a different starting point for any elements that
are contained within that list item’s scope.&lt;/p&gt;
&lt;p&gt;But in the end, I got it done.  It was long.  It was arduous.  It was painful.
But I got it done.  Now that I
have all those scenario tests and their failures in place, the next thing that I
need to do is to start going through them and cleaning up any failures.&lt;/p&gt;
&lt;p&gt;And that is what next week is about!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully, unless my brain falls out through my ears in the meantime, a new year
will mean getting a lot of these issues resolved.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Getting Back To Work</title><link href="https://jackdewinter.github.io/2021/12/20/markdown-linter-getting-back-to-work/" rel="alternate"></link><published>2021-12-20T00:00:00-08:00</published><updated>2021-12-20T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-12-20:/2021/12/20/markdown-linter-getting-back-to-work/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/13/improving-quality-just-get-it-done/"&gt;last article&lt;/a&gt;, I talked
about making hard choices and the follow-through that comes with making those choices. In
this article, I talk about getting back to work on testing the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There have been a few things on my mind this week, so I was …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/13/improving-quality-just-get-it-done/"&gt;last article&lt;/a&gt;, I talked
about making hard choices and the follow-through that comes with making those choices. In
this article, I talk about getting back to work on testing the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There have been a few things on my mind this week, so I was not able to get as
much work done as I had hoped to.  But I still made progress on the PyMarkdown
project, which is good.  With a bit of expectation setting and without too much
added fanfare, on to the rest of the article.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/7e8bb3f46788f9a4aaeb4ce43df72d6f57342447"&gt;14 Dec 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/886498cbd781c7753456b8bbe4c4bda0750e9c34"&gt;19 Dec 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="life-versus-side-projects"&gt;Life Versus Side Projects&lt;a class="headerlink" href="#life-versus-side-projects" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There have been a handful of articles out this past week about the Log4J vulnerabilities
and how they are being handled.  On one hand, as a professional software developer
who relies on projects from other people, I want those projects to work properly.
On the other hand, as a software developer who created the PyMarkdown project completely
on his own time, I understand the issues that have been brought up by open-source
maintainers.  As with a lot of things, it is a matter of finding a good balance
between two or more things.&lt;/p&gt;
&lt;p&gt;Every open-source project that I have had the pleasure of using is clear on
where the developer team for that project believes that line is for that project.
With very few exceptions, we are all working on these projects on our own time.
As such, I know that if I must decide between making an improvement on the
project or dealing with life, that life is going to win somewhere above 90% of
the time.  If an issue is especially important to me, I may decide to shuffle things
around to deal with that issue.  But that choice is my choice to make, not anyone
else’s choice.&lt;/p&gt;
&lt;p&gt;This week is a good example of those statements in practice.  As someone who
has &lt;a href="https://jackdewinter.github.io/categories#autism-ref"&gt;Autism Spectrum Disorder&lt;/a&gt;,
sometimes my environment gets to be more than I can handle, causing me to get headaches
that are often debilitating.  I struggled all week to work through a mild headache
that only got worse towards the end of the week.  And while I was able to get some
“easy” work done on the project, my health, my family, and my professional work
had to take priority.  In my mind, there was not even a question about it.  It
was just a fact.&lt;/p&gt;
&lt;p&gt;Taking it slower during the week helped me to have a successful week at work and
to take Friday off and try and deal with getting rid of my headache.  Making sure
I was dealing with that properly made sure that I was not (too) grumpy to my family.
And from a job enjoyment viewpoint, I was able to take part in a handful of very
interesting conversations with my colleagues at work.  My decision to focus my
energy where it needed to be, not on the PyMarkdown project, was the right choice.&lt;/p&gt;
&lt;p&gt;To take this back to the topic of open-source software.  RTFM.  Read The Full
Manual.&lt;sup id="fnref:yes"&gt;&lt;a class="footnote-ref" href="#fn:yes"&gt;1&lt;/a&gt;&lt;/sup&gt;  Most open-source is provided without any strings attached for
commercial use.  If you intend to use it in any kind of commercial or mission
critical software for your company, it is a risk that must be evaluated. If you
decide to accept that risk, it is up to you and your company to mitigate the risk
to your company, not the people maintaining the project.
Most
open-source projects encourage users to share their enhancements of the project
with other users.  This is part of the open-source community.  This is part
of how things work.&lt;/p&gt;
&lt;p&gt;While it was not explicitly stated for open-source, a quote from my mother on topics
like this is very fitting:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t go and take something from your neighbor, only to complain that
when you went to use it, it did not work like you expected it to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you use open-source, be prepared to maintain it if something breaks.  If that
happens, please be considerate and offer any improvements to the project maintainers.
If you do not fix it yourself, do not demand that the maintainers fix something
for you on your schedule.  Remember that it is called the open-source community.&lt;/p&gt;
&lt;p&gt;When it comes down to it, if you would not normally ask people on the team at your
workplace to do something in a given manner, you probably should not ask any
open-source maintainer to do the same thing.&lt;/p&gt;
&lt;h2 id="release-093"&gt;Release 0.9.3&lt;a class="headerlink" href="#release-093" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With my health context from the previous section in place, that context should set the
stage for the work that went on last week.  Having completed the bulk of the
refactoring work, it was time to create a release and get the refactoring
heavy fixes out to users.&lt;/p&gt;
&lt;h3 id="cleaning-up-for-the-release"&gt;Cleaning Up For The Release&lt;a class="headerlink" href="#cleaning-up-for-the-release" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There was only one thing stopping me from releasing the project: my scribbles.
Over the last two weeks,
I kept a set of notes on things that I wanted to check on before
the release.  During a normal week, I probably could have taken care of these
before the weekend, but this last week was not a normal week.  As such, it took
me until Saturday evening to get everything cleaned up.  It did take longer to
clean everything up than I thought it would, but it also felt like it was the
right amount of time to focus on those issues as well.&lt;/p&gt;
&lt;p&gt;What did I clean up?  Most of the things that I cleaned up were simple patterns
that I was not sure that I followed while doing the refactorings.  A good example
of this is my casual usage of &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;.  When I am writing code the
first time, I may decide to write the code as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is a perfectly logical construct to use, and I use it often.  When I
am writing code, I may be concerned about adding some extra information to the
function that will affect either &lt;code&gt;some_condition&lt;/code&gt; or &lt;code&gt;some_value&lt;/code&gt;.  As such, I
often decide to write constructs like the one above to give me flexibility
while implementing the algorithm. But once I have completed development, I
would easily argue that it is not as readable as it could be.  I would argue
that, if possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;some_condition&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is a better pattern to follow.  Instead of being spread out within the function,
the information needed to understand the &lt;code&gt;if&lt;/code&gt; statement is in the immediate
vicinity of the &lt;code&gt;if&lt;/code&gt; statement.  From my point of view, that is good!&lt;/p&gt;
&lt;p&gt;However, that improved pattern comes with a couple of caveats attached to it.  The first
is that the construct works in simple cases, but not in the more complicated cases.
A good example of that is a nested &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_other_condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, it may be possible to use that improved pattern on the second &lt;code&gt;if&lt;/code&gt;
statement, but it depends on the other logic in that function.  The other
dependencies in the function is also the second caveat.  If
the scope of the function is small enough, the possible dependencies on the &lt;code&gt;if&lt;/code&gt;
statement decrease, making it more likely that the improved pattern can be used.
But the larger the function, the more likely it is that the pattern will fail.&lt;/p&gt;
&lt;p&gt;Along with that pattern, there were also some refactorings to optimize how I
was using &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; statements.  Once again, I was not using them improperly,
but I felt I could rewrite them to be more readable and maintainable.  However,
along a similar line of thinking but with &lt;code&gt;if&lt;/code&gt; statements, I had decent room
for improvement there.  Refactoring &lt;code&gt;if&lt;/code&gt; statements into &lt;code&gt;if&lt;/code&gt; assignments where
possible helped, as did moving any variables used in &lt;code&gt;if&lt;/code&gt; constructs closer
to where they were being used.&lt;/p&gt;
&lt;p&gt;And in each case, it was a simple change, but it took time to work through
it.  Look through the source files for patterns that I wanted to improve on.  For
each change, I made the change and executed the full set of scenario tests against
the change before allowing it to remain.  If it did not pass, it was time for some
debugging.  When it did pass, make sure it looked right and stage it in the
project’s Git repository before moving on.&lt;/p&gt;
&lt;h3 id="lather-rinse-and-repeat"&gt;Lather, Rinse, and Repeat&lt;a class="headerlink" href="#lather-rinse-and-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Do that repeatedly.  If I had to guess, I repeated that action about 500 times over the
course of the week.  But it was decent work that I could easily
do when I had any energy and available time during a slow project week.&lt;/p&gt;
&lt;p&gt;And having crossed out all the scribbles on my work sheet, it was around noon
on Saturday when I was able to sign off on Release 0.9.3.&lt;/p&gt;
&lt;h2 id="issue-159-weird-indents"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/159"&gt;Issue 159&lt;/a&gt; – Weird Indents&lt;a class="headerlink" href="#issue-159-weird-indents" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Feeling better on Saturday evening then I had all week, I decided to start looking
at Issue 159.  At first glance it might not seem correct, but the following Markdown
document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;should parse into a level-one ordered list with two items and a level-two ordered
list nested within the first item of the level-one list.  Because the &lt;code&gt;1&lt;/code&gt; on the
third line occurs before the &lt;code&gt;I&lt;/code&gt; on the first line, the third line is interpreted
as a new list item for the level-one list instead of the level-two list.&lt;/p&gt;
&lt;p&gt;The problem was that this document was being parsed as a &lt;code&gt;1-2-2&lt;/code&gt; instead of a &lt;code&gt;1-2-1&lt;/code&gt;.
It took a bit of debugging to figure this one out, but I was able to resolve it within
a couple of hours.  When checking for possible parent lists for line 3, the code
was using the &lt;code&gt;ident_level&lt;/code&gt; field of the list tokens to determine which list was
the parent list.  However, because of the long number for the list item on
line 3, the &lt;code&gt;indent_level&lt;/code&gt; for the new token on line 3 was 7, greater than the
&lt;code&gt;indent_level&lt;/code&gt; of 6 for the list token from line 2.&lt;/p&gt;
&lt;p&gt;To properly figure out which token was the parent list token, I did my usual scribbling
on paper and came up with some very simple cases.  At that point, it became
obvious to me what the solution was.  For the first line’s list token, the effective
range for list item starts is between column 1 and column 3, creating an &lt;code&gt;indent_level&lt;/code&gt;
value of 3.  The second line’s list token range is between column 4 and column 6,
creating an &lt;code&gt;indent_level&lt;/code&gt; of 6.  So, while the right side of the start for line 3’s
list token is close to the range for line 2, the left side of the start for line 3
is firmly within the range for line 1.&lt;/p&gt;
&lt;p&gt;Once I changed the algorithms to check the start of the list item against the ranges
of the lists, the problem was solved!&lt;/p&gt;
&lt;h2 id="nested-lists"&gt;Nested Lists&lt;a class="headerlink" href="#nested-lists" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting on Sunday morning, I was able to make progress on setting up the
scenario tests based on the various combinations of containers.  While I did mark
this down in my Issues List as &lt;code&gt;Nested Lists&lt;/code&gt;, I understood that to mean not only
nested list elements, but any kind of nested container elements.  Confident that
the two-level nesting combinations were all tested by the specification itself,
I decided to start with the three-level nesting combinations.&lt;/p&gt;
&lt;p&gt;It took a while, but by the late afternoon I had all scenario tests coded and
the preliminary results for those tests.  There were a small handful of tests
that failed outright, mostly due to transitions between one container and the
other container and back again.  I quickly took care of those and fixed them
so that they would not assert and fail.  With those out of the way, the remaining
failures were both about whitespace.&lt;/p&gt;
&lt;p&gt;In both cases, the scenario tests pass their parsing requirements and their
HTML generation requirements but fail on putting the document back together
again.  In each case, it is because the calculated whitespace is not correct,
leading to regenerated Markdown code that is misaligned.  While it is important
to get these issues taken care of, it is just a matter of finding the right
whitespace to add at the right time.&lt;/p&gt;
&lt;p&gt;But, with Sunday evening approaching, I had to put of further exploration of
those failures until later in the week.  This article was only partially written,
and I knew it would take up the rest of the night getting it close to the point
where I could finish proofreading it on Monday night.  But I will be working
towards taking care of that soon.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know that this may seem like a trivial measure of where the project is at
the moment, but I am pleased that the count of serious issues is in the
low single digits.  I am also pleased that I am finding some issues with the
nested containers.  Well, I am not pleased that I am finding them, but I am
pleased that I am finding them before they are being reported.  And I am
quite sure that I can fix them relatively quickly.&lt;/p&gt;
&lt;p&gt;Another side effect of testing the three-level nested containers is that I
am fairly confident that it will have a positive effect on the four-level
nested container testing as well.  From what I was able to discern from the
whitespace failures, it looks like the whitespace that came before certain
container elements is not being properly added to the whitespace for more
nested containers.  That means if I properly address those issues now, it should
cut down on similar issues with extra nesting.  At least that is my hope.&lt;/p&gt;
&lt;p&gt;As always, keeping a positive attitude, and working towards getting the
remaining items on the Issues List resolved.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since I started working on Nested Lists, it is a good bet that I will probably
be working on that this week.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:yes"&gt;
&lt;p&gt;Yes, I know that the &lt;code&gt;F&lt;/code&gt; in RTFM stands for something else. &lt;a class="footnote-backref" href="#fnref:yes" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Improving Quality - Just Get It Done</title><link href="https://jackdewinter.github.io/2021/12/13/improving-quality-just-get-it-done/" rel="alternate"></link><published>2021-12-13T00:00:00-08:00</published><updated>2021-12-13T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-12-13:/2021/12/13/improving-quality-just-get-it-done/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/"&gt;last article&lt;/a&gt;, I talked
about making hard choices when it comes to projects.  In this article, I talk
about the follow-through with the choice that I needed to make last week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having decided that I needed to replace the whitespace processing in the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
parser, the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/"&gt;last article&lt;/a&gt;, I talked
about making hard choices when it comes to projects.  In this article, I talk
about the follow-through with the choice that I needed to make last week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having decided that I needed to replace the whitespace processing in the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
parser, the follow through was brutal.  As of last week’s article, I had burnt
through all except twenty-five scenario tests.  Experience led me to believe
that those remaining tests were going to be the hard ones.  Either fortunately
or unfortunately for me, depending on one’s viewpoint, my estimates on
the PyMarkdown project and work to be done have been spot on lately.  It was
going to be on hell of a week!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.
For a full record of the changes talked about in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/35f869d34dfa65c12daa9e1f6c8890d4d45eead5"&gt;05 Dec 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/fd9707d86520688c39e175e1433b74807bacd8c2"&gt;12 Dec 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="setting-perspective"&gt;Setting Perspective&lt;a class="headerlink" href="#setting-perspective" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are often diverse ways of saying the same thing. The gist of what I
remember from one lecture that I attended is that the lecturer, someone smarter
than me by far, was talking about how 80% of coding is just following established
patterns.  He further went on to say that the remaining 20% is a mixed bag of tasks
that will either prove you to be a competent developer or force you to hurl your
monitor out the window in frustration.  For sure, that might seem like
hyperbole to most. But if you ask most software
developers to be honest about whether they have thought about throwing things around
the office, including their computer or monitor, most will admit that they have had
those thoughts.&lt;/p&gt;
&lt;p&gt;That frustration is just a natural thing.  Software does exactly what you it is
told to do, no more and no less.  It then follows that if a developer has an incomplete
picture of what they want to do, then the result is a program that is incomplete.
And while the high-level picture of what to be done is always clear, that picture
gets grainier as the software developer zooms in to individual sections of that
picture.  As a result, the gap between “the ideal” and “the reality” are what are
known as bugs.  The real question that faces most developers is whether they can
find all the relevant bugs before the users of their programs do.&lt;/p&gt;
&lt;p&gt;For the last week, I had been in a forest where there were tons of those bugs
lurking around every corner.  While it took a bit of work to get through them,
I had managed to vanquish most of the bugs about whitespaces.  But the reality
of software development is that the easy to find bugs are almost always the first
to go, leaving the trickier bugs to diagnose and fix.  That is where I started
this week.  With tricky bugs.&lt;/p&gt;
&lt;h2 id="dealing-with-tabs"&gt;Dealing With Tabs&lt;a class="headerlink" href="#dealing-with-tabs" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I talked about in the
&lt;a href="https://jackdewinter.github.io/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/#the-bad"&gt;last article&lt;/a&gt;,
tabs in Markdown are treated
as tab stops and not just blindly replaced with four space characters.  With eight
unresolved tests that dealt with tab characters, this was not something that I could
delay addressing for much longer.  There was no other choice other than trying to
tackle this issue head on.&lt;/p&gt;
&lt;p&gt;Dear readers:  I know you might think I am not being truthful about taking a good
day and a half to think about the impact of tabs on the parser. But I did. In my
usual fashion, I scribbled things out on paper and talked to myself, working through
the various issues that could arise with different solutions.  There were a half-dozen
“half-solutions” that I produced, but each was quickly discarded.  To be honest,
calling them half-solutions is probably generous.  In each case, I was trying
to deal with the effects of having tabs without dealing with the actual
tab characters themselves.&lt;/p&gt;
&lt;p&gt;That did not work very well for me.  Those solutions did take care of resolving
the perceived size of each tab character, but it introduced more problems.  Specifically,
they often included passing extra lengths around and made some calculations a
lot more difficult in the process.  On top of that, even with helper functions,
I found that I was coding variations of how to use those helper functions in multiple
places. It was just messy and not very maintainable.&lt;/p&gt;
&lt;p&gt;So, after deciding to use all those scribbles as kindling in our fireplace, I decided
to go for what I consider to be the nuclear option.  Instead of creating a maintenance
nightmare in the rest of the code, I decided to add this code to the Container Block
Processor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;line_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detabify_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;position_marker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PositionMarker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding a new &lt;code&gt;detabify_string&lt;/code&gt; function to the &lt;code&gt;ParserHelper&lt;/code&gt; class, I called it
from the start of the Container Block Processor and its handling of each line.
I used it to replace any tabs characters in the string in
that one place.  I used almost identical code once in the Markdown generator to
process the test data before the Markdown comparison there.&lt;/p&gt;
&lt;p&gt;And except for some altered test data that needed to be addressed, I was done.
There was no “including tab counts” that needed to be altered and passed around.
There was no need to know if I had preprocessed a given string or if I still had
to do that.  There was no weird &lt;code&gt;if&lt;/code&gt; statements to deal with tab characters.
Just one &lt;code&gt;if&lt;/code&gt; statement in the parser code, and one &lt;code&gt;if&lt;/code&gt; statement in the test
code and it was done.&lt;/p&gt;
&lt;h3 id="why-the-long-journey"&gt;Why The Long Journey?&lt;a class="headerlink" href="#why-the-long-journey" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So why did it take me so long to come to that conclusion?  Data integrity. At
the start of this project, I wanted to ensure that the integrity of the parser
was as high as possible at every stage.  I had it in my head that translating
the tab characters in any way was violating that rule. So, I tried to take the
long way around and deal with the effect instead of the character itself.&lt;/p&gt;
&lt;p&gt;And I guess in a certain way, it is changing things.  But the question that I ended
up asking myself was whether that violation was relevant to the tokenizer.  I could
easily argue that from the viewpoint of parsing the Markdown as a HTML parser, it
was crossing the line.  That was crystal clear.  But from the point of view of a
tokenizer, I ended up wavering on that viewpoint.  The tokens are just truthful
representations of what was parsed.  As the specification is clear that tokens are
to be interpreted as the corresponding number of space characters, there was a
new question.  That question was whether an uninterpreted or interpreted
representation of that tab character was the best choice.&lt;/p&gt;
&lt;p&gt;But it was not an easy journey or choice.  And as with all hard choices, it just
took a while for me to work through things and make sure that it was the right
choice.&lt;/p&gt;
&lt;h2 id="dialing-in-the-remaining-tests"&gt;Dialing In The Remaining Tests&lt;a class="headerlink" href="#dialing-in-the-remaining-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the tab tests out of the way, I needed to apply my normal work ethic
to get movement on the remaining issues.  But with a firm guideline on
how to approach the whitespace, it only took a couple of days before I had
the remaining scenario tests passing, with caveats.  I just focused on making
sure that the right whitespace was being applied to the properly scoped token,
and that helped a lot.  It was still challenging work getting everything assigned
properly, but a simpler set of rules made decisions easy to make.&lt;/p&gt;
&lt;p&gt;What were the caveats?  There are still a couple of scenario tests that
I disabled instead of getting them to work, and they fall into two groups. The
first group is a set of tests that have three or more levels of nesting.  While
there are some tests that “just work”, I want to make sure to spend some time
and effort to properly scope and focus on each combination and make sure that
it works.  The second group are scenario tests involving changing indentation,
usually from the Block Quote characters.  Once again, there are some simple
combinations, but I feel that the right thing to do is to specifically focus
on those combinations in their own scoped issues.&lt;/p&gt;
&lt;p&gt;And to be clear, everything still parses properly.  It is just the calculation
of the whitespace lengths that is in question.  And I want to get those right,
not just kind of right.  I passionately believe that it is a good enough reason to
handle them separately.&lt;/p&gt;
&lt;h2 id="cleaning-up"&gt;Cleaning Up&lt;a class="headerlink" href="#cleaning-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the remaining tests either passing or skipped, it was time to start cleaning
up after the mess of making those changes.  There were a handful of places where
I had forgot to change
from my “in the moment” variable names (like &lt;code&gt;abc&lt;/code&gt;, &lt;code&gt;foo&lt;/code&gt;, and &lt;code&gt;gg&lt;/code&gt;) to variable
names that describe their function.  Using &lt;a href="https://sourcery.ai"&gt;Sourcery&lt;/a&gt;, I
was able to calculate a relative health of each function, and I kept on refactoring
until that measurement was at least 40 for every function in the project.
Using &lt;a href="https://www.code-inspector.com"&gt;Code Inspector&lt;/a&gt;, I was able to quickly
figure out what PyLint issues needed to be addressed.&lt;/p&gt;
&lt;p&gt;To be honest, this part of the process was just relaxing.  Each of the refactoring
steps I took were easily tested, thanks to a complete set of passing scenario tests.
If I made a change and one of the tests failed, I just rolled back the last change
and tried again.  While it did take three or four hours to complete, there was
very almost no stress associated with those changes.  It was a pleasant change for
working over the weekend.&lt;/p&gt;
&lt;h2 id="watching-the-issues-fall"&gt;Watching The Issues Fall&lt;a class="headerlink" href="#watching-the-issues-fall" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finishing the prior work just before noon, I took a rather leisurely lunch and
got some of my energy back.  It was a hard slog getting everything finished and
tidied up, but it was nice to get there.&lt;/p&gt;
&lt;p&gt;The issues that I could choose to work on had as much potential to be easy issues
as they had to be difficult issues.  I knew that the first one,
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/99"&gt;Issue 99&lt;/a&gt; was going to be
easy as this work had all kicked off because of the problems I had addressing that
issue.  But what about the others?&lt;/p&gt;
&lt;p&gt;As I made my way through the other issues registered around the same time as Issue 99,
only one issue out of seven logged was not at once resolved.  I was fine leaving
those issues for another week.  It just felt good that the work that I had undertaken
to correct those other issues had cleaned up six other issues.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know it may sound funny to some people, but I was sure that the heavy sigh I
made when I finished working on the tests could be heard throughout my house.  It
was just a good feeling to simplify something that was complex and difficult
to maintain. It was even better to see multiple tests resolving themselves because
of me refactoring the whitespace from the containers.&lt;/p&gt;
&lt;p&gt;But I know that I need to focus more on cleaning up the remaining issues in both
the GitHub issues list and my own Issues List.  So hopefully I will be able to get
both of those cleaned up.  I know I am making timely progress though, and that gives
me hope that I can clean things up nicely within a couple of weeks.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having finished the changes to address whitespace issues, I am eager to get back
to a mixture of refactoring code and fixing issues.  Not sure what mix of those
two is going to happen yet, but I am fairly sure I want a good balance of both.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="extract method"></category></entry><entry><title>Improving Quality - Sometimes, There Is No Easy Way</title><link href="https://jackdewinter.github.io/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/" rel="alternate"></link><published>2021-12-06T00:00:00-08:00</published><updated>2021-12-06T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-12-06:/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/29/markdown-linter-the-bug-that-almost-knocked-me-down/"&gt;last article&lt;/a&gt;, I talked
about my progress in reducing the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project issue count, including the
bug that almost knocked me down for the count!  In this article, I talk about
making hard choices when it comes to projects.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having fixed some issues in the prior …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/29/markdown-linter-the-bug-that-almost-knocked-me-down/"&gt;last article&lt;/a&gt;, I talked
about my progress in reducing the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project issue count, including the
bug that almost knocked me down for the count!  In this article, I talk about
making hard choices when it comes to projects.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having fixed some issues in the prior week, I decided to tackle another issue
from the outstanding issues list.  What I thought at first was a minor snag
turned out to be a major issue.  More than a major issue.  More of a story.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.&lt;/p&gt;
&lt;h2 id="the-good"&gt;The Good&lt;a class="headerlink" href="#the-good" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After taking a well-deserved night off, I started to work on one of the logged
issues, &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/99"&gt;Issue 99&lt;/a&gt;. There
was no specific reason that I picked this issue, except for a feeling that it was
a good starting issue for the week.  It looked like a simple issue.  When a HTML
Block element was encountered in a List element, the List element was being closed
prematurely.&lt;/p&gt;
&lt;p&gt;Digging into the debug for the failing tests, I was able to quickly spot what
the issue was, and subsequently fixed it.  I manually verified the tokens, and
everything looked good with each token.  Then I did a mental conversion from tokens
into HTML, and everything was also good with the conversion.  The only things left
were to verify the translation back into Markdown and to verify that the other consistency
checks were passing.&lt;/p&gt;
&lt;p&gt;Looking at the code in the &lt;code&gt;transform_to_markdown.py&lt;/code&gt; module, I tried to
add some simple code to adapt to the new condition, but it did not work on
that first try.  Come to think of it, it did not work on my second try either.
Having had a long day, I chalked that experience up to tiredness,
deciding to try again the next day.&lt;/p&gt;
&lt;h2 id="the-bad"&gt;The Bad&lt;a class="headerlink" href="#the-bad" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before sitting down at my computer for work that next evening, I made sure I had
a healthy meal beforehand, I was all nice and showered, and that I was nice and
relaxed for the most part.  If nothing else, I wanted to start that evening’s
work in a good mood to address the issue from the night before.  I mean…
how hard could it be?&lt;/p&gt;
&lt;p&gt;After three hours of trying to get it working and failing, I had my answer.
It was a tough problem to solve.  And it had to do a lot with history and
requirements.&lt;/p&gt;
&lt;p&gt;Because of the way that Markdown is processed, there are only two real solutions
to deal with containers and their impact on a given line.  The first solution
is to deal with containers after the leaf elements and inline elements have
been dealt with.  This is a lot less work in the end, but the setting up of
each element must be precise.  In addition to that, tabs within a Markdown
document are a problem.&lt;/p&gt;
&lt;p&gt;For reference purposes, Markdown parsers interpret tabs as tab stops of 4.  Tab
stops means that the tab-to-space conversion ratio depends on where in the line
the tab is.  The value 4 signifies that at best, a single tab character can be
interpreted as 4 space characters. The way to think about it is this. If the
index in the line is equal to 0 with a modulo of 4&lt;sup id="fnref:modulo"&gt;&lt;a class="footnote-ref" href="#fn:modulo"&gt;1&lt;/a&gt;&lt;/sup&gt;, 4 spaces are added.
If the index modulo 4 is 1, then 3 spaces are added.  Similarly, if at index 2,
then 2 spaces are added, and if at 3, then 1 space is added. This allows things
to be aligned on tab stops that occur in the middle of lines.  But these calculations
assume that you know that index on the line before calculating its impact.  As
any container indents have not been applied, that is not possible.&lt;/p&gt;
&lt;p&gt;The other option is to handle the container elements and the other elements on
a line-by-line basis.  Because of the above issues with tab stops, which is the
way I decided to do things.  I knew that it was going to be a bit more work to
keep track of both things at the same time.  I needed to juggle
distinct parts of the same line at the same time, ensuring that I knew what
the effects of the container elements were before parsing the line.  But to
be blunt, it evolved in a bad way.&lt;/p&gt;
&lt;p&gt;As I sat there that night, looking at the source code, I could not believe how
convoluted it had become.  There were more than three distinct types of merge
functions, each for a specific case.  And because I developed those functions
as I progressed, these were organic, with exceptions to rules throughout those
functions. It was just a mess to try and figure out.  &lt;/p&gt;
&lt;p&gt;I knew I needed to figure it out to move on, so I decided to take the next
evening to focus on understanding the algorithms.  Because I needed to ensure
that I verified any recent changes before going on, I really needed to understand
those functions and how to properly change them for the new data.  In my mind,
it was necessary.&lt;/p&gt;
&lt;h2 id="the-ugly"&gt;The Ugly&lt;a class="headerlink" href="#the-ugly" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While my optimism was a bit more deflated than the night before, I gave myself
a similar starting position the next night.  But even with that good starting
point, I spent the next two hours figuring things out and hurling at least a half
dozen “WTF?” insults at my monitor before I was done.  I had scribbles down over
a good five sheets of paper strewn all over my desk.  And those were just the ones
that I did not scribble on top of and then threw out because I got it wrong.  I
stopped counting those sheets after the first ten.&lt;/p&gt;
&lt;p&gt;It had taken me two hours, but I had a good concept of what was going on.  I just
did not have any ideas on how to change the code to do what I needed it to do
for the issue that I just fixed.  Frankly, I was amazed that what I had figured
out worked.  I did not intentionally mean for the code to get like that, but
the complex tangle of code was captured on those five sheets of paper.  And
they did not look neat and tidy either.&lt;/p&gt;
&lt;p&gt;It was on a bit of a whim that I started sketching out a similar algorithm
for managing the container text after the other elements had been processed.  This
was more in line with my design decision to keep container processing separate
from the leaf processing, so that was one good sign.  The other good sign was
that within fifteen minutes, I had a solid design for the base algorithm.  Twenty
minutes later, I had a list of the changes I would need to make to the whitespace
in the tokens to present the needed information required by the algorithm.&lt;/p&gt;
&lt;p&gt;I knew that the new sketch would not be that easy to implement, as things rarely
are as easy as they seem.  But even with a bit of extra work, the new sketch
design was simple to understand, and the changes to the tokens to support those
changes were also easy to understand.  There was only the one algorithm, with
a couple of small algorithms on the side to calculate lists for the main algorithm.
And I did not take care of translating tabs into spaces either.  That was something
else I would have to do.&lt;/p&gt;
&lt;p&gt;That is where I got to the hard part.&lt;/p&gt;
&lt;h2 id="the-hard"&gt;The Hard&lt;a class="headerlink" href="#the-hard" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was now the start of Friday evening, and I had an exceedingly difficult choice to
make.  If I stuck with the current algorithm, it would take me at least
another day or two to make my current change.  I did not have
any good estimate to base a guess on due to state of the algorithms.  I had a
good feeling that if I had to make similar changes, as I expected to have to do
for at least half of the remaining issues, I would have to take a similar
length of time to make those changes.&lt;/p&gt;
&lt;p&gt;On the other hand, I could change that algorithm to the proposed design, but there were
no guarantees that
it would fix things.  At the very least, the new algorithm would be more understandable,
and thus more maintainable.  But that just meant that the focus for addressing
issues like these would focus more on making sure that the right whitespace is
encapsulated in the tokens for the container algorithm to use.  And I would still
have to find a way to deal with tab characters.&lt;/p&gt;
&lt;p&gt;That is when I realized: there just was no straightforward way to deal with this problem.
Regardless of which option I chose, there would be a decent amount of work.  So,
any short-term considerations were out, as they were even.  I had to start
thinking about the long term, and how my choice would
reflect on the future of the project.&lt;/p&gt;
&lt;p&gt;Working things out in my head,
I knew that I had made my decision when I started to try and convince myself that
the current solution was good enough.  I was not doing my usual process of evaluating
multiple choices on their merit, I was arguing to myself that what I had met some
minimum bar that was hard to define.  To me, that meant that I had a clear winner
in the other choice, I was just worried about the cost.&lt;/p&gt;
&lt;p&gt;That is when I had an objective talk with myself about the merit of the new
approach versus the old approach.  If I had a tough time thinking about how to
modify the old algorithm now, how much would it cost to change it in another week
or two?  Would I have
to go through the same process again?  The more I asked myself questions like
that, the more the cost of the new algorithm did not seem to be that expensive.&lt;/p&gt;
&lt;p&gt;The more I thought about it, it was a hard decision, but I needed to rewrite that
part of the code.  A simpler algorithm costing more now would easily safe effort
in the future.  It sucked, but I knew I needed to make the hard decision.&lt;/p&gt;
&lt;p&gt;I was going to rewrite the project’s Markdown generator.&lt;/p&gt;
&lt;h2 id="the-work"&gt;The Work&lt;a class="headerlink" href="#the-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With everyone else out of the house for most of the day, I had a rare Saturday to
myself.  Because I expected to throw even more “WTF?” comments at my monitor,
it was a good thing I was alone in the house.&lt;/p&gt;
&lt;p&gt;The first thing that I noticed is that while I needed to rewrite the Markdown
generator, I did not have to rewrite most of it.  With one or two exceptions, the
handling of the non-container tokens was good.  As for those small exceptions, I
was sure that only the whitespace handling would need to change, and that I could
manage those changes.&lt;/p&gt;
&lt;p&gt;With that knowledge in hand, I turned off all existing checks, picked a simple
scenario test with multiple lines and no container elements, and started to work
on it.  I was not trying to solve the entire problem, just get
a good head start on rewriting the code.&lt;/p&gt;
&lt;p&gt;It was not too long before I had a promising idea of what I needed to do, and I committed
that code to my local repository.  Then I enabled the Markdown generator check
for only those scenario tests that did not container any container elements.
Working through those issues, I then added checking for scenario tests including
only Block Quote elements and worked through those issues.  Finally, I repeated
that process with List elements, to get to where I am now.&lt;/p&gt;
&lt;h2 id="looking-ahead"&gt;Looking Ahead&lt;a class="headerlink" href="#looking-ahead" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As of the writing of this article, I have 25 scenario tests that I need to get
working without enabling the remaining tests with both Block Quote elements and
List elements.  Turning those on, the total jumped to 53 scenario tests, which
is still a manageable number.  Some of those tests are going to be easy to resolve,
and there are other tests that are going to tax me.  But having the simplified design
means that it is easy to defend and that change makes it worthwhile&lt;/p&gt;
&lt;p&gt;It is worthwhile because I can easily maintain a picture in my head about what
needs to happen.  Every single whitespace character needs to be preserved in a
token somewhere.  Most of the time, which means that I need to ensure that the
whitespace emitted in container tokens is correct.  That is simply a fact because
the new algorithm is simple, and I mean to keep it that way.  Sure, it is shifting
the effort to the tokens, but I feel good about that.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During the middle of the week, I was at a bit of a low point, mentally speaking.
While I realize
that I am not perfect, I do hope that I make good development choices that do not
result in too much wasted effort.  I do acknowledge that there are parts of the PyMarkdown
code base that look busy, but usually I keep things grouped by
functionality.  But in those cases, there are a small group of functions that
provide support for each other and their common responsibility.  In each of those
cases, I can usually pick up a function and understand its purpose within
five minutes, and what to change in fifteen minutes.&lt;/p&gt;
&lt;p&gt;Not being able to do that is exactly what I had to come to terms with during
this week.  I had spent time maintaining code that became overly complex and spun
out of control.  It was enough out of control, that I did not think that there
was an option other than to rewrite that functionality using a different algorithm.
That hurt.&lt;/p&gt;
&lt;p&gt;But as I author this article, I think my viewpoint has changed.  With around fifty
scenario tests left to convert and get working, I find myself having a renewed
sense of optimism.  The new code is cleaner and more direct on what it is trying
to accomplish.  The new code is independent of the processing for the other
Markdown elements, so it just focuses on what it needs to do.  And more importantly
to me, the new code is easily more maintainable.&lt;/p&gt;
&lt;p&gt;Did I throw away a Saturday on getting the new code to work? Yes.
However, if I am honest, this new code just feels better.  It is a bit more work
right now to get back to a “stopping point” where I can start fixing issues
again.  But I am more confident that any later changes can be incorporated into
the generation of the tokens themselves, not requiring any changes to the new
functions for handling container elements.&lt;/p&gt;
&lt;p&gt;And when it all comes down to it, that is what is important.  I sometimes forget
that every line of code that I write is an experiment.  I make good guesses
as to what I need, so my coding accuracy is decent, but it is still just a guess.
In this case, an experiment failed, and I needed to try and find a better way to
accomplish the same task.&lt;/p&gt;
&lt;p&gt;So, yes. it sucks that I had to do a rewrite. But honestly, sometimes, there
is no uncomplicated way, just difficult paths to follow.  And I am okay with that… now.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since I have started on the first part of this changeover, it makes sense
that I keep on going until it is finished.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:modulo"&gt;
&lt;p&gt;This is a fancy way of saying “what is the remainder after dividing by the other number?” &lt;a class="footnote-backref" href="#fnref:modulo" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="extract method"></category></entry><entry><title>Markdown Linter - The Bug That Almost Knocked Me Down</title><link href="https://jackdewinter.github.io/2021/11/29/markdown-linter-the-bug-that-almost-knocked-me-down/" rel="alternate"></link><published>2021-11-29T00:00:00-08:00</published><updated>2021-11-29T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-11-29:/2021/11/29/markdown-linter-the-bug-that-almost-knocked-me-down/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/22/improving-quality-finding-better-tooling-extact-method/"&gt;last article&lt;/a&gt;, I talked
about my progress in refactoring and my experience with the three added tools. In
this article, I talk about the work I did this week, including the bug that almost
knocked me down for the count!&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What a long two weeks of …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/22/improving-quality-finding-better-tooling-extact-method/"&gt;last article&lt;/a&gt;, I talked
about my progress in refactoring and my experience with the three added tools. In
this article, I talk about the work I did this week, including the bug that almost
knocked me down for the count!&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What a long two weeks of work I just had on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project!  I took those two weeks and
invested them wisely in doing some major refactoring on the project.  The project itself was
in decent shape, but I had let some of the functions grow to large and with too many
responsibilities.  For my own sanity and for the project’s own good, I needed to
take some time and get it closer to what I would consider to be a good, healthy
code base.&lt;/p&gt;
&lt;p&gt;But that did not mean the work was over.  Not by far.  There were still a couple
of cleanup items that I needed to attend to, plus a list of issues that I found
while doing the refactoring. And while it was nice to take a bit of a break, I
needed to get back to focusing on getting things progressing forward to a non-beta
release soon.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/e842435752235675cfca5ed17e62122608042e85"&gt;22 Nov 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5ab751db859c92bd25f3edcc253d71b0b889659f"&gt;28 Nov 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="issue-151-doing-some-cleanup"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/151"&gt;Issue 151&lt;/a&gt; - Doing Some Cleanup&lt;a class="headerlink" href="#issue-151-doing-some-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It will probably not surprise any long-time readers that I decided to take
a small amount of additional time to tidy up some loose ends left after the
work I did in the last two weeks.  Having touched a substantial part of the files
in the project’s core, I wanted
to at least go over the code once and look for anything that I could easily
simplify to make it more maintainable.&lt;/p&gt;
&lt;p&gt;There were no tremendous changes, just a lot of little ones.  Things like simplifying:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;coalesced_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;coalesced_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;into:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;coalesced_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and moving small classes such as the &lt;code&gt;ContainerIndices&lt;/code&gt; class into their own modules.
I also double checked the use of return codes from functions to make sure that
they were still being used and removed them if they were not being used.&lt;/p&gt;
&lt;p&gt;Other than that, there were cases where I took multiple variable initializations,
such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;processed_parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and condensed them down into:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;processed_parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even with &lt;a href="https://pypi.org/project/black/"&gt;Black&lt;/a&gt; reformatting such assignments
across multiple lines, I have gradually been moving towards grouping all my
variable initializations together in that manner. I
am not sure if every Python developer feels that it is a good style, but I do.
For me, it clearly states that these variables are being set together and eases
my ability to read the functions.  Basically, it works for me.&lt;/p&gt;
&lt;p&gt;But after an evening of going through the source code and cleaning it up,
I knew I had to start making progress on the other issues.&lt;/p&gt;
&lt;h2 id="issue-155-refactoring-common-structures"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/155"&gt;Issue 155&lt;/a&gt; - Refactoring Common Structures&lt;a class="headerlink" href="#issue-155-refactoring-common-structures" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the code base over the last few weeks, I really wanted to be able to
harmonize a few of the
variables that get passed repeatedly into functions.  While there are more examples
of that in the code base than I would like, the ones that I picked to work on for
this ticket were the &lt;code&gt;this_bq_count&lt;/code&gt; and &lt;code&gt;stack_bq_count&lt;/code&gt; variables.  These are
just one example of variable tuples where two or more variables are usually seen
together.&lt;/p&gt;
&lt;p&gt;While not used outside of the Container Block Processor, these two variables are
heavily used inside of the Container Block Processor to capture the current count of
block quotes.  As their names suggest, the &lt;code&gt;this_bq_count&lt;/code&gt; variable tracks the
“observed” count of block quote characters and the &lt;code&gt;stack_bq_count&lt;/code&gt; variable tracks
the current number of block quote tokens on the stack.  As a Block Quote element
can start and stop on any line, these variables are passed together to ensure
the current state is well known.&lt;/p&gt;
&lt;p&gt;At least they were passed together until this work was completed.  When I looked
at the source code for the Container Block Processor, the Block Quote Processor,
and the List Block Processor, there were only five places where these values were
not passed together.  As such, it made sense to add a new class, BlockQuoteData,
and encapsulate those values inside an instance of that class.  It was a bit of
work to move the code to use the new variables, but it did make the code cleaner.
And that means lower maintenance, so that was good!&lt;/p&gt;
&lt;h2 id="issue-157-upgrading-test-scripts"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/157"&gt;Issue 157&lt;/a&gt; - Upgrading Test Scripts&lt;a class="headerlink" href="#issue-157-upgrading-test-scripts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From experience, depending on how software developers work, they typically either
love typing things out manually on the command line or they love to use scripts.
With my propensity for mistyping
things, otherwise known as “fat-fingering”, I fall into the “love scripts” category.
The PyMarkdown project is a fitting example of how I use scripts to make the simple
development tasks into scripts.&lt;/p&gt;
&lt;p&gt;My ability to run Python tests using a script is a example of this practice.
As I do my PyMarkdown work on Windows,
I have a &lt;code&gt;ptest.cmd&lt;/code&gt; script that has evolved to have a fair amount of usability,
some of which is the re-used by my &lt;code&gt;clean.cmd&lt;/code&gt; script.  But even with the functionality
that it has,
there were times where I could literally go to my kitchen, make a simple sandwich,
eat it, and be back in front of my computer before the script completed.  Granted,
that was running the &lt;code&gt;clean.cmd&lt;/code&gt; script with a slowdown for measuring code coverage,
but it was still a long time to wait for a script to complete.&lt;/p&gt;
&lt;p&gt;I had looked around and found a couple of PyTest addons that could possibly let
me run the tests on multiple cores, something that would hopefully reduce those
long testing times.  As the upside to finding a workable addon was huge, I took
an evening and experimented with two candidates.  While the first candidate failed
right away, the second candidates looked promising.  After a bit of research on
the issues that I was seeing, I was able to resolve those issues and I added support
for the &lt;code&gt;pytest-xdist&lt;/code&gt; package into the project.&lt;/p&gt;
&lt;p&gt;I think the reasons that this package works is that it seems to keep things simple,
and it has been around for a while.  By adding the &lt;code&gt;-n !CORES_TO_USE!&lt;/code&gt; argument to
where I invoke PyTest in the script, I was able to control how many cores were
used by PyTest on my machine.  Deciding to take a cautious approach, I added the following
code to the script to only use one-half of the available cores for testing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;defined&lt;/span&gt; &lt;span class="nv"&gt;PTEST_MULTI_CORE_ARGS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;/a&lt;/span&gt; &lt;span class="nv"&gt;CORES_TO_USE&lt;/span&gt;&lt;span class="o"&gt;=%&lt;/span&gt;&lt;span class="nv"&gt;NUMBER_OF_PROCESSORS&lt;/span&gt;&lt;span class="o"&gt;%/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;!CORES_TO_USE!&lt;/span&gt; &lt;span class="ow"&gt;LSS&lt;/span&gt; 1 &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;CORES_TO_USE&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;1
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;PTEST_MULTI_CORE_ARGS&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;-n &lt;span class="nv"&gt;!CORES_TO_USE!&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Digging into the occasional failures I was getting, I added the &lt;code&gt;--dist loadscope&lt;/code&gt;
flag as per a suggestion from a reply to a similar question on Stack Exchange. With
the occasional failure not showing up since then, I knew I had a viable solution.&lt;/p&gt;
&lt;p&gt;To be open about the entire process, the bulk of the work for these changes was done while I was working
on the previous two issues, so I had a lot of time to experiment with what settings
work best with the way that I work.  That one-half of the available cores was arrived
at because it seemed to be a good balancing point between making my system crawl
and getting a good speed boost for the tests.  Similarly, I added an optional
&lt;code&gt;--maxfail=5&lt;/code&gt; to the PyTest command line to better manage the failure cases.  However, as there
is a greater chance that failures will happen in large batches, such as when I
am refactoring, the limit is enabled by default and disabled by using the &lt;code&gt;-a&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;Based on the refactoring work I did during this last week, this work has been
extremely useful in cutting down test run times.  The time for a full test run with
coverage on my machine went from 7 minutes 32 seconds to 1 minute 35 seconds.
For a nomrmal full run, the duration went from 1 minute 44 seconds to 36 seconds.
Between that and similar tweaks to the other linters, I was happy
with this progress.&lt;/p&gt;
&lt;h2 id="issue-93-this-is-that-bug"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/93"&gt;Issue 93&lt;/a&gt; - This Is That Bug&lt;a class="headerlink" href="#issue-93-this-is-that-bug" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, this is the bug that almost knocked me down.  In all honesty, it probably knocked
me down more than a couple of times, I just go back up right away and got back to work.
I do know that at least once
I needed to walk away and collect my cool before getting back to solving the problem.
Basically, resolving this issue was a test of my will to properly fix this issue instead
of doing a partial job.  And it was not always pretty.&lt;/p&gt;
&lt;p&gt;Due to commitments at home, I spent the American Thanksgiving holiday at home with my
son.  While we had loose plans to chill out during the holiday weekend, we both had
a lot on our plates and just decided to watch a Champions League game together and
recharge our batteries.  This ended up being useful because of some research that I
had started to do earlier on in the week on
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/93"&gt;Issue 93&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In doing my research and playing around with finding a quick solution for this issue,
there was one thing that became at once clear.  Depending on how you look at the
tokens, I either did not have the correct information or I had conflicting information
in the tokens.  Specifically, I was noticing that the whitespace in and around List
elements and Block Quote elements was not being stored in the tokens properly.&lt;/p&gt;
&lt;p&gt;The issue was around how this document was parsed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;this&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;*****&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When parsed, the Block Quote token and the List token were both recording the
whitespace associated with the first line.  In particular, the Block Quote token
was storing &lt;code&gt;&amp;gt;{space}&lt;/code&gt; and the List token was storing &lt;code&gt;{space}{space}&lt;/code&gt;.&lt;sup id="fnref:curlies"&gt;&lt;a class="footnote-ref" href="#fn:curlies"&gt;1&lt;/a&gt;&lt;/sup&gt;
My original thought was that this decision would be convenient in that the inner
List token would simply “know” that its two space characters were the
greater-than character and the space character from the Block Quote token. When
I was working through that part of the parser, it made sense.&lt;/p&gt;
&lt;p&gt;Given time to work on other features, that decision was looking less and less
correct.  There were competing parts of the algorithms that needed their data in
one of two formats, and it was not always clear which format was correct.  On top
of that, the extra work to convert between the two formats was not done consistently
and needed more maintenance than I hoped for.&lt;/p&gt;
&lt;p&gt;So, before I did anything else, I needed to make a choice on how to
approach this: pay now or pay later.&lt;/p&gt;
&lt;h3 id="the-decision"&gt;The Decision&lt;a class="headerlink" href="#the-decision" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Looking at a couple of relatively open days ahead of me, I needed to decide how
to most effectively apply that time to the PyMarkdown project. The one
option was to clear out multiple issues, but only touch the code that I
needed to.  This would incur extra costs in the future, but I could budget those
costs over a couple of weeks.  The other option was to buckle down with the current
time I had and make major progress to getting that work done. That would incur an
immediate expense but would involve less rewriting of code later.&lt;/p&gt;
&lt;p&gt;It was not any easy decision for me to make.  I knew that at the very least, I was
talking about eight hours of work.  On the other end of the range, the duration for
that same work could be in the three-to-four-day range.  At that point, it was in
the middle of the day on Thursday, and the prospect  of my entire holiday being
swallowed up was not a good one.&lt;/p&gt;
&lt;p&gt;But as I thought about it over the next couple of hours, my mind kept coming back
to two points.  The first point was that this cost was something I was going to
have to pay in the future.  That was not up for debate.  To make the whitespace in
the container tokens more usable, I would need to make changes.  The second point
was about whether I wanted to pay that cost in one large chunk and get it over
with, or incur that cost in smaller chunks, but with interest added on.  The logic
there was that if I chose smaller chunks, not only would I have to pay the main cost
for the changes, but I would have to pay interest on those changes until the main
changes were completed.&lt;/p&gt;
&lt;p&gt;With those two points crystalizing as the main differentiators in my decision, the
decision almost made itself.  If I had the time to spend, it would be easier to
do the work in one chunk and avoid the extra work incurred by the spreading that
work out.&lt;/p&gt;
&lt;p&gt;And with that… the work started.&lt;/p&gt;
&lt;h3 id="just-get-on-with-it"&gt;Just Get On With It&lt;a class="headerlink" href="#just-get-on-with-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For my own sanity, I broke the work out into three chunks: getting the scenario tests
passing, getting the Markdown checks passing, and getting the other consistency checks
passing.  It was 11 am Pacific time on Friday morning when I started to make the
changes, and it was after 2pm Pacific time on Sunday when I finished making the changes.
I will not go into all the changes that I had to do, as I would prefer not to try and
relive all that effort.  Do not get me wrong, it was the right thing to do, but it was
just excessively precise work.&lt;/p&gt;
&lt;p&gt;The good points were as follows.&lt;/p&gt;
&lt;p&gt;The updated tooling effort from earlier in the
week paid off handsomely during this effort.  Most the changes looked good when
I sketched them out in my head, but when I implemented them about half of them,
things changed.  Either
that design did not work as well as I had hoped, or there were nasty side effects
to consider.  By having a quickened “change-test-observed” loop, I could get to
the observed part of the loop that much quicker.  &lt;/p&gt;
&lt;p&gt;Having a good set of scenario tests helped me make those changes with confidence.
While I cannot account for tests that I have not added yet, the “test” part of the
“change-test-observed” loop meant that these changes were about going forward and
not introducing more problems. And as I debug best by looking at the overall
picture, having good logging throughout the code base helped me diagnose the
issues and verify the results of the changes.  A good set of tests and 100 percent
code coverage gives me confidence.  But being able to follow the flow
of data through the newly changed portions of the code raises that confidence
even higher.&lt;/p&gt;
&lt;p&gt;I was also happy to see that one of the design points of the project, the keeping
the container processing separate from the leaf processing, was still in place.
While fixing this issue properly required substantial work in the Container Block
Processor, only a couple of lines on the boundary between the Container Block
Processor and the Leaf Block Processor needed to be changed.  And I believe most
of those changes were just with logging input values.&lt;/p&gt;
&lt;p&gt;And now for the bad points.&lt;/p&gt;
&lt;p&gt;Changing the method with which I save whitespaces in container tokens would have
been better made when I was designing the parser.  Doing it at this point was
a nightmare like trying to talk on the phone on the tarmac at a busy airport.
I had to try and keep my focus on what I specifically trying to target.  And
that was not always easy. But while I think I may have been able to design
that part of the system better, I am more convinced that I needed to see the
old design and its flaws to arrive at this improved design.  Sometimes, we need
to take one step backwards to take two steps forward.&lt;/p&gt;
&lt;p&gt;The other bad point that I saw is that I think I still have a way to
go in simplifying
the container handling.  These changes were obviously a huge step in the
right direction, but I am sure I can simplify them even more.  It could be
the nature of preserving the whitespace, but I found myself writing code that
was “if in a list block that is in a block quote block”.  In one or two
cases, I believe I had to write something even more devious than that code.&lt;/p&gt;
&lt;p&gt;While there may have been other points that I could include here, most were
too minor to mention or on a list of things to look for
when I get free time.  Things like more minor refactorings and patterns to
look out for when writing any new Python code.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given the arduous work that I put in, I found it useful to find my balance
between the work I was doing and not letting the weekend slip away
without taking advantage of it.  Similarly, I had to balance those previously
mentioned good points and bad points with what I have carried out with the project.&lt;/p&gt;
&lt;p&gt;Yes, there were a couple of times that I yelled “why did I want to write a
linter?” to my computer screen.  If I had chosen to write a Markdown-to-HTML
parser, like &lt;a href="https://commonmark.org/"&gt;CommonMark&lt;/a&gt;, then I would be done.
As HTML throws almost all the whitespace away, the parser just needed to
understand the whitespace, not properly store it in a token.  If not for
the fact that I have written a linter and that I wanted to be able to verify
that I had parsed the Markdown properly, I would not need to get the extracted
whitespace &lt;em&gt;exactly&lt;/em&gt; correct.&lt;/p&gt;
&lt;p&gt;And to me… knowing that I made a hard call, but it was for what I consider
to be the right reasons… that is good enough for me.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having made good inroads to fixing the spacing issues in the parser, I know
I want to find other related issues and see if I can resolve them or easily
resolve them.  But I also would not mind getting some more small refactors
done.  Not sure which is going to win out yet.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:curlies"&gt;
&lt;p&gt;As Markdown does not like space characters inside of code spans, I have replaced any such spaces with the text &lt;code&gt;{space}&lt;/code&gt;. &lt;a class="footnote-backref" href="#fnref:curlies" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Improving Quality - Finding Better Tooling + Extact Method</title><link href="https://jackdewinter.github.io/2021/11/22/improving-quality-finding-better-tooling-extact-method/" rel="alternate"></link><published>2021-11-22T00:00:00-08:00</published><updated>2021-11-22T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-11-22:/2021/11/22/improving-quality-finding-better-tooling-extact-method/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/15/improving-quality-figuring-out-better-tooling/"&gt;last article&lt;/a&gt;, I talked
about taking a bit of a break and focus on refactoring for a couple of weeks.
Specifically, I talked about the things that I was looking for with respect to more tools to
help with the refactoring.  This week, I talk about the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/15/improving-quality-figuring-out-better-tooling/"&gt;last article&lt;/a&gt;, I talked
about taking a bit of a break and focus on refactoring for a couple of weeks.
Specifically, I talked about the things that I was looking for with respect to more tools to
help with the refactoring.  This week, I talk about the progress that I made with
the refactoring and my experience with the three added tools.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Professionally I am an SDET, otherwise known as a Software Development Engineer
in Test.  When I mention my job title, people often think I am in a company to
test things and break them.  The reality could not be more different.  Most of
what I do is more properly defined as risk management and risk prevention.  A large
part of that is working to find better processes and to find better measurements
for the quality of the projects that I work on.  If I do things properly, I simply present the
information to both teams and their management, helping them make smart
information-based decisions that are keyed to the specific situation that they are in.&lt;/p&gt;
&lt;p&gt;From that viewpoint, what I have been doing for the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project is not much
different than my day job.  There are many viewpoints that show risk in any given
project, and it is a tough job to figure out which of those viewpoints to focus
on at any given time.  But even giving myself time to work on the compositional
quality of the PyMarkdown project, I wondered if my usual tools (PyLint and Flake8)
were good enough or if I can do better.  So, as part of my work in the last two
weeks, I picked out three new tools to experiment with, to see if they add any
value to my well-established tool set.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/397433405008fef9c1ec4c835c1608c473ca51bc"&gt;07 Nov 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5ab751db859c92bd25f3edcc253d71b0b889659f"&gt;20 Nov 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="setting-the-playing-field"&gt;Setting The Playing Field&lt;a class="headerlink" href="#setting-the-playing-field" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned in the last article, my usual choice of tools for analyzing
Python projects is the combination of the &lt;a href="https://github.com/pycqa/flake8"&gt;Flake8&lt;/a&gt;
tool followed by the
&lt;a href="https://github.com/PyCQA/pylint"&gt;PyLint&lt;/a&gt; tool.  While they do not have information
to help with every refactoring or guideline that I want to use with Python projects,
they do a respectable job in getting me most of the way there.  The question I had asked
myself was whether there were automation tools out there that could help
me to boost the quality even higher than it is.&lt;/p&gt;
&lt;p&gt;To that extent, I picked three different tools to try out:
&lt;a href="https://www.code-inspector.com"&gt;Code Inspector&lt;/a&gt;,
&lt;a href="https://codebeat.co"&gt;CodeBeat&lt;/a&gt;,
and &lt;a href="https://sourcery.ai"&gt;Sourcery&lt;/a&gt;.  The minimum qualification for me to use them was that they needed
to have some integration with GitHub that activates when something is pushed to
the repository.  While two of the tools also offer VSCode support, it was not a
requirement.  After all, I run PyLint and Flake8 on the command line and as part
of a lint job using GitHub Actions.&lt;/p&gt;
&lt;p&gt;So on to the tools.&lt;/p&gt;
&lt;h2 id="code-inspectorcodiga"&gt;Code Inspector/Codiga&lt;a class="headerlink" href="#code-inspectorcodiga" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before I started the refactoring last week, I was using a tool called
&lt;a href="https://www.code-inspector.com"&gt;&lt;code&gt;Code Inspector&lt;/code&gt;&lt;/a&gt;,
but today I am using the same tool, but now called &lt;code&gt;Codiga&lt;/code&gt;.  Some of the URLs
for the tool still point to &lt;code&gt;code-inspector.com&lt;/code&gt;, but I expect that they will be
moved over to &lt;code&gt;codiga.io&lt;/code&gt; before too long.  And, as far as I can tell, the change
has not affected the usefulness of the tool.&lt;/p&gt;
&lt;p&gt;As I mentioned last week, my first impression of this tool was that it would be
useful in helping me keep the number of new PyLint errors down.  Essentially,
as their
&lt;a href="https://doc.codiga.io/docs/faq/#tools"&gt;tools page&lt;/a&gt;
states, they use specific tools on their platform to scan the projects.  You
can opt in or opt out of scanning your project with any of those tools, so it
is very flexible.  But to be clear, they do not seem to have any custom analysis
tools of their own, only open-source software.&lt;/p&gt;
&lt;p&gt;But there is where they shine.  Having used this tool for two weeks, I can
positively say that I am going to continue using this tool going forwards.  Whenever
I make a change to source code in my VSCode editor, the Problems window at the
bottom updates with any &lt;code&gt;Code Inspector&lt;/code&gt; information within 10 seconds of me
saving the file.  By having the output in the Problems window with a line
number and column number, I can click on it and go there to fix the issue.
Since &lt;code&gt;Code Inspector&lt;/code&gt; is running PyLint as one of its tools, that means
I can find and address any PyLint errors without leaving the editor.  That
is cool!&lt;/p&gt;
&lt;p&gt;In addition, their dashboard view of a project is a useful way to see what
is happening with the project.  The dashboard view for the PyMarkdown project
&lt;a href="https://app.codiga.io/project/29635/dashboard"&gt;is here&lt;/a&gt; and presents some
nice graphs with clickable elements throughout.  During the last two weeks,
the dashboard and the views were immensely helpful in keeping me targeted on the
most impactful changes. And when I want to improve the quality of a given
code base, that is exactly the information that I need.&lt;/p&gt;
&lt;h3 id="evaluation"&gt;Evaluation&lt;a class="headerlink" href="#evaluation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While this can be considered a repeat of the PyLint and Flake8 tooling,
the in-editor experience and the reporting of those tools supplies enough
of a value-add that I am going to keep on using this.&lt;/p&gt;
&lt;h2 id="codebeat"&gt;CodeBeat&lt;a class="headerlink" href="#codebeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Initially I was optimistic about the &lt;a href="https://codebeat.co"&gt;CodeBeat&lt;/a&gt; tool,
as it looked promising.  But after
using it for the last two weeks, I am left in a confused state about what
help this tool provides.&lt;/p&gt;
&lt;p&gt;When using this tool, it seems to take a while to get my project scanned.
Since I am not paying for this tool, I am okay with that.  But
when I do get a report, the metrics really confuse me.&lt;/p&gt;
&lt;p&gt;One of their
metrics, &lt;code&gt;Function too long&lt;/code&gt;, is based on the actual number of lines in
the source file, not the number of statements.  As such, after the
&lt;a href="https://pypi.org/project/black/"&gt;Black&lt;/a&gt; formatter has cleaned up my files and placed various function
arguments on their own lines, I find that their
line limit of 30 is breached often.  I get that they are trying to
keep each function on one viewable page within an IDE, but that metric
does not sit right with me.&lt;/p&gt;
&lt;p&gt;Then there is the &lt;code&gt;Assignment Branch Condition too high&lt;/code&gt; metric.  Brushing up
on the available metrics, I found some valuable information on how to calculate
this metric for Python.  But no matter which function I try it with, the number
that I get is always lower than the one they report in their errors view. And
since they only list the final &lt;code&gt;ABC&lt;/code&gt; value, I am unable to check my actual
numbers against their actual numbers.&lt;/p&gt;
&lt;p&gt;Finally, from my point of view, the &lt;code&gt;Block Nesting too deep&lt;/code&gt; metric is
broken.  This metric is supposed to reflect the maximum number of block nesting
levels in each function. That is not my research, that is
&lt;a href="https://hub.codebeat.co/docs/software-quality-metrics#maximum-block-nesting"&gt;their documentation&lt;/a&gt;.
But unless my math is off, the depth level that they supply is the total block
nesting depth, not the maximum block nesting depth.  A good example of this is
the following function from the Rule Md027 module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__handle_within_block_quotes_blocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_directly_within_block_quote&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_directly_within_block_quote&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_fenced_code_block_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_directly_within_block_quote&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_html_block&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_indented_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_leaf_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_html_block_end&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_indented_code_block_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_leaf_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The block nesting depth reported for this function is &lt;code&gt;4&lt;/code&gt;.  I calculate it as
a depth of &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="evaluation_1"&gt;Evaluation&lt;a class="headerlink" href="#evaluation_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While the idea of this tool was nice, I have removed it from the PyMarkdown project.&lt;/p&gt;
&lt;h2 id="sourceryai"&gt;Sourcery.Ai&lt;a class="headerlink" href="#sourceryai" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I had an early idea that &lt;a href="https://sourcery.ai"&gt;Sourcery&lt;/a&gt; would be useful,
it was not until I
started using it for refactoring that I was able to find out how useful it
was.  From the usability point of view, it was always spot on with what it
found and suggestions on how to make it better.  Looking at the list
of &lt;a href="https://docs.sourcery.ai/refactorings/"&gt;possible refactorings&lt;/a&gt;, I believe
that I have hit about maybe 25% of the refactorings presented.&lt;/p&gt;
&lt;p&gt;Some of those refactorings were easy ones that I had missed.  Others
were making the code more readable by doing things like applying the De Morgan
Identity to a conditional expression.  Now, I have been doing that refactoring
for years, but I always must write it out and manually work through the arguments
of the expression, just to make sure that I get it right.  With Sourcery, I just
clicked on the apply refactoring menu item, and it was one for me.  It was the
same thing with applying their “Convert to Enumerate” rule. I could easily do it
for myself, but I was always concerned that I was going to fat-finger something
and break the code. This was a lot easier and a lot less error prone.&lt;/p&gt;
&lt;p&gt;Those features alone would have sold me on using this as a tool.  And then I
ran into a couple of refactorings such as “List comprehension”.  To be totally
open, I struggle with comprehensions.  I have tried three times to make
some serious pushes into learning comprehensions, but I have struggled each
time.  I think that the
&lt;a href="https://docs.sourcery.ai/refactorings/list-comprehension/"&gt;List Comprehension&lt;/a&gt;
might be the thing that helps me make progress on learning comprehensions.&lt;/p&gt;
&lt;p&gt;Why do I say that?  Well, there is the obvious fact that Sourcery detected
a series of statements that can more compactly and efficiently represented using
a comprehension.  I know I sometimes have issues with just that.  Then there
is the ability to translate it with a press of a button.  For me, that is a
teaching moment.  Being able to see that something can be changed, and having
that change being applied gets through to me more than any amount of reading
can do.  And it works even better if it is something I am familiar with and
not a made-up example.  I think it is safe to say, it just hits home in a
new way for me.&lt;/p&gt;
&lt;h3 id="evaluation_2"&gt;Evaluation&lt;a class="headerlink" href="#evaluation_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Basically, if I had to assign a role to Sourcery and how it helped
me with the PyMarkdown project, it would be role of mentor.  It was not the
role I assign to PyLint and Flake8, which is essentially a monitor role.
Besides, that role is solidly filled by the existing tools PyLint and
Flake8.  Sourcery provides
me with better ways to do things, providing me with solid information on how
things would look after that change, how to make that change, and why it
should be changed.&lt;/p&gt;
&lt;p&gt;And as I can always use a good nudge in the direction of cleaner code, this
is a tool that I want to keep in my toolbox.&lt;/p&gt;
&lt;p&gt;Oh, and did I mention this other nifty feature?  If I forget to apply a
suggested refactoring, Sourcery creates a new PR with their suggested changes
already applied, ready to merge into a newly committed branch at my command.
While I am not usually forgetful when it comes to process, it is nice to
know that Sourcery has my back!&lt;/p&gt;
&lt;h2 id="choosing-a-quality-measurement"&gt;Choosing a Quality Measurement&lt;a class="headerlink" href="#choosing-a-quality-measurement" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having experimented with the Sourcery’s Quality measure for a function, I was
pleased that its measurement of quality was mostly coordinated with my own observations.
To be clear from the start, I do not have any plans to stipulate that all of the functions
in the PyMarkdown project to have a Quality measure in the 70s or higher.  While
it might be nice to get there on smaller projects, I do not believe that achieving
that measurement on larger projects such as PyMarkdown are achievable.  And
even if they are achievable, I believe that the breakdown of the functions to
achieve that measure would trash the readability of each function.&lt;/p&gt;
&lt;p&gt;But looking through their reports, I had to come up with a quality score that I
at least thought was a good target for an initial push to clean up the project.
I found the one boundary of 25 to be too low and needed all the functions in
the project to be higher than that.  Experimenting with a couple of functions
and what their Quality score were, I decided that a score of 40 was a good
starting point.  Why 40?  I just found it to be a satisfactory level of quality without
being too disruptive to the readability of the project.&lt;/p&gt;
&lt;h2 id="refactor-extract-method"&gt;Refactor: Extract Method&lt;a class="headerlink" href="#refactor-extract-method" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having picked a minimum quality score of 40 for each function, I started working
my way through the PyMarkdown project, one module at a time.  The process of
going through the entire project was long and arduous, taking the better part
of two complete weeks.  The process was also very monotonous, as it was always
the same thing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check through the next module, examining the reported Quality for each function.&lt;/li&gt;
&lt;li&gt;Find the next lowest code quality function in the current module.&lt;/li&gt;
&lt;li&gt;If the quality for that function is 40 or above, go to Step 1.&lt;/li&gt;
&lt;li&gt;Otherwise, examine the function and Find a good block of code to extract.&lt;/li&gt;
&lt;li&gt;Add a marker function call with the name of the new function.&lt;/li&gt;
&lt;li&gt;Create a new function and extract the code to that new function.&lt;/li&gt;
&lt;li&gt;Add arguments to the new function to satisfy any missing variables from the function.&lt;/li&gt;
&lt;li&gt;Copy that argument list and add it to the marker function’s argument list.&lt;/li&gt;
&lt;li&gt;Go through all assignments from the function and add them to the list of variables to be returned by the function.&lt;/li&gt;
&lt;li&gt;Copy that return variable list to the marker function.&lt;/li&gt;
&lt;li&gt;Use VSCode to figure out which variables are not used by the original function and remove those variables from both lists.&lt;/li&gt;
&lt;li&gt;Run the full set of &lt;code&gt;PyTest&lt;/code&gt; tests, looking for any asserts that show something is wrong.&lt;/li&gt;
&lt;li&gt;If something is wrong, fix it.  If it cannot be fixed, revert the file and start over.&lt;ul&gt;
&lt;li&gt;The most likely thing that happened to me was that a variable was not assigned before usage.
  This happened with variables that were assigned in optional code blocks.  The fix was to make
  sure to add default values before the optional code block to ensure that variable was set to something reasonable.&lt;/li&gt;
&lt;li&gt;In some cases, I entered the wrong code, and I just got either a syntax error or a test failure.
  In those cases, reverting the file was the easiest way to go.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Verify that it looks right, and stage that change to the repository, so it does not get lost.&lt;/li&gt;
&lt;li&gt;Look at the new quality score for the function.  If it is below 40%, go to Step 4. Otherwise go to Step 3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As far as the PyMarkdown project was concerned, that was my life for two weeks.
It was not overly exciting, but it was rewarding.  Even as I was making my way through
the modules, I could see that the readability of the modules was already increasing.
I could be wrong, but I believe there is only one place in the refactored code where
I simply added a number to the end of an extracted method.  In all other cases, I
was able to find a solid, logically place for the function to be split up.&lt;/p&gt;
&lt;h2 id="cleaning-up-the-todo-items"&gt;Cleaning Up The TODO Items&lt;a class="headerlink" href="#cleaning-up-the-todo-items" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing that Codiga listed in its Violations view were the number of &lt;code&gt;# TODO&lt;/code&gt;
comments that I had littered around the PyMarkdown project code base.  While I
did not initially agree with their definition of these comments as violations,
I started to come around quickly.  Deciding to get them out of the way,
I spent Saturday afternoon going through most of the TODO comments.  In each
case, I either removed the comment, fixed the issue and removed the comment,
or logged a new issue and removed the comment.  When all was said and done,
the comments for &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/145"&gt;Issue 145&lt;/a&gt;
detailed each of the TODO comments and what was done with it.&lt;/p&gt;
&lt;p&gt;To be honest, there were an equal amount of “what the F***?” comments as there
were “didn’t I already…?” comments.  Then there were the “yeah, I should have
done this long ago” comments.&lt;/p&gt;
&lt;p&gt;Basically, it was good to just get these things done, figured out, or removed
from the code base.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The reason that I decided to write a linter in Python is that I wanted to learn
Python and this was an excellent project to do that with.  The reason I chose
a Markdown linter is because I did not feel there was a good, flexible linter
for Markdown out there.  Specifically, I picked a linter because linters help
developers look within their content to see if there is something that they can
do to be more consistent and to raise the quality of their content.&lt;/p&gt;
&lt;p&gt;And that is what I like about the PyMarkdown project.  I am still learning about
Python and I know I have a solid set of rules that can help Markdown document
authors.  Additionally, I know I can write more rules to help those same
authors apply extra structure to their documents.&lt;/p&gt;
&lt;p&gt;That is why, even through the boring refactoring effort, I kept on going.  Because I
knew that this work was helping me to help myself, and to help others. As
altruistic as it sounds, that is enough for me.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I still have a couple of smaller items to clean up, but the big refactoring work
has been completed.  I do want to make more progress on bugs, so I will probably
split my time between those two efforts.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="extract method"></category></entry><entry><title>Improving Quality - Figuring Out Better Tooling</title><link href="https://jackdewinter.github.io/2021/11/15/improving-quality-figuring-out-better-tooling/" rel="alternate"></link><published>2021-11-15T00:00:00-08:00</published><updated>2021-11-15T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-11-15:/2021/11/15/improving-quality-figuring-out-better-tooling/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/08/markdown-linter-fun-with-block-quotes/"&gt;last article&lt;/a&gt;, I talked
about my desire to focus on Nested Container blocks.  After a long hard push
to get to this point in the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project, I decided to take a bit of a
break and focus on refactoring for a couple of weeks.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/08/markdown-linter-fun-with-block-quotes/"&gt;last article&lt;/a&gt;, I talked
about my desire to focus on Nested Container blocks.  After a long hard push
to get to this point in the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project, I decided to take a bit of a
break and focus on refactoring for a couple of weeks.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After deciding to take a bit of time off to focus on not fixing issues, I decided
that refactoring the codebase was an effective way to stay connected to the PyMarkdown
project while taking a more relaxed approach to work.  I have been aware for some
time that refactoring that needed to be done, it just was never a priority to work
on that part of the project.  As I try to give my best for every part of every
project that I work on, I decided that I needed to make the time, and that now
was that time.&lt;/p&gt;
&lt;h2 id="why-take-time-now-to-refactor"&gt;Why Take Time Now To Refactor?&lt;a class="headerlink" href="#why-take-time-now-to-refactor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The truth?  I was tired of fixing issues and having more issues waiting
for me to fix.  I am under no illusion that I need to get back to fixing the remaining
issues, but I decided that I needed a break from the issue resolution process.
I know it might seem weird, but choosing to focus on improving the quality of
the PyMarkdown project is relaxing to me. And when it came down to it, I knew
that the right thing for me to do at this point was take time to focus on
something else for a couple of weeks.  I need to make sure that I have the drive
and energy to enable me to reach the finish line on the remaining issues.&lt;/p&gt;
&lt;p&gt;And it was not like the project was desperately in need of refactoring, so I am
confident that it is a relatively relaxing task that I am undertaking. When developing
the PyMarkdown project, I undertook most of the small refactors as I was
developing the code itself.  If I have developed the project according to this
belief, hopefully I just have the larger, more complicated refactorings to
complete.&lt;/p&gt;
&lt;h2 id="what-do-i-mean-by-improving-quality"&gt;What Do I Mean By Improving Quality?&lt;a class="headerlink" href="#what-do-i-mean-by-improving-quality" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are numerous ways to refactor code.  For each of those ways, there are
recipes that can be followed to improve the quality of the code.  But before
the quality can be improved, there are two things that greatly enhance the
success of improving the quality of the code: solid tests and good metrics.&lt;/p&gt;
&lt;p&gt;The more complete the testing of a given codebase is, the more confidence that
I have that a given refactoring will not negatively affect that codebase. When
it comes down to it, the reason for that confidence is a simple one.  Codebases
are complex entities where all the side effects of changing a given line of
code may not be easily known.  Each test helps increase the level of
monitoring of that codebase for any unwanted side effects.  With the right
monitoring in place,
changes can be more confidently made with more certainty that the change is
creating a positive change, not a negative one.&lt;/p&gt;
&lt;p&gt;Good metrics are needed because of a simple reason:
not every piece of code requires refactoring.  Code only needs to be refactored
if there are warning signs that are clear using tools specifically
designed to look for a sampling of those warning signs.  For the PyMarkdown
project, I have used the &lt;a href="https://github.com/pycqa/flake8"&gt;flake8&lt;/a&gt; and
&lt;a href="https://github.com/PyCQA/pylint"&gt;pylint&lt;/a&gt; tools to look for obvious
issues as I write the code.  With very few exceptions, if Flake8 reports an
issue, I fix it before checking in code.  For PyLint, I try and fix the issue
if it is one of the simpler issues to fix.  If the issue is one of &lt;code&gt;too-many-locals&lt;/code&gt;,
&lt;code&gt;too-many-branches&lt;/code&gt;, or &lt;code&gt;too-many-statements&lt;/code&gt;, I often delay fixing the issue
until later.  This helps me stay creative, fixing the issue that I am working on.&lt;/p&gt;
&lt;p&gt;But as soon as the bulk of the creativity is order, that is when my focus on
quality takes over.  Creativity helps me get near to the finish line, but
I know that my focus on quality and solid testing is what gets me over the
finish line. Relating it to the woodworking that I do, the creativity is
what gets the item built. But it is the quality that makes the item usable
and attractive to others.  You cannot have just one of them, you need them
both working together to cross that finish line.&lt;/p&gt;
&lt;h2 id="what-tools-should-i-use"&gt;What Tools Should I Use?&lt;a class="headerlink" href="#what-tools-should-i-use" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Deciding that I
wanted to have a better picture of what PyLint suppressions I have added to
the PyMarkdown project, I created a small Python script to help me out with that
analysis.  It extracts that information from a project on a module-by-module
basis, as well as a convenient cross-project total, and saves that information
to a JSON file of my choosing.  With that information in hand, I have the start
of some good metrics on how I can improve the quality.  But I often wondered if there
were other tools that would supply additional benefits with useful metrics.&lt;/p&gt;
&lt;p&gt;To that extent, I started looking for potential candidates.  The first
qualification is that the tool must be free for Open Source Projects. The second
qualification is that it must provide one or more added metrics that help
me to find issues with the PyMarkdown project.  Finally, the third qualification
is that the tool must be decently usable.  While that third qualification is
more intangible than the others, it is an important one.&lt;/p&gt;
&lt;p&gt;Following those guidelines, I found three potential candidates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codebeat.co/"&gt;CodeBeat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.code-inspector.com/"&gt;Code Inspector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sourcery.ai/"&gt;Sourcery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All three of these tools provide for simple installation into the GitHub workflow
of the PyMarkdown project, so they are on equal footing there.  Both Sourcery
and Code Inspector have VSCode plugins, so they both gets extra marks there.
That is where things start to differ.&lt;/p&gt;
&lt;h3 id="codebeat"&gt;CodeBeat&lt;a class="headerlink" href="#codebeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CodeBeat is a tool that provides each repository with a GPA score, outlining how
each part of the repository contributes to that score.  Looking like a high school
report card, each module can be clicked on to discover how that module’s score
was calculated.  One of the benefits of CodeBeat is that it is a cross-platform
tool, supporting 20+ different languages, of which Python is just one.&lt;/p&gt;
&lt;p&gt;I can only investigate the metrics that are reported for the PyMarkdown project,
as there is no information on their web page about what metrics are calculated
and with which tools.  Based on the metrics that I see, there are only two
possible metrics that may be useful, Block Nesting and ABC.&lt;/p&gt;
&lt;h4 id="block-nesting-level"&gt;Block Nesting Level&lt;a class="headerlink" href="#block-nesting-level" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Block nesting is meant to calculate the maximum number of distinct indentation
levels that are applied to a given function. Given this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_incremented_for_this_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the block nesting level should be calculated as &lt;code&gt;1&lt;/code&gt; due to the single indentation
level that occurs on the fourth line of the function.  Similarly, the following
example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_end_token&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# do something here&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_incremented_for_this_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;has a block nesting level of &lt;code&gt;2&lt;/code&gt;.  Nicknamed the
&lt;a href="http://wiki.c2.com/?ArrowAntiPattern"&gt;Arrowhead Anti-pattern&lt;/a&gt;, anything beyond
three nested levels is considered to follow this anti-pattern, decreasing
comprehension, and making it difficult to support.&lt;/p&gt;
&lt;p&gt;While interesting, there are two problems with this metrics.  The first is that
a rule for this metric is already present in PyLint as &lt;code&gt;too-many-nested-blocks&lt;/code&gt;,
though with a
default value of &lt;code&gt;5&lt;/code&gt;.  The second is that this tool reports the total number
of distinct indents, not the maximum indent.  Due to both, this metric
is not an option for me to use.&lt;/p&gt;
&lt;h4 id="assignment-branch-condition"&gt;Assignment Branch Condition&lt;a class="headerlink" href="#assignment-branch-condition" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The other possible metric is the “Assignment Branch Condition” or ABC metric.
With a more complete description of the
&lt;a href="http://c2.com/cgi/wiki?AbcMetric"&gt;metric here&lt;/a&gt;,
the basic idea is to calculate the magnitude of the elements for those three
classes of elements in the functions.  Using the last example, there is one
assignment on line 6, two branches on lines 1 and 5, and zero conditions.
Therefore, the ABC value for that example is the square root of &lt;code&gt;1*1 + 2*2 + 0*0&lt;/code&gt;
or the square root of five.&lt;/p&gt;
&lt;p&gt;My issue with this metric is that its accuracy is very dependent on how the
calculation is applied to the function being evaluated.  This rule only reports
errors when the (unconfigurable) limit of &lt;code&gt;10&lt;/code&gt; is exceeded, without showing any
indication of how the triggering value was arrived at.  Based on that lack of
information, I do not find this metric to be actionable, as it is difficult
to figure out what to try and optimize for in the triggered code.&lt;/p&gt;
&lt;h4 id="where-does-that-leave-me"&gt;Where Does That Leave Me?&lt;a class="headerlink" href="#where-does-that-leave-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Things are not looking good for this tool with respect to the PyMarkdown
project and its needs.  It may be that this this tool benefits projects
that are not using PyLint and Flake8, but that is not the case for this project.
That means that for me, this at best is a curiosity.&lt;/p&gt;
&lt;h3 id="code-inspector"&gt;Code Inspector&lt;a class="headerlink" href="#code-inspector" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Code Inspector is a tool that supplies a high-level categorization of the issues
that it finds, something that is useful. Another cross-platform solution,
this tool benefits from a decently responsive VSCode extension.&lt;/p&gt;
&lt;p&gt;There are multiple things that this tool brings to the table.  The first is that
it is decent at discovering duplicated code.  There seems to be a five- or six-line
threshold for detecting those duplicates, but that seems reasonable.
Other than that, this tool relies on PyLint and Bandit for Python analysis.  Bandit
is a decent tool that adds security checking to the suite of tools being applied
against the
project.  As the PyMarkdown project is an application with very few, if any,
security concerns, adding Bandit to the mix does not help.&lt;/p&gt;
&lt;p&gt;However, one thing that should not be overlooked is that the Code Inspector
VSCode extension allows for PyLint to be executed against the codebase with
every save.  This has proven invaluable so far for being able to assess changes
to see if there are any negative consequences of that change.  While I am
currently using their Basic package which is free, there is a noticeable 10 to
30 second delay between when I save a Python file and when the scan information
is updated.  But since I am not paying anything for their service, I am
okay with that.&lt;/p&gt;
&lt;h4 id="where-does-that-leave-me_1"&gt;Where Does That Leave Me?&lt;a class="headerlink" href="#where-does-that-leave-me_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While the tool itself does not add any useful metrics that I can use, it does
execute PyLint with each save, which is useful to me.  Having the information
there as I am making the changes is unbelievably valuable.&lt;/p&gt;
&lt;h3 id="sourcery"&gt;Sourcery&lt;a class="headerlink" href="#sourcery" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sourcery is a Python only tool that integrated directly into the GitHub action
process and into VSCode as an extension.  Because of the focus on Python and the
integration with VSCode, Sourcery can not only find issues but suggest fixes to
issues that it finds.  For a full list of suggested refactorings, look at
&lt;a href="https://docs.sourcery.ai/refactorings/"&gt;this web page&lt;/a&gt;.  The list is long and
substantial.&lt;/p&gt;
&lt;p&gt;Two other parts of this tool really appeal to me and the way I develop in Python.
The first is that the duplicate analysis in Sourcery is decent.  While not as
powerful as in the paid versions, the free version has decent pattern
matching for detecting duplicates.  The second part that appeals to me is the
code quality percentage metric.  It is very clearly explained and broken down
into its components parts when displayed.  That breakdown helped me figure out
how to best address the issue.&lt;/p&gt;
&lt;p&gt;Next up is the email it sends out with every Pull Request with the same information
on where things were before the Pull Request and where they will be after the Pull
Request.  I know that it might appear to be duplication, but I find it nice to
be able to go over what I did the day before and see how any commits affected the
quality of the project.&lt;/p&gt;
&lt;p&gt;The final part of this tool that I like is the Pull Request that is created for me
with any suggested refactorings based on my last commit.
Just to be clear, I did not add anything or turn anything on to enable that feature.
That is a stock option for this tool.  For me, that is an extremely useful feature to
have.  While I may decide to not include that Pull Request for assorted reasons,
if I do decide to approve the Pull Request, it has already started to pass any
tests or metrics that I use for a normal Pull Request.  And if nothing else,
if my own Pull Request gets a clean bill of health from Sourcery, I know that
I have solid code in that Pull Request.&lt;/p&gt;
&lt;h4 id="where-does-that-leave-me_2"&gt;Where Does That Leave Me?&lt;a class="headerlink" href="#where-does-that-leave-me_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While I have been developing software for decades now, I am still learning
when it comes to Python.  Even if I was not learning the ropes, I
know that I do not always follow best practices.  Sourcery is a great tool for
keeping me honest and for helping me to refine my understanding of Python.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, it is not my usual ending, but it is an ending… kind of.  I am going to
continue using these tools for another week while I see if there are any other
features that show up during my refactoring.  I know I am leaning heavily on
Sourcery to augment my knowledge of Python and Code Inspector to help with
executing PyLint as I developer, but things may change!  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="extract method"></category></entry><entry><title>Markdown Linter - Fun With Block Quotes</title><link href="https://jackdewinter.github.io/2021/11/08/markdown-linter-fun-with-block-quotes/" rel="alternate"></link><published>2021-11-08T00:00:00-08:00</published><updated>2021-11-08T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-11-08:/2021/11/08/markdown-linter-fun-with-block-quotes/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/01/markdown-linter-double-checking-my-double-checks/"&gt;last article&lt;/a&gt;, I talked
about my efforts to bolster the consistency checks I have built into the project.
In this article, I decided to focus on Nested Container blocks.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have confidence that most of the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
parser is working the way that
I want …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/01/markdown-linter-double-checking-my-double-checks/"&gt;last article&lt;/a&gt;, I talked
about my efforts to bolster the consistency checks I have built into the project.
In this article, I decided to focus on Nested Container blocks.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have confidence that most of the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
parser is working the way that
I want it to, there are two areas where I feel that I still need to shore up my
confidence: Link Reference Definitions
and Nested Container Blocks.  Most of my lack of confidence in the Link Reference
Definition code is in how it handles boundary conditions.  As they are boundary
conditions that are not hit that often, I am not too worried
about users hitting those conditions too much.&lt;/p&gt;
&lt;p&gt;Nested Container Blocks are a different story.  I personally use these when authoring
documents like this article.  While I do not usually go more than two levels deep,
they are still Markdown constructs that I use quite often.  I would expect that,
outside of Markdown
power users, most authors will probably encounter the same issues. As such, increasing
my confidence on Nested Container Blocks was something I wanted to work on.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/860aea72a8d5e2b0c7dd088c121d7e1ce9012b7b"&gt;01 Nov 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9105fbbedb72997638b209b61766aee0d33a51c0"&gt;06 Nov 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="issue-90-verifying-existing-rules"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/90"&gt;Issue 90&lt;/a&gt; - Verifying Existing Rules&lt;a class="headerlink" href="#issue-90-verifying-existing-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first part of Issue 90 was a thorough look through the existing tests for Rule
Md005,  Basically, I was wondering if those tests were really fixed or if it just
looked like they were fixed.  Probably due to earlier work that I have done
in the area, each of these tests worked flawlessly.  They worked so well that I
started to look at other tests in the area to verify if they were also working
properly.  An obvious place to look for me to look was Rule Md027.  I have been doing
a fair amount of work there in the last couple of months, and it is a
meaty module with a decent number of moving parts.  Basically, a good place to look.&lt;/p&gt;
&lt;p&gt;It was hard for me to figure out exactly when I noticed something was wrong and what
the exact thing was that I noticed was wrong, but there was something there.  I
could not figure out exactly what it was, only that something was “off”. As I have
valuable experience following my gut feelings about code and finding something,
I decided to try experimenting, and as a result created eight new scenario tests.
To do this, I just started
looking through different test files and started making changes.  I then went to
execute those new scenario tests, and a couple of them failed, raising &lt;code&gt;AssertError&lt;/code&gt;
exceptions in Rule Md027.  Both had the same issue: the Block Quote index
was off.&lt;/p&gt;
&lt;h3 id="taking-a-good-look-and-making-a-decision"&gt;Taking A Good Look… And Making A Decision&lt;a class="headerlink" href="#taking-a-good-look-and-making-a-decision" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Digging into what I had just found, I noticed a couple of things.
The first thing was that the handling of the Block Quote index was off.  The second
was that everything else seemed to be in decent shape.  Trying extra variations
on nested containers
elements and other elements inside of them helped me figure that out.  It seemed
to be that the index field for the Block Quotes were the only things that were not
correct.  If that was true, then I could get a lot of mileage out of fixing the
index logic.&lt;/p&gt;
&lt;p&gt;The further I debugged into the code, the stronger that my confidence in that
observation’s accuracy increased.  There were a couple of small
issues that, if I could
get them resolved, should get me most of the way to stabilizing Rule Md027 and
Block Quotes.  That would also raise my confidence in Nested Container Blocks,
so there was a direct payoff.  But it was going to be arduous work for a couple of
days, instead of addressing other issues.  Was the tradeoff worth it?&lt;/p&gt;
&lt;p&gt;In the end, I decided yes.  Improving my confidence in Nested Container Blocks
by adding more scenarios for Block Quote elements with other nested elements
was a win for both my confidence and the project.  As such, I decided that was
the way I wanted the week to play out.  For better or worse!&lt;/p&gt;
&lt;h3 id="getting-down-to-work"&gt;Getting Down To Work&lt;a class="headerlink" href="#getting-down-to-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before starting on the actual changes, I wanted to start the week with some cleanup.
The main &lt;code&gt;next_token&lt;/code&gt; function for Rule Md027 was getting big, and since I was going
to be spending the week in that code, I wanted to split it up
to make it more maintainable. To that extent, I took the code to manage
the start of the Block Quotes and moved it into the new &lt;code&gt;__handle_block_quote_start&lt;/code&gt;
function, the code to handle the end of the Block Quotes into the new
&lt;code&gt;__handle_block_quote_end&lt;/code&gt; function and so on.  It made things
neater and easier to read, even with the many comments with debug code scattered
throughout the module.&lt;/p&gt;
&lt;p&gt;After that, the first thing I noticed when I was debugging was that the Blank Line elements
were not updating the index properly.  From experience, I know that the order of
the Blank Line tokens and the end List tokens are backwards from what they are
expected to be.  It was therefore no surprise to find something like this in
the Rule Md027 code. To properly handle these Blank Lines, I figured out that I
needed to wait until the right point after the any end List tokens were processed.&lt;/p&gt;
&lt;p&gt;To deal with that, once a Blank Line token is found within an active
Block Quote element, I set the new &lt;code&gt;__delayed_blank_line&lt;/code&gt; variable to &lt;code&gt;True&lt;/code&gt;
and added the following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__process_delayed_blank_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow_block_quote_end&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__delayed_blank_line&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_leaf_end_token&lt;/span&gt;
            &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allow_block_quote_end&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_incremented_for_this_line&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_incremented_for_this_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_blank_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__delayed_blank_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_container_tokens&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__delayed_blank_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Taking a while to get to this point, the debugging was worth it. Called from the
top of the &lt;code&gt;__handle_within_block_quotes&lt;/code&gt; function and the top of the
&lt;code&gt;__handle_block_quote_end&lt;/code&gt; function, this function delays the processing of a
Blank Line token until after any processing of required end tokens is completed.
The setting of &lt;code&gt;__have_incremented_for_this_line&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;?  I will get to that
in a bit.&lt;/p&gt;
&lt;p&gt;Like the logic for the Blank Line tokens, there was also a need to delay the
processing of the end Paragraph token.  Working through the debugger and examining
the log files took a while to get right.  But going through that, I noticed that
there were a few cases where the incrementing of the Block Quote
index from the end Paragraph token was doubling up with an increment for the token
that followed it. Specifically, this doubling was occurring for start Block Quote
tokens, List Item tokens, and end List tokens.  To counter this effect, the
&lt;code&gt;__process_delayed_paragraph_end&lt;/code&gt; function was added that delays the increment
for the end of the Paragraph element until such time as any increments for the
listed tokens are dealt with.&lt;/p&gt;
&lt;p&gt;Finally, after all that work to handle those two cases, there were a couple of
boundary cases that needed to be addressed.  While not as &lt;code&gt;__have_incremented_for_this_line&lt;/code&gt;
simple.&lt;/p&gt;
&lt;h2 id="issue-92-staying-the-course"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/92"&gt;Issue 92&lt;/a&gt; - Staying The Course&lt;a class="headerlink" href="#issue-92-staying-the-course" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While on the path of cleaning up Rule Md027, and Nested Blocks in particular, I
decided to stay on that path and clean up other code dealing with nested
blocks.  Having cleaned up the Block Quote index in the last section, I was hoping
that I had found all the issues.  But if I am honest, I was not convinced
that I had.  For me to be convinced that I had found them all, I really needed to
do a deep dive and start throwing some serious levels of nesting container examples
against the parser, and Rule Md027 specifically.&lt;/p&gt;
&lt;p&gt;So, starting with the scenario tests and their data, I created forty-five new
scenario tests and their test data.  To do that, I started with nesting containers
within each other up to three levels of nesting.  When I was done with that, I
added variations on each of the Leaf elements inside of a simple Block Quote
element.  Finally, I added variations on each of those Leaf elements to embed
them within a List element within a Block Quote.&lt;/p&gt;
&lt;p&gt;As I worked through those scenarios, I ended up adding eight new tests to
the “extra” scenario tests to verify that I had found a new issue.  While not
related to those eight scenario tests, eight issues were added to
the project because of working through those issues.  I do not like to see
parser issues in general, but it was not strange to me to see them here.  As I have said at
least a couple of times before, groups of alternating Nested Block elements are
one area where I am not convinced that I have found all the issues.&lt;/p&gt;
&lt;p&gt;And before I get into the work done to address the issues that I could, I want
to point out that I did a bit of work with the debug strings to ensure that they
are using f-strings where possible. Normally I do not expect debug strings to stay
around for a long time, so I am not too fussy with them.  However, with this rule
and its complexities, I know that I have at least eight more visits to this code
for each of the eight issues that are related to this issue.  It just seemed
prudent to clean them up if they are staying around for a while.&lt;/p&gt;
&lt;h3 id="refactoring-the-code"&gt;Refactoring The Code&lt;a class="headerlink" href="#refactoring-the-code" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I was going through the new code for Rule Md027, I noticed that the code
I added for handling start List tokens was almost the same as the code that
I added to handle List Item tokens.  While it was not a big effort, I decided
that it was best if I refactored the code into the new &lt;code&gt;__check_list_starts&lt;/code&gt;
function.&lt;/p&gt;
&lt;p&gt;Upon further examination, it also made sense to create a new &lt;code&gt;__get_current_block_quote_prefix&lt;/code&gt;
function and a new &lt;code&gt;__get_last_block_quote&lt;/code&gt; function to deal with the
work in the &lt;code&gt;__check_list_starts&lt;/code&gt; function.  This allowed me to streamline
the &lt;code&gt;__check_list_starts&lt;/code&gt; even more, simplifying the code to a good clean
level.&lt;/p&gt;
&lt;p&gt;One of the other reasons that I went so far to do some refactoring was that I
expect that I am going to need to work with those concepts after I deal with
the issues that I found during the recent examination of Rule Md027.  With eight
issues open, I am confident that at least one or two of them are going to
require me to change the code for the rule, and similarly confident that one of those is going
to require one of the two new functions.  And if I am wrong, the code has been
tightened a bit and looks that much better.&lt;/p&gt;
&lt;h3 id="fixing-up-the-remaining-scenario-tests"&gt;Fixing Up The Remaining Scenario Tests&lt;a class="headerlink" href="#fixing-up-the-remaining-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the bulk of the other issues out of the way, the issues that were left were
ones where one of the elements fixed in the earlier sections were also firing
on any of those elements within List elements within Block Quote elements.
Taking a couple of minutes to think about these scenarios clearly, I was relieved that I
came up with a solution that was easy to implement.  At the top of the
&lt;code&gt;__handle_within_block_quotes&lt;/code&gt; function, I added the following statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;is_directly_within_block_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, I added that new variable to the argument list of most of the handlers,
using it to opt-out of any reporting of errors. With that in place, I started
running tests, and watched as most of the tests started passing.  Investigating
the failing tests, I started to notice something.  A decent number of scenario
tests were not passing, even with these changes.  What was the issue?&lt;/p&gt;
&lt;h3 id="the-issue-was"&gt;The Issue Was…&lt;a class="headerlink" href="#the-issue-was" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lack of scenario coverage.  As I mentioned earlier, I do not have confidence that
I have all the required scenarios to test nested container blocks.  After the
work that I did this week, I know I am closer to that goal.  However, even after
that work, I still believe that I have not found every scenario.&lt;/p&gt;
&lt;p&gt;As I know I found some new scenarios with this work, I believe that it was
reasonable to expect that some percentage of those scenario tests would fail.
And a small percentage did fail.  To wrap up the work, I filed eight issues
to investigate later.  It was not much, but it was more than I had optimistically
hoped for.  But even though it was more than I had hoped for, I was still optimistic.
After everything I have thrown at the parser so far, eight scenario tests failing
was still a good metric.&lt;/p&gt;
&lt;p&gt;But having met my goal of discovering what I had missed, I now had a good count
of the issues to fix.  Things were good for now, so I decided to move on
and do something different for the last day of the week.&lt;/p&gt;
&lt;h2 id="issue-104-dial-home-device"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/104"&gt;Issue 104&lt;/a&gt; - Dial Home Device&lt;a class="headerlink" href="#issue-104-dial-home-device" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having been a science fiction fan since an early age, when
&lt;a href="https://en.wikipedia.org/wiki/Stargate_SG-1"&gt;Stargate SG-1&lt;/a&gt; started airing in
the last 1990s, I was hooked.  Sure, it was a simple premise and did not have
the international support of Doctor Who and Star Trek, but it had a certain flair
of its own.  With the show came its own plot device: the Dial Home Device. Without
the correct coordinates to input into this device, the team was locked out of gate
travel, stuck wherever they were. And yes, as those were the days of
&lt;a href="https://en.wikipedia.org/wiki/DVD"&gt;DVDs&lt;/a&gt;, I waited to get each season of the
series as it came out on DVD, just to see the show and the highlights.&lt;/p&gt;
&lt;p&gt;I believe it was there that I got the idea that any kind of decent software should
have some way of checking to see if there are any upgrades to it, especially to
solve issues.  If there is a problem with one of the components on my car, I get
mailed a recall notice and I must go to my local dealer to get it fixed.  If
one of the services is changing its terms, they must send out snail
mail or email with the specifics on those changes. Following along from there,
why should not an application be able to find out if there is a newer version and
suggest upgrading it?&lt;/p&gt;
&lt;p&gt;For me, the answer was a simple one.  It should.  As someone who uses editors like
VSCode and Notepad++, repository browsers like SourceTree, and web browsers such
as Chrome, I am kind of used to it.  With each of those programs, a periodic check
is made to figure out if there is an available upgrade.  While the actual upgrade
is left up to me, I am presented with that information to allow me to know to look
and see if the upgrade is beneficial.&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first part of the design for this feature was a quite simple rule: unless something
was setup exceptionally wrong, any errors should be captured and logged, but should
not stop the application.  The purpose of this feature is to supply extra information
about improvements to itself as an aside, not as a focus.  That was the only one iron
rule.
Other than that, there were three simple parts that quickly fell into place: find
the current version of the application, find the published version of the
application, and find out how often to check.&lt;/p&gt;
&lt;p&gt;Finding the current version was a simple part to design.  As the setup code
already had a version of that code implemented, I just needed to make a couple of adjustments to that
code to make it capture all errors.  Other than that, it remained pretty much the
same.  Finding the published version was almost as easy to design.  The pages
over at PyPi.org are static, so scraping the pages once every seven days
should not be a big deal.  Since the &lt;code&gt;request&lt;/code&gt; package is one of the common ones,
its interface is very well known, and easy to work with.&lt;/p&gt;
&lt;p&gt;That left the &lt;code&gt;how often&lt;/code&gt; question to be designed.  Opting for simplicity, I
decided to borrow from greatness and create a &lt;code&gt;.pymarkdownlnt&lt;/code&gt; file in the user
directory with the last checked timestamp.  If there were any errors reading this
file and interpreting the timestamp, the code should assume that a check is
needed.  Otherwise, a simple comparison between the current timestamp and the
written timestamp will inform the module if seven days have passed since the
last check.  To round that out, I decided to add a &lt;code&gt;--force&lt;/code&gt; type flag to the
command line to force the &lt;code&gt;how often&lt;/code&gt; algorithm to skip the check and check
anyway.  To balance that out, the &lt;code&gt;--disable&lt;/code&gt; type flag would never check and
leave it up to the user.&lt;/p&gt;
&lt;p&gt;Even though the designs of the individual components were simple, I took the
time to do my usual due diligence and walk through the scenarios. And even
with something so simple, there were a couple of tweaks that I was able to
make to the design to make everything work better.&lt;/p&gt;
&lt;h3 id="implementation"&gt;Implementation&lt;a class="headerlink" href="#implementation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given that design, it was simple and methodical to implement. As far as the PyMarkdown
core was concerned, this was the interface to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__check_for_current_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disable_version_check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;package_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__package_name&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x_test_version_fault&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;package_name&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;"xxxxxx"&lt;/span&gt;
    &lt;span class="n"&gt;helper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DialHomeHelper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dial_home_expiry_in_days&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;current_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;version_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_semantic_version_from_version_module&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;current_version&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Version information was not in the expected location: {version_error}"&lt;/span&gt;

    &lt;span class="n"&gt;update_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify_version_is_currrent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;current_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;force_version_check&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;update_message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following from the design, the only thing that will cause this check to have a
critical error is during the extraction of the version from the PyMarkdown module.
Because this should only happen if something gets very messed up, the &lt;code&gt;assert&lt;/code&gt;
statement is there to prevent that. Other than that, either nothing gets printed
out because everything is fine, or a simple warning message is presented to the
user and logged in the log file.&lt;/p&gt;
&lt;p&gt;While I will not go into it in detail, the new code is the &lt;code&gt;DialHomeHelper&lt;/code&gt; module
was created and tested to try and ensure that all error paths were thought of
and mitigated.  The &lt;code&gt;get_semantic_version_from_version_module&lt;/code&gt; function uses simple
techniques to get the &lt;code&gt;__version__&lt;/code&gt; field from the &lt;code&gt;version.py&lt;/code&gt; module compiled
within the project.  Once that version is figured out, the &lt;code&gt;verify_version_is_currrent&lt;/code&gt;
function is called to check to see if that version is the same as the version that
is currently registered at PyPi.org for
&lt;a href="https://pypi.org/project/pymarkdownlnt/"&gt;PyMarkdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code itself is not the most complicated code I have written recently, but it
does hit a mark within me for being some of the most satisfying work to complete.  As
the preface to the section indicates, having a process in place that lets a user
know when there is an update available just makes sense to me.  This work just
made me feel that the project itself was that much more complete.  If I had to
pin it down to a concrete concept and not a feeling, I would say that I believe
that useful applications should be able to dial home. As such, know that PyMarkdown
can dial home, it is that much closer to being a useful application.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week was interesting and fulfilling, but in weird and unusual ways.  One
of the fun metrics that I keep in my head is that there are now only thirty-three lines
of issues in the Issues List between &lt;code&gt;Priority 2&lt;/code&gt; and &lt;code&gt;Priority 3&lt;/code&gt;. That was a
good improvement.  And looking at that section of the list, at least half of the
items there will probably move to the &lt;code&gt;Priority 3&lt;/code&gt; section of the list or
to the GitHub issues list.  Not bad.  I also added over fifty new scenario
tests to the project and came away with only eight added issues that were not
resolvable right away. Decent for my work over the last week.&lt;/p&gt;
&lt;p&gt;But my best output from the week was my improved confidence that I had the right
design and right implementation for Nested Container Blocks.  Sure, there were
eight added issues that I needed to fix, but that is par for the course when talking
about software development.  But to have most of the 3 level and less variations
on Nested Container Blocks working without problems is something solid.  More
importantly, it helps me reframe my confidence with Nested Container Blocks to
a more positive level.&lt;/p&gt;
&lt;p&gt;And that is what made this week interesting and fulfilling. Just run of the mill
working hard to get things working together properly.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having been highly creative in the last few weeks, I need to take at least a week
off any do a tiny bit of brainless stuff.  As such, I am going to start looking at a few
products that are available to analyze open-source projects.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Double Checking My Double Checks</title><link href="https://jackdewinter.github.io/2021/11/01/markdown-linter-double-checking-my-double-checks/" rel="alternate"></link><published>2021-11-01T00:00:00-07:00</published><updated>2021-11-01T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-11-01:/2021/11/01/markdown-linter-double-checking-my-double-checks/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-e.md"&gt;last article&lt;/a&gt;, I talked
about my continuing efforts to clean up the scenario tests and the existing parser
issues. In this article, I talk about my efforts to bolster the consistency
checks I have built into the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By now, all the low hanging fruit from …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-e.md"&gt;last article&lt;/a&gt;, I talked
about my continuing efforts to clean up the scenario tests and the existing parser
issues. In this article, I talk about my efforts to bolster the consistency
checks I have built into the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By now, all the low hanging fruit from the Issues List have been picked, preserved,
and stored away. What are left are the more difficult to deal with issues.  Depending
on how one feels about challenges, this is either a good thing or a bad thing.
I choose to interpret it as a good thing.  But I also know that a challenge usually
means more work.
And in the case of getting the PyMarkdown project’s consistency checks working
at full strength, it was going to take a lot of intense debugging work.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/521b5ab61e38f30472562804f63797174a2c5ba9"&gt;26 Oct 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/479ace2d2d9dd5def81c72ef3b58bce6fb76f594"&gt;31 Oct 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-do-i-care-about-consistency-checks"&gt;Why Do I Care About Consistency Checks?&lt;a class="headerlink" href="#why-do-i-care-about-consistency-checks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I started to implement the parser part of the PyMarkdown project, I quickly
came to one unshakeable conclusion: I was undertaking something that would be huge
in scope.  I knew that the 673 examples that came with the
&lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown&lt;/a&gt;
specification were only the start of the testing. I figured that those cases would
be most useful in verifying that the correct HTML was being generated, and that verification
would lend some confidence to the parser processing the documents properly.  But
as those examples only include HTML output, I would need to verify the tokenized output
independently of those examples.  And my guess was that the other verification would explode
the number of scenario tests to somewhere over 2500, which is what I thought was a decent
estimate at the time.&lt;/p&gt;
&lt;p&gt;To overcome this perceived testing deficiency, I added two levels of checks to
verify the consistency of the parsed Markdown tokens.   The first level of checks,
the Markdown generator, tests the ability to parse from Markdown into a token stream
and back again.  While the presence of container blocks requires extra code to
manage the complexity, this is meant to check prove that that parsing is a relatively
simple bi-directional
process without any loss of information.  The second level check, the position
checker, is a more intense look at the information provided with each token.  Basically,
it specifically focused
on the size of each token and whether the position of the token plus the size
of the token equals the position of the next token.&lt;/p&gt;
&lt;p&gt;These two types of checks account for around 95% of the discovered and reported
issues that I have found so far.  And as the easy-to-find issues are mostly gone, it is the
difficult-to-find issues that are now showing up.  Knowing this, I can easily guess
that if any new scenario tests uncover issues, they will probably uncover issues with either nested
List elements or Link Reference Definition elements.  And in the last couple of
months, I believe that only a handful of parser errors have been found, a slightly
larger number of Markdown generation errors, with the position checked having
the most issues.  Put together, there are two problem areas that are well tested
in the parser, but the consistency checks are still finding issues, though mostly
within their own code.  Not perfect, that that knowledge helps.&lt;/p&gt;
&lt;p&gt;So why do I care about these consistency checks?  Because they are thorough
in finding issues.  That is, when I do not disable them.&lt;/p&gt;
&lt;h2 id="so-why-do-you-disable-them"&gt;So… Why Do You Disable Them?&lt;a class="headerlink" href="#so-why-do-you-disable-them" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The truth is that the parser and the Markdown generator are the most stable
components of the project.  Because of its very nature, the position checker is
very precise on where it expects tokens to be positioned.  As such, I have often
disabled the checks with &lt;code&gt;disable_consistency_checks=True&lt;/code&gt; when adding a
new feature or fixing an existing issue.  I usually try for between one hour
and three hours to get the checks working, but after the two-hour mark, I go
increasingly with disabling the check.
I honestly admit that this is a bad habit, and one that I am trying to stop following.
But that process does help me from getting stuck, so as with anything, it is not
all bad.&lt;/p&gt;
&lt;p&gt;In looking at what I wanted to do this week, I decided to focus on
examining the existing tests with consistency checks disabled&lt;sup id="fnref:pragma"&gt;&lt;a class="footnote-ref" href="#fn:pragma"&gt;1&lt;/a&gt;&lt;/sup&gt;, with a
goal to enable those checks.  Following a search-and-remove of that text from
the scenario tests, I had eighteen tests that I needed to get passing.  And as
I was removing that code, I did notice that the tests were in at least six groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 dealing with HTML Blocks&lt;/li&gt;
&lt;li&gt;1 dealing with Paragraphs&lt;/li&gt;
&lt;li&gt;1 dealing with Link Reference Definitions&lt;/li&gt;
&lt;li&gt;8 dealing with List Blocks&lt;/li&gt;
&lt;li&gt;1 dealing with Block Quotes&lt;/li&gt;
&lt;li&gt;5 from the “extra” scenario tests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even with this limited information, I knew that this work would likely take me
the rest of the week to complete.  With at least six distinct groups, it was
highly likely that I was going to look at six or more different areas of the
position checker code and address those issues.  That was going to be time
consuming, as that meant I was going to be looking all over the position checker
code.&lt;/p&gt;
&lt;p&gt;As I started fixing issues with the position checker, I was not surprised when
fixing those issues uncovered other errors with the Markdown generator and even
the Markdown parser.  It just made sense to me.  If there was an issue with one
of the two checkers, there was a decent chance that the issue would affect the
other checked.  And with both consistency checks disabled, there was also a decent
chance that a boundary condition failure was being missed.  From my experience,
I had a feeling that once I was able to clear up any issues with the consistency
checkers, I had a high degree of confidence that it would uncover at least two to
three issues in the other components.  After all, that is what those consistency
checks are designed to do.&lt;/p&gt;
&lt;p&gt;Finishing the work for
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/87"&gt;Issue 87&lt;/a&gt;,
the issue I created to contain this work, it took me until right around noon on
Sunday to get everything completed.  I am not in the least bit surprised that it
took that long to complete.  The amount of debugging I did this week was just
immense.  If I had to guess, I probably added as much debug code as non-debug
code, just to be able to follow what was going on in the code.  But the goal was
reached: all eighteen scenario tests are now fully enabled.&lt;/p&gt;
&lt;h2 id="the-journey"&gt;The Journey&lt;a class="headerlink" href="#the-journey" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The journey to get there was not an easy one, but it was one that paid off in
the end.  While these are in order of where they were found, the order in
which they were found was all over the place.  In one case, I found three issues
at the same time and had to focus on one before getting to the others.  In my mind,
it was more important to fix things and note how long they took to fix, not the order
in which they were fixed. That, and I arranged my notes by where they were found
and not the order in which they were fixed.&lt;/p&gt;
&lt;h3 id="it-just-so-happened-that-this-was-first"&gt;It Just So Happened That This Was First&lt;a class="headerlink" href="#it-just-so-happened-that-this-was-first" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Picking one of the tests at random, I settled on test function &lt;code&gt;test_list_blocks_237g&lt;/code&gt;.
While I was there for problems with the position checked, I noticed something
almost at once upon looking at the tokenized output for the test: the
Blank Line token was repeated when there was only one Blank Line present in the
Markdown document.  Enabling debug and rerunning the test, it was obvious to see
why.  As far as I could tell, the Blank Line element was being properly processed
within the Block Quote element.  But once that was complete, that same Blank Line
was also being handed off to the Leaf Block Processor where it was processed again,
yielding another Blank Line token.  It was a parser issue!&lt;/p&gt;
&lt;p&gt;Fortunately for me, I was able to figure out a quick way to resolve this issue.
The following code was already in place to handle the Blank Line within the
Block Quote element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;did_blank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;gt;already handled blank line. returning."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_bq_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I just made one minor change to that code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_bq_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as well as other changes to the returns in that function and the functions that
call that function. While it was correctly parsing the Blank Line the first time,
that function was not passing back any information that would allow the second
parsing of the Blank
line to be avoided.  By returning that &lt;code&gt;True&lt;/code&gt; from that code, downstream code
was notified that the Blank Line had already been processed, and that it did
not need to continue.&lt;/p&gt;
&lt;p&gt;That was one of the easier issues to debug.&lt;/p&gt;
&lt;h3 id="double-check-your-output-twice"&gt;Double Check Your Output… Twice&lt;a class="headerlink" href="#double-check-your-output-twice" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another test that looked weird when I looked at it was test function
&lt;code&gt;test_extra_007cx&lt;/code&gt;.  When I look at a scenario test that is failing, the first
thing that I do is go over the Markdown and the tokens to make sure that I
have familiarity with the content that is being parsed.  As I did that for
this test function, I noticed that trailing whitespace was missing.
After I double checked my initial findings, I did indeed have another parser
issue.  In this case, any whitespace within Text elements within Link elements
was being omitted from the Link token.  Not an easy find, but a good one.&lt;/p&gt;
&lt;p&gt;Tracking through the code with the debugger, I came to the &lt;code&gt;__complete_inline_loop&lt;/code&gt;
function, where I was firmly convinced the issue was.  Looking through the logs,
the Link token and the encompassed Text token agreed up to this point,
and they diverged after it.  And while it was not much, the space at the end of
the line was present in the Link’s Text element, but not in the Link element
itself.&lt;/p&gt;
&lt;p&gt;Doing a bit of experimentation, I added the following code to correct this behavior.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_string&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;end_string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;split_end_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"split_end_string&amp;gt;&amp;gt;$&amp;gt;&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;split_end_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_end_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;new_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_end_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_end_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;new_string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the trailing space was present in text block, but not in link element, I knew
that I should not touch the &lt;code&gt;new_string&lt;/code&gt; variable, only the &lt;code&gt;new_string_unresolved&lt;/code&gt;
variable.  It took a while to get the second &lt;code&gt;if&lt;/code&gt; conditional right, adding an
extra scenario test to help tune the code properly.&lt;/p&gt;
&lt;p&gt;The interesting part of trying to solve this issue was not the challenge in
fixing the issue itself, that was the easy part.  The interesting part was that
the definition of the issue was tricky and often nuanced.  As I said above:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;any whitespace within Text elements within Link elements was being omitted from
the Link token&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was easily a boundary case, and a good find.  But not all the solutions were
as easy as these two.&lt;/p&gt;
&lt;h2 id="transforming-into-markdown"&gt;Transforming Into Markdown&lt;a class="headerlink" href="#transforming-into-markdown" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was looking for a next scenario test to clean, function &lt;code&gt;test_block_quotes_extra_02ae&lt;/code&gt;
and its related scenario tests looked like they were an excellent choice.  At some point
in the resolution work, I noticed that there were four scenario
tests that were failing their consistency checks due to Markdown generation. Before
I spent more time digging deeper into the position check, I felt that my time would
be best spent getting these four functions working properly.&lt;/p&gt;
&lt;p&gt;As I examined each of the failing scenario tests, I noticed that they all focused
on one single are: extra whitespace at the start of a Block Quote element line.
There were slightly different variations on this issue, but underneath they all
had the same cause.  Digging into the cause, it was a simple matter to overlapping
data due to nested container elements.  Specifically, in the case of test function
&lt;code&gt;test_block_quotes_extra_02ae&lt;/code&gt;, it was the overlapping data of the List element
and the Paragraph element.&lt;/p&gt;
&lt;p&gt;During the development of the List elements and the Block Quote elements, I made
some decisions that have affected later work.  The easy decision to explain is the
decision about the Block Quote element.  Looking across all the examples in the
&lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown&lt;/a&gt;
specification, there are a good collection of properly spaced Block Quote characters
and improperly spaced Block Quote characters.  Given that information, I made the
hard choice to include those starting characters in the field &lt;code&gt;leading_spaces&lt;/code&gt;
for the Block Quote token that owns that line.  Managing that field and tracking
along with it will parsing and checking has been frustrating, but it still makes
sense to me.  However, because of the more rigorous spacing requirements and a reduced
quantity of improperly indented List element examples, for List tokens I
decided to record their indentation levels in the &lt;code&gt;indent_level&lt;/code&gt; and dealing
with any outliers as they surfaced.&lt;/p&gt;
&lt;p&gt;Based on the data that I had at the time, I sincerely believe that was the correct
choice to make.  Adding that same &lt;code&gt;leading_spaces&lt;/code&gt;  field to the List tokens
would have been too ambitious given the requirements for it.  And whether I liked
it or not, this situation was a direct result of that decision.  But because of
those decisions when this Markdown is parsed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;quote&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the last line gets parsed into a Paragraph token starting with two spaces inside
of a List token with an indent of &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;found_block_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;was_list_found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container_token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;found_block_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;was_list_found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_block_token&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_list_found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;specific_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;found_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;specific_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;specific_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It took a bit of time to get there, but finally I arrived at the above code
to mitigate this issue.  Because of the overlap the whitespace in the Paragraph
token and the List indent, this code detects that very circumstance with an existing
Block Quote element and changes the &lt;code&gt;extracted_whitespace&lt;/code&gt; variable to reduce
the amount of whitespace.  With a decent amount of testing, this was able to knock
a couple of issues off the list all by itself!&lt;/p&gt;
&lt;h2 id="position-checker-woes"&gt;Position Checker Woes&lt;a class="headerlink" href="#position-checker-woes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point in the debugging process, I was keenly aware of two things.
The first was that I probably had any existing parser issues and Markdown generator issues
resolved.  While that meant that I needed to be vigilant about my work in getting
the position checker issues resolved, it gave me the confidence to know that I
probably would get most of the serious issues resolved.  At the time and while I was
writing this, I was incredibly careful to think “most” and not “all”.  Issues are tricky
things, and my experience makes me believe that you never get all.&lt;/p&gt;
&lt;p&gt;The second thing was that this work was taking a lot of time.  Just for the analysis,
debugging, fixing, and testing of the three prior issues, I was up over twelve hours
in total.  While that included one or two of the issues in this section, the
point was clear.  This was taking a lot of time to get right.  But I still felt
strongly that it needed to get done, so I continued to push forward.&lt;/p&gt;
&lt;h3 id="providing-foundational-support"&gt;Providing Foundational Support&lt;a class="headerlink" href="#providing-foundational-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The most obvious thing that I needed to add was a sense of whether a Block Quote
element was in effect when validating a given set of tokens.  While the actual code
to use it would come later, this code was added in a couple of places, such as in
the &lt;code&gt;__validate_block_token_height&lt;/code&gt; function, to calculate that token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;container_token_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;block_container_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_token_index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;container_token_index&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;block_container_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;container_token_index&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I would normally be more carefully about copy-and-paste code, I already
have plans to revisit the consistency check modules to see about improving them.
As such, this was both quicker and would give me a chance to evaluate some refactoring
tools in the new future.&lt;/p&gt;
&lt;p&gt;Along the same path, I added proper support for Block Quotes elements within List
elements in the &lt;code&gt;__maintain_block_stack&lt;/code&gt; function. It was not much, but I knew that
I needed to have that value calculated in multiple places. This was providing that support
while adding the necessary code only in a single place.&lt;/p&gt;
&lt;h3 id="list-elements-and-block-quote-elements-redux"&gt;List Elements and Block Quote Elements - Redux&lt;a class="headerlink" href="#list-elements-and-block-quote-elements-redux" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Like the work detailed in the
&lt;a href="#transforming-into-markdown"&gt;Transforming Into Markdown&lt;/a&gt; section,
this change to the &lt;code&gt;__validate_new_line&lt;/code&gt; function needed to account for Block Quote
tokens and List tokens being used at the same time.  Although the code looks slightly
different, both changes are accomplishing the same goals, just in different ways.
In this function, because of the position checks that go on, the code was a lot
more convoluted and nuanced.  But with a solid group of five scenario tests that
all looked similar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FAILED test/test_markdown_block_quotes.py::test_block_quotes_extra_02ae - AssertionError: Line:4:[para(4,5):  ]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_237x - AssertionError: Line:3:[para(3,8):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_237f - AssertionError: Line:4:[para(4,8):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_237g - AssertionError: Line:4:[para(4,8):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_238a - AssertionError: Line:3:[para(3,10):]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it was easy to go through and look for commonalities. It did take a fair amount
of time to get the solution dialed in properly, but it was worth it.&lt;/p&gt;
&lt;h3 id="block-quotes-and-blank-lines"&gt;Block Quotes and Blank Lines&lt;a class="headerlink" href="#block-quotes-and-blank-lines" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not yet finished with those tests, I resolved the issue in the previous section,
only for me to be greeted by another issue with those same five scenario tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FAILED test/test_markdown_block_quotes.py::test_block_quotes_extra_02ae - AssertionError: Line:3:[BLANK(3,2):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_237x - AssertionError: Line:2:[BLANK(2,3):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_237f - AssertionError: Line:3:[BLANK(3,3):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_237g - AssertionError: Line:3:[BLANK(3,3):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_238a - AssertionError: Line:2:[BLANK(2,3):]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had taken care of one issue, only to have another one replace it. I cannot say
that I was surprised because I was not.  This entire week was about things getting
uncovered that also needed fixing.  And like the other issues, this one was
obvious when I looked at it.  When computing the estimated column number for a
Blank Line element, the estimated was sometimes off by two within Block Quote elements.&lt;/p&gt;
&lt;p&gt;While this was obviously the problem, the issue with this issue was in defining the
circumstances in which this was the problem.  This code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;leading_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;did_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;container_block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_next_leading_space_part&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was obviously being used in all cases, and there was at least one case where it
was being used improperly.  After performing handful of experiments, it turned out that
there were three cases.  The first was if the Blank Line token was followed by
end tokens.  If it was only followed by end tokens, then that recalculation
needs to be applied.  The second was if the “block” of end tokens after the
Blank Line did not include an end List token.  Finally, the block part of
the logic depended on whether the last block token was a Block Quote token
or if the first block token was a Block Quote token.&lt;/p&gt;
&lt;p&gt;After about four hours of experimentation and debugging, I arrived at this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;top_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;top_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;top_block_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;top_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top_block_token&lt;/span&gt;

    &lt;span class="n"&gt;needs_recalculation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;was_end_list_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;next_token_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;next_token_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_token_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_end_token&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_token_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;was_end_list_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="n"&gt;next_token_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_token_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;needs_recalculation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;needs_recalculation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;was_end_list_end&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;top_block&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;needs_recalculation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;leading_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;did_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;container_block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_next_leading_space_part&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;top_block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_next_leading_space_part&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It backed up my earlier suspicion that the code was right, just not being used
properly.  It did take a while to nail down the nuances of this code, but it
all made sense then I got there!&lt;/p&gt;
&lt;h3 id="second-verse-same-as-the-first"&gt;Second Verse, Same as The First&lt;a class="headerlink" href="#second-verse-same-as-the-first" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And it seems like a continuing theme, having to adjust for Block Quote idents
in various pieces of code, and the changes to the &lt;code&gt;__process_previous_token&lt;/code&gt; function
and the &lt;code&gt;__verify_next_inline_handle_previous_end&lt;/code&gt; were no different. The change
for the &lt;code&gt;__process_previous_token&lt;/code&gt; function was to add this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block_container_token&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;old_line_number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;estimated_line_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;estimated_line_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;old_line_number&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;current_inline_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_link_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;
    &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;estimated_column_number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the change to the &lt;code&gt;__verify_next_inline_handle_previous_end&lt;/code&gt; function was
to add this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;new_lines&lt;/span&gt;
    &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_estimated_column_number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both sets of changes are almost identical, except for a couple of slight changes.
But that was always expected, so it was comforting in a way to find these last
two sets of changes to be so alike.  If the triggering condition was met, update
the &lt;code&gt;leading_text_index&lt;/code&gt; field, grab the part of the &lt;code&gt;leading_spaces&lt;/code&gt; field
relating to the index, and add the length of that value to the current column
number.&lt;/p&gt;
&lt;p&gt;And with that, things were clean.  Well, almost.  As I mentioned at least once
in this article, nested container blocks are nuanced.  As such, when I tried to
test something against alternating container blocks that were four levels deep,
I ran into an issue.  While I do want to tackle that as time allows, this work
was about cleaning up disabled consistency checks, not nested blocks.  As such,
left those two tests in the code and disabled them for now.&lt;/p&gt;
&lt;p&gt;I must admit that I wanted to deal with them right away, but I knew that I had
enough to do as it was.  Taking that on would just delay things.  I believe
I made the right move in delaying that work, but sometimes it does not feel that
way.&lt;/p&gt;
&lt;h2 id="doing-my-usual-cleanup"&gt;Doing My Usual Cleanup&lt;a class="headerlink" href="#doing-my-usual-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was going through that work, I did notice that there were unusual
cases where I was still using string concatenation instead of f-strings.  While
gearing up for the actual check of the reported issues, I thought it would be
good to go through and clean those up.  While it does not show us as increased
code coverage or increased scenario coverage, it just felt good to get it done
and have everything using f-strings.&lt;/p&gt;
&lt;h2 id="the-main-event"&gt;The Main Event&lt;a class="headerlink" href="#the-main-event" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, after all this work, there was one more thing to do: The Main Event.
With a solid set of passing tests, with all consistency checks working properly,
I could now start verifying that the Paragraph token’s &lt;code&gt;rehydrate_index&lt;/code&gt; field
and the Block Quote token’s &lt;code&gt;leading_text_index&lt;/code&gt; field were
working as intended. This was the plan all along, but I had to be sure everything
else was in place before I could start on this.&lt;/p&gt;
&lt;p&gt;Working through all the scenario tests listed in the issue, I was able to verify
that any paragraph hydration concerns with those scenario tests had been fixed as
I was unable to reproduce even one failure.  There were now multiple checks to verify
that the &lt;code&gt;rehydrate_index&lt;/code&gt; field was being used properly, and all those checks were passing properly.
That was the focus, and after a solid week of work to get there,
I was able to resolve those issues from the Issues List. That was the good news.&lt;/p&gt;
&lt;p&gt;The bad news was that the same could not be said for the checks for the &lt;code&gt;leading_text_index&lt;/code&gt;
field.  At the end of the &lt;code&gt;__rehydrate_block_quote_end&lt;/code&gt; function
was an assert that was commented out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# assert (&lt;/span&gt;
&lt;span class="c1"&gt;#     leading_text_index == expected_leading_text_index&lt;/span&gt;
&lt;span class="c1"&gt;# ), f"leading_text_index={str(leading_text_index)};expected_leading_text_index={str(expected_leading_text_index)}"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After two hours of trying to resolve all the issues, I added an issue to the
project’s Issues List and cleaned things up.  What I was able to do however, was
to get it closer to the final state:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;leading_text_index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;expected_leading_text_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;expected_leading_text_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"leading_text_index={leading_text_index};expected_leading_text_index={expected_leading_text_index}"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This uncovered an unnoticed issue in the &lt;code&gt;parse_paragraph&lt;/code&gt; function that caused
the parser to emit an extra newline character.  This issue is a weird
boundary condition, and without the above assert, the likelihood of me finding
it was remote at best.  Things must align properly for this to happen,
as the code to detect this condition shows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;apply_paragraph_adjustment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;container_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;top_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;container_index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;container_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
        &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;container_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;apply_paragraph_adjustment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;apply_paragraph_adjustment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, once again, it took a while to figure it out, but I got there.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes the solution hits you right away, and sometimes you must fight for
every part of that solution. This week, there was a lot of fighting.  While some
of the time it was about the problem and not the solution, most of the time it
was around discovering the nuances of the problem.  And that was challenging, but
the work was exceedingly difficult to focus on.  It required me to keep a level head and to clearly write things
out for myself, so that I could look at the problem from different angles.&lt;/p&gt;
&lt;p&gt;And that is what ultimately saved me.  Writing things out.  Yes, lots of scribbles
and pages of weird drawings with arrows and boxes, but it worked.  What I found
useful about my usual practice of using paper to design was that in trying to
figure out the actual problem, I was not establishing a clean visualization of the
problem.  Only when I was able to get enough test data represented in a cohesive
form on those pieces of paper, all visible at the same time, was I able to properly
view the problems and make my breakthroughs.&lt;/p&gt;
&lt;p&gt;Now, am I saying that everyone should use paper? Nope.  But for me, the pivotal thing
is that it helps me to visualize things.  It does not matter if it works
for anyone else, but that helps me to visualized.  And the more difficult things
get, the more important it is to find a way to visualize things in a cohesive
manner that is digestible.  For me, that formula is a decent amount of paper scribbles
mixed in with good logging.  That just allows me to keep state and assumptions
on paper while testing them as I go through the log files and recording the actual
changes. As I said at the start of the paragraph, it just must work for me.&lt;/p&gt;
&lt;p&gt;So, was it hard? Yes… it was hard.  But I also moved the project forward while
starting to refine another skill to add to my toolbox.  That was unexpected, but
cool!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking ahead in the Issues List, I would like to make more progress on getting
things cleared out.  And with me removing the disabled consistency checks
this past week, I at least want to try and tackle the pragma issues.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:pragma"&gt;
&lt;p&gt;Except for pragmas, that hopefully will be next week. &lt;a class="footnote-backref" href="#fnref:pragma" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Fun With Nested Containers</title><link href="https://jackdewinter.github.io/2021/10/25/markdown-linter-fun-with-nested-containers/" rel="alternate"></link><published>2021-10-25T00:00:00-07:00</published><updated>2021-10-25T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-10-25:/2021/10/25/markdown-linter-fun-with-nested-containers/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-d.md"&gt;last article&lt;/a&gt;, I talked
about my continuing efforts to clean up the scenario tests and the existing parser
issues. In this article, I continue to talk about cleaning up existing parser issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is yet another week of me working on bugs, and I can easily …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-d.md"&gt;last article&lt;/a&gt;, I talked
about my continuing efforts to clean up the scenario tests and the existing parser
issues. In this article, I continue to talk about cleaning up existing parser issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is yet another week of me working on bugs, and I can easily tell that progress
is being made to reduce the amount of outstanding work.  As I look at the Issues
List, the number of issues above the Priority 3 line is dwindling, and that is
a good thing.  Depending on how I look at the Issues List, I can just about see
both headings for Priority 2 and Priority 3 at the same time!  For me, that is
progress!&lt;/p&gt;
&lt;p&gt;And while it was not planned, almost all the work that I did this week was related
to nested container blocks in some way, so that was interesting.  As the only way
that I make that progress is by buckling down and getting stuff done, here I go!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d3618cc194ae490a71e6360ebc6473616ff40095"&gt;20 Oct 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/e55b0bbfbee2cdfee8666489e65da7fc6106f14a"&gt;24 Oct 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="issue-72-fun-with-nested-blocks"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/72"&gt;Issue 72&lt;/a&gt; - Fun with Nested Blocks&lt;a class="headerlink" href="#issue-72-fun-with-nested-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Picking an issue somewhat at random, I ended up looking at the following issue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;md006&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt; &lt;span class="n"&gt;works&lt;/span&gt; &lt;span class="n"&gt;within&lt;/span&gt; &lt;span class="n"&gt;bq&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;level&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ordered&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;unordered&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;unordered&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ordered&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I delved into the issue, I must admit that I never determined the real purpose
of this rule.  First off, the original rule was disabled, but there was no documented
reason for disabling the rule.  If I had to guess, it was because there was
another rule that did the job better than that one.  Which rule replaced this rule?
I am not sure. If I had to guess, perhaps it was Rule Md007, though I do not
feel that Rule Md007 works as an improved version of Rule Md006.  Secondly, the
rule documentation for Rule Md006 seems… well… incomplete.
It describes lists at the start of the line but does not take any time to exclude
sublists.  It is almost as if someone started to make a rule, gave up in the middle,
and then published that rule.&lt;/p&gt;
&lt;p&gt;Those feelings left me with an interesting problem.  The primary goal of the PyMarkdown
project is to provide parity with the Markdown Lint rules.  So far, this is the
only rule where I am not sure that I can provide that required parity. In this
case, I strongly feel that parity alone is not good enough.  While I realized that this
rule is also disabled in PyMarkdown, I did not feel that it gave me any leeway
in implementing something that I felt was half done.  As always, I felt that I
need to do what I thought was right for the PyMarkdown
project.  And in the end, that is what I focused on.  For every other rule,
parity was the best choice.  But I made a firm decision that for this rule, leaving
the rule as-is was the wrong decision.  I needed my version of this rule to
be something I could stand behind my work on.&lt;/p&gt;
&lt;p&gt;Given that decision, I started to work on the small adjustments needed to change
the rule to allow it to function with Unordered List elements
inside of another container.  First, I started by adding ten new scenario
tests and verifying that each of the tests were failing.  Then I went back to the
rule module and started to make a couple of targeted changes.  Instead of having
a &lt;code&gt;__list_stack&lt;/code&gt;, I replaced it with a &lt;code&gt;__token_stack&lt;/code&gt; and placed both List elements
and Block Quote elements on the stack.  After a couple of adjustments to ensure
that the Block Quotes were being added and removed from the stack properly, I moved
the calculation of the expected indentation value into the new
&lt;code&gt;__calculate_expected_indent&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;From there, it was largely trial and error as I worked through the existing scenario
tests, adjusting the calculations within the &lt;code&gt;__calculate_expected_indent&lt;/code&gt; function
as I went.  One scenario test at a time, I moved closer to having them all passing
until they were all passing. The big addition to the &lt;code&gt;__calculate_expected_indent&lt;/code&gt;
function was that I needed to take the Block Quote characters into account.  Once
I had that figured out, the rest of the stuff was easy.&lt;/p&gt;
&lt;h2 id="issue-74-more-fun-with-nested-blocks"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/74"&gt;Issue 74&lt;/a&gt; - More Fun With Nested Blocks&lt;a class="headerlink" href="#issue-74-more-fun-with-nested-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I had just finished work on nested container blocks, I thought that it
might be useful to get some other nested block issues out of the way as
well.  I decided to tackle this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;### &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt; &lt;span class="mi"&gt;270&lt;/span&gt;, &lt;span class="mi"&gt;271&lt;/span&gt;, &lt;span class="mi"&gt;237&lt;/span&gt;, &lt;span class="mi"&gt;238&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;blank&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;starts&lt;/span&gt; &lt;span class="nv"&gt;after&lt;/span&gt; &lt;span class="nv"&gt;bq&lt;/span&gt; &lt;span class="nv"&gt;starts&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;varying&lt;/span&gt; &lt;span class="nv"&gt;spaces&lt;/span&gt; &lt;span class="nv"&gt;between&lt;/span&gt; &lt;span class="nv"&gt;bqs&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;no&lt;/span&gt; &lt;span class="nv"&gt;space&lt;/span&gt; &lt;span class="nv"&gt;between&lt;/span&gt; &lt;span class="nv"&gt;bq&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;following&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was a bit of a meaty issue to tackle, mostly because it is not very clearly
defined.  Specifically, when I started digging into this issue and breaking it
apart, it resulted in seven new variations of the &lt;code&gt;test_list_blocks_271&lt;/code&gt; scenario
test, three new variations of the &lt;code&gt;test_list_blocks_270&lt;/code&gt; scenario test, and
two variations a piece of the &lt;code&gt;test_list_blocks_237&lt;/code&gt; and &lt;code&gt;test_list_blocks_238&lt;/code&gt;
scenario tests.  For the most part, everything worked well, and all the tests
passed.  In addition, there were two tests dealing with the alternating four
levels of nesting scenario tests which I postponed until later.&lt;/p&gt;
&lt;p&gt;Other than those two scenario tests, the only scenario test that I had a problem
with involved the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Blockquote&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;continued&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the parser first encountered this Markdown document, it incorrectly parsed
the text and merged it all together.  But looking at the reference HTML,
the reference document and the tokens were not matching up.  The reference HTML
had two Block Quote elements, with one line of text in each element.  The tokens
had everything in one Block Quote element, with the text appended together.
That difference is what I needed to figure out.&lt;/p&gt;
&lt;p&gt;Walking through the Markdown in my head, it took a bit for me to get the Markdown
parsing in the correct context. When the second line is reached, there are already
three active
containers in play: a List element, a Block Quote element, and another List element.
When the parser then encountered the second line, it only saw the Block Quote starting
on that line and ignored the List elements completely.  That was the main problem.
To parse the document correctly, the parser needed to close all three
containers, as the main List container requires an indent of two spaces, and that
indent is not provided.  Only after those containers are closed can the line be
properly parsed.  With the slate being effectively cleared, a new Block Quote
can then be opened to hold the second line of text, just as the reference HTML
dictates.&lt;/p&gt;
&lt;p&gt;But how to get there?&lt;/p&gt;
&lt;h3 id="doing-the-hard-work"&gt;Doing The Hard Work&lt;a class="headerlink" href="#doing-the-hard-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Most of the changes occurred in the &lt;code&gt;is_block_quote_start&lt;/code&gt; function.  During the
initial parsing of the document, the parser believed that the text on the second
line was a continuation of the first line due to paragraph continuation lines.
As those lines apply to both Block Quote elements and List elements, removing
the first two characters from the second line would enact exactly that scenario.
So, care had to be taken not to destroy that existing functionality.&lt;/p&gt;
&lt;p&gt;The first part of this solution was the easy part.  I changed the &lt;code&gt;is_block_quote_start&lt;/code&gt;
function to look for any List elements near the start of the &lt;code&gt;token_stack&lt;/code&gt; list.
If the potential Block Quote start column had any List elements before it where
the leading spaces were not present,
then the algorithm closed all open elements back to and including that List element.
Basically, if current line was not indented enough so that the encompassing List
element was satisfied, everything back to that point needed to be closed. That
code was a bit tricky in places, but relatively easy to figure out.&lt;/p&gt;
&lt;p&gt;The tricky part was what to do at that point to get the parsing to continue.
All the obvious options were messy.  Most of them were variations of calling
back into the Container Block Processor and reprocessing the line.  A couple of
the variations were simply trying to bend the processors to do something that I
did not feel comfortable with.  I tried about four different solutions before
I decided that I needed to do something different.  So, I finally tried
to do something unexpected:  I tried the non-obvious solution.  Normally, I would
report that it was the dead simple solution that worked the best, but in this case,
that solution was more work than it was worth.  In this case, I just had a hunch
that something different was needed.&lt;/p&gt;
&lt;p&gt;After taking a handful of deep breaths, I decided that the non-obvious but best option
was to use the parser’s requeue ability.  It took me a bit to flush the concept
out, but it made sense in a non-obvious sort of way.  Once I added any tokens
that arose from the blocks that were closed from the close-blocks action, the only
thing left to do was to properly parse the line.  Putting extra code in that
function to call back into the parser just was not working.  On a whim, thinking
that it probably would not work, I added the lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines_to_requeue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;requeue_line_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RequeueLineInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then returned that &lt;code&gt;requeue_line_info&lt;/code&gt; variable after fourteen &lt;code&gt;None&lt;/code&gt;
keywords.  And it worked!  Well, it mostly worked, but it got me close enough
to getting the document parsed properly that I was able to finish the work in
about ten minutes with some smart debugging.&lt;/p&gt;
&lt;p&gt;What saved me was that while I wanted to keep things simple, I was not afraid to
try something unusual.  Just because it had not worked before, did not mean it was
not going to work this time.  And the idea itself was a stretch.
Up to that point, the requeue
feature of the parser was only used with Link Reference Definitions.  But if there
was another case for using it to make the code cleaner, this was it. Once the
effects of closing the blocks was completed, the cleanest way for the line to
be processed properly was to requeue the line for further processing.  The handling
of the &lt;code&gt;requeue_line_info&lt;/code&gt; return variable was already supported, so no other
code was needed.&lt;/p&gt;
&lt;p&gt;And except for &lt;a href="https://github.com/psf/black/blob/main/README.md"&gt;Black&lt;/a&gt; placing
each return value on its own line&lt;sup id="fnref:record"&gt;&lt;a class="footnote-ref" href="#fn:record"&gt;1&lt;/a&gt;&lt;/sup&gt;, the code was compact and
localized to where the issue was.  That made it easy to tidy things up and verify
that all tests were passing properly before going on.  I did go back and
forth on whether to leave the &lt;code&gt;container_depth&lt;/code&gt; variable debugging in, but as
I have added it and removed it during debugging sessions three times now, I
figured I might as well leave it in.&lt;/p&gt;
&lt;h2 id="issue-76-nested-unordered-list-fun"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/76"&gt;Issue 76&lt;/a&gt; - Nested Unordered List Fun&lt;a class="headerlink" href="#issue-76-nested-unordered-list-fun" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The solution to this issue was so funny to me that it made me laugh.  By looking
at the project code, anyone can tell that I prefer descriptive names for my functions
and variables.  Instead of &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;, I am more likely to use &lt;code&gt;inner_loop_index&lt;/code&gt;
and &lt;code&gt;outer_loop_index&lt;/code&gt;.  It is something that has served me well over the years
and is something I plan to keep on doing.  But that does not mean I always use
it flawlessly.&lt;/p&gt;
&lt;p&gt;In looking over the scenario tests for Rule Md007, I decided that it needed at
least one solid complex scenario test to ensure things were working properly.
As such, I added this Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;

 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
      &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was a good complex test because the only List start or List Item that was
in the right column was the last line.  Every other line was off by at least one
column, and in some cases, off by two columns.&lt;/p&gt;
&lt;p&gt;But when I ran the document through PyMarkdown the first time, the errors that
I got back were not the complete list I was expecting.  Narrowing things down
to the &lt;code&gt;__process_eligible_list_start&lt;/code&gt; function, I debugged through the
following code until I noticed something.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws_before_marker&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;current_start_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;allow_list_removal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws_before_marker&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I did not really notice it clearly at first, but I noticed that something was
weird about the code.  It took me fifteen minutes before I noticed it clearly
enough that I could explain it to myself:  the &lt;code&gt;while&lt;/code&gt; statement was comparing
an index to a depth.  As I walked through it again, the reasoning for the error
crystalized before my eyes.&lt;/p&gt;
&lt;p&gt;In counting terms, depths and positions are usually different than indices.
The first group of items usually start counting at 1, where the indices always
start counting at 0. And in this case, that made all the difference.  Instead of
comparing an index to a depth, I either needed to compare an index to an index
or a position to a depth.  After flipping a coin, I changed the above code
to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws_before_marker&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;last_stack_depth_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;current_start_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;last_stack_depth_index&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;allow_list_removal&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws_before_marker&lt;/span&gt;
    &lt;span class="n"&gt;last_stack_depth_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I could have gone either way, but once I altered the &lt;code&gt;last_stack_depth&lt;/code&gt; variable,
it just seemed like the right choice.  More importantly, with those minor changes,
the tests that were previously passing were still passing, as were the tests that
were previously failing.&lt;/p&gt;
&lt;p&gt;Yup, I had an off-by-one error, and I fixed it!  Me, finding an off-by-one
error in my own code.  I laughed.  Maybe you had to be there to get why that
was funny.  But trust me, it was.&lt;/p&gt;
&lt;h2 id="issue-79-fixing-rule-md005"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/79"&gt;Issue 79&lt;/a&gt; - Fixing Rule Md005&lt;a class="headerlink" href="#issue-79-fixing-rule-md005" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rule Md005.  A simple rule, but one that I was never one hundred percent happy
with.  But that was about to change with this issue.  This issue was basically
my “stop complaining and start fixing” issue for this rule.&lt;/p&gt;
&lt;p&gt;From the top, there was never anything wrong with this rule, at least
nothing I could point to at the time.  It just did not feel right.  When I was
implementing the rules and checking out their documentation, I was just
left with a feeling that I had missed something in the rule or its scenario tests.
Along the way, I added an issue about
checking for left alignment and right alignment in the same list, but I knew
that there was more to my feeling than that.  I just had to figure out what that
feeling was based on and deal with it.&lt;/p&gt;
&lt;p&gt;I started the process by looking through the existing scenario tests for any
holes that I perceived in the tests.  Adding scenario tests to address those
spots, I ended up with ten new scenario tests.  As I started testing the
Unordered List elements, I found out that the new tests for those elements were
passing with only small adjustments to do with the reported expected and actual
measurements.  That was good.  But when I got to the Ordered List elements, things
were not in the same shape.  While I had done a decent job on covering simple scenarios
in the original tests, the more complicated scenario tests were largely ignored.&lt;/p&gt;
&lt;h3 id="how-did-this-happen"&gt;How Did This Happen?&lt;a class="headerlink" href="#how-did-this-happen" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Digging into the code, I was able to quickly determine what the issues were.
Before I started addressing this issue, the code for detecting the failures for
List elements was relatively simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__report_issue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;original_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_content&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;original_text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
    &lt;span class="n"&gt;original_text_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;current_prefix_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_content&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;original_text_length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;current_prefix_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__report_issue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If a new List Item was detected, and that List Item element was part of an
Unordered List element, then a simple check was made against the indent level
of the parent List element.  Anything other than that was a failure.  For the
Ordered List Items, there was a bit more to the calculation.  If the two
&lt;code&gt;column_number&lt;/code&gt; fields were the same, then the List Item was left-aligned with
the parent List element, and things were okay.  Otherwise, a calculation was done
to see if the new List Item was right aligned with that same parent List element.&lt;/p&gt;
&lt;p&gt;There is nothing wrong with that logic… for simple cases.  All the tests were
passing properly, and it was detecting each problem properly and triggering the
rule properly.  But the scenario tests that I added were for more complex scenarios,
and that is where that logic failed.  The failures were not about the individual
lines themselves, but how different lines and different lists interacted with
each other.&lt;/p&gt;
&lt;h3 id="what-next"&gt;What Next?&lt;a class="headerlink" href="#what-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After starting to understand the scope of the issues, I took a bit of a break
and did some stuff around the house before getting back to the problem.  Looking
at the issue with a fresh set of eyes, I figured out that there were three significant
issues that I needed to take care of.  The first is that there was no cohesion
between lists within the same base list.  The second is that the determination
of alignment for an Ordered List was being made on a List Item by List Item basis.
Finally, the third issue was that List Start tokens were being left completely
out of the check.&lt;/p&gt;
&lt;p&gt;Leaving a copy of the existing rule in the editor, I started working on a new
rule from scratch.  I started by copying the &lt;code&gt;__report_issue&lt;/code&gt; function and
everything above it over to the new rule, followed by adding a blank &lt;code&gt;next_token&lt;/code&gt;
function.  I then started by adding the framework for the Unordered List elements
back into the function.  Except for a couple of small improvements, that handling
was working fine, so there was no need to make drastic changes to it.  But
the Ordered List elements were another story.&lt;/p&gt;
&lt;p&gt;Instead of tackling each of the above issues individually, I took a step back
and quickly designed a better rule.  Addressing the third problem first, I needed
code that could work with either a List Item or a List start to decide if it
was properly indented.  To that extent, I created the &lt;code&gt;__handle_ordered_list_item&lt;/code&gt;
function that accepted either token as its input and tested that thoroughly
before moving on.  As that function was the cornerstone of the design, it was
critical that I got it right!&lt;/p&gt;
&lt;p&gt;I then designed around the second issue by delaying the determination of the
alignment of the list until the end of the list.  Before the rule had been deciding
that line by line, and it did not work well.  Using this design, I could make a
clean determination of the alignment once using every list element.  Once I had
that determination, I could call the &lt;code&gt;__handle_ordered_list_item&lt;/code&gt;
function at the end of the list without any loss of functionality.  Instead,
it allowed me to simplify the &lt;code&gt;__handle_ordered_list_item&lt;/code&gt; code to look for
one alignment or the other, not both.  That cleared up that issue.&lt;/p&gt;
&lt;p&gt;Finally, I looked at the first issue and came up with a quick and dirty solution.
Whenever a new Ordered List was started, it stored an alignment of &lt;code&gt;UNKNOWN&lt;/code&gt;
at the level of the sublist.  Then, when a positive determination of the
alignment was made, it would update that value to &lt;code&gt;LEFT&lt;/code&gt; or &lt;code&gt;RIGHT&lt;/code&gt;.  Within
the &lt;code&gt;__handle_ordered_list_item&lt;/code&gt; function the following code was added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;list_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;list_alignment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ordered_list_alignment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;list_level&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;list_alignment&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;OrderedListAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RIGHT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At that point, the calculation was as simple as determining the depth of the List
element, grabbing the alignment from the &lt;code&gt;__ordered_list_alignment&lt;/code&gt; field, and
using that value to determine what alignment to check against.  As part of the
design, I verified that unless the alignment was determined to be &lt;code&gt;RIGHT&lt;/code&gt;, the
other two alignments were equivalent.  That helped simplify things.&lt;/p&gt;
&lt;p&gt;It was pedantic, but I walked through it all on paper before writing even
one line of code.  It took a bit of time, but it was worth it.  By doing that,
I was quickly able to spot a couple of design flaws and fix them right away.
I do admit that I had a couple of small “black boxes” that were labelled
&lt;code&gt;calculate alignment&lt;/code&gt; and &lt;code&gt;handle ordered list&lt;/code&gt;, but I was confident that
I had a solid grip on the algorithms for those two components.  It was the
rest of the design I was worried about.&lt;/p&gt;
&lt;p&gt;Once done, I found that with the design in hand, the code came naturally from the
design.  I started with
everything in the &lt;code&gt;next_token&lt;/code&gt; function before moving groups of functionalities into
their own functions. The &lt;code&gt;__compute_ordered_list_alignment&lt;/code&gt; function was used to
calculate the alignment of a list, and &lt;code&gt;__handle_ordered_list_item&lt;/code&gt; was used to
evaluate both Ordered List start tokens and Ordered List Item tokens.  The remaining
&lt;code&gt;handle_*&lt;/code&gt; were used to manage the delegation of calls to those functions, as well
as ensuring that the various fields to collect the required information were maintained.&lt;/p&gt;
&lt;p&gt;It was unexpected, but exception for a couple of small errors that were easily
fixed, the updated version of the rule worked on the first try.  I do not attribute
that to any prowess in writing Python code. Rather it was because I took the time
to design it on paper and walk through the scenarios in my head before going on.
I do admit that sometimes I do some “cowboy coding”, but unless it is something
really simple, I find that those sessions are more hit-or-miss than I prefer.&lt;/p&gt;
&lt;p&gt;But what is important to me is that this entire development process has helped
me hone my design skills. And it was cases like this where I got to use those
skills to produce something that worked very cleanly and very solidly.&lt;/p&gt;
&lt;h2 id="issue-77-fun-with-scripts"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/77"&gt;Issue 77&lt;/a&gt; - Fun with Scripts&lt;a class="headerlink" href="#issue-77-fun-with-scripts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With time left before my noon&lt;sup id="fnref:noonish"&gt;&lt;a class="footnote-ref" href="#fn:noonish"&gt;2&lt;/a&gt;&lt;/sup&gt; deadline, I wanted to look at
a puzzling issue that was just reported within the last couple of days.  In this
issue, the reporter claimed that the &lt;code&gt;pymarkdown&lt;/code&gt; script was not being assigned
the right permissions upon installation.  I double checked with them, and they
confirmed the steps the included with the issue.  It just was not working for them.&lt;/p&gt;
&lt;p&gt;Not wasting any time, I switched over to my &lt;code&gt;pymtest&lt;/code&gt; project and ran my usual
release tests against the version of the project I have built in the &lt;code&gt;dist&lt;/code&gt;
directory.  Two minutes later, I walked through the test script and the output
one line at a time, and everything looked good.  I then switched to the variation
of that script that grabs the package from PyPi.org and performed the same
verification with the same results.  Everything looked good so far.&lt;/p&gt;
&lt;p&gt;Switching over to my Ubuntu shell running on WSL2, I repeated the same tests,
and everything looked fine.  Nothing deviated from my &lt;code&gt;pymtest&lt;/code&gt; project except
the name of the script, the &lt;code&gt;upymtest&lt;/code&gt; project it was in, and that it was running
under Ubuntu instead of Windows 10.  I had to be missing something. But what?&lt;/p&gt;
&lt;h3 id="starting-from-scratch"&gt;Starting From Scratch&lt;a class="headerlink" href="#starting-from-scratch" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I knew I had to do something different, but I did not have a clue of what to
change.  So, the only thing I could think of was to go back to the beginning and
build my way back up to the level of the script in the &lt;code&gt;upymtest&lt;/code&gt; project.
I started by going into the &lt;code&gt;upymtest&lt;/code&gt; project and doing a &lt;code&gt;pipenv --rm&lt;/code&gt; to remove
the virtual environment.  To be sure, I also found out the location of the virtual
environments on my machine and removed both directories associated with them.
Then I tried to remove the &lt;code&gt;Pipfile&lt;/code&gt; file and the &lt;code&gt;Pipfile.lock&lt;/code&gt; file. While
I did think this may be overkill, at the very least I knew I was thorough in
my work!&lt;/p&gt;
&lt;p&gt;Running through the Ubuntu version of my test, everything stayed the same.  It
was frustrating and rewarding at the same time.  There was something in my process
of local testing that masked the issue, and I still had to find it. But at the
same time, I was mostly there, and just had to find the right thing to tweak.
And just to confirm, with a thoroughly removed PyMarkdown package, installing it
from
&lt;a href="https://pypi.org/project/pymarkdownlnt/"&gt;PyPi&lt;/a&gt;
resulted in incorrect permissions, installing it locally resulted in correct
permissions.&lt;/p&gt;
&lt;h3 id="digging-deeper"&gt;Digging Deeper&lt;a class="headerlink" href="#digging-deeper" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So, I pulled up some online resources and started to read them.  I was about
45 minutes into that research when I came across
&lt;a href="https://realpython.com/python-wheels/"&gt;this article&lt;/a&gt;
at Real Python.  In it, there was one line that caught my attention:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you’ve installed a Python package using pip, then chances are that a wheel
has made the installation faster and more efficient.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Huh?  I had always thought it was the tarball, the &lt;code&gt;*.tar.gz&lt;/code&gt; file, which was
used with PyPi.org and the &lt;code&gt;pip&lt;/code&gt; family of commands.  Could I have been wrong?&lt;/p&gt;
&lt;p&gt;With nothing to lose, I read the rest of that article, and I was convinced
that I had made a mistake.  Changing my test process to operation off the wheel
file instead of the tarball, everything worked the same on the Windows shell.
But in the Ubuntu shell, I was finally able to reproduce the behavior.  Installing
from the wheel, the script to start PyMarkdown did not have the correct permissions.
I had reproduced the reported issue, now to fix it.&lt;/p&gt;
&lt;h3 id="scripts-and-permissions"&gt;Scripts and Permissions&lt;a class="headerlink" href="#scripts-and-permissions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that I had a good handle on the problem, I started looking for a solution.
It took a while to find one because looking for &lt;code&gt;python wheel permission script&lt;/code&gt;
or any variation of those words usually results in pages that deal with the proper
permissions needed to install Python packages, not on how to specify the
correct permissions for the scripts.
But it was during one of those searches that I found information referring
to specifying &lt;code&gt;entry-points&lt;/code&gt; to allow for post-install fixes.  That
article was about providing an extra feature to set that package up for use
with one of three editors, but it was still a useful find.  It explained that there
was a &lt;code&gt;console_scripts&lt;/code&gt; setting for &lt;code&gt;entry-points&lt;/code&gt; that creates platform specific
scripts for each entry point at install time.&lt;/p&gt;
&lt;p&gt;That just clicked with me as the right thing to do.  Prior to reading that
article, I had hard-wired the &lt;code&gt;pymarkdown&lt;/code&gt; and &lt;code&gt;pymarkdown.bat&lt;/code&gt; scripts into
the &lt;code&gt;scripts&lt;/code&gt; directory.  Since they have been there for months, I can only
assume that there were one or more examples of projects that used &lt;code&gt;scripts&lt;/code&gt; and
that method of launching projects.  And to be honest, if you are building on a
Linux system and have all the permissions set right, that might be a practical
alternative.  For my setup, it just was not cutting it.&lt;/p&gt;
&lt;p&gt;So, I went to my &lt;code&gt;setup.py&lt;/code&gt; file and removed this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PACKAGE_SCRIPTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and replaced it with these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"console_scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;"pymarkdown=pymarkdown.__main__:main"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;According to the article, that code should inform the setup tools to create a new script
called &lt;code&gt;pymarkdown&lt;/code&gt; specifically for the operating system it is installed on.
In that script, it looks in the &lt;code&gt;__main__&lt;/code&gt; module of the &lt;code&gt;pymarkdown&lt;/code&gt; package
and invokes the &lt;code&gt;main&lt;/code&gt; function.  After a small alteration to the &lt;code&gt;__main__.py&lt;/code&gt;
file to include an extra function, I created a new package.&lt;/p&gt;
&lt;p&gt;Holding my breath, I walked through the Windows installation tests, and everything
worked fine.  Switching over to my Ubuntu shell, I repeated the installation tests
and… everything worked!  It was a relief!  It had taken me three hours at that
point to figure out the problem and devise a solution, but it was worth it.&lt;/p&gt;
&lt;p&gt;Just to be sure, I cleaned up the &lt;code&gt;__main__.py&lt;/code&gt; file and the &lt;code&gt;setup.py&lt;/code&gt; file
before repackaging the project and running through the steps two more times.
Once again, it might have been overkill, but I wanted to make sure.&lt;/p&gt;
&lt;h2 id="release-092"&gt;Release 0.9.2&lt;a class="headerlink" href="#release-092" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having completed all the changes I was going to make for this week, I decided that
I had enough changes and fixes queued up to make a release.  After quick
double checking to make sure that everything looked right, I created a package
using my &lt;code&gt;package.cmd&lt;/code&gt; script.  Then, using both my Ubuntu shell and my Windows
shell, I tested against the wheel file produced by the &lt;code&gt;package.cmd&lt;/code&gt; script to
make sure it installed properly in both environments.&lt;/p&gt;
&lt;p&gt;This was only a slight change from earlier releases, but an important one.  In
earlier releases, I was testing against the &lt;code&gt;*.tar.gz&lt;/code&gt; file produced by the
script, not the &lt;code&gt;*.whl&lt;/code&gt; or wheel file.  As the wheel file is the file that is
uploaded to the PyPi.org site, it is important to test against that file.  As I
thought it was the &lt;code&gt;*.tar.gz&lt;/code&gt; file that was uploaded, I was testing locally
against that file.  As such,
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/77"&gt;Issue 77&lt;/a&gt;
slipped through the cracks.&lt;/p&gt;
&lt;p&gt;But with my slightly adjusted process in place, everything looked good, so
I published the release, tagged the repository, and published the release notes
for the release.  It was a good feeling.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things are rolling, and I am starting to feel that they are taking longer than
I want them to.  And I know that this is my personal danger zone.  For me,
getting that last five to ten percent of a project done has always been my
weak spot.  It happens not because I grow tired of the project, but because I
do not find any fun in the work.  And yes, solving issues is fun for me,
while double checking everything is more of a chore.&lt;/p&gt;
&lt;p&gt;Regardless, I need to make sure I keep my focus on completing this section of
the work and getting on to more of the interesting problems in the next
section: code quality improvements and performance improvements.  For now,
I am reminding myself of those tasks coming up as a “carrot” to dangle in front
of myself to get this “boring” work done.&lt;/p&gt;
&lt;p&gt;Hope it helps… but I am close enough I think I can manage.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking ahead in the Issues List, I see a lot of validation and a lot of added
scenario tests.  I am not sure which one I will decide to do, but either way, with
those items out the way, the list will almost be down to Priority 3 items.
Gotta like that!
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:record"&gt;
&lt;p&gt;For the record, that is 14 &lt;code&gt;None&lt;/code&gt; keywords and 1 &lt;code&gt;requeue_line_info&lt;/code&gt; variable. &lt;a class="footnote-backref" href="#fnref:record" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:noonish"&gt;
&lt;p&gt;Well… okay, noon-ish. &lt;a class="footnote-backref" href="#fnref:noonish" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Tying Up Some Loose Ends</title><link href="https://jackdewinter.github.io/2021/10/17/markdown-linter-tying-up-some-loose-ends/" rel="alternate"></link><published>2021-10-17T00:00:00-07:00</published><updated>2021-10-17T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-10-17:/2021/10/17/markdown-linter-tying-up-some-loose-ends/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-c.md"&gt;last article&lt;/a&gt;, I talked
about my efforts to clean up the scenario tests and the existing parser issues.
In this article, I continue to talk about cleaning up existing parser issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To an outside viewer, it may seem like I am doing boring stuff, week
in …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-c.md"&gt;last article&lt;/a&gt;, I talked
about my efforts to clean up the scenario tests and the existing parser issues.
In this article, I continue to talk about cleaning up existing parser issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To an outside viewer, it may seem like I am doing boring stuff, week
in and week out. And I will admit, a certain amount of the work that I do is
boring.  But knowing that the work is going towards increasing the quality of
the project really motivates me when things are dragging on. Since I spent
most of this past week finishing the big task from last week, I did find the
need to remind myself of those observations during the week… multiple times.
And remembering why I was doing this did help me push through.&lt;/p&gt;
&lt;p&gt;And while I am used to showing as much code as I can for what I am working on,
this week is going to be a bit different.  To be honest, most of the issues that I
fixed had a relatively minor change that was implemented, with the effects of that
change rippling out into the rest of the code. In some cases, it was a one-line
initial change, and thirty or more lines of ripple changes.
I still will try and explain things as best I can, you have my word on that. I’ll
see how that works out and see how I feel about it later!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/12dae17158b4db3dd2aa51107f0a645b1ad743b5"&gt;12 Oct 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9899a414f1c2c9c86a7f307929bfe1036fad8544"&gt;17 Oct 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="issue-44-the-long-and-winding-road"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/44"&gt;Issue 44&lt;/a&gt; - The Long And Winding Road&lt;a class="headerlink" href="#issue-44-the-long-and-winding-road" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I said during the introduction, it was an exceedingly long week.  I had hoped that
I would be able to rip through the comment strings for the scenario tests that
related to rules, but that was not the case.  Instead of having to read 7 strings
and having to fix 1, I was lucky if I encountered any strings that I did not have
to fix.&lt;/p&gt;
&lt;p&gt;Part of that was my own making though.  To make sure that the strings were all
readable, I started establishing a common preface for each rule comment string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Test to make sure this rule does not trigger with a document that&lt;/span&gt;
&lt;span class="sd"&gt;contains ...&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While that brough consistency to every comment string for rules, it did
involve tons of editing.  That and in the cases where the rule did trigger,
I had to ensure that I removed the &lt;code&gt;not&lt;/code&gt; on the first line.  Just checking
that out for each file took a bit of time.&lt;/p&gt;
&lt;p&gt;And that editing took me into Saturday afternoon.  It was a slog.  But I
never had any doubt that it was worth it.  Did I question if my sanity
would remain intact? Yes, that was something I wondered many
times during the task.  But not the base worth of the task.  I knew that it
was something that I had put off, and I knew that this rewriting was the
price that I needed to pay.  And that was okay with me.  It just
needed to get done.&lt;/p&gt;
&lt;p&gt;But I was incredibly happy when it was done.  There were other things that
I wanted to get cleaned up this week!&lt;/p&gt;
&lt;h2 id="issue-56-cleaning-up-rules"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/56"&gt;Issue 56&lt;/a&gt; - Cleaning Up Rules&lt;a class="headerlink" href="#issue-56-cleaning-up-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In terms of nagging tasks that I wanted to deal with, cleaning up the
comment strings was the biggest one.  Thought it was not as high on the list,
as the comment string, it still bugged me that I had skipped tests.  I know
that at the time that I
marked those tests as skipped it probably was the right thing to do. But now
that I had some time, the right thing to do was to make sure that I resolved
those skipped tests.&lt;/p&gt;
&lt;p&gt;Having resolved some skipped tests dealing with language elements last
week, I decided to try and deal with the skipped tests for rules this week.
Luckily, as soon as I walked through the scenario tests for Rule Md005 and Rule
Md027, I noticed that everything looked correct. All that I needed to do for
those tests was to clean them up, reset the expected values, and verify that
there were no other problems. Done.&lt;/p&gt;
&lt;p&gt;Rule Md028 was another story.  I worked through the debugger and log
files for about an hour or two before I figured out the issue.  In
this scenario, the essence of the problem was with this Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I walked through the parsing of that Markdown, the tokens that I got
back were mostly correct, just in a weird order.  In particular, the Block
Quote was started properly, but it was immediately followed by an end Block
Quote token.  And walking through the code did not at once reveal any
interesting information because everything looked right.  That is until
I noticed that there was a single point where it no longer looked right.&lt;/p&gt;
&lt;p&gt;That point was the on the return of the parser from the
&lt;code&gt;__handle_nested_container_blocks&lt;/code&gt; function.   Everything looked correct before
that function returned, especially the &lt;code&gt;this_bq_count&lt;/code&gt; variable that contains
what the perceived count of the Block Quote is.  It was then that I noticed
that when the function returned, the &lt;code&gt;this_bq_count&lt;/code&gt; variable dropped from
&lt;code&gt;1&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;.  As there was a Block Quote stack token on the &lt;code&gt;token_stack&lt;/code&gt;
and a &lt;code&gt;this_bq_count&lt;/code&gt; variable with a value of &lt;code&gt;0&lt;/code&gt;, that Block Quote was
being closed as no longer being correct.  It was not the proper thing to
do in this case, but in general, it was doing the right thing by removing
the Block Quote from the stack.&lt;/p&gt;
&lt;p&gt;To fix this, one change was needed, with a lot of ripples to accompany it.
The one change was to have the &lt;code&gt;__handle_nested_container_blocks&lt;/code&gt; function
pass the &lt;code&gt;this_bq_count&lt;/code&gt; variable back to its callers.  A handful of
functions needed changes to accommodate this, including code in
the &lt;code&gt;__look_for_container_blocks&lt;/code&gt; function to use this information.
While these changes were not difficult, it took me a bit to get them
right and review them to make sure that I felt that they were right.&lt;/p&gt;
&lt;p&gt;But after all that work, all three sets of rule-based scenario tests
had their &lt;code&gt;skipped&lt;/code&gt; tag removed, and they were all working cleanly.
To make sure things stayed that way, I added test functions
&lt;code&gt;test_extra_009&lt;/code&gt; and &lt;code&gt;test_extra_009a&lt;/code&gt; with the boiled down version of
the issue.  One nagging item off the list.  That felt good!  Now for
another one.&lt;/p&gt;
&lt;h2 id="issue-53-cleaning-up-list-tests"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/53"&gt;Issue 53&lt;/a&gt; - Cleaning Up List Tests&lt;a class="headerlink" href="#issue-53-cleaning-up-list-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes the problem just stares you in the face and announces itself
proudly.  This was the case with test function &lt;code&gt;test_list_blocks_237x&lt;/code&gt;
which was clearly throwing an assert.  Looking at the assert itself,
it was obvious that it was failing, but not how.  By adding a clear
assert message, I was able to find that out.  It was asserting because
it assumed that the extracted whitespace would always be whitespace.&lt;/p&gt;
&lt;p&gt;In this case, the variable &lt;code&gt;adj_line_to_parse&lt;/code&gt; contained the adjusted
line that needed to be parsed.  However, because it occurs within a
Block Quote, the start of the line included the Block Quote characters
and whitespace, not just whitespace.  That meant that when the parser hit
this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the assert failed.  The length of &lt;code&gt;extracted_whitespace&lt;/code&gt; field was as it
was expected to be, the string that it was being compared to just included
other characters at the start of it.&lt;/p&gt;
&lt;p&gt;The first step in fixing this was to change the &lt;code&gt;assert&lt;/code&gt; into an &lt;code&gt;if&lt;/code&gt;.  The
positive case of the previous &lt;code&gt;assert&lt;/code&gt; was working fine, there were just
some cases where it needed some refinement.  To take care of that
“refinement”, this code was added in the &lt;code&gt;else&lt;/code&gt; clause of the &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;original_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;orig_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;original_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;curr_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;delta_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orig_parse&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;curr_parse&lt;/span&gt;
&lt;span class="n"&gt;whitespace_to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;delta_parse&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;whitespace_to_remove&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;whitespace_to_remove&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code was all to get around the possibility that the leading spaces for
any line in a Block Quote can have Block Quote characters as part of that
leading space.  Once past those characters, everything else should be
whitespace.  So, this code works with that ending whitespace to adjust the
line to what it needs to be.&lt;/p&gt;
&lt;p&gt;It took me a while to come up with that approach, but it made sense. And
another nagging issue down.  Just one more left.&lt;/p&gt;
&lt;h2 id="issue-59-cleaning-up-setext-tests"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/59"&gt;Issue 59&lt;/a&gt; - Cleaning Up SetExt Tests&lt;a class="headerlink" href="#issue-59-cleaning-up-setext-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The last nagging issue deal with two almost identical scenario tests:
&lt;code&gt;test_setext_headings_064a&lt;/code&gt; and &lt;code&gt;test_setext_headings_069a&lt;/code&gt;.  With little information
to go on, I started to look at the output of the parser for this document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;
&lt;span class="o"&gt;===&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Quickly looking at those Markdown documents, I guessed wrong that the document
should produce a SetExt Heading.  Using the faithful Babelmark tool, I verified
that the provided Markdown should produce this HTML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Foo
===&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It took me a couple of minutes to have an “aha” moment, but I eventually got there.
The problem that I had is that I prejudged the text because it looked like a SetExt
sequence.  Working though it some more in my head, I could then see that the
second line would be considered a paragraph continuation line unless there was
something more to that second line.  Indeed, when I added two extra spaces before
that second line, it matched the indent of the List Item and became a SetExt
Heading element.  But anything short of that, and it rightfully remaining a
simple paragraph continuation line.&lt;/p&gt;
&lt;p&gt;With that information in hand, I debugged through the &lt;code&gt;parse_setext_headings&lt;/code&gt;
function for a while before adding this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;is_paragraph_continuation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;adj_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;original_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;removed_text_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;original_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;adj_text&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;adj_text&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;removed_text_length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;is_paragraph_continuation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on the &lt;code&gt;if&lt;/code&gt; statement just before this code, it would only be
activated if the Leaf Block Processor was inside a Paragraph element.
In the logic that I added, if that paragraph was inside of a List Item,
a check was added to see how much whitespace was removed from the line
to get to that point.  If the amount removed was less than the indent
level and there was at least one non-whitespace character on that line,
it considered the current line a paragraph continuation.&lt;/p&gt;
&lt;p&gt;With that logic in place, the ‘if’ statement in the code that followed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;after_whitespace_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;extra_whitespace_after_setext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collected_to_index&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;after_whitespace_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_paragraph_continuation&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;after_whitespace_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, the existing logic was almost fine, but needed to also
check that it was not a paragraph continuation before proceeding.
Verifying the new code against both original test functions, it
also passed the two new function I added to help diagnose the problem.
I did leave them in there as they cleanly verified the boundary
cases that existed.&lt;/p&gt;
&lt;h2 id="issue-43-sometimes-it-is-a-small-fix"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/43"&gt;Issue 43&lt;/a&gt; - Sometimes It Is A Small Fix&lt;a class="headerlink" href="#issue-43-sometimes-it-is-a-small-fix" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Encountered during a previous debugging session, I made a note to myself to
check out the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;First&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
  &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;First&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;First&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;First&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Second&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;First&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Third&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;Second&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While that Markdown made no difference to the rule that I was debugging at the time, I
recognized that it was not properly creating a List Item out of the fourth line
as it should have.  Instead, the List Item started on line 3 contained both the
text for line 3 and for line 4.&lt;/p&gt;
&lt;p&gt;After creating a new scenario test, I quickly dropped into debug mode and found
the problem relatively easily. Near
that start of the &lt;code&gt;is_olist_start&lt;/code&gt; and &lt;code&gt;is_ulist_start&lt;/code&gt; functions, there is a
standard whitespace check to make sure that the whitespace does not exceed the
usual three characters.  Simply speaking, prefaced with zero to three spaces,
this Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is translated as a List Item.  By adding one more space to that prefix:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;indented&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;that List Item becomes content for an Indented Code Block.  Within another
List element, after the list indent is considered:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is translated into a List and a Sublist, while:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;continuation&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is translated into one List with two-line content.&lt;/p&gt;
&lt;p&gt;Verifying that everything still worked properly for the first two cases, I then
moved my focus to the remaining two cases. While the last case worked properly,
the “this is a nested list” case was being parsed as a continuation line.&lt;/p&gt;
&lt;p&gt;With my eyes on those whitespace checks, this made sense.  Those checks were
evaluating whether the number of whitespace characters from the beginning of
the line was three or less.  In the “nested” case, it was failing that check
from the beginning of the line, when it should have been passing that check
from the start of the indent from the first List.&lt;/p&gt;
&lt;p&gt;Already having calculated the amount of indent required by the parent list in
the &lt;code&gt;__adjust_whitespace_for_nested_lists&lt;/code&gt; function, it was a simple matter
to pass it back with the &lt;code&gt;adj_ws&lt;/code&gt; value.  Once passed back, that value was
added into the whitespace length check to reduce the required whitespace
properly.&lt;/p&gt;
&lt;p&gt;After the code was passing the first scenario test &lt;code&gt;test_extra_010x&lt;/code&gt;, I
added two extra scenario tests to make sure that this worked for other
cases.  While I could have added more tests, I figured that these
three tests gave the changes a good amount of coverage for now.  If necessary,
I can always go back and add more.&lt;/p&gt;
&lt;h2 id="issue-62-sometimes-it-really-is-a-check"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/62"&gt;Issue 62&lt;/a&gt; - Sometimes It Really Is A Check&lt;a class="headerlink" href="#issue-62-sometimes-it-really-is-a-check" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At an earlier point in the project’s history, I had tested this snippet of Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;simple&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and it had failed.  I can remember adding it during the development of Rule Md027,
as the repository history
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d34c7ed2248c4728ce4c14b812bad6a6a2c87289/issues.md"&gt;attests to&lt;/a&gt;,
and I remember being surprised that something so simple could change the tokens.&lt;/p&gt;
&lt;p&gt;However, in the time between 2021 Aug 15 and when I looked at on the morning
of 2021 Oct 17, it has ceased to be a problem.  Just to be sure, I added three new
scenario tests &lt;code&gt;test_extra_011x&lt;/code&gt; to &lt;code&gt;test_extra_011b&lt;/code&gt; to ensure that it would
remain a non-issue.  Sometimes you get lucky.&lt;/p&gt;
&lt;h2 id="issue-64-and-sometimes-you-did-something-wrong"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/64"&gt;Issue 64&lt;/a&gt; - And Sometimes You Did Something Wrong&lt;a class="headerlink" href="#issue-64-and-sometimes-you-did-something-wrong" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Noticed during the “grand” commenting rewriting of
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/44"&gt;Issue 44&lt;/a&gt;,
I added a note to the Issues List to check on Rule Md030, as I had noticed something
weird.  It was a good thing that I noticed it, as there was something weird that was
exposed by the scenario tests.&lt;/p&gt;
&lt;p&gt;When I went to verify Rule Md030 and its scenario tests, I started by looking at the
original rule that this rule was based off.  While there is little clear
documentation on the configuration values for the original rule, this specific phrase
leapt out at me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;consists of a single paragraph or multiple paragraphs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The reason that this leapt out at me is that the work I had done on Rule Md030
was about single versus multiple levels of lists not paragraphs.  Delving into
the disconnect a bit more, the page
&lt;a href="https://cirosantilli.com/markdown-style-guide/#spaces-after-list-marker"&gt;sited by the original rule&lt;/a&gt;
does show examples with multiple paragraphs, not multiple levels within a list.&lt;/p&gt;
&lt;p&gt;I can honestly say that the thought that went through my head was something akin
to “huh.  wonder how that happened?”  To be continually honest, if this is the
only big mistake I made during my efforts to implement every rule, I
will still consider it remarkably successful.  For me, if I do not must throw
away lots of work, my focus is on getting things done right, not
trying to figure out where it messed up.&lt;/p&gt;
&lt;p&gt;Looking through the code for module &lt;code&gt;rule_md030.py&lt;/code&gt;, most of the code was still
very usable.  I removed the function &lt;code&gt;__is_current_list_multiline&lt;/code&gt; as it was no
longer needed.  Instead, the &lt;code&gt;__current_list_parent&lt;/code&gt; field and the
&lt;code&gt;__paragraph_count_map&lt;/code&gt; field were introduced to track the current list item and
the paragraph count for that list item.  Other than those changes, plus some
extra code to properly populating those fields and their associated objects,
and it relatively remained the same.&lt;/p&gt;
&lt;p&gt;However, the changes to the scenario tests were more substantial.  Each of the
existing &lt;code&gt;*_double.md&lt;/code&gt; tests were changed to have a list item with two paragraphs
instead of a list item that was part of a level 2 sublist.  Basically, the
Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;First&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;Second&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;Second&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Third&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;First&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;Second&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

   &lt;span class="k"&gt;Second&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Third&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To add coverage to properly test the new understanding of the rule, eight new
scenario tests were added with nested sublists.  These were evenly divided between
the Ordered Lists and Unordered Lists, and again between single paragraph List Items
and multiple paragraph List Items.  Add to that the required cleanup of the documentation
page for &lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/rules/rule_md030.md"&gt;Rule Md030&lt;/a&gt;,
and things were ready to go!&lt;/p&gt;
&lt;h2 id="issue-66-winding-down"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/66"&gt;Issue 66&lt;/a&gt; - Winding Down&lt;a class="headerlink" href="#issue-66-winding-down" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As far as authoring these articles go, I am getting into a good groove most
weekends.  Because I take the time during the week to curate a simple outline
of what I want the article to be, I can start building a set of good paragraphs
and examples from that outline and really bring it to life.  But sometimes I
can get ahead of where I feel I need to be, and tonight is one of those nights.&lt;/p&gt;
&lt;p&gt;Having spent a solid amount of time writing, doing work around the house, and
spending time with my family, I found I had some “extra” time left over.  To be
honest, the reason the word &lt;em&gt;extra&lt;/em&gt; is in quotation marks is because there
really is no concept of extra time.  I believe it would be more correct to say
that I found myself with about two hours of time that I had not planned for,
and I wanted to fill that time with something useful.  As such, I started to
look at some more of the issues that I logged during my work on
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/44"&gt;Issue 44&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first issue that I grabbed was simple labelled as such:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;###&lt;/span&gt; &lt;span class="n"&gt;Verify&lt;/span&gt; &lt;span class="n"&gt;test_md023_bad_improper_indent_atx_in_list_item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As such, I looked at the specified tests, and everything looked fine.
In fact, it was a fitting example of Rule Md023 operating cleanly inside of a
List Item.  Then I took another look at the title of the function:
&lt;code&gt;test_md023_bad_improper_indent_atx_in_list_item&lt;/code&gt;.  Well, that was a bit off!&lt;/p&gt;
&lt;p&gt;To fix this issue, and the same issue with the &lt;code&gt;*in_block_quotes&lt;/code&gt; variant
of this scenario test, I changed the prefix of both files from
&lt;code&gt;test_md023_bad_improper&lt;/code&gt; to &lt;code&gt;test_md023_good_proper&lt;/code&gt;.  After changing the
file names, I changed the scenario text function names to match, and all
was good.  However, to make sure the original intent of those scenario tests
was fulfilled, I created two new test functions and test data files with the
original names.  Executing those two new scenario tests, I then verified
that they were failing properly, adjusted the expected output, and declared
the issue fixed.&lt;/p&gt;
&lt;h2 id="issue-70-more-winding-down"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/70"&gt;Issue 70&lt;/a&gt; - More Winding Down&lt;a class="headerlink" href="#issue-70-more-winding-down" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the minutes of my “extra” time winding down, I found this issue and
figured out that it was a simple one to fix.  For the most part, the main
problem with this issue was that the names of the functions were not
indicative of what was being tested.  In addition, I added a new
&lt;code&gt;test_md036_bad_configuration_punctuation&lt;/code&gt; test function to supply a test
for the &lt;code&gt;punctuation&lt;/code&gt; configuration value.&lt;/p&gt;
&lt;p&gt;And then I put the digital equivalent of my pen down for the evening.
I had an incredibly good start on the article for this week, and I also had
managed to get a fair number of items removed from the Issues List.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To explain how I am feeling about the project is hard to explain without
relating it to something relatable like drafting an article or an essay.
There are those essays that we all wrote in high school where we just
wanted to get it done.  Those were more about ensuring that we met the
minimum requirements for the essay to be counted by our teachers, and
that was it.&lt;/p&gt;
&lt;p&gt;This project is something different to me.  To me, this feels like an
extended essay on something that I care very deeply about.  It is not
enough that I want to meet the minimum requirements of the task, I
want to make sure to convey a certain feeling with my essay.  To that
extent, I do not mind if I must go over certain parts of the essay
repeatedly until I get the tone and theme exactly right.&lt;/p&gt;
&lt;p&gt;From a given viewpoint, this project is already a success.  I have
a beta release that is out, and it addresses the linting requirements
that I want it to address.  But for me, that is not enough.  I want
to make sure the project is solid, with good development principles
throughout.  And for me, the first part of meeting that goal is to
address those items that I put off for any reason.&lt;/p&gt;
&lt;p&gt;And for me, striving to increase quality is the goal that keeps
me going!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be blunt, I am starting to get to the end of the easier to resolve
issues.  What are left are more general issues and issues that require
me to double check things.  Not sure where that is going yet, so
stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Cleaning Things Up</title><link href="https://jackdewinter.github.io/2021/10/10/markdown-linter-cleaning-things-up/" rel="alternate"></link><published>2021-10-10T00:00:00-07:00</published><updated>2021-10-10T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-10-10:/2021/10/10/markdown-linter-cleaning-things-up/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-b.md"&gt;last article&lt;/a&gt;, I talked
about the headway I am making towards getting more pending issues dealt with.
In this article, I talk about my efforts to clean up the scenario tests and
the existing parser issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another week of demanding work, and another week of results …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-b.md"&gt;last article&lt;/a&gt;, I talked
about the headway I am making towards getting more pending issues dealt with.
In this article, I talk about my efforts to clean up the scenario tests and
the existing parser issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another week of demanding work, and another week of results to show for it.  While
the results of this week are not as flashy and the results from previous weeks,
they are still all very meaningful and useful.  After a couple of weeks focusing
on the newer issues, I decided to tackle some of the older issues.  Or
at the very least, issues that have been around for a while.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/c265b2328298ca134e31b3fc14dd448e4c4ab37a"&gt;06 Oct 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/debc82ac05bf2c8db689fd9b4f8bf69352d5ec6a"&gt;10 Oct 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="issue-44-the-task-that-keeps-on-giving"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/44"&gt;Issue 44&lt;/a&gt; - The Task That Keeps on Giving&lt;a class="headerlink" href="#issue-44-the-task-that-keeps-on-giving" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To say that completing Issue 44 is a huge task is not doing it justice.  At nine hours and counting,
I have verified that all non-rule scenario tests have either descriptive or derivative
documentation at the top of their test function.  With over 3300 scenario tests as of this
afternoon, it is no easy feat to go through and verify the comment string starting each
test.  It is incredibly boring and monotonous.  And I do not know about any readers,
but for me, those are the tasks where I get into a mindless kind of action that easily
leads itself to mistakes.  Did I mention monotonous?  Huge? Boring?&lt;/p&gt;
&lt;p&gt;So why do it?  Because I believe it is the right thing to do.  During the months of
work on this project, I tried to keep every comment string current.  When all is said
and done, that is the easiest way to ensure the documentation is up to date.  But the truth is
that I did not always keep those strings current.  If I were in a hurry, I would often
copy a scenario test, change it to suit the current circumstances, and then go on to
the next scenario test.  The function name of the test was changed, but not the description.
It was because of that “speedy” behavior that I now found myself scouring over 3300 scenario
tests for proper comment strings.&lt;/p&gt;
&lt;p&gt;After nine hours of grueling work, I now have all scenario tests covered except for the ones
that deal with the rules.  There is not much to talk about regarding the fixing of documentation
strings.  In each case, I determine if the scenario test is an original test or a derivative
of a nearby test.  If it is an original test, I create a descriptive comment string to
try and capture what the test is trying to achieve.  In the other cases, I use a
derivative comment string, usually stating with &lt;code&gt;variation of&lt;/code&gt;, that notes the test that
it is a derivative of and what change is being made for that specific test.&lt;/p&gt;
&lt;p&gt;To be honest, while this task is monotonous, extremely monotonous, it is mostly
reading the comment strings to make sure they make sense.  When there are obvious
copy-and-forget-to-change strings, they are typically easy to spot and come in groups
of three or more.  There really is no other way to describe it than it being a boring
task.  But the benefit is in having a coherent set of scenario tests with confidence
that their comment strings describe what the test is about.  And that decreases the
cost of maintaining the project.&lt;/p&gt;
&lt;p&gt;It is a pain, but it is worth it.  I think so at least.  But let me revisit that
statement once I have finished verifying every scenario test.  As a friend said
one time:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your Mileage May Very.  Objects in the rear-view mirror may be closer than they appear.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="issue-28-pre-commit-hooks"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/28"&gt;Issue 28&lt;/a&gt; - Pre-Commit Hooks&lt;a class="headerlink" href="#issue-28-pre-commit-hooks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It probably skipped everyone’s notice, but a change was introduced
during the last month to add Git pre-commit support to the project.  The
change itself was a ridiculously small one: adding the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/.pre-commit-hooks.yaml"&gt;.pre-commit-hooks.yaml&lt;/a&gt;
file to the project by one of our contributors.  But the effect was huge. The PyMarkdown
project can now be used as a pre-commit hook on any system that supports Git Pre-Commit
hooks.&lt;/p&gt;
&lt;p&gt;By including that file in the repository, Git projects on GitHub can now
leverage that information to execute the PyMarkdown project without having to
install a Python package.  While the file itself does not contain much
information, it allows for a &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file to be added to any
repository that references PyMarkdown.  If that file is present and contains a
reference to the PyMarkdown repository
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/pre-commit.md"&gt;as documented here&lt;/a&gt;,
then PyMarkdown will be invoked as configured.  It is neat and tidy.  Even better,
it is an almost zero-cost approach for using PyMarkdown.&lt;/p&gt;
&lt;p&gt;But as with any project, there were a couple of baby steps that needed to be taken.&lt;/p&gt;
&lt;h3 id="problem-1-allowing-for-configuration"&gt;Problem 1: Allowing for Configuration&lt;a class="headerlink" href="#problem-1-allowing-for-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first issue with this feature was easy to overcome: how to allow for
configuration?  Because of the way the &lt;code&gt;.pre-commit-hooks.yaml&lt;/code&gt; file is organized,
my first instinct was to specify an &lt;code&gt;entry&lt;/code&gt; value of &lt;code&gt;pymarkdown scan&lt;/code&gt;.  While this
worked as a great default, when custom arguments were added, they were appended
to the end of that value.  Therefore, if you wanted to disable rule &lt;code&gt;not-me&lt;/code&gt; and tried
to add an &lt;code&gt;args&lt;/code&gt; value of &lt;code&gt;["--disable-rules", "not-me"]&lt;/code&gt;, the executed command
line would be &lt;code&gt;pymarkdown scan --disable-rules not-me&lt;/code&gt;.  Adding the &lt;code&gt;scan&lt;/code&gt; keyword
to the end would not work either, as that keyword had already appeared.&lt;/p&gt;
&lt;p&gt;After a bit of research, the solution to this was to use a good default
and to add easy-to-read documentation on how to deal with the rest.  Having the
default composed string of &lt;code&gt;pymarkdown scan&lt;/code&gt; was the correct choice, I just chose
a bad implementation of how to get there.  By splitting those two keywords into
an &lt;code&gt;entry&lt;/code&gt; value of &lt;code&gt;pymarkdown&lt;/code&gt; and an &lt;code&gt;args&lt;/code&gt; value of &lt;code&gt;scan&lt;/code&gt; provided the
required flexibility to add user-defined configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pymarkdown&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;PyMarkdown&lt;/span&gt;
  &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"PyMarkdown&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GitHub&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Flavored&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Markdown&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CommonMark&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Compliant&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Linter"&lt;/span&gt;
  &lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
  &lt;span class="nt"&gt;language_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python3&lt;/span&gt;
  &lt;span class="nt"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pymarkdown&lt;/span&gt;
  &lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;scan&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;markdown&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To deal with the rest of the issue,
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/pre-commit.md#arguments"&gt;documentation was added&lt;/a&gt;
to inform the user that
if they add scanning configuration, the final &lt;code&gt;args&lt;/code&gt; argument should be &lt;code&gt;scan&lt;/code&gt;.
While there is nothing preventing users from using any of the other modes of
the project, those modes tend to be mostly static.  Therefore, I determined that
invoking those modes have near-zero use for invoking PyMarkdown through a
pre-commit hook and geared the pre-commit documentation solely towards
the &lt;code&gt;scan&lt;/code&gt; mode usage.&lt;/p&gt;
&lt;h3 id="problem-2-what-is-good-documentation"&gt;Problem 2: What Is Good Documentation?&lt;a class="headerlink" href="#problem-2-what-is-good-documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While addressing the simple stuff for pre-commit hooks was easy, there was an
interesting question posed by one of the contributors.  The
condensed version of that question was: why provide any pre-commit documentation
at all?  The points that they raised were valid.  The target implementation
of pre-commit used by GitHub may change, requiring a change to the documentation.
So would not a “for any questions, go to pre-commit’s site” be sufficient.&lt;/p&gt;
&lt;p&gt;Thinking about the issue like someone who had just found out about pre-commit
hooks&lt;sup id="fnref:rediscover"&gt;&lt;a class="footnote-ref" href="#fn:rediscover"&gt;1&lt;/a&gt;&lt;/sup&gt;, I added documentation while trying to maintain that viewpoint.
My goal was
to add enough documentation that a relative pre-commit newbie like myself could
add PyMarkdown support to their project using that documentation.  While the amount
of text in that document was not large, it was not small either.  But for me, it
was the right amount of documentation for the subject at hand.&lt;/p&gt;
&lt;p&gt;Even so, I spent the next couple of weeks after that comment wondering whether
I had gone overboard or not.  It was not an easy decision or a hard decision,
I just was not sure how I should evaluate it.&lt;/p&gt;
&lt;p&gt;In the end, I decided I had to set a clear goal for the feature and for the
documentation.  To me, the goal of the feature was
to make it easy to add PyMarkdown support into a Git project.  Once I
nailed that down, the documentation focus became a lot clearer.  If I
wanted to make adding pre-commit support easy, I needed good support to walk
people through 90% of the things they can do with PyMarkdown and their
pre-commit hooks.&lt;/p&gt;
&lt;p&gt;With that focus, I felt that the scope of the document
was validated.  As I had written the document as a relative pre-commit
newbie, I felt that the information presented answered all normal
questions that I had during that process.  How do I add it? Where
do I add it? Can I lock it down to a version so I can replicate a
set of results? How do I configure it?  Can I use a local configuration
file?  Can I control which files it scans?  These were all questions
that I asked myself when I added PyMarkdown support to one of my
private repositories.&lt;/p&gt;
&lt;p&gt;While the document is long, I strongly feel that it answers each
of the questions in the previous paragraph properly.  And from my viewpoint,
if my goal is to make it easy to add PyMarkdown support through git pre-commit
hooks, then that is the level of documentation required. Time will tell.&lt;/p&gt;
&lt;h2 id="release-091"&gt;Release 0.9.1&lt;a class="headerlink" href="#release-091" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully release events will be happening more frequently for this project,
and this was a good one.  With a good collection of additions and fixes, it
just felt like a suitable time to release an update.&lt;/p&gt;
&lt;h2 id="issue-47-fun-with-fenced-code-blocks"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/47"&gt;Issue 47&lt;/a&gt; - Fun with Fenced Code Blocks&lt;a class="headerlink" href="#issue-47-fun-with-fenced-code-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Okay, maybe fun is not the right word.  Going back over the results of
the latest test scan, I noticed that I still had around eleven scenario
tests that were marked as &lt;code&gt;skipped&lt;/code&gt;.  Deciding to tackle them to wrap up
the week, I first started looking at the three scenario tests that were
part of the Fenced Code Block tests.&lt;/p&gt;
&lt;p&gt;The parsing errors were simple to see.  In two of the tests, a
start Fenced Code Block token was present without a matching end
Fenced Code Block token.  The remaining test mistakenly reports the
Fenced Code Block element as a HTML Block element, totally missing the
mark.  It just looked bad.&lt;/p&gt;
&lt;p&gt;The good news?  Well… the relatively good news?  All three scenario tests
dealt with Link Reference Definitions that are aborted part way through. As
I have mentioned in previous articles, the proper handling of Link Reference
Definition elements are not easy, and those elements remain as the one aspect
of the parser that does not have my full confidence.  That lack of confidence
is not for lack of trying.  It is a measure of the many combinations of aborted
Link Reference Definitions and the other elements that surround them there are.
I know I am getting closer to having them
all covered, but I am not sure that I have every combination covered… yet!
This was just continuing the process of increasing coverage on Link
Reference Definitions, and I was ready to accept that challenge.&lt;/p&gt;
&lt;h3 id="covering-this-combination"&gt;Covering This Combination&lt;a class="headerlink" href="#covering-this-combination" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In each of these three scenarios, a Fenced Code Block element was started inside
of a container element.  In all three scenarios, the next line includes a
valid open for a Link Reference Definition element, only to have the container
close on the third line.  From a parser point of view, the Link Reference
Definition element was only in a partial state and therefore needs to be
rewound to be interpreted as normal text.  It was in that code that the
issue appeared.&lt;/p&gt;
&lt;p&gt;In all three scenarios, the currently active token stack (&lt;code&gt;token_stack&lt;/code&gt;)
and the current token document (&lt;code&gt;token_document&lt;/code&gt;) maintained in the
&lt;code&gt;parser_state&lt;/code&gt; variable were not being rewound properly.  The result
was that both the &lt;code&gt;token_stack&lt;/code&gt; and &lt;code&gt;token_document&lt;/code&gt; variables were left
in weird states.  It was then that I recognized that the second line of
the Link Reference Definition was valid, and I needed to adjust the
tokens to match a partially finished Link Reference Definition.&lt;/p&gt;
&lt;p&gt;In these specific cases, the second line of the Link Reference Definition
was properly following the first line, providing a Link Reference Definition
element that has a label and an URL, but no title.  By reducing the
number of examined lines to only include those two lines, the code was
able to form a complete reference with only the label and the URL.
After having done that, the work that went into that was being
erased.  But why?&lt;/p&gt;
&lt;p&gt;Looking some more at the code, the answer slowly became obvious.  As the code
for the &lt;code&gt;process_link_reference_definition&lt;/code&gt; function existed at that time,
if a requeue was requested, the code assumed that no valid Link Reference
Definition was parsed.  However, in these three scenarios, a partial Link Reference
Definition was found and there was at least one line to requeue for
processing.&lt;/p&gt;
&lt;p&gt;The fix was simple: do not rewind everything if a partial reference is
parsed.  Even a partial reference is valid and that means that the
text from the start of the element remains valid.  Looking in the (seriously
in need of a refactor) function &lt;code&gt;process_link_reference_definition&lt;/code&gt;, there is
a block of code near line 188:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lrd_stack_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy_of_last_block_quote_markdown_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and another block near line 228:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To fix these scenarios, I grabbed the lines between those two sections
and placed them under the following conditional:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;did_complete_lrd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even though there may be lines that need to be requeued, if there
is even a partial Link Reference Definition, the document stack and the
document token are not rewound.&lt;/p&gt;
&lt;p&gt;It took a while to figure that out, but when I added that code, things
started to fall into place.  I went through the three scenario tests and
started to adjust the tokens and to verify the output against
&lt;a href="https://johnmacfarlane.net/babelmark2"&gt;Babelmark&lt;/a&gt;.
And things just worked.  It was a good feeling.&lt;/p&gt;
&lt;h2 id="issue-49-html-blocks"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/49"&gt;Issue 49&lt;/a&gt; - HTML Blocks&lt;a class="headerlink" href="#issue-49-html-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Following up from the previous work I did on Fenced Code Blocks, I thought
that dealing with the six scenario tests dealing with HTML blocks was a good
option for my next task.  That, and
while I had confidence I could deal with the skipped List element scenario
tests, I wanted to leave them to last.  I know that container elements are
tricky and can easily devolve into a time sink.  So, HTML Block elements it
was!&lt;/p&gt;
&lt;h3 id="html-blocks-are-like-code-blocks"&gt;HTML Blocks Are Like Code Blocks&lt;a class="headerlink" href="#html-blocks-are-like-code-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting at the end of the skipped HTML Block tests, I worked my way back
up the list.  It was quickly obvious that the problem with each of the
first four tests was a simple one.  In each case, the Container Block
processor was looking for a valid Link Reference Definition within a
HTML Block element.  It was as simple as that.&lt;/p&gt;
&lt;p&gt;If that does not make sense, there are two lines in the
&lt;a href="https://github.github.com/gfm/#html-blocks"&gt;GitHub Flavored Markdown specification&lt;/a&gt;
that should make this clear:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTML blocks continue until they are closed by their appropriate end
condition, or the last line of the document or other container block.
This means any HTML within an HTML block that might otherwise be
recognized as a start condition will be ignored by the parser and passed
through as-is, without changing the parser’s state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While a bit terse, the meaning of those two sentences is clear.  Once a
HTML Block element is started, any HTML is passed through as-is.  To be
even more precise, everything within the block is considered HTML, even if it is
not valid HTML.  Therefore, if something that looks like a Link
Reference Definition is started, it should be treated like HTML and
passed through as-is.&lt;/p&gt;
&lt;p&gt;To address that problem, I modified the call to &lt;code&gt;__handle_link_reference_definition&lt;/code&gt;
in the function &lt;code&gt;__parse_line_for_leaf_blocks&lt;/code&gt; from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;outer_processed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContainerBlockProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_link_reference_definition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;outer_processed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ignore_link_definition_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;pre_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;ignore_lrd_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ignore_link_definition_start&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_html_block&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;outer_processed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContainerBlockProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_link_reference_definition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;outer_processed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ignore_link_definition_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ignore_lrd_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;pre_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code ignores any Link Reference Definition starts if
the flag is passed to the function or if the current stack token is
an HTML Block token.&lt;/p&gt;
&lt;p&gt;Going through the last four scenario tests, I was able to make quick work of
getting each of the tests cleaned up and passing.  In each scenario, it was
just matter of validating the tokens by hand, then using Babelmark to verify
the HTML.  That process went quickly.&lt;/p&gt;
&lt;p&gt;To ensure that things were kept in a good state, I decided to commit these
changes, having a good solid bookmark for later.   It turns out that it was
a clever idea that would pay dividends soon.  Things were about to get messy.&lt;/p&gt;
&lt;h3 id="link-reference-definitions-and-line-requeues"&gt;Link Reference Definitions and Line Requeues&lt;a class="headerlink" href="#link-reference-definitions-and-line-requeues" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I can clearly remember looking at the Markdown for scenario test
&lt;code&gt;test_html_blocks_extra_02a&lt;/code&gt;, then looking at the generated HTML and thinking
“that looks wrong”.  It took me about twenty minutes of looking
and work around the house to figure out why, but I got there.&lt;sup id="fnref:break"&gt;&lt;a class="footnote-ref" href="#fn:break"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;To understand the reason that the generated HTML looked wrong
requires history on the PyMarkdown project.  I started working on the
PyMarkdown project because I saw a need for a Markdown linter that was
written in Python.  Now, I have a long love of parsers based on solid
specifications because there is a finality to them that is appealing to me.
People can argue about whether this one piece of Markdown is prettier or more
functional than another piece of Markdown.  That is opinion.  But I decided to
start writing the parser against the
&lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown specification&lt;/a&gt;,
following that wherever it took me.  It was a solid specification with examples,
so it provided guidance what was valid and test data that backed up that
guidance. For most of the project, I easily implemented the new elements,
one after the other.&lt;/p&gt;
&lt;p&gt;The last element of the specification core that I implemented were Link
Reference Definition elements.  From looking at the specification for the
element, I knew there was a simple way to do it and a proper way to do it.
Knowing that the difference between the two approaches was at least one month
of development time, I followed my gut and decided to do it the proper way.
Regardless of what happens, I solidly feel that I made the right decision at
that point.&lt;/p&gt;
&lt;p&gt;And the fallout from that decision was not easy to swallow.  The resultant
effort added at least two months of work required to support Link Reference Definitions
and line requeues.  Parsing the Link Reference Definitions going forward
was the easy part.  Because of the nature of Link Reference Definitions,
it is not unusual for the next line to be read in before determining if an
active Link Reference Definition is complete.  If that next line completes
the Link Reference Definition, everything is good.  Otherwise, the data
needs to be rewound, resulting in any lines used to be requeued.  To
keep things simple, I always use the &lt;code&gt;requeue_line_info&lt;/code&gt; variable to denote
requeued lines of this nature.&lt;/p&gt;
&lt;p&gt;Those line requeues also must reverse any state changes, which is where
the problems usually arise.  In a smaller, more contained system, it would
be easier to record any changes and simply roll them back when the lines
are requeued.  That is a more challenging task to achieve in this project.
I am confident that I have at least 85% to 90% of the cases dealt
with, but that is just a guess.  And with only a small handful of failures
in the base specification’s test data, I have had to generate my own test
data to test these scenarios properly.&lt;/p&gt;
&lt;h3 id="what-does-this-mean-for-these-tests"&gt;What Does This Mean for These Tests?&lt;a class="headerlink" href="#what-does-this-mean-for-these-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With that history refresher completed, I can now point out that PyMarkdown
is one of the few parsers that I have examined that properly implement Link
Reference Definitions. After talking with a handful of parser authors and checking
their source code,
the most prevalent way of parsing Link Reference Definitions is to examine
parsed Paragraph elements looking for Link Reference Definitions within
their content.  While it is not a perfect match for the functionality, that
approach surprisingly handles most of the cases that come up.  The only
difference is that the use of Paragraphs as a “container” also allows for
Paragraph Continuation to happen.&lt;/p&gt;
&lt;p&gt;It was as I was looking at the &lt;code&gt;test_html_blocks_extra_02a&lt;/code&gt; test when all
this information came flooding back to me.  The resultant HTML looked wrong
because it was wrong.  If you are using the “parse from paragraph” approach,
then the Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;producing a Link Reference Definition token makes sense.  Line two starts the
Link Reference Definition, only to be continued and completed on line three
because line three becomes
&lt;a href="https://github.github.com/gfm/#paragraph-continuation-text"&gt;paragraph continuation text&lt;/a&gt;,
allowing it to be added to the previous line due to
&lt;a href="https://github.github.com/gfm/#lazy-continuation-line"&gt;laziness&lt;/a&gt;.  This results in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, I decided to approach Link Reference Definitions as their own leaf
element.  This meant adjusting the output of the scenario tests to
reflect that approach.  In particular, the above example produces the following
HTML output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="err"&gt;/url&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without the paragraph continuation promoting laziness, the Link Reference
Definition is not valid, resulting in it being interpreted as plain text.&lt;/p&gt;
&lt;h3 id="fixing-the-problem"&gt;Fixing The Problem&lt;a class="headerlink" href="#fixing-the-problem" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Digging into this problem, I noticed a few issues that I needed to solve.
The first issue was in the &lt;code&gt;__check_for_list_closures&lt;/code&gt; function where an
already started Link Reference Definition stopped a list from being properly
closed.  In the previous Markdown example, this is what prevented the parser
from properly terminating the Link Reference Definition when the indentation
did not support continuing the list on line three.&lt;/p&gt;
&lt;p&gt;But removing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;was_link_definition_started&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;caused a cascade effect. Once removed, the &lt;code&gt;close_open_blocks_fn&lt;/code&gt; function was
able to try and close the open list element.  The problem that it uncovered is
that there was not any support for the &lt;code&gt;requeue_line_info&lt;/code&gt; variable.
It took the better part of two hours to add proper support for the
&lt;code&gt;requeue_line_info&lt;/code&gt; variable, including support for the cases where that
variable was not used.  And even after adding that code and getting all
the other tests passing, I still walked through the scenarios with the debugger
to make sure things were working properly.&lt;/p&gt;
&lt;p&gt;As I switched my focus back to solving the issue for the tests, the
next issue that arose was that an extra blank line was getting inserted
during the rewind.  After figuring out that it was the “empty”
arguments used to terminate the Link Reference Definition in the
&lt;code&gt;close_open_blocks_fn&lt;/code&gt; function, I explored whether to pass extra
data into that function to be used for aborted Link Reference Definitions.
Since this was the only case where it happened, I opted instead to keep
the modifications local, adding in two asserts and replacing that
blank line with the current line in the &lt;code&gt;__check_for_list_closures&lt;/code&gt; function
itself.  I am not sure if I am 100% okay with this solution, because it
feels like more of a hack that a proper fix.  But given the amount of
extra work that would need to be done to support a new parameter in the
&lt;code&gt;close_open_blocks_fn&lt;/code&gt; function, it was a lower cost option that was
clean to implement.&lt;/p&gt;
&lt;p&gt;Thinking I was done, I reran the tests, expecting them to pass.  They
did not pass.  Going once again into the debugger, I found that I was
not properly managing the cases where the stack depth decreased.
Specifically, there were cases where the start of the Link Reference
Definition removed an existing element when it was parsed.  As that
line was now being unwound, those &lt;code&gt;token_stack&lt;/code&gt; elements needed to
be put back to how they were before.&lt;/p&gt;
&lt;p&gt;Once again trying to think out of the box, I worked on clever tricks
to make things work before deciding on using something simple: a
stack copy.  I had avoided using these in the past as I was afraid
that they would not capture the state properly.  But in this case,
there was no alternative.  Going back to the
&lt;code&gt;process_link_reference_definition&lt;/code&gt; function, I transformed this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;original_stack_depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;original_stack_depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;into:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;original_stack_depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;original_stack_depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lrd_stack_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy_of_token_stack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that last change added, the final two scenario tests were now passing.
Executing every scenario test for the project, I found and handful of other
scenario tests that were also “wrong” and fixed them.  It was a good find,
and I was happy to increase my confidence in how aborted Link Reference
Definitions were handled.&lt;/p&gt;
&lt;p&gt;But next… the three disabled List element scenario tests.  But they
could wait until Sunday morning.&lt;/p&gt;
&lt;h2 id="issue-51-lists-and-indents"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/51"&gt;Issue 51&lt;/a&gt; - Lists and Indents&lt;a class="headerlink" href="#issue-51-lists-and-indents" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After spending my free time on Saturday working on Issue 49, I could
only hope that Issue 51 would be a lot easier.  But knowing that those
scenario tests were dealing with List elements did not give me
confidence.  It is not that I cannot find issues with Lists, it is quite the
opposite.  Whether it is true or not, I think I have worked hard to deal with
most of the List element related failures.  That means that whatever failures
are left and more difficult.  Not fun… but still worth doing.&lt;/p&gt;
&lt;p&gt;Taking a quick look at the three scenario tests, the Markdown documents quickly
divided the tests into two groups.  The first group dealt with strange indents
and Block Quote elements while the second group dealt with interesting indentation
and its effect on the output.   After flipping a card that I keep on my desk for
just these decisions, I decided to work on the second group first.&lt;/p&gt;
&lt;p&gt;Looking at the failures, it was obvious that there were two separate
problems.  The first problem was that valid list starts that started with more
than three space characters were being ignored.  In particular, the entries
for nested lists that were indented more than three spaces from the start were
not parsing properly. To solve this issue, I created a new
&lt;code&gt;__adjust_whitespace_for_nested_lists&lt;/code&gt; function that examined a current list
token and its parent token, finding the correct range for a “base”
ident to use.  Once that range was determined, if the amount of whitespace
was within that range, the &lt;code&gt;adj_ws&lt;/code&gt; variable was trimmed to remove excess
space characters.&lt;/p&gt;
&lt;p&gt;Continuing with that theme, the next issue was within the &lt;code&gt;__process_eligible_list_start&lt;/code&gt;
function.  Like the work performed in the &lt;code&gt;__adjust_whitespace_for_nested_lists&lt;/code&gt;
function, the &lt;code&gt;__process_eligible_list_start&lt;/code&gt; needed to be adjusted to
only remove stack items that were necessary to remove.  Like the case for
the previous solution, this solution was geared towards properly taking
care of lists and their indentation.  In this case, it needed to
deal with list indents that were decreasing for a given list level but
were still considered valid.&lt;/p&gt;
&lt;p&gt;A good example of this is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
   &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In each list item for the nested list, the lists are indented properly, just
aligned on the right side.  In that document, it means the starting point for
the text remains constant, but the starting point for the list text decreases
by one for each line.&lt;/p&gt;
&lt;p&gt;To solve this, I needed to add another range check.  While increasing indents
for lists had already been dealt with, I needed to support decreasing indents.
As such, the left bound for that range was the start of text for the parent
list.  The right bound was that point plus three characters, as dictated by
the specification.  It took a bit to code, but it was quickly added to the
function.&lt;/p&gt;
&lt;p&gt;Hoping I had done enough to solve the issue, I executed the scenario tests and
verified the results.  After correcting the tokens and verifying the output,
I was happy to have both List element tests now passing.  It was a good feeling.&lt;/p&gt;
&lt;h3 id="what-about-the-first-group"&gt;What About the First Group?&lt;a class="headerlink" href="#what-about-the-first-group" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After all that work, it was already later in the afternoon that I had hoped
for.  As such, I created a new issue for the remaining test and started to
compose the article as I went through the process of committing the changes
so far.  The work was a big enough chunk as it was that I did not feel bad
in separating the work.  It just made sense.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ugh.  It was a long week and a boring week.  But I know that work is going
to pay off in lower maintenance costs going forward, so I am still on-board
for getting it done.  It just needs to get done, and I must muster the
patience to get it accomplished in short order.&lt;/p&gt;
&lt;p&gt;As for the other work that I accomplished this week, I am happy to get those
items off the Issues List.  The painful thing that I realized after solving
those issues is that I could have solved them earlier.  Granted it took the
better part of two days to eliminate ten of eleven skipped tests, but that is
a small amount of effort to expend.  I feel that I could have
expended that effort earlier and expended less effort to solve them.&lt;/p&gt;
&lt;p&gt;But things worked out the way they did, and the project is better for it.
At this point, I am just focusing ahead at getting the reported issues
dealt with and making the project as robust as possible.  I do feel it is
in a good place, I just want it to be in a slightly better place!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I still need to finish the verification of the comment strings.  I do not
want to let that drag on.  But as to which issues I will choose other than
that one, I am not sure.  Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:rediscover"&gt;
&lt;p&gt;I had been exposed to them before but had forgotten all about them in the time since then. &lt;a class="footnote-backref" href="#fnref:rediscover" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:break"&gt;
&lt;p&gt;I am not sure if it works for any readers out there, but I often find that taking a break and doing something that is not related to what you are having a problem with is great for breaking through problems. &lt;a class="footnote-backref" href="#fnref:break" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - More Beta Bugs</title><link href="https://jackdewinter.github.io/2021/10/04/markdown-linter-more-beta-bugs/" rel="alternate"></link><published>2021-10-04T00:00:00-07:00</published><updated>2021-10-04T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-10-04:/2021/10/04/markdown-linter-more-beta-bugs/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-a.md"&gt;last article&lt;/a&gt;, I talked
about getting to work on reducing the count of bugs in the Issues List. In
this article, I talk about the headway I am making towards getting those
issues dealt with.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Issues, issues, issues.  Bugs, bugs, bugs.   Problems, problems, problems.
No matter …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-a.md"&gt;last article&lt;/a&gt;, I talked
about getting to work on reducing the count of bugs in the Issues List. In
this article, I talk about the headway I am making towards getting those
issues dealt with.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Issues, issues, issues.  Bugs, bugs, bugs.   Problems, problems, problems.
No matter which way I talk about it, it means the same thing to me.  With the beta
release out the door, it is time for me to try and battle the issues on the Issues
List.  I know I need to either resolve them as already fixed or to fix them there
and then.  I just need to keep on making good progress on fixing things.&lt;/p&gt;
&lt;p&gt;That and I hope that I do not find any “must rearchitect” issues.  That would
be… well… expensive and time consuming.  Fingers crossed!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5f14d073b6a526fde77cbb88292e6639185340b5"&gt;26 Sep 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/86f974d15dc6eff1602a3fd88f8eeac41de15f9a"&gt;03 Oct 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="issue-34-getting-things-to-line-up"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/34"&gt;Issue 34&lt;/a&gt; - Getting Things To Line Up&lt;a class="headerlink" href="#issue-34-getting-things-to-line-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue was recorded simply as a Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;so&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="k"&gt;simple&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;"a&lt;/span&gt;
&lt;span class="ss"&gt;&amp;gt;  title"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The note itself was not that helpful, but once I parsed the document into
its tokens and looked at them, I noticed the problem right away:  the tokens
were not there.  Looking more closely at the output, an exception occurred
that stopped the document from being parsed.&lt;/p&gt;
&lt;p&gt;Enabling the &lt;code&gt;--stack-trace&lt;/code&gt; command line option, I quickly found that
within a loop in the &lt;code&gt;correct_for_leaf_block_start_in_list&lt;/code&gt; function, an assert
statement was present to ensure that the loop only worked on lists.  It
was that assert statement that was failing, causing the parsing to be stopped.
I started to address the issue by adding code to only continue the loop
if the last item on the &lt;code&gt;token_stack&lt;/code&gt; list was a list.  Also adding
code to conditional cleanup after the loop based on the same condition,
I was ready to see how this document would parse.&lt;/p&gt;
&lt;p&gt;Feeling a bit anxious, I reran the test, hoping that everything would
work.  It initially looked like everything was going to work properly.
But when I looked at the tokens, something was wrong.  It looked like
most of the tokens were correct, but there were tokens that were slightly
off.  For the most part, the data was correct, but the position of the
tokens was a bit off.&lt;/p&gt;
&lt;p&gt;This was going to be a more complicated issue to work through.&lt;/p&gt;
&lt;h3 id="digging-into-the-debug"&gt;Digging Into The Debug&lt;a class="headerlink" href="#digging-into-the-debug" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It took a fair amount of experimentation to figure out what the real issue
was.  Adding debug here and there and observing the behavior slowly
led me to the observation that the positions were not off by line numbers,
but by small column numbers.  Doing some further digging into the problem,
I noticed that each column number offset remained constant within
an example.  With a stroke of luck, I noticed that it only happened with
examples that had other elements within a Block Quote element.&lt;/p&gt;
&lt;p&gt;It was then I figured out it was a problem with Block Quote elements
and their &lt;code&gt;leading_text_index&lt;/code&gt; variable.  Suddenly, the full scope of the
problem fell into place, and additional debug confirmed that hypothesis.
When each example was being parsed, the leading text for the Block
Quote was being carefully removed and placed in the Block Quote token,
but the &lt;code&gt;leading_text_index&lt;/code&gt; variable
was not updated.  As such, each of the calculated positions within the
Block Quote element were calculated solely using the length of the
leading text from the first Block Quote line.&lt;/p&gt;
&lt;p&gt;Wow… it did take a while to get to that hypothesis, and it took a
bit more time to confirm it.  But when I had it confirmed, it made a lot
of sense.  To address it, I started adding the required plumbing to
update the &lt;code&gt;leading_text_index&lt;/code&gt; variable properly, and the rest just
fell into place.  It didn’t take me long to get that up and working,
but I wanted to be extra sure that I solved the problem properly.&lt;/p&gt;
&lt;p&gt;As the positions for most of the inline tokens are calculated, I double
checked those tokens more thoroughly than the other tokens.  I even
checked variations on the Markdown document to make sure they were also
working.  In the end, after much thinking to get there, the issue was solved.&lt;/p&gt;
&lt;p&gt;After that long effort, I wanted to pick something more relaxing to
work on and get my energy back.&lt;/p&gt;
&lt;h2 id="issue-36-verifying-disabled-rules"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/36"&gt;Issue 36&lt;/a&gt; - Verifying Disabled Rules&lt;a class="headerlink" href="#issue-36-verifying-disabled-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was a monotonous task, but one that I knew that I needed to do at some point:
verify that any rule test that disabled another rule did so for the right reasons.  As
the number of rules grew dramatically in the last three months, I had suspicions that some
of the reasons that rules were disabled were no longer applicable.  And while I can check
for any enabled rule and its applicability by executing the full set of tests for the
project, verifying disabled rules was a very manual process.&lt;/p&gt;
&lt;p&gt;This task took the better part of ten hours to complete over four days.  It wasn’t
that exciting, so I decided to break the one big task into smaller tasks to help keep me motivated
throughout the entire process.  That turned out to be a great decision. I found
that the more I worked on the process, the more errors I made in verifying the disabled
rules.  Nothing too serious, but for each error I made, I restarted the testing at the
last-known good point, hindering my forward process.  As far as I can tell, it was just
the monotonous nature of the task that made my mind wander just enough to lose track of
things.&lt;/p&gt;
&lt;p&gt;But after almost ten hours, I was done.  When all was said and done, just over one
hundred rules had extra &lt;code&gt;--disable-rules&lt;/code&gt; options that they did not need.  And while
it was a very boring task, I found it to be a very worthwhile task.  I now had my
confidence back that the rules tests were testing what they were supposed to test,
and only disabling rules when they had to.  That meant I could introduce changes
to the core and the rules with “that much” more confidence that the tests would
catch any changes gone bad.&lt;/p&gt;
&lt;h2 id="issue-37-verifying-lists-and-blank-lines"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/37"&gt;Issue 37&lt;/a&gt; - Verifying Lists and Blank Lines&lt;a class="headerlink" href="#issue-37-verifying-lists-and-blank-lines" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I do try and put forth my best effort every time, sometimes I fall short
of that goal.  When I picked this Markdown out of the Issues List:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;some&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I looked for it in the scenario tests and found it.  But for some reason, I
focused on the scenario test right above the actual test that held this document.
I feel kind of stupid, but for the first three or four times that I looked
at what I thought was the test housing this example, I was looking at the
previous test.  After that, I think it was just stuck in my head until
I came back to it after leaving it alone for a while.  I was very embarrassed
when I finally figured that out.&lt;/p&gt;
&lt;p&gt;Once I got that straightened out, everything made sense.  Because I had
made this mistake this time, I probably had made a similar mistake when
adding this document to the Issues List.  But while I was verifying that
example, I used the time to check the other examples for the rule.  While
all the existing tests were fine, I added this document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;some&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to fill in a hole that I saw in the testing.&lt;/p&gt;
&lt;p&gt;While the actual example was not a problem, I did find a minor problem
that I was able to overcome and add to the tests for the rule.  Sometimes,
the steps are small.  I am okay with that!&lt;/p&gt;
&lt;h2 id="issue-38-false-positive"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/38"&gt;Issue 38&lt;/a&gt; - False Positive&lt;a class="headerlink" href="#issue-38-false-positive" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes I get lucky and see issues that look like problems, only to have them
turn out not be problems at all.  While that does not happen as often as I would
like, this was one of those cases.  The Markdown is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;paragraph&lt;/span&gt; &lt;span class="n"&gt;inspired&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;paragraph&lt;/span&gt;
&lt;span class="ss"&gt;"paragraph"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While there wasn’t that much information in the list except for the Markdown example,
I can only assume that the extra newline in the Link’s label was the cause of my concern.
Looking at other examples for rule Md044, I was able to find examples that somewhat
looked like that example, but not one that had a split Link label.&lt;/p&gt;
&lt;p&gt;But in the end, just like the previous issue, the example in the Issues List passed
without any problem.  I added a new scenario test to fill a small hole that I found,
but that was it.  However, I still feel that this was time well spent.  Sure, for the
second time in a row the actual issue was a false positive, but I was also able to
find something that I missed.  And if nothing else, I verified that things were working
properly.&lt;/p&gt;
&lt;h2 id="issue-39-fun-with-nested-containers"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/39"&gt;Issue 39&lt;/a&gt; - Fun with Nested Containers&lt;a class="headerlink" href="#issue-39-fun-with-nested-containers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During the testing of Rule Md007, I came across a document that was parsing incorrectly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Playing around with it at the time, I noted that the first two levels were being parsed
properly, but the text from the third level was being included into the second level.
Taking the time to look at it some more, I determined that the same example without
any Block Quote element worked fine.  Therefore, it was something about the Block Quote
that was causing this to happen.  And that meant looking at the
&lt;code&gt;__get_nested_container_starts&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;It was obvious that I needed to massage the whitespace to consider the
Block Quote, but I was not sure how.  After four or five hours of tinkering,
I had this code ready:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex_ws_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;whitespace_scan_start_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token_stack_index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token_stack_index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# if text_removed_by_container:&lt;/span&gt;
                &lt;span class="c1"&gt;#     if text_removed_by_container.startswith("&amp;gt; "):&lt;/span&gt;
                &lt;span class="c1"&gt;#         text_removed_by_container = text_removed_by_container[2:]&lt;/span&gt;
                &lt;span class="c1"&gt;#     elif text_removed_by_container.startswith("&amp;gt;"):&lt;/span&gt;
                &lt;span class="c1"&gt;#         text_removed_by_container = text_removed_by_container[1:]&lt;/span&gt;
                &lt;span class="c1"&gt;#     else:&lt;/span&gt;
                &lt;span class="c1"&gt;#         POGGER.info("check next container_start&amp;gt; out of block quote data")&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token_stack_index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token_stack_index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws_before_marker&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex_ws_test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;whitespace_scan_start_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token_stack_index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws_before_marker&lt;/span&gt;

        &lt;span class="n"&gt;after_ws_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;whitespace_scan_start_index&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;ex_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ex_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
            &lt;span class="n"&gt;after_ws_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;whitespace_scan_start_index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is a lot of whitespace to deal with, the function needs to
make an educated guess as to how much of that is actual whitespace and how much
of that belongs to the List element.  For example, given this Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it is visibly obvious that there are three levels to the list, with all three
levels within a Block Quote element.  But creating an algorithm to figure
that out is not as easy.  That algorithm must consider whether the text on
the third line is a new level or is a continuation of level two.  And since
the container processing comes before the leaf processing, that determination
needs to be made early on.&lt;/p&gt;
&lt;p&gt;The algorithm works with this and tries to remove only as much whitespace
as is necessary to get a solid determination of whether the line is eligible
for a new List element start or if it is just text.  While the second part
of the algorithm, not shown in the above example, tackles the “eligible List
element start” part of that process, the above code tries to get the whitespace
ready for that process.  If there is whitespace that has a length that
is less than the current List element indentation, that whitespace can be
removed for the purposes of the second algorithm.  In fact, it is imperative
that the whitespace is removed.&lt;/p&gt;
&lt;p&gt;It took a while to get there, but with a couple of slight changes, it was
working. And for what it is worth, I know that this is probably just the start of issues with
nested container tokens.  Right now, it is just a feeling, but that feeling tells me
that I am going to need to add extra testing for various nested container elements.
And as far as this project goes, those feelings are usually correct.&lt;/p&gt;
&lt;h2 id="issue-40-images-as-headings"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/40"&gt;Issue 40&lt;/a&gt; - Images as Headings&lt;a class="headerlink" href="#issue-40-images-as-headings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most of the time, I look at a collection of rules and they just look like they are meant to be
together.  But sometime, I see a set of rules that look like two completely different
organizations crafted them.  That was the case with Rule Md041 and Rule Md033.  Rule Md041
allows a top-level heading to be defined as a &lt;code&gt;H1&lt;/code&gt; HTML tag, but Rule Md033 triggers on any
HTML tags that are present in the document.  To me, that looked like a bit of a mismatch,
and a mismatch that was easily fixable.&lt;/p&gt;
&lt;p&gt;To cleanly fix this issue, I added a configuration value &lt;code&gt;allow_first_image_element&lt;/code&gt; that
defaults to &lt;code&gt;True&lt;/code&gt;.  First, I added code to set the &lt;code&gt;__is_first_element&lt;/code&gt; variable
if the current token is the very first token, and the &lt;code&gt;__is_first_html_block&lt;/code&gt;
variable to allow the &lt;code&gt;__look_for_html_start&lt;/code&gt; function to know that the HTML block was
part of that first token.  With that preamble set up, the following code was added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;is_first_image_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_first_html_block&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__allow_first_image_element&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;tag_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"h1"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;is_first_image_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/h1&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_first_image_element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;full_tag_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/h1&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="n"&gt;end_of_start_heading_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;end_of_start_heading_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;full_tag_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_of_start_heading_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="n"&gt;end_of_image_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;is_first_image_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;img"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;end_of_image_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code is not pretty, but it is packed with functionality.
This code ensures that the &lt;code&gt;allow_first_image_element&lt;/code&gt; configuration value is
enabled and that the HTML tag text starts with &lt;code&gt;&amp;lt;h1&lt;/code&gt;.  From there, it makes sure
that the text ends with &lt;code&gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;, that only the &lt;code&gt;img&lt;/code&gt; tag follows the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag,
and that the &lt;code&gt;img&lt;/code&gt; tag is the only tag present between the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag and the &lt;code&gt;&amp;lt;/h1&amp;gt;&lt;/code&gt; tag.
Only if all those things line up, does the &lt;code&gt;is_first_image_element&lt;/code&gt; variable get set to
&lt;code&gt;True&lt;/code&gt;, allowing the rule to not trigger on image headings.&lt;/p&gt;
&lt;p&gt;It just felt good to get this taken care of.  If I can find someone to make a good
heading image for the PyMarkdown project, I might use this!&lt;/p&gt;
&lt;h2 id="issues-41-cleaning-up-documentation"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/41"&gt;Issues 41&lt;/a&gt; - Cleaning Up Documentation&lt;a class="headerlink" href="#issues-41-cleaning-up-documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another issue that was added to the Issues List was the documentation for Rule Md041.
While verifying that everything looked good for all rule documentation, there was a cryptic
set of text at the bottom of the documentation for that rule:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;“Diff html comments?”  What did that mean?  I wasn’t sure.  It took me a big of
poking around before I was able to figure out what it meant.  After looking at the
test documents for this rule in my Markdown editor, I noticed that there was only
one difference between the project rule and the original rule: it handled the HTML
comment tags differently.  Specifically, the original rule doesn’t deal with the
comment tags or other special tags at all, rendering them more or less invisible.&lt;/p&gt;
&lt;p&gt;Thinking through this difference, I came to a defensible decision that I had written
the PyMarkdown rule correctly.  Depending on the definitive source used, tags such
as the comment tags can be viewed as either proper HTML tags or helper HTML tags.
Since those tags do not directly affect how the web page is displayed, it can be
argued that they are not proper tags.  But it can also be argued that those tags
are as important to a document as punctuation or foot notes.&lt;/p&gt;
&lt;p&gt;Taking a holistic
view, I decided that view every part of a HTML document as integral part of that
document.  Therefore, HTML comment tags and the other special tags are integral
to the document.  It therefore follows, if they show up in the Markdown before
being translated into HTML, they will be present in the rendered HTML document.
Therefore, the rule should trigger on those special tags just like it triggers
on any other tag.  Done!&lt;/p&gt;
&lt;p&gt;Hopefully, resolving this issue will teach me to leave better notes for myself.
Probably not right away, but I hope it does!&lt;/p&gt;
&lt;h2 id="issue-42-sorted-output"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/42"&gt;Issue 42&lt;/a&gt; - Sorted Output&lt;a class="headerlink" href="#issue-42-sorted-output" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue was recently put on the Issues List after more rules were added to the project.
While it does not have a lot of impact on the tests within the project, I have seen unordered
output in normal uses.  It is not usually a big problem to mentally go through the list
of reported issues and figure out where they are in the document.   However, I thoroughly
admitted that it would be useful to have them be in sorted order to allow for a good top-to-bottom
or bottom-to-top scan of the output.&lt;/p&gt;
&lt;p&gt;To supply the output in a sorted order, a couple of small changes needed to be made,
mostly in the &lt;code&gt;plugin_manager.py&lt;/code&gt; module.  Previously, an instance of the &lt;code&gt;ScanContext&lt;/code&gt;
class was created at the start of each document and functioned as a conduit to ensure that
any triggered rules were reported properly.  To address this issue, that design was changed slightly to
introduce the &lt;code&gt;add_triggered_rule&lt;/code&gt; function and the &lt;code&gt;report_on_triggered_rules&lt;/code&gt; function.
Instead of the &lt;code&gt;report_next_line_error&lt;/code&gt; function and the &lt;code&gt;report_next_token_error&lt;/code&gt; function
directly calling the &lt;code&gt;log_scan_failure&lt;/code&gt; function themselves, the new &lt;code&gt;add_triggered_rule&lt;/code&gt; function
is called, adding the reported error to the context’s list of errors.  Once the entire
document has been scanned, the &lt;code&gt;report_on_triggered_rules&lt;/code&gt; function is then called.  This
function simply sorts the list of reported errors before calling the &lt;code&gt;log_scan_failure&lt;/code&gt; function
to report each error.&lt;/p&gt;
&lt;p&gt;While resolving this issue does not provide a lot of difference to documents with a small
number of reported failures, I find that it makes a substantial difference to larger
sets of reported failures.  In my case, when going through lists of errors, I tend to
work from the bottom of the list to the top so that the line numbers are not disturbed.
I can see this working better for me and how I attack those lists.  I hope it helps
others too!&lt;/p&gt;
&lt;h2 id="issue-31-adding-module-support"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/31"&gt;Issue 31&lt;/a&gt; - Adding Module Support&lt;a class="headerlink" href="#issue-31-adding-module-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue didn’t really involve a big change, but it was a request from one of the users, so it
made the top of the list.  In Python, one of the interesting ways of executing Python
code is through exposing the package as an
&lt;a href="https://docs.python.org/3/tutorial/modules.html"&gt;executable module&lt;/a&gt;.
As I was not sure which people would want to execute the project it that manner, I left it off the
list of features to add.  But with a request from a user, it was back on the list.&lt;/p&gt;
&lt;p&gt;It took a bit of research to get it right, but in the end, the only change that was
needed was the addition of the &lt;code&gt;__main__.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pymarkdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If that code seems overly simplistic, it is because it is.  According to various
pages on the &lt;a href="https://docs.python.org/3/library/__main__.html"&gt;Python site&lt;/a&gt;,
the &lt;code&gt;__main__.py&lt;/code&gt; file had special properties that are invoked when it is
invoked on behalf of a package using the &lt;code&gt;-m&lt;/code&gt; module flag.  When it is run as
a module, the above &lt;code&gt;if&lt;/code&gt; statement evaluates to &lt;code&gt;True&lt;/code&gt; and the &lt;code&gt;main&lt;/code&gt; function
from the &lt;code&gt;main.py&lt;/code&gt; module is invoked.&lt;/p&gt;
&lt;p&gt;Not much to add, but a good addition to tidy things up for the week!&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I know there are probably a couple of difficult issues hiding
in plain sight amongst the Issues List, I haven’t hit any of them yet.
I am keeping up a good pace and finding and fixing issues, and I happy
with the progress.  Do I wish it went faster? Sure… but I also know
it will take as long as it takes.  Now that I have the beta release
out there, it takes the pressure off a bit.&lt;/p&gt;
&lt;p&gt;But I also know that I have a good collection of fixed issues, so
I am planning a build version update tomorrow to get these fixed
issues into the hands of users.  That does feel great, knowing that
I am at a place where I can do that!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What else? More issues. Hopefully, some exciting ones this next week.
Well… maybe hopefully? Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Clearing Away Some Bugs</title><link href="https://jackdewinter.github.io/2021/09/27/markdown-linter-clearing-away-some-bugs/" rel="alternate"></link><published>2021-09-27T00:00:00-07:00</published><updated>2021-09-27T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-09-27:/2021/09/27/markdown-linter-clearing-away-some-bugs/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/09/20/markdown-linter-race-to-the-finish/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting the final three rules completed. In this article, I
talk about getting to work on reducing the count of bugs in the Issues List.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With all the work on creating the missing rules wrapped up …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/09/20/markdown-linter-race-to-the-finish/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting the final three rules completed. In this article, I
talk about getting to work on reducing the count of bugs in the Issues List.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With all the work on creating the missing rules wrapped up, I was eager to double check things for
the beta release, and get it packaged and uploaded to &lt;a href="https://pypi.org/"&gt;PyPi.org&lt;/a&gt;.
But after that was done, I knew that I still had to work to do, simply different work.
Instead of writing new rules, I needed to go back over previous issues I have found and
start dealing with the “I’ll deal with it later” issues.&lt;/p&gt;
&lt;p&gt;Yes, it was now “later”.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/47ab4e6e6c57c4187398870ffb9632375975fd64"&gt;21 Sep 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/a5669f0f5b956b38447924eff78427f0c52aef1a"&gt;25 Sep 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-beta-release-happens"&gt;The Beta Release Happens&lt;a class="headerlink" href="#the-beta-release-happens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From a commit point of view, the beta release was not anything more than changing a couple
of files and running a script that I normal do not run.  But mentally, it was an important thing for me.
After working for two years to get something working on my terms, I was able to finish
a beta release that I am confident about.  Running that script knowing that it would
publish a solid, well-tested version of my project to the Python &lt;a href="https://pypi.org/"&gt;PyPi&lt;/a&gt;
repository just seemed right.  It was not too soon, it was not with reservations, it was
just the right time for the release to happen.&lt;/p&gt;
&lt;p&gt;Do I expect issues to get logged in GitHub?  Yes, I would be surprised if issues were not
logged.  First off, I know I have confidence that I covered most of the more common scenarios, but
I also have confidence that I did not cover all the scenarios. Secondly, as weird as it
may sound, if people are filing issues, it means they are using the project and putting
it through their own scenarios.  And hopefully, for every issue that gets logged
with GitHub, there is a given multiplication factor of users that do not have any issues
with the project, and are therefore happy with the project.&lt;/p&gt;
&lt;p&gt;What is that multiplication factor?  I do not currently know.  But even if that multiplication factor
is in the single digits, it means that people are using the project.  That is good for
my confidence.  That is all that I need, nothing more.&lt;/p&gt;
&lt;p&gt;And as usual, before digging into fixing issues, there was a bit of cleaning up
that I wanted to get done.&lt;/p&gt;
&lt;h2 id="doing-some-house-cleaning"&gt;Doing Some House Cleaning&lt;a class="headerlink" href="#doing-some-house-cleaning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having a &lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/clean.cmd"&gt;clean script&lt;/a&gt;
and a
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/.github/workflows/main.yml"&gt;Continuous Integration script&lt;/a&gt;
has been a big asset for the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
I am usually fussy about running the clean script before every commit, but the
Continuous Integration script makes sure that I stick to that process.  Normally, I develop on a
Windows machine because I have more tools that work seamlessly with how I work.    But
that still leaves testing on other operating systems, which has previously been painful.
The Continuous Integration script addresses that by running the full set of
tests against a Windows operating system, a Mac operating system, and a Linux operating system.
Having this process done automatically with each commit has helped me concentrate on
the project itself, not the operating systems.&lt;/p&gt;
&lt;p&gt;But one little thing has been bugging me during the rule development phase: changing command
lines.  There are a small handful of rules that I want to disable on my own Markdown
scans. In most cases, this is temporary while I get everything else worked out and
think about possible rule changes.  In some cases, it is just to give me time to
fix the issues instead of disabling it.
These disabled rules are
no-space-in-code,
no-space-in-emphasis,
line-length, and
no-duplicate-heading.
That is not what I was concerned about.  It was that when developing the rules,
I needed to change the disabled rules in both scripts.  That just was not cool.&lt;/p&gt;
&lt;p&gt;Before I started tackling reported issues as they trickle in, I decided that I wanted
to fix that right away.  It was not a tremendous change to make, but I believe it was a
good choice to work on as it would be one less thing to worry about.  Additionally,
it showed off a real-world use of the configuration file, which was a benefit.&lt;/p&gt;
&lt;p&gt;To perform this switch to use a configuration file, I
created a new file, &lt;code&gt;clean.json&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"no-space-in-code"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"no-space-in-emphasis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"line-length"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"no-duplicate-heading"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Saving it in the root directory of the repository, I then went and replaced this
part of the command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--disable-rules no-space-in-code,no-space-in-emphasis,line-length,no-duplicate-heading
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in both scripts to read:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--config ./clean.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I executed the clean script locally and verified that everything looked correct.
Hoping that I
did not miss anything, I created a new commit for this change, pushed it to main
repository, and watched as the tests started to run.  It took about four minutes,
but when I saw that green circle besides the tasks saying that everything executed
correctly, I let go a little “Yes!” to myself.&lt;/p&gt;
&lt;p&gt;Not a big issue, and an issue that no one except me would probably worry about.
But it was an issue that I was happy to get taken care of.&lt;/p&gt;
&lt;h2 id="issue-23-issue-with-rule-md023"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/23"&gt;Issue 23&lt;/a&gt; - Issue with Rule Md023&lt;a class="headerlink" href="#issue-23-issue-with-rule-md023" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know it might seem weird to some people, but I love debugging.  It gives me a chance to really
dig into something and either learn about it or increase my knowledge about how it works.
Sometimes I learn that I did not think of a given use case, and sometimes I learn that
I forgot something completely.  That last one was the case with this issue: I forgot
to implement pivotal code in Rule Md023.&lt;/p&gt;
&lt;h3 id="token-history"&gt;Token History&lt;a class="headerlink" href="#token-history" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To understand the issue, I need to go into a bit of parser history to explain that the
&lt;code&gt;end_whitespace&lt;/code&gt; within a Text token that existing within a SetExt Heading element was a bit
tricky to store.  Because whitespace must be removed from both the start of each line
and the end of each line in a SetExt Heading element, it left me with a fun decision to make: where to put the
removed whitespace?  Because one of the project’s cardinal parser rules is that any parsing must
produce a set of tokens that can then reconstitute the Markdown document exactly as it was.
As such, the whitespace had to go somewhere.  If it was a normal paragraph, only the
leading whitespace from each line would be removed and stored within the Paragraph
element that owns that Text token.&lt;/p&gt;
&lt;p&gt;After considering assorted options, none of them were attractive.  But the least
unattractive was to override the &lt;code&gt;end_whitespace&lt;/code&gt; field to hold both the leading space
characters and trailing space characters that were removed.  Normally, I would do this by having two different
fields, one for the leading spaces and one for the trailing spaces.  But not wanting to
add an extra field to the Text token just for use within a SetExt Heading element, I
improvised.  The &lt;code&gt;end_whitespace&lt;/code&gt; would normally hold any trailing spaces, separated
by the newline character.  So, to “duplex” each line, if there were any leading spaces to
store in the same line, it would be followed with the &lt;em&gt;whitespace split character&lt;/em&gt;,
&lt;code&gt;\x02&lt;/code&gt;.  In that way, I was able to store both leading spaces and trailing spaces
within the same field.&lt;/p&gt;
&lt;h3 id="back-to-the-issue"&gt;Back To the Issue&lt;a class="headerlink" href="#back-to-the-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Going back to the issue at hand, that special character presented an issue that I
had not thought about when I was writing this rule.  Reminding myself of this,
I looked at the existing code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__setext_start_token&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__any_leading_whitespace_detected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_whitespace&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__any_leading_whitespace_detected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without support for the whitespace split character, that code was detecting
any whitespace that occurred at the start or the end of the line.  Since whitespace
at the start of the line would be encoded as &lt;code&gt;{space}\x02&lt;/code&gt; and whitespace at the
end of the line as &lt;code&gt;{space}&lt;/code&gt;, the above code would evaluate both as extra leading
whitespace.&lt;/p&gt;
&lt;p&gt;The only way to fix this was to scan through the &lt;code&gt;end_whitespace&lt;/code&gt; field, one
line of information at a time, looking for any cases where the sequence
&lt;code&gt;{space}\x02&lt;/code&gt; was found.  To do that, I replaced the earlier code with the
following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__setext_start_token&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__any_leading_whitespace_detected&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_whitespace&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;split_end_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_split&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;split_end_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__seen_first_line_of_setext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;split_next_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_split&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;whitespace_split_character&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_next_split&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;split_next_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__any_leading_whitespace_detected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__seen_first_line_of_setext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code works by going through each line represented in the &lt;code&gt;end_whitespace&lt;/code&gt; field,
one line at a time.  For each line, it splits the line’s information on the whitespace
split character.  If the whitespace split character is present, then the split will
result in the variable &lt;code&gt;split_next_split&lt;/code&gt; having an array of two strings, with the
first element holding any characters in the line that occurred before the whitespace
split character.  Therefore, if at least one line has a &lt;code&gt;split_next_split&lt;/code&gt; variable
of length &lt;code&gt;2&lt;/code&gt; with a non-zero length, then that line has leading whitespace.&lt;/p&gt;
&lt;p&gt;Thinking this was clever, I ran it through the first time, and was disappointed that
it failed.  After a couple of minutes of debugging, I remembered that the leading spaces
for SetExt Heading tokens are stored with that start token, not within the Text token
contained within.  Adding a bit of extra code to take care of that first case,
I executed the code again and everything worked fine!&lt;/p&gt;
&lt;p&gt;Just to be sure, I created five new scenario tests for Rule Md023, each with a different
amount of trailing space at a different location.  Maybe it is a bit paranoid, but after
finding one example that failed, I wanted some extra insurance that I had fixed the
problem and fixed it properly.&lt;/p&gt;
&lt;p&gt;It was an interesting feeling getting back to debugging non-rule code.  It partly
felt like it was something that I was used to, and partly that it was something
new and different.  It was an odd pair of feelings, but both were good feelings,
so I was okay with both.&lt;/p&gt;
&lt;h2 id="issue-22-issue-with-rule-md033"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/22"&gt;Issue 22&lt;/a&gt; - Issue with Rule Md033&lt;a class="headerlink" href="#issue-22-issue-with-rule-md033" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue was not really a big one, but it was reported as not making sense to users, so
I wanted to tackle it quickly. Rule Md033 deals with Raw HTML being exposed, either as
a HTML Block element or a Raw HTML Inline element.  I figured that I had missed something
simple and wanted to make sure it was set right.&lt;/p&gt;
&lt;p&gt;It turned out that I had missed two small issues, both nuisances.  The first one
was that I included a close HTML tag, any normal HTML tag starting with &lt;code&gt;&amp;lt;/&lt;/code&gt;, in the list
of acceptable trigger items.  While I had thought that the original rule did fire one
this, extra checking revealed that it did not.&lt;/p&gt;
&lt;p&gt;The other issue was a bit more nuanced, but just as small.  In HTML, there are
special sequences that allow for special handling of HTML documents.  Of special note,
these sequences are called out in the GFM documentation of the
&lt;a href="https://github.github.com/gfm/#html-blocks"&gt;HTML Block element&lt;/a&gt; by each one of them
having their own special HTML Block type.  These sequences are comment blocks, processing
instructions, declarations, and CDATA.  I had originally taken one of them,
the &lt;code&gt;![CDATA[&lt;/code&gt; sequence and provided special behavior for that sequence, but that was not
good enough.  Given a simple example from one of the project’s users:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="c1"&gt;--TOC--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apparently, my habit of following a start HTML comment tag with whitespace was just that…
my habit.&lt;/p&gt;
&lt;p&gt;So, to correct that issue, I change the code to allow for both CDATA and comments to be
detected on their own without any whitespace to follow.  Along with a change to the default
value to suppress processing instructions and declarations by default, this issue was
fixed.&lt;/p&gt;
&lt;p&gt;It was not a big fix, but a good one to get out of the way.&lt;/p&gt;
&lt;h2 id="issue-27-issue-with-rule-md032"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/27"&gt;Issue 27&lt;/a&gt; - Issue With Rule Md032&lt;a class="headerlink" href="#issue-27-issue-with-rule-md032" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I must admit.  When I first saw this issue pop up, in my head I looked at it and went:
“No, that looks right!”  But after checking it more closely, the issue began to seep into
my brain.  Starting with something simple, the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;parsed cleanly.  Then the second example, the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;also parsed cleanly.  Fine.  I agreed with both of those.  Md032 deals with blank
lines around List elements, and everything looked good so far.  Then the third sample was
presented, one which was causing the rule to trigger.  A modification of the earlier
example, this one was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and it triggered the rule each time.  From looking at the nested List elements, it was
obvious that it should not fire, so what was wrong?&lt;/p&gt;
&lt;p&gt;Enabling debug for the rule, I was able to quickly narrow down on the issue.
Specifically, the third line sets up the third level of a
List element only to have the top two levels of those lists ended with the first level
List element on the fourth line.  As was shown from my debugging, there were two
end List element tokens in a row in the token stream.  That was something I had missed.&lt;/p&gt;
&lt;p&gt;Looking at two lines from the rule, I was quickly able to nail
down the source of this issue.  In the following &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;only the Blank Line token and a New List Item token prevent the rule from firing
if the previous token was an end List token.  That meant in this case, the first
end List token caused that &lt;code&gt;if&lt;/code&gt; statement to be evaluated to &lt;code&gt;False&lt;/code&gt; when that
second end List token was used in the &lt;code&gt;if&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;It did not take much code or time to fix this properly.  By adding the
end List token to the &lt;code&gt;if&lt;/code&gt; statement, it allowed the List elements to flow
properly when dropping multiple levels.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_end&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="issue-32-issue-with-rule-md037"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/32"&gt;Issue 32&lt;/a&gt; - Issue with Rule Md037&lt;a class="headerlink" href="#issue-32-issue-with-rule-md037" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every so often, you look at something you did and hope no one notices that you did it.
In this case, I had Issue 32 filed against it, so I had no choice.  Someone noticed it.&lt;/p&gt;
&lt;p&gt;The Markdown itself was simple, and the point of focus was a single paragraph:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Read&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt; &lt;span class="n"&gt;readme&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
&lt;span class="k"&gt;And&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;changelog&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was this sample that was triggering Rule Md037, looking for spaces inside of asterisks
that may show that an Inline Emphasis element was not completed properly.  There was
only one problem:  the was half-finished code commented out to deal with the actual search
for whitespaces.&lt;/p&gt;
&lt;p&gt;Whoops!&lt;/p&gt;
&lt;p&gt;Oh well, it happened.  After I got over a momentary feeling of embarrassment, I started to
look at the commented-out code and quickly decided that it would not work properly.
When the triggering section of the &lt;code&gt;next_token&lt;/code&gt; function is entered, it has a list of
every token that occurred between the possible start of emphasis and the possible end
of emphasis.  The main thing I needed the code to do was to verify if the specific
pattern, whitespaces directly inside of the possible start or end, were present.&lt;/p&gt;
&lt;p&gt;Instead of doing something fancy, I opted for something simple.  With both the possible
start and possible end sequences, this rule should only trigger if they were Text tokens.
If it is not a Text token, it cannot start or end with whitespace, so there was one aspect
of the issue dealt with.
The other was a good observation on what this was supposed to look for.  Since I needed
the function to look for directly inside of the emphasis sequences, I needed to have
the function check for the first character of the first token and the last character
of the last token.  If either of those specific characters were a space character,
then it was a space directly inside of the emphasis characters.  And to be extremely
specific, I needed to set it to detect either scenario, not both.&lt;sup id="fnref:yes"&gt;&lt;a class="footnote-ref" href="#fn:yes"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;After going through that research,  I came up with the following code, exactly
what I just described above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__emphasis_token_list&lt;/span&gt;
&lt;span class="n"&gt;first_capture_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__emphasis_token_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;did_first_start_with_space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;first_capture_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;first_capture_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;last_capture_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__emphasis_token_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;did_last_end_with_space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;last_capture_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;last_capture_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;did_first_start_with_space&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;did_last_end_with_space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once again, nothing stellar, but good simple corrections in the code.&lt;/p&gt;
&lt;h2 id="issue-33-issue-with-rule-md031"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/33"&gt;Issue 33&lt;/a&gt; - Issue With Rule Md031&lt;a class="headerlink" href="#issue-33-issue-with-rule-md031" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my blitz to get all rules completed and a beta release out the door, I had encountered
this Markdown when trying to get Rule Md031 to work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;```&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;```&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;another&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With some more relaxed time on my hands now, I decided to look closely at this rule
and figure out what the problem with the rule was.  What I did not notice at the time is that this
was not a problem with the rule, this was a problem with the parser.  When executed,
the parser was stopping in this code with an exception.  It was something that needed
to be looked in to.&lt;/p&gt;
&lt;p&gt;It took me a bit to figure out what was going wrong.  As I have been concentrating
on getting things done for the beta release, I have not spent considerable time in the parser
code.  If I had to guess, it has been at least six months since I last looked at the
parser code.  Luckily, with the comments and log messages that I placed in the code;
I was able to get up to speed quickly.&lt;/p&gt;
&lt;p&gt;In the Leaf Block Processor module, there is code in the &lt;code&gt;correct_for_leaf_block_start_in_list&lt;/code&gt;
function to properly correct the indent of a line when coming out of List element.
Originally, the &lt;code&gt;token_stack&lt;/code&gt; state variable was used to track the List elements,
with plans to implement an easier mechanism for dealing with Block Quote elements.
However, when I started to implement support for Block Quote elements, I realized
how similar Block Quote elements and List elements really were.  In response to
that, the &lt;code&gt;token_stack&lt;/code&gt; state variable was then repurposed for both elements, with
extra work on my behalf to clean up the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;repeat_loop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;removed_chars_at_start&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;repeat_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tokens_from_close&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;until_this_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;include_lists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
        &lt;span class="n"&gt;html_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens_from_close&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;
&lt;span class="n"&gt;last_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
&lt;span class="n"&gt;delta_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;removed_chars_at_start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;last_indent&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;delta_indent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, it looks like I missed a boundary use case.  In this case, the List element
was getting closed properly within the loop, but it was then followed by an assert
to verify that the remaining element on the stack was a list.  If it was a List token,
then there were extra verifications that I had in place to verify the sanity of the
parsing.&lt;/p&gt;
&lt;p&gt;While slightly more verbose, once I understood the problem, the fix was simple: only
act on List tokens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;repeat_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;is_remaining_list_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;repeat_loop&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;is_remaining_list_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;removed_chars_at_start&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;repeat_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tokens_from_close&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;until_this_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;include_lists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;html_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens_from_close&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;is_remaining_list_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_remaining_list_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;
    &lt;span class="n"&gt;last_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="n"&gt;delta_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;removed_chars_at_start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;last_indent&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;delta_indent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because this change fixed the parsing of that Markdown document,
I was able to take the &lt;code&gt;skip&lt;/code&gt; tag off the
&lt;code&gt;test_md031_bad_fenced_block_in_list_in_block_quote&lt;/code&gt; function.  In
addition, to make sure that fenced code blocks did not suffer from the
same issue, I added the
&lt;code&gt;test_md032_bad_fenced_block_in_list_in_block_quote&lt;/code&gt; function to perform
the same test for Fenced Code Block elements.  This was a good find,
and I was happy to have it taken care of.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After working hard for two years, it was a relief to run the scripts
to package the project and to upload it to PyPi.org.  As I mentioned
earlier in this article, I just felt like it was the right time to do
it.&lt;/p&gt;
&lt;p&gt;But there are still things to do to make it better, and I wanted to
keep on marching forward.  After measuring my progress for the last
two months in terms of the number of rules I completed per week, I
am not sure how, or if, I am going to measure progress going forward.
I mean, I am going to resolve issues, of that there is no doubt.
However, I cannot divine if the issues I pick are going to be easy
issues or difficult issues.&lt;/p&gt;
&lt;p&gt;I guess the only thing I can do is to keep on going what I have
always done with this project:  keep on making it better!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, I hate to say it (well, no I don’t), but I am going to be fixing
issues for a while.  While some portions of that work will be boring, I will
try and make it more interesting by describing what I am doing and
my reasons for doing it.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:yes"&gt;
&lt;p&gt;Before I read the rule again very closely, I did write a version of the code where it looked for &lt;em&gt;both&lt;/em&gt; instead of &lt;em&gt;either&lt;/em&gt;.  It did not work very well. &lt;a class="footnote-backref" href="#fnref:yes" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Race To The Finish</title><link href="https://jackdewinter.github.io/2021/09/20/markdown-linter-race-to-the-finish/" rel="alternate"></link><published>2021-09-20T00:00:00-07:00</published><updated>2021-09-20T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-09-20:/2021/09/20/markdown-linter-race-to-the-finish/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/09/13/markdown-linter-back-to-work/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting that weeks’ three rules completed. In this article, I
talk about getting the remaining rules implemented.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It has been a long way to get here, but I am finally at the point where
the beta …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/09/13/markdown-linter-back-to-work/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting that weeks’ three rules completed. In this article, I
talk about getting the remaining rules implemented.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It has been a long way to get here, but I am finally at the point where
the beta release is within reach.  All I have to do is to finish the last
three rules, make sure they are cleaned up a bit, and I am ready for the
beta release of &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And with that…&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/e38fd9553831cea16bb8f4dee8f423ca8be5613b"&gt;16 Sep 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/60d6cffeb22e204ba05430ed82ba33b7deda80cb"&gt;19 Sep 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="rule-md013-line-length"&gt;Rule Md013 - Line Length&lt;a class="headerlink" href="#rule-md013-line-length" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most linters have a rule like it, and PyMarkdown was not going to be
an exception.  It needed a rule that curtailed overly long lines.  It was
something obvious that was missing.  But as I have frequently found
to be the case with simple and obvious things, there was a little hitch.&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At first, when I looked at this rule, I thought it was going to be easy.
I mean, come on! This was line lengths.  Just go through the file looking
for long lines and flag when they exceed a given length.  And then I
got to the section on code blocks and headings in the original rules.
Reading the description again, there was a brief discussion on why
having alternate line lengths for those sections was needed.  Furthermore,
those discussions made sense.&lt;/p&gt;
&lt;p&gt;But that left me with an interesting problem to solve: how do I do that
efficiently?&lt;/p&gt;
&lt;h4 id="if-at-first-you-do-not-succeed"&gt;If At First You Do Not Succeed&lt;a class="headerlink" href="#if-at-first-you-do-not-succeed" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;My first pass at solving this was horrible.  Scribbling furiously,
I wanted to take the approach of using the tokens to help me figure
out what the line lengths were.  Each non-end token has a start location,
so piecing things back together would be easy, right?  Wrong!  No
matter how much I tried to design around that issue, it always proved
to be too much work for too little benefit.&lt;/p&gt;
&lt;p&gt;It took a couple of hours of playing around with designs and walking
by dog before I produced an observation that I thought had merit.
From a more relaxed viewpoint, I observed that I was trying to deal
with both requirements of the rule with the same algorithm.  It was
not the base algorithm that was complex, but the variations that I was
trying to add to it to understand where in the document it was. That
was the main issue.  But could I attack that problem from a different
angle and avoid that issue?&lt;/p&gt;
&lt;h4 id="time-to-pivot"&gt;Time To Pivot&lt;a class="headerlink" href="#time-to-pivot" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Instead of trying to change that base algorithm, I decided that I was
going to try and implement two algorithms separately and have them
work together.  The first algorithm, the base algorithm, was great at
detecting long lines, but did not have any concept of where in the
document it was.  I therefore figured out that I needed a second algorithm that
simply focused on what the currently active Leaf element was.  If
there was effective communication between the two algorithms,
the first algorithm could ask the second algorithm where in the document
it was and make the right decisions for configuration.&lt;/p&gt;
&lt;p&gt;Then the issue I needed to solve was that method of communication.
Intrinsically, each algorithm occurred in a different part of the
document scan: first the tokenized scan occurs, and then the
line-by-line scan occurs.  That was the gap that I needed the
algorithms to cover.&lt;/p&gt;
&lt;p&gt;Taking a hint from past ventures in trying to create complex solutions,
I decided to keep it simple.  During the token pass, the second
algorithm would add any Blank Line token or Leaf token to an array.
As those tokens contain the line number and multiple Leaf tokens
cannot occur on the same line, a simple tracking index would work
for tracking the current Leaf token within the line scan phase.&lt;/p&gt;
&lt;p&gt;I was not concerned about the covering the cases for long words
at the end of lines as I already had that part designed within
minutes of reading the rule.  Starting at the specified line
length, the rule needed to avoid triggering if it could not find
any whitespace before the end of the line.  From experience
with the project, it sounded like it was purposefully made for the
&lt;code&gt;ParserHelper&lt;/code&gt; module and its &lt;code&gt;extract_until_whitespace&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Working through different mental runs of the algorithm, it
seemed solid.  But would it work when coded?  It was time to see.&lt;/p&gt;
&lt;h3 id="testing-and-implementation"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Looking across the requirements for this rule, it was easy to see that
the scenario tests were going to have to cover every one of the Leaf
elements.  With special configuration for both code block and for
headings, I did not see any way to avoid it.  In addition, I needed to
deal with words, or more properly &lt;em&gt;possible word like entities&lt;/em&gt; that
may extend past the end of the specified line lengths.  The variations
to deal with &lt;code&gt;strict&lt;/code&gt; and &lt;code&gt;stern&lt;/code&gt; configuration items would require
testing on existing test cases, but no new test data files.  Finished
creating the test cases, I counted them up and I had 18 different
Markdown files entered.&lt;/p&gt;
&lt;p&gt;From there, the number of scenario tests based on those tests grew.
With six configuration values and combinations between them and the
test case data, the number of scenario tests quickly soared to
43 scenario tests before it stopped.  There were my usual “what about…”
scenarios that I thought about adding afterwards, but in each case
those scenarios boiled down to slight variations on existing tests
cases and scenario tests.  But knowing that they did reduce to those
existing tests gave me the confidence to go on with the implementation.&lt;/p&gt;
&lt;h4 id="second-algorithm-first"&gt;Second Algorithm First&lt;a class="headerlink" href="#second-algorithm-first" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As I was more worried about the interface with the second algorithm,
I decided to work on it first.  To start, I added the following
function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_leaf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was nothing special, but I was amazed by how simple it seemed.
With all my scribbling on paper seeming overwhelming, this function
seemed very underwhelming.  But there was no disputing it, it did
what it needed to very well.  It simply added any Leaf tokens or
a Blank Line tokens to the list.&lt;/p&gt;
&lt;p&gt;Then it was time for the other half of the algorithm.  It was
equally simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__line_index&lt;/span&gt;
        &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="c1"&gt;# Do Stuff Here&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__line_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because the first algorithm is line based, the second algorithm just needed
to provide a line level understanding of what Leaf token is current active.
Once again, it was underwhelming to implement the design and find out how
simple it was.  It was so underwhelming that I added debug statements and
walked through multiple test scenarios to make sure it was working properly.
It worked in each case.  It was a win!  It was on to the other algorithm.&lt;/p&gt;
&lt;h3 id="back-to-the-first-algorithm"&gt;Back To The First Algorithm&lt;a class="headerlink" href="#back-to-the-first-algorithm" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the second algorithm code in place, the first algorithm went
forward without any problems.  While there are variations for code blocks
and headings, the initial code added to the &lt;code&gt;next_line&lt;/code&gt; function was quite
simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;line_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;compare_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__line_length&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line_length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;compare_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="n"&gt;trigger_rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__strict_mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;trigger_rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;next_space_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_until_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compare_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__stern_mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;trigger_rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;next_space_index&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;trigger_rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_length&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;next_space_index&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;trigger_rule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;extra_error_information&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Expected: {compare_length}, Actual: {line_length}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_line_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following the design, the actual comparison for line length is simple…
it is what comes after it that took a bit to get right.  Between the
rules for &lt;code&gt;strict&lt;/code&gt;, &lt;code&gt;stern&lt;/code&gt;, and long end words, it took me some additional
time to get the response to those configuration settings exactly right.
While I did not state it in the design section for this rule, I was 40%
convinced that I would need to design that on the spot to get it right.
The other 60%?  I wanted to see if my 2 algorithm approach worked as
well as I thought it did.&lt;/p&gt;
&lt;p&gt;Regardless, the implementation was coded for the base paragraph scenario
tests within an hour, and I started the lengthy process of enabling each
test scenario and addressing any issues.  With 43 scenario tests to
enable, it took a while, but I only encountered slight issues along the
way.  When it came to handling the line lengths of the code blocks and
the headings, I just introduced the extra configuration items to handle
them.  Then, in the above example, I added some… er… ugly if statements
to manage the extra values.&lt;/p&gt;
&lt;p&gt;After double checking all 43 scenario tests, those changes were committed,
and it was on to the next rule.&lt;/p&gt;
&lt;h2 id="rule-md009-no-trailing-spaces"&gt;Rule Md009 - No Trailing Spaces&lt;a class="headerlink" href="#rule-md009-no-trailing-spaces" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lately, I have noted that I have a certain amount of luck that is
showing up in my work for this project.  It was therefore interesting to see
that this trend was showing up again.&lt;/p&gt;
&lt;h3 id="design_1"&gt;Design&lt;a class="headerlink" href="#design_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Reading this rule, it felt like I was reading an echo of
the previously implemented rule.  Through serendipity, I had a
second rule that would benefit from my recent two algorithm scan
approach.  It was not any planning on my part, it was sheer luck.&lt;/p&gt;
&lt;p&gt;There were a couple of new twists, but nothing that was a substantial
change to the supporting algorithm.  Based on reading the description
for the rule, there were configurations values that needed to know
of any Hard Link Break tokens (inline tokens) and if the existing
line was within a List token (container token).  Other than that
complication, the rule seemed simpler than the
previous rule.  Instead of a complicated triggering scenario,
this rule had a very straightforward one: if the number of spaces
at the end was not 0 or the configured amount, trigger.&lt;/p&gt;
&lt;p&gt;I took my time to work through any issues with the
design, but the adaptation of the previous rule saved me a lot
of time.  While it was luck that I encountered both
rules together, it sure helped my design for this
rule to have the design for the past rule still in my head.&lt;/p&gt;
&lt;h3 id="tests-and-implementation"&gt;Tests and Implementation&lt;a class="headerlink" href="#tests-and-implementation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Getting the tests ready for this rule were easy.
After creating 12 files for test cases and the 21 scenario
tests to cover them, I was confident that I had everything
covered.  As the 21 tests for this rule were less than half
of the tests for the previous rule, I was a bit nervous
about proceeding.&lt;/p&gt;
&lt;p&gt;But after double checking the tests, I honestly could not
find anything that I had missed.  Every &lt;em&gt;extra&lt;/em&gt; test case
that I produced was reduced into one of the
existing test cases.  After about a half hour of producing
extra cases that matched that pattern, I was in
a more confident place about the tests, and I decided to
continue.&lt;/p&gt;
&lt;h4 id="second-algorithm-take-two"&gt;Second Algorithm, Take Two&lt;a class="headerlink" href="#second-algorithm-take-two" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Since this rule was mostly a clone of the previous rule, I knew
that I had a solid base to work with.  So instead of the two lines
required for the previous rule’s &lt;code&gt;next_token&lt;/code&gt; function, this one
had a bit more content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_leaf&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_hard_break&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_owner_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_owner_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Taking care of the extra requirement for tracking any Hard Break tokens
just required adding &lt;code&gt;or token.is_inline_hard_break&lt;/code&gt; to the one conditional.
Adding the proper support for the container tokens did take a bit more
work.  Keeping track of the “current” container token was accomplished with the
first four lines of the new function, but that was not enough.  As there
is specific configuration for a Blank Line within a List Element, the
owner of any added Leaf token needed to be stored in the sibling list
&lt;code&gt;__leaf_owner_tokens&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__line_index&lt;/span&gt;
        &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_leaf&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__inline_token_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__inline_token_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__inline_token_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__line_index&lt;/span&gt;
        &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__inline_token_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__inline_token_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With all the foundations set, I added debug and made some modifications
to the tracking code in the &lt;code&gt;next_line&lt;/code&gt; function.  Tracking the Leaf elements
remained mostly the same, but the inclusion of the Hard Break token added a
slight bit of complexity.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;first_non_whitespace_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace_from_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;extracted_whitespace_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;is_list_empty_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_item_empty_lines_mode&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_owner_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_owner_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;first_non_whitespace_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace_length&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__break_spaces&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__strict_mode&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_list_empty_line&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_line_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;first_non_whitespace_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, with the second algorithm modified, it was time to make
the required changes to the primary algorithm.  Instead of checking
the length of the line, the new conditional simply checked to see if
the last character on the line is a space character.  Once that character is detected,
except for some code to prevent it from triggering on Blank Lines within
a List element, the rest of the code is all about triggering the rule.&lt;/p&gt;
&lt;p&gt;As always, I threw extra data and scenario tests against the code,
and it came up mostly clean.  I had missed a case with a completely
empty line, but I quickly fixed that.  After that, all tests were
showing as passing, and code coverage was at 100 percent.  I was good
to go for the next rule.  But would my luck continue?&lt;/p&gt;
&lt;h2 id="rule-md011-reverse-inline-links"&gt;Rule Md011 - Reverse Inline Links&lt;a class="headerlink" href="#rule-md011-reverse-inline-links" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The answer was yes!&lt;/p&gt;
&lt;h3 id="design_2"&gt;Design&lt;a class="headerlink" href="#design_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Looking at this rule, I was floored by my luck.  By some
miracle, all three of the final three rules needed the same
algorithms to provide a solid solution for them.  And… yes.
With this being a simpler version of the both of the last two
rules, I did skip over the design for this rule.&lt;/p&gt;
&lt;p&gt;I was not 100% happy with that decision as I wanted to
stick by my design and implementation rules.  But I also like
to be efficient.  And as hard as I tried, I could not find a
good enough reason for spending the time on the design of
this rule that I knew was going to be a simpler clone of the
previous two rules.&lt;/p&gt;
&lt;h3 id="tests-and-implementation_1"&gt;Tests and Implementation&lt;a class="headerlink" href="#tests-and-implementation_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Because this rule was simpler, the number of test cases and the
number of scenario tests were drastically reduced.  It also helped
that there were no configuration values, reducing the complexity
of the design even further.&lt;/p&gt;
&lt;p&gt;With everything else being cloned code from the first rule,
the only interesting part are the changes I made to detect
the reversed link syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__reverse_link_syntax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"\(.*\)\[\s*[^\^].*\s*]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;a href="https://www.tutorialspoint.com/python/python_reg_expressions.htm"&gt;regular expression&lt;/a&gt;
was easily the right way to go to detect the
reversed link syntax.  Once I had that decided, working through
what that expression would look like only took about ten minutes.
The hard part for me was that I wanted to peak at the original rule
and see how they matched the line and borrow some of their code.&lt;/p&gt;
&lt;p&gt;But as I wanted to figure it out for myself, that was out of the
question.  So, I just lined up test data and an online
regular expression testing tool, and quickly narrowed down to that
expression.  It is not a fantastically complicated expression,
but it does the job!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__leaf_token_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_html_block&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;regex_search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__reverse_link_syntax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;regex_search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;regex_span&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;regex_search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;extra_error_information&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;regex_span&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;regex_span&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_line_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;regex_span&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the regular expression decided on, the rest of the code was
trivial to write.  The only interesting part was making sure that
I used the right regular expression function, one that would return
where the match occurred within the line.  But after a quick bit
of searching on my favorite Python websites, I got that answer and
wired everything up.&lt;/p&gt;
&lt;h2 id="ensuring-rule-details-and-rule-documentation-are-consistent"&gt;Ensuring Rule Details and Rule Documentation Are Consistent&lt;a class="headerlink" href="#ensuring-rule-details-and-rule-documentation-are-consistent" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With ten rules developed before June and thirty-one rules developed
after June, I was concerned that the details of each rule and the
documentation for each rule was not coordinated with each other. Given
that concern, I wanted to spend at least a good five or six hours going
through the rule modules and the rule documentation, making sure that
everything looked correct.&lt;/p&gt;
&lt;p&gt;It was a bit of a slog, but it was worth it.  I took the opportunity to
run the document through a word processor and used that processor to
look for spelling mistakes and grammar mistakes.  I also pulled information
out of the &lt;code&gt;Reasoning&lt;/code&gt; section to include a sub-heading that identifies
the primary reason for each rule.  From a readability point of view,
it just helped make that section crisper by clearly
stating what the reasoning for the rule was up front.&lt;/p&gt;
&lt;p&gt;Even though I am usually thorough, there are trivial things that even I
mess up on.  For me, the best way to look for those is to go through
a set of objects that I am trying to standardize on and see what stands
out as being different.  Especially when I know that I often copied the
entire document from one rule and used it as a template for another rule,
I wanted to look for those differences that I missed.&lt;/p&gt;
&lt;p&gt;What I found while doing this is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There was 1 case where I forgot to change the title to match the new rule.&lt;/li&gt;
&lt;li&gt;There were 2 cases where I used &lt;code&gt;{space}&lt;/code&gt; in examples without adding some
  text before the example to explain that it was just standing in for space
  characters.&lt;/li&gt;
&lt;li&gt;There were 2 cases where a plugin was enabled by default, but the documentation
  for that rule said it was disabled by default.&lt;/li&gt;
&lt;li&gt;There were a small handful of cases where I still used “as such:” after I
  decided that it did not sound right.&lt;/li&gt;
&lt;li&gt;There were a small handful of cases where I had forgotten to remove quotation
  marks from within string configuration values. (i.e. transforming
  &lt;code&gt;"consistent"&lt;/code&gt; to &lt;code&gt;consistent&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;There were 20 cases where the rule modules did not have a module documentation
  header or class documentation header that matched the rule.&lt;/li&gt;
&lt;li&gt;There were 22 cases where the rule details function did not have the
  &lt;code&gt;plugin_url&lt;/code&gt; and &lt;code&gt;plugin_configuration&lt;/code&gt; values set properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Between knowing that the documentation was worded better and that it was also
consistent between the rules was a relief.  I know that some people might
consider this being picky, and I guess they are right.  For me, it is just
making sure that similar concepts in the same project have a solid attempt
at a singular theme running through them.  I do hope I have achieved that.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have been working on this project for two years now, and it felt
good to have all the rules working.  There were some issues that I needed
to track down, but I was confident that those issues would only impact
documents that were off the beaten track.  Or it may be more proper to say
that I hoped that was the case.&lt;/p&gt;
&lt;p&gt;Not including my week off for work and home related issues, I was able to
shave two weeks off of my ten weeks estimate to get the rules completed.
I was able to keep up steady progress, but each rule just took a decent
chunk of time to complete.  It was not that I did not try hard enough,
it was just that there was not enough time in the day.  While each design
portion was resolved within hours, the testing and documentation
took serious time to get right.  It just took what it took.&lt;/p&gt;
&lt;p&gt;And now that I am so close to a beta release, I want to double check
and triple check things before I do this big release.  Lots of small
tasks before next week!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having completed all the rules, I knew I needed to clean up a small handful
of things before a beta release.  It would not take more than a couple of days
to complete, but it would be time well invested.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Back To Work!</title><link href="https://jackdewinter.github.io/2021/09/13/markdown-linter-back-to-work/" rel="alternate"></link><published>2021-09-13T00:00:00-07:00</published><updated>2021-09-13T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-09-13:/2021/09/13/markdown-linter-back-to-work/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/30/markdown-linter-another-three-done/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting that weeks’ three rules completed. In this article, I
talk about the next three rules I worked on.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Wow! It has been an interesting two weeks since my last article.  With a
ton of things …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/30/markdown-linter-another-three-done/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting that weeks’ three rules completed. In this article, I
talk about the next three rules I worked on.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Wow! It has been an interesting two weeks since my last article.  With a
ton of things going on in both my professional life and my personal life,
I really have not had any time to work on the PyMarkdown project.  There
was not even enough time left over for me to write words, let alone code.
Both take brain cells
and creativity, and after about a week and a half of long days, I did not
feel that I possessed either of them.&lt;/p&gt;
&lt;p&gt;With most of those efforts out of the way, I was able to start the
task of getting back to work on the project.  I knew that it was going to
take some effort to get my “project-muscles” back, but it was something
I was eager to do.  And what a better way to flex those muscles back into
shape than to complete the work on Rule Md043.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/4454d026a370cb4ddc776e775fda993507e4ad5f"&gt;11 Sep 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/f1de450491c374dd65f20340836673376e62db72"&gt;12 Sep 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="rule-md043-completing-glob-matches"&gt;Rule Md043 - Completing Glob Matches&lt;a class="headerlink" href="#rule-md043-completing-glob-matches" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting started again after a couple of long weeks was no easy task.
Before I got busy with life, I had started to work on completing the
work to properly handle the recursive code for matching lines.  As I
mentioned
&lt;a href="https://jackdewinter.github.io/2021/08/30/markdown-linter-another-three-done/#life-often-shows-up-when-you-least-expect-it"&gt;in my last article&lt;/a&gt;,
I just ran out of time to figure it out for that week.  Now, facing
the daunting task of getting back to work, it sounded to me like a
good task to start with.&lt;/p&gt;
&lt;p&gt;To refresh my context on that rule, I took quick inventory on where
I left things.  I soon figured out that before I stopped working on Rule Md043,
I had taken care of all the simple scenarios in which wildcards can
be used in globs.  The simple cases of &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;a*&lt;/code&gt;, &lt;code&gt;*a&lt;/code&gt;, and &lt;code&gt;a*b&lt;/code&gt;
were all covered, with a gaping hole in the code where patterns with
multiple wildcards should be.  Repetitive wildcard cases such as &lt;code&gt;a*b*c&lt;/code&gt; were
not being handled at all, and that needed to be addressed.&lt;/p&gt;
&lt;p&gt;To be clear, while I am pretty sure that most people will not create
monster matches like &lt;code&gt;a*b*c*b*c*b*c*d&lt;/code&gt;, or any terribly recursive
combination.  However, I know I still needed to be able to support them.  And depending
on what the needs are, I can actually see some simple patterns for
document headers and document footers requiring at least two or three
wildcards.  It was time to deal with that!&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Breaking it down from a design viewpoint, when the algorithm
arrived at the recursive section of the glob, the header and footer
of the glob had already been stripped away.  This means that if
the glob was &lt;code&gt;a*b*c&lt;/code&gt;, what needed to be addressed was the remaining
pattern &lt;code&gt;*b*&lt;/code&gt;.  Scribbling out different scenarios on paper, this made
it easy for me to see how other matches would work, as the difference
between &lt;code&gt;*b*&lt;/code&gt; and &lt;code&gt;*b*d*&lt;/code&gt; appeared to be an extra level of matching after
the first wildcard.&lt;/p&gt;
&lt;p&gt;While I am not a stranger to both recursive and iterative algorithms,
I have enough experience to know that both algorithms can run away
on the user if they are not coded properly.  The difference is
that recursive algorithms tend to fail with out of memory errors,
which looks worse to the user than a bad index error.  At least
when I am using other software, that is my opinion.  So, knowing
that, if I chose a recursive algorithm, I wanted to make doubly
sure that the recursion was solid before shipping it.&lt;/p&gt;
&lt;h4 id="breaking-it-down"&gt;Breaking It Down&lt;a class="headerlink" href="#breaking-it-down" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In this case, I chose a recursive algorithm as the way to go.
As the difference between &lt;code&gt;*b*&lt;/code&gt; and &lt;code&gt;*b*d*&lt;/code&gt; is just another level,
the most efficient way to take care of that is with recursive
functions.  With that decision done, it was on to figuring out
how to do the matching and when to do the recursion.&lt;/p&gt;
&lt;p&gt;Taking each part in stride took a bit for me to accomplish,
wanting to design everything at once.  But once I calmed down
a bit, I realized that the algorithm was simple.  With the
previous header and footer trimmed from the match, the first
thing the algorithm had to do was to find the next matches
for the first block of non-wildcard matches.  In the above
examples, this meant looking for a block of length one that
matched &lt;code&gt;b&lt;/code&gt;. In the first match, once any one line was found
that matched that, everything was done, and it could return.
But in the second match, the algorithm then had to trim the
variables and recurse into the algorithm to find &lt;code&gt;*d*&lt;/code&gt; within
the remaining data.  Once again, if there was any line that
matched &lt;code&gt;d&lt;/code&gt;, the match was complete.&lt;/p&gt;
&lt;p&gt;To be honest, I went through a handful of sheets of paper
going through weird combinations of data, making sure that
my design worked on paper.  In each case, I was careful
to adjust the current parameters before mentally “recursing”,
and that was something that I was going to must be
careful with.  But after taking three hours over two days
to make sure I had the design nailed down, it was time to
see if I got it right.&lt;/p&gt;
&lt;h3 id="testing-and-implementation"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I already had a few scenario tests for multiple wildcards in the
project, but I added a new one to make sure I had things covered.
From using globs on file names for years, I had a good idea
of the patterns to test, and I was confident that I had the
right scenarios to test against.&lt;/p&gt;
&lt;p&gt;Going to the code, the first thing I needed was to hook in the
new function to the &lt;code&gt;completed_file&lt;/code&gt; function, invoking it when
there were multiple wildcard characters.  This meant replacing
this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;remaining_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"More than one wildcard not supported."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;recurse_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__do_recursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;remaining_headings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;top_heading_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;remaining_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;top_token_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;recurse_result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;remaining_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Multiple wildcard matching failed."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was where the fun began.  The &lt;code&gt;__do_recursive&lt;/code&gt; function itself
does not have that many statements, but each statement has a lot of
functionality built into it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__do_recursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remaining_headings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top_heading_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remaining_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top_token_index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;bottom_heading_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top_heading_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_headings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;remaining_headings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;remaining_headings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
        &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;remaining_headings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;
        &lt;span class="n"&gt;search_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;heading_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top_heading_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;scan_limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top_heading_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;
        &lt;span class="n"&gt;found_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;search_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_headings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;search_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;remaining_tokens&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;end_heading_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;end_token_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;failure_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__verify_group_heading_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;heading_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top_token_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;search_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scan_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;scan_limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;failure_token&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;end_heading_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__compiled_headings&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;end_heading_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;bottom_heading_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;found_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;new_top_heading_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end_heading_index&lt;/span&gt;
                    &lt;span class="n"&gt;new_remaining_headings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remaining_headings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end_heading_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;top_heading_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

                    &lt;span class="n"&gt;new_remaining_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remaining_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end_token_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;top_token_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;new_top_token_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end_token_index&lt;/span&gt;

                    &lt;span class="n"&gt;found_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__do_recursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;new_remaining_headings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;new_top_heading_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;new_remaining_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;new_top_token_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;search_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;found_match&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As was mentioned in the design section, the first part of the algorithm
is setting up for the search.  Thankfully, the &lt;code&gt;__verify_group_heading_match&lt;/code&gt;
function already looks for a block of matching headings, so a call to
that function was pivotal to figuring out if a match is found.  If it is
found and the end index is not at the end of the &lt;code&gt;__compiled_heading&lt;/code&gt;
variable, it means that the algorithm ran out of headings to match,
resulting in no matches.  If the end index is valid and equal to the
current “bottom”, then the algorithm is done with a found match.  However,
if it is not at the bottom, that means there are more wildcards to
process, so the algorithm recurses.&lt;/p&gt;
&lt;p&gt;From my experience, most recursive algorithms are simple in their nature,
but the fact that they refer to themselves causes me some unease.
It just means that I have to be extra careful about everything in that
function as I am using it multiple times with variations on the same
data.   This was no different.  The algorithm at its core was simple.
Find a block of matching lines.  If there is more to look for, set
things up and find a more condensed block of matching lines.  If at
any point it fails, return right away.&lt;/p&gt;
&lt;p&gt;But I still tested it extra carefully.  Let me just say that I have
been hit by recursive algorithms not being tested properly enough to
give them some extra respect when testing.  But after going through
and testing a handful of additional scenarios, they all matched
or did not match according to plan.  After some simple cleanup,
I checked in the code and moved on.&lt;/p&gt;
&lt;h2 id="ordered-list-element-style"&gt;Ordered List Element Style&lt;a class="headerlink" href="#ordered-list-element-style" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking through the remaining rules, a pair of them stood out from the rest:
Rule Md029 and Rule Md030.  To be honest, I thought I had completed them during
a previous pass at the rules.  But there it was in black and white, they still
needed to be completed.&lt;/p&gt;
&lt;p&gt;For no other reason that it was first, I decided to start with Rule Md029 regarding
the style of Ordered List elements.  This rule has a simple principle behind it: keep things
consistent.   Most Markdown parsers do not like it when an author starts an Ordered
List Item with a seemingly random number.  Those parsers prefer to have those numbers
be all 1s or be a simple increasing number starting with 1.  Anything outside of
those two options mean that the parser decided what to do with it.  And that choice
does not always make sense.&lt;/p&gt;
&lt;h3 id="design_1"&gt;Design&lt;a class="headerlink" href="#design_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Looking at the configuration settings, there were three classes of starting numbers
that I needed to look for: &lt;code&gt;all zeroes&lt;/code&gt;, &lt;code&gt;all ones&lt;/code&gt;, or &lt;code&gt;ordered&lt;/code&gt; and starting from one.
Basically, &lt;code&gt;0/0/0&lt;/code&gt;, &lt;code&gt;1/1/1&lt;/code&gt;, and &lt;code&gt;1/2/3&lt;/code&gt;.  There was the &lt;code&gt;0/1/2&lt;/code&gt; variant of the
ordered, starting at &lt;code&gt;0&lt;/code&gt; instead of &lt;code&gt;1&lt;/code&gt;, but that was just an alternate starting
number.  The interesting variant was the &lt;code&gt;one or ordered&lt;/code&gt; variant.  Allowing for
either the &lt;code&gt;1/1/1&lt;/code&gt; class or the &lt;code&gt;1/2/3&lt;/code&gt; class, it would be interesting to work
around that.&lt;/p&gt;
&lt;p&gt;But after looking at all those classes and their variants, the design rapidly
became clear to me.  For every case other than the &lt;code&gt;one or ordered&lt;/code&gt; variant,
everything was clear and spelled out by the first number.  Even differentiating
between the 0-based ordering and the 1-based ordering was easily dealt with using
just that first number.  The rest of the cases were just following the lead of
that first number.&lt;/p&gt;
&lt;p&gt;For the one-or-ordered variant, I knew that most of the time the algorithm
would need to wait until the second number to figure out which class to put
the numbers in.  If the first number was &lt;code&gt;1&lt;/code&gt;, then the list was still eligible
for both the &lt;code&gt;all ones&lt;/code&gt; class and the &lt;code&gt;ordered class&lt;/code&gt;.  But by the time the
second number came around, the algorithm would be locked in, or the algorithm
would trigger due to a bad number.&lt;/p&gt;
&lt;h3 id="testing-and-implementation_1"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nailing down the scenario tests for the rule was easy.  There are four basic positive
sequences that were easy to define.  After doing some scribbling, I was able to
determine that the negative cases boiled down to three scenario tests.  I owe a lot of
that small test size due to the positive tests performing double duty as positive
tests for their own setting and negative tests for the other settings.&lt;/p&gt;
&lt;p&gt;The actual code was a variation on algorithms I have written for other rules
dealing with container elements.  Not needing to deal with Block Quote elements, I just wrote
code to maintain a List element stack, with a second stack for the selected
configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;list_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__match_first_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ordered_list_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;list_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ordered_list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;list_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ordered_list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;list_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__match_non_first_items&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ordered_list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the configuration may be in flux, it can also vary between a list and
any sublists.  Therefore, the &lt;code&gt;__ordered_list_stack&lt;/code&gt; field contains a tuple
containing the list’s style and the last known number.  With this information,
any style can easily be handled by a list at any level of nesting.&lt;/p&gt;
&lt;p&gt;With that information in place, matching the first item was added with
the &lt;code&gt;__match_first_item&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__match_first_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;list_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__style&lt;/span&gt;
    &lt;span class="n"&gt;last_known_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;list_style&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RuleMd029&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__one_or_ordered_style&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;list_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RuleMd029&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ordered_style&lt;/span&gt;

    &lt;span class="n"&gt;is_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;list_style&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RuleMd029&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ordered_style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;is_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;list_style&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RuleMd029&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__one_style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;is_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;list_style&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RuleMd029&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__zero_style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;is_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;expected_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;list_style&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RuleMd029&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__zero_style&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;extra_error_information&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Expected: {expected_number}; Actual: {last_known_number}; Style: {style}"&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_error_information&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;list_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;list_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following the design, the configured style is used, allowing for a change
if the &lt;code&gt;__one_or_ordered_style&lt;/code&gt; style is selected.  In that case, if the
list’s number is not 1, then it must be an ordered style.  However, if it
is 1, then the class is still in flux, and the algorithm needs to wait.&lt;/p&gt;
&lt;p&gt;As to the validity of the list number at that point, it is an easy decision.
For any case other than the &lt;code&gt;__one_or_ordered_style&lt;/code&gt; style, there is a small
set of possible starting values.  If it is not one of those values, the
rule triggers.  Otherwise, the value must be &lt;code&gt;1&lt;/code&gt; which is valid no matter
what.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__match_non_first_items&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;    
        &lt;span class="n"&gt;new_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;list_style&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RuleMd029&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__one_or_ordered_style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;list_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;RuleMd029&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__one_style&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;RuleMd029&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ordered_style&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;list_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_known_number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Except for the &lt;code&gt;one_or_ordered&lt;/code&gt; logic, the &lt;code&gt;__match_non_first_items&lt;/code&gt; function is the
same as the &lt;code&gt;__match_first_item&lt;/code&gt; function.  It is only in the case where
the first List Item started with a &lt;code&gt;1&lt;/code&gt; that the style is left undecided.
But when the algorithm gets to the second List Item, that ambiguity is
either resolved or triggers the rule.  As the above code indicates, if the
&lt;code&gt;__match_non_first_items&lt;/code&gt; function is called with that style still in place,
it is either set to &lt;code&gt;__one_style&lt;/code&gt; or &lt;code&gt;__ordered_style&lt;/code&gt;, depending on whether
the new number is set to &lt;code&gt;1&lt;/code&gt; or not.  The code after that change then
decides whether the &lt;code&gt;new_number&lt;/code&gt; content is valid or not.&lt;/p&gt;
&lt;p&gt;I did start out with something a bit more complicated, but as usual, the
simpler solution won out.  While it was not that much more complicated,
it just felt like I was stretching too much when a simpler approach
was just as efficient at solving the problem.&lt;/p&gt;
&lt;h2 id="list-element-spacing"&gt;List Element Spacing&lt;a class="headerlink" href="#list-element-spacing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it may not seem like much, Rule Md030 is meant to protect against
parsers that have a more rigid definition of the spacing that exists
between the List Item indicators and the text within the List Item.
And since it was one of the remaining ones to deal with, it felt that
pairing it with Rule Md030 was just the right thing to do.&lt;/p&gt;
&lt;h3 id="design_2"&gt;Design&lt;a class="headerlink" href="#design_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’ll admit it.  I copied most of the concepts from the previous rule to
this one and adjusted from there.  That was possible because they both deal solely with lists and
have similar constraints.  In this case, the configuration values were stable,
even with having to design “wait in this case until…” code.  The twist in this
rule was in calculating whether the List Item was on a single line or on
multiple lines.&lt;/p&gt;
&lt;p&gt;Therefore, the design was mostly about adapting the design instead of thinking
through the design from scratch.  The List Item stack was required to make sure
that the algorithm compared List Items within its bounds, and not deeper. As
the composition of the list, single line elements throughout or containing any
multiple line elements, cannot be figured until the list is finished,
all List Item tokens need to be collected until the end List element.  Given
the single vs multiple classifications at that point, the correct configuration
value can then be chosen and applied to each token.&lt;/p&gt;
&lt;p&gt;Which left one thing left to design: to design the “single vs multiple” algorithm.
Reading the definition of the original rule an extra time, I noticed that it was
very clearly documented that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A document style may change the number of spaces after unordered list items and
ordered list items independently, as well as based on whether the content of every
item in the list consists of a single paragraph or multiple paragraphs
(including sub-lists and code blocks).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This made most of the algorithm simple.  Check to see if the difference in line numbers
between one List Item and the previous List Item is greater than one.  If so, it is
a multiple line set of List Items.  The very last List Item was a tricky one, but not
difficult to design around.  Every List Item must contain something, even if it is
a Blank Line token.  Therefore, the algorithm would need to keep track of the last
non-end token encountered, to deal with that final case.&lt;/p&gt;
&lt;p&gt;Looking through things, I felt that I had covered everything in the design,
and it was time to proceed with the next phase.&lt;/p&gt;
&lt;h3 id="testing-and-implementation_2"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once again taking out my pen and scrap paper, I whittled down the
relevant test scenarios to eight scenarios: four for the Ordered List elements
and four for the Unorder List elements.  I came up with a handful of weird
cases, but in the end, they all reduced to those eight scenario tests.
While I am not 100% sure of that statement, I am confident enough in that
statement to proceed with the coding.  Basically, I have a feeling that
I might has missed something, but after searching for it for an hour or
so, I stopped looking.&lt;/p&gt;
&lt;p&gt;The first part of the code has all the hallmarks of the previous rule.
The &lt;code&gt;__list_stack&lt;/code&gt; code is almost the same, with just a bit more code
being executed in each &lt;code&gt;if&lt;/code&gt; block.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_list_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_end_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The important part of the algorithm is here in the &lt;code&gt;__handle_list_end&lt;/code&gt;
function, which is invoked when the list ends.&lt;sup id="fnref:duh"&gt;&lt;a class="footnote-ref" href="#fn:duh"&gt;1&lt;/a&gt;&lt;/sup&gt;  It is only at the
end of the list that the multiline status can be computed.  After it is
computed, the proper setting can be assigned to the &lt;code&gt;required_spaces&lt;/code&gt;
variable, which is then compared to the actual number of spaces in
each List Item token.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__handle_list_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;is_multiline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_current_list_multiline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;required_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ol_multi&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_multiline&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ol_single&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;required_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ul_multi&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_multiline&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ul_single&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;list_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;required_spaces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;extra_error_information&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Expected: {required_spaces}; Actual: {delta}"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_error_information&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having that code in place, the only part that was remaining was the
code to determine if the list contains only single line List Items
or if any of the List Items have multiple lines.  For every List
Item except for the last one, its vertical size can only be calculated
against the next List Item.  But it does make for a simple loop.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__is_current_list_multiline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;is_multiline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;list_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
                &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;token_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;is_multiline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_multiline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;is_multiline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;is_multiline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And because of the clear designing, I knew ahead of time that the last
List Item was going to be a different scenario and how to address it.
As that last List Item does not have a following List Item to compare
it to, the last non-end token serves as a good stand-in.&lt;/p&gt;
&lt;p&gt;Once again, I ran through all the cases, looking for that something
that I missed and not finding anything.  Everything was working and
passing, so after that extra checking, I finished up the documentation
for the rule and committed it to the repository.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;https://jackdewinter.github.io/2021/07/26/markdown-linter-getting-back-to-new-rules/&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For getting restarted on the project after about a weeks’ absence, it
took me a bit to get going.  But now that I see that the end of the
rules implementation phase is in sight, I am eager to get it completed.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:duh"&gt;
&lt;p&gt;That may sound like a weird statement to some.  For example, I make it a practice to name functions after the action they take.  Hence, the function &lt;code&gt;__handle_list_end&lt;/code&gt; performs the handling for the end of the list.  But I have also seen function names like &lt;code&gt;handle&lt;/code&gt;, &lt;code&gt;done&lt;/code&gt;, and other names that do not imply that context.  Reading those functions is not fun. &lt;a class="footnote-backref" href="#fnref:duh" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Another Three Done!</title><link href="https://jackdewinter.github.io/2021/08/30/markdown-linter-another-three-done/" rel="alternate"></link><published>2021-08-30T00:00:00-07:00</published><updated>2021-08-30T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-08-30:/2021/08/30/markdown-linter-another-three-done/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/23/markdown-linter-three-more-rules/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting that weeks’ three rules completed. In this article, I
talk about the next three rules I worked on.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know I am getting close to being finished with this phase of implementing rules when
I …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/23/markdown-linter-three-more-rules/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting that weeks’ three rules completed. In this article, I
talk about the next three rules I worked on.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know I am getting close to being finished with this phase of implementing rules when
I can represent the number of rules left with two hands!  It was exciting.  I could add
a lot more, but what I really want to do is talk about the things I did this week, so
here I go!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/7ecdd796b0ee610b0398a788e2286d96ba924473"&gt;25 Aug 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/a417b4635a9df5d76fbf99bb5503839517d8e7e6"&gt;29 Aug 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="multiple-top-level-headings"&gt;Multiple Top-Level Headings&lt;a class="headerlink" href="#multiple-top-level-headings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The implementation of Rule Md025 was a long time coming, but I was finally getting around
to it.  The basis of the rule is very simple:  top-level headings are often used by parsers as
a document title.  Because of that, having multiple titles in the same document just doesn’t
make sense.  Well, it did not make sense to me at least.&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I felt that this rule was simple enough to start implementing without any
design, I wanted to stick to my goals and design this out… even if it only took
five minutes.  That five minute estimate was derived at because the design parts were
easy for me to grasp together in my head with room to spare.  From experience,
if you can think about a design as a complete puzzle in your head, the design is generally
going to be simple.&lt;/p&gt;
&lt;p&gt;The first part of the design was easy.  I needed a variable to keep track of whether the
first top-level heading was observed.  Once set, any other top-level heading was a
multiple and needed to trigger the rule.  Since both the Atx Heading tokens and the SetExt
Heading tokens share the &lt;code&gt;hash_count&lt;/code&gt; property, it would mean a simple check to see if
that property was set to 1.&lt;/p&gt;
&lt;p&gt;That was it.  Nothing complex.
Even with the configuration parts added in, those new parts were still manageable
and simple.  If the &lt;code&gt;level&lt;/code&gt; configuration value is set, that &lt;code&gt;1&lt;/code&gt; would be replaced with the
variable containing the &lt;code&gt;level&lt;/code&gt; configuration value.  The &lt;code&gt;front_matter_title&lt;/code&gt; configuration
required a check for the front-matter token, and then a check to see if property map for
the Front Matter token contained the specified configuration value.  If so, set the
indicator that the first top-level heading was observed.&lt;/p&gt;
&lt;p&gt;For me, it was easy going through that design, with no issues involved.  I did not even
see any warning signs.  But still, was it worth it?  It did feel good going through the
process and having that confidence verified, thinking some more about it and confirming
that there were no apparent issues.&lt;/p&gt;
&lt;h2 id="testing-and-implementation"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After coming up with nine scenario tests, I felt I had given the rule enough good test
coverage to move on to the implementation phase.  Like the simplicity of the design phase,
these scenarios were not particularly difficult.  Three good scenarios to make sure
the rule does not trigger for safe scenarios, and six scenarios testing the failure
combinations.&lt;/p&gt;
&lt;p&gt;Just like some of the rules from last week, the implementation was a reflection
of the design that I specified above.  The rule started with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;starting_new_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_top_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_top_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_top_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, when the &lt;code&gt;self.__level&lt;/code&gt; configuration value was introduced, the hash count
comparison was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, when the &lt;code&gt;self.__front_matter_title&lt;/code&gt; configuration value was added,
a new comparison was added at the end of the main &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_front_matter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__front_matter_title&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matter_map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_top_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like the design indicated, it was a simple implementation.   But I am
not always so lucky that things match up.  With extra confidence, but
still a firm believe that I am taking the right path, I went on to the next
rule.&lt;/p&gt;
&lt;h2 id="all-files-must-have-top-level-headings"&gt;All Files Must Have Top-Level Headings&lt;a class="headerlink" href="#all-files-must-have-top-level-headings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This rule, Rule Md041, was another rule that I had been delaying for
a long time.  Part of the reason for that delay is the scope of this rule.
I had confidence that when I completed this rule that it was probably
going to be triggered on around 60% of the test scenarios for rules.  That
was an easy estimate to come up with.  A good group of those test scenarios
were not focused on Atx Heading elements or SetExt Heading element; therefore
they were probably going to trigger this rule.&lt;/p&gt;
&lt;p&gt;So, taking a slight detour from the usual design first approach, I decided
that I needed to upgrade the &lt;code&gt;invoke_main&lt;/code&gt; function to handle this issue.
The &lt;code&gt;invoke_main&lt;/code&gt; function is part of the test framework and is used by
approximately 75% of the scenario tests.  The function’s one and only job is to allow
the scenario tests to execute the linter with as much parity as possible
with the command line.&lt;/p&gt;
&lt;p&gt;It was here that I needed to address the issue of Rule Md041 triggering
during the scenario tests.  Changing each test was out of the question…
that would be a mess.  Instead, I added a &lt;code&gt;suppress_first_line_heading_rule&lt;/code&gt;
parameter, defaulted it to &lt;code&gt;True&lt;/code&gt;, and implemented the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invoke_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;suppress_first_line_heading_rule&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;suppress_first_line_heading_rule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;new_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"--disable-rules"&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;new_arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--disable-rules"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;new_arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"md041"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;disable_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--disable-rules"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;disable_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;disable_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;disable_value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;disable_value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;","&lt;/span&gt;
            &lt;span class="n"&gt;disable_value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;"md041"&lt;/span&gt;
            &lt;span class="n"&gt;new_arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;disable_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;disable_value&lt;/span&gt;
        &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_arguments&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The changes were simple, yet efficient.  If there is no parameter named
&lt;code&gt;--disable-rules&lt;/code&gt;, then the parameter and the value &lt;code&gt;md041&lt;/code&gt; are inserted
at the front of the parameter list.  Otherwise, the value for that
parameter has the value &lt;code&gt;md041&lt;/code&gt; appended to the end of the existing
value.&lt;/p&gt;
&lt;p&gt;If was not rocket science, but it was efficient.  Instead of spending
hours making changes and validating them, I had this change up and
running within two hours, testing included.  It was a bargain.&lt;/p&gt;
&lt;h3 id="design_1"&gt;Design&lt;a class="headerlink" href="#design_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I felt that this design was a bit more complex than the previous rule,
but not by that much.  The basis for this rule is all about the
first “real” token in the document.  I knew there was going to be
a bit of a twist regarding the Front Matter token, so I left that to the
end.  Every other token was fair game though.&lt;/p&gt;
&lt;p&gt;Since this rule is specifically about the first token in the document,
I knew that I was going to need a variable just to provide that context
to the rule.  Once inside an &lt;code&gt;if&lt;/code&gt; condition on that variable, unless there
was a good reason not to, that variable would be set each time.
Quick, easy, done.&lt;/p&gt;
&lt;p&gt;From there it was just working through the allowable start cases one
by one.  If a Atx Heading element or a SetExt Heading element without the
right level was found, it needed to trigger the rule.  For a HTML Block,
I would have to do a bit more work as the allowable &lt;code&gt;&amp;lt;h1&lt;/code&gt; sequence was
inside a separate Text element.  That meant I would have to set a separate
capture variable, and not set the “done” variable until the rule analyzed
the following Text element.  But other than that, the general idea of how
the block was handled was the same as with the Heading elements.
I also figured out that Blank Lines would probably not count, so I made
a note to test what effect those Blank Lines had.&lt;/p&gt;
&lt;p&gt;For the Front Matter element, I thought there would have been more
work needed, but in the end, I figured that it was a simple check.  If
the title is in the Front Matter element’s property map, then a title
is present, and the requirements for having a title were met.  I checked
this a couple of times to make sense, and it passed each time.  I think
the original name of the rule could have been better worded, but it
was working properly.&lt;/p&gt;
&lt;h3 id="testing-and-implementation_1"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The thirteen scenario tests that I came up with for this rule were simple
to construct.  Four of those scenario tests were the good cases where each
of the four allowable elements start the document with good data.  Basically,
tests for things like a Level 1 (top-level) Atx Heading element.  I was
concerned about Blank Lines causing issues, so I throw an extra good scenario
test in there just to be sure.  The negative tests?  Just one scenario test
for every leaf element, and it was taken care of.&lt;/p&gt;
&lt;p&gt;The implementation was also uneventful, following the design of the rule
without any issues.  Starting with this code to handle the Heading elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;starting_new_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_seen_first_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_seen_first_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_seen_first_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash_count&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_seen_first_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the function was grown to handle Front Matter elements and HTML Block elements
as described in the design.  Except for a couple of typing mistakes here
and there, everything went very smoothly.&lt;/p&gt;
&lt;p&gt;It was as I was wrapping up the work for this rule and looking forward
to Rule Md043 that I realized that I was going to have my hands full with
that rule.&lt;/p&gt;
&lt;h2 id="required-heading-structure"&gt;Required Heading Structure&lt;a class="headerlink" href="#required-heading-structure" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first time I looked at Rule Md043, I did not think it would be
too difficult to implement.  It is a very simple text comparison between
a list of Heading elements and a list of required heading levels and
heading text.&lt;/p&gt;
&lt;p&gt;But then I looked further in the description and saw that it supports
the &lt;code&gt;*&lt;/code&gt; character.  My heart dropped.  That meant I was going to have
to implement a glob-based comparison.  I was not happy.&lt;/p&gt;
&lt;h3 id="glob"&gt;Glob&lt;a class="headerlink" href="#glob" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While the &lt;a href="https://www.merriam-webster.com/dictionary/glob"&gt;dictionary definition&lt;/a&gt;
is “a small drop” or “a usually large and rounded mass”, if you mention
Globs to most computer people, they immediately think of &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;.
From a
&lt;a href="https://docs.python.org/3/library/glob.html"&gt;Linux point of view&lt;/a&gt;, a glob
is a string of text that can contain the characters &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt; which serve
as placeholders for one or more other characters.  The phrase is so
commonly used that GitHub has a project &lt;a href="https://github.com/begin/globbing"&gt;just for glob&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;How does it work?  The &lt;code&gt;?&lt;/code&gt; character is a placeholder for any single character.
Therefore the glob &lt;code&gt;me?on&lt;/code&gt; will match the strings &lt;code&gt;melon&lt;/code&gt; and &lt;code&gt;menon&lt;/code&gt;.
The string &lt;code&gt;mennon&lt;/code&gt; will not match the glob as it only has one &lt;code&gt;?&lt;/code&gt;
character, not two.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; character is similar but is a placeholder for any number of any
characters. Keep things simple, the glob &lt;code&gt;me*on&lt;/code&gt; will match &lt;code&gt;meon&lt;/code&gt;,
both positve matches above, and the string &lt;code&gt;mennon&lt;/code&gt;.  As a matter
of fact, it will also match a string starting with &lt;code&gt;me&lt;/code&gt;, ending with
&lt;code&gt;on&lt;/code&gt;, and having an insanely large number of characters between them.&lt;/p&gt;
&lt;p&gt;So why was I worried about glob-based comparisons?  They look easy, do not
they?  Well, how do you deal with a glob like &lt;code&gt;me*e*on&lt;/code&gt;?  The algorithm
to handle one &lt;code&gt;*&lt;/code&gt; character is relatively simple.  Adding in support for
multiple &lt;code&gt;*&lt;/code&gt; characters gets messy really quickly.  I’ll get into that
a bit more later, but it was that support that I was dreading.&lt;/p&gt;
&lt;h3 id="design_2"&gt;Design&lt;a class="headerlink" href="#design_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Making sure that I was thinking about the rest of the design clearly, I
sat back and just let
my mind wander and think about this rule.  One thing that was immediately
obvious was that any “fancy” headings that were not 100% text were
going to be a problem.  If an author adds the text &lt;code&gt;# Heading *Me* One&lt;/code&gt;,
the parser will translate it into three Text elements with two Emphasis
element in the middle.  Should I then match the plaintext or the resolved
text?  That was ambiguous enough that I decided to not support any Heading
elements that were not 100% plain-text.  One issue down.&lt;/p&gt;
&lt;p&gt;The next issue was on how to process the entire set of Heading elements.
I could try and process as I went, but I felt that it would be too complex
to accomplish with little gain.  As such, I decided that at the end of
the document, the rule needed to example a list of all Heading elements
and their associated text.  With that complete picture in hand, it would
be a relatively simple matter of writing the Glob algorithm.  Two issues
down.&lt;/p&gt;
&lt;h4 id="glob_1"&gt;Glob&lt;a class="headerlink" href="#glob_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ah, yes… a relatively simple matter… Glob algorithm.  There were
options there as well. I just had to decide which approach worked the
best in this situation.  One option that I had was to try and represent
each line as a given character, then using Python’s built in
&lt;a href="https://docs.python.org/3/library/glob.html"&gt;Glob Library&lt;/a&gt; to resolve it.
But after checking with the library, it only works on files and directories,
so I would have to write it myself anyways.  So little benefit of doing
a transform to an easier format and then another transforms back if there
was an error.&lt;/p&gt;
&lt;p&gt;So given that I was going to need to write this myself, I decided to use
the compile option for the
&lt;a href="https://docs.python.org/3/howto/regex.html"&gt;Python RegEx library&lt;/a&gt;
as inspiration.  For this rule, I would take each part of the provided
configuration and determine if it was either a valid, plain-text Atx
Heading element or the &lt;code&gt;*&lt;/code&gt; character.  In this way, I could handle any
configuration errors during the configuration phase, and not later. This
was going to be a simple loop with some extra checks for Atx Heading element
parts, but nothing too bad.&lt;/p&gt;
&lt;p&gt;Given a compiled Glob to work with, the first thing I needed the algorithm
to do is to avoid any Glob code unless there is a wildcard character
present.  For a non-wildcard scenario, a simple check through the
entire compiled list against the actual Heading elements would be easy.
For the wildcard scenarios, I would need to handle any constant headers
and footers to get to the point where the algorithm could deal with
the wildcards themselves.  I was not sure where to go at that point,
but I decided I would do more design when I got there.&lt;/p&gt;
&lt;h3 id="testing-and-implementation_2"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In all, I created just four scenario test documents to test this rule.
I did not need any more.  As one of the variables in these scenarios
was the configuration, those four documents provided a solid enough
base for me to create all the scenario test functions.&lt;/p&gt;
&lt;h4 id="compiling-the-requirements"&gt;Compiling The Requirements&lt;a class="headerlink" href="#compiling-the-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Because of the nature of the design, I decided to allocate a block of time
specifically to the compiling and storing of the requirements.  The way
I look at it, if I did not get the internal form of the requirements correct,
I would be lucky if the actual comparisons worked.  It was better to be
sure the foundation was correct, so I invested the time there.&lt;/p&gt;
&lt;p&gt;The actual compilation function was spot on what the requirements asked for,
allowing for a simple element structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@classmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;found_parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;compiled_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_part&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;found_parts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_part&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;compiled_lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_while_character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;next_part&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Element must start with hash characters (#)."&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;"Element must start with between 1 and 6 hash characters (#)."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;new_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_any_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;next_part&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_index&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;"Element must have at least one space character after any hash characters (#)."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;new_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;"Element must have at least one non-space character after any space characters."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;compiled_lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_part&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_index&lt;/span&gt;&lt;span class="p"&gt;:]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;compiled_lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, go through the elements, looking for either a line with the
&lt;code&gt;*&lt;/code&gt; character, or look for a valid plain-text Atx Heading element.  As one
of my frequent complaints about software are error messages that do not
help the user, I tried to add useful error messages detailing what the
error is.&lt;/p&gt;
&lt;p&gt;This kept the list to compare against simple.  The entry was either a single
&lt;code&gt;*&lt;/code&gt; character or a tuple with the hash count and the heading text.&lt;/p&gt;
&lt;h4 id="collecting-the-headings-and-associated-text"&gt;Collecting the Headings and Associated Text&lt;a class="headerlink" href="#collecting-the-headings-and-associated-text" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;With the requirements compiling, it was then on to the collecting of
the Heading tokens and their Text data.  This proved to be relatively
easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;completed_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__compiled_headings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__collected_tokens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading_end&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__all_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__collected_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__collected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__collected_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__compiled_headings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__collected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This form actually took me a tiny bit of effort to get to as I struggled
with how to determine whether a Heading token was plain-text only.  In
the end, I just decided to collect all the tokens for the Heading, store
them in the list, and then decide later how to deal with them.  While it
may not be the most elegant way to deal with this problem, it was the
easiest.&lt;/p&gt;
&lt;h4 id="a-globbing-we-will-go"&gt;A Globbing We Will Go&lt;a class="headerlink" href="#a-globbing-we-will-go" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Rather than walking through the Glob code line by line, I thought it
would be more beneficial to walk through the design I did.  Globbing
a string is something that has weird cases in it.  To that extent, I
hope I did a good enough job in laying down the foundation for glob
comparisons in the above &lt;a href="#glob"&gt;Glob section&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Starting from that point, while whatever is being globbed is up to the
implementation, the most common way to think about it is with characters.
I believe this is due to the use of Glob for files and directories in Linux,
and that it easier to keep one character in your head than an entire
string.&lt;/p&gt;
&lt;p&gt;As I detailed above, the algorithm for dealing with zero &lt;code&gt;*&lt;/code&gt; characters
in a glob pattern is easy.  With no special characters, the comparison
becomes a simple comparison with no changes.  If the glob pattern is
&lt;code&gt;abc&lt;/code&gt;, then those characters must appear in that order.  To make
sure that I had a good starting point, I implemented that code first.
I made sure to get all the simple scenario tests passing, and everything
was good.&lt;/p&gt;
&lt;p&gt;I then went on to work out how to deal with one &lt;code&gt;*&lt;/code&gt; character.  As dealing
with any number of any character is a harder issue to deal with, I focused
on finding out if there are any characters at the start of the glob or
the end of the glob that are not wildcards.  If that is that case, then
I can use my comparison function for zero &lt;code&gt;*&lt;/code&gt; characters and deal with
both of those sections.  If the glob pattern only has one wildcard,
the start of the glob and the end of the glob will meet at the glob.&lt;/p&gt;
&lt;p&gt;This was a bit more interesting to work through.  I had the scenario tests
mostly passing, but I had to focus on the algorithm.  It deals
a lot with a start index and an end index of each section.  It was really
easy to get the different values mixed up.  But I persevered and got
all the scenario tests passing.  And then on to the hardest part: multiple
wildcard characters!&lt;/p&gt;
&lt;p&gt;Or so I thought.&lt;/p&gt;
&lt;h3 id="life-often-shows-up-when-you-least-expect-it"&gt;Life Often Shows Up When You Least Expect It&lt;a class="headerlink" href="#life-often-shows-up-when-you-least-expect-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I was hoping to get more done this week. However, due to
unrelated issues with both cars in our family, it became obvious
that life had other plans for me this week.  As I have mentioned
before, working on this project is a hobby for me, and I must
ensure that I keep the other parts of my life in balance.&lt;/p&gt;
&lt;p&gt;Well, these car-related issues worked together this week to remove the
better part of a day from my personal schedule.  And I believe I made
the right choice by focusing on those issues.  However, by removing
those hours from my schedule, I was not able to finish
the work on Rule Md043.  Specifically, I was not able to handle
instances of multiple wildcard characters in the required
configuration value list.&lt;/p&gt;
&lt;p&gt;Going over how to handle this in my head, I determined that I had
made significant progress on the rule itself to warrant it being
checked in. I added a custom warning and a new item to my Issues
List, just to make sure I had everything covered.  Hopefully I
will be able to get to it soon, but I feel that this was the
right decision to make.  Time will tell though.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From a pure numerical standpoint, the number of completed rules
is now 26 and the number of rules remaining is now 5.  As my
expected benchmark was 3 completed rules per week, I was
successful in meeting that goal.  While I wanted to get more
rules done this week, I did not feel it was worthwhile shortchanging
Rule Md043 to achieve that.&lt;/p&gt;
&lt;p&gt;And with five rules left to go, I have a real good shot at getting
the rules completed in the next week or two.  That was something
worth celebrating!  I felt good that I have made all this progress
and will know that I have something solid that people can use.&lt;/p&gt;
&lt;p&gt;It is all coming together, and I like it!  I wish it would move
faster, but I know I will get there and soon.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am almost so close to finishing off the rules that it is hard
for me to bear.  Will I reach it next week? Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Three More Rules</title><link href="https://jackdewinter.github.io/2021/08/23/markdown-linter-three-more-rules/" rel="alternate"></link><published>2021-08-23T00:00:00-07:00</published><updated>2021-08-23T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-08-23:/2021/08/23/markdown-linter-three-more-rules/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/16/markdown-linter-dealing-with-rule-md027/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting Rule Md027 implemented. In this article, I
talk about the next three rules I worked on.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It felt good to get Rule Md027 off of the Issues List.  I hated
to put it on there …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/16/markdown-linter-dealing-with-rule-md027/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting Rule Md027 implemented. In this article, I
talk about the next three rules I worked on.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It felt good to get Rule Md027 off of the Issues List.  I hated
to put it on there a couple of weeks ago, but it was the right call at the
time.  And since I had to tackle it at some point, reserving a week to
work on it and deal with it last week was also the right call.&lt;/p&gt;
&lt;p&gt;But with that work now completed, I needed to get back on track.  And the
closer I am getting to having all the rules implemented, the more I
want them to be done.  I know that is normal to feel that way, but I need
to make sure I temper that feeling with patience and keep following the rules
that got me here.&lt;/p&gt;
&lt;p&gt;Once more into the breach I go!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/aaa2c345e6a16f219ecd2dd930bbcbe0d3460af2"&gt;18 Aug 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/87d7901287d6f741832c40f35f84b2c4a240015f"&gt;22 Aug 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="fenced-blocks-elements-and-blank-lines"&gt;Fenced Blocks Elements and Blank Lines&lt;a class="headerlink" href="#fenced-blocks-elements-and-blank-lines" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having taken the entirety of last week to finish Rule Md027, I was hoping
that I could get this rule completed in less time than one week.  Just
from looking at the rule, it sure looked a lot simpler.  Instead of a whole
bunch of complicated stuff, just make sure that any Fenced Code Block
elements are surrounded by at least one Blank Line.&lt;/p&gt;
&lt;p&gt;The rule looked simple. But was it really going to be simple?&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Based on my initial looks at this rule, I determined that there were
going to be two groups of elements that I needed to deal with: the ones
that crossed container boundaries and ones that don’t.&lt;/p&gt;
&lt;p&gt;As soon as I figured out that the second group will cross container
boundaries, I knew that I would need to keep track of the container
tokens and which one of those tokens were active.  Thanks to Rule Md027 and the other
rules before it, I had some good design and code that I could reuse.
That was one part of the design taken care of.  Now on to the main
part of the design: dealing with both groups.&lt;/p&gt;
&lt;p&gt;Designing for that first group was easy.  For the opening of
the Fenced Code Block element, keep track of the token used the
last time the &lt;code&gt;next_token&lt;/code&gt; function was called.  If a start Fenced
Code Block token is encountered, check that “last” token to see
if it is a Blank Line token. The closing sequence is almost the same
but in reverse.  Once the end Fenced Code Block token is encountered,
set a variable to keep on looking for tokens.  In the next pass through
the &lt;code&gt;next_token&lt;/code&gt; function, check to see if that token is a Blank Line token.&lt;/p&gt;
&lt;p&gt;Logically, those two patterns came easy to me.  Track the Blank Lines in
case we find a start Fenced Code Block element that needs them and track
the Blank Lines after we found an end Fenced Code Block element.  Both
made sense.  That was easy… almost too easy.  Then the design for
the second group came into focus.&lt;/p&gt;
&lt;p&gt;For the second group, that design was going to require adjustments to
the existing design. For the opening part of the design, the “last”
token variable should only be
set if the token is not related to a container open or closing.  In that
way, it can span those container boundaries without any issues.  After
I ran through some simple examples in my head, I was sure that I had
the right design for the opening part.&lt;/p&gt;
&lt;p&gt;For the closing part, I started thinking that the same
consideration applies.  But after some thought, I realized it did not.
From the point of view of the Fenced Code Bock element, if it exists
inside of a container element, it makes sense to look after any end
tokens to determine whether any Blank Lines follow the Fenced Code Block
element.  The element does not care if those end tokens are there as
they simply offer a logical encapsulation of an element.  In most
cases, the end tokens do not represent actual text in the document.
Thus, if a new element and its token are present instead of the required
Blank Line, it should trigger the rule.&lt;/p&gt;
&lt;p&gt;Taking a second look at those designs, things looked solid.  It was time
to move on.&lt;/p&gt;
&lt;h3 id="testing-and-implementation"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After the massive 85 scenario tests last week for Rule Md027, I was happy when
I counted the scenario tests for this rule, and I ended up with 16 scenario tests.
They started with the simple tests without containers and quickly morphed
into those simple tests with containers.  The 16 scenario tests were a
quantity of scenario tests that I could easily deal with.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_end_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_end_token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Starting to work on the rule implementation, getting the tests
for the first group passing was the priority.  Following the
design, I created a simple function that dealt with the before
and after cases properly, as well as setting the last token.&lt;/p&gt;
&lt;p&gt;Handing off the processing of the before case to the
&lt;code&gt;__handle_fenced_code_block&lt;/code&gt; function, that function proved easy
to implement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__handle_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like the design specified, if the last token before the
start Fenced Code Block token is not a Blank Line, trigger the
rule.  Furthermore, because the design stipulates that end tokens
were not important, only non-end tokens will be in the
&lt;code&gt;__last_non_end_token&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;While the before case with the first function was easy to implement,
the handling of the after case and the &lt;code&gt;__handle_end_fenced_code_block&lt;/code&gt;
function was a bit trickier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__handle_end_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;line_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The detection part of the function was straight forward, taken
care of by the first statement and the last two statements of the
function.  The focus for this function was calculating the
deltas to apply to the token’s line number and column number.  As
end tokens do not contain any position information, the position of
the end token needs to be reconstructed using information from
the start Fenced Code Block token and the Text token within the
block.  Once that calculation was performed, a small variance was
needed to alter the column delta to compensate for any indent of
the end Fenced Code Block token, and it was done.&lt;/p&gt;
&lt;p&gt;Then it was on to the container tokens.&lt;/p&gt;
&lt;h3 id="the-second-group"&gt;The Second Group&lt;a class="headerlink" href="#the-second-group" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having track container tokens and their scopes for a couple of
rules, I have an established pattern for handling containers.  Therefore,
that code was easy to add at the start of the main function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To complete the handle of the before case, I needed to change
the &lt;code&gt;if&lt;/code&gt; statement around the setting of the &lt;code&gt;__last_non_end_token&lt;/code&gt;
variable.  To ensure that a new container does not disrupt
this check, the &lt;code&gt;if&lt;/code&gt; statement was changed slightly to ensure
that it does not set the &lt;code&gt;__last_non_end_token&lt;/code&gt; on either of
the end container tokens or the start container tokens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_end_token&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With those in place, the Blank Line checks in both
helper functions only required a simple change to ensure
that they would fire properly with start List elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Doing my usual due diligence, I went through the code and
tightened up variable names and organized the code to my standards.
I then went through and experimented with about ten different
container scenarios, checking to see if the rule fired properly
for each of them.  In each case, the rule fired properly, and I
was able to reduce the experimental scenario down to a scenario
that was already present in a scenario test.&lt;/p&gt;
&lt;h3 id="adding-configuration-support"&gt;Adding Configuration Support&lt;a class="headerlink" href="#adding-configuration-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With everything working and double checked, I added code to respond
to the &lt;code&gt;list_items&lt;/code&gt; configuration value.  Once loaded in the
&lt;code&gt;initialize_from_config&lt;/code&gt; function, responding to it in the code was easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;can_trigger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;can_trigger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__trigger_in_list_items&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;can_trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last example from the previous section was simply altered to
allow the rule to trigger in a general case.  In the case where
the trigger is occurring within a List element, it allows triggering
based on the configured value.  Not a bit change, but it was
nice that the scope was small.&lt;/p&gt;
&lt;p&gt;Checking everything again, I committed the change and started looking
at the next rule.&lt;/p&gt;
&lt;h2 id="list-elements-and-blank-lines"&gt;List Elements and Blank Lines&lt;a class="headerlink" href="#list-elements-and-blank-lines" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Knowing that there is efficiency in working on tasks that share
a common theme, I decided to find another rule that was not yet
implemented and deals with Blank Lines like Rule Md031.  I did not
have to look far before I found Rule Md032.   Dealing
with List elements and Blank Lines, I hoped that I could leverage
my work from Rule Md031 to get this rule implemented quickly.  But,
as always, design first before implementation.&lt;/p&gt;
&lt;h3 id="design_1"&gt;Design&lt;a class="headerlink" href="#design_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To be honest, I really did not do that much design on this rule.  Once
I started figuring out the design on paper, I quickly realized that
it was a watered-down version of Rule Md031.  There was the same
concern about working properly within containers, and the same concern
about tracking what happened at the start of the element and at the end
of the element.  Other than the token being tracked, they looked the same.&lt;/p&gt;
&lt;p&gt;Therefore, the change of token and my previous design for Rule Md031 made
it trivial to design.  Remove the logic for Fenced Code Block elements,
replace them with logic for the List elements, and I was practically done.&lt;/p&gt;
&lt;p&gt;From there, it was time for testing and implementation.&lt;/p&gt;
&lt;h3 id="testing-and-implementation_1"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Following the same process for generating test scenarios as with
Rule Md031, I quickly came up with a solid group of ten scenario
tests for this rule.  Like the design work for this rule,
almost all the scenarios were just slightly changed versions
of the scenarios from the previous rule.&lt;/p&gt;
&lt;p&gt;From there, it just made sense to use the code for Rule Md031
as a base, modifying it as needed.  This was not a difficult task.
The Block Quote token related portions of the rule did not change,
and the code for the Fenced Code Block tokens and List tokens
were merged.  Between those changes, it was less than
five minutes before I got the first scenario test to pass.
The rest of the scenario tests were passing in quick order
as well.&lt;/p&gt;
&lt;p&gt;Everything was quickly working properly in all scenarios, except for two
of the more unusual scenarios. In these scenarios, there is a transition
from a Block Quote element to a List element and then to another element.
To be honest, I do not remember every having written a document
where those elements were nested in that fashion, but as it is
allowable by the specification, I knew that I needed to support it.&lt;/p&gt;
&lt;p&gt;So, after doing some debugging with these scenarios, the solution
was to move one block of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_list_end_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_list_end_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to the start of the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_list_end_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_list_end_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on my debugging, the &lt;code&gt;if&lt;/code&gt; conditions that preceded the
original position of the statement were causing the other handlers
for the container tokens to be executed instead of that block of
code.  By placing it at the start of the function, the &lt;code&gt;if&lt;/code&gt; block was
guaranteed to be executed without the container tokens getting in the way.&lt;/p&gt;
&lt;p&gt;Having discovered and fixed this issue for Rule Md032, I started
to wonder if I had missed it as well in other rules that I had
recently worked on.  I needed to check it out.&lt;/p&gt;
&lt;h3 id="cleaning-up"&gt;Cleaning Up&lt;a class="headerlink" href="#cleaning-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In going over the scenario tests for this rule, I realized that I
may have missed some scenario tests in some of the rules that recently
worked on.  Adding additional scenario tests to those projects, I soon
had a small list of things that I fixed.&lt;/p&gt;
&lt;p&gt;Adding four scenario tests to the tests for Rule Md031, I found that
the Fenced Code Block elements within certain containers were not
behavior properly, as was the case for Rule Md032.  In that case, I
solved the issue in the same way by moving the end Fenced Code Block
handling to the top of the function.  A couple of extra passes over
the code, and everything looked good.&lt;/p&gt;
&lt;p&gt;Likewise, after adding four scenario tests to Rule Md022, I noticed
that I had missed some scenarios with the handling of the end Block
Quote tokens.  Taking some time to debug, the problems with these
scenarios proved easy enough to fix, simply requiring the addition of
&lt;code&gt;and not token.is_block_quote_end&lt;/code&gt; to two of the existing conditions.
While I initially added another three scenario
tests for a total of seven new scenario tests, I eventually decided
that those scenarios were duplicates of the base four scenarios and
removed them.&lt;/p&gt;
&lt;p&gt;Having done that work, I look at the scenario tests for Rule Md027,
to see if there was anything that I missed for that rule and found
nothing obvious.  However, during that exploration, I was not happy with the
way that the code looked and did some refactoring on the code to
make it clearer.  Nothing drastic, just little changes here and there
to make it read better.&lt;/p&gt;
&lt;h3 id="taking-the-time"&gt;Taking The Time&lt;a class="headerlink" href="#taking-the-time" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes I wonder if things like this just waste of my time.  I mean,
instead of taking time to look at issues like these, I could be starting
on a new rule or addressing some other issue.  But then I take a breath
and realized that it is the right thing for me to do.  In the above
cases, I found some new scenarios for what I was working on and wondered
if the more recent rules handled them properly.  The absolute worst
scenario was that I consumed time and did not get much in return.  The
absolute best is that I found issues in all three rules and fixed them.
As it was, I found issues in two of the rules, and code that I was
not 100% happy with in the third rule.&lt;/p&gt;
&lt;p&gt;Call me an optimist, but I think that was a good use of my time.  But
now that I had that finished, it was time to get one last rule in this
week.&lt;/p&gt;
&lt;h2 id="unordered-list-indentation"&gt;Unordered List Indentation&lt;a class="headerlink" href="#unordered-list-indentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes, I plan an order to my tasks to make my work more efficient.
Sometimes, I look back and wish that I had planned my work in a different
order so that I could be more efficient.  At my first glance of this
rule, I was not sure which of those categories this rule was in.&lt;/p&gt;
&lt;p&gt;The only way to find out?  Dig right in and get to work.&lt;/p&gt;
&lt;h3 id="design_2"&gt;Design&lt;a class="headerlink" href="#design_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At a high level, the design of this rule is simple: make
sure that there is an expected level of indentation for Unordered
List elements.  By itself, that was an easy concept to design for.  The
algorithm would assume that an item in an Unordered List element
would be indented by 2 space characters as a default.
Therefore, the very first List element would be a level 1 List element,
indented by 0 space characters, the List element within that List would
be a level 2 List element and indented by 2 space characters, as so on.
From a design point of view, that means checking the current indentation
against the equivalent of &lt;code&gt;level-1 * 2&lt;/code&gt;, and triggering if the indentation
is different.&lt;/p&gt;
&lt;p&gt;The interesting parts of that design were what followed that initial
design.  And yes, they are all about container tokens.&lt;/p&gt;
&lt;h4 id="container-tokens"&gt;Container Tokens&lt;a class="headerlink" href="#container-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The above design assumes that there is a simple definition of what the
current indentation is, and that is not always the case.  In the case
of this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the definition of current indentation on the first level is &lt;code&gt;0&lt;/code&gt;, and on
the second level is &lt;code&gt;2&lt;/code&gt;.  Those indentations are easy to calculate because there
is literally nothing before that List element on each line.&lt;/p&gt;
&lt;p&gt;But taking one step into container blocks, this simple example changes
that definition somewhat:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, the indentation for the first line is still &lt;code&gt;0&lt;/code&gt;, but the
indentation for the second line is &lt;code&gt;3&lt;/code&gt;.  This is because the level 1 List
element is an Ordered List element whose text and spacing creates a base
indentation of &lt;code&gt;3&lt;/code&gt;.  This means that the indentation of &lt;code&gt;3&lt;/code&gt; for the Level
1 Unordered List element is correct.  I had to remind myself (many times)
that while Ordered List elements and Unordered List elements are both List
elements, they are not the same.  And as they are not the same, they are
treated differently.&lt;/p&gt;
&lt;p&gt;This idea extends to Block Quote elements as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because the Block Quote element includes the space after the &lt;code&gt;&amp;gt;&lt;/code&gt; character,
it has a base indentation of &lt;code&gt;2&lt;/code&gt;.  Therefore, the Unordered List element
has an indentation of 0 spaces after the Block Quote sequence.&lt;/p&gt;
&lt;p&gt;Once nesting of container elements comes into play, things get messy quickly.
But at their basis are those three examples.  I worked through a couple or
the more complex nesting example and made sure that they are taken care of.
From what I could see from the ones I chose, things looked good.&lt;/p&gt;
&lt;h4 id="block-quotes-and-leading-spaces"&gt;Block Quotes And Leading Spaces&lt;a class="headerlink" href="#block-quotes-and-leading-spaces" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Having written a good design and implementation of traversal of Block Quote
tokens and their &lt;code&gt;leading_spaces&lt;/code&gt; lines, I knew that this design should
leverage that work.&lt;/p&gt;
&lt;p&gt;One of my refactoring rules is “Code it twice, on the fence; code it
thrice, don’t do it again”.  As this was the second time, I wanted to
try and capture the previous work in one or two functions that I
could refactor into the old rules with later.  What was important
to me was that I did not have to write it “one more time” after this.&lt;/p&gt;
&lt;p&gt;Keeping that in mind, I continued to design for the container tokens.&lt;/p&gt;
&lt;h4 id="designing-for-container-tokens"&gt;Designing For Container Tokens&lt;a class="headerlink" href="#designing-for-container-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Given those constraints and that research, I was now ready to design the tough
part of this rule: the definition of the current indentation.&lt;/p&gt;
&lt;p&gt;For the purposes of this rule, the current indentation is the number of spaces
required to get back to the last meaningful container token that serves as an
anchor for the Unordered List element.  If there are no such tokens, then the
anchor is the start of the line.  Because Unordered List elements nest nicely,
this means that the algorithm needs to go back to before any such nesting
occurs.  From there, the algorithm needs to leverage the data stored within
the other container tokens to establish that anchor token.  Once the anchor
token is established, the indentation for a token is the number of space
characters required to get back to that anchor token’s column.  Phew!&lt;/p&gt;
&lt;p&gt;While I had the general design figured out, I knew in advance that I was
going to have to be fluid with the second half of the implementation of
finding the anchor token.  I have written enough rules to know that sometimes
the List elements and Block Quote elements can play off each other in
weird ways, and I needed to consider that from the outset. To me,
this was not going “meh, I’ll design it later”, it was “I cannot design
it until I get there”.  Seeing as I have been very good at doing design
before implementation, one intentional deviation with a good reason
behind it wouldn’t hurt.&lt;/p&gt;
&lt;h3 id="testing-and-implementation_2"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Working through all the scenarios, I ended up with 28 scenarios to
test.  The good part of that is that 9 of those scenario tests were
from the refactored &lt;code&gt;leading_spaces&lt;/code&gt; code, so hopefully this would
be one of the last times those needed to be tested.&lt;/p&gt;
&lt;p&gt;Moving on to the &lt;code&gt;next_token&lt;/code&gt; function, it started simple and
remains simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manage_container_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The core of this rule is very simple.  If the token is starting
an Unordered List element or is a new List Item within an existing
Unordered List element, the rule needs to check if it is properly
indented.  Otherwise, the &lt;code&gt;manage_container_tokens&lt;/code&gt; function manages
the container token stack’s &lt;code&gt;__container_token_stack&lt;/code&gt; variable and any required
index into a Block Quote token’s &lt;code&gt;leading_spaces&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;For the small portion of tokens that get selected for further checking,
the &lt;code&gt;__check&lt;/code&gt; function handles that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;container_base_column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;block_quote_base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;list_depth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__calculate_base_column&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;list_depth&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;adjusted_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;container_base_column&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block_quote_base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;container_base_column&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;block_quote_base&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;container_base_column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;container_base_column&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;calculated_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list_depth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__indent_basis&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;adjusted_column_number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;calculated_column_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Per the design, the base column and two other variables are
calculated based on what is currently in the &lt;code&gt;__container_token_stack&lt;/code&gt;
variable.  With that information, the token’s &lt;code&gt;column_number&lt;/code&gt; field can
be adjusted to switch from a column number based on the line to an
indentation based on the anchor token.  Then, using the &lt;code&gt;list_depth&lt;/code&gt;
variable, the &lt;code&gt;calculated_column_number&lt;/code&gt; variable can be calculated,
leading to a comparison between the &lt;code&gt;calculated_column_number&lt;/code&gt; variable
and the &lt;code&gt;adjusted_column_number&lt;/code&gt; variable.&lt;/p&gt;
&lt;h4 id="calculating-the-base-column"&gt;Calculating The Base Column&lt;a class="headerlink" href="#calculating-the-base-column" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Calculating the base column turned out to be the function that
took the most time to figure out.  As I noted before, I allowed for
a certain amount of fluidity in the design for this function, and I
used most of it up getting this function right.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__calculate_base_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;container_base_column&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;block_quote_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;list_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;list_depth&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;ignore_list_starts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;ignore_list_starts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;container_base_column&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
                &lt;span class="n"&gt;ignore_list_starts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;bq_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;block_quote_base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;block_quote_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container_base_column&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                        &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bq_index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;container_base_column&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bq_index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;ignore_list_starts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
            &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;container_base_column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block_quote_base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_depth&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the scenarios that do not have any tokens in the token stack, this
function returns simple default values.  Otherwise, this function starts
at the end of the stack and works its way to the start of the list.&lt;/p&gt;
&lt;p&gt;The first &lt;code&gt;while&lt;/code&gt; loop gets rid of the easy tokens on the stack: the
Unordered List tokens.  As these tokens stack together nicely, nothing
special is needed in processing these tokens other than incrementing
the &lt;code&gt;list_depth&lt;/code&gt; variable for later.&lt;/p&gt;
&lt;p&gt;The second &lt;code&gt;while&lt;/code&gt; loop takes care of the other container tokens.  Once
again, if there is nothing left on the stack (i.e. &lt;code&gt;stack_index == 0&lt;/code&gt;),
nothing more processing is needed.  However, if there are more tokens
left on the stack, they are Block Quote tokens and Ordered List tokens.
To properly figure out what the base column is, those tokens need to
be examined until the beginning of the stack is reached.  At that point,
the proper base column should be in the &lt;code&gt;container_base_column&lt;/code&gt; variable.&lt;/p&gt;
&lt;h4 id="taking-the-long-way"&gt;Taking The Long Way&lt;a class="headerlink" href="#taking-the-long-way" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It took quite a bit of effort and time to figure out the
base column part of this rule, even if it was theoretically
simple.  I was right in thinking that the List elements and the
Block Quote elements would play off each other.  As it is,
I went a couple of levels deep in the container elements and
got those right, but I didn’t go deeper.  In hindsight, I am hesitant
to say that I got all the combinations of container elements.  However,
I am confident enough to say that I believe I got most of the
combinations that matter.&lt;/p&gt;
&lt;p&gt;And with that, I stopped working on the rule and started
working on this article.  Taking a couple of breaks, I did
my usual cleaning up and linting of the rule, before committing
it to the project.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From a pure numerical standpoint, the number of completed rules
is now 23 and the number of rules remaining is now 8.  As my
expected benchmark was 3 completed rules per week, I was
successful in meeting that goal.  From a quality point of
view, I was able to find a handful of new parser issues, logging
them for future fixing.  While they will require future work to fix
them, I see those issues as issues that users of the project will not find.
And from an efficiency point of view, things were going well.
My adherence to my design rules were serving me well and keeping
me focused.&lt;/p&gt;
&lt;p&gt;The only negative?  I still have 8 rules left to finish.  I know
it might sound like whining, but I really want to get those rules
implemented so I can release and fix the issues that I have found.
And because of that impatience, I had to take a couple of extra
breaks this week to make sure that I was working on the project
with the right mindset.&lt;/p&gt;
&lt;p&gt;And yes, I am a glass-half-full type of guy.  How did you guess?&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It felt good to get more than one rule done.  For next week,
I know I am going to be close to finishing off the rules,
but I won’t know if I get there until next Sunday. Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Dealing With Rule Md027</title><link href="https://jackdewinter.github.io/2021/08/16/markdown-linter-dealing-with-rule-md027/" rel="alternate"></link><published>2021-08-16T00:00:00-07:00</published><updated>2021-08-16T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-08-16:/2021/08/16/markdown-linter-dealing-with-rule-md027/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/09/markdown-linter-continuing-progress-on-implementing-new-rules/"&gt;last article&lt;/a&gt;, I talked
about how my effort to work efficiently continues to pay dividends for the project.
In this article, I talk about the work I put into getting Rule Md027 implemented.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Everyone has something that they are particular about.  Depending on the person,
there …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/09/markdown-linter-continuing-progress-on-implementing-new-rules/"&gt;last article&lt;/a&gt;, I talked
about how my effort to work efficiently continues to pay dividends for the project.
In this article, I talk about the work I put into getting Rule Md027 implemented.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Everyone has something that they are particular about.  Depending on the person,
there might be a collection of things they are particular about.  While a few
of my things deal with “just making sense”, the one that I hit the
other week was with not getting something done.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong.  If you ask me to move a mountain, I will not be upset if
I don’t get that done.  Now, if you ask me to organize a conference because no
one else can do it, and if I have the support, I will give it my best shot.
I will probably kick myself along the way for the things that I didn’t anticipate
ahead of time, but I won’t kick myself too hard.  After all, I have never organized
a conference before.&lt;/p&gt;
&lt;p&gt;But designing a rule for the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown project&lt;/a&gt;?
I thought I could do that while sipping on a cold beverage and nibbling on some
carrot cake with the tunes up loud.  But a couple of weeks ago, I hit Rule
Md027 and that changed.  Given a 30-minute design window, I couldn’t even get
a basic design off the ground.  Even with a 10-minute extension, I was still
at ground zero.  It wasn’t that I didn’t get it done, it was that I should
have been able to get it done and didn’t.  It weighed on me.&lt;/p&gt;
&lt;p&gt;I didn’t want to let that negativity get in the way of the other rules, so
I decided to give myself a week to design and implement the rule properly.
I wanted to get it done in less than a week, but if it took that long, it
took that long.  I just wanted to get it done.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred on
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d34c7ed2248c4728ce4c14b812bad6a6a2c87289"&gt;15 Aug 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="i-do-not-give-up-easily"&gt;I Do Not Give Up Easily&lt;a class="headerlink" href="#i-do-not-give-up-easily" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Roughly two weeks ago, at the start of my efficiency push, I started to
work on
&lt;a href="https://jackdewinter.github.io/2021/08/02/markdown-linter-making-progress-on-new-rules/#rule-md027-false-start"&gt;Rule Md027&lt;/a&gt;,
but failed to make it out of the design phase.  This week, I decided that
I was going to go back to that rule to properly design and implement it.&lt;/p&gt;
&lt;p&gt;Why? Because I do not give up easily.  I have pride in my work, and the fact
that I had to bail on this rule, even temporarily, just did not sit right with
me.  This time, I knew I needed to give myself as much design time as I
needed to get the design right.  In the end, it took about five hours and
two small redesigns to make it happen.  The important thing is that I got there.&lt;/p&gt;
&lt;h3 id="deciding-to-use-token-rules"&gt;Deciding To Use Token Rules&lt;a class="headerlink" href="#deciding-to-use-token-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The big problem that my design faced was that I needed to work off the
token information, not the line information.  However, I tried to not
acknowledge that and work with the line information instead.  Call me stubborn,
but I thought it would be easier to design it that way.  I knew that working
with line information on this rule would still be difficult, I just figured
that working with lines wouldn’t be as difficult as working with tokens.&lt;/p&gt;
&lt;p&gt;From my original research on the original rule, it was clear that certain
lines, such as a line in a HTML Block element, did not trigger the original
rule.  Thinking things out, this made sense to me.  When specifying a HTML
Block element, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="c1"&gt;-- this is an example --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the author is very specific that anything within that HTML Block be represented
as-is in the document.  Therefore, it the author specifies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;look&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this new rule should assume that the author specifically decided to include that
extra space within the HTML Block.  The same argument follows for Fenced
Code Block elements and Indented Code Block elements.&lt;/p&gt;
&lt;p&gt;I tried to find a way to work around cases like that one, and others,
but they all ended up being too expensive from a design point of view.  The
token already had this
information translated for me, so working with line information would
mean repeating some of that work to get this rule triggering correctly.
Thinking about it long and hard, I decided in the end that working
with the token information made more sense.  But I was also aware that
working with tokens would still require a fair amount of work.&lt;/p&gt;
&lt;h3 id="the-cost"&gt;The Cost&lt;a class="headerlink" href="#the-cost" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I write rules that are line based, the calculations for where a given
rule triggers are easy: calculate the number of characters since
the start of the line and pass it to the &lt;code&gt;report_next_line_error&lt;/code&gt; function
which reports that the rule was triggered.  Quick, easy, done.  With tokens,
it becomes a bit more complicated than that.&lt;/p&gt;
&lt;p&gt;The difficult part about reporting on the triggering of a given token-based rule
is that the engine is restricted to information available in
the token.  For any single token, the only constants are the starting position
of the token and the information contained within the token.  Anything
that needs to be provided to report on the triggered rule needs to be
calculated from that.&lt;/p&gt;
&lt;p&gt;It is not a high cost, but it costs the project the time required to
properly figure out the equation used to translate between the position
of the token and the position where the rule is triggered.  And based
on my research, that calculation was going to be different for each token.&lt;/p&gt;
&lt;h3 id="designing-for-the-container-tokens"&gt;Designing For The Container Tokens&lt;a class="headerlink" href="#designing-for-the-container-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given all that information and a whole bunch of scribbles that I
used to work out issues, I was ready to focus on the design.  I knew
that the design was going to entail multiple levels of effort, but I
was prepared for that.&lt;/p&gt;
&lt;p&gt;At the top level of the design are the container tokens, the two List tokens
and the Block Quote tokens.  As the rule is invoked for each token in
turn, the top level needs to track what container token is the one
that is currently active.  I consider a container token currently active if it is the
container token that is deepest in a stack of all container tokens
that have been opened but not closed.  The reason that this is
important is because Block Quote elements and List elements are
container elements, and therefore they can contain any container element
or leaf element.  Therefore, when processing the top level of the
tokens, the algorithm needs to track this information and only act
on any non-container tokens if those tokens occur while a Block
Quote token is active.&lt;/p&gt;
&lt;p&gt;Basically, if this rule is called with a Markdown document that looks
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then the rule should never take any action for the text &lt;code&gt;this is a test&lt;/code&gt;
outside of the top level of the design, because it never hits a state
where that text is encountered, and a Block Quote is currently active.&lt;/p&gt;
&lt;p&gt;It is only those cases where a Block Quote token is currently active
that processing needs to proceed to the next level of the design. It
is with scenarios like the following where that extra processing is
needed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Therefore, as part of the design, I knew I would have to keep track of the
current line of the active Block Quote token.  The information about
which characters started any line within a Block Quote token is stored
with the active Block Quote token.  While that information would not
affect whether the rule would trigger, I knew that it will be needed to
provide for an accurate column number of where the rule triggered.  If
the current Block Quote line is not correct, then the column number would not
be correct.  Not as bad as not triggering the rule, but still important.&lt;/p&gt;
&lt;p&gt;With the container tokens dealt with, I needed to deal with the handling
of leaf tokens within the scope of an active Block Quote token.  That
was next!&lt;/p&gt;
&lt;h3 id="designing-for-the-leaf-tokens"&gt;Designing For The Leaf Tokens&lt;a class="headerlink" href="#designing-for-the-leaf-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having dealt with the container tokens, in the next level of the design
I needed to deal with leaf tokens.  Trying to break things down into
manageable blocks of work, I organized the leaf tokens into four classes
that I needed to design for: single line tokens, complex single tokens,
text encompassing tokens, and everything else.&lt;/p&gt;
&lt;p&gt;For the single line tokens, the action to take is relatively easy.
Single line elements such as the Thematic Break element only have one
line, so a simple check is required to determine if the rule is triggered.
Once that check has been performed, only the current Block Quote line needs
to be updated.&lt;/p&gt;
&lt;p&gt;The next tokens to consider are the complex single tokens.  Currently the
only token that falls into this category is the Link Reference Definition,
but I am sure future work will add more tokens like this.  This group is
specific to tokens like the Link Reference Definition token where a single
token is defined with complex parts.  That makes this group unique
because while the rules for a newline within a part may be vary from
part to part, the triggering of this rule on any eligible whitespace
between parts is constant.  That is why the following Markdown document
will only trigger on this rule three times:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lab&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="ss"&gt;"tit&lt;/span&gt;
&lt;span class="ss"&gt;&amp;gt;  le"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The three trigger points are the whitespace on the first line before the
Link Label, the whitespace on the third line before the URL, and the
whitespace on the fourth line before the title.  Each of them deals with
whitespaces.  The other lines are special.&lt;/p&gt;
&lt;p&gt;The next group of tokens, and the largest of the four groups, are the
text encompassing tokens.  What makes this group interesting is that
the handling of any Text tokens within the scope of these tokens is
dependent on the type of token that contains them.  The handling
for text in either of the two Code Block elements or HTML Block element
is different from the text in a SetExt Heading element, which is also
different from the text in the Atx Heading element or the Paragraph element.
From a design point of view, that meant that I would have to track
whichever of those encompassing tokens was active to enable me to
properly deal with any encompassed text.&lt;/p&gt;
&lt;p&gt;With all those tokens out of the way, any remaining tokens fall into
a simple group called “everything else”.  This includes tokens like the
Emphasis token used to denote Emphasis within a block of text. The
distinction for these tokens is that there is no way that any of these
tokens can trigger the rule to occur, so they can be dismissed.  With
each token in this group, the nature of the token just precludes it
from being interesting to this rule.&lt;/p&gt;
&lt;h3 id="designing-for-the-inline-tokens"&gt;Designing For The Inline Tokens&lt;a class="headerlink" href="#designing-for-the-inline-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After designing for the other two classes of tokens, the only class that
was left to design for was the Inline tokens class.  Looking over the
use cases for teach token, I determined that I only needed to design for
three tokens: Links, Raw HTML, and Code Spans.  With every other inline
token, the token is interpreted inline or defined as to not exceed a
single line.  Therefore, if there are any extra space characters before that
token is encountered, those characters will be placed into a Text token.
That meant I only had to deal with the three outliers.&lt;/p&gt;
&lt;p&gt;The Raw HTML token and the Code Span tokens were the easy ones to design
for.  Everything within the token is eligible, so one simple check is
sufficient.  But with the Link tokens, there are multiple parts, such as the
Link Labels, which are not eligible, and parts like the whitespace, which
are eligible.  Not too much of a difference, but one to keep track of.&lt;/p&gt;
&lt;p&gt;Once one of those tokens triggered the rule to fire, I knew I would
have some non-trivial calculations to figure out the proper line
number and column number.  Because these tokens occur within leaf
tokens, I knew that I would have to do some interesting work to merge
the results of any of these tokens with their &lt;em&gt;parent&lt;/em&gt; tokens.  But
I was okay with designing that part of the algorithms when I got to
it.&lt;/p&gt;
&lt;h2 id="starting-to-implement"&gt;Starting To Implement&lt;a class="headerlink" href="#starting-to-implement" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As with any good Test-Driven Development practitioner, I looked at
my scribbled notes and started writing scenario tests for each
of the scenarios I was interested in.  For each scenario test, I
created a new Markdown document in the &lt;code&gt;tests/md027&lt;/code&gt; directory
and an accompanying disabled test in the &lt;code&gt;test_md027&lt;/code&gt; Python module.&lt;/p&gt;
&lt;p&gt;Going through all the relevant examples on my testing worksheet,
I ended up with 81 disabled scenario tests when I was done.  From
start to finish, it took me just over three and a half hours (including
short breaks) to add all those scenarios and their tests into the project.
To be clear, that was not getting the tests working, just entering them
in a disabled state.&lt;/p&gt;
&lt;p&gt;From that effort, I knew that implementing this rule was not going to be
something that would be done in a day.  I was hoping I could keep it
to a week.&lt;/p&gt;
&lt;h3 id="implementing-for-the-container-tokens"&gt;Implementing For The Container Tokens&lt;a class="headerlink" href="#implementing-for-the-container-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As designed, the first thing that I needed to code was high-level
handling of the container tokens.  This proved to be very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;num_container_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;newlines_in_container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; 
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_within_block_quotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without missing a beat, this followed the design that I had specified.
The &lt;code&gt;self.__container_tokens&lt;/code&gt; list maintains what the active container
token is, being modified by both List tokens and Block Quote tokens. If
a Block Quote token is encountered, a bit more work is done to add an
entry in the &lt;code&gt;self.__bq_line_index&lt;/code&gt; dictionary to track the index within
the Block Quote.  Finally, if the &lt;code&gt;token&lt;/code&gt; variable is set to a non-container
token and the active container token is a Block Quote token, then the
&lt;code&gt;__handle_within_block_quotes&lt;/code&gt; function is called to handle the processing.&lt;/p&gt;
&lt;p&gt;With the container tokens design dealt with, it was on to the leaf tokens.&lt;/p&gt;
&lt;h3 id="implementing-for-the-leaf-tokens"&gt;Implementing For The Leaf Tokens&lt;a class="headerlink" href="#implementing-for-the-leaf-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For any readers who follow these articles, it should come as no surprise
that I started implementing the &lt;code&gt;__handle_within_block_quotes&lt;/code&gt; function
as one humongous function.  As I have mentioned in other articles,
I prefer to code first, refactoring later when I have a more complete
picture of the code in question.&lt;/p&gt;
&lt;h4 id="starting-with-paragraphs"&gt;Starting With Paragraphs&lt;a class="headerlink" href="#starting-with-paragraphs" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For no other reason than Paragraph elements showing up more than any
other elements, I decided to start my work on the &lt;code&gt;__handle_within_block_quotes&lt;/code&gt;
function with them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__handle_within_block_quotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;num_container_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_leaf_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;line_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;calculated_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line_index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                        &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="n"&gt;calculated_column_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Paragraph token is a special scenario in the PyMarkdown project.
But because Paragraph elements are the most common elements in Markdown, I
wanted to get it out of the way.  Due to the constraints of the
Paragraph element, any leading spaces on a line within a Paragraph element
are skipped.&lt;sup id="fnref:example192"&gt;&lt;a class="footnote-ref" href="#fn:example192"&gt;1&lt;/a&gt;&lt;/sup&gt;  But because the PyMarkdown project deals in tokens
and not HTML, any skipped or translated characters must be accounted for in
the token.  Therefore, the Paragraph token contains a &lt;code&gt;leading_spaces&lt;/code&gt; property
to contain those skipped spaces, separated by newline characters for readability.&lt;/p&gt;
&lt;p&gt;Given that background, the code within the bounds of the &lt;code&gt;if token.is_paragraph&lt;/code&gt;
part of the function use that &lt;code&gt;leading_spaces&lt;/code&gt; property to figure out if any of
the individual lines begin with whitespace.  Once split into separate lines, a simple
iteration over the lines and a check for &lt;code&gt;if next_line&lt;/code&gt; determines if leading
whitespace was removed for that line.  If so, the real fun begins.&lt;/p&gt;
&lt;p&gt;As Paragraph elements can contains multiple lines of text, calculations
are performed to determine where in the paragraph the triggering
occurred.  The change from the token’s line number is easy to figure out.
Enumerating through the various lines in the &lt;code&gt;leading_spaces&lt;/code&gt; property,
the change is simply the iteration through the &lt;code&gt;for&lt;/code&gt; loop.  To keep things
simple, I named this variable &lt;code&gt;line_number_delta&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For the column number, there is no way around using the line prefix information
stored in the Block Quote token.  Since the number of lines into the Block
Quote is kept track of in the &lt;code&gt;self.__bq_line_index&lt;/code&gt; dictionary, the function
needs to calculate the proper index into that prefix list.  By taking the current
Block Quote token’s entry in that table and adding the iteration through the loop
(&lt;code&gt;line_number_delta&lt;/code&gt;), the proper index is obtained.  With that calculation, the
length of the Block Quote prefix for that line is looked up, its length computed,
and the rule is triggered with a call to &lt;code&gt;report_next_token_error&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, to make sure the index within the Block Quote token remains
correct, the entry in the &lt;code&gt;self.__bq_line_index&lt;/code&gt; dictionary is updated
to include the number of newline characters in the paragraph.&lt;/p&gt;
&lt;p&gt;Phew! To be honest, I had some confidence that this would be one of the more difficult
elements to get right, and I was correct.  But it was also good that I
dealt with it early.  By working on this code and the ten or so tests
that deal directly with paragraph elements, I gave myself a good
example that I could use as a reference point.&lt;/p&gt;
&lt;p&gt;And the testing was pivotal.  I was able to comment out the &lt;code&gt;skip&lt;/code&gt;
test attribute, run the tests, and make any adjustments as necessary.
Slowly, the scenario test for Rule Md027 were starting to pass!&lt;/p&gt;
&lt;h4 id="on-to-single-line-elements"&gt;On To Single Line Elements&lt;a class="headerlink" href="#on-to-single-line-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While it may be an oversimplification, the remaining handlers that I wrote
for handling their tokens are just variations on the Paragraph handler
from the last section.  Starting with the handler for Thematic
Break tokens, it was easier to implement than the Paragraph token’s
handler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_thematic_break&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the exact information is already stored within the token, and because
that information cannot span lines, that handler simply checks to see
if the token was prefaced with any whitespace.  When that scenario
occurs, the reported position is adjusted by providing a new
calculation for the column number to report.  This is required because
negative deltas are used to present absolute positions on the line, and
not negative changes to the token’s column number.  As such, the
&lt;code&gt;column_number&lt;/code&gt; is used as a base, subtracting the length of the found
whitespace, and reporting that as the absolute start.&lt;/p&gt;
&lt;p&gt;After that calculation, adding &lt;code&gt;1&lt;/code&gt; to the proper &lt;code&gt;__bq_line_index&lt;/code&gt; entry
was trivial.  It needed to account for the single line containing the
Thematic Break, so adding &lt;code&gt;1&lt;/code&gt; made sense.  And the &lt;code&gt;if&lt;/code&gt; statement for
&lt;code&gt;token.is_blank_line&lt;/code&gt; was even simpler, because the token’s line number
and column number are always the position where the rule triggers.
Hence, no &lt;code&gt;column_number_delta&lt;/code&gt; variable was required.&lt;/p&gt;
&lt;h4 id="complex-elements"&gt;Complex Elements&lt;a class="headerlink" href="#complex-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Link Reference Definitions tokens are essentially the same as
the previous two elements, just with more parts to take care of.  The
first part of handling this element is practically a copy of what
was written to handle the Thematic Break token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_link_reference_definition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;scoped_block_quote_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_name_debug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_destination_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_title_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_title_raw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main difference so far is that the calculation for the number of
lines in the Paragraph token is a bit more complex.  Once that was
taken care of, I was able to work on the other two parts of that
handler: the whitespaces.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_destination_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_destination_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;line_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_name_debug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="n"&gt;split_array_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scoped_block_quote_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;specific_block_quote_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;split_array_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;specific_block_quote_prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first handler looks like parts of the handler for the Paragraph token.
Once that whitespace is found, a bit more work is required to calculate the
&lt;code&gt;column_number_delta&lt;/code&gt; variable, but it just a variation of previous work.
Instead of using the &lt;code&gt;line_number_delta&lt;/code&gt; returned by the &lt;code&gt;enumerate&lt;/code&gt; function,
it is computed based on the parts of the element that come before that
whitespace, the information in the &lt;code&gt;token.link_name_debug&lt;/code&gt; variable.
The Block Quote token’s &lt;code&gt;leading_spaces&lt;/code&gt; variable is then split and the
index into that list of split values is calculated.  Then, just as with
the Paragraph token’s handler, the &lt;code&gt;column_number_delta&lt;/code&gt; variable is set
to the length of that line’s prefix.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_title_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_title_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;line_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_name_debug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_title_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;split_array_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scoped_block_quote_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;specific_block_quote_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;split_array_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;specific_block_quote_prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is again copied, almost verbatim, to handle the next whitespace part
of the Link Reference Definition token.  They are close enough to each
other that I will probably refactor them together in a future refactoring
effort.&lt;/p&gt;
&lt;p&gt;Once again, the handling of this token was just repeating the work done
previously, with some small alterations.&lt;/p&gt;
&lt;h4 id="encompassing-elements"&gt;Encompassing Elements&lt;a class="headerlink" href="#encompassing-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;With most of the other work done, it was time to focus on the
encompassing elements.  To start, I picked the Atx Heading token,
which contains the Heading text between the Atx Heading token
and the end Atx Heading token.  To ensure that the function knows
it is dealing with another token between those two tokens, I added
some very simple handling of those Atx Heading tokens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_leaf_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_leaf_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While there are variations on this code, like Fenced Code Block elements or
SetExt Heading elements which have a close line, almost all the encompassing
block handler functions are like this.  The only outlier is the end Fenced Code
Block toke handler, which has information about the closing fence characters.
But even that handler is simple, reusing elements from the Link Reference
Definition handler.&lt;/p&gt;
&lt;p&gt;Now that the rule knows a token was found within one of these encompassing
elements, it was time to implement the handler for the Text token.  The
text within a SetExt Heading element is specially encoded to handle the
start and end of the line differently than a Paragraph token, so that
took a lot of the work.  The Code Block tokens and the HTML Block tokens
were easy to handle.  For those tokens, the text is as written, so no
analysis is needed.  Because of that, incrementing &lt;code&gt;__bq_line_index&lt;/code&gt;
was all that was required.&lt;/p&gt;
&lt;p&gt;And with that, I checked my handy list of things that I needed to
implement, and everything was checked off.  Along the way I had found
three different parser bugs and added them to the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/issues.md"&gt;Issues List&lt;/a&gt;
to deal with later.&lt;/p&gt;
&lt;p&gt;Things looked good with the rule, but I wanted to make sure I
had addressed every issue that I could find.  Therefore, it was
time to start looking over the scenario tests and double checking
everything.&lt;/p&gt;
&lt;h2 id="simple-refactoring"&gt;Simple Refactoring&lt;a class="headerlink" href="#simple-refactoring" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having completed the large handler function for tokens, before
I went on, I knew that I needed to refactor it into separate
functions.  So, taking my time, I carefully created a new function
for each token, moving the handler code into that new function.&lt;/p&gt;
&lt;p&gt;With the solid suite of scenario tests to back me up, I was
confident that any issue I introduced would be found.  But
that got me thinking.  Did I miss something?&lt;/p&gt;
&lt;h2 id="double-checking"&gt;Double Checking&lt;a class="headerlink" href="#double-checking" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Wanting to have confidence that I completed everything, I started
going through the scenario test data and validated that I had
taken care of all the scenarios that I could think of.  Along
the way, I added four more tests to the rule, bringing the
total of scenario tests to 85.&lt;/p&gt;
&lt;p&gt;And I even found another bug.  Well, not really a bug, but
an inconsistency.  Given the Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;simple&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the test failed with an unmatched Block Quote index.  Basically, the
number of newlines in the Block Quote token was not equal to the
number of newlines collected within the Block Quote.&lt;/p&gt;
&lt;p&gt;After a quick look, I was interested to find that in the above case,
the Block Quote token’s &lt;code&gt;leading_spaces&lt;/code&gt; field did not end with a
newline character.  Verifying that this seemed to be the only case
where it happened, I added this code to the &lt;code&gt;next_token&lt;/code&gt; function to
deal with it for now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
        &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;newlines_in_container&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Everything was good… until it wasn’t.&lt;/p&gt;
&lt;h3 id="dropping-the-ball-on-inline-elements"&gt;Dropping The Ball On Inline Elements&lt;a class="headerlink" href="#dropping-the-ball-on-inline-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I blame myself for doing something careless, I am just not sure
when I did it.  At some point along the weeklong implementation
of this rule, I had entries for Code Span, Raw HTML, and Links
on my To-Do list.  And somewhere along the line, I checked them
off.&lt;/p&gt;
&lt;p&gt;What is even more embarrassing is that I double check my tests
and implementations to try and make sure that I don’t miss
things like this.  But when I did my double checks, I double
checked to ensure that I had all the correct scenario test
data.  And I did include scenario test data for those three
elements… I just never added the tests for them. I did not
think I had added one without the other, but obviously I did
for those elements.&lt;/p&gt;
&lt;p&gt;As I found this out at 6pm on Sunday night, it was too late
to add in any fixes at that point.  So, I put it on a short
list of things to fix, and I want to get to it when I have some
spare time in between writing the other rules.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the picture of a scoreboard that I have scribbled
on a piece of paper on my desk, the number of completed rules is
now 20 and the number of rules remaining is now 11.  I hope
that I don’t find many more rules like Rule Md027, but I
am confident I can still get the rules done quickly.&lt;/p&gt;
&lt;p&gt;As to how I feel about Rule Md027, I must admit that it is
a bit of mixed bag.  On one hand, it was a monster rule, and
it took good design followed by good implementation to get it
to this point.  But the shadow of having missed the three
inline elements is also present.  To throw things in the
positive again, I did find a few parser bugs, which means
I can fix them before users find them.  As I said, a mixed
bag.&lt;/p&gt;
&lt;p&gt;But in the end, I am still positive about how things are going.
Once I get the rules done, or at least a good first pass at
the rules, I am thinking about releasing a minor version
to include the new rules.  I think this is still a probable
thing, and I am kind of looking forward to it.&lt;/p&gt;
&lt;p&gt;So yeah, I took some bumps, and I got some bruises.  But
I also got a monster of a rule mostly done.  That feels good!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a week of focusing only on one rule, I wanted to get back to making
more progress.  I hope I get more done this week!  Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:example192"&gt;
&lt;p&gt;See &lt;a href="https://github.github.com/gfm/#example-192"&gt;example 192&lt;/a&gt; in the GFM specification. &lt;a class="footnote-backref" href="#fnref:example192" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Continuing Progress On Implementing New Rules</title><link href="https://jackdewinter.github.io/2021/08/09/markdown-linter-continuing-progress-on-implementing-new-rules/" rel="alternate"></link><published>2021-08-09T00:00:00-07:00</published><updated>2021-08-09T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-08-09:/2021/08/09/markdown-linter-continuing-progress-on-implementing-new-rules/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/02/markdown-linter-making-progress-on-new-rules/"&gt;last article&lt;/a&gt;, I talked
about my efforts to streamline the rule implementation process and how that went.
In this article, I talk about how that effort continues to pay dividends for
the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having looked at the tasks that I need to complete before I even …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/02/markdown-linter-making-progress-on-new-rules/"&gt;last article&lt;/a&gt;, I talked
about my efforts to streamline the rule implementation process and how that went.
In this article, I talk about how that effort continues to pay dividends for
the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having looked at the tasks that I need to complete before I even remotely think
about another beta version release for the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project,
it was obvious to me that I need to implement more linting rules.  Having completed
a big push over the last six months for foundational work, the foundation of
the project was looking stronger than ever.  But without a good set of rules to
provide a decent linting experience, the project is essentially just a very “expensive”
&lt;a href="https://github.github.com/gfm"&gt;GitHub Flavored Markdown&lt;/a&gt; parser with
some extra features on top.  From my point of view, it was essential to get
more rules completed.&lt;/p&gt;
&lt;p&gt;So now, after a couple of weeks of working on this task and some strict
development rules for myself, just over one third of the remaining rules
are now implemented.  Not bad for two weeks’ worth of work!  But I
had to keep that enthusiasm in check, making sure it did not become
complacency.  It was some good progress, but there are still a lot more
rules that need to be implemented.  So, I wanted to keep my enthusiasm,
but at the same time keep it in check with some solid pragmatism.&lt;/p&gt;
&lt;p&gt;Given that, some confidence, and a somewhat clear calendar for the week,
I started to work on more linting rules!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/20509ae5bb5b11ff8a9fce8de1452bb5016d10d9"&gt;05 Aug 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/267027d3d6a411accf4944a04d7755c6624f7dec"&gt;08 Aug 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="working-fast-and-efficiently-part-two"&gt;Working Fast and Efficiently - Part Two&lt;a class="headerlink" href="#working-fast-and-efficiently-part-two" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After adding seven new rules last week, I was eager to get back to work
on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project
and see if I could implement another seven rules this week.  I was
confident that I had the energy and the effort, but I was not sure if
the remaining rules would lend themselves to the rapid design and
implementation that made achieving the previous week’s progress possible.&lt;/p&gt;
&lt;p&gt;Regardless of what those remaining rules looked like, I wanted to try
and keep to my
&lt;a href="https://jackdewinter.github.io/2021/08/02/markdown-linter-making-progress-on-new-rules/#working-fast-and-efficiently"&gt;two personal rules&lt;/a&gt;
from last week, the 30 minutes design rule and the 2 hour implementation rule,
to see how many more rules I could implement.  If
nothing else, I knew that I could use small variations of those personal
rules to keep me centered and focused on the tasks at hand.  As
I know that I occasionally have problems with focus, so the
decision to keep with a process that helps me keep focus on
the right tasks was not a difficult one to make.&lt;/p&gt;
&lt;p&gt;So, with some optimism in mind, I started working on the
new set of rules for this week!&lt;/p&gt;
&lt;h2 id="rules-md039-and-md040-getting-lucky"&gt;Rules Md039 and Md040 - Getting Lucky&lt;a class="headerlink" href="#rules-md039-and-md040-getting-lucky" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Picking up the next rule, &lt;em&gt;Md039 - Spaces inside link text&lt;/em&gt;, I was lucky
that I was able to complete the design within five minutes.  When I say
that, I am not being flippant or exaggerating about my design skills…
the design of the rule was just that easy.  It
was easy enough that I decided to look ahead at the following rule &lt;em&gt;Md040 - Fenced code
blocks should have a language specified&lt;/em&gt;, to see if it followed the same
pattern.  Luckily enough, it did! In both scenarios, the rule reacts to
information that is completely stored within a single token. Based on that
information, working on these two rules together and get them completed as
a pair just seemed like the correct thing to do.&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I mentioned in the last section, the design for these two rules was
trivial compared to other rules.  In the case of Rule Md039, all text
used for the link label is stored within the token’s &lt;code&gt;text_from_blocks&lt;/code&gt;
field.  For Rule Md040, the text after the Fenced Block boundary characters
is stored within the token’s &lt;code&gt;extracted_text&lt;/code&gt; field.
That made the design simple: look for the specified token and check
the specified field to see if it matches the requirements for triggering the
rules.&lt;/p&gt;
&lt;h3 id="implementation-and-testing"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Proper testing of every scenario was the hard part for Rule Md039. Because both
Link elements and Image elements are impacted, along with the four types
of notations allowed for each, I created a total of twenty scenario tests
to cover each possibility.  Compared to that, there was little effort
required to create the four scenarios for Rule Md040.&lt;/p&gt;
&lt;p&gt;Once those scenarios were completed, the rest of the implementation went
off without any problems.  For Rule Md039, once a Link element or an Image
element is detected, a simple check is required to see if there are any
spaces on either side of the link label.  With that information stored in
the &lt;code&gt;text_from_blocks&lt;/code&gt; variable, the following code provides that check:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_link&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_from_blocks&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_from_blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly for Rule Md040, given the start of a Fenced Code Block element,
a simple check was added to determine if the &lt;code&gt;extracted_text&lt;/code&gt; field contained
any characters after removing any whitespace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I know I will not always get as lucky as with the design and
implementation of these two rules, it was nice to know it could
happen every so often.&lt;/p&gt;
&lt;h2 id="rule-md042-no-empty-links"&gt;Rule Md042 - No Empty Links&lt;a class="headerlink" href="#rule-md042-no-empty-links" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From the start, I knew that this rule was going to be another rule that
would be handled with a simple implementation. In this case, I noticed
a lot of similarities with Rule Md039.
But instead of checking for spaces on either side of the link label,
it was checking for a link URI that had not been specified.  This
is a trick that authors often use to ensure that they fill in link
URIs with the proper URLs before publishing a document.
As I use this trick myself, I had a personal stake in making sure
that this rule was working properly.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_1"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As the design of this rule was so like the designs for both
Rule Md039 and Rule Md040, I leveraged their design instead of creating
a new one.  For the testing of this rule, I was fortunate that this
rule only applies to Inline Link elements and Inline Image elements.&lt;sup id="fnref:inline"&gt;&lt;a class="footnote-ref" href="#fn:inline"&gt;1&lt;/a&gt;&lt;/sup&gt;
As such, I only needed to provide scenarios that deal with both inline
types of links.&lt;/p&gt;
&lt;p&gt;With the information that this rule only fires if there is an empty
URI or an empty URI fragment reference, the code for this rule was
quickly implemented:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_link&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;stripped_link_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active_link_uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;stripped_link_uri&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;stripped_link_uri&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rule-md045-alternate-image-text"&gt;Rule Md045 - Alternate Image Text&lt;a class="headerlink" href="#rule-md045-alternate-image-text" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, I was hoping that I would find more of these simple rules
to implement, but also dreading them at the same time.  For whatever
reason, I felt that the more of these rules that I found, the more of a
chance that the other rules would be orders of magnitude more difficult.
However irrational it might seem, I worked through those feelings
as distractions and moved on.&lt;/p&gt;
&lt;p&gt;But after looking at this rule, it was obvious that it fell into the same
pattern as the last three rules, and I was grateful for the chance to keep
things going forward.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_2"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With three scenarios to cover inline Image elements and four scenarios to cover
the other three types of Image elements, the scenario tests were covered, and I was
ready to start implementation.  As the Image element’s link label specifies
the alternate image text stored in the &lt;code&gt;img&lt;/code&gt; tag’s &lt;code&gt;alt&lt;/code&gt; parameter, the
implementation was just to verify that there is text in the &lt;code&gt;text_from_blocks&lt;/code&gt;
field, as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_from_blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I looked ahead to the next rule to implement, I breathed a sigh of
relief.  It was not a simple one, but it was not an extremely difficult
one either.  Just a good solid rule to work on, nothing more.&lt;/p&gt;
&lt;h2 id="rule-md046-code-block-style"&gt;Rule Md046 - Code Block Style&lt;a class="headerlink" href="#rule-md046-code-block-style" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While not as simple as the last four rules, I quickly found out that this
rule followed the pattern of the &lt;em&gt;style&lt;/em&gt; rules that I have implemented before.
Looking into what I did for
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_003.py"&gt;Rule Md003&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_004.py"&gt;Rule Md004&lt;/a&gt;,
I did not believe I had to do a complete rewrite of a rule, just a massaging
of the previous work from those old rules to form a new rule.  Not as easy as
I had gotten used to, but also not as difficult as some other rules either.&lt;/p&gt;
&lt;h3 id="design_1"&gt;Design&lt;a class="headerlink" href="#design_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In Rule Md003, there is a lot of extra code to determine what the heading
levels were for both the Atx Heading element and the SetExt Heading element.
But looking at Rule Md004, its implementation was a lot simpler.  In the case
of that rule, most of the rule is
geared towards checking if the applied style is correct, with only
a handful of lines used to look for Unordered List elements and to track
different levels of styles of each level of those elements.  As such, it seemed
prudent to base the design for Rule Md046 on Rule Md004, albeit with a couple of changes.&lt;/p&gt;
&lt;p&gt;Those changes were simple and easy to implement.  Instead of tracking Unordered
List elements, Code Block elements were tracked.  And instead of tracking the
multiple levels required for the nesting of List elements, a single field
containing a single style was sufficient for this rule.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_3"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Going through the permutations in my head, there were only three scenario
tests that I needed to write: two Fenced Code Block elements, two Indented Code
Block elements, and a final test with one of each.  For every other combination of
Code Blocks that I came up with, I was able to reduce the combination into one of
those three base scenarios.  Wanting to be sure that I did not miss a combination,
I worked through each of my scenarios again, and arrived at the same result.  Three
scenarios it was.&lt;/p&gt;
&lt;p&gt;As indicated in the design, I copied the source for Rule Md004 into &lt;code&gt;rule_md046.py&lt;/code&gt;,
with only a couple of changes being required.  Instead of the five styles available
for Rule Md004, I defined a new set of three styles to use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;__consistent_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"consistent"&lt;/span&gt;
    &lt;span class="n"&gt;__fenced_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"fenced"&lt;/span&gt;
    &lt;span class="n"&gt;__indented_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"indented"&lt;/span&gt;
    &lt;span class="n"&gt;__valid_styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;__consistent_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;__fenced_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;__indented_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, in the &lt;code&gt;next_token&lt;/code&gt; function, instead of tracking Unordered List
elements, I modified the code to track Code Block elements.  With
that done, I only needed to set the &lt;code&gt;current_style&lt;/code&gt; variable to the
current style, and the code from the previous function did the rest
of the heavy lifting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;current_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;RuleMd046&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__fenced_style&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;RuleMd046&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__indented_style&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_style&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;current_style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Expected: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"; Actual: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_style&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rule-md048-code-fence-style"&gt;Rule Md048 - Code Fence Style&lt;a class="headerlink" href="#rule-md048-code-fence-style" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having just completed the code for Rule Md046, I was fortunate to look
ahead and find that Rule Md048 was almost identical in composition to
Rule Md046.  The only difference was that instead of verifying the style
of the type of Code Block element, this rule was focusing on verifying
the style of the character used to define the Fenced Code Block element
itself.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_4"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am sure that any readers will not experience surprise when they find out
that the implementation and testing of this rule were almost exact copies of
the work done for Rule Md046.  Besides the available style names changing,
the only other code that changed was replacing this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;current_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;RuleMd046&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__fenced_style&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;RuleMd046&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__indented_style&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;current_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;RuleMd048&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__backtick_style&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fence_character&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"`"&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;RuleMd048&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__tilde_style&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But having implemented a handful of these low-cost rules in a row, I
was getting a bit &lt;em&gt;restless&lt;/em&gt;.  I did not have any issues in getting these
rules completed, but I just felt like I needed a break to shake things
up a bit.  I did not realize that it would be a longer break than I intended.&lt;/p&gt;
&lt;h2 id="rule-md044-capitalization-of-proper-names"&gt;Rule Md044 - Capitalization Of Proper Names&lt;a class="headerlink" href="#rule-md044-capitalization-of-proper-names" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having kept to my two efficiency rules for a while now, I wanted to give
myself a chance to let loose and pick up a medium difficulty rule.  If
nothing else, every rule in the list needs to be implemented, so the work
was not going to be wasted.  With only a small deviation from my efficiency
path, I thought that this rule would be a good one to shake things up a bit.&lt;/p&gt;
&lt;p&gt;Honestly, i did not realize how much it would shake things up until it was
all over, with a total of thirty-one tests required to validate it.  I
was in for quite the surprise.&lt;/p&gt;
&lt;h3 id="design_2"&gt;Design&lt;a class="headerlink" href="#design_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The thing that drew me in to this rule from the beginning is that if felt
like a “simple” search for proper name strings within another string.  Or
at least that is what I thought it was at the start.  As I read through the rule a
bit more, there was one caveat: a configuration value allowing or disallowing
this rule from looking in Code Blocks.&lt;/p&gt;
&lt;p&gt;That caveat was important.  Without that configuration value, this rule was a simple
string-in-string search.  With that configuration value, the design would need to deal
with individual types of elements that may contain the proper names that
are being searched for.  While I knew that list contained the Text element
under certain conditions, I was not sure how many other elements would
require similar treatment.&lt;/p&gt;
&lt;p&gt;To combat that uncertainty, I decided to use an iterative design approach.
I started the design process by narrowing my scope to the Text element scenario.
For each additional element that needed the same approach, I planned to revisit
the design to resolve any additional issues that crept up.  It was not ideal,
but unless I wanted to spend a lot of time designing everything up front, I
knew it would work.&lt;/p&gt;
&lt;p&gt;The basic design was simple: use a simple &lt;em&gt;search-find-next&lt;/em&gt; loop on the
lower-case equivalent of the Text element to find every potential candidate
for examination.  For each candidate, ensure that the candidate is isolated
on both sides by whitespace before checking to see if the capitalization
of the candidate matches the requirements for the specified proper name.
Without the isolation by whitespace, a proper name of &lt;code&gt;AD&lt;/code&gt; would trigger
on &lt;code&gt;readme.md&lt;/code&gt; for the &lt;code&gt;re&lt;/code&gt; before the name was found and the &lt;code&gt;me.md&lt;/code&gt; after
the name was found.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_5"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Working through all the input permutations that I needed to test against
this rule, I ended up with thirty-one different scenario tests.  While nine
of them deal with Paragraph elements, the rest of the tests deal with each
of the other elements that can conceivably contain text that needs to be
scanned.  Of those remaining tests, fifteen of those scenario tests dealt
with the various types of links and how they can be put together.  It was
quite the list of tests that I would have to complete.&lt;/p&gt;
&lt;p&gt;Starting with the simple cases, the first iteration of the &lt;code&gt;next_token&lt;/code&gt;
function was very simple and just focused on Text elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__proper_name_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_in_code_block&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__check_in_code_blocks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__search_for_matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_in_code_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_in_code_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, the applicable text was passed to the &lt;code&gt;__search_for_matches&lt;/code&gt; function.
That function performed the &lt;em&gt;search-find-next&lt;/em&gt; loop through the text for each
of the proper names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__search_for_matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;string_to_check&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;string_to_check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_all_from_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_check&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;string_to_check_lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string_to_check&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__proper_name_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;next_name_lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;search_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string_to_check_lower&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_name_lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__check_for_proper_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;string_to_check&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;found_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;next_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;search_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string_to_check_lower&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_name_lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each candidate found, the &lt;code&gt;__check_for_proper_match&lt;/code&gt; function was called
to see if the candidate was properly isolated before checking the capitalization
against the required capitalization:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__check_for_proper_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;original_source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;found_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required_capitalization&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;original_found_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;original_source&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required_capitalization&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;after_found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required_capitalization&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;is_character_before_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;is_character_before_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;original_source&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isalnum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;is_character_after_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;after_found_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_source&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;is_character_after_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;original_source&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;after_found_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isalnum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_character_after_match&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_character_before_match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_found_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required_capitalization&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;original_found_text&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;required_capitalization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;"Expected: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;required_capitalization&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"; Actual: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;original_found_text&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After checking the simple scenario tests involving Text elements and making
sure they were all working, I knew it was time to move on to the other
elements.  But how hard were they going to be to implement?  That I did not
know.&lt;/p&gt;
&lt;h3 id="next-iteration-other-elements"&gt;Next Iteration: Other Elements&lt;a class="headerlink" href="#next-iteration-other-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting with the Code Span element, I was quickly able to add the required
code to search for any matches.  The only issue was that the line/column number
for any failures pointed to the start of the token, not where the failure occurred.
To adjust for those failures, I added the &lt;code&gt;same_line_offset&lt;/code&gt; parameter to the
&lt;code&gt;__search_for_matches&lt;/code&gt;.  While I knew it would not handle any cases where the
source data has newlines in it, it was a quick way to adjust the line/column
number in the simple cases without newlines.  For the Code Span element,
I set this parameter to the parts of the element that occur in Markdown
before the text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;same_line_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_start_backticks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
        &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_whitespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__search_for_matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;same_line_offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the Code Span element was working, the other elements were somewhat easy
to add.  For the Link element, the text in the Link Label is already represented
with a Text element, so I just had to worry about other text that was exposed.
After checking out all four types of links, only the Inline link type has
a component that needs to be checked, the &lt;code&gt;active_link_title&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;That required a bit of work to set up, as there are plenty of scenarios where
an inline Link element has newlines in it.  Taking a slightly different approach,
I created the &lt;code&gt;__adjust_for_newlines_and_search&lt;/code&gt; function to compute any offsets
for newlines before performing the search.  That function heavily relies on
the &lt;code&gt;__adjust_for_newlines&lt;/code&gt; function to accurately compute the proper offsets
for the line/column number to indicate where the failure occurred.  But having
created those functions, I was able to quickly calculate the variables to represent
the text that occurs in the Link element before the Link Title field.  Not without
some testing errors that I had to resolve, but the changes were quick to
implement and test.&lt;/p&gt;
&lt;p&gt;Once the Inline Link element was up and working, adding the cases for both
the Inline Image element and the Link Reference Definition element were quickly
completed.  In both cases, it was the same recipe as with Inline Link elements:
perform the calculations of what the Markdown element looks like before the
specified element and pass it in to the &lt;code&gt;__adjust_for_newlines_and_search&lt;/code&gt; function.&lt;/p&gt;
&lt;h3 id="wrap-up"&gt;Wrap Up&lt;a class="headerlink" href="#wrap-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This rule was not difficult because of any of the individual tasks required
to create this rule.  This rule was difficult to implement because of its
breadth and the adjustments required for the line/column number.  Maybe it
was because of the late hours that I used to work on this rule, but the
line/column adjustments in the &lt;code&gt;__search_for_matches&lt;/code&gt; always seemed to have
a glitch that i needed to work out.&lt;/p&gt;
&lt;p&gt;It was only after I sat down with my trusty paper and pen, sketching out every
scenario that I was able to clearly see the complexities.  Getting the proper
line number was easy.  But because the reporting code uses a column number of
&lt;code&gt;3&lt;/code&gt; to mean &lt;code&gt;add 3 to the column&lt;/code&gt; and &lt;code&gt;-3&lt;/code&gt; to mean &lt;code&gt;absolute column 3&lt;/code&gt;, I had
to do some coding gymnastics.  Not sure if I am going to try and clear that
up in the future, but it is something to consider.&lt;/p&gt;
&lt;h2 id="rule-md034-base-url-used"&gt;Rule Md034 - Base Url Used&lt;a class="headerlink" href="#rule-md034-base-url-used" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After the ease of many of the previous rules and the difficulty
of the last rule, it was nice to get a rule that seemed like it
had a medium difficulty. But honestly speaking, from the description that
I read of this rule, I had more questions than answers.&lt;/p&gt;
&lt;p&gt;There was one interesting question that I needed to answer, as the documentation added to
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/rules/rule_md034.md"&gt;Rule Md034&lt;/a&gt;
notes: what is an URL?  Following the proper definition of URLs, they
can be anything from &lt;code&gt;https://google.com&lt;/code&gt; to &lt;code&gt;#fragment&lt;/code&gt; and everything
in between.  It all depends on the given context as to which definition of
an URL is most applicable to that context.  Even once
that decision is made, trying to come up with anything resembling a complete
algorithm for detecting all valid URLs can be troublesome at best.  I
needed to narrow down the URL context that I was looking for if I had any hope
of being able to create a decent algorithm to find those URLs.
Otherwise, I would need to deal with a nasty Regular Expression
&lt;a href="https://github.com/jhermsmeier/uri.regex/blob/master/pattern.js"&gt;like this one&lt;/a&gt;.
I wanted to avoid that at all costs.&lt;/p&gt;
&lt;p&gt;I experimented with Visual Code and the
&lt;a href="https://github.com/markdownlint/markdownlint"&gt;Markdown Lint&lt;/a&gt; plugin for
about an hour, trying to get more information on what it considered valid
URLs to be.  My best guess is that the original rule is very tightly focused
on two specific types of URLs: base URLs for HTTP and FTP.  Every other
type of URL that I tried to get the rule to recognize failed. However, almost
every &lt;code&gt;http&lt;/code&gt; URL that I tried worked, even some of the wacky &lt;code&gt;http&lt;/code&gt; URLs.
Either way, I needed a good place to start from and I felt that the information
helped me find that starting point. So off I went into my design phase.&lt;/p&gt;
&lt;h3 id="design_3"&gt;Design&lt;a class="headerlink" href="#design_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Since I found the original rule too difficult to read clearly, I
decided to approach the design for this rule from a more foundational
viewpoint.  I would take cues from the original rule, but I
needed to be able to design a rule that had clear goals and
triggering conditions that I could easily defend in the documentation.&lt;/p&gt;
&lt;p&gt;Starting at the beginning, the first part of this design
was easy: eliminate this rule firing
within a Code Block element, an HTML Block element, or a Link element.
Within those elements, it did not make sense to look for Bare URLs,
as text within those types of elements intrinsically meant something
different than a normal section of text.  It is those normal blocks
of text that I needed the design to focus on.&lt;/p&gt;
&lt;p&gt;Once I had a method to eliminate scanning those types of Text elements,
I had to design a way to properly scan text for a series of characters
that represented an URL.  After having done
that research noted in the previous section, I had &lt;em&gt;an&lt;/em&gt; answer. I
was not sure it was the right one, but I had the confidence that it
was a decent answer to start with.  For this rule, URLs were only going
to be HTTP and FTP URLs specifying a path to a resource.
Basically, the rule will recognize what most people using a browser
consider URLs, but only the ones starting with &lt;code&gt;http:&lt;/code&gt;, &lt;code&gt;https:&lt;/code&gt;, &lt;code&gt;ftp:&lt;/code&gt;,
or &lt;code&gt;ftps:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I felt that the best option to find these URLs was a simple
&lt;em&gt;search-find-next&lt;/em&gt; loop.  While I would have liked to avoid having to repeat
the loop for every valid base URL, I did not see any way to avoid it. Small
optimizations like looking for &lt;code&gt;http&lt;/code&gt; and then looking for either &lt;code&gt;:&lt;/code&gt; or
&lt;code&gt;s:&lt;/code&gt; had their merits, but I did not believe they would increase the
performance of the algorithm at all.  So, if any one of those bases matched,
I would pass on that information to another function that would further
evaluate the URL.  Primarily, it would look for the sequence &lt;code&gt;//&lt;/code&gt; after
the base URL prefix and proceed from there.&lt;/p&gt;
&lt;h4 id="a-good-course-change"&gt;A Good Course Change&lt;a class="headerlink" href="#a-good-course-change" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is the point after which the “course” of this rule changed more
than any other part of the design. Instead of the previous rule’s
complicated sets of boundary conditions, I decided to create a simpler
set of boundary conditions.  The first condition is that any existing
character before the base URL’s prefix must be a whitespace character. The
second is that the base URL’s prefix must be followed by the sequence &lt;code&gt;//&lt;/code&gt;
and at least one non-whitespace character.&lt;/p&gt;
&lt;p&gt;I did this for a few reasons, but the most basic reason was for
simplicity.  Explaining the above triggering conditions for this rule
was simple and required two sentences of documentation. By keeping
the triggering conditions simple, I will hopefully also make the
implementation of detecting those triggering conditions simple.
A win for the rule and a win for the user.  I can live with that.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_6"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Coming up with the scenarios required to test this rule was like
peeling back the layers on an onion.
I started with the scenario of a valid URL within
a Paragraph’s Text element and worked outward from there.  I just
asked myself how the URL could not be detected properly and worked
through each scenario in turn.  When I exhausted those variations,
I made sure that the URLs would only be detected in normal Text elements
by creating scenarios with a valid URL inside of non-normal elements,
such as Code Blocks.  When I was done, I had fourteen scenarios ready
to go.&lt;/p&gt;
&lt;p&gt;Moving on to the implementation, it proceeded rather quickly.  After
eliminating any Text elements within Code Block elements, Html Block
elements or Link elements, a simple &lt;em&gt;search-find-next&lt;/em&gt; loop was added
to look for multiple occurrences of a base URL prefix within the
provided text.  Once an occurrence was found, it was handed off to
the unwritten &lt;code&gt;__evaluate_possible_url&lt;/code&gt; function for evaluation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_code_block&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_html_block&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_link&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url_prefix&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;RuleMd034&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__valid_uri_types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__evaluate_possible_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_code_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_code_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following the design, the &lt;code&gt;__evaluate_possible_url&lt;/code&gt; function was easy to code.  If there is
no character preceding the location of base URL prefix or if it
is a whitespace character, then the algorithm continues.  From there,
it grabs the next three characters after the found base URL prefix,
verifying that the next two characters are &lt;code&gt;//&lt;/code&gt;.  Given that verification,
the only thing left was to make sure that the character after the
sequence &lt;code&gt;//&lt;/code&gt; is a non-whitespace character, which was added with ease.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__evaluate_possible_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;url_start_sequence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_start_sequence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;url_start_sequence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"//"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;url_start_sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adjust_for_newlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In verifying that all scenario tests were passing for this rule, I quickly
noticed that while the rule portion was triggering the rules properly, it
triggered them with the wrong line/column pair.  Having written the
&lt;code&gt;__adjust_for_newlines&lt;/code&gt; function as part of the work for Rule Md044, it
seemed wasteful to have to write that rule again.  As such, I refactored
that function into the &lt;code&gt;parser_helper.py&lt;/code&gt; module to make it accessible
to both rules.&lt;/p&gt;
&lt;p&gt;And as it was Sunday morning when I finished this rule, I hoped I had enough
time to work on another rule before starting to write this article.  As such,
I started with Rule Md028.&lt;/p&gt;
&lt;h2 id="rule-md028-blanks-in-block-quotes"&gt;Rule Md028 - Blanks In Block Quotes&lt;a class="headerlink" href="#rule-md028-blanks-in-block-quotes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No matter how many times I am asked the question about what the most important
construct or algorithm that I have learned is, the answer is always the same:
the finite state machine.  While there are a lot of second places finishes
for that title, I have just found that my learning and my experience with
finite state machines have paid for itself many times over.  Even though the
heart of a finite state machine is the simple concept of tracking transitions,
it is a useful tool in my toolbox.  And sometimes the most useful tools are
the simple tools applied properly.&lt;/p&gt;
&lt;p&gt;It was with a bit of a smile on my face that I looked at this rule and
determine right from the start that it was going to need a finite state machine.&lt;/p&gt;
&lt;h3 id="design_4"&gt;Design&lt;a class="headerlink" href="#design_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Perhaps it is the many parsers and other systems that I have written over
the years, but I instinctively knew that this problem would require a finite
state machine.  To properly detect this scenario, the rule needed to first
look for an end Block Quote token, then one or more Blank Line tokens, and
finally a start Block Quote token.  If at any point it does not find the
type of token it needs to move on, the rule needs to reset its state to look
for the end Block Quote token again.  To me, those all looked like simple
state transitions that needed something to guide them.  A finite state machine
it was.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_7"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Knowing that this rule would require a finite state machine made the task
of creating the scenario tests easier.  Like my approach with
the last rule, I started with the simple case and worked outwards, following
the transitions in the state machine.  When
I was done, I had eleven scenario tests, including a couple of tests that
included nesting with Block Quotes and Block Quote and Block Quotes and
Lists.&lt;/p&gt;
&lt;p&gt;As with all finite state machines, the implementation was all about
transitions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;__look_for_end_of_block_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;__look_for_blank_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;__look_for_start_of_block_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_end_of_block_quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_blank_lines&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__found_blank_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_blank_lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_start_of_block_quote&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__found_blank_lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_end_of_block_quote&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_start_of_block_quote&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_blank_lines&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__found_blank_lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_blank_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_end_of_block_quote&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__found_blank_lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_end_of_block_quote&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This implementation followed my design to the letter, with some tweaks
added in later to address nested Block Quotes: look for the end of a
Block Quote, then one or more Blank Lines, and then the start of another
Block Quote.  If anything fails, reset to looking for the end of a Block
Quote.&lt;/p&gt;
&lt;p&gt;The tweak that I added to my design was to allow for multiple blanks lines
to be detected and stored in the list &lt;code&gt;__found_blank_lines&lt;/code&gt;.  Then,
if a Block Quote start is found after those Blank Lines, the reporting
of the rule failure can be reported using the tokens for the Blank Lines
instead of the start Block Quote token.  Nothing too big, but a good
tweak to ensure the reporting was clear as to where the failure was.&lt;/p&gt;
&lt;p&gt;Nice and simple.  Did I mention I love finite state machines?&lt;/p&gt;
&lt;h3 id="an-interesting-side-note"&gt;An Interesting Side Note&lt;a class="headerlink" href="#an-interesting-side-note" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;During the implementation process, an interesting thing happened: I
found a parser bug with nesting Lists and Block Quotes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;

  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thinking that the rule not firing was because of something in the rule,
I added debug information to figure things out.  For whatever reason,
when that Markdown document is parsed, it ends up creating a Block
Quote element that is empty, followed by a Paragraph element.  I added
that one to the Issues List and wrapped up things for the week.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Wow! This article went on quite a bit longer than I thought it would.
Believe it or not, when I started writing this article, I was worried
that I would not have enough content for a proper article.&lt;/p&gt;
&lt;p&gt;But the reality is that in the last week, I was able to knock 9 rules
off the To-Do list.  That brings the totals from 10 rules completed
to 19 rules completed and from 21 rules left to implement down to 10
rules left to implement.  That honestly is a lot more rules than I
expected out of this last week.  It was a good surprise though, and it
just feels good to be making more progress!&lt;/p&gt;
&lt;p&gt;Nothing more than that this week… just trying to chew through the
list of rules to implement as fast and efficiently as possible.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I must be honest dear readers… the fact that I passed on Rule Md027
last week is starting to get to me.  I think I will try and work on that
this week.  Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:inline"&gt;
&lt;p&gt;For the other three types of links, a Link Reference Definition element must be used.  As a Link Referenced Definition element must contain a URI, and only an Inline Link element does not require one, only the Inline Link element was required for testing. &lt;a class="footnote-backref" href="#fnref:inline" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Making Progress On New Rules</title><link href="https://jackdewinter.github.io/2021/08/02/markdown-linter-making-progress-on-new-rules/" rel="alternate"></link><published>2021-08-02T00:00:00-07:00</published><updated>2021-08-02T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-08-02:/2021/08/02/markdown-linter-making-progress-on-new-rules/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/07/26/markdown-linter-getting-back-to-new-rules/"&gt;last article&lt;/a&gt;, I talked
about starting to tackle the long list of rules that are not yet implemented.
I this article, I talk about the process I am making and my efforts to streamline
the process.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started working on this task, I had 31 …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/07/26/markdown-linter-getting-back-to-new-rules/"&gt;last article&lt;/a&gt;, I talked
about starting to tackle the long list of rules that are not yet implemented.
I this article, I talk about the process I am making and my efforts to streamline
the process.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started working on this task, I had 31 rules to implement.  By the start
of this week,  I was down to 28 rules.  As my work week was
filled with deep-thinking and experimentation, I had a feeling that most of my
project work would end up being done on the weekend.  And I was correct.&lt;/p&gt;
&lt;p&gt;With two days to make some progress on the project, it was hard to find good,
solid blocks of time in between my other plans for the weekend.  But I did find
some of that time, and I tried to use that time to my benefit.  My goal was simple:
if possible, get more than three rules designed, implemented, and tested before
I started writing this article on Sunday.  To do that, I was going to have to
change how I was approaching the rules, and I hoped my plans would work out.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/08b07cbb459401a3dbf6d346a3576f4b45f1b075"&gt;27 Jul 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/f7bcbed5253182bc5483c13418a2ebb743d5ce14"&gt;01 Aug 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="working-fast-and-efficiently"&gt;Working Fast and Efficiently&lt;a class="headerlink" href="#working-fast-and-efficiently" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With 28 rules left to implement, I wanted to try and get into the habit of making decisions
on how to be more efficient.  As this is week 2 of working on these rules, if I can get more
efficient with how I design and implement these rules, hopefully I can complete the
entire set within seven weeks or less.&lt;/p&gt;
&lt;p&gt;But the only way that I was going to do that if with some new personal rules.  The first
rule is that, while it is usually okay for me to experiment, now is not the time for that.
If I cannot come up with a clean design within 30 minutes, I need to move on to the next rule.
This should help me go through the existing list of rules and get the easier rules taken
care of.  On the next place through the list, I can extend that time if needed.  But for
now, I need to get the easy stuff done first.&lt;/p&gt;
&lt;p&gt;The second personal rule is that if a rule takes more than two hours to get into a
semi-finished state, I need to save the work and move on.  If I am having issues with a
design after two hours, I got something wrong and I need to rethink that design.  But if
I am doing that after having designed the rule, it means I did not think
the design through and need to go back and redesign it.  And that takes time.&lt;/p&gt;
&lt;p&gt;While neither of these rules are permanent, I am hoping that by starting this block of
work with these rules, I can quickly move through the easier rules.  Will they help?
Only one way to find out!&lt;/p&gt;
&lt;h2 id="rule-md010-hard-tab-characters"&gt;Rule Md010 - Hard Tab Characters&lt;a class="headerlink" href="#rule-md010-hard-tab-characters" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For years I have avoided using tab characters in anything except word processor
documents for one good reason: they are a holy war waiting to happen.  For those
readers not familiar with the term &lt;code&gt;holy war&lt;/code&gt;, let me explain.  In development
terms, a holy war is a discussion that is never ending with no real, concrete
answer.  Some developers will swear by &lt;code&gt;always 4 characters&lt;/code&gt;, others by
&lt;code&gt;always 2 characters&lt;/code&gt; and others by &lt;code&gt;always a 4 character tabstop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As I mentioned in the last paragraph, there is no real answer to the question.
To avoid starting that discussion, most of the coding and documentation
guidelines that I know of specify explicit rules on how an entered tab character
should be handled, including the
&lt;a href="https://github.github.com/gfm"&gt;GFM specification&lt;/a&gt;.
But while the specification lists the exact behavior a compliant Markdown
parser should use, that specification does not change how the author’s
editor may decide how to interpret that tab character.  In the end, it is
a lot easier to have the editor translate any tab character into the
author’s desired number of space characters, side-stepping the entire issue.&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting with that information, I was quick to design a simple function that
would simply scan for any tab character on the line and trigger a rule if
it found any.  The problem?  The original rule has a configuration
setting that allows tab characters to be included in Code Block elements without
triggering the rule.&lt;/p&gt;
&lt;p&gt;Using up most of my allowed design time, I was at an impasse.  While the
PyMarkdown parser has decent support for tab characters, it accomplishes
part of that support by replacing tab characters with a four space character tabstop.&lt;sup id="fnref:tabstop"&gt;&lt;a class="footnote-ref" href="#fn:tabstop"&gt;1&lt;/a&gt;&lt;/sup&gt;
There is already a section in the Issues List titled
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/issues.md#bugs---tabs"&gt;Bugs - Tabs&lt;/a&gt;
to really dig into the proper support for tab characters, but right now there
is a stopgap measure present.  With the stopgap replacement
of tab characters, there are no traces of the tab characters in the tokens,
leaving no way to detect them.  No matter what else I could try, those tab
characters will remain unreachable until I address the issues in that section.&lt;/p&gt;
&lt;p&gt;So, with that research done, I course corrected back to the original, simple
design of scanning line-by-line.  I will revisit this later, but for now,
simple was the only available choice.&lt;/p&gt;
&lt;h3 id="implementation-and-testing"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After the course correction in the design phase, everything went fine with the
implementation and testing of this rule.  It was rather simple to come up with
the test cases, seeing as the special &lt;code&gt;code_block&lt;/code&gt; configuration was not in
play.  As such, the detection loop was simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;next_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;next_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Column: {next_index + 1}"&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_line_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;next_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rule-md012-detect-extra-blank-lines"&gt;Rule Md012 - Detect Extra Blank Lines&lt;a class="headerlink" href="#rule-md012-detect-extra-blank-lines" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Blank Line elements are interesting elements in Markdown.  Grouped with the Link Reference
Definition element, it is in a group of elements that do not show up in a rendered
HTML document.  For every other element, there is some physical representation
in the generated document.  But not those two.&lt;/p&gt;
&lt;p&gt;In the case of Blank Line elements, they primarily serve to delineate one element from
another element.  Need a new paragraph?  Use a blank line before the next paragraph.
Want to create a paragraph after specifying an SetExt Heading element?  Use a blank line.
Want to stop a List element before the next element starts?  Use a blank line.
In every case, they only provide a method to terminate the element that precedes them.&lt;/p&gt;
&lt;p&gt;But other than that small task, there is nothing that they do.  And multiple blank
lines do not make any sense either.  A second blank line would terminate the element
that the first blank line terminated?  It just does not make sense.  Therefore,
this rule is in place to limit the documents to only one Blank Line element at a time.&lt;/p&gt;
&lt;h3 id="design_1"&gt;Design&lt;a class="headerlink" href="#design_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I originally was thinking that the design had to be complicated, but as I worked
through the cases, I realized that the design could be a lot simpler than I thought.
At first, I thought I would have to include code to prevent this rule from firing
within Code Block elements and HTML elements.  But after checking things out, I
remembered that the text within those elements use the &lt;code&gt;\n&lt;/code&gt; character instead of
the Blank Line element.  With those three elements excluded, it was enough to count
the number of consecutive Blank Line tokens, checking them against the configured
limit.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_1"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nothing interesting to report here.  With a solid design in hand, it was easy to
create the test functions and their test data.  From there, as the detection design
was simple, the implementation was also simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_blank_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__blank_line_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__check_for_excess_blank_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__blank_line_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rule-md014-showing-bash-style-output"&gt;Rule Md014 - Showing Bash Style Output&lt;a class="headerlink" href="#rule-md014-showing-bash-style-output" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When writing articles that include Bash scripts, most authors start with
script blocks that look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;jacob&lt;/span&gt;&lt;span class="nv"&gt;@system&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;jacob&lt;/span&gt;&lt;span class="nv"&gt;@system&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But with the user’s account name, the system name, and the directory name
all exposed, most authors quickly trim that down to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="o"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From experience, this format is only useful if the author interweaves
shell input and shell output together in the example, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;
&lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="n"&gt;file2&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="o"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That text format is efficient as it makes it clear which lines are shell
input commands and which lines are shell output text.&lt;/p&gt;
&lt;p&gt;But if that interwoven format is not desired, it is simpler to trim the
initial script down further to only reflect the shell input:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;
&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="o"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With those leading &lt;code&gt;$&lt;/code&gt; characters removed, these lines can then be copied by the
reader into the clipboard and executed in their own Bash window.  Even though
this example is specific to the &lt;code&gt;/my/dir&lt;/code&gt; directory, it can still be copied-and-pasted,
with the results being somewhat predictable.&lt;/p&gt;
&lt;h3 id="design_2"&gt;Design&lt;a class="headerlink" href="#design_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The obvious starting point for this rule was detecting whether the
rule was looking at a token within a Code Block element.  Once that context is
established, it then becomes a simple matter of looking at each line in the
following Text token.  For each line, the rule looks for at least one line
that does not begin with the &lt;code&gt;$&lt;/code&gt; character.&lt;/p&gt;
&lt;p&gt;This simple design was made possible by a good design decision that I made
regarding Code Block elements.  To prevent accidental parsing of their content
as anything but a code block, I ensured that the encompassed Text token has an
exact recording of what is in that Code Block element.  While that decision
was made for another reason, it benefited me in this design.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_2"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a solid design in place, the implementation for this rule was easy.
I just implemented each step of the design, one step at a time.  The
only addition to the design occurred when I questioned whether leading
whitespace before the dollar sign character (&lt;code&gt;$&lt;/code&gt;) would affect the
triggering of the rule.  Double checking with the original rule, its
support of leading whitespace aligned with my thoughts, and the
design was adapted.  The rule now checked for a leading &lt;code&gt;$&lt;/code&gt; character
after any leading whitespace was removed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_code_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_code_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_code_block&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;are_all_preceded_with_dollar_sign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="n"&gt;split_token_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;split_token_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;next_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"$"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;are_all_preceded_with_dollar_sign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;are_all_preceded_with_dollar_sign&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rule-md033-no-html-in-markdown"&gt;Rule Md033 - No HTML in Markdown&lt;a class="headerlink" href="#rule-md033-no-html-in-markdown" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I remember the first time reading about this rule and wondered how it
would be properly used.  Now, it seems obvious: because there
was a need for it!  More specifically, this rule breaks down to two
main reasons for its existence: generation and security.&lt;/p&gt;
&lt;p&gt;From the generation point of view, most of the Markdown parsers that
I have encountered translate the Markdown elements into HTML output.
But I have heard of parsers that translate the elements into intermediate
forms, such as the token format that the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project uses.
In such a case, embedding pure HTML into that document would most likely
result in the output not looking like the author intended.  For any
authors rendering the Markdown using one of those parsers, that is an
issue.&lt;/p&gt;
&lt;p&gt;The other big reason is security.  If an author can place their
own HTML into a generated document, it is possible that they can make
that document do things it was not supposed to do.  For example, say
you want to allow someone to enter comments at a public kiosk.  For
whatever reason, there are requirements to let the kiosk users enter
their comments in Markdown or Plaintext.  If they can enter HTML as
part of the Markdown content, they can cause all manner of problems.
By removing the
ability to execute any HTML other than Markdown generated HTML, that
security hole is closed.&lt;/p&gt;
&lt;h3 id="design_3"&gt;Design&lt;a class="headerlink" href="#design_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the experience of designing the other rules behind me, creating the design
for this rule was not difficult.  There are two main ways to get HTML
into a document: an HTML Block element and an inline Raw HTML element.
The Raw HTML element is easy in that its content is self-contained.
The HTML Block element is a bit more difficult in that the rule needs
to look for a Text element inside of an HTML Block element.&lt;/p&gt;
&lt;p&gt;After detecting the HTML text, determining the “name” of the tag is
important for being able to allow only certain tags in a valid document.
In the original rule, this was limited to any opening HTML tag that
started with a alphabetic character.  The first thing I did was to ensure the
design for the HTML Block element allows for both an opening HTML tag and a closing
HTML tag.  With that out of the way, ans including a special case for
the &lt;code&gt;![CDATA[&lt;/code&gt; HTML tag, collecting the name of the tag became
collecting the tag until one of the five terminating characters is
encountered.&lt;/p&gt;
&lt;p&gt;With all the scenarios covered, I moved on to the testing and implementation.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_3"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once I had all the test scenarios identified and their test functions set
up, the actual code was easy to implement.  Starting with the Raw HTML
element, getting the &lt;code&gt;__look_for_html_start&lt;/code&gt; function set up was
rapidly accomplished.  From there, I implemented the first pass with
the HTML Block element, including better support for tags with
non-alphabetic start characters.  Finally, after making sure everything
else was working properly, I made the small change to allow closing
HTML tags in addition to opening HTML tags.  It was an iterative process,
but one that flowed smoothly along with the design.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__look_for_html_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag_text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"![CDATA["&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;tag_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"![CDATA["&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_until_one_of_characters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;tag_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" &lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s2"&gt;/&amp;gt;"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Element: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tag_text&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag_text&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__allowed_elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_raw_html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_html_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_html_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_next_html_block_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_next_html_block_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;modified_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_html_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;modified_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_next_html_block_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While it is more code than a fair share of the other rules, it was easy to
implement for a few reasons.  The first was the design phase.  While it
is true that I used my design phase test cases for the test scenarios,
the design was good enough to handle each of those test cases.  Therefore, the
second reason was those design test cases.  Before I started coding, I knew what
I was up against, and I was confident that I had identified all the test cases.  Finally,
I did not code the entire block of code at once.  I started with the easier parts of the
design and layered upon what was already done and tested until I was done.&lt;/p&gt;
&lt;p&gt;It was at this point that I was sure that my rules were paying off.  As far as
I could tell, they were helping me to focus.  The next rule would test that though.&lt;/p&gt;
&lt;h2 id="rule-md027-false-start"&gt;Rule Md027 - False Start&lt;a class="headerlink" href="#rule-md027-false-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes it is hard to keep to a self-imposed rule, and this was one of those times.
I am still not sure why I had a problem with this design, but I did.  I even gave myself
an extra five minutes, but even with that extra time, my design was nowhere near completed.&lt;/p&gt;
&lt;p&gt;Looking back at that rule and my notes on that rule, I am not sure what happened.
I have a lot of things crossed out on the page where I was designing.  Taking another
look them, the things that I had crossed out as being wrong were actually correct.  Regardless,
I am going to say something very reasonable: Shit happens!&lt;/p&gt;
&lt;p&gt;We all have bad periods throughout the day, and I just happened to hit one when I
tried to work on this rule.  It happens.  What was more important was what I did when
I encountered that situation: I realized it happened.  I was a bit upset with myself,
but I did the mental equivalent of dusting myself off, worked on one of my Saturday
home projects that I needed to deal with, and cooled down.  More importantly, I gave
myself some space from the project, and time to depressurize.&lt;/p&gt;
&lt;p&gt;While the work that I did on the actual task is rather fuzzy, I do remember clearly
that I got it out of my system, and quickly.  I knew I would get back to it within
a week or two, and I would hopefully have a better experience with it at that point.
And for me, that was a good thing!&lt;/p&gt;
&lt;h2 id="rule-md035-consistent-horizontal-rules"&gt;Rule Md035 - Consistent Horizontal Rules&lt;a class="headerlink" href="#rule-md035-consistent-horizontal-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As soon as I came to this rule, I started to have flashbacks to
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/rules/rule_md004.md"&gt;Rule Md004&lt;/a&gt;.
That was not a particularly nasty rule to implement or test, but I remember it as being
very finicky.  While I thought it was going to be trivial, it ended up being a fair amount
of work to get everything right.&lt;/p&gt;
&lt;p&gt;But with everything being fair, I must admit that Rule Md004 was one of the reasons
that I decided to add my two new rules for this week.  That rule was the first one that
I started working on as I was recovering, and I did not have a lot of fun implementing it.
I do not remember much about it that was
positive, but I do remember having to restart the design two or three times to get it
right.  To be blunt, I do not know if that was because I rushed things and did not
do good design upfront or because I was still sick and did poor design.  At this stage,
it does not matter.  I want to learn from my mistakes, hence the new rules.&lt;/p&gt;
&lt;p&gt;And this should be an easy one.  All Thematic Break elements must use a consistent
sequence.  Hoping that I did not just jinx myself, I started working on it.&lt;/p&gt;
&lt;h3 id="design_4"&gt;Design&lt;a class="headerlink" href="#design_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This design was simple from the start.  If the configuration value is set
to &lt;code&gt;consistent&lt;/code&gt;, then do not set a sequence to match, otherwise the configuration
value is the sequence to match.  In the main token function, that means a small
amount of code to deal with setting the style to match if it is not set.  Once
that is out of the way, it is a simple comparison check: if it fails, it triggers
the rule.&lt;/p&gt;
&lt;p&gt;It did seem too simple though…&lt;/p&gt;
&lt;h3 id="implementation-and-testing_4"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But it was not.  This was one of the shortest times that I have spent on designing,
testing, and implementing a rule to date.  All the test scenarios were easy to
come up with and implement.  The algorithm was just as easy, and quickly coded
into a function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Event that a new token is being processed.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_thematic_break&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rest_of_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Expected: {self.__actual_style}, Actual: {token.rest_of_line}"&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rest_of_line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And yes, I was a bit paranoid.  I did some extra checking for possible boundary
conditions, but there were none.  I think the ghosts of implementing that
other rule were just stuck in my head, and I could not stop listening to their
whispers.  But after that extra checking, things were good, and I moved on.&lt;/p&gt;
&lt;h2 id="rule-md037-missed-emphasis-sequences"&gt;Rule Md037 - Missed Emphasis Sequences&lt;a class="headerlink" href="#rule-md037-missed-emphasis-sequences" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For me, the most interesting rules to develop are those rules where I have to
really think about their design and experiment with the existing data.  Even with
my two new rules in place, I knew that I would have to experiment on a couple
of the rules, and this was one of them.
That experimentation was to answer a simple question: what does a “missed”
emphasis look like.  When I started that research, I was worried that I
was going to have to do a lot of parsing for the 4 sequences that can
be used for emphasis.  Instead, my experimentation revealed that I had
already solved that problem.&lt;/p&gt;
&lt;p&gt;Because of the way certain sequences need to be handled
by the PyMarkdown parser, there are a small set of character
sequences that are immediately classified as Special Text: emphasis characters and
link characters.  When any of those sequences are encountered, they
are put into Special Text tokens so that they are more readily
identifiable.  With no need to change them back, I just left each of those
sequences in the Special Text tokens.&lt;/p&gt;
&lt;p&gt;And now, I got to benefit from that with this design.&lt;/p&gt;
&lt;h3 id="design_5"&gt;Design&lt;a class="headerlink" href="#design_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A lot of this design was simple, but I was aware that there were enough
moving parts in it to still make it a tricky design, if not a difficult one.
As mentioned above, one good thing is that the emphasis markers were already
parsed and stored in their own SpecialTextMarkdownToken instances.
Because of this, I did not have to do anything to look for those sequences;
they were already extracted for me.&lt;/p&gt;
&lt;p&gt;From there, if the token was in one of the three &lt;em&gt;normal&lt;/em&gt; text blocks, I needed
to increment a token list to keep track of the fact that any following text was
within an acceptable text block.  Then, if any following tokens were Text
tokens, go into a state where the rule looks for emphasis character sequences
in Special Text tokens.  Once an emphasis sequence is found, look for a matching
emphasis sequence to end the emphasized text.  Along the way, make sure to handle
normal boundary cases, such a unmatched emphasis sequence in a paragraph.&lt;/p&gt;
&lt;p&gt;There were a lot of little “except for” parts in that design, so I used the
remaining time in my thirty minutes to work things out on paper with the
nine different test scenarios that I created Markdown documents for.  I
had to do a couple of small last-minute changes, but that was it.  It
was then on to the implementation phase, and I was a bit nervous about it.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_5"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The design for this rule was tricky, so I made sure to implement
all nine test functions ahead of time.  Knowing that the design had lots of
small, moving parts, I started with the easiest parts
of the design, and moved from there.  There were times that I got
lost and had to reset that individual section of code.  Other than that,
the implementation went smoothly.  The extra time that I spent in the design
phase helped me have confidence that I was taking the right approach.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph_end&lt;/span&gt;
            &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading_end&lt;/span&gt;
            &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading_end&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__emphasis_token_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__emphasis_token_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__emphasis_token_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph_end&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph&lt;/span&gt;
            &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading&lt;/span&gt;
            &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"**"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"_"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"__"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rule-md038-code-span-spacing"&gt;Rule Md038 - Code Span Spacing&lt;a class="headerlink" href="#rule-md038-code-span-spacing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was just after noon on Sunday, and I wanted to get this rule out of the
way before writing this week’s article.  In my head, I quickly came up with
the design for this one, so I was pretty sure that I could get it done
in the time frame I had set for myself.&lt;/p&gt;
&lt;p&gt;The big reason for this rule is correctness.  Except for a matching
pair of single spaces at the start and end of the code block, everything else
in the code block is preserved, as is.  That means that any unbalanced or extra
spaces at the start and end of the code block are preserved as well.  While it is
possible that this is what the author intended, there is one big problem with
this: different parsers handle those spaces differently.&lt;/p&gt;
&lt;p&gt;Doing some quick experimentation with the string &lt;code&gt;this is ` a code` span&lt;/code&gt; on
&lt;a href="https://johnmacfarlane.net/babelmark2/?text=this+is+%60+a+code%60+span%0A"&gt;Babelmark 2&lt;/a&gt;,
there are parsers that preserve that space, remove that space, and even some that do
not consider that text to contain a valid code span.  By simply removing that leading
space, all parsers align on what the correct parsing and HTML output is for that
Markdown example.  And that is what this rule is about: matching the output to
what the author most likely expected the output to be.&lt;/p&gt;
&lt;h3 id="design_6"&gt;Design&lt;a class="headerlink" href="#design_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is nice to end a week’s work with some simple stuff, and this was no exception.
Because the rule centers on the Code Span element, the design was simply to wait
for a Code Span element to appear, and then analyze the text within it.  From there
the rules are simple. Spaces at the start and end of that text are only acceptable
if there is exactly one at each end.  The only exception is that the sequence
&lt;code&gt;`{space}&lt;/code&gt; at the start of the text and &lt;code&gt;{space}`&lt;/code&gt; at the end of the text
are allowed.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_6"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the design being as small as it was, I did not encounter any issues implementing
the rule.  And with eight separate test functions to make sure things are working,
I was able to make quick work of this rule.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_code_span&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;has_trailing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;has_leading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;has_leading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"`"&lt;/span&gt;
            &lt;span class="n"&gt;has_trailing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"`"&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_leading&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;has_trailing&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;has_leading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I got Rule Md038 into its mostly finalized state before starting my writing,
I was shocked.  Hoping to get four rules implemented, I had managed to get seven
done, and that was during the weekend.  This means I am down to just 21 rules of
the initial set to implement.  That was something to be proud of.&lt;/p&gt;
&lt;p&gt;But more importantly, I was finding that my new temporary rules were helping me
focus and stay on track.  That was the real bonus.  When I got in trouble with
previous features, it sometimes took me days to find out how out of focus I
was.  And even if I realized that I was out of focus before then, there was the
feeling of giving up that I had to battle.&lt;/p&gt;
&lt;p&gt;With my two new rules, I gave myself strict boundaries to help me accomplish
my goal.  And it worked.  But, as an added bonus, it helped me deal with the
emotional aspects of having to put the work down and move on to something else.
That was the big win!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yup, more rules, but I do not know which ones and how many I will get done.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:tabstop"&gt;
&lt;p&gt;A tabstop of 4 means that when the tab character is encountered, it moves the current position to the next multiplier of 4. &lt;a class="footnote-backref" href="#fnref:tabstop" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Getting Back To New Rules</title><link href="https://jackdewinter.github.io/2021/07/26/markdown-linter-getting-back-to-new-rules/" rel="alternate"></link><published>2021-07-26T00:00:00-07:00</published><updated>2021-07-26T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-07-26:/2021/07/26/markdown-linter-getting-back-to-new-rules/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/07/12/markdown-linter-full-of-sound-and-fury/"&gt;last article&lt;/a&gt;, I talked
about continuing that work and dealing with the remaining nested block scenario tests.
In this article, I talk about starting to tackle the long list of rules that
are not yet implemented.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It feels like forever since I have done any development …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/07/12/markdown-linter-full-of-sound-and-fury/"&gt;last article&lt;/a&gt;, I talked
about continuing that work and dealing with the remaining nested block scenario tests.
In this article, I talk about starting to tackle the long list of rules that
are not yet implemented.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It feels like forever since I have done any development work on
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;the PyMarkdown project&lt;/a&gt;.
And I must say, it really does feel good to be back.  It is involving a lot
of hard work and a lot of pushing through cobwebs, but it still feels good.
It also helps that during that time, I was able
to document what I was feeling and work some more through those issues.  While
it was not coding, it did help me work through things, and that was good.&lt;/p&gt;
&lt;p&gt;Below, I start off the main part of the article talking about how I decided where
to start working on the project. I will spoil the surprise and say that it is
expanding the number of implemented rules.  Going into more detail below, I quickly
found it obvious that in a linter
that is essentially a rule engine, I need to get more rules implemented to
verify that everything is working properly.  And with 31 rules slated to be
implemented before the version 1.0 release, I had some work to do.  And with me
looking for something fresh to work on, it was the obvious choice!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/90b813dad766885536f796ce3ad324b797c4b283"&gt;17 Jul 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5713bfaa1abb99802823ce44912c05af452e500b"&gt;25 Jul 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="where-to-begin"&gt;Where To Begin?&lt;a class="headerlink" href="#where-to-begin" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned in my articles
&lt;a href="https://jackdewinter.github.io/2020/11/11/autism-stress-and-anxiety/"&gt;Autism, Stress, and Anxiety&lt;/a&gt; and
&lt;a href="https://jackdewinter.github.io/2021/07/19/developers-give-yourself-permission/"&gt;Developers, Give Yourself Permission&lt;/a&gt;,
I been out of it for a couple of weeks, recovering from something I caught
while doing some normal work around my house.  It really knocked my down for
a while, and I am still partially recovering to this day.  Mix into that the
usual stuff I deal with at work and around my house, and I just have not had
a lot of time to focus on
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;the project&lt;/a&gt;
lately.  It took me a bit of time to build up momentum, but I am now at the
point where I feel that I can devote some time to project while in the right mindset.&lt;/p&gt;
&lt;p&gt;But where to begin?  Looking at the various items in the
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues.md"&gt;Issues List&lt;/a&gt;,
I am glad that I have kept them together in a single list.  Why? Because
of the way I analyze things, I find that it gives me a more complete
picture when I can see everything in a simple overview mode.  And
it is there that I started looking.&lt;/p&gt;
&lt;p&gt;Looking at that list, I quickly noticed that there were three main
categories of issues that I need to eventually tackle.  The first section of
the list contains features that need to be added to the project.
Without these features in the project, I do not feel that the project
should ship a full 1.0 release, so they are very important.
The second section contains issues that need to be examined and
dealt with to make sure that things are working properly.  If
I had to sum up this section, these were typically added from tests
that were &lt;em&gt;mostly&lt;/em&gt; passing, with me punting the extra work until a
later time.  Finally, the remaining items are “nice to haves”, issues
that I would like to see completed and dealt with but have a lower
chance of being hit by users.  I hope.&lt;/p&gt;
&lt;p&gt;When I was taking a high-level look at the issues list like that, the big
thing that hit me was that a lot of missing features have to deal
with rules.  Basically, I see developer documentation, one item
for pragmas, one item for front matter as YAML, then the rest are
about rules. That made the decision obvious to me.  I needed to make
some good headway into implementing those missing rules.  And what
better place to start than at the start of the list.  Away I went.&lt;/p&gt;
&lt;h2 id="unordered-list-elements-and-styles"&gt;Unordered List Elements And Styles&lt;a class="headerlink" href="#unordered-list-elements-and-styles" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As soon as I started to look at this rule, I knew I was rusty.  It probably
did not help that I was still recovering, or at least that is what I told myself.
Whether that was true or not, I cannot tell at this point.  I can only say that
it is what I felt at the time that I started working on this rule.&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Due to me taking some time off, coming up with the design for this rule took
me a fair bit longer that I had hoped.  I tried a couple of times to do
something very clever, but those iterations of the design quickly found their
way to my trashcan.  In the end, the easy solution won out.  I guess with
some patterns like that, I have a bit more progress to go on keeping things
simple from the start.&lt;/p&gt;
&lt;p&gt;The easy part of the design that that part of the configuration enabled a static
mode, and the other part enabled a dynamic mode.  For the static mode, the Unordered
List element start character was set for the entire document, no exceptions.  The
two dynamic modes allowed for a different starting character to be specified.
For the default mode, &lt;code&gt;consistent&lt;/code&gt;, once any Unordered List element is started, that
starting character must be used for all Unordered List elements in the document.
A slight variation, &lt;code&gt;sublist&lt;/code&gt;, differs in behavior in that once any Unordered List
element is started at that sublist level, that starting character must be used
for all Unordered List elements at that sublist level.&lt;/p&gt;
&lt;p&gt;To that extent, the design ended up being very simple.  I first needed an array
to capture the starting character to use for that level, and an index to specify
what level of sublists the rule was currently at.  If the entry does not exist,
it needs to be initialed with either the current starting character if in dynamic
mode or the configured character if in static mode.  Once that was all set up,
the rest of the design is simply to compare the current start List Item character
against that array and if they do not match, report an error.&lt;/p&gt;
&lt;h3 id="coding"&gt;Coding&lt;a class="headerlink" href="#coding" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I knew I was still trying to build momentum, so I was probably more cautious than
I needed to be, checking everything three or four times.  In the end, I implemented
the rule almost exactly as I had designed it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;starting_new_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__style_type&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__consistent_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__sublist_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__style_type&lt;/span&gt;

&lt;span class="nd"&gt;@classmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_sequence_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_sequence&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__asterisk_style&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_sequence&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plus_style&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_sequence&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dash_style&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_sequence_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;this_start_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_sequence_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;this_start_style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of using an array to hold the start characters, I decided to use a
dictionary to see if it made the implementation any more redable.&lt;sup id="fnref:readable"&gt;&lt;a class="footnote-ref" href="#fn:readable"&gt;1&lt;/a&gt;&lt;/sup&gt;
In the &lt;code&gt;starting_new_file&lt;/code&gt; function, I made sure that the &lt;code&gt;__actual_style_type&lt;/code&gt;
and &lt;code&gt;__current_list_level&lt;/code&gt; member variables were properly set to ensure that
the static cases were taken care of without any extra code.&lt;/p&gt;
&lt;p&gt;Leaving the heavy lifting to the &lt;code&gt;next_token&lt;/code&gt; function, the biggest part of its
algorithm is to ensure that the correct list level is tracked in the
&lt;code&gt;__current_list_level&lt;/code&gt; member variable.  If the &lt;code&gt;__actual_style_type&lt;/code&gt; dictionary
does not contain an entry for the current list level, one is created.  Then the
current start character for the current List Item element is compared against the
entry for the current list level.  If those two objects do not match, a rule
error is reported.&lt;/p&gt;
&lt;p&gt;The hard part here was not trying to get ahead of myself with test scenarios and
rule implementation.  I started with the simple static scenarios and the &lt;code&gt;consistent&lt;/code&gt;
setting before moving on to the &lt;code&gt;sublist&lt;/code&gt; setting.  Instead of taking the time
to do things in the proper order, I wanted to jump ahead.  For me, that was not
a good idea.  I had to take the time to relearn the patience that I have with
my development process, making sure I practiced using the process until I was
more comfortable with it.&lt;/p&gt;
&lt;h3 id="testing"&gt;Testing&lt;a class="headerlink" href="#testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I have mentioned many times in my articles, I have often found that one of the
most powerful tools in my testing arsenal is documentation.  This was no exception.&lt;/p&gt;
&lt;p&gt;As I was documenting this rule, I walked through the different scenarios in my head,
and I discovered that I had missed something during my design phase.  Basicaly, the
first part of the &lt;code&gt;next_token&lt;/code&gt; function is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_sequence_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is meant to initialize the current list level’s type if it was not
already set.  The problem was it was not doing that.&lt;/p&gt;
&lt;p&gt;Working through my design, I found that I had missed a set of scenarios that
only came into play without sublists.  In other words, I was so focused on
getting sublists correct, I did not pay enough attention to getting the other
scenarios worked out properly.  It was time to fix that!&lt;/p&gt;
&lt;p&gt;Reworking those scenarios, I started to see what the problem was.
In the above code snippet, if the style was not set, the function sets it to
the sequence type of the current token.  For the &lt;code&gt;sublist&lt;/code&gt; setting this worked
fine and for the very first invocation with the &lt;code&gt;consistent&lt;/code&gt; setting this worked
fine, but only in those scenarios.  In every other case, the &lt;code&gt;self.__actual_style_type[0]&lt;/code&gt;
variable held the value to compare to.&lt;/p&gt;
&lt;p&gt;With that knowledge, I adjusted my design, followed through with the scenarios,
and came up with the following code change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__style_type&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__sublist_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__style_type&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__consistent_style&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_sequence_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Paying extra attention to scenarios, I walked through them all individually, taking
my time to make sure I did not miss another scenario.  As far as I can tell, this
time I did not.  But I know that I am going to have that feeling that I missed
something else go through my mind for a while.&lt;/p&gt;
&lt;h2 id="consistent-list-element-indentation"&gt;Consistent List Element Indentation&lt;a class="headerlink" href="#consistent-list-element-indentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The last rule took a lot longer to design and get coded than I had hoped it would.
So my big goal for this rule was to get back into a better cadence of designing
the rule and implementing it.  And as far as I know, the only way to do that is
to start designing, start testing, and start coding.&lt;/p&gt;
&lt;h3 id="design_1"&gt;Design&lt;a class="headerlink" href="#design_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The design for this rule rapidly emerged in my mind without much effort.
The fundamental principle for this rule is that the indentation required for
each level of a list, ordered or unordered, must be the same.  At that
point, I knew I needed to maintain a stack of the current indentation for
that level.  Reading a bit more and experimenting with the original rule,
it became obvious that each top-level list resets the information for itself
and any contained list.  That meant that a new top-level list should clear the
stack of any indentation measurements from a previous list.&lt;/p&gt;
&lt;p&gt;From there, the design got a bit tricky.  If the list is an Unordered List
element, then the indentation must be maintained for this rule not to fire.
That was the easy one.  For an Ordered List element, there are two options:
align to the left or align to the right.  The difference is that if you
align the Ordered Lists to the left, the list looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, if you align that same list to the right, the list looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
 &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was a bit tricky to design around, but after some debugging,
I had it ironed out.  The left aligned list is easy, with the &lt;code&gt;column_number&lt;/code&gt;
member of the token matching up if the list is left aligned.  If the list is
right aligned, then any extracted whitespace plus the list item content should
be the same size.  It took a bit to verify that, but everything seemed good,
so I started working on coding the rule.&lt;/p&gt;
&lt;h3 id="coding_1"&gt;Coding&lt;a class="headerlink" href="#coding_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using Test Driven Development, I started at the beginning with tests such
as &lt;code&gt;test_md005_good_unordered_list_single_level&lt;/code&gt; and
&lt;code&gt;test_md005_bad_unordered_list_single_level&lt;/code&gt;.  From there I was able to
get a simple implementation of the design in place which satisfied those
two tests.  Once those were passing, I added tests that contained two levels
of lists, once again providing both good and bad examples of each.  Taking
the same approach, I implemented the design into code and worked through
some issues.&lt;/p&gt;
&lt;p&gt;The rest of the implementation followed the same pattern without any
issues.  While the implementation was a bit more verbose than the design
itself, I was able to iterate and get it to work cleanly in short order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_end&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;original_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_content&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;original_text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
            &lt;span class="n"&gt;original_text_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;current_prefix_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_content&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;original_text_length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;current_prefix_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because this rule handles both Ordered and Unordered List elements, the first two
parts of the &lt;code&gt;if&lt;/code&gt; statement make sure to manage the stack properly.  As the first
List Item for each list sets the indentation level, there is no need to do any
processing with those start List elements, just recording them.&lt;/p&gt;
&lt;p&gt;From there, the easiest thing to do was to get the easy case, Unordered List elements
out of the way, as it was a trivial check.  Similarly, the left aligned case of
Ordered List elements is just as trivial, so I used the inverted condition (the column
numbers are NOT equal) to check for a right alignment issue.  Following the debugging
and the design, the &lt;code&gt;original_text_length&lt;/code&gt; is computed from the start List element
and the &lt;code&gt;current_prefix_length&lt;/code&gt; is computed from the current List Item element.&lt;/p&gt;
&lt;h3 id="testing_1"&gt;Testing&lt;a class="headerlink" href="#testing_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While there were a couple of typing errors on my part that caused errors, the
design for this rule was correct from the start, with no changes required.  As
such, the big part for this rule was coming up with different data combinations
and comparing their results against the original rule.&lt;/p&gt;
&lt;p&gt;And it was good that I took that step to try and find more scenarios for this,
as I found an issue with the parser.  Specifically, while this Markdown is a valid
list containing a valid sublist with two items, the parser does not believe so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
   &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Verifying this against
&lt;a href="https://johnmacfarlane.net/babelmark2/?text=1.+Item+1%0A++++1.+Item+1a%0A+++100.+Item+1b"&gt;Babelmark2&lt;/a&gt;,
it confirmed my analysis that the sublist should contain two items.  But when I looked
at the parser output, it was wrong.  What happened?
In this case, while the parser is flexible on where the list item does start, it is not
as flexible on where the list item can start.  As a result, starting the second list
item with more indentation than the first item works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but starting it with less indentation does not work.  I needed to figure out what
the issue was.&lt;/p&gt;
&lt;p&gt;But after taking a good hour looking at the debug output, I was not able to see what
the issue was.  At that point, I did not want to stop my momentum, so I added a new
item to the Issues List and started to keep notes on other test scenarios to try
and moved on.&lt;/p&gt;
&lt;h2 id="starting-top-level-unordered-lists-at-the-start-of-the-line"&gt;Starting Top-Level Unordered Lists At The Start Of The Line&lt;a class="headerlink" href="#starting-top-level-unordered-lists-at-the-start-of-the-line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Knowing that I was starting to get back “in the groove”, I decided to tackle another
rule and get it completed before writing this week’s article.  Having completed the
rule for the previous section, I was pretty sure that a similar approach would be
useful in designing a solution.&lt;/p&gt;
&lt;p&gt;Initially disabled, I was not sure why this is the case in
&lt;a href="https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md"&gt;MarkdownLint&lt;/a&gt;,
the description of which I am using as the inspiration for the rule.  Taking a
solid look at both rules
&lt;a href="https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md#md006---consider-starting-bulleted-lists-at-the-beginning-of-the-line"&gt;MD006&lt;/a&gt;
and
&lt;a href="https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md#md007---unordered-list-indentation"&gt;MD007&lt;/a&gt;,
I found that there was overlap, but not a duplication of function.  Taking a closer
look at the description, I then noticed that there were two parameters for this
rule: &lt;code&gt;indent&lt;/code&gt; and &lt;code&gt;start_indented&lt;/code&gt;.  With the default values, &lt;code&gt;start_indented&lt;/code&gt;
would be assigned a value of &lt;code&gt;False&lt;/code&gt;, requiring that the top-level list did not
start with any indentation.&lt;/p&gt;
&lt;p&gt;With that taken care of, everything was good in the world, and I proceeded to
plan out a design for this rule.&lt;/p&gt;
&lt;h3 id="design_2"&gt;Design&lt;a class="headerlink" href="#design_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having just completed the design, coding, and testing for MD005, the design
for this rule was easy.  I needed to keep a stack for most of the same reasons
as with the previous rule.  The only difference was that I only needed to be
concerned with Unordered List elements that were at the top-level.  From a
design point of view, I still needed to know what kind of list the List Item
element was in, so that part of the design remained the same.&lt;/p&gt;
&lt;p&gt;The part that really changed is the trigger condition.  Instead of a complicated
calculation, this calculation was simple.  When processing either a
start element or a List Item element, if it was the first element on the stack
and it was a part of an Unordered List element, further checking was required.
That further checking was also simple: did the token for the element start
in the first column.  If not, the rule was violated.&lt;/p&gt;
&lt;p&gt;I worked this out on paper a couple of times, just to make sure, but it was
sound.  It seemed too simple, so I just double checked that I did not
take any shortcuts that would hurt the algorithm in the end.  After that
extra checking, I proceeded on to the next phase.&lt;/p&gt;
&lt;h3 id="coding_2"&gt;Coding&lt;a class="headerlink" href="#coding_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes in Test Driven Development, I find myself iterating between generating
new tests, coding to meet those new tests, and then generating more tests and
starting over again.  In this case the rule was simple enough that I was able
to derive five different tests before I started coding.  Between that and my
design phase, the coding once again went off without any major issues.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_end&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="why-am-i-stressing-designing-testing-and-coding-together"&gt;Why Am I Stressing Designing, Testing, and Coding Together?&lt;a class="headerlink" href="#why-am-i-stressing-designing-testing-and-coding-together" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be honest, part of my stressing of that process is for myself, and part of it
is for the readers out there.  Having benched myself while I got better, I felt
a bit of an urge to jump into the coding process without doing any design.
Think about it from my point of view.  I have been working on this project for over
a year, I was at a standstill for a week, and I want to make progress.  Who would not
want to go fast?&lt;/p&gt;
&lt;p&gt;But even so, I talked myself out of it and wanted to be very pedantic about following
these steps, even with simple rules like these three rules.  And to be honest,
in these cases, I could have probably skipped the design step and winged it,
as I would consider these three rules to be either medium-level or low-level
difficulty.  From my experience, it is exactly in those scenarios that you want
to keep to the process.  You want to get that muscle memory for the process set,
so that when you get to the harder problems, it is just second nature.&lt;/p&gt;
&lt;p&gt;Now, Test Driven Development may not be everybody’s best way to develop, but it
is for me.  I strongly urge any readers out there to figure out a small number
of development strategies, one if possible, and follow that strategy no matter
what.  For me, I have seen that it just helps me know what is coming next, and
my mind has that muscle memory in place, ready to go when I need it.&lt;/p&gt;
&lt;p&gt;Basically, to each reader, find some process that works, and follow that every
single time if possible.  If your results are anything like mine, you will
see improvements.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Out of 31 rules, I got 3 tested and implemented.  Seeing as I just came back
from dealing with being sick, that is not too bad.  I was hoping to get four
or five rules designed, implemented, and tested, but three is a good start.&lt;/p&gt;
&lt;p&gt;And yes, I had to deal with a bit of… well… is it ego or pride or work ethic?
I wanted to do more work on the project, but my body did not have enough drive or
momentum to get me there.  So, I do not think it is ego.  And I am not feeling hurt
that someone told on me that I did not do enough work.  Therefore, I am guessing that it
is not pride.  So hopefully it is my work ethic.  Who really knows sometimes?&lt;/p&gt;
&lt;p&gt;But I know that I need to gain more momentum.  Unless I want to take nine weeks
to finish all the rules&lt;sup id="fnref:calc"&gt;&lt;a class="footnote-ref" href="#fn:calc"&gt;2&lt;/a&gt;&lt;/sup&gt;, I need to get through the different phases more
efficiently and get more rules done. To do this, hopefully I will notice different
patterns that I can reuse and cut that time down.  With that and a solid work
ethic, I am hoping to cut down an estimated nine-week time frame to complete
all the rules into a block of about five weeks.  To be honest, five weeks would
be nice, anything under seven weeks and I will be happy.  I really want to
make this project shine and get it out there!&lt;/p&gt;
&lt;p&gt;But three rules done on my week back?  That is not too bad… for now.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What else?  More rules.  Though hopefully, after getting some momentum going,
I can get more than three done in the next week.  Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:readable"&gt;
&lt;p&gt;As of the writing of this article, I am still undecided.  At the very least, it is as readable. &lt;a class="footnote-backref" href="#fnref:readable" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:calc"&gt;
&lt;p&gt;31 rules, 3 rules per week = 10.333 week, with one week already completed. &lt;a class="footnote-backref" href="#fnref:calc" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Developers, Give Yourself Permission</title><link href="https://jackdewinter.github.io/2021/07/19/developers-give-yourself-permission/" rel="alternate"></link><published>2021-07-19T00:00:00-07:00</published><updated>2021-07-19T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-07-19:/2021/07/19/developers-give-yourself-permission/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week, as I am recovering from a recent illness, I thought it would
be useful to share some things that I struggle with.  Particularly, I
want to stress how I try and overcome those things with some insight and
a decent amount of hard work.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If I …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week, as I am recovering from a recent illness, I thought it would
be useful to share some things that I struggle with.  Particularly, I
want to stress how I try and overcome those things with some insight and
a decent amount of hard work.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If I had to look over my life, I think I would be hard pressed to find someone
that has not told me something like “I wish I had…” or “Why couldn’t I…”?
Those are words I know I have used myself from time to time.  I mean, let’s face
it.  Most of us have encountered difficult issues in our past, bad issues that
we were forced to deal with.  And while we would all like to just move past those
negative experiences, that movement requires serious work, sometimes spanning
many years.&lt;/p&gt;
&lt;p&gt;Having had my own share of issues over the years, around ten years ago I started
trying to look at those negative experiences in a new light.  As painful as they
were to remember, I
wanted to learn more from those experiences in the hope of avoiding them or
lessening their impact on my future. I found that when I drilled down to how
I was feeling at that time, it always came to a focus on a common root issue.
In most of those cases, I found that a value decision on my part was the problem.
Now, I cannot blow some magic fairy dust on every value decision and make it go
away… no one can.  If someone tells you they can, they are lying.  But I found
that if I give myself permission to see things differently, I can change my
viewpoint on some of those issues and reduce the amount of negativity in my life.&lt;/p&gt;
&lt;p&gt;I feel that this is especially true for Software Developers and others in similar
technical fields.  We spend so much time in our minds, I feel that we need to be
extra diligent in reminding ourselves that we are
also human.  As I have had a lot of time to think recently as I recover,
I thought I would talk about some of the “permissions” that I have had
difficulties giving myself.&lt;/p&gt;
&lt;h2 id="give-yourself-the-permission-to-fail"&gt;Give Yourself The Permission To Fail&lt;a class="headerlink" href="#give-yourself-the-permission-to-fail" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As someone who develops automated tests for a living, this is a must in my life.
It is extremely rare that I do not fail the first time when writing tests.  Most of
the time, I get close to my goal before refining my approach to generating the
desired code to meet that goal.  Sometimes I am way off, and I must rethink things
before trying again.  Depending on how you look at it, most of my professional
life is a failure.&lt;/p&gt;
&lt;p&gt;But that it only one way to look at those tasks.  The other observations
that I can make is that I am persistent, and I do not give up easily.  Another observation
is that I am flexible and creative, as I need to alter my approach to take in the
newly learned information and adjust my approach.  I figured out that it just
depends on whether I focus on the negative aspects or the positive aspects of
those failures.&lt;/p&gt;
&lt;p&gt;From where I sit, technically speaking, both sets of observations are correct.
I fail a lot of the
time when writing code, but I also do not give up in trying to get that code
working properly.  What matters is how I look at that experience.  I can either
choose to be negative and focus on the failure or be positive and focus on the
hard work and the perseverance to overcome those failures.&lt;/p&gt;
&lt;p&gt;It all depends on whether I give myself permission to fail, to fail gracefully,
and to learn from the experience.  And that all depends on my attitude, something
that I can change if I need to.&lt;/p&gt;
&lt;h2 id="give-yourself-the-permission-to-relax"&gt;Give Yourself The Permission To Relax&lt;a class="headerlink" href="#give-yourself-the-permission-to-relax" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When it comes up in conversation, I often tell people that I do not like my phone
with me when I am relaxing.  Some people will look at me like I just told them
I can hold my breath underwater for 30 minutes.  Some people do not believe me
and think I am lying.  Some people ask why.  That is when I talk about what I
require to start to feel relaxed.&lt;/p&gt;
&lt;p&gt;A big part of my prerequisites for being able to relax are no computers or
phones around me.
It is then that I start to do math with them.  There are 24 hours in a day and
7 days a week.  That makes for a total of 168 hours a week.  I work 8 or 9 hours
a day, 5 days a week, for a total of 45 hours a week.&lt;sup id="fnref:note"&gt;&lt;a class="footnote-ref" href="#fn:note"&gt;1&lt;/a&gt;&lt;/sup&gt;  I try and get a
decent 8 hours of sleep every night, so that is another 56 hours to account for.
Add in about 2 hours a day for personal stuff, like eating, showers, and bathroom,
and the grand total is now down to 53 hours.  This means that only 32% of my day
is not accounted for.&lt;/p&gt;
&lt;p&gt;Those 53 hours already have a few technology things occupying that time:
my side projects and the occasional video game.  If I had to guess, I would say
that around 15 to 20 hours a week are occupied with those hobbies.  Unless I
want my life to mostly focus on computers, I need to be able to tell myself to
walk away from the computers, including cell phones, and enjoy the aspects of
my life that are not technology specific.&lt;/p&gt;
&lt;p&gt;When it comes down to it, I have found that if I give myself permission to
relax in various forms, some subset of them is going to work on a given day.
If doing LEGO on a given day does not work, I try doing some reading.  If
reading does not work, I try watching a movie.  If that does not work… and so
on.  While it is sometimes the first thing that works, it is often the third
or fourth, so I just keep on trying.  The constant between all the things
that I try is that they have little, if any, connection to computers in any
form.&lt;/p&gt;
&lt;p&gt;If people are still skeptical, I offer to break things down into a simple equation.
This equation is a simple one to explain and to work through. You have roughly
one third of your week to recharge your batteries.  No one else can make
you relax, but tons of people can get in the way of your relaxing.  If you
do not find your own way to relax with that one third of your life, where
does that leave you?  It is up to yourself to set the rules for what you
know you need to do to relax and stick to them.&lt;/p&gt;
&lt;h2 id="give-yourself-the-permission-to-enjoy-life"&gt;Give Yourself The Permission To Enjoy Life&lt;a class="headerlink" href="#give-yourself-the-permission-to-enjoy-life" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, if you cannot tell by my writings, I am a geek through and through.  I love
my career and solving problems so much that I work on a side project
involving computers.  When I place games, they tend to be video games.  I have
a set of LEGO models that would (and have) made some kids cry.  If you give me
a science fiction or fantasy movie from 1970 and forward, there is a good chance
I have seen it.  Even more interesting, if you say, “there is this movie with a
guy and that guy does… and they…”, there is a decent chance I will tell you
the name of the movie and who starred in it.  Basically, I got geek cred.&lt;/p&gt;
&lt;p&gt;But life is not just about geek stuff.  There is more to life than geek stuff.
When possible, I like to get out and help people do things that they did not know
how to do before, such as archery.  I know that I prefer exercise that is more
nature oriented, so when I can, I go on a hike with friends and family.  I have
recently started to cook more meals at home, something that I was scared to do for
years due to bad experiences.  And yes, do not tell my dog Bruce, but I actually
enjoy taking him on a walk every day and getting some good exercise while I am at it.
Sometimes I enjoy life with something as simple as sharing how my day is going with
my wife and snuggling with her while talking about it.&lt;/p&gt;
&lt;p&gt;From my experience, if you want to enjoy life, you need a diversity of interests
that balance each other out.  A good example is building things with LEGO.  A lot
of my professional life is building immaterial things on a computer, so that act
of building material things with LEGO helps me balance that part of my life out.
During most workdays, I get up every hour to walk around, get water, and stuff like
that.  But it is not enough.  Walking Bruce and hiking when I can help me move around
and balance out sitting in a chair all day.&lt;/p&gt;
&lt;p&gt;It is not always easy keeping that balance though, and that is where giving yourself
permission to enjoy life comes in.  There will always be another line of code to
write, another test to complete, another article to create.  For me, it all
boils down to one simple question: if I do not give myself permission to enjoy life
and the computers were to disappear, would I be okay?  If the answer is no, I am
out of balance and I knew I need to give myself permission to get back into balance.&lt;/p&gt;
&lt;h2 id="give-yourself-the-permission-to-be-sick"&gt;Give Yourself The Permission To Be Sick&lt;a class="headerlink" href="#give-yourself-the-permission-to-be-sick" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I thought I would end with this one, as it was my primary impetus for writing this article.
Two weeks ago I got sick, and last week was a mixture of receovering and participating
in a week of in-person meetings at work.  Between my belief that what we are doing at
work is important and my work ethic, there was no choice in my mind that work had to
come first.  For me, it was the only choice.&lt;/p&gt;
&lt;p&gt;But that meant my side project, the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown Linter&lt;/a&gt;
almost completely stopped.  At the end of each day, my energy was zapped, and
I needed to recharge for the next day.  If I was lucky, I was able to complete a
tiny bit of progress on the project.  As it was, I was lucky that my urge to
write and ease with writing allowed me to work on this article and another
article
&lt;a href="https://jackdewinter.github.io/2021/07/17/my-autism-and-my-patience-do-not-mix/"&gt;on Autism&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When my wife and I were talking about how our days went, as we usually do each
day, I mentioned that I was upset that I was still sick and fatigued.  And without
skipping that much of a beat, she looked at me with a funny/serious combination
look and said, “You’re not a superman you know, you’re human.”&lt;/p&gt;
&lt;p&gt;After I told my wife that she was right&lt;sup id="fnref:noted"&gt;&lt;a class="footnote-ref" href="#fn:noted"&gt;2&lt;/a&gt;&lt;/sup&gt;, it got me thinking.  I had made
a lot of progress with giving myself permission to be other things in my life, but
had I given myself permission to be sick?&lt;/p&gt;
&lt;p&gt;I am not sure I have ever thought of being sick in that context before, so I guess
the answer right now is “No”.  I need to work more on being okay with the times in
my life when I get sick, and I need to focus on a smaller set of tasks throughout
the day to allow my body to heal.   My patience does indeed get tested when I am
sick, there is nothing I can about that… yet.&lt;/p&gt;
&lt;p&gt;Once again, it is my choice.  I can give myself permission to be sick, allowing my body
to heal whatever sickness I have, or I can extend the time that I am sick with sheer
stubbornness.  Guess which one I want to work towards?&lt;/p&gt;
&lt;h2 id="closing"&gt;Closing&lt;a class="headerlink" href="#closing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the end, when everything is considered, there is little we can do to prevent
“bad stuff” from happening.  Stuff happening is a constant in life, and it makes
sense that a certain portion of that will be “bad stuff”.  But while we cannot stop
“stuff” from happening, we can sometimes change our definition of “bad” to make
what happens more acceptable to us.&lt;/p&gt;
&lt;p&gt;It is not always an easy thing to do.  Speaking for myself, it requires a decent
amount of work and upkeep on my part.  I cannot speak on the behalf of anyone else,
but I find that reframing a certain amount of the “bad stuff” as “just stuff” helps
me maintain a healthier everyday life.  And that healthier life allows me to develop
software better, at work or at home.  Sure, it takes decent effort to do, often resulting
in conversations with friends and family to better understand it, but in the end I
feel it is worth it.&lt;/p&gt;
&lt;p&gt;For me, that switch between “bad stuff” and “just stuff” has always started with
me giving permission to myself to do something or be something.  When I allow myself
permission to do something, I open myself up to allowing myself to reframe negative
things that have happened while learning from those things, not forgetting them.
[more]&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:note"&gt;
&lt;p&gt;For the sake of clarity, this is just time sitting in front of the computer.  Because of my “knack” for analysis, I keep on thinking of computer related stuff for hours after I stop work. &lt;a class="footnote-backref" href="#fnref:note" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:noted"&gt;
&lt;p&gt;Yes, we tell each other “You are right” when the other is right. And that occurs frequently.  It is just healthy.  But even so, we both smirk and ask for more when the other says it. &lt;a class="footnote-backref" href="#fnref:noted" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category></entry><entry><title>My Autism and My Patience Do Not Mix</title><link href="https://jackdewinter.github.io/2021/07/17/my-autism-and-my-patience-do-not-mix/" rel="alternate"></link><published>2021-07-17T00:00:00-07:00</published><updated>2021-07-17T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-07-17:/2021/07/17/my-autism-and-my-patience-do-not-mix/</id><summary type="html">&lt;p&gt;This past week has felt like one of the longest weeks that I can remember
in a long time.  To be blunt, I have been sick for almost the entire
week.  And while I am feeling better, I acknowledge that my
patience is almost at a breaking point.&lt;/p&gt;
&lt;p&gt;Let me …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This past week has felt like one of the longest weeks that I can remember
in a long time.  To be blunt, I have been sick for almost the entire
week.  And while I am feeling better, I acknowledge that my
patience is almost at a breaking point.&lt;/p&gt;
&lt;p&gt;Let me explain: I hate being sick.  I do not personally know of any
people that enjoy being sick, but I really hate being sick.  And I am
not talking about low-level and medium-level headaches.  I get those
frequently and usually work through them while only barely acknowledging
them.  I am talking about being sick to the point of altering my normal
routine just to get through the day.&lt;/p&gt;
&lt;p&gt;To compensate, when I am not sick, I try to take good care of myself, eating
healthy foods, drinking lots of water, taking breaks, and relaxing when I
need to.  I am keenly aware that if I do not take care
of myself, the things I cherish in my life will start to fall apart.  One of
those things that helps me take care of myself is to keep busy.  I like to
look back at the past week and know that I have accomplished something that I feel
was useful.  It is not out of fear that I have this work ethic, just a
personal drive to effect positive change, even small change.  Knowing that
I have made a positive change, no matter how small, helps me find peace with
myself and helps me to keep moving forward, despite whatever is thrown in my
way.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;At the start of last weekend, it looked like any other weekend with some
small tasks around the house to take care of.  One of those tasks was to
remove some electrical outlets in our dining room.  We were having some work done
on the house scheduled for the following Wednesday, and the contractors
needed some electrical outlets removed.
After talking with my father-in-law (a licensed electrician) on Saturday, Sunday was
reserved to work the plan that we made together. After two hours of solid work, the
required changes were done.  Working in a relatively hot attic, I was
able to disconnect the required electrical circuits and leave them
safe, all according to plan. I double checked with my father-in-law on what I did,
gave him an &amp;ldquo;after action report&amp;rdquo; that he okayed, and everything was good.  Knowing
that my father-in-law signed off on my work, I started working on my
&lt;a href="https://jackdewinter.github.io/2021/07/12/markdown-linter-full-of-sound-and-fury/"&gt;PyMarkdown project&lt;/a&gt;
that Sunday afternoon, and got a lot of work done.&lt;/p&gt;
&lt;p&gt;But Monday was another story.  It arrived rather slowly.  I woke up with a
headache that just would not go away, and a lethargy that I could not shake.  I
started writing my weekly article and got it mostly completed, but each paragraph
that I put into that article seemed twice as hard to write as the one before it.  By
the time 4:00 PM
rolled around, I just knew that I was going to miss my usual Monday 11:59 PM
deadline.  I will spare you the details of how things progressed except to say
that it landed me in the local Emergency Room at 10:00 PM that evening.
Being sent home after five hours, the only thing the doctor and I could
figure out was that I had reacted badly to something in that attic.  Whether it was
the heat, or some old insulation did not matter, I just reacted to it in a bad way.&lt;/p&gt;
&lt;p&gt;On Tuesday morning I called into work, letting them know what happened and
that I needed an extra day to try and get better.  Wednesday arrived and
I completed my work for the day, but not without a decent nap in the middle
of the day and another nap after work.  Thursday was better in that I did not need the
afternoon nap, but it was Friday before I needed no nap.  But after
completing work each day, I literally did not do any of the things that
I would normally do in the evening.  Today, Saturday, is the first day since
Sunday that I have been able to do anything on the computer that was not
work related.  And it really has been taxing my patience.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;You see, part of my Autism diagnosis is anxiety related.  The best way to
explain my anxiety disorder is that my mind starts to evaluate the different
scenarios that can occur, taking up more and more bandwidth in my brain until
I am overwhelmed.  Depending on who and what is involved in any scenario,
I can often prune some of those scenarios as being unrealistic or unlikely. With
each branch of scenarios that I prune, a proportional amount of anxiety is
released. But without a neurotypical person&amp;rsquo;s point of view, any pruning that
is related to social circumstances or another person&amp;rsquo;s emotional states is severely
limited.  And that is where the anxiety builds more and more.&lt;/p&gt;
&lt;p&gt;To help address my anxiety, I have found two patterns that usually work
very well together: overcommunication and consistency.  If I am working
with you for anything more than an hour or so, I will probably tell you
something like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, I have Autism and I tend to overcommunicate.  If it gets to be too
much, please work with me to help us find a good level of communication.
I am also open, honest, and straight forward, so please let me know
if I say something wrong, as it is probably an oversight on my part.
I know I am probably going to miss something, and I hope you will
work with me to get it out in the open, dealt with it, and move on!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For me, that is an example of overcommunication in a nutshell.  The good
news is that most of the time people ask any questions they have, and we
proceed with a good conversation about communication.  Sometimes those questions
are asked right away and sometimes those questions are asked weeks later.
From my point of view, the good news is that it helps people know that
I am okay talking about it.&lt;/p&gt;
&lt;p&gt;Consistency is the other part of my coping mechanism.  I do not
feel the need to be as rigid as others with Autism, but I still find
that structure helps.  I try and plan out the following day before I go to
bed, just getting a high-level point of view on what I want to accomplish
on the next day.  For workdays, that usually means a block of &amp;ldquo;work&amp;rdquo;
followed by walking our dog Bruce, taking a shower, relaxing for an
hour watching something, making dinner, and then some work in the evening
on a project.  For a non-workday, that usually means some work on a project
until noon, doing work around the house or spending time with my wife in
the afternoon, and then following a similar evening pattern to a workday.&lt;/p&gt;
&lt;p&gt;If that sounds obsessive, it is not meant to be.  Based on the amount of
analysis that my mind constantly does, that planning helps to quiet
some of my analytics down.  Unless there is a good reason not to, I know
I am going to walk our dog Bruce every day.  I do not need to analyze it
that much. If anything, it relaxes me to know that it is a constant and that me and
Bruce will have a good two mile walk together every day.  I also have
a good reason to expect that my wife and I will do the shopping for the
week on a Saturday.  It is not set in stone when we leave, but I do know
that we almost always do the shopping on that day.  And if we decide to
move it around to another day, we just talk about it ahead of time.&lt;/p&gt;
&lt;p&gt;While those were just two examples, there are many more.  I have
worked on learning to accept a certain amount of change within those groups of
actions.  If I have adequate time to adjust, I am okay with a couple
of those actions occurring or being delayed to another day.  But those
kinds of adjustments took me years to learn, and the fewer the things
that need adjusting the better.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;And that is where my lack of patience and this week have collided with
each other like two freight trains on a single track.  &lt;/p&gt;
&lt;p&gt;On the communication front, if everyone usually thinks with the bandwidth
of a multi-lane highway, I was probably operating like I was down to only
having one lane of that highway available, with construction being performed
on that lane.  On the consistency front, my entire schedule was
destroyed and replaced with a &amp;ldquo;whatever I have the energy for&amp;rdquo; schedule.&lt;/p&gt;
&lt;p&gt;Between my two primary coping mechanisms being effectively disabled, it was
a nightmare.  I wanted to be able to communicate to those around me with my
normal level of communication, but it just was not there.  As for the consistency
in my schedule, I would have had more consistency rolling at set of dice to
decide what I was going to do each day.  With both coping mechanisms
non-functional, the only good news was that I was too tired to care.&lt;/p&gt;
&lt;p&gt;So yes, I was very grumpy for most of the week.  Or so I thought.  It turns
out that while I still have the same low level of patience with myself that
I always have, I have fostered more patience in others with respect to
myself.  I felt I was grumpy enough to warrant &amp;ldquo;the evil eye daggers&amp;rdquo;
from my wife.&lt;sup id="fnref:dagger"&gt;&lt;a class="footnote-ref" href="#fn:dagger"&gt;1&lt;/a&gt;&lt;/sup&gt;  And I felt like I had warranted at least a dozen of them.&lt;/p&gt;
&lt;p&gt;But after I told my wife this, she looked at me with a quizzical look
on her face.  She went on to explain that when she is not feeling well,
I give her extra space to account for her own form of grumpiness.  She
also talked to me about how we both are harder on ourselves than with
other people.  I was about to argue with her, but two things stopped me.
First, she was right.  Second, I was too tired to argue.&lt;/p&gt;
&lt;p&gt;You see, the person that I trust to have a more accurate picture of
myself just told me that it was okay.  She knew that it was just a
short-term behavior change and that I would be back to my normal self
as soon as I could manage it.  She had the patience to wait until that
happened.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Being patient with yourself is not a skill that come to many of us naturally.
Most people must practice it repeatedly to get close to inner peace,
if not achieve it.  Even more difficult is finding that patience within
yourself despite trying personal circumstances.  And when I say, &amp;ldquo;achieve peace&amp;rdquo;,
I mean being able to find it with work, not that it just mystically appears.&lt;/p&gt;
&lt;p&gt;While those statements are generally true of most people, it is magnified
for many people with a disability.  Regardless of how that disability affects
your life, you know you must try harder than the people around you to get
things done.  Having your copying mechanisms temporarily disabled because you
are sick is a trying personal circumstance in my mind.&lt;/p&gt;
&lt;p&gt;But during those times, I am working towards my own understanding.  The idea
that while I may feel like a total mess on the inside, I am still capable of
projecting the same patience to myself that I do to others.  As an old friend
once said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The only way to convince someone that you are not all talk is to practice
what you are preaching.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is what I am working towards.  Affording myself the same patience
that I give to others.  Letting myself know that it is okay to talk some
time to recover from being sick.  Allowing myself to get better, at whatever
pace my body decides it wants to take.  And with all that, the patience
to know that I will probably not get it right on the first try, but it is
taking those small steps forward that count.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:dagger"&gt;
&lt;p&gt;If you are married or in a serious relationship, those daggers may take many forms, but you know when your significant other is giving you that &amp;ldquo;if it wasn&amp;rsquo;t for&amp;hellip;&amp;rdquo; look.&amp;#160;&lt;a class="footnote-backref" href="#fnref:dagger" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Autism"></category><category term="Autism"></category></entry><entry><title>Markdown Linter - Full Of Sound And Fury</title><link href="https://jackdewinter.github.io/2021/07/12/markdown-linter-full-of-sound-and-fury/" rel="alternate"></link><published>2021-07-12T00:00:00-07:00</published><updated>2021-07-12T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-07-12:/2021/07/12/markdown-linter-full-of-sound-and-fury/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/28/markdown-linter-sometimes-you-have-to-go-backwards/"&gt;last article&lt;/a&gt;, I talked
about starting to work on getting rid of some long-standing issues: nested Container Block elements.
In this article, I talk about continuing that work and dealing with the remaining
nested block scenario tests.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wish I could say that this was a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/28/markdown-linter-sometimes-you-have-to-go-backwards/"&gt;last article&lt;/a&gt;, I talked
about starting to work on getting rid of some long-standing issues: nested Container Block elements.
In this article, I talk about continuing that work and dealing with the remaining
nested block scenario tests.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wish I could say that this was a good week, but it was not.  It was not even this week
that I am about to talk about here; that was last week.  Despite my best intentions,
I got sick, and it has taken the better part of a week for me to get better.  To hear
me talk about it, please read my upcoming article, Autism and Patience Do Not Mix,
coming out later this week.&lt;/p&gt;
&lt;p&gt;Before Monday afternoon when I got too sick to work, I had 90% of this article finished.
I knew I was getting sick, but I did not feel good about publishing something that was
only “mostly” done.  I hope my decision to delay publishing this article for
a week is okay with any readers.  I would rather postpone publishing an article
for a full week than to release something that I did not think was a quality article.&lt;/p&gt;
&lt;p&gt;And on a similar level, I did not want the care that I put into that week’s work
to be glossed over by an article that was not on par with that work.  As I talk about
below, I was stunned to find out that there were only 2 examples out of 673 examples
in the GFM specification
that deal with relative indentation of block elements.  It was something that I knew
about and something that I should have dealt with earlier.  But with no pressure
from the specification’s examples to deal with relative indentation, it was not until
this week that I worked to resolve the issue.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/60abfcb562098a63910dc3bc3dc954186df2a7ee"&gt;04 Jul 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9d3f1bb66b32fe8cec2cf3c4dde0ac141400435b"&gt;05 Jul 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-do-i-use-detailed-log-files"&gt;Why Do I Use Detailed Log Files?&lt;a class="headerlink" href="#why-do-i-use-detailed-log-files" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing that I do not think I have ever mentioned is why I use log file output
instead of just debugging the code interactively.  In normal everyday development, I do a bit of both
as the issue requires.  For me, the real understanding comes from looking at
a big picture and comparing it to other pictures.  Whether the right comparison pictures
are from earlier runs of the same scenario or pictures of similar scenarios depends on
what I am looking for.  Basically, I see it as a puzzle with lots of data that
I need to solve, and I love it!&lt;/p&gt;
&lt;p&gt;While the success of this technique may vary from person to person, it just
works well for me.  If I am comparing the output of one test to another test, this technique
allows me to copy the relevant section of the log files to another editor, run the
tests again, and examine the both log file sections side-by-side.  If I did not
understand something well enough, I can reset my position in both log files to an
earlier point and restart my examination from those new positions.  Most importantly,
it allows me to see a larger sequence of values than the ones visible from a single
breakpoint within the code.  At it with that data that I can better see the bigger
picture.&lt;/p&gt;
&lt;p&gt;For those reasons and others, more detailed log files just work better for
me.  Knowing the parser because of my experience with it, I find it easy to
follow along with how each line is parsed, even though the complicated
sections dealing with Container Block elements.  I have learned that I need
to usually ignore most of the “stuff” in those blocks of the logs unless
I am looking for something specifically to do with Container Blocks.&lt;/p&gt;
&lt;p&gt;But even with all that good stuff working in my favor, that does not always
make the job of fixing issues easier.&lt;/p&gt;
&lt;h3 id="more-detail-does-mean-more-work"&gt;More Detail Does Mean More Work&lt;a class="headerlink" href="#more-detail-does-mean-more-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While there are benefits to using more detailed log files, there are drawbacks
as well.  If you are not used to the volume of data, it can be overwhelming.
Even being used to the volume, there are still times that I need to walk
away because it becomes overwhelming.  There are still times where I look
at all the data without the right mindset, and it all looks like gibberish.
I find closing my eyes and taking three or four deep breaths does wonders
for getting the right mindset, but even that does not always work.  Sometimes
I need to clear my mind by walking around for 10 to 15 minutes until my
head clears.&lt;/p&gt;
&lt;p&gt;But in the end, my evaluation on whether the costs are worth the benefits always
produce a resounding “Yes!”.  But even with that yes, I do admit that there are
times, like with Scenario Test 237 and 238, that those costs and benefits
get tested… sometimes to their maximums.&lt;/p&gt;
&lt;h2 id="scenario-test-237"&gt;Scenario Test 237&lt;a class="headerlink" href="#scenario-test-237" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting with what I believed to be the easiest of the two disabled tests, I
started with Scenario Test &lt;code&gt;test_list_blocks_237&lt;/code&gt;, quickly renamed &lt;code&gt;test_list_blocks_237x&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike the previous two tests, these two tests were introducing something
that was a core tenet to the nesting of Container Blocks:  relative spacing.
Not complaining to the writers of the
&lt;a href="https://github.github.com/gfm/"&gt;GFM specification&lt;/a&gt; too much,
but as this is a core concept of nested blocks, I wonder why the specification
allocated only two examples to this concept and not more.  With all seriousness,
every other example in their specification can be properly converted into
HTML without worrying about relative spacing.  So, what is relative spacing
or more properly &lt;code&gt;relative nested container block spacing&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Basically, the GFM specification talks about how nested block spacing is not
absolute, but relative to the last Container Block element on that line.  To put
this into perspective, consider the above example.  When properly parsed,
the specification says that it will produce the following HTML output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;one&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;two&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if you look at the Markdown example with an absolute mindset, the text
&lt;code&gt;two&lt;/code&gt; is clearly not indented enough to qualify as being within the
Ordered List element.  So what gives?&lt;/p&gt;
&lt;p&gt;From a relative positioning point of view, the first line is broken down
into the following sections: &lt;code&gt;{space}{space}{space}&amp;gt;{space}&amp;gt;{space}&lt;/code&gt; for
the two nested Block Quotes elements that start the line, &lt;code&gt;1.{space}{space}&lt;/code&gt; for
the Ordered List element that is next on that same line, and &lt;code&gt;one&lt;/code&gt; for the text
for first List Item of that Ordered List element.  Using that same
relative point of view, this means that there are four characters after
the Block Quote elements before the text of that List Block element begins.&lt;/p&gt;
&lt;p&gt;Applying that to the last line of the example, the two nested Block
Quote elements take up &lt;code&gt;&amp;gt;&amp;gt;{space}&lt;/code&gt;, with the following nested Ordered List element
coming into effect after the four space characters &lt;code&gt;{space}{space}{space}{space}&lt;/code&gt;.
At that point, the text &lt;code&gt;two&lt;/code&gt; is present.  This means that, relatively speaking,
the text &lt;code&gt;two&lt;/code&gt; is validly indented to remaining part of the Ordered List element.
Looking at the HTML output above, this is indeed how that is parsed.&lt;/p&gt;
&lt;h3 id="how-to-approach-that-change"&gt;How To Approach That Change&lt;a class="headerlink" href="#how-to-approach-that-change" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In adding this support to the PyMarkdown parser, I was faced with two
options: make the parser’s handling of nested sections relative-aware
or make adjustments where needed.  While I would like to eventually
adjust the parser to be more relative-aware, I quickly figured out
that it would take quite a bit to make that change.  I spent a good
day going through some preview steps of what it would take, just
to get an idea of the effort.  If I had to guess, it would take
at least a month or two, if not more.  Seeing as I want to get the
PyMarkdown linter out there, that was out.  So, the only good option
left was to make adjustments where needed.&lt;/p&gt;
&lt;h3 id="subtle-changes"&gt;Subtle Changes&lt;a class="headerlink" href="#subtle-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To be fully honest, getting to this set of changes took a long
time to figure out, including at least three times where I had to walk
away to clear my head.&lt;/p&gt;
&lt;p&gt;The first part of solving that puzzle was recognizing from the
logs that the &lt;code&gt;__handle_block_quote_section&lt;/code&gt; function was not
providing the right adjusted text.  Specifically, in handling
this case under normal situations, the correct number of space
characters are placed in the respective Block Quote token.  But
because they both start on the same line, things got messed up.
To correct this, I added the following code to ensure the
&lt;code&gt;adjusted_removed_text&lt;/code&gt; and &lt;code&gt;adj_leading_spaces&lt;/code&gt; variables both
had the correct values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;count_of_actual_starts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count_characters_in_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;count_of_actual_starts&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;this_bq_count&lt;/span&gt;
        &lt;span class="n"&gt;adj_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_removed_by_container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;adj_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;adj_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
        &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adj_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that text now adjusted properly, it was on to modifications to
the &lt;code&gt;__handle_nested_container_blocks&lt;/code&gt; function.  For this function,
the &lt;code&gt;indent_level&lt;/code&gt; member variable of the start List Block token was
being set to a number that indicated absolute position, not relative
position.  To remedy that, I added code to calculate the indentation
difference between the original Block Quote element and the original
List Block element.  The &lt;code&gt;adjusted_indent_level&lt;/code&gt; variable was then
adjusted to properly reflect the indentation relative to the Block
Quote element and how it was set on the current line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="n"&gt;list_start_token_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;token_after_list_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;list_start_token_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
        &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;token_after_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token_after_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;adjusted_indent_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;end_container_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With those values calculated, it then allowed me to do the final changes
to the function.  Before the big change was added, I needed the function
to recompute the &lt;code&gt;indent_level&lt;/code&gt; variable to allow for an adjustment to
the relative positioning.   However, before I reset &lt;code&gt;indent_level&lt;/code&gt;, I
needed the algorithm to be aware of whether there was any difference
between the &lt;code&gt;indent_level&lt;/code&gt; variable and the &lt;code&gt;adjusted_indent_level&lt;/code&gt; variable,
so adjustments could be made later.&lt;/p&gt;
&lt;p&gt;After all those changes, it came down to the two lines at the end of
the following example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;adjusted_indent_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;adjusted_indent_level&lt;/span&gt;
    &lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end_container_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;                    
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After all that work, the only thing that still needed to be
adjusted was the &lt;code&gt;adj_line_to_parse&lt;/code&gt; variable containing the
current line.  Because both Container Block elements are processed
independently of any other elements, the &lt;code&gt;adj_line_to_parse&lt;/code&gt; variable
is reset to remove any whitespace that is part of the whitespace for
one of the Container Block elements.  In this scenario, the right
amount of whitespace was not removed, leading the Leaf Block
element processing to be wrong.&lt;/p&gt;
&lt;p&gt;By removing that extra whitespace, everything fell into place, and
it worked!  It was a long way to get there, but it was worth it.&lt;/p&gt;
&lt;h2 id="scenario-test-238"&gt;Scenario Test 238&lt;a class="headerlink" href="#scenario-test-238" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Taking a quick look at this issue, on the surface it seemed to be the
same issue as with scenario test 237, just the order in which the
different indents were applied were on the last line, not the first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;-&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the output tokens, everything looked fine, and the HTML was
being generated properly.  But on closer examination, there was one little
difference that changed the output of the Markdown generator: an extra
line of leading whitespace.&lt;/p&gt;
&lt;p&gt;To make sure that the Block Quote element is being represented properly,
when each line inside of the Block Quote element is tokenized, the leading
spaces including the &lt;code&gt;&amp;gt;&lt;/code&gt; character are stored within the owning Block
Quote token.  This allows for it to be reconstructed without any issues as
all leading Block Quote information is present, even if it varies.  But in
this case, the leading spaces for the first Block Quote were added to the
token, followed by a newline character and a fully indented representation
of the second Block Quote element, both from that line.  While each one
was accurate by itself, when they were combined by the Markdown generator,
they added a lot of extra whitespace.  That was the issue.&lt;/p&gt;
&lt;p&gt;It took a bit of head scratching before I figured it out, but I did
figure it out.  In a nutshell, because of two spaces between the first
Block Quote character and the second Block Quote character, they were not
interpreted as a “group” of Block Quote elements.  Rather, they were
interpreted as a Block Quote element, a space, and another Block Quote
element.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;special_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;special_case_adjusted_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;stack_bq_count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;stack_bq_count&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;block_quote_token_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;block_quote_token_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block_quote_token_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;stack_bq_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;matching_block_quote_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;stack_index&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;matching_block_quote_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;last_newline_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;matching_block_quote_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;special_case_adjusted_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;matching_block_quote_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;last_newline_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;special_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="cleaning-up-with-small-variations"&gt;Cleaning Up With Small Variations&lt;a class="headerlink" href="#cleaning-up-with-small-variations" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having a Monday off and with this week’s article started, I wanted to see if
I could make some progress on two variations: one for scenario test 237 and
one for scenario test 238.  &lt;/p&gt;
&lt;p&gt;As detailed above, the Markdown for scenario test 237 is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where the indentation on the final line allows that line to be included
in the Ordered List element started on line 1.  The small variation there
was to create test function &lt;code&gt;test_list_blocks_237e&lt;/code&gt; with one less space
character on that final line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This reduction in indentation on that final line makes that final line
ineligible for the Ordered List element. I was pleasantly surprised that
it worked right away, without any changes required.&lt;/p&gt;
&lt;p&gt;Scenario test &lt;code&gt;test_list_blocks_238a&lt;/code&gt; includes a similar change, this
time adding an extra space on the final line to make it eligible for
the Unordered List element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;-&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this new test was not as successful as test function
&lt;code&gt;test_list_blocks_237e&lt;/code&gt; was, it only required minimal changes
to make it work properly.  The HTML output was already consistent
with what was expected, but the Markdown generator had additional
whitespace in its output for the final line.  Specifically, when
that final line was parsed, the Paragraph token started with the
extraction of two space characters.  This meant that the regenerated
output had four space character between the final &lt;code&gt;&amp;gt;&lt;/code&gt; character and
the &lt;code&gt;two&lt;/code&gt; text.&lt;/p&gt;
&lt;p&gt;Addressing that issue did not require that much work.  In the
&lt;code&gt;__handle_nested_container_blocks&lt;/code&gt; function, I added the following
code to reduce the number of spaces by the appropriate amount:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;nested_container_starts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;indent_was_adjusted&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;already_adjusted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code was added specifically to address the extra space characters
and to remove them from the adjusted line variable &lt;code&gt;adj_line_to_parse&lt;/code&gt;.
If the indent was adjusted and the current line includes a nested list start
token, this code reduces that adjusted line variable by the list’s indent.
The code itself was made simpler by the handling of an increase in the spacing
already being handled previously in that same function.&lt;/p&gt;
&lt;p&gt;After taking a bit to figure out that solution, once it was implemented,
everything worked fine.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The full quote from Shakespeare’s Macbeth is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a tale told by an idiot, full of sound and fury, signifying nothing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Trying to mentally return to when I learned this line in high school, I
remember talking specifically about that line.  I seem to remember that we
were talking about how Macbeth’s wife had just died, and he did not see that
life contained any meaning for him after that point.
Over the years since high school, my thoughts on that line have changed a
bit.  I now think of that same line
in situations where someone goes on and on about something, only to have
it appear in real life as something with little sound or fury.&lt;/p&gt;
&lt;p&gt;The work that I documented in this article really did feel like that.  When
I started the work, I was not sure how difficult the work was going to be,
only that it would require some changes.  Now, it may be because of the
research that I did to get prepared for these changes, but those changes
ended up
feeling… well… trivial.  I was worried that I was going to have to make
some grand changes to the project to accommodate this “little” issue that
needed to be fixed, and the actual work was “little”.&lt;/p&gt;
&lt;p&gt;Do not get me wrong, I am grateful that those issues required less than
100 lines of code to change.  But at the same time, I realized that I had
built this issue up as “THE NASTY CHANGES REQUIRED TO…”&lt;sup id="fnref:caps"&gt;&lt;a class="footnote-ref" href="#fn:caps"&gt;1&lt;/a&gt;&lt;/sup&gt; instead of
“yup, just some normal tweaking” changes.  For context, I spent a full evening working
on the research and trying simple changes out until I was convinced it would
take a more concerted effort to solve.  And even then, I did some more testing
to make sure that my research was correct. For me, usually that amount of
research leads to a lot of changes.&lt;/p&gt;
&lt;p&gt;And maybe that is why I feel that it went from “sound and fury” to almost “nothing”:
I did proper research.  Sure, it took some time to figure out the correct decisions
to make based on that research, but it was that research that was pivotal.
For me, that is a just a good feeling to have.  While I was not able to show
any actual code as a result of that research, it helped me prune many decision
trees early on, resulting in allowing me to follow a quick path to
the actual work I needed to do.  Essentially, it pointed out the 90% of the
work that I should avoid and had me focus on the 10% of the work that would
be most beneficial.  And that helped a lot!&lt;/p&gt;
&lt;p&gt;In the end, the way I see it, while the “sound and fury” of debugging is
usually where I expect the hard work to be, there are cases where the
“signifying (almost) nothing” portion of the debugging work is where it is at!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After the week I have had being sick, I really am not sure what is going on yet.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:caps"&gt;
&lt;p&gt;For any readers not fluent in text-speak or DM/IM-speak, the extended use of capital letters usually implies that the author of the text is yelling.  In this case, it would be more of a “booming load” voice, implying sound and fury. &lt;a class="footnote-backref" href="#fnref:caps" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry></feed>