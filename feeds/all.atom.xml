<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack's Digital Workbench</title><link href="https://jackdewinter.github.io/" rel="alternate"></link><link href="https://jackdewinter.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jackdewinter.github.io/</id><updated>2022-03-28T00:00:00-07:00</updated><entry><title>Markdown Linter - Python Type Hinting</title><link href="https://jackdewinter.github.io/2022/03/28/markdown-linter-python-type-hinting/" rel="alternate"></link><published>2022-03-28T00:00:00-07:00</published><updated>2022-03-28T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-03-28:/2022/03/28/markdown-linter-python-type-hinting/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/03/14/markdown-linter-pi-day-blues/"&gt;last article&lt;/a&gt;, I
talked about drifting back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project for a while and talk about what is happening there.  One of the things
that I latched on to was Python Type Hints, which is what I dug into the past
week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things have been …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/03/14/markdown-linter-pi-day-blues/"&gt;last article&lt;/a&gt;, I
talked about drifting back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project for a while and talk about what is happening there.  One of the things
that I latched on to was Python Type Hints, which is what I dug into the past
week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things have been very time-consuming in my life recently.  Perhaps in the next couple
of months, I will write an article about it.  Who knows?
The effect of those things happening is that I did not publish an article
last week.  I was about 60% done with a first draft of the article, and I just
ran out of steam.  Nothing bad really happened, it was just that life was very
draining for a couple of weeks, and it caught up to me.&lt;/p&gt;
&lt;p&gt;When it came down to it, I just didn’t feel that I could do my best to complete
the article.  Quite simply, I did not feel that I could author an article
that I would be proud of.  So, I decided to wait to complete it.  And as
the week went on, things in my life resolved and lightened up considerably.&lt;/p&gt;
&lt;p&gt;So here goes.  Sorry for the wait.&lt;/p&gt;
&lt;h2 id="python-is"&gt;Python Is…&lt;a class="headerlink" href="#python-is" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the wonderful things that I like about the Python programming language is
that it is wonderfully untyped.  As someone who is creative, I often find that my
creativity in other languages is slowed down by trying to figure out what types
to use in what scenarios.  Not that types are a bad thing, I just find that using
strict type systems often hinder my creative process.&lt;/p&gt;
&lt;p&gt;As I understand it, one of the cornerstones of the Python language is that it is
the behavior that dictates the language, not the other way around.  To illustrate
that understanding, consider two separate objects that are both initialized to
have a &lt;code&gt;self.my_var&lt;/code&gt; member variable.  The underlying assumption is that if I have
a function whose behavior is to act on that variable, it does not matter which
object or which instance of a class holds that member variable.  The passing of
that object into the function is behavior enough.&lt;/p&gt;
&lt;p&gt;And that kind of thinking that “we are adults in the room” permeates through a
lot of Python.  There are no interfaces as in Java and C#.  Because of the loose
typing, there are no needs for generics.  Things just work.&lt;/p&gt;
&lt;p&gt;But using a language that does not have strict typing also has its share of
problems.  For one, since everything looks the same, any kind of function hinting
in source editors struggles to figure out the proper set of functions to display.
Say a variable was initialized to a &lt;code&gt;None&lt;/code&gt;, then an &lt;code&gt;int&lt;/code&gt;, and then a &lt;code&gt;str&lt;/code&gt;. What
function hints should the editor display and when? It is situations like that
where things get complicated.&lt;/p&gt;
&lt;h2 id="introducing-python-type-hints"&gt;Introducing Python Type Hints&lt;a class="headerlink" href="#introducing-python-type-hints" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have used Python for over four years now, it was only in the last couple
of months that I came across Python Type Hints.  To be clear, the name is exactly
as it sounds.  These are hints, not mandates, for how to interpret types within
the Python languages space.  To use a simple example, consider this Python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"something"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is not really that interesting, therefore it is easy to read.  Therefore, compare
it to the following code, from PyMarkdown’s &lt;code&gt;main.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Main entrance point.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__parse_arguments&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__set_initial_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;new_handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_error_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_strict_mode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;new_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_logging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_plugins_and_extensions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Determining files to scan."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;files_to_scan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;did_error_scanning_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__determine_files_to_scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recurse_directories&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;did_error_scanning_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;total_error_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_main_list_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files_to_scan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files_to_scan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__scan_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;BadPluginError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_scan_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;BadTokenizationError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_scan_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;formatted_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Configuration Error: {this_exception}"&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;new_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plugins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number_of_scan_failures&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;total_error_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What makes this function readable is that most of the heavy lifting has been delegated
off to the ten functions that &lt;code&gt;main&lt;/code&gt; function itself calls.  But look at
the function call to the &lt;code&gt;__determine_files_to_scan&lt;/code&gt;.  What kind of arguments does
that function require?  What kind of return values does that function produce?
Without good answers to those questions, using that function creates some hurdles
that we must jump over.  But what if we could reduce those hurdles a bit?&lt;/p&gt;
&lt;p&gt;That is where type hints come in.  Having already been modified during this past
week, that function definition currently looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__determine_files_to_scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eligible_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;recurse_directories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-are-type-hints-used-for"&gt;What Are Type Hints Used For?&lt;a class="headerlink" href="#what-are-type-hints-used-for" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be redundantly clear, Python type hints are exactly that, hints.  Any Python
code with type hints is
interpreted by Python interpreters without using those type hints.  However,
packages like the &lt;code&gt;Mypy&lt;/code&gt; package and the Python extension for VSCode can be used
to take advantage of those type hints.&lt;/p&gt;
&lt;p&gt;In the case of VSCode, the use of those type hints allows it to provide
better feedback to someone editing Python code.  Having started to apply type hints
to my Python code, I can already see the benefits as I am editing that same code.
Instead of me having to do search-and-replace to find the definition of the
function to determine how to interact with it, most of that information is displayed
in a handy popup that appears when I add the open parenthesis for the function call.
At the top are any type hints that I provided, and at the bottom is any documentation
that I added with a docstring.  That is useful.&lt;/p&gt;
&lt;p&gt;The other strong use that I have found for type hints are in the usage of the
&lt;a href="http://mypy-lang.org/"&gt;Mypy&lt;/a&gt; type checking tool.  From my understanding of this
process, Mypy builds a model of what it is being scanned, including any type hints.
It then compares usage of variables and function to what it believes to be the correct
typing, emitting warnings when the usage does not mirror what it believes to be the
correct types.&lt;/p&gt;
&lt;p&gt;In its normal mode, this is useful in making sure that there is consistent usage
of variables and types throughout a module.  But with that, there is a price to
pay.&lt;/p&gt;
&lt;h2 id="paying-the-price"&gt;Paying The Price&lt;a class="headerlink" href="#paying-the-price" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My first stab at adding type hints started fifteen days ago
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/b469155be7757209fea149e8ca534e3ab63feea2"&gt;with this commit&lt;/a&gt;.
It was not anything grand, but it was a start.  Just some simple changes to see
how things work.  From there, I started to pick off individual modules and
start to convert them where possible.&lt;/p&gt;
&lt;p&gt;Basically, find something to work on, fix it, validate it, and move on.
Then repeat that pattern many, many times.  I found that I was shifting between
responding to the result of this command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run mypy --strict pymarkdown stubs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to figure out what the next change to tackle was, and this command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run mypy pymarkdown stubs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to resolve any fallout from those changes.  Then, when I thought I had a good chunk
of work changed, I would enter this command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ptest -m
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to execute the complete set of tests to verify the changes worked.  And it just
kept on going.  The good news is that I started with over 4400 issues found with
&lt;strong&gt;strict mode&lt;/strong&gt; enabled, and now that is down to 1147 issues.  Getting close to
being done, but not there yet.&lt;/p&gt;
&lt;p&gt;And it is a very costly process to add it to an already existing project.&lt;/p&gt;
&lt;h3 id="cost-1-optional-values"&gt;Cost 1: Optional Values&lt;a class="headerlink" href="#cost-1-optional-values" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the things that I did not think about while writing the Python for the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project was my use of
the &lt;code&gt;None&lt;/code&gt; value.  Instead of producing good default values to denote that
some action was not performed, I just assigned the &lt;code&gt;None&lt;/code&gt; value to the
corresponding variable.&lt;/p&gt;
&lt;p&gt;What was wrong with that?  Nothing at the time.  But when I added type hints, it
forced me to use the &lt;code&gt;Optional&lt;/code&gt; type around the type of the variable.  Instead
of using a type like &lt;code&gt;int&lt;/code&gt;, I found that I had to use the type &lt;code&gt;Optional[int]&lt;/code&gt;.
And that brought a whole lot of extra effort to adding type hints.
Because the keyword literally means that the value can be a valid integer or the
value &lt;code&gt;None&lt;/code&gt;, in places where it was introduced, I had two options.&lt;/p&gt;
&lt;p&gt;The first option was to use the type as it was, returning &lt;code&gt;Optional[int]&lt;/code&gt; from
that function if needed.  But then, I was just delaying the evaluation of the second
option.  If I needed to return an &lt;code&gt;int&lt;/code&gt; or pass an &lt;code&gt;int&lt;/code&gt; while calling another
function, the second option was to do something to remove the &lt;code&gt;Optional&lt;/code&gt; around the type. In
a handful of cases, a well-placed &lt;code&gt;if variable:&lt;/code&gt; statement was used to do just that.
But in most cases, the variable was wrapped in an &lt;code&gt;Optional&lt;/code&gt; type in
the rare occurrence that it would be set to &lt;code&gt;None&lt;/code&gt;.  In those cases, I simply preceded
any reference to that variable with &lt;code&gt;assert variable is not None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That was painful but it was what was needed.  The painful part was that I needed
to then run the &lt;code&gt;ptest -m&lt;/code&gt; command to make sure that all paths through the code
were not triggering that assertion.  And while I would like to see I got them
all on the first try, that was not the case.  In those cases, it was reset and
try again.&lt;/p&gt;
&lt;h3 id="cost-2-getting-types-wrong-in-tokens"&gt;Cost 2: Getting Types Wrong in Tokens&lt;a class="headerlink" href="#cost-2-getting-types-wrong-in-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So far, it has only happened two times, but having a single variable that contains
multiple types is not desirable.  That practice is very undesirable when those
variables are member variables of Markdown tokens.  Because each basic scenario test
validates the list of Markdown tokens produced by the parser, in addition to verifying
the HTML produced by applying a transformation to those tokens, any change in what
is being tokenized can require many scenario tests to change.&lt;/p&gt;
&lt;p&gt;It is through sheer luck that these have been kept to a minimum.  In one case,
it resulted in the correction of three scenario tests.  In the other case, over
three hundred scenario tests needed to be fixed.  The issue?  In some of the failure
cases, the variable was set to the string value of &lt;code&gt;""&lt;/code&gt; instead of the boolean
value of &lt;code&gt;False&lt;/code&gt;.  While both values equal to &lt;code&gt;False&lt;/code&gt; when used in a
Python conditional, enforcing a &lt;code&gt;bool&lt;/code&gt; type meant changing many empty string values
in that particular token to a &lt;code&gt;False&lt;/code&gt; boolean value.&lt;/p&gt;
&lt;h3 id="cost-3-resolving-cycles"&gt;Cost 3: Resolving Cycles&lt;a class="headerlink" href="#cost-3-resolving-cycles" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another cost is one of making sure that I get each module agreeing on which other
modules they need to import, and in which order to import them.  This is particularly important as
Python has no ability to resolve module cycles using forward references. Instead,
as soon as the modules try and resolve their import statements during interpretation,
a cycle is detected, and a cycle exception is raised.  From my research, there are two
ways to get around this.&lt;/p&gt;
&lt;p&gt;The first way is to make sure that the
functions and classes are cleanly organized so that cycles do not occur.  A good
example of this are classes like &lt;code&gt;InlineRequest&lt;/code&gt; and &lt;code&gt;InlineResponse&lt;/code&gt;.  These two
classes used to be contained in the &lt;code&gt;InlineProcessor&lt;/code&gt; module before this work
started.  However, there were a small number of cases where the &lt;code&gt;InlineProcessor&lt;/code&gt;
module imported another module that also needed the &lt;code&gt;InlineRequest&lt;/code&gt; or
&lt;code&gt;InlineResponse&lt;/code&gt; classes.  As such, that other module would try and import those
classes from the &lt;code&gt;InlineProcessor&lt;/code&gt; module, causing a cycle to occur.&lt;/p&gt;
&lt;p&gt;The solution?  By lifting those two classes out of the &lt;code&gt;InlineProcessor&lt;/code&gt; module
and into their own modules, other modules could them import those two classes
without importing the &lt;code&gt;InlineProcessor&lt;/code&gt; module.  This was the easiest way to break
the cycle.&lt;/p&gt;
&lt;p&gt;But in some cases, this was not possible.  While things worked properly when
typing was not in the picture, there were a small number of cases where the
&lt;code&gt;import&lt;/code&gt; statement was needed with no way to reduce the cycle.
That is where the second method of avoiding cycles comes in.
For these
cases, the following pattern was used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TYPE_CHECKING&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;TYPE_CHECKING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# pragma: no cover&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown.tokenized_markdown&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ParseBlockPassProperties&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It took me a while to find this, but it works cleanly.  Having a good understanding
of how type hints could get complicated, the &lt;code&gt;TYPE_CHECKING&lt;/code&gt; global variable was
added as a work-around.  Set to &lt;code&gt;False&lt;/code&gt; by default and to &lt;code&gt;True&lt;/code&gt; by Mypy, the
above fragment of code only imports if type checking is enabled.&lt;/p&gt;
&lt;p&gt;How does this help?  As the code works fine without the type hints, the above
import is only being done to ensure that the type hints are correct.  As type
hints are not necessary for the normal interpretation of the Python code, the
interpreter can safely disregard any type hints.  Therefore, as the type hints
are only used for type checkers like Mypy, the &lt;code&gt;TYPE_CHECKING&lt;/code&gt; global variable
is used to detect if that is the current evaluation mode of the module, only
importing if that is the case.&lt;/p&gt;
&lt;p&gt;It took me a while to get behind it.  But from my experience, it is both simple
and brilliant at the same time.  It is a good example of cleanly dividing
responsibilities.&lt;/p&gt;
&lt;h2 id="how-is-the-work-coming-along-is-it-worth-it"&gt;How Is the Work Coming Along?  Is It Worth It?&lt;a class="headerlink" href="#how-is-the-work-coming-along-is-it-worth-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned early, Mypy has gone from detecting issues in the 4500-issue range
to the 1100-issue range, with that number decreasing with each change.  It is a
prolonged process, but I feel that it is a good one.  I can already
see benefits in VSCode when I am editing the project.  On top of that, it has
helped me to clarify some of the implementation details that I have done over the
course of the last two years.  Those are good things.&lt;/p&gt;
&lt;p&gt;But do not get me wrong, it is a slog.  This effort does not erase any technical debt
and does not make the project function any better.  What it is doing for me is
to make the code more maintainable and more readable. While it is not erasing
any technical debt, it is improving the quality of the project.  That it not as
quantifiable to others, but to me it is an important quantification.&lt;/p&gt;
&lt;p&gt;And while others might not understand that difference, it is good enough for me.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With over 75% of the project converted, the best answer that I can give right now
is that I hope to have the conversion finished by the end of the week.  Not sure
if it is possible, but I am going to try for it!
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Pi Day Blues</title><link href="https://jackdewinter.github.io/2022/03/14/markdown-linter-pi-day-blues/" rel="alternate"></link><published>2022-03-14T00:00:00-07:00</published><updated>2022-03-14T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-03-14:/2022/03/14/markdown-linter-pi-day-blues/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;, I
talked about the reasoning and designs behind the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
too that I use.  In this article, I drift back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project for a while and talk about what is happening there.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things over here at my house have been a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;, I
talked about the reasoning and designs behind the
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
too that I use.  In this article, I drift back to the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project for a while and talk about what is happening there.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things over here at my house have been a bit rocky professionally and personally.
It is nothing serious and nothing that I cannot deal with given the proper time
and mindset to deal with it.  Just multiple things converging at the same time
making life difficult for a while.  As such, while I did want to make more progress with the
Project Summarizer tool, the extra bandwidth in my personal life just was not there.
Rather than try and force work on the tool and then not being happy with myself
or my effort, I decided to bounce back to the PyMarkdown project and concentrate
on familiar ground for a while.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/152c2561f569dd4444c2f8f8f4625bf67ae7e774"&gt;13 Feb 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/524c38ea3af62cfbef285452cab8b370f1904926"&gt;13 Mar 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="state-of-the-project"&gt;State Of The Project&lt;a class="headerlink" href="#state-of-the-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Wow… a whole month has passed and there have been a lot of minor changes here
and there to the PyMarkdown project.  While there are no new stellar features to
report, I feel that the nested container testing is coming along.  Granted,
it is coming along slowly, but I can see that the progress in stability is worth
the effort.&lt;/p&gt;
&lt;p&gt;I guess that is why, during this weird time where multiple negative events seem
to be hitting at the same, I find solace in this work.  Do not get me wrong.  The
work itself is needed for the project. And it is creative, but
it is also a very constrained problem space.  Somewhat like a logical fuzzy blanket
that I can use for a while.&lt;/p&gt;
&lt;p&gt;For those that do not understand, let me try and explain it this way.  Sometimes,
when walking through our house, things can seem out of sort to me.  When this happens,
I look around for a handful of things
that I can clean up in five or ten minutes that will have a decent impact on how
I think the room looks.  I might not clean everything up and I might just reorganize
things to look cleaner, but that action helps me put my mind at ease. And for the record,
the messiest room in our house is not my office, it is the kitchen followed closely
by our dining room table.&lt;/p&gt;
&lt;p&gt;In a similar fashion, I find that cleaning up code and making a project
better helps me to clean up some of the “mess” in my mind. It is not the
same thing, nor does it have the same level of impact.  But still, it helps.  Whether
it is improving documentation, adding more specific scenarios tests, or cleaning up code that
I was not happy with, it is all about leaving the project a bit better than when
I found it. That is what helps me put my mind at ease.&lt;/p&gt;
&lt;h2 id="python-dataclasses-typing-and-mypy"&gt;Python, DataClasses, Typing, and Mypy&lt;a class="headerlink" href="#python-dataclasses-typing-and-mypy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have been learning and exploring in Python over the last five years.  In that
learning, I often find that the learning takes its own time and happens at the
weirdest of times. And I just hit one of those learning “bumps”.&lt;/p&gt;
&lt;p&gt;During the odd downtime in my professional job or in my personal projects, I browse
various parts of the web.  In some cases, it is to search for a better way to do
something, and in other cases it is just about exploring.  Either way, I often learn
about interesting things that spark my creativity.&lt;/p&gt;
&lt;p&gt;It was while I was working on research for another project that I came across a
concept known as data classes.  Covered more completely at the
&lt;a href="https://docs.python.org/3.8/library/dataclasses.html"&gt;Python Docs Pages&lt;/a&gt;,
the base concept behind dataclasses is a simple one.  Instead of setting up a class
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="nd"&gt;@x_index.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="nd"&gt;@y_index.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you can set up a class like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;

&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even more interesting are the cases where you do not want those values to be
changed.  In that case, using &lt;code&gt;@dataclass(frozen=True)&lt;/code&gt; will not generated any
setters for the class.&lt;/p&gt;
&lt;p&gt;To be clear, truly immutable objects in Python is not possible, but this language
feature comes close to it. Knowing the design of the PyMarkdown project
as I do, I thought dataclasses would be useful and started looking at them more
in-depth.&lt;/p&gt;
&lt;h2 id="python-typing"&gt;Python Typing&lt;a class="headerlink" href="#python-typing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My research flowed from dataclasses into one of the concepts
that they introduced me to: Python Typing.  In the dataclass example above, the variable
is specified with a type that follows it.  That type is what Python calls a “Type
Hint” and simply supplies a hint as to what the developer thought that type should
be.  The Python interpreters do not do anything with that themselves, but tools
such as &lt;code&gt;Mypy&lt;/code&gt; use that information to check to see if each type usage lines up.&lt;/p&gt;
&lt;p&gt;After reading the &lt;a href="http://mypy-lang.org/"&gt;Mypy documentation&lt;/a&gt;, or at least
a good handful of examples, I was hooked. There really is not a TL;DR on this, but
here is my first take on it.&lt;/p&gt;
&lt;p&gt;Type Hints are exactly as they sound, hints.  In a normal Python interpreter,
if the type hints do anything, they are essentially null operations.  But with other
tools, such as editors and Mypy, they provide extra type information that is used
is various forms. For editors, this information is often used to show type information
when the developer is changing a Python file. For Mypy, it evaluates assignments
and parameters to ensure that the specified types suggested by the developer are
being adhered to.&lt;/p&gt;
&lt;p&gt;That is it. But in that lies its simplicity and usefulness.  There is no switch
in the Python interpreter that says “Thou shalt use type hints!”  Instead, as things
progress, I can add type hints to different classes as I have time. After I have
added those type hints, Mypy will start checking assignments to and within those
classes. And my VSCode editor will have extra type information to provide better
information when I am editing the project files.&lt;/p&gt;
&lt;h3 id="where-does-this-lead"&gt;Where Does This Lead?&lt;a class="headerlink" href="#where-does-this-lead" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over the course of the next few weeks, I am going to try and add in Type Hints
where I can and see how that goes. I have already transformed a handful of data-only
classes into &lt;code&gt;dataclasses&lt;/code&gt;, and that went off without any fuss. I am plodding
along with resolving the parsing issues, but I am “plodding” at a good pace.&lt;/p&gt;
&lt;p&gt;One thing that I have noticed is that it has been over a month since the last
incremental release.  My current plan is that once I hit a solid wall with any
remaining issues, I am going to make sure things are clean and get that next
incremental release out.  I know I still have more scenario tests to add and
test, but the fixes from the last month are decent and need to be published so
that users can receive fixes for those issues.&lt;/p&gt;
&lt;p&gt;I wish that I had the extra bandwidth to be creative and work on the Project
Summarizer tool, but I acknowledge that my head is just not currently in the
right space for that.  But that doesn’t mean I cannot still be productive!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am hoping that things start settling down in my life in the next week or two.
But a lot of that is currently out of my control. I am dealing with it at a good
pace, just a decent number of things to figure out and deal with.  So, to be honest, I am
not sure what I am going to work on this week.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Project Summarizer - Designing and Implementing the Summarizer</title><link href="https://jackdewinter.github.io/2022/02/28/project-summarizer-designing-and-implementing-the-summarizer/" rel="alternate"></link><published>2022-02-28T00:00:00-08:00</published><updated>2022-02-28T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-02-28:/2022/02/28/project-summarizer-designing-and-implementing-the-summarizer/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;, I
talked about the reasoning behind one of the tools I use:
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;.
In this article, I talk more about the reasoning and designs behind the tool, and
the recent improvements I have made to it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes you can use a screwdriver when …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;, I
talked about the reasoning behind one of the tools I use:
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;.
In this article, I talk more about the reasoning and designs behind the tool, and
the recent improvements I have made to it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes you can use a screwdriver when you need a hammer, and sometimes you can
use a hammer when you need a screwdriver.  But more often than not, you really
need to have the right tool for the job you are doing.  If nothing else, you want
to make sure that you know you did things right and did not take any short cuts.&lt;/p&gt;
&lt;p&gt;Once I had identified a set of requirements and could not find
a tool that was meeting those requirements, I knew I needed to do something. The
result of meeting those requirements was the Project Summarizer tool.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pyscan/commit/379b519ffe0652cebbdc9a94d7a84023f925d46f"&gt;15 Feb 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pyscan/commit/f09dac83bdd0dcc2f8895c0f91b68bc04a8d5923"&gt;20 Feb 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="some-quick-design-work"&gt;Some Quick Design Work&lt;a class="headerlink" href="#some-quick-design-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned in my &lt;a href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/"&gt;last article&lt;/a&gt;,
I had a set of requirements that were not being fulfilled by other tools.  Namely,
those requirements were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to summarize the analyses of other tools&lt;/li&gt;
&lt;li&gt;to give me immediate feedback on how my changes affect code metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While these were not very extensive requirements, they were the guiding principles
that drove the initial development of the Project Summarizer tool.&lt;/p&gt;
&lt;p&gt;From the beginning, the way I envisioned this tool as something that was fast and took
information from other tools to summarize.  The first use case was for my own
Python projects, so meeting those requirements for my Python projects was of course my
first goal.  To carry out that goal,
the new tool needed to fit into the scripts that I use to run tests on my projects.
Added as part of the test scripts, I knew that I had two output files at my disposal:
the XML coverage file from &lt;code&gt;coverage.py&lt;/code&gt; and the XML tests file from &lt;code&gt;pytest&lt;/code&gt;.
Using those files, I knew I could provide a summary of any changes in tests or test
status, and I could provide a summary of high-level coverage numbers.&lt;/p&gt;
&lt;h2 id="is-it-enough-to-help-me"&gt;Is It Enough To Help Me?&lt;a class="headerlink" href="#is-it-enough-to-help-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Would that buy me enough benefit to make it worth the cost?  Yes!  At the time,
once I finished making changes, the four questions that I always found myself
asking were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;did I make the right fix?&lt;/li&gt;
&lt;li&gt;how did it affect the tests that I already had in place?&lt;/li&gt;
&lt;li&gt;did the fix require the addition of new tests to cover the new code in the fix?&lt;/li&gt;
&lt;li&gt;did the fix create code that is no longer needed, and is safe to be deleted?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first question is one that I seriously believe can only be answered by thorough
testing, experience with the code, and time.  The best answer that I can usually
hope for to that question is “yes, for now”.  As time goes on, that answer will
either lean towards or away from that “yes”.  It is often hard to tell in isolation.&lt;/p&gt;
&lt;p&gt;However, I felt that the remaining three questions could easily be answered by
data.  How did I know that?  Because I had manual tasks that I performed to answer
those questions.  For the first question, I looked at the PyTest output to see
if anything failed.  If something failed, I look at the PyTest HTML files to see
what tests failed and why.  For the second and third questions, I went right to
the HTML coverage output, and followed a similar procedure.  And I figured that
if I could do it manually, I could automate it.&lt;/p&gt;
&lt;p&gt;If I could automate that process, it would be good enough for me.&lt;/p&gt;
&lt;h2 id="getting-off-the-ground"&gt;Getting Off The Ground&lt;a class="headerlink" href="#getting-off-the-ground" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The initial version of Project Summarizer (originally called PyScan) was quickly
put together, meeting these
requirements head on.  Using the XML files as input, I quickly dug the
required statistics out of those files.  For the test output files, I only needed
to know if a test was added, removed, or changed status.  For the coverage output
files, I only needed to know if the various coverage metrics changed.&lt;/p&gt;
&lt;p&gt;At that point, I realized that I needed to introduce a third requirement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to create a “checkpoint” that could be used to compare current values against.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I looked at the raw summary numbers from the file, the one thing that they were
missing was context.  To be blunt, I found it difficult to remember if I had 128
tests or 129 tests before I made the change to add a new test.  I did not care
most of the time. What I cared about was whether the number of tests increased
by one to match the one test that I added.  This pattern carried over into the
coverage requirements.  I only cared about the change in coverage, not the current
coverage number.&lt;/p&gt;
&lt;p&gt;But to generate a difference value, you need to have a value to compare the current
value against.  That was missing at that point, so I created it.  Thus, the &lt;code&gt;publish&lt;/code&gt;
directory was created and the &lt;code&gt;--publish&lt;/code&gt; flag added to the Project Summarizer.
By publishing the existing summary to the &lt;code&gt;publish&lt;/code&gt; directory, any current change
was able to be measured against that checkpoint.  I did have to establish a habit
of running my &lt;code&gt;clean&lt;/code&gt; test script with the &lt;code&gt;-p&lt;/code&gt; option to publish the results when
I closed out a fix, but that habit was not too bad to form.&lt;/p&gt;
&lt;p&gt;And things were coming together nicely.  I was able to update either source code
or test code, and a summary of those changes was being reported
to the command line.  After a couple of weeks, I invested some time into learning
about the &lt;a href="https://pypi.org/project/columnar"&gt;Columnar&lt;/a&gt; package and used it to better organize the output.
And it was not fancy, but it worked and worked well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Results Summary
--------------------


  CLASS NAME                               TOTAL TESTS  FAILED TESTS  SKIPPED TESTS

  test.nested_three.test_markdown_nested_     133             1 (+1)         8 (-1)
  three_block_ordered
  test.test_markdown_extra                     87 (+7)        2 (+2)         1
  ---                                        ----             -            ---
  TOTALS                                     4528 (+7)        3 (+3)       171 (-1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Taken from some work that I did during the past week, this clearly showed me what
was going on with my changes.
As this was a focused execution of tests, I had the coverage summary disabled.  But
the information provided by the test results was particularly useful.  I had added seven
tests and removed the &lt;code&gt;@pytest.mark.skip&lt;/code&gt; from one test, which is reflected in
the output.  And as I was working on resolving issues, I had five of the tests
taken care of, with three failed tests remaining.  That was exactly the information
that I needed to know I was going in the right direction.&lt;/p&gt;
&lt;h2 id="time-passes-and-the-tool-matures"&gt;Time Passes… And The Tool Matures&lt;a class="headerlink" href="#time-passes-and-the-tool-matures" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continued to use the Project Summarizer tool for about a year before I started
to think about making changes to it.  And even then, it took me having a couple of
issues calling it from another script to get me to realize that I needed to make
a couple of changes.  And those changes were not substantial changes, but simple usability
changes.&lt;/p&gt;
&lt;p&gt;I had one issue when calling Project Summarizer from a script, where it had a
challenging time figuring out a consistent answer to the question “what is the width of
the screen”.  As &lt;a href="https://pypi.org/project/columnar"&gt;Columnar&lt;/a&gt; bases its organization of the columns on the
number of character columns on the display, it raised an interesting question of
what to do if there was no actual terminal.  There are defaults built into Columnar,
but they did not seem to be consistent.  And if I wanted predictable behavior, I
needed consistency.&lt;/p&gt;
&lt;p&gt;Therefore, the &lt;code&gt;--columns&lt;/code&gt; argument was added.  This would override any calculated
values and force the Columnar package to a specific size.  At the same time, I
figured that there were cases where that output was not important.  As such, I
also added a &lt;code&gt;--quiet&lt;/code&gt; argument to suppress the columnized output.&lt;/p&gt;
&lt;p&gt;The second issue that I had was that the reporting and publishing directories were
both hardcoded.  That was easily fixed with the &lt;code&gt;--report-dir&lt;/code&gt; and &lt;code&gt;--publish-dir&lt;/code&gt;
arguments.  While I do not predict changing these directories in my own setup,
it did sound like a solid addition to the tool.&lt;/p&gt;
&lt;h2 id="why-now"&gt;Why Now?&lt;a class="headerlink" href="#why-now" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I guess the question that I left unanswered was: why did I feel that I needed to
work on this now?&lt;/p&gt;
&lt;p&gt;The simple answer was that I found other things to measure.  One of the things that I
currently measure is the number of PyLint warnings in the current project.  But
that information is hard to see, and I would like to have better visibility into
how those values have changed on an ongoing basis.  But when I thought about how
to design that tool to include summary information, I decided instead that it would
be better for the Project Summarizer to do that reporting for me.&lt;/p&gt;
&lt;p&gt;But that meant I needed to update the Project Summarizer to manage more information.
As I started to do that design, it just seemed like the right thing to get those
changes I had in mind out of my head and into the project. The good news is
that even after I got those changes out of the way, it still felt like a good idea
to upgrade the Project Summarizer tool to be extendible.&lt;/p&gt;
&lt;p&gt;In fact, I seriously think it is a great idea!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week, I plan to do more research and design into making the Project Summarizer
tool more extensible.  Hopefully, that means I will have something interesting
to report next week.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="project summarizer"></category></entry><entry><title>Project Summarizer - Why Was It Needed?</title><link href="https://jackdewinter.github.io/2022/02/21/project-summarizer-why-was-it-needed/" rel="alternate"></link><published>2022-02-21T00:00:00-08:00</published><updated>2022-02-21T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-02-21:/2022/02/21/project-summarizer-why-was-it-needed/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/14/markdown-linter-grinding-away-at-issues/"&gt;last article&lt;/a&gt;, I talked
about taking a break from scenario testing the nested containers in the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project
and just getting back to fixing simple issues.  In this article, I talk about taking more of
a break to upgrade one of the tools I use: Project Summarizer …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/14/markdown-linter-grinding-away-at-issues/"&gt;last article&lt;/a&gt;, I talked
about taking a break from scenario testing the nested containers in the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project
and just getting back to fixing simple issues.  In this article, I talk about taking more of
a break to upgrade one of the tools I use: Project Summarizer&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If a competent developer is talking honestly about their development prowess, the
lion’s share of that prowess is because of the tools they use every day in their
work.  If a developer must stop and think about how to use the tools at their
disposal, they often lose track of what they were thinking about.  After a task-
switch or context-switch like that, it can take up to half an hour to get back
to where they were.&lt;/p&gt;
&lt;p&gt;That is why good tools are important.  The tools that a developer uses must be
able to make the developer more efficient by keeping the developer &lt;em&gt;in the moment&lt;/em&gt;
and solving the problem that they are working on.  Not in trying to figure out how
to bend the tools they use to their needs.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pyscan/commit/379b519ffe0652cebbdc9a94d7a84023f925d46f"&gt;15 Feb 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pyscan/commit/f09dac83bdd0dcc2f8895c0f91b68bc04a8d5923"&gt;20 Feb 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-makes-a-good-tool"&gt;What Makes A Good Tool?&lt;a class="headerlink" href="#what-makes-a-good-tool" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From my experience, there are three types of tools that are useful for developer efficiency:
editors, monitoring, and analysis.  While there may be more tools from someone else’s
point of view, those are the categories that I use.&lt;/p&gt;
&lt;h3 id="editors"&gt;Editors&lt;a class="headerlink" href="#editors" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The choice of an editor for a developer is very much a religious thing.  For all
intents and purposes, this is where the developer will live while they are writing
their programs.  As such, it needs to feel right to them.  If it does not feel right
to them, they will not be as efficient as with a “good” editor.  And to be honest,
the &lt;em&gt;feel&lt;/em&gt; of an editor really does depend on the developer.&lt;/p&gt;
&lt;p&gt;Take the editor &lt;code&gt;vi&lt;/code&gt;.  A standard of Linux systems since the beginning, it is a very
capable editor, but one with a steep learning curve.  However, I have known developers
that can make the keys fly and just make the editor sing with their code changes.  Then there
are the families of editors, such as the &lt;a href="https://www.jetbrains.com/"&gt;JetBrains&lt;/a&gt;
family of editors.  Supporting a staggering twelve development environments, JetBrains
is clearly a leader when it comes to development editors.  In their case, they
leverage a common look and feel, along with well tested development tools, to provide multiple
native editors for twelve distinct languages.  This works well because developers often
use multiple languages, and with a JetBrains editor, you can switch languages without
having to relearn large parts of the editor’s look and feel.&lt;/p&gt;
&lt;p&gt;And that brings me to &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;.  At some point, Microsoft
decided that they wanted to join the fray, and their answer was VSCode.  Immensely popular
with developers across many languages, it uses extensions and plugins to allow developers to customize
their development experience to the way they want it.  For example, on my instance of
VSCode I have the Python extension and the Pylance extension enabled for writing
Python, with &lt;a href="https://sourcery.ai/"&gt;Sourcery&lt;/a&gt; and
&lt;a href="https://www.codiga.io/"&gt;Code Inspector&lt;/a&gt; to supply an instant analysis.  I am currently
narrowing down my favorite Git extension to one of two plugins, but VSCode is okay
with me having both installed at the same time.&lt;/p&gt;
&lt;p&gt;That is why I feel that the true reason VSCode is popular: because it is so configurable.  As I
mentioned at the top of this section, the choice of editors is a religious thing.
If something is not working well for me, I can try new extensions to bring it more
in line with my developer process.  Basically, I can fine-tune the &lt;em&gt;feel&lt;/em&gt; as much
as I want to.  And that is what makes VSCode such a powerful editor for me.  I can
write Bash scripts in it, Python modules in it, or C++ files.  Each language with
the same level of support as the other two.&lt;/p&gt;
&lt;p&gt;The common thread here is that for an editor to be effective for a given developer,
it must make them more efficient and not get in the way.  And that means being
very customizable.&lt;/p&gt;
&lt;h3 id="monitoring"&gt;Monitoring&lt;a class="headerlink" href="#monitoring" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Monitoring tools are often forgotten, but I believe that they are a major component of a developer’s
toolbox.  These tools are anything that allow the developer to examine and monitor
their applications in action once they have been completed.  Whether it is something
as simple as having the Windows Task Manager application open in Summary View mode
(go to &lt;code&gt;Performance&lt;/code&gt;, right click on &lt;code&gt;CPU&lt;/code&gt;, and select &lt;code&gt;Summary View&lt;/code&gt;), or pairs
of applications such as Linux’s &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;watch df -h&lt;/code&gt; commands, these tools help
the developer to decide if their applications are behaving properly.&lt;/p&gt;
&lt;p&gt;And while it might not be a popular choice, I also throw Unit Testing and Scenario
Testing into this part of the toolbox.  Because these tests are actively examining
the output of the application with various inputs, I feel that they are critical
in determining if the application is performing as expected. Especially if these
tests are paired with a solid Continuous Integration workflow, their monitoring
of any external changes in the application are pivotal to the application’s success.&lt;/p&gt;
&lt;p&gt;The common thread for these monitoring tools is that the monitoring tools must present
the developer a solid look at the application, both the environment that it
is executing in and how it is performing itself within that environment.&lt;/p&gt;
&lt;h3 id="analysis-tools"&gt;Analysis Tools&lt;a class="headerlink" href="#analysis-tools" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And finaly, there are the Analysis tools.  These can often be the most controversial
tools to talk about because of what they do: analyze how well the application measures
against a given metric.  These tools can include, but are not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;formatters that automatically change the &lt;em&gt;style&lt;/em&gt; of the code to match a single style&lt;/li&gt;
&lt;li&gt;linters that scan the code for known errors or anti-patterns, and reporting them&lt;/li&gt;
&lt;li&gt;coding assistant that provides analysis within the editor&lt;/li&gt;
&lt;li&gt;summarizers that take a more complicated analysis and break it down into easier to digest bites&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good example of the formatter tool is &lt;a href="https://pypi.org/project/black/"&gt;Black&lt;/a&gt;.
Used on the various projects that I work on; this formatter ensures that every
line of Python is formatted in a single consistent manner.  From their website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Blackened code looks the same regardless of the project you’re reading. Formatting becomes transparent after a while and you can focus on the content instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And from experience, it is particularly good at achieving that goal.   I do not find myself
focusing on the formatting at all, because I know Black will pick that up.&lt;/p&gt;
&lt;p&gt;In that same vein, the &lt;a href="https://www.pylint.org/"&gt;PyLint&lt;/a&gt; linting tool provides a
useful tool for scanning for well-known issues in Python code.  It does not have
a great tag line like Black but provides useful indicators that help me
write better Python code every day.  I can honestly say that I have avoided a
lot of coding issues simply by dealing with most PyLint warnings. Like
my use of Black for formatting, my experience with PyLint allows me to write
Python code without worrying about the &lt;a href="https://www.merriam-webster.com/dictionary/nitty-gritty"&gt;nitty-gritty&lt;/a&gt;
of the language.  I have confidence that PyLint has my back when it comes to
catching a lot of the commonly seen antipatterns.&lt;/p&gt;
&lt;p&gt;Next up are the coding assistant tools.   These are analyzers that are executed within
the scope of the editors and supply near instant feedback.  The reason that these tools are
useful is that instead of waiting until the code is completed, these tools provide
near-immediate feedback on what a developer is writing.  I currently use
&lt;a href="https://www.codiga.io/"&gt;Code Inspector&lt;/a&gt; to run a version of the PyLint checks
as well as &lt;a href="https://sourcery.ai/"&gt;Sourcery.Ai&lt;/a&gt; for more insightful analyses.
Both tools provide different insights while I am writing my Python code,
but both are useful.  And as those insights are being provided as I
code, I can wait for a good breaking point, check out those insights, and determine
how best to respond to them.  It just works.&lt;/p&gt;
&lt;h4 id="why-can-these-analysis-tools-be-controversial"&gt;Why Can These Analysis Tools Be Controversial?&lt;a class="headerlink" href="#why-can-these-analysis-tools-be-controversial" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Just a note here.  This is my opinion, from my experiences.  The experiences
of readers may vary from what I am about to say.  Basically, read these next
paragraphs with an open mind.&lt;/p&gt;
&lt;p&gt;From my experience, software developers have a tough time removing themselves from
the code that they write.  As such, if you run an analysis on “their” code, they
can feel that you are judging them, as they created the code.  And people do not
like being judged.  Therefore, they would rather feel better and not analyze their
code to see how it can be better.&lt;/p&gt;
&lt;p&gt;Now, that is a loaded viewpoint, but I believe it is a fairly accurate one.  Even I
suffered from that tainted viewpoint of “my code is my me” in the early stages of
my career.  But after a while,
I realized that while my code is an expression of myself, so are the tools that I
can use to make that code better.  However, that was not an easy step for
me to take.  It took about a decade for me to make that transition, and there
were many times I moved one step forward only to follow that with two steps
backward.&lt;/p&gt;
&lt;p&gt;Finally, at one point, it was a conversation with a colleague that cemented by
current view for me.  When talking about code analysis tools and code coverage, he
mentioned his skills as a carpenter.  He mentioned that no one would have a
problem if he came to a project with a new hammer or a different tool than
expected if the results justify it.  He then continued on that path
and switched to software projects, where he saw many of his colleagues wince at
his suggestion of a better tool or a separate way of approaching the process.
He thought it was… er… stupid and silly.  But that conversation is the one
that finally got me cemented on my current way of thinking about analysis tools.&lt;/p&gt;
&lt;p&gt;But not everyone is there.  And it takes experience to know to walk that path.&lt;/p&gt;
&lt;h2 id="summarizer-tools"&gt;Summarizer Tools&lt;a class="headerlink" href="#summarizer-tools" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But what about summarizer tools?&lt;/p&gt;
&lt;p&gt;To be blunt, I did not find any.  And it was driving me nuts.  I love having
a short cycle between making changes and seeing their results.  The shorter
the better.&lt;/p&gt;
&lt;p&gt;But when it came to Python tests via PyTest, the closest thing
to a tool I had was to manually open the PyTest results page and look through
there.   The main console display would show me pass/fail easily enough, but
it would not group them according to the file.  That was only available by examining
the HTML output.  A similar pattern existed with Code Coverage.  I would make
a change, test it out, and then have to open the HTML coverage webpage to figure
out if I had every line and path covered.  I had to type those two URLs into
the browser so often that I created a new script with the content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;start report\coverage\index.html
start report\report.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But I knew there had to be a better way of doing things.  I quickly came
to one conclusion. I needed to write my own tool to summarize the analyses
of other tools.  I needed something I could run with every commit and between
commits to give me immediate feedback on how I was doing.&lt;/p&gt;
&lt;p&gt;And thus, Project Summarizer was born.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having laid the groundwork for why I needed Project Summarizer, it was time
for me to design it with good requirements in place.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="project summarizer"></category></entry><entry><title>Markdown Linter - Grinding Away At Issues</title><link href="https://jackdewinter.github.io/2022/02/14/markdown-linter-grinding-away-at-issues/" rel="alternate"></link><published>2022-02-14T00:00:00-08:00</published><updated>2022-02-14T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-02-14:/2022/02/14/markdown-linter-grinding-away-at-issues/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/07/markdown-linter-is-it-worth-it/"&gt;last article&lt;/a&gt;, I talked
whether the painstaking work that I am doing to enumerate every use case is worth
it.  In this article, I talk about taking a break from scenario testing the
nested containers and just get back to fixing simple issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Add north of …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/02/07/markdown-linter-is-it-worth-it/"&gt;last article&lt;/a&gt;, I talked
whether the painstaking work that I am doing to enumerate every use case is worth
it.  In this article, I talk about taking a break from scenario testing the
nested containers and just get back to fixing simple issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Add north of fifty scenario tests to address a slice of the scenarios possible
with three level nested containers.  Work through each one and see if it passes
or fails.  Categorize the failures and work through them in groups.  Rinse and
repeat for a month or so. It was just getting a bit monotonous and boring.
That meant that it was starting to feel more of a chore than a good project to
work on.&lt;/p&gt;
&lt;p&gt;To combat that feeling, I decided to work on a few of the easier
issues in the issues list.  If nothing else, I could get issues off the backlog
and off my plate.  But I just wanted to change things up for a bit.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5602d41792ec9dc9cced4038e422834027be9e95"&gt;07 Feb 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/152c2561f569dd4444c2f8f8f4625bf67ae7e774"&gt;13 Feb 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="version-095"&gt;Version 0.9.5&lt;a class="headerlink" href="#version-095" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, right off the mark, the first thing to happen this week is that I released version
&lt;a href="https://github.com/jackdewinter/pymarkdown/releases/tag/v0.9.5"&gt;0.9.5&lt;/a&gt;
of the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project.  It had been roughly a month since the last release and having completed
a solid number of fixes for issues with nested containers, I thought it was a good
time to publish them.&lt;/p&gt;
&lt;p&gt;Not really anything exciting to report there.  Just some bug fix goodness.&lt;/p&gt;
&lt;h2 id="fixing-some-easy-issues-issue-95"&gt;Fixing Some Easy Issues - &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/95"&gt;Issue 95&lt;/a&gt;&lt;a class="headerlink" href="#fixing-some-easy-issues-issue-95" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having just released an updated version of PyMarkdown, I decided to look at the project’s
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues"&gt;Issues List&lt;/a&gt;
and find and fix a few of the more visible issues in the list.  The first one
that I grabbed was an issue that had been in the list for about a month that
I knew was going to be a tricky issue to resolve.  But as I had the time to
take care of it, it was one that I definitely wanted to resolve.&lt;/p&gt;
&lt;p&gt;It ended up taking as much time to resolve as two or three nested container
issues, but it was well worth it.  By the time I was finished, I had made changes in
the Container Block Processor module, the List Block Processor module, the
TransformToMarkdown module and the code for Rule Md027.  There was a lot of head
scratching along the way, but I persevered through it, and figured out all the
changes.&lt;/p&gt;
&lt;p&gt;Why was it so complicated?  The Markdown document itself was relatively simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="n"&gt;this&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;good&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it was the &lt;code&gt;+&lt;/code&gt; character on the last line that caused issues.  The first issue
was that up
until this point, I have not exhaustively tested three-level nested container blocks.
This document is essentially a Block Quote/Unordered List/Block Quote element nesting,
with the two remaining issues being the two of the big concepts I have left to test
in my nesting scenarios:  ending container support and new List Item element support.&lt;/p&gt;
&lt;p&gt;To break it down properly, ending container support is when the use of something
in a later line causes one or more of the containers elements to end.
In this case, the new List Item &lt;code&gt;+&lt;/code&gt; character signifies the start of a new List Item
within the level-two List element.  As a level-three Block Quote element was in
effect, that level-three element is closed to allow the new List Item to start.
While these do not usually cause issues, it did in this case, and I had to mitigate
that. The other reason is new List Item element support.  While I have orchestrated
all the combinations of Block Quote characters and their “missing” cases, I have
not started yet on the same process for new List Item elements.  As some of the
List element information is stored in the List Item tokens, it just needed to be
worked out.&lt;/p&gt;
&lt;p&gt;None of these were unexpected issues, but I did not expect for them to happen at
the same time. I just buckled down and worked through all the issues.  Since
this issue had annoyed me for at least a couple of months, it was good to get it
out of the way and cleaned up.&lt;/p&gt;
&lt;h2 id="user-request-slight-change-to-rule-md003"&gt;User Request: &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/154"&gt;Slight Change To Rule Md003&lt;/a&gt;&lt;a class="headerlink" href="#user-request-slight-change-to-rule-md003" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the other issues that leapt out to me was a user request regarding Rule Md003.
In its default style of &lt;code&gt;consistent&lt;/code&gt;, that rule searches for the first use of a heading,
either an Atx Heading or a SetExt Heading.  As the main purpose of this rule is
to check for consistent use of headings throughout the Markdown document, the rule
uses that first heading as the basis for its evaluation of the rest of the document.&lt;/p&gt;
&lt;p&gt;For example, given the Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;heading&lt;/span&gt;
&lt;span class="o"&gt;=================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and a setting of &lt;code&gt;consistent&lt;/code&gt;, the rule rightfully assumes that the document author
wants to use SetExt Headings in the document.  The problem with that is the following
document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;This is a heading&lt;/span&gt;
&lt;span class="gh"&gt;=================&lt;/span&gt;

### This is another heading
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As there are only two SetExt Heading sequences, &lt;code&gt;=&lt;/code&gt; for level one headings and
&lt;code&gt;-&lt;/code&gt; for level two headings, an added style of &lt;code&gt;setext_with_atx&lt;/code&gt; was created to allow
for this mashup of level one and level two SetExt Headings and level three plus
Atx Headings. But from the &lt;code&gt;consistent&lt;/code&gt; style point of view, there is one
problem: there is no way to distinguish between a style of &lt;code&gt;setext&lt;/code&gt; and &lt;code&gt;setext_with_atx&lt;/code&gt;
using only the first line of the document.  As such, it is safest to assume a style
of &lt;code&gt;setext&lt;/code&gt; without any other context being available.&lt;/p&gt;
&lt;p&gt;To address the user’s request, I decided to add a new configuration value for
this rule: &lt;code&gt;allow-setext-update&lt;/code&gt;.  When enabled, the original assumed style is
still &lt;code&gt;setext&lt;/code&gt;.
However, when a level three plus Atx Heading is encountered and the &lt;code&gt;allow-setext-update&lt;/code&gt; value
is set to &lt;code&gt;True&lt;/code&gt;, the style is updated from &lt;code&gt;setext&lt;/code&gt; to &lt;code&gt;setext_with_atx&lt;/code&gt;.
In this way, the new behavior of the rule is backwards compatible while allowing
a &lt;code&gt;consistent&lt;/code&gt; style to upgrade itself to the &lt;code&gt;setext_with_atx&lt;/code&gt; style if needed.&lt;/p&gt;
&lt;h2 id="multiple-issues-in-one-issue-189"&gt;Multiple Issues in One: &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/189"&gt;Issue 189&lt;/a&gt;&lt;a class="headerlink" href="#multiple-issues-in-one-issue-189" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was a fun issue that took me a couple of tries to get it fixed correctly.
Pared down to its base components, the Markdown document causes the failures was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;

&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="n"&gt;Solution&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;exclamation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="n"&gt;Metadata&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Jira&lt;/span&gt; &lt;span class="n"&gt;issue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I looked at this issue at the beginning of January, it looked simple enough.
As such, after about an hour, I had a potential fix as well as a workaround to
use until the next time that I published a release.  All looked good.&lt;/p&gt;
&lt;p&gt;So it was with shock that when I went to confirm this issue’s resolution that
I found it was firing on an exception.  Thinking about it for a bit, it
made sense that it could fire an exception because I had tested documents like the
above document, but not that exact combination.  As such, it fell between the
cracks.&lt;/p&gt;
&lt;p&gt;Adding both the full example attached to the issue and a condensed version of that
same document, I created a proper set of scenario tests for it this time.  With
the information from both new tests, I was able to create the one-line change
needed to fix this issue.  I had a simple off-by-one error in the code for Rule
Md027, and the exception went away.&lt;/p&gt;
&lt;h2 id="remember-to-keep-things-simple-issue-161"&gt;Remember To Keep Things Simple: &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/161"&gt;Issue 161&lt;/a&gt;&lt;a class="headerlink" href="#remember-to-keep-things-simple-issue-161" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The final issue that I wanted to get done this week was Issue 161.  For this issue,
the rule itself was firing properly, but it was reporting the wrong actual and
expected numbers when the rule was fired.  After an hour of reading and
debugging, I could tell why.&lt;/p&gt;
&lt;p&gt;Instead of trying to do something clean, I decided to try something smart.  Maybe
there something preventing me from doing the clean approach before, I am not sure.
But as I looked at the code for the &lt;code&gt;__report_issue&lt;/code&gt; function, I was confused.
Given that the detection logic was working properly, why did I try and make the
code recompute both values instead of reusing the one value from the
detection logic?  And did the other value’s computation have to be so difficult?&lt;/p&gt;
&lt;p&gt;After another half-hour of trying to figure things out, I gave up.  Instead, I
added a &lt;code&gt;if True: pass else:&lt;/code&gt; block before the confusing code and started to
experiment with a cleaner approach to calculating those values.  Once I got the
cobwebs of the first approach out of my head, I was able to get both calculations
working properly within the next hour.  Add in extra time for cleanup, and I was
done.&lt;/p&gt;
&lt;p&gt;Time spent writing the old approach? I would have to guess at least five to six
hours.  Time spent trying to understand it?  At least two hours, give or take.
Time spent to replace it with something cleaner, including tidying the new
approach up? Less than two hours.&lt;/p&gt;
&lt;p&gt;Sometimes I wonder if I write the more complicated code to confuse myself, or if
there was something else preventing me from writing the clean code.  I wish I
knew so I could avoid the nastier approach from the start.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes I feel that getting the PyMarkdown project to a good state is further
away than it probably is.  Part of my brain sees the issues that I am finding
with nested containers and worries that I am going to keep on finding those
bugs for years.  The other part of my brain knows that I cannot discover every
issue before it is reported by a user, but I am making good progress in identifying
those issues myself.  It is a balancing act that is never boring.&lt;/p&gt;
&lt;p&gt;But generally speaking, I am okay with it. I think one thing that this week has reminded
me of is that change is good.  I do have a couple of smaller projects that I can
work on, and I think I am going to try and spend a bit more time on those projects
to help me rest up before the push on the PyMarkdown project later in the week.
Is that the right thing to do?  Not sure.  But I do know that I must treat
the PyMarkdown project like the marathon it is, and not a sprint.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Release with fixed code for past four weeks.  Done.  Picked up low-hanging-fruit
issues and resolve them.  Check.  What is next?  Not sure.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Is It Worth It?</title><link href="https://jackdewinter.github.io/2022/02/07/markdown-linter-is-it-worth-it/" rel="alternate"></link><published>2022-02-07T00:00:00-08:00</published><updated>2022-02-07T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-02-07:/2022/02/07/markdown-linter-is-it-worth-it/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/31/markdown-linter-there-is-no-such-thing-as-professional-life/"&gt;last article&lt;/a&gt;, I talked
about finding middle ground within myself.  In this article, I talk about whether
the painstaking work that I am doing to enumerate every use case is worth it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project is something that
I started over two years ago.  As time …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/31/markdown-linter-there-is-no-such-thing-as-professional-life/"&gt;last article&lt;/a&gt;, I talked
about finding middle ground within myself.  In this article, I talk about whether
the painstaking work that I am doing to enumerate every use case is worth it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project is something that
I started over two years ago.  As time passes, the one question that rather often
comes to my mind is: is it worth it?&lt;/p&gt;
&lt;p&gt;It turns out, that was not as easy of a question to answer as I thought it was.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/956b7a8f85cd0e20f53911734b58707a99eec2ee"&gt;26 Jan 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/ee206b4dfbd2feb8649d5e11d1b731591cf5bd41"&gt;06 Feb 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="before-we-start"&gt;Before We Start…&lt;a class="headerlink" href="#before-we-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a bit embarrassing.  When I finish my article for that week, I double check
that everything is correct, publish it upon completion.  Following that, I upload the new article
to my blog, and double check again to make sure that everything looks good.  If
for some reason I do not do that last step on Monday night, I do it on Tuesday evening.
While it might seem pedantic, it works.  I have caught the two or three times where
everything was published, but I forgot to upload to the blog.&lt;/p&gt;
&lt;p&gt;Well, it worked… except for last week.  Not only did I forget on Monday night
to publish the article, but I forgot on Tuesday night as well.  Now, I do have a particularly
good excuse for missing Tuesday night: I was watching my home county’s
Team Canada Men’s Soccer Team win another
&lt;a href="https://www.concacaf.com/en/world-cup-qualifying-men/schedule-results-world-cup-qualifying-men/"&gt;CONCACAF World Cup Qualifier&lt;/a&gt;
with my family.  After watching a well fought game between two good teams remarkably
close to where I grew up, we then watched a couple of episodes of Disney Plus’s
Hawkeye.&lt;/p&gt;
&lt;p&gt;For the family, it was a good night.  For my blog, an oops night.&lt;/p&gt;
&lt;h2 id="why-am-i-working-on-pymarkdown"&gt;Why Am I Working On PyMarkdown?&lt;a class="headerlink" href="#why-am-i-working-on-pymarkdown" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For those readers that are new to my blog, as described in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want my blog to inspire people and help them learn, like people have inspired and helped me in the past. For technical articles, I feel that I can best do that by focusing more on the why and how of the decisions leading up to the solutions rather than the what of the solutions themselves. For other articles, I feel that I can best do that by being an honest and believable storyteller, helping people to understand issues and situations as I see them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whether it is detailing the tough decisions that I make to move the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project further along
or describing the details on how I moved the project along, I feel that both
types of articles are meeting these goals.  As of late, I have felt that it
was important to balance those topics with more “squishy” topics, such as
&lt;a href="https://jackdewinter.github.io/2022/01/17/markdown-linter-finding-something-that-works/"&gt;Finding Something That Works&lt;/a&gt;,
&lt;a href="https://jackdewinter.github.io/2021/12/27/markdown-linter-deciding-what-is-important/"&gt;Deciding What Is Important&lt;/a&gt;, or
&lt;a href="({filename}/articles/SoftwareQuality/beta-bugs-8.md)"&gt;The Bug That Almost Knocked Me Down&lt;/a&gt;.
As an author, it is easy to talk about the more technical aspects of developing
a project, but as my experiences have taught me, they are only part of the equation.&lt;/p&gt;
&lt;h2 id="seriously-why"&gt;Seriously, Why?&lt;a class="headerlink" href="#seriously-why" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Regardless of anything others might say about how I am progressing with the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project, it is my project
and my contribution to the open-source community.  To that end, it means I have
the flexibility to work how I want, but I also bear the responsibility when
things do not go the way I want them to.&lt;/p&gt;
&lt;p&gt;And for me, that is part of the reason I decided to start working on this.  When
I started authoring articles, I noticed that there was only one other Markdown linter
out there.  While I do not knock that linter for what it is doing, I honestly wanted
something that was easier to use, easier to extend, and more correct.  On that last
point, please understand that the other linter is doing the best job it can given its
constraints.  I just wanted to write something that did not have those constraints.
Or at least try to create something that did not have those constraints.&lt;/p&gt;
&lt;p&gt;What are those two constraints?  The first one is that it is a linter that tries to
match the specifications for multiple Markdown engines as they were around four years
ago.  To that extent, some of the rules are more generalized than they could be if a
single specification was chosen.  The second one is that it is a linter that is very
general, using pattern matching.  From my point of view, I feel that the design choice
was very good at getting the linter to the 90-95% coverage mark, but it stopped there.&lt;/p&gt;
&lt;p&gt;For a handful of specific rules, context is needed.  There are just some patterns that require context
for a linter to properly understand them.  For example, there are a handful of rules
where knowing the context of being within a nested container block affects how the
leaf blocks inside of those containers should be treated.  Without that context, the
pattern is incomplete, creating either false negatives or false positives.&lt;/p&gt;
&lt;p&gt;So, I started with those things in mind.  I picked the
&lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown&lt;/a&gt;
specification because it literally is the de-facto standard.  It fills that role so
well that most of the more popular Markdown-to-HTML parsers have gravitated towards
it in the last three years.  This resolved the first constraint for me.  The second
constraint was resolved by my design to base the PyMarkdown linter on top of a fully
compliant GFM and CommonMark compatible parser.  By using the tokens used as an intermediate
form of the document, I can determine the proper context to use for each of the rules.&lt;/p&gt;
&lt;p&gt;But with those decisions comes a price.&lt;/p&gt;
&lt;h2 id="paying-the-piper"&gt;Paying The Piper&lt;a class="headerlink" href="#paying-the-piper" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The good point that I keep on reminding myself of is that I have a fully compliant
GFM compatible parser as the heart of the project.  However, it would be more correct
to say that “as far as I have tested”, the parser is compliant.  With over four
thousand scenario tests and climbing, I feel comfortable in claiming that I am close
to achieving my goal.  But I know that one area I have concerns about are nested
container blocks.&lt;/p&gt;
&lt;p&gt;To back that viewpoint up, all I must do is to look back over the past three months
at the different issues that I have fixed in the project.  As far as I can tell by
a quick look back at the project commit logs, I have been mostly checking in changes
to one of the container block modules, the markdown generator used to verify the tokenization,
or the testing of those changes.  And while I am finding only minor changes needed
to ensure the parser is working properly, I am still finding those small issues.&lt;/p&gt;
&lt;p&gt;Whether it is an issue such as
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/262"&gt;Issue 262&lt;/a&gt; or
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/263"&gt;Issue 263&lt;/a&gt;
dealing with bad HTML, which is parser related, or
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/252"&gt;Issue 252&lt;/a&gt;,
which looks like a simple whitespace problem but is really parser related, I am
still finding little issues that need to be fixed.  When I say little issues,
I mean in terms of their final change area.  For example, outside of the scenario
tests, Issue 262 required only fourteen lines to be changed before it was resolved.
However, it took around five hours of debugging and testing to arrive at those changes.&lt;/p&gt;
&lt;p&gt;And yes, I do get tired of testing the project and finding parsing issues.  But
as someone who has written a decent variety of parsers over the last thirty years,
I know that it comes with the territory.&lt;/p&gt;
&lt;h2 id="how-do-i-figure-out-if-it-is-worth-it"&gt;How Do I Figure Out If It Is Worth It?&lt;a class="headerlink" href="#how-do-i-figure-out-if-it-is-worth-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I was coming up with the ideas for this article, I started to think about this
and had a hard time at first coming up with an answer.  My first answer was “because
it is the right thing to do”, which I thought was a cop-out.  Given differing
requirements from customers, project management, resources, and technology, I am
decently adept at coming up with a good balance between those opposing forces. But
since I am in control of all those variables in this project, it seemed hollow
when I looked at it.&lt;/p&gt;
&lt;p&gt;So, I dug deeper over the next couple of days.  As I was working on the remaining
issues for this last week, I started jotting down reasons on one of my ever-present
sheets of paper.  Sometimes I would cross an idea out to replace it with
an even better version of that idea, and sometimes I would cross them out without
replacing them.  As I started to draft this article, I looked at them, and found
a common theme among them: because it is what I would expect from any other project.&lt;/p&gt;
&lt;p&gt;Hopefully, that does not sound as wishy-washy as the reason above, but it was the
overwhelming theme of the ideas I had written down.
The way I look at it is this.  If I publish a hastily written piece of code to
help someone out, I am going to make sure to include a note that
essentially says: “I didn’t really test this. Don’t rely on this for critical stuff!”
Likewise, if I look at something like
&lt;a href="https://www.pylint.org/"&gt;PyLint&lt;/a&gt;,
which defaults to the
&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;Python PEP8 style guidelines&lt;/a&gt;,
I expect PyLint to work as advertised.  With its long history and wide user base,
I also expect it to be well tested and debugged at this point.&lt;/p&gt;
&lt;p&gt;Following those two lines of thought, the &lt;code&gt;README.md&lt;/code&gt; file of the project
&lt;a href="https://github.com/jackdewinter/pymarkdown#note"&gt;states clearly&lt;/a&gt; at the top:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This project is currently in beta, and some of these documented things may not work 100% as advertised until after the final release. However, everything should be close enough to done that if you find something missing, please let us know.
And until I can get a sufficiently large user base, I feel it is up to me
to provide the bulk of the test cases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-is-my-answer"&gt;What Is My Answer?&lt;a class="headerlink" href="#what-is-my-answer" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes. The challenging work that I am putting in is worth it.&lt;/p&gt;
&lt;p&gt;On a personal level, I started this project with specific requirements in mind
and a desire to take this project to a full release.  That has not changed.
On a professional level, if I was using this project as a user, I would expect
to see a wide range of users, a large set of scenario tests, or both.  The
level to which that professional level was satisfied would directly feed into
my confidence about the project.&lt;/p&gt;
&lt;p&gt;And yes, it is often mind-numbing working coming up with variations on scenario
tests, and then implementing them.  But as I mentioned above, it is part of what
I would expect from any other project I would use. And, not wanting to be a hypocrite,
if I expect it from others, I need to hold myself to the same standard.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having hit the limit I wanted to for the next number release, I plan to do that
in the next two days.  Then on to more scenarios.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - There Is No Such Thing As Professional Life</title><link href="https://jackdewinter.github.io/2022/01/31/markdown-linter-there-is-no-such-thing-as-professional-life/" rel="alternate"></link><published>2022-01-31T00:00:00-08:00</published><updated>2022-01-31T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-01-31:/2022/01/31/markdown-linter-there-is-no-such-thing-as-professional-life/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/24/markdown-linter-why-nested-containers-are-so-difficult/"&gt;last article&lt;/a&gt;, I talked
about continuing to make progress on testing nested containers.  In this article
I talk about finding middle ground with yourself.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I thought about putting this article down in my personal section, but I believe
that it has relevance to anyone who is …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/24/markdown-linter-why-nested-containers-are-so-difficult/"&gt;last article&lt;/a&gt;, I talked
about continuing to make progress on testing nested containers.  In this article
I talk about finding middle ground with yourself.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I thought about putting this article down in my personal section, but I believe
that it has relevance to anyone who is in the software development field.  By our
nature, we try and analyzing and sort things into distinct categories.  And while
that ability helped me get to a certain point, I feel that I needed to change
direction to make further progress.&lt;/p&gt;
&lt;p&gt;Hopefully, it does not come off in these articles that I know it all.  Just like
everyone reading my articles, I take things one step at a time.  This last step
that I took was noticing something that I should have noticed before.  But at least
I noticed it: There Is No Such Thing As Professional Life.&lt;/p&gt;
&lt;h2 id="why-do-i-say-that"&gt;Why Do I Say That?&lt;a class="headerlink" href="#why-do-i-say-that" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think I have been building up to this point for a while now.  For the longest of
times, I have said things “you have to find balance between your personal life and
your professional life”.  And while it is true that there are usually at least two
aspects to your life, I now believe them to be aspects, not different entities.
But to understand that statement, I believe I need to help any readers understand
how I got there.&lt;/p&gt;
&lt;h2 id="the-journey"&gt;The Journey&lt;a class="headerlink" href="#the-journey" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For any longtime readers of these articles, it should not be a surprise that I have
Autism.  Since the moment when I was clinically diagnosed with Autism, it was the
start of another journey to understanding myself better.  From my interactions
with people before and after college to my first marriage, knowing where I stood
with respect to Autism helped me to understand how it shaped my life. And although
there were many painful interactions with my peers growing up, I was able to find
peace in accepting that they were largely acting out of fear and ignorance.  I was
different, and that can be scary.&lt;/p&gt;
&lt;p&gt;As my life navigated past my first marriage into my forties, I was able to find
my second wife.  She accepts me for who I am, while at the same time giving me
the personal desire to be better.  Just to be clear, unless it something like remembering
to do certain tasks (which I seriously am horrible at), she does not ask me to
change.  Instead, just by her love and support she inspires me to change.&lt;/p&gt;
&lt;p&gt;And with that momentum present in my life, I was able to move past a lot of negatives
associated with a disability like Autism.  Do not get me wrong.  My Autism presents
me with gifts, but it balances out those gifts with things that can sometimes be
crippling.  But instead of hiding who I am, I started to talk more openly about my
Autism and how it affected me.  On the personal side, I talked to people and helped
them to understand how I viewed interactions from my point of view.  From a professional
side, I helped managers and colleagues understand the benefits and challenges of
working with me.&lt;/p&gt;
&lt;p&gt;Along the way, there were a number of people whose comments I still cherish to this
day.  There was this one lady at an Autism hackathon who was inspired by me being
open about my Autism to try and talk to her family about her mental issues.  There
was the manager who commented on how introspective and understanding I was, and how
he thought I was more human than most of the people he knew professionally. And
finally, there were the people who said it was nice to hear someone talk openly
about their disabilities, instead of hiding them away in a closet.&lt;/p&gt;
&lt;p&gt;But even through all that, I still maintained that there were two distinct
parts to my life: a professional one and a personal one. I think I believed that
I could maintain a dam-like structure between the two sides of my life, and not
let stuff bleed from one side to the other. It was a nice dream, but not reality.&lt;/p&gt;
&lt;h2 id="everything-has-a-cost"&gt;Everything Has A Cost&lt;a class="headerlink" href="#everything-has-a-cost" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For anyone reading this who does not believe the same way as I do, I ask that
you keep on reading to understand my point of view.  I try as much as possible to
understand the points of view of others, especially if I disagree with them.  It
is part of how I was raised and who I am.&lt;/p&gt;
&lt;p&gt;I believe in the science around the pandemic that is going on.  Did the various
governments get it right from the get-go?  No.  But that is why they stuck the
label “novel” in front of it.  When faced with a new situation or experience,
how many of us can say that we are going to correctly respond every time?  If
we are honest, very few (if any) of us could realistically answer yes.  The best
we could do is hope that negative consequences of the times we were wrong did not
hurt people.&lt;/p&gt;
&lt;p&gt;So, yes.  I believe that social distancing, mask mandates, and vaccinations are
needed.  That is what my doctor and the people around him say.  That is what
the majority of the governments around the world say.  But with those evolving measures,
they also pointed out that there was going to be an emotional toll that we were
going to have to look for signs of among signs and friends.&lt;/p&gt;
&lt;p&gt;Nearing the two-year mark of the start of the pandemic, I did not realize that
the emotional toll was wearing on me until last week.  With my wife attending
an event and my son at work, I had a few hours to myself on Saturday.  Instead
of being happy that I got some of my own time, I felt dread.  As one of the
guys who is known for being silly and cracking jokes, dread is not a word that
I have typically used to describe myself or my feelings.  But it was what I
was feeling.&lt;/p&gt;
&lt;p&gt;But where was it coming from? Why was I feeling that?&lt;/p&gt;
&lt;h2 id="it-was-not-immediately-obvious"&gt;It Was Not Immediately Obvious&lt;a class="headerlink" href="#it-was-not-immediately-obvious" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having that free time, I decided to try and figure out where all this darkness
in my life was coming from.  Looking back at all my interactions over the past
month or two, I realized that I was quicker to get upset at people now than I
have been in years.  While I would take the time to strive to understand people
in years past, I was now quickly leaping to conclusions.  Thankfully, I have
people in my life that help me reorient myself, for without them I probably
would have made a fool of myself on multiple occasions.  But why?&lt;/p&gt;
&lt;p&gt;That is when I caught myself wondering why my personal life was bleeding into
my professional life and vice versa.  I spent a good hour or so
writing stuff down and exploring that using a technique that works for me.
It was only by chance that instead of scratching something else out that
I scratched out my basic premise, the wall between my personal life and professional
life.&lt;/p&gt;
&lt;p&gt;When exploring stuff in such an experimental manner, be it computer code or trying
to work through something like this, I do not believe in accidents.  That exploration
may result in “wasted” time being spent exploring an avenue, but it is not until that
avenue is explored that you understand what its real nature is.  Simple road you
need to travel down? Parking lot of issues for later? Throughfare to take you past
non-relevant issues? Dead end for what you are trying to find?  My experience tells
me that I must explore it to find out.&lt;/p&gt;
&lt;p&gt;So that is what I did.  And the result was interesting.&lt;/p&gt;
&lt;h2 id="where-did-i-end-up"&gt;Where Did I End Up?&lt;a class="headerlink" href="#where-did-i-end-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no such thing as professional life. There is no such thing as personal
life.  At least for me there is not. It is all connected in one big pool of things
that make me Jack.  Be it the emotional toll of the pandemic, the emotional toll
of having a mother with dementia, or the emotional effort needed to positively
talk to colleagues at work.  It all comes from the same source.  My life’s battery
for lack of a better term.  And before anyone asks, yes, it is rechargeable, but
no, I cannot swap out batteries when mine get low.  Keeping that analogy going,
solar energy does seem to recharge me somewhat thou.&lt;/p&gt;
&lt;p&gt;At fifty-three, I am not sure if I should have seen this earlier in my life,
or if this is early in life to be discovering this.  I think I had notions of
this in different forms over the last ten to twenty years, but never have I been
able to more fully comprehend what it means to me.&lt;/p&gt;
&lt;p&gt;What does it mean to me?  I love helping people, I love learning, and I love
being creative.  But each of those things, and the tasks needed to conduct
those things, take up energy that I have to budget to renew.  And as I now see
everything more clearly as one big bucket and not two smaller buckets, I realize
that borrowing from the other small bucket never made sense.  I might have been
fooled by for a while, but that was all.&lt;/p&gt;
&lt;p&gt;A large part of what helps me stay healthy is finding a good sense of balance.
But for some unknown reason, I always felt a bit of kilter from time to time, with nothing
in my then mindset that explained it.  While I am confident that this is not the
only thing preventing me from finding this balance, knowing that I need to account
for it will help me find part of what my current balance is missing.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I got a lot of scenario tests added, there is one more set that I want to
add before the next release.  And hopefully I will get through them this next
week.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Why Nested Containers Are So Difficult</title><link href="https://jackdewinter.github.io/2022/01/24/markdown-linter-why-nested-containers-are-so-difficult/" rel="alternate"></link><published>2022-01-24T00:00:00-08:00</published><updated>2022-01-24T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-01-24:/2022/01/24/markdown-linter-why-nested-containers-are-so-difficult/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/10/markdown-linter-know-when-to-break-the-rules/"&gt;last article&lt;/a&gt;, I talked
about finding a process that works for yourself.  In this article, I talk about
continuing to make progress on testing nested containers.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It took me a while to get this latest round of scenario tests added and passing,
but it was worth …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/10/markdown-linter-know-when-to-break-the-rules/"&gt;last article&lt;/a&gt;, I talked
about finding a process that works for yourself.  In this article, I talk about
continuing to make progress on testing nested containers.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It took me a while to get this latest round of scenario tests added and passing,
but it was worth getting them added into the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown project&lt;/a&gt;.
I have known that nested
container elements have been a concern of mine for a while, so it is nice to be
able to finally start addressing it.  Even if it did take a couple of weeks.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/956fbbd345e02440c9cde61c90495ac1f6b9f3c5"&gt;04 Jan 2022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/6d127143ccfccfc5bbfe86c12cf7bf206b8cb094"&gt;23 Jan 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-long-haul-issue-227"&gt;The Long Haul: &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/227"&gt;Issue 227&lt;/a&gt;&lt;a class="headerlink" href="#the-long-haul-issue-227" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The concept itself is simple, but the testing and debugging of the first set of
scenarios for this are far from simple.  The concept of this issue is to take
every combination of three-level deep Markdown containers, and make sure that they
all parse properly at their maximum distances.&lt;/p&gt;
&lt;p&gt;What does that mean?  Picked at random, the test function &lt;code&gt;test_nested_three_block_block_ordered&lt;/code&gt;
contains the following Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example could be taken out of the &lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown&lt;/a&gt;
specification for its simplicity.  It is simply an Ordered List element within a
Block Quote element within another Block Quote element.  Each bit of spacing between
each container element and the next element is done according to normal standards.&lt;/p&gt;
&lt;p&gt;But in the real world, things are not always standard.  There is an optional space
character that follows the Block Quote character (&lt;code&gt;&amp;gt;&lt;/code&gt;) and a required space character
that follows the Ordered List sequence (&lt;code&gt;1.&lt;/code&gt;).  At that point, to allow for different
expressions of the document, up to three space characters can be provided.&lt;/p&gt;
&lt;p&gt;While I was not able to find any reason why three or less space characters are
okay, but four or more space characters is an indented code block, my guess is because
of the tab character.  Putting aside that the tab character is interpreted as a
&lt;a href="https://github.github.com/gfm/#tabs"&gt;Tab Stop&lt;/a&gt; rather than four straight space
characters, it looks like Indented Code Block elements were prefaced with four
space characters, or a non-justified tab character, because it was easy.  The
way I think about it is this.  If you want to create an Indented Code Block element
outside of any container, simply use a tab character or its equivalent of four
space characters.&lt;/p&gt;
&lt;p&gt;But as I am about to show, that does add in some complexities to nested container
elements.&lt;/p&gt;
&lt;h3 id="indented-text-works-up-to-a-point"&gt;Indented Text Works… Up To A Point&lt;a class="headerlink" href="#indented-text-works-up-to-a-point" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To see this indented behavior in action, run this Markdown document through any GitHub
Flavored Markdown compliant
Markdown parser, such as &lt;a href="https://johnmacfarlane.net/babelmark2/?text=1.+zero+spaces%0A1.++one+space%0A1.+++two+spaces%0A1.++++three+spaces%0A1.+++++four+spaces"&gt;BabelMark&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="k"&gt;space&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;   &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;    &lt;span class="n"&gt;three&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;     &lt;span class="n"&gt;four&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Except for the English name for the number of spaces after the start
of the List element, the first four lines each translate neatly into a simple text element
within a List Item HTML element.  Once four spaces are used, as on the fifth
line, the List Item text transfers from simple Markdown text to an Indented Code
Block element.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;zero spaces&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;one space&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;two spaces&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;three spaces&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;four spaces
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this is simple when showing these indents and their behavior when starting
from column 1, it easily gets more complicated when nested containers come into
play.  That was one of the reasons that I introduced this series of scenario tests:
the &lt;code&gt;max&lt;/code&gt; series.  Starting with the Markdown document for the &lt;code&gt;test_nested_three_block_block_ordered&lt;/code&gt;,
test function, I then created the document for the &lt;code&gt;test_nested_three_block_max_block_max_ordered_max&lt;/code&gt;
test function, injecting three spaces between elements instead of zero spaces.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, I pedantically added one extra space character to each level of that
scenario for each container element, increasing the space between container elements
from three spaces to four spaces. So, for the &lt;code&gt;test_nested_three_block_max_plus_one_block_max_block_max&lt;/code&gt;
test function, I added &lt;code&gt;plus one&lt;/code&gt; space character after the first Block Quote element,
resulting in a document of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once that was finished, I also went through the combinations for the other two
container elements at that level, producing the required tests for those scenarios.&lt;/p&gt;
&lt;p&gt;It was not complicated, but it took a while to work through everything.  For each
of the &lt;code&gt;test_nested_three_&lt;/code&gt; modules, twelve new scenarios were added to cover all
the combinations.  With nine combinations of the base two container elements, which
meant that I added ninety-six new scenario tests.  And that was just the beginning.&lt;/p&gt;
&lt;p&gt;It was also interesting.  Plus-one indents at the first two levels were easy
to get working correctly, but it was the second lines that gave me the most trouble.
Making sure that the containers and indents worked together on that second line
was the bulk of the issue that I needed to fix.  But it was worth it!&lt;/p&gt;
&lt;h3 id="it-just-takes-time"&gt;It Just Takes Time&lt;a class="headerlink" href="#it-just-takes-time" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Adding all those scenario tests was a chore, taking a couple of days to work
through them all.  It just took time to run through each of the ninety-six different
scenarios, verify that I had entered everything in properly, and generate the HTML
output using Babelmark.  From there, I ran each scenario test individually against
PyMarkdown, noting which scenario tests passed and which scenario tests failed.&lt;/p&gt;
&lt;p&gt;In the end, just over half of the scenario tests passed, and just under half of
the scenario tests failed.  It was not the ratio that I was hoping for, but it
was the one I needed to work with.  So, little bit by little bit, I started
picking up groups of similar failures and dealing with them.&lt;/p&gt;
&lt;p&gt;Two weeks after I started working on those failures, I finally had them all
passing.  It was a real mixed bag of experiences.  Some of the failures that
I looked at were resolved within a couple of hours of debugging and fixing.
Other failures took a day or two for me to just figure out the debugging
end of things, with the fixing of the issue taking just as long.  In some
cases, I was moving code from deeper within the parser code to closer to
the surface.  For others, it was adding net-new code for a situation that I did
not have to cover before.&lt;/p&gt;
&lt;p&gt;And the amount of code varied as much as the location of the code and the complexity
met in figuring out what that code was.  In a couple of cases, I merely
had to ensure that a calculated value was being added to another variable in
the correct manner.  While those were nice to have, most of code fixes required
between ten and fifteen lines of new code, usually to compute a value that was
needed in another location.  And there was one case where the number of changed
lines peaked at around fifty lines.&lt;/p&gt;
&lt;p&gt;As I said above, it was a real mixed bag.  But as I have said in the last
couple of articles I posted, having a good set of processes that work for
me really helped.  Often, I ended up scribbling down the Markdown
document for the scenario and working through it on paper as well as through
the code.  There are may &lt;a href="https://ux.stackexchange.com/questions/91255/how-can-i-best-display-a-blank-space-character#:~:text=Visual%20representation%20of%20spaces%20in%20text%20are%20more,impact%20of%20the%20former%20representation%20in%20most%20fonts."&gt;Blank Characters&lt;/a&gt;
scribbled on those pages, from a habit I picked up years ago when I started
writing parsers.  From the above link:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The symbol ␢ has a long history of use for this purpose in early computer programming. It was handwritten on coding sheets by programmers to indicate a space character to punch-card machine operators (who were like a typing pool).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am not sure how common they are outside of my use of them in parser design, but
I find them to be invaluable for clearly writing down what is being parsed.&lt;/p&gt;
&lt;p&gt;So, it was a long journey to get those scenario tests passing, but I knew
it was just a matter of time before I got there.&lt;/p&gt;
&lt;h3 id="still-a-bit-left-to-go"&gt;Still A Bit Left To Go&lt;a class="headerlink" href="#still-a-bit-left-to-go" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So there interesting thing about adding a series of combinatorically generated
scenario tests is that interesting patterns appear.  For this set of scenario
tests, I know that there are some simple tests that I am going to have to add
in the next series of scenario tests.  A good portion of them are for my own benefit,
making sure that the project is already covering scenarios that I believe are
covered.  With my solutions for a small group of third-level nesting scenario
tests, I believe that my solutions might cause a problem if extended to a fourth-level
nesting scenario.  And finally, there are a handful of scenario test variations
that I missed with the current set of scenario tests.&lt;/p&gt;
&lt;p&gt;None of these issues (or possible issues) were things that I could have spotted
ahead of time.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With other things going on in life in the last couple of weeks, it sometimes was
a struggle to get some “me” time to work on the PyMarkdown project.  But with
few exceptions, it was useful time that helped me center myself.  There were a
couple of issues that I thought I would never solve.  In each case, I trusted
in my development process, took the breaks that I needed, and used a lot of paper
to scribble out possible parsing paths.  Because of my confidence in my process,
while I knew I might have difficulty figuring out how to solve the current issue,
I knew that I would get there.&lt;/p&gt;
&lt;p&gt;And it was this week that led me to an interesting conclusion: this is not the
last Container Block Processor module that I am going to write.  While the last
rewrite helped me get closer to a clean implementation, this recent set of issues
has led me to believe that I still have some learning left to do.  Only once I
finish that learning will I properly be able to implement a clean parser.&lt;/p&gt;
&lt;p&gt;I am okay with that.  It is probably not going to happen for at least a year,
and there is no timetable associated with it, but it will happen.  And when
I get to that point, I believe I will feel that it is the right thing to do.&lt;/p&gt;
&lt;p&gt;But right now, it is all about finishing these nested container tests.  And I still
have work to do!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As one of the sections above noted, I have a handful of extra scenarios that
I need to take care of before moving on.  Once those are done, I will probably
release a new version of PyMarkdown, just to make sure it is current.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Finding Something That Works</title><link href="https://jackdewinter.github.io/2022/01/17/markdown-linter-finding-something-that-works/" rel="alternate"></link><published>2022-01-17T00:00:00-08:00</published><updated>2022-01-17T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-01-17:/2022/01/17/markdown-linter-finding-something-that-works/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/10/markdown-linter-know-when-to-break-the-rules/"&gt;last article&lt;/a&gt;, I talked
about how I had to bend or break my own rules last week.  This week, I talk about
finding a process that works for yourself.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was a grueling week at work and at home.  Nothing specific, just a lot of small …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/10/markdown-linter-know-when-to-break-the-rules/"&gt;last article&lt;/a&gt;, I talked
about how I had to bend or break my own rules last week.  This week, I talk about
finding a process that works for yourself.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was a grueling week at work and at home.  Nothing specific, just a lot of small
stuff that had to be done and I just felt like I was hitting walls getting it done.
But amidst that
turmoil, I found comfort in being able to get deep into the occasional bit of work.
Even if it was
only for a half hour here and there, losing my mind in my own work for a while helped me relax.
And that relaxing helped me get through the week.&lt;/p&gt;
&lt;p&gt;So, this week, I decided to talk about what I have found that helps me get into
that mindset, in the hope of helping others with their own journey.&lt;/p&gt;
&lt;h2 id="finding-your-own-groove"&gt;Finding Your Own Groove&lt;a class="headerlink" href="#finding-your-own-groove" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Due to a lot of things happening in my personal life and professional life in the
past week, I did not get a lot done on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
As I have mentioned before, I need to take of my entire life, not just focus on
the one project.  And it is not like I did not get any work done this past week.
It was just the quantity of work done was a lot lower than I hoped for. And
while before that might have bothered me at one point in my life, I now realize
the fallacy of focusing too much of my life on one thing.&lt;/p&gt;
&lt;p&gt;Two thing that helped me accomplish the little work that I did this week was understanding
myself and having a good groove to my coding.  I will probably do multiple articles
in the future on understanding myself, but this week I want to focus on finding
that groove.
And while I do listen to music while coding, that is not the groove I am talking
about.  Groove itself is an interesting word.  According to &lt;a href="https://www.merriam-webster.com/dictionary/groove"&gt;Merriam-Webster&lt;/a&gt;,
there are six separate definitions attributed to the word.  The two definitions
that I think are most applicable are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;top form&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the middle of the strike zone in baseball where a pitch is most easily hit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To me, both definitions indicate a place where something is more easily
accomplished.  When I work, be it professionally or personally, that is the
mindset I aim for: keeping my efficiency maxed out.&lt;/p&gt;
&lt;p&gt;That is what a groove is about for me. Finding a groove is being able to get into
that mindset where I
can be as efficient as possible on the task that I am doing.  Maybe it is mowing
the lawn with headphones on, maybe it is loading the dishwasher with no music on,
but some tasks just work better when you get an environment set up that helps you
get the job done in what seems like no time.  It helps me get the task done, and
sometimes it also makes the time taken to perform the task seem like nothing at
all.&lt;/p&gt;
&lt;p&gt;And for software development, I really have two different grooves.&lt;/p&gt;
&lt;h2 id="my-debugging-groove"&gt;My Debugging Groove&lt;a class="headerlink" href="#my-debugging-groove" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe I have a solid groove for my debugging.  As I have mentioned in previous
articles, I prefer logging to interactive debuggers as I feel that I can see the
entire picture more clearly that way.  I will often turn on debug logging and execute
the test I am debugging to print out a very verbose log of what happened.  I typically
do so with a specific area of the Markdown translation that needs addressing, so I
quickly try and get to that area of the output.  From there, I make sure that the
logs show the relevant states that I need to see and go from there.&lt;/p&gt;
&lt;p&gt;It might seem boring, but it is what my debugging grove is all about.  I start with
an okay-ish picture of what I think is going on.  My goal is to improve the resolution
of that picture to the point where I can spot the problem.  Sometimes it is obvious
and sometimes it takes a couple of hours, but it seldom fails for me.  That process
is so ingrained into my tasks that I can easily get into a groove with me, my music,
and one terminal output window laid on top of one VSCode window with source code.
I get to a place where I do not think about what I am doing, I just think and do.&lt;/p&gt;
&lt;p&gt;For me, that is what works: having the data in front of me to help fill in the
gaps of the picture that I have in my head.  If I had to put some descriptions
to the style of debugging, I would probably use words like fluid and dense.  I
like a lot of organized information and the ability to move as freely as possible
through the data.  That balance of information just allows me to properly visualize
the specific debug tasks that I am undertaking.&lt;/p&gt;
&lt;p&gt;Or as Jimmy Fallon might say: “That’s My Jam!”&lt;/p&gt;
&lt;h2 id="my-coding-groove"&gt;My Coding Groove&lt;a class="headerlink" href="#my-coding-groove" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once I follow that path and I get to a probable reason that my code is not working the
way I want it to, that is where my coding groove comes in.  Knowing I was drafting
this article on Sunday, I saved some “groove code” that I wrote on Saturday:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_depth&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"$&amp;gt;stack:$:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"$&amp;gt;token:$:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;xx&lt;/span&gt;
    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"len(ws)=$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"len(containers)=$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;xyz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;container_level_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
        &lt;span class="n"&gt;abc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just for the record, the first sample that I pasted in this article was about four times the size of the
above text, but I trimmed it for readability.  I was okay in trimming it down
because the patterns in the removed code were just repeated patterns from the
above code.&lt;/p&gt;
&lt;p&gt;And yes, I totally admit the code is ugly.  It does not describe what it is doing,
it is not nicely organized, and contains a certain amount of cut-and-paste code.
But for me, looking at that code when I am in my own groove, it makes total sense
to me.  With the current context being the task that I am working on, I focus on
what changes I need to make to the code to bring it closer to the desired end goal.&lt;/p&gt;
&lt;p&gt;Would I ever check in code like this?  Nope.  But in terms of allowing me to stay
in my groove and focus on the problem at hand, it works wonders for me.  I do care
about code quality and readable code.  But none of that really matters until I can
get the code working properly.  Pretty code that is wonderfully organized just does
not matter if it does not work as intended.  Therefore, my coding process temporarily cuts
that requirement out of the picture to allow me to be more efficient.&lt;/p&gt;
&lt;p&gt;If I had to try and related it to a process that most people would recognize,
I would associate my process with writing an essay the way I was taught in high
school.  The debugging phase in the last section is doing the research for the
essay.  The “groove code” above is me writing out a preface, a body, and a conclusion,
keeping things loose until I find a combination of paragraphs that echo the
research and connect properly.  Once that is done, the rest is just window dressing
to make things look good, which is what the next section is about.&lt;/p&gt;
&lt;h2 id="after-the-groove-is-over"&gt;After The Groove Is Over&lt;a class="headerlink" href="#after-the-groove-is-over" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Besides sounding like a great name for a rock song, that process does leave me
with cleanup to do once I solve the problem.  I do not want to take away
the importance of this section by calling it “cleanup” or anything like that.
While the hard part is coming up with a working solution, it can also be difficult
to express that solution in a way that I will understand when I look at it
again two weeks from now.  I need to remove the code that is related into its
own function, give the function a good name, give the variables a good name,
and make sure that I will not look at it later and go “what was I thinking?”&lt;/p&gt;
&lt;p&gt;As an example, the first step in cleaning up that code was to move most of it
to its own function, &lt;code&gt;__handle_trailing_indent_with_block_quote&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;container_depth&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;have_pre_processed_indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;skip_containers_before_leaf_blocks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;used_indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContainerBlockProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_trailing_indent_with_block_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the &lt;code&gt;__handle_pre_processed_indent&lt;/code&gt; function that held the earlier version of the
code, it was obvious that the new code should have its own function.  However, when
I was fixing the code, it was also obvious that keeping everything in one place
made the most sense.  But now that I went from a fixing stage to a quality stage,
the priorities shifted.  Now it was more about making sure that the change that
I made was readable and maintainable.&lt;/p&gt;
&lt;p&gt;To that extent, I took some more time to provide each of the variables with a
more descriptive name of what it was doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__handle_trailing_indent_with_block_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;used_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"$&amp;gt;stack:$:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"$&amp;gt;token:$:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;stack_index&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;split_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="n"&gt;stack_index&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;used_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="n"&gt;stack_index&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;
                &lt;span class="n"&gt;used_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="n"&gt;stack_index&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
        &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;used_indent&lt;/span&gt;
        &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"len(ws)=$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"len(containers)=$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;used_indent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;have_pre_processed_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;used_indent&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;have_pre_processed_indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="n"&gt;have_pre_processed_indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;used_indent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The variable &lt;code&gt;xx&lt;/code&gt; became &lt;code&gt;used_indent&lt;/code&gt;, the variable &lt;code&gt;i&lt;/code&gt; became &lt;code&gt;stack_token&lt;/code&gt; and
so forth.  I also ran my standard tools &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;flake8&lt;/code&gt;, and &lt;code&gt;pylint&lt;/code&gt; on the
code to make sure I was not missing anything.&lt;/p&gt;
&lt;p&gt;Doing this step any earlier in the change process would have just slowed me down.
But with the changes finished and the “groove context” vanishing from my mind, it
was the right time to capture that information and reorganize.  Capture that
context in the naming of the objects as best as I can, and make it look neat.&lt;/p&gt;
&lt;p&gt;As a friend of mine once said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Leave it cleaner that you found it for the next developer.  Because remember, that next developer will probably be you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-does-this-mean-for-readers"&gt;What Does This Mean For Readers?&lt;a class="headerlink" href="#what-does-this-mean-for-readers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I have said in other articles about process, this is the process that works for
me and make me produce the best work.  There really is not guide that says, “if your
name is Jack, then this is the way you developer software”.  I have found that I
get little bit of insights from here and there, with more experimentation than
success.  But even little insights and experiments, whether the outcome is positive
or negative, helps me tune my process that much more.&lt;/p&gt;
&lt;p&gt;So, for any readers that are looking to improve their process, while I would like
to give each reader their own guide to developing at their most efficient: it is
up to you.  Read articles and see if something that another developer describes
in their process speaks to you.  Look at other aspects of your life and see if
you can transplant things that work in those aspects into your development
process.&lt;/p&gt;
&lt;p&gt;And please, if nothing else, experiment.  Experiment knowing that you can learn
from an experiment failing as well as from an experiment succeeding.  There is
no right answer that works for everyone.  Just a patchwork worth of process that
is tuned to how you work.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lots of external stuff, but I am glad I took the time to describe how I work
through a change problem.  Finding that set of processes that work for me took
years, and even then, I tweak and change them as I grow and learn.  Regardless,
it is good to share and perhaps helps others.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am making progress on the last batch of scenario tests that were added, but it
is slow process.  Hoping to get further on that this week.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Know When To Break The Rules</title><link href="https://jackdewinter.github.io/2022/01/10/markdown-linter-know-when-to-break-the-rules/" rel="alternate"></link><published>2022-01-10T00:00:00-08:00</published><updated>2022-01-10T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-01-10:/2022/01/10/markdown-linter-know-when-to-break-the-rules/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/03/markdown-linter-keeping-at-it-with-something-that-works-for-you/"&gt;last article&lt;/a&gt;, I talked
about how things went with taking my time to do things right with the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about more efforts along those lines and how I had to
bend or break my own rules this week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2022/01/03/markdown-linter-keeping-at-it-with-something-that-works-for-you/"&gt;last article&lt;/a&gt;, I talked
about how things went with taking my time to do things right with the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about more efforts along those lines and how I had to
bend or break my own rules this week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From a PyMarkdown point of view, I made progress on adding a more complete suite
of scenario tests to the project.  But more than anything else, I want to talk about
what happened to me on Friday night and how I believe I made the right choice…
even though I broke my own rules.&lt;/p&gt;
&lt;h2 id="normal-bug-fixing-this-week"&gt;Normal Bug Fixing This Week&lt;a class="headerlink" href="#normal-bug-fixing-this-week" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it took a while to work through the issues discovered with the nested container
scenario tests, I believe it was a huge success.  It did uncover a small handfull of bugs in different
components of the project, but it was better that I found them first rather than
a user finding them.  And the issues that I did find were not what I call “major redesign”
issues, but cleanup and tweaking issues.  Granted, some were more painful than
others to find and fix, but the changes were all minor changes.&lt;/p&gt;
&lt;p&gt;During that process, I did a lot of debugging and noted some scenarios
that I wanted to make sure were covered in the future.  There are some duplicates in
there, but there are also some interesting scenarios that I want to make sure are
covered.  If I had not done the effort of entering and verifying all those tests,
I believe I would still be trying to figure out what to test.  So, in multiple ways,
it was paying off dividends.&lt;/p&gt;
&lt;p&gt;A good example of interesting scenarios is the one that I picked to work on this
week.  I had noticed that spacing between some elements was not what I thought
it was, so I added all combinations of containers with their elements spread apart
to their maximum.  Then, for each of those combinations, I added one space before
each of those container markers to shift it from a nested container element into
an indented code block.  That took a while, and now I have another set of issues
to work through, like last week.&lt;/p&gt;
&lt;p&gt;And to round off the week, I picked the remaining issue from last week and started
to work on it.  While it did take me most of Sunday to complete, I was able to get
it completed and mostly ready by Sunday night.  Like the work from the week
before, there were a handful of small things that needed fixing up, as they were
all just slightly off.  Once I had those four or five things fixed up, I was able
to cleanly fix that issue.&lt;/p&gt;
&lt;p&gt;But to be honest, fixing that issue was more of a reward to myself for something
that happened on Friday night.  So, without further ado…&lt;/p&gt;
&lt;h2 id="my-own-personal-rules"&gt;My Own Personal Rules&lt;a class="headerlink" href="#my-own-personal-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that update out of the way, I want to focus the rest of this article on my
main topic: rules and when to break them.  My belief is that any software developer
with longevity in the software field has a set of rules that they work and live
by.  There are very few people that engage in software development as a career
without some aspect of the job stimulating their excitement.  I believe that it
is natural to follow that observation with another personal observation that many
software developers are often overwhelmed by that stimulation, having difficulty
in shutting off that simulation.
Why else are there many stories of software developers that obliviously
work through the night to get something done?  From my experience, it is because
it is generally true.&lt;/p&gt;
&lt;p&gt;But like any interesting job, there are issues. If too much time is spent on the
computer, then their family life suffers.  If there is not enough focus on eating
correctly and exercising often, then personal health suffers.  If the time
spent at work is not properly focused on the right things, then professional health
suffers.  There are many forces like this that work both with and against each other, and
these forces need to be balanced and constantly rebalanced.&lt;/p&gt;
&lt;p&gt;And for that, most software developers have their own rules. These rules for their
life leverage the rules they use in their day-to-day jobs.
Without these rules,
I believe that software developers ultimately either fail in their personal life
or in their professional life.  Both are not desired outcomes.  I have
heard many software developers say words like “I have
a rule with my spouse that…”, with some conditional rule.  Sometimes they are
hard and fast rules like “if I ask for help with the kids, they always come first” and
sometimes they are less rigid such as “keep overtime to a minimum.”  And for
the more successful among us, those rules work, often with constant fiddling.&lt;/p&gt;
&lt;p&gt;It should then come as no surprise that I have my own personal set of rules to
help me try and keep balance in my life.  The primary rule for me is that family always
comes first, and yes that include our dog, Bruce.  A good family balance is what
I credit for being the main reason that I have been able to grow professionally.
I make sure managers and colleagues know what I am doing, and how I mitigate any
time away from the computer.  I also make sure they know that when I am away from
my computer, I am away.  Period.  As such, I have a separate desk and
a seperate room in our house that we refer to as my “Work Office”.  The important
part for me is that my professional work is done on a separate computer and a
separate desk from my other work.&lt;/p&gt;
&lt;p&gt;For me, that is one of my rules.  When I sit down at that desk, I am doing my
professional work.  Unless it is for a small interlude, such as getting water or
going to the bathroom, when I get up from that desk, I am not working anymore.
And since the desk is in its own room, when I close the door in the evening,
I am definitely not working any more.&lt;/p&gt;
&lt;p&gt;Why is this important to me?  Because I have a tough time shutting down the parts
of my mind that analyze things.  There is a sequence to me leaving my work office:
turn off the music, turn off the computer, turn off the lights, close the door.
With each of those deliberate steps, I have trained my mind to acknowledge that
work is done for the day.  And for the most part, it works… most of the time.&lt;/p&gt;
&lt;h2 id="but-it-doesnt-always-work"&gt;But It Doesn’t Always Work&lt;a class="headerlink" href="#but-it-doesnt-always-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I do not usually talk about my professional work much, solely because of my above
rule that professional work stays on that computer, on that desk, in that room.
When I author articles, they are almost always about things that occur outside
of that office with my personal life on my personal projects.  It is not that I
do not undertake interesting stuff at my professional job, quite the opposite.
But if I let that little bit of my professional job leak into my personal life,
then I feel that I will find that more of it will leak in, destroying
the balance I have achieved.&lt;/p&gt;
&lt;p&gt;And I would be dishonest if I said that things did not leak out from time to time.
I am only human.  But I try my best to get those things talked about, resolved
at least for the day, and out of my mind as soon as possible.  My wife and I have
a healthy “I need to talk about…” attitude to help each other with exactly
those kinds of issues.  While it may not work for others, it works for us.&lt;/p&gt;
&lt;p&gt;Well, this past Friday was one of those days.  I had spent a decent amount of time
at work prototyping and polishing something, only to find out that we had not thought
the entire thing through.  As we talked about what was needed and what I had prototyped,
there was a gap that I needed to fill.  Basically, I needed to go back to the books
and try and figure out how to meet those needs.&lt;/p&gt;
&lt;p&gt;So, at roughly 1pm, I started working on trying to meet those “new” requirements.
A couple of times during the afternoon, I asked if I could vent to my wife, and she
nicely accepted.  With some frustration out of my head, I was able to keep on
making progress until 6pm when my son and I sat down to watch a football (a.k.a. soccer)
game.  However, even after the venting with my wife, I was still thinking about the
new requirements.  Talking with my son about the game and what was going on with
our favorite team did little to quiet the analysis still going on in my head.
Even after the game completed (our team lost), some activities that normally relax me
were interrupted by thoughts on how to solve the problem.  It was just not going away.&lt;/p&gt;
&lt;h2 id="making-the-choice"&gt;Making The Choice&lt;a class="headerlink" href="#making-the-choice" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To balance my various needs against each other, I try and get to bed between 11pm
and 11:30pm.  Truth be told, I could stay up a lot later than that without that
much problem.  But if I were to do that, it means being uncoordinated with my wife’s
schedule, and that is a problem for me.  That evening, as the clock got closer to that time,
I started noticing a problem: my mind was speeding up, not slowing down.&lt;/p&gt;
&lt;p&gt;That was a major problem.  My nightly activities are all geared towards winding
down after a certain point in the evening.  If I do not do that, I lay in bed and
start swearing at the ceiling because of my inability to fall asleep.  This has
a side effect of waking up my wife and our dog as well, which is not desirable.
So, I try and avoid it.  Stick to the routine and wind down at least one to two
hours before I want to go to sleep.&lt;/p&gt;
&lt;p&gt;I did not follow that.  My mind was still racing, and I had to make a tough choice.
I could try and do some more winding down activities and see if they would help,
or I could try and work through my problem enough so that I could mentally let it
go for the evening.  Trying to wind down would be following my rules about unwinding
each night and working through the problem would be going against it.  But what
I had to figure out was, regardless of which one was the rule, which one of those
had the best chance of succeeding.&lt;/p&gt;
&lt;p&gt;After five minutes of writing stuff down on paper, I came to a decision.
While it might take a couple of hours, once I thought through stuff to a certain
point, I could put it down.  To me, that was a fact.  I did not know how long
that would take, but my best guess was between two and four hours.  As I did
not know if my usual techniques would work, I chose the more solid set of results
over something with only possible results.&lt;/p&gt;
&lt;p&gt;It was not an easy choice.  Staying up late is not something that I do at this
point in my life without consequences.  It usually messes around with my sleep
cycle for at least three days, and that makes me grumpy.  As such, I try and
avoid that unless I feel there is enough benefit in doing so.  The benefit here
was an easy one: stay up and get the problem worked to where I could put it
down.  In my head, that was the only way I was going to get to sleep on
Saturday morning.&lt;/p&gt;
&lt;p&gt;But as soon as I made that choice, I knew it was the right choice.  I made the
choice to bend or break my normal rules, fully aware of the costs involved.
And I was okay with it.  I just made sure I had a glass of cool water to help me
think, before starting to work the problem.  It did take me roughly two
hours to get the problem resolved enough that I started yawning.  It was
another hour before I was able to close my eyes and not think about it for
a couple of minutes.  At that point, I was able to turn off my work computer,
shut things down, get ready for bed, and try and fall asleep.  And I fell
asleep within five minutes… at least it felt that way.&lt;/p&gt;
&lt;p&gt;Sometimes you must pick between guessing and facts, and there is too much
information to pick a clear winner.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Short and sweet this week.
I had a hard choice to make, and I believe that I made the right choice, so
good on that front.
I also was able to enter in more scenarios and get a relatively good success
rate on those scenarios, even though most of the scenarios were well off the
beaten path.
Overall, a good week.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I had thought that a reported issue was fixed, so my priority is fixing that
issue for the user.  After that, I have issues from last week to work on.
More of the same, but always different.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Keeping At It With Something That Works (For You)</title><link href="https://jackdewinter.github.io/2022/01/03/markdown-linter-keeping-at-it-with-something-that-works-for-you/" rel="alternate"></link><published>2022-01-03T00:00:00-08:00</published><updated>2022-01-03T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2022-01-03:/2022/01/03/markdown-linter-keeping-at-it-with-something-that-works-for-you/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/27/markdown-linter-deciding-what-is-important/"&gt;last article&lt;/a&gt;, I talked
about taking some time to do things right with the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about how that went and what got me through it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no way for me to state the effort that I have put into …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/27/markdown-linter-deciding-what-is-important/"&gt;last article&lt;/a&gt;, I talked
about taking some time to do things right with the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about how that went and what got me through it.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no way for me to state the effort that I have put into the PyMarkdown project
in the last two weeks without using phrases like “heavy lift”, “slogging”, or
“huge”.  But I went into that effort knowing that I had a solid strategy to succeed
and a solid personal process to get through that effort.  And for me, that made all
the difference.  I went into the effort with the confidence that I could tackle
this effort and get out the other side.  All because I figured out how I work best.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/ce35004107738607fe9cf55b121f2a6038abbb96"&gt;14 Dec 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/b3a1ca7152bc3f0c830773050cb292c307c8bc09"&gt;03 Jan 2022&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="cleaning-up-the-mess-i-made"&gt;Cleaning Up the Mess I Made&lt;a class="headerlink" href="#cleaning-up-the-mess-i-made" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When writing the heading for this section, I did not feel like sugar coating my opinion
of what I was doing at all.  In adding better testing of
the various nesting combinations, I had found a lot of issues that I needed to deal
with.  Thankfully, only one of those issues dealt with any asserts failing, which was
good.  But as the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project
is a Markdown linter, making sure that it parses the Markdown correctly and points
to the correct line and column is essential.  And most of the issues fell into that
second category.&lt;/p&gt;
&lt;p&gt;While I could easily bore any readers with a play-by-play of everything that was fixed, I do not
believe it would serve any purpose.  Unless a reader understands how the project
is put together, it would be a lot of &lt;a href="https://www.merriam-webster.com/dictionary/gobbledygook"&gt;gobbledygook&lt;/a&gt;.
However, describing my personally tuned process that got me through those issues is something
that I believe would be beneficial, so I am going to focus on that.&lt;/p&gt;
&lt;h2 id="find-what-works-for-you"&gt;Find What Works For You&lt;a class="headerlink" href="#find-what-works-for-you" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What I am going to talk about in this article is largely what works for me.  Even
with the specialization to how I work, this process is not perfect.  But it generally
gets the work done just over 90% of the time, and that is good enough for me.  If
I get into a situation what I am in the non-90% sections, it is a special case,
and I can figure out an alternate process to work through that situation.&lt;/p&gt;
&lt;p&gt;From my experience, having that developer-tuned process is important.  As a
code developer and test automation developer, I do not want to spend time trying to figure out how to
do something.  I know that is not where I shine the brightest.  As such, I have refined
my process over the years to keep the &lt;em&gt;noise&lt;/em&gt; of developing software as low as
possible. This allows me to focus on the parts of the process that I know I can
leverage to produce the greatest impact on a project.&lt;/p&gt;
&lt;p&gt;So here are some thoughts I have had about my personal process, as I worked
through things in the last two weeks.&lt;/p&gt;
&lt;h3 id="interactive-debugging-versus-logging"&gt;Interactive Debugging Versus Logging&lt;a class="headerlink" href="#interactive-debugging-versus-logging" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One thing that works for me is a focus on application logging.  Now, in the last
decade or so, I have heard many conversations saying that debugging through
logging is very last-millennium and antiquated.  In those conversations, the people
around those conversations typically agree with the speaker because they do not
want to appear old-fashioned and behind-the-curve.  But from my point of view,
that viewpoint is trying to fit everything into a single category instead of focusing
on the benefits of both tools.&lt;/p&gt;
&lt;p&gt;That is what I believe the discussion should be
about: the right tool for the right problem.
Any kind of interactive debugger is a tool.  I would also argue that writing stuff
to output and log files is also a tool, though a more process-oriented tool. Both
tools have their use and their place.  Focusing on one and downgrading the other
is usually not a winning strategy.  And those narrow strategies can often cost time and
money.&lt;/p&gt;
&lt;p&gt;Interactive debuggers are great at trying to pinpoint exactly what the problem is.
As a developer walks through the code, they can pause and examine any data structure
that the debugger has access to at that time.  But if the developer needs to figure
out what &lt;em&gt;just&lt;/em&gt; happened, they are out of luck.  As they can only see the state of
how things are at that time, they need to restart the application that they are
debugging and try and get to the desired point in the application as quickly as
possible.  And that exercise is not always easy.&lt;/p&gt;
&lt;p&gt;Debugging through logging supplies a lot of information depending on what is logged
and at what &lt;em&gt;log level&lt;/em&gt; it is logged at.  By executing the program with a specific
log level, a lot of information can be stored for later examination.  But the
problem with this approach is that the developer needs to take the time to place
log statements in their code to output desired information.  There is also a non-zero
execution cost to adding logging to an application.&lt;/p&gt;
&lt;p&gt;Which is better for me?  The truth is it depends.  If I am working on
something small and focused, usually I prefer using an interactive debugger.  In
most other cases, I prefer logging.  I just find that it is easier for me to visualize
the entire picture using logging, instead of the more limited view I get from a
debugger.  There is also an added benefit here in that many microservices
are deployed in environments where interactive debugging is not allowed.  I have found
that having healthy experience with logging has put me ahead in those situations.&lt;/p&gt;
&lt;h3 id="understanding-how-you-typically-work-and-optimize-it"&gt;Understanding How You Typically Work… And Optimize It&lt;a class="headerlink" href="#understanding-how-you-typically-work-and-optimize-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This one may seem like an easy decision, but it took me a while to figure out what that
process was for myself.  It took a certain amount of honest soul searching,
observation, and tool creation to get something that just works for me.  And this
is what I have found.&lt;/p&gt;
&lt;h4 id="write-tests-first-test-driven-development"&gt;Write Tests First - Test Driven Development&lt;a class="headerlink" href="#write-tests-first-test-driven-development" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For me, good project work starts with Test Driven Development.  I find
great utility in setting up the goals for a given part of a project before writing
the code to satisfy that goal.  I can honestly state that it has helped me improve
my design skills by fleshing out all the combinations that I need to handle before
I start writing the code.  By having those combinations laid out in front of me,
I can then visualize what I need to do at a high level and see if I have missed
anything large in my design.&lt;/p&gt;
&lt;h4 id="develop-in-small-steps"&gt;Develop In Small Steps&lt;a class="headerlink" href="#develop-in-small-steps" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The next part of my process is implementing features in small steps.  While it may seem
counter intuitive, I usually start with the negative tests first.  As I am implementing
the code to satisfy those negative tests, I will typically add just-enough of the
actual code needed to get the test passing.  When it comes time for the positive
tests, I have a good amount of foundation work done that paves the way for the
rest of the code.&lt;/p&gt;
&lt;p&gt;To help me in this part of my process is a good test framework and scripts to
help me execute tests quickly, precisely, and efficiently.  To reduce cognitive
overhead, all my personal Python projects have a &lt;code&gt;ptest.cmd&lt;/code&gt; script that is templated
from project-to-project.  It has a &lt;code&gt;-k&lt;/code&gt; option to use when I only want to run
against a subset of the tests.  It has a &lt;code&gt;-m&lt;/code&gt; option to use the multiple cores on
my development system to speed up execution.  It has a &lt;code&gt;-a&lt;/code&gt; option to show all
failed tests, instead of the default of stopping after the first five failures.  It
has a &lt;code&gt;-c&lt;/code&gt; option to execute the tests with coverage tracking enabled.  And to
make sure I am seeing a good summary of this information, the output from the
test script includes my &lt;a href="https://github.com/jackdewinter/pyscan"&gt;Project Summarizer&lt;/a&gt;
package to display a succinct summary of those tests and their code coverage.&lt;/p&gt;
&lt;p&gt;I then basically travel in a small loop over the resolution for whatever issue or
feature I am working on.  I implement towards getting a test to pass and use
the &lt;code&gt;ptest.cmd&lt;/code&gt; script in various formats to move towards resolution.  I do not
worry about any kind of metrics other than one: is the test I am working on now
passing.  From my point of view, given a decent design, there is no benefit to
me on working to make the code better until I have code that solidly passes the
test that I am working on.&lt;/p&gt;
&lt;h4 id="set-a-high-bar-for-quality-clean-and-polish-the-code"&gt;Set A High Bar for Quality - Clean And Polish The Code&lt;a class="headerlink" href="#set-a-high-bar-for-quality-clean-and-polish-the-code" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;However, when I get to that point, my &lt;code&gt;clean.cmd&lt;/code&gt; script comes into
play.  Like the &lt;code&gt;ptest.cmd&lt;/code&gt; script, I try and keep a singular script across
projects, with minor changes for each project where needed.  I do not worry about
which tools are executed against which code bases.  No matter how small the project,
it is essentially the same tools for each project.  For me, that reduces the
cognitive overhead of trying to remember what is being executed against which
project.  It is always the same.&lt;/p&gt;
&lt;p&gt;And yes, sometimes it takes multiple passes to pass the quality bar I have set for
myself. But I am okay with that.  If I have a set of tools that points out
when my code is not at the quality level that I want, I can deal with it.  From my perspective,
it means that I can focus on getting the code working cleanly before I start to
worry about making sure the code itself is clean and maintainable.&lt;/p&gt;
&lt;h4 id="external-validation-do-not-be-afraid-to-seek-advice"&gt;External Validation - Do Not Be Afraid to Seek Advice&lt;a class="headerlink" href="#external-validation-do-not-be-afraid-to-seek-advice" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I am constantly looking for ways in which I can hone my design skills, my testing
skills, and my implementation skills.  But I also realize that my brain has a finite
size and I need to rely on external products to help me in curating my skills in
small steps.  As such, I will often search the &lt;a href="https://github.com/marketplace"&gt;GitHub Marketplace&lt;/a&gt;
for interesting integrations that I can execute against the project code bases.  As most
of my projects are open-source, I can freely experiment with various integrations
without worrying about exposing private repositories.&lt;/p&gt;
&lt;p&gt;And, like all experiments, that experimentation is hit-and-miss.  Some integrations
occur in the VSCode editor that I use for writing Python, and some integrations occur
when a Pull Request is created on GitHub.  Sometimes there is a large amount of
benefit to the integration, and sometimes it is just a tiny improvement, but an
improvement in an area that I had not thought of before.  If nothing else, I try
it out and discard it a month later as not having enough benefit to justify the
cost.  However, I try and learn at least one thing from each integration that
I try.&lt;/p&gt;
&lt;p&gt;But for me, the important thing for me is to look for things that can help me and to try them
out.  I am honest with myself that I am not the world’s best Python developer.
However, I can use integration tools to help me benefit from their knowledge.
I would rather be a decent developer and experiment with various
tools than to just sit on my chair and go “Yeah, I am good enough!”.&lt;/p&gt;
&lt;h4 id="be-realistic-with-yourself"&gt;Be Realistic With Yourself&lt;a class="headerlink" href="#be-realistic-with-yourself" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;When I was reviewing this article, I decided that I wanted to add a section
here about being realistic with yourself.  I know that I often think things will
take a certain amount of time, only to have the actual time be some multiple of
that first estimate.  But that is just how things are.&lt;/p&gt;
&lt;p&gt;This recent upgrade to handling whitespaces properly and the testing of that
change is a great example of this.  I have somewhat lost track of the exact
number of changes that I needed to make to resolve the issues, but I am confident
it was somewhere between ten and twenty.  For each issue, there was a certain amount
of other work involved, but the focus was on the debug-code-test part
of the process.  If I was lucky, that part of the development effort was less than
two hours.  Most of the time it was in the five to seven hour range.
It was usually the case that I got the resolution coded, only
to find out that the changes I introduced negatively affected other parts of the
code.  There were also times where I made a change to make things work properly,
only to require changes to over 50 tests that were verifying information based on
the initial information.&lt;/p&gt;
&lt;p&gt;I had to be realistic with myself that it all took time.  A good example of this
were the numerous changes to properly note where the newline (&lt;code&gt;\n&lt;/code&gt;) character was
in tokens.  One small three-line change to the parser produces many small changes
to individual tests.  The &lt;code&gt;ptest.cmd&lt;/code&gt;
script would point out the newly failing test.  I would then visually examine
the test and the new proposed behavior to see if it made sense.  If so, I would
copy the added information into the test and run the &lt;code&gt;ptest.cmd&lt;/code&gt; script with that
specific test to make sure that the change was the right one.&lt;/p&gt;
&lt;p&gt;That round trip usually took five to ten minutes per test.  If I was working on a group
of tests like that, I could usually get the time down to three minutes, but it
took mental effort to do so.&lt;/p&gt;
&lt;p&gt;I was hoping that I would be able to get all the tests working by the middle of
my holiday vacation.  I was grateful that I was able to get them working by the
end of that same vacation.  All it took was a bit of a “cognitive reset”.&lt;/p&gt;
&lt;h2 id="keep-on-learning"&gt;Keep On Learning&lt;a class="headerlink" href="#keep-on-learning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It should be obvious that are two threads running through these sections:
incremental learning and automation.  I find that learning through repetition is
an uncomplicated way for me to learn that has low friction associated with it.  And by using
automation as the vehicle for that learning, I ensure that the code will measure
up against my quality bar.  As I learn more, I meet that bar without having to use
as much effort.  It is a win-win as far as I am concerned.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was a long slog.  A really long slog.  But a good side effect of that work is
that I know my personal process for development is getting leaner and more efficient.
I can cleanly define the stages of my development and adjust my use of tools
to allow me to more efficiently focus on my goals for that stage. And I
reaped the benefit of that during these last two weeks of worth.  If I had to guess,
I could have easily doubled the development time without the knowledge and tools
that I used.&lt;/p&gt;
&lt;p&gt;And I also am aware that I pushed through a lot of slight changes with large effects in
the last two weeks.  I do not believe that would be possible without me properly
understanding myself, taking the time I need to recharge, and ensuring that I have
a solid set of tools that works for me.  And I find all that to be cool!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having written down a fair number of new scenarios that I want to test, I am going
to start testing them later this week.  I am hopefully going to triage them tomorrow,
so hopefully I can get to them and start resolving them by the end of the week!
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Deciding What Is Important</title><link href="https://jackdewinter.github.io/2021/12/27/markdown-linter-deciding-what-is-important/" rel="alternate"></link><published>2021-12-27T00:00:00-08:00</published><updated>2021-12-27T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-12-27:/2021/12/27/markdown-linter-deciding-what-is-important/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/20/markdown-linter-getting-back-to-work/"&gt;last article&lt;/a&gt;, I talked
about getting back to work on testing the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about taking some time to do things right.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes, you just need to take some time and get things done right.  In the last
couple of weeks …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/20/markdown-linter-getting-back-to-work/"&gt;last article&lt;/a&gt;, I talked
about getting back to work on testing the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
In this article, I talk about taking some time to do things right.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes, you just need to take some time and get things done right.  In the last
couple of weeks, I made major modifications to the whitespace tracking system used
within the PyMarkdown project.  And that brought out some issues.  Some of those
issues were hiding from before, and some of those are new issues.  Both need to be
fixed.&lt;/p&gt;
&lt;h2 id="figuring-out-what-is-importand-to-me"&gt;Figuring Out What Is Importand To Me&lt;a class="headerlink" href="#figuring-out-what-is-importand-to-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, that happened.  After I rewrote the whitespace tracking system, I added a couple
of assert statements to make sure that I did not lose track of those whitespace
characters again.  And they triggered.  I thought I had all combinations put together
and tested, but I missed some.  The question was, how many other ones did I miss?&lt;/p&gt;
&lt;p&gt;As fate would have it, the morning before I was supposed to head over the mountain
to visit my relatives, there was a Winter Weather Advisory for the mountains passes
that I use to get over there.  I talked about going over the mountain with my wife
and her father, and we all agreed that safety and sanity were our number one priorities.
So, I stayed at home.&lt;/p&gt;
&lt;p&gt;Now, I have other stuff I want to get done as well, but I had around three days
of “extra” time available to me.  How did I want to spend it?  I love movies, and
I am watching a couple of movies a day, as well as getting caught up on various
series.  But that only takes up so much time.  And I like to be doing stuff that
has focus.&lt;/p&gt;
&lt;p&gt;Ultimately, I had to figure out what was important for me to accomplish during
the period between Christmas Eve Day and New Years Day.  I do want to work on
getting some other smaller projects ready for publishing, and that is a priority
for me.  Doing some learning is also a priority, as learning helps me professionally
and it also recharges my batteries.  But what about the PyMarkdown project?&lt;/p&gt;
&lt;p&gt;I am firm that I do not want to spend all my time on the PyMarkdown project, but
with the question of “what did I miss?” hanging over my head, I wanted to at
least be able to answer that question.  More importantly, I want to be able to
have a good idea of the scope of the issues, as well as their impact on the project
itself.&lt;/p&gt;
&lt;h2 id="making-that-decision"&gt;Making that Decision&lt;a class="headerlink" href="#making-that-decision" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that in mind, I decided to take a solid three days and to add a new level of
testing to the PyMarkdown project.  It was not going to be an easy three days
or a fun three days, but it was something that I felt I needed to do.  The way
I figured it out in my head, each day was going to be focused on one part of
putting the new scenario tests together.  Day One was dedicated to simply grunting
through the creation of all the test functions with their Markdown. Day Two was
dedicated to the painful process of executing every new scenario test and marking
each failed test as skipped.  Day Three was dedicated to going through the failures
and categorizing those failures into categories.&lt;/p&gt;
&lt;p&gt;And in case anyone asks, yes, there are that many combinations.  To be blunt, the
combinations spiral out of control specifically with three features: continuation
lines, “collapsed” block quotes, and new list items.   While I have yet to add proper
testing for new list items, I believe I have decent coverage of the other two features.&lt;/p&gt;
&lt;p&gt;Because of continuation lines, I not only have to test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but I have to test three related scenarios: without the first &lt;code&gt;&amp;gt;&lt;/code&gt; character, without
the second &lt;code&gt;&amp;gt;&lt;/code&gt; character, and without both &lt;code&gt;&amp;gt;&lt;/code&gt; characters.&lt;/p&gt;
&lt;p&gt;Because of “collapsed” block quotes, I not only have to test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but I have to test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And with new list items, it is more that the code I have in place recognizes
that a new list item can set a different starting point for any elements that
are contained within that list item’s scope.&lt;/p&gt;
&lt;p&gt;But in the end, I got it done.  It was long.  It was arduous.  It was painful.
But I got it done.  Now that I
have all those scenario tests and their failures in place, the next thing that I
need to do is to start going through them and cleaning up any failures.&lt;/p&gt;
&lt;p&gt;And that is what next week is about!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully, unless my brain falls out through my ears in the meantime, a new year
will mean getting a lot of these issues resolved.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Getting Back To Work</title><link href="https://jackdewinter.github.io/2021/12/20/markdown-linter-getting-back-to-work/" rel="alternate"></link><published>2021-12-20T00:00:00-08:00</published><updated>2021-12-20T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-12-20:/2021/12/20/markdown-linter-getting-back-to-work/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/13/improving-quality-just-get-it-done/"&gt;last article&lt;/a&gt;, I talked
about making hard choices and the follow-through that comes with making those choices. In
this article, I talk about getting back to work on testing the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There have been a few things on my mind this week, so I was …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/13/improving-quality-just-get-it-done/"&gt;last article&lt;/a&gt;, I talked
about making hard choices and the follow-through that comes with making those choices. In
this article, I talk about getting back to work on testing the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There have been a few things on my mind this week, so I was not able to get as
much work done as I had hoped to.  But I still made progress on the PyMarkdown
project, which is good.  With a bit of expectation setting and without too much
added fanfare, on to the rest of the article.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/7e8bb3f46788f9a4aaeb4ce43df72d6f57342447"&gt;14 Dec 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/886498cbd781c7753456b8bbe4c4bda0750e9c34"&gt;19 Dec 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="life-versus-side-projects"&gt;Life Versus Side Projects&lt;a class="headerlink" href="#life-versus-side-projects" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There have been a handful of articles out this past week about the Log4J vulnerabilities
and how they are being handled.  On one hand, as a professional software developer
who relies on projects from other people, I want those projects to work properly.
On the other hand, as a software developer who created the PyMarkdown project completely
on his own time, I understand the issues that have been brought up by open-source
maintainers.  As with a lot of things, it is a matter of finding a good balance
between two or more things.&lt;/p&gt;
&lt;p&gt;Every open-source project that I have had the pleasure of using is clear on
where the developer team for that project believes that line is for that project.
With very few exceptions, we are all working on these projects on our own time.
As such, I know that if I must decide between making an improvement on the
project or dealing with life, that life is going to win somewhere above 90% of
the time.  If an issue is especially important to me, I may decide to shuffle things
around to deal with that issue.  But that choice is my choice to make, not anyone
else’s choice.&lt;/p&gt;
&lt;p&gt;This week is a good example of those statements in practice.  As someone who
has &lt;a href="https://jackdewinter.github.io/categories#autism-ref"&gt;Autism Spectrum Disorder&lt;/a&gt;,
sometimes my environment gets to be more than I can handle, causing me to get headaches
that are often debilitating.  I struggled all week to work through a mild headache
that only got worse towards the end of the week.  And while I was able to get some
“easy” work done on the project, my health, my family, and my professional work
had to take priority.  In my mind, there was not even a question about it.  It
was just a fact.&lt;/p&gt;
&lt;p&gt;Taking it slower during the week helped me to have a successful week at work and
to take Friday off and try and deal with getting rid of my headache.  Making sure
I was dealing with that properly made sure that I was not (too) grumpy to my family.
And from a job enjoyment viewpoint, I was able to take part in a handful of very
interesting conversations with my colleagues at work.  My decision to focus my
energy where it needed to be, not on the PyMarkdown project, was the right choice.&lt;/p&gt;
&lt;p&gt;To take this back to the topic of open-source software.  RTFM.  Read The Full
Manual.&lt;sup id="fnref:yes"&gt;&lt;a class="footnote-ref" href="#fn:yes"&gt;1&lt;/a&gt;&lt;/sup&gt;  Most open-source is provided without any strings attached for
commercial use.  If you intend to use it in any kind of commercial or mission
critical software for your company, it is a risk that must be evaluated. If you
decide to accept that risk, it is up to you and your company to mitigate the risk
to your company, not the people maintaining the project.
Most
open-source projects encourage users to share their enhancements of the project
with other users.  This is part of the open-source community.  This is part
of how things work.&lt;/p&gt;
&lt;p&gt;While it was not explicitly stated for open-source, a quote from my mother on topics
like this is very fitting:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t go and take something from your neighbor, only to complain that
when you went to use it, it did not work like you expected it to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you use open-source, be prepared to maintain it if something breaks.  If that
happens, please be considerate and offer any improvements to the project maintainers.
If you do not fix it yourself, do not demand that the maintainers fix something
for you on your schedule.  Remember that it is called the open-source community.&lt;/p&gt;
&lt;p&gt;When it comes down to it, if you would not normally ask people on the team at your
workplace to do something in a given manner, you probably should not ask any
open-source maintainer to do the same thing.&lt;/p&gt;
&lt;h2 id="release-093"&gt;Release 0.9.3&lt;a class="headerlink" href="#release-093" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With my health context from the previous section in place, that context should set the
stage for the work that went on last week.  Having completed the bulk of the
refactoring work, it was time to create a release and get the refactoring
heavy fixes out to users.&lt;/p&gt;
&lt;h3 id="cleaning-up-for-the-release"&gt;Cleaning Up For The Release&lt;a class="headerlink" href="#cleaning-up-for-the-release" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There was only one thing stopping me from releasing the project: my scribbles.
Over the last two weeks,
I kept a set of notes on things that I wanted to check on before
the release.  During a normal week, I probably could have taken care of these
before the weekend, but this last week was not a normal week.  As such, it took
me until Saturday evening to get everything cleaned up.  It did take longer to
clean everything up than I thought it would, but it also felt like it was the
right amount of time to focus on those issues as well.&lt;/p&gt;
&lt;p&gt;What did I clean up?  Most of the things that I cleaned up were simple patterns
that I was not sure that I followed while doing the refactorings.  A good example
of this is my casual usage of &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;.  When I am writing code the
first time, I may decide to write the code as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is a perfectly logical construct to use, and I use it often.  When I
am writing code, I may be concerned about adding some extra information to the
function that will affect either &lt;code&gt;some_condition&lt;/code&gt; or &lt;code&gt;some_value&lt;/code&gt;.  As such, I
often decide to write constructs like the one above to give me flexibility
while implementing the algorithm. But once I have completed development, I
would easily argue that it is not as readable as it could be.  I would argue
that, if possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;some_condition&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is a better pattern to follow.  Instead of being spread out within the function,
the information needed to understand the &lt;code&gt;if&lt;/code&gt; statement is in the immediate
vicinity of the &lt;code&gt;if&lt;/code&gt; statement.  From my point of view, that is good!&lt;/p&gt;
&lt;p&gt;However, that improved pattern comes with a couple of caveats attached to it.  The first
is that the construct works in simple cases, but not in the more complicated cases.
A good example of that is a nested &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_other_condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;some_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, it may be possible to use that improved pattern on the second &lt;code&gt;if&lt;/code&gt;
statement, but it depends on the other logic in that function.  The other
dependencies in the function is also the second caveat.  If
the scope of the function is small enough, the possible dependencies on the &lt;code&gt;if&lt;/code&gt;
statement decrease, making it more likely that the improved pattern can be used.
But the larger the function, the more likely it is that the pattern will fail.&lt;/p&gt;
&lt;p&gt;Along with that pattern, there were also some refactorings to optimize how I
was using &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; statements.  Once again, I was not using them improperly,
but I felt I could rewrite them to be more readable and maintainable.  However,
along a similar line of thinking but with &lt;code&gt;if&lt;/code&gt; statements, I had decent room
for improvement there.  Refactoring &lt;code&gt;if&lt;/code&gt; statements into &lt;code&gt;if&lt;/code&gt; assignments where
possible helped, as did moving any variables used in &lt;code&gt;if&lt;/code&gt; constructs closer
to where they were being used.&lt;/p&gt;
&lt;p&gt;And in each case, it was a simple change, but it took time to work through
it.  Look through the source files for patterns that I wanted to improve on.  For
each change, I made the change and executed the full set of scenario tests against
the change before allowing it to remain.  If it did not pass, it was time for some
debugging.  When it did pass, make sure it looked right and stage it in the
project’s Git repository before moving on.&lt;/p&gt;
&lt;h3 id="lather-rinse-and-repeat"&gt;Lather, Rinse, and Repeat&lt;a class="headerlink" href="#lather-rinse-and-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Do that repeatedly.  If I had to guess, I repeated that action about 500 times over the
course of the week.  But it was decent work that I could easily
do when I had any energy and available time during a slow project week.&lt;/p&gt;
&lt;p&gt;And having crossed out all the scribbles on my work sheet, it was around noon
on Saturday when I was able to sign off on Release 0.9.3.&lt;/p&gt;
&lt;h2 id="issue-159-weird-indents"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/159"&gt;Issue 159&lt;/a&gt; – Weird Indents&lt;a class="headerlink" href="#issue-159-weird-indents" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Feeling better on Saturday evening then I had all week, I decided to start looking
at Issue 159.  At first glance it might not seem correct, but the following Markdown
document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;should parse into a level-one ordered list with two items and a level-two ordered
list nested within the first item of the level-one list.  Because the &lt;code&gt;1&lt;/code&gt; on the
third line occurs before the &lt;code&gt;I&lt;/code&gt; on the first line, the third line is interpreted
as a new list item for the level-one list instead of the level-two list.&lt;/p&gt;
&lt;p&gt;The problem was that this document was being parsed as a &lt;code&gt;1-2-2&lt;/code&gt; instead of a &lt;code&gt;1-2-1&lt;/code&gt;.
It took a bit of debugging to figure this one out, but I was able to resolve it within
a couple of hours.  When checking for possible parent lists for line 3, the code
was using the &lt;code&gt;ident_level&lt;/code&gt; field of the list tokens to determine which list was
the parent list.  However, because of the long number for the list item on
line 3, the &lt;code&gt;indent_level&lt;/code&gt; for the new token on line 3 was 7, greater than the
&lt;code&gt;indent_level&lt;/code&gt; of 6 for the list token from line 2.&lt;/p&gt;
&lt;p&gt;To properly figure out which token was the parent list token, I did my usual scribbling
on paper and came up with some very simple cases.  At that point, it became
obvious to me what the solution was.  For the first line’s list token, the effective
range for list item starts is between column 1 and column 3, creating an &lt;code&gt;indent_level&lt;/code&gt;
value of 3.  The second line’s list token range is between column 4 and column 6,
creating an &lt;code&gt;indent_level&lt;/code&gt; of 6.  So, while the right side of the start for line 3’s
list token is close to the range for line 2, the left side of the start for line 3
is firmly within the range for line 1.&lt;/p&gt;
&lt;p&gt;Once I changed the algorithms to check the start of the list item against the ranges
of the lists, the problem was solved!&lt;/p&gt;
&lt;h2 id="nested-lists"&gt;Nested Lists&lt;a class="headerlink" href="#nested-lists" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting on Sunday morning, I was able to make progress on setting up the
scenario tests based on the various combinations of containers.  While I did mark
this down in my Issues List as &lt;code&gt;Nested Lists&lt;/code&gt;, I understood that to mean not only
nested list elements, but any kind of nested container elements.  Confident that
the two-level nesting combinations were all tested by the specification itself,
I decided to start with the three-level nesting combinations.&lt;/p&gt;
&lt;p&gt;It took a while, but by the late afternoon I had all scenario tests coded and
the preliminary results for those tests.  There were a small handful of tests
that failed outright, mostly due to transitions between one container and the
other container and back again.  I quickly took care of those and fixed them
so that they would not assert and fail.  With those out of the way, the remaining
failures were both about whitespace.&lt;/p&gt;
&lt;p&gt;In both cases, the scenario tests pass their parsing requirements and their
HTML generation requirements but fail on putting the document back together
again.  In each case, it is because the calculated whitespace is not correct,
leading to regenerated Markdown code that is misaligned.  While it is important
to get these issues taken care of, it is just a matter of finding the right
whitespace to add at the right time.&lt;/p&gt;
&lt;p&gt;But, with Sunday evening approaching, I had to put of further exploration of
those failures until later in the week.  This article was only partially written,
and I knew it would take up the rest of the night getting it close to the point
where I could finish proofreading it on Monday night.  But I will be working
towards taking care of that soon.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know that this may seem like a trivial measure of where the project is at
the moment, but I am pleased that the count of serious issues is in the
low single digits.  I am also pleased that I am finding some issues with the
nested containers.  Well, I am not pleased that I am finding them, but I am
pleased that I am finding them before they are being reported.  And I am
quite sure that I can fix them relatively quickly.&lt;/p&gt;
&lt;p&gt;Another side effect of testing the three-level nested containers is that I
am fairly confident that it will have a positive effect on the four-level
nested container testing as well.  From what I was able to discern from the
whitespace failures, it looks like the whitespace that came before certain
container elements is not being properly added to the whitespace for more
nested containers.  That means if I properly address those issues now, it should
cut down on similar issues with extra nesting.  At least that is my hope.&lt;/p&gt;
&lt;p&gt;As always, keeping a positive attitude, and working towards getting the
remaining items on the Issues List resolved.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since I started working on Nested Lists, it is a good bet that I will probably
be working on that this week.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:yes"&gt;
&lt;p&gt;Yes, I know that the &lt;code&gt;F&lt;/code&gt; in RTFM stands for something else. &lt;a class="footnote-backref" href="#fnref:yes" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Improving Quality - Just Get It Done</title><link href="https://jackdewinter.github.io/2021/12/13/improving-quality-just-get-it-done/" rel="alternate"></link><published>2021-12-13T00:00:00-08:00</published><updated>2021-12-13T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-12-13:/2021/12/13/improving-quality-just-get-it-done/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/"&gt;last article&lt;/a&gt;, I talked
about making hard choices when it comes to projects.  In this article, I talk
about the follow-through with the choice that I needed to make last week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having decided that I needed to replace the whitespace processing in the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
parser, the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/"&gt;last article&lt;/a&gt;, I talked
about making hard choices when it comes to projects.  In this article, I talk
about the follow-through with the choice that I needed to make last week.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having decided that I needed to replace the whitespace processing in the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
parser, the follow through was brutal.  As of last week’s article, I had burnt
through all except twenty-five scenario tests.  Experience led me to believe
that those remaining tests were going to be the hard ones.  Either fortunately
or unfortunately for me, depending on one’s viewpoint, my estimates on
the PyMarkdown project and work to be done have been spot on lately.  It was
going to be on hell of a week!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.
For a full record of the changes talked about in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/35f869d34dfa65c12daa9e1f6c8890d4d45eead5"&gt;05 Dec 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/fd9707d86520688c39e175e1433b74807bacd8c2"&gt;12 Dec 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="setting-perspective"&gt;Setting Perspective&lt;a class="headerlink" href="#setting-perspective" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are often diverse ways of saying the same thing. The gist of what I
remember from one lecture that I attended is that the lecturer, someone smarter
than me by far, was talking about how 80% of coding is just following established
patterns.  He further went on to say that the remaining 20% is a mixed bag of tasks
that will either prove you to be a competent developer or force you to hurl your
monitor out the window in frustration.  For sure, that might seem like
hyperbole to most. But if you ask most software
developers to be honest about whether they have thought about throwing things around
the office, including their computer or monitor, most will admit that they have had
those thoughts.&lt;/p&gt;
&lt;p&gt;That frustration is just a natural thing.  Software does exactly what you it is
told to do, no more and no less.  It then follows that if a developer has an incomplete
picture of what they want to do, then the result is a program that is incomplete.
And while the high-level picture of what to be done is always clear, that picture
gets grainier as the software developer zooms in to individual sections of that
picture.  As a result, the gap between “the ideal” and “the reality” are what are
known as bugs.  The real question that faces most developers is whether they can
find all the relevant bugs before the users of their programs do.&lt;/p&gt;
&lt;p&gt;For the last week, I had been in a forest where there were tons of those bugs
lurking around every corner.  While it took a bit of work to get through them,
I had managed to vanquish most of the bugs about whitespaces.  But the reality
of software development is that the easy to find bugs are almost always the first
to go, leaving the trickier bugs to diagnose and fix.  That is where I started
this week.  With tricky bugs.&lt;/p&gt;
&lt;h2 id="dealing-with-tabs"&gt;Dealing With Tabs&lt;a class="headerlink" href="#dealing-with-tabs" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I talked about in the
&lt;a href="https://jackdewinter.github.io/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/#the-bad"&gt;last article&lt;/a&gt;,
tabs in Markdown are treated
as tab stops and not just blindly replaced with four space characters.  With eight
unresolved tests that dealt with tab characters, this was not something that I could
delay addressing for much longer.  There was no other choice other than trying to
tackle this issue head on.&lt;/p&gt;
&lt;p&gt;Dear readers:  I know you might think I am not being truthful about taking a good
day and a half to think about the impact of tabs on the parser. But I did. In my
usual fashion, I scribbled things out on paper and talked to myself, working through
the various issues that could arise with different solutions.  There were a half-dozen
“half-solutions” that I produced, but each was quickly discarded.  To be honest,
calling them half-solutions is probably generous.  In each case, I was trying
to deal with the effects of having tabs without dealing with the actual
tab characters themselves.&lt;/p&gt;
&lt;p&gt;That did not work very well for me.  Those solutions did take care of resolving
the perceived size of each tab character, but it introduced more problems.  Specifically,
they often included passing extra lengths around and made some calculations a
lot more difficult in the process.  On top of that, even with helper functions,
I found that I was coding variations of how to use those helper functions in multiple
places. It was just messy and not very maintainable.&lt;/p&gt;
&lt;p&gt;So, after deciding to use all those scribbles as kindling in our fireplace, I decided
to go for what I consider to be the nuclear option.  Instead of creating a maintenance
nightmare in the rest of the code, I decided to add this code to the Container Block
Processor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;line_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detabify_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;position_marker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PositionMarker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding a new &lt;code&gt;detabify_string&lt;/code&gt; function to the &lt;code&gt;ParserHelper&lt;/code&gt; class, I called it
from the start of the Container Block Processor and its handling of each line.
I used it to replace any tabs characters in the string in
that one place.  I used almost identical code once in the Markdown generator to
process the test data before the Markdown comparison there.&lt;/p&gt;
&lt;p&gt;And except for some altered test data that needed to be addressed, I was done.
There was no “including tab counts” that needed to be altered and passed around.
There was no need to know if I had preprocessed a given string or if I still had
to do that.  There was no weird &lt;code&gt;if&lt;/code&gt; statements to deal with tab characters.
Just one &lt;code&gt;if&lt;/code&gt; statement in the parser code, and one &lt;code&gt;if&lt;/code&gt; statement in the test
code and it was done.&lt;/p&gt;
&lt;h3 id="why-the-long-journey"&gt;Why The Long Journey?&lt;a class="headerlink" href="#why-the-long-journey" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So why did it take me so long to come to that conclusion?  Data integrity. At
the start of this project, I wanted to ensure that the integrity of the parser
was as high as possible at every stage.  I had it in my head that translating
the tab characters in any way was violating that rule. So, I tried to take the
long way around and deal with the effect instead of the character itself.&lt;/p&gt;
&lt;p&gt;And I guess in a certain way, it is changing things.  But the question that I ended
up asking myself was whether that violation was relevant to the tokenizer.  I could
easily argue that from the viewpoint of parsing the Markdown as a HTML parser, it
was crossing the line.  That was crystal clear.  But from the point of view of a
tokenizer, I ended up wavering on that viewpoint.  The tokens are just truthful
representations of what was parsed.  As the specification is clear that tokens are
to be interpreted as the corresponding number of space characters, there was a
new question.  That question was whether an uninterpreted or interpreted
representation of that tab character was the best choice.&lt;/p&gt;
&lt;p&gt;But it was not an easy journey or choice.  And as with all hard choices, it just
took a while for me to work through things and make sure that it was the right
choice.&lt;/p&gt;
&lt;h2 id="dialing-in-the-remaining-tests"&gt;Dialing In The Remaining Tests&lt;a class="headerlink" href="#dialing-in-the-remaining-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the tab tests out of the way, I needed to apply my normal work ethic
to get movement on the remaining issues.  But with a firm guideline on
how to approach the whitespace, it only took a couple of days before I had
the remaining scenario tests passing, with caveats.  I just focused on making
sure that the right whitespace was being applied to the properly scoped token,
and that helped a lot.  It was still challenging work getting everything assigned
properly, but a simpler set of rules made decisions easy to make.&lt;/p&gt;
&lt;p&gt;What were the caveats?  There are still a couple of scenario tests that
I disabled instead of getting them to work, and they fall into two groups. The
first group is a set of tests that have three or more levels of nesting.  While
there are some tests that “just work”, I want to make sure to spend some time
and effort to properly scope and focus on each combination and make sure that
it works.  The second group are scenario tests involving changing indentation,
usually from the Block Quote characters.  Once again, there are some simple
combinations, but I feel that the right thing to do is to specifically focus
on those combinations in their own scoped issues.&lt;/p&gt;
&lt;p&gt;And to be clear, everything still parses properly.  It is just the calculation
of the whitespace lengths that is in question.  And I want to get those right,
not just kind of right.  I passionately believe that it is a good enough reason to
handle them separately.&lt;/p&gt;
&lt;h2 id="cleaning-up"&gt;Cleaning Up&lt;a class="headerlink" href="#cleaning-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the remaining tests either passing or skipped, it was time to start cleaning
up after the mess of making those changes.  There were a handful of places where
I had forgot to change
from my “in the moment” variable names (like &lt;code&gt;abc&lt;/code&gt;, &lt;code&gt;foo&lt;/code&gt;, and &lt;code&gt;gg&lt;/code&gt;) to variable
names that describe their function.  Using &lt;a href="https://sourcery.ai"&gt;Sourcery&lt;/a&gt;, I
was able to calculate a relative health of each function, and I kept on refactoring
until that measurement was at least 40 for every function in the project.
Using &lt;a href="https://www.code-inspector.com"&gt;Code Inspector&lt;/a&gt;, I was able to quickly
figure out what PyLint issues needed to be addressed.&lt;/p&gt;
&lt;p&gt;To be honest, this part of the process was just relaxing.  Each of the refactoring
steps I took were easily tested, thanks to a complete set of passing scenario tests.
If I made a change and one of the tests failed, I just rolled back the last change
and tried again.  While it did take three or four hours to complete, there was
very almost no stress associated with those changes.  It was a pleasant change for
working over the weekend.&lt;/p&gt;
&lt;h2 id="watching-the-issues-fall"&gt;Watching The Issues Fall&lt;a class="headerlink" href="#watching-the-issues-fall" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finishing the prior work just before noon, I took a rather leisurely lunch and
got some of my energy back.  It was a hard slog getting everything finished and
tidied up, but it was nice to get there.&lt;/p&gt;
&lt;p&gt;The issues that I could choose to work on had as much potential to be easy issues
as they had to be difficult issues.  I knew that the first one,
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/99"&gt;Issue 99&lt;/a&gt; was going to be
easy as this work had all kicked off because of the problems I had addressing that
issue.  But what about the others?&lt;/p&gt;
&lt;p&gt;As I made my way through the other issues registered around the same time as Issue 99,
only one issue out of seven logged was not at once resolved.  I was fine leaving
those issues for another week.  It just felt good that the work that I had undertaken
to correct those other issues had cleaned up six other issues.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know it may sound funny to some people, but I was sure that the heavy sigh I
made when I finished working on the tests could be heard throughout my house.  It
was just a good feeling to simplify something that was complex and difficult
to maintain. It was even better to see multiple tests resolving themselves because
of me refactoring the whitespace from the containers.&lt;/p&gt;
&lt;p&gt;But I know that I need to focus more on cleaning up the remaining issues in both
the GitHub issues list and my own Issues List.  So hopefully I will be able to get
both of those cleaned up.  I know I am making timely progress though, and that gives
me hope that I can clean things up nicely within a couple of weeks.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having finished the changes to address whitespace issues, I am eager to get back
to a mixture of refactoring code and fixing issues.  Not sure what mix of those
two is going to happen yet, but I am fairly sure I want a good balance of both.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="extract method"></category></entry><entry><title>Improving Quality - Sometimes, There Is No Easy Way</title><link href="https://jackdewinter.github.io/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/" rel="alternate"></link><published>2021-12-06T00:00:00-08:00</published><updated>2021-12-06T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-12-06:/2021/12/06/improving-quality-sometimes-there-is-no-easy-way/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/29/markdown-linter-the-bug-that-almost-knocked-me-down/"&gt;last article&lt;/a&gt;, I talked
about my progress in reducing the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project issue count, including the
bug that almost knocked me down for the count!  In this article, I talk about
making hard choices when it comes to projects.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having fixed some issues in the prior …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/29/markdown-linter-the-bug-that-almost-knocked-me-down/"&gt;last article&lt;/a&gt;, I talked
about my progress in reducing the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project issue count, including the
bug that almost knocked me down for the count!  In this article, I talk about
making hard choices when it comes to projects.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having fixed some issues in the prior week, I decided to tackle another issue
from the outstanding issues list.  What I thought at first was a minor snag
turned out to be a major issue.  More than a major issue.  More of a story.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.&lt;/p&gt;
&lt;h2 id="the-good"&gt;The Good&lt;a class="headerlink" href="#the-good" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After taking a well-deserved night off, I started to work on one of the logged
issues, &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/99"&gt;Issue 99&lt;/a&gt;. There
was no specific reason that I picked this issue, except for a feeling that it was
a good starting issue for the week.  It looked like a simple issue.  When a HTML
Block element was encountered in a List element, the List element was being closed
prematurely.&lt;/p&gt;
&lt;p&gt;Digging into the debug for the failing tests, I was able to quickly spot what
the issue was, and subsequently fixed it.  I manually verified the tokens, and
everything looked good with each token.  Then I did a mental conversion from tokens
into HTML, and everything was also good with the conversion.  The only things left
were to verify the translation back into Markdown and to verify that the other consistency
checks were passing.&lt;/p&gt;
&lt;p&gt;Looking at the code in the &lt;code&gt;transform_to_markdown.py&lt;/code&gt; module, I tried to
add some simple code to adapt to the new condition, but it did not work on
that first try.  Come to think of it, it did not work on my second try either.
Having had a long day, I chalked that experience up to tiredness,
deciding to try again the next day.&lt;/p&gt;
&lt;h2 id="the-bad"&gt;The Bad&lt;a class="headerlink" href="#the-bad" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before sitting down at my computer for work that next evening, I made sure I had
a healthy meal beforehand, I was all nice and showered, and that I was nice and
relaxed for the most part.  If nothing else, I wanted to start that evening’s
work in a good mood to address the issue from the night before.  I mean…
how hard could it be?&lt;/p&gt;
&lt;p&gt;After three hours of trying to get it working and failing, I had my answer.
It was a tough problem to solve.  And it had to do a lot with history and
requirements.&lt;/p&gt;
&lt;p&gt;Because of the way that Markdown is processed, there are only two real solutions
to deal with containers and their impact on a given line.  The first solution
is to deal with containers after the leaf elements and inline elements have
been dealt with.  This is a lot less work in the end, but the setting up of
each element must be precise.  In addition to that, tabs within a Markdown
document are a problem.&lt;/p&gt;
&lt;p&gt;For reference purposes, Markdown parsers interpret tabs as tab stops of 4.  Tab
stops means that the tab-to-space conversion ratio depends on where in the line
the tab is.  The value 4 signifies that at best, a single tab character can be
interpreted as 4 space characters. The way to think about it is this. If the
index in the line is equal to 0 with a modulo of 4&lt;sup id="fnref:modulo"&gt;&lt;a class="footnote-ref" href="#fn:modulo"&gt;1&lt;/a&gt;&lt;/sup&gt;, 4 spaces are added.
If the index modulo 4 is 1, then 3 spaces are added.  Similarly, if at index 2,
then 2 spaces are added, and if at 3, then 1 space is added. This allows things
to be aligned on tab stops that occur in the middle of lines.  But these calculations
assume that you know that index on the line before calculating its impact.  As
any container indents have not been applied, that is not possible.&lt;/p&gt;
&lt;p&gt;The other option is to handle the container elements and the other elements on
a line-by-line basis.  Because of the above issues with tab stops, which is the
way I decided to do things.  I knew that it was going to be a bit more work to
keep track of both things at the same time.  I needed to juggle
distinct parts of the same line at the same time, ensuring that I knew what
the effects of the container elements were before parsing the line.  But to
be blunt, it evolved in a bad way.&lt;/p&gt;
&lt;p&gt;As I sat there that night, looking at the source code, I could not believe how
convoluted it had become.  There were more than three distinct types of merge
functions, each for a specific case.  And because I developed those functions
as I progressed, these were organic, with exceptions to rules throughout those
functions. It was just a mess to try and figure out.  &lt;/p&gt;
&lt;p&gt;I knew I needed to figure it out to move on, so I decided to take the next
evening to focus on understanding the algorithms.  Because I needed to ensure
that I verified any recent changes before going on, I really needed to understand
those functions and how to properly change them for the new data.  In my mind,
it was necessary.&lt;/p&gt;
&lt;h2 id="the-ugly"&gt;The Ugly&lt;a class="headerlink" href="#the-ugly" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While my optimism was a bit more deflated than the night before, I gave myself
a similar starting position the next night.  But even with that good starting
point, I spent the next two hours figuring things out and hurling at least a half
dozen “WTF?” insults at my monitor before I was done.  I had scribbles down over
a good five sheets of paper strewn all over my desk.  And those were just the ones
that I did not scribble on top of and then threw out because I got it wrong.  I
stopped counting those sheets after the first ten.&lt;/p&gt;
&lt;p&gt;It had taken me two hours, but I had a good concept of what was going on.  I just
did not have any ideas on how to change the code to do what I needed it to do
for the issue that I just fixed.  Frankly, I was amazed that what I had figured
out worked.  I did not intentionally mean for the code to get like that, but
the complex tangle of code was captured on those five sheets of paper.  And
they did not look neat and tidy either.&lt;/p&gt;
&lt;p&gt;It was on a bit of a whim that I started sketching out a similar algorithm
for managing the container text after the other elements had been processed.  This
was more in line with my design decision to keep container processing separate
from the leaf processing, so that was one good sign.  The other good sign was
that within fifteen minutes, I had a solid design for the base algorithm.  Twenty
minutes later, I had a list of the changes I would need to make to the whitespace
in the tokens to present the needed information required by the algorithm.&lt;/p&gt;
&lt;p&gt;I knew that the new sketch would not be that easy to implement, as things rarely
are as easy as they seem.  But even with a bit of extra work, the new sketch
design was simple to understand, and the changes to the tokens to support those
changes were also easy to understand.  There was only the one algorithm, with
a couple of small algorithms on the side to calculate lists for the main algorithm.
And I did not take care of translating tabs into spaces either.  That was something
else I would have to do.&lt;/p&gt;
&lt;p&gt;That is where I got to the hard part.&lt;/p&gt;
&lt;h2 id="the-hard"&gt;The Hard&lt;a class="headerlink" href="#the-hard" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was now the start of Friday evening, and I had an exceedingly difficult choice to
make.  If I stuck with the current algorithm, it would take me at least
another day or two to make my current change.  I did not have
any good estimate to base a guess on due to state of the algorithms.  I had a
good feeling that if I had to make similar changes, as I expected to have to do
for at least half of the remaining issues, I would have to take a similar
length of time to make those changes.&lt;/p&gt;
&lt;p&gt;On the other hand, I could change that algorithm to the proposed design, but there were
no guarantees that
it would fix things.  At the very least, the new algorithm would be more understandable,
and thus more maintainable.  But that just meant that the focus for addressing
issues like these would focus more on making sure that the right whitespace is
encapsulated in the tokens for the container algorithm to use.  And I would still
have to find a way to deal with tab characters.&lt;/p&gt;
&lt;p&gt;That is when I realized: there just was no straightforward way to deal with this problem.
Regardless of which option I chose, there would be a decent amount of work.  So,
any short-term considerations were out, as they were even.  I had to start
thinking about the long term, and how my choice would
reflect on the future of the project.&lt;/p&gt;
&lt;p&gt;Working things out in my head,
I knew that I had made my decision when I started to try and convince myself that
the current solution was good enough.  I was not doing my usual process of evaluating
multiple choices on their merit, I was arguing to myself that what I had met some
minimum bar that was hard to define.  To me, that meant that I had a clear winner
in the other choice, I was just worried about the cost.&lt;/p&gt;
&lt;p&gt;That is when I had an objective talk with myself about the merit of the new
approach versus the old approach.  If I had a tough time thinking about how to
modify the old algorithm now, how much would it cost to change it in another week
or two?  Would I have
to go through the same process again?  The more I asked myself questions like
that, the more the cost of the new algorithm did not seem to be that expensive.&lt;/p&gt;
&lt;p&gt;The more I thought about it, it was a hard decision, but I needed to rewrite that
part of the code.  A simpler algorithm costing more now would easily safe effort
in the future.  It sucked, but I knew I needed to make the hard decision.&lt;/p&gt;
&lt;p&gt;I was going to rewrite the project’s Markdown generator.&lt;/p&gt;
&lt;h2 id="the-work"&gt;The Work&lt;a class="headerlink" href="#the-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With everyone else out of the house for most of the day, I had a rare Saturday to
myself.  Because I expected to throw even more “WTF?” comments at my monitor,
it was a good thing I was alone in the house.&lt;/p&gt;
&lt;p&gt;The first thing that I noticed is that while I needed to rewrite the Markdown
generator, I did not have to rewrite most of it.  With one or two exceptions, the
handling of the non-container tokens was good.  As for those small exceptions, I
was sure that only the whitespace handling would need to change, and that I could
manage those changes.&lt;/p&gt;
&lt;p&gt;With that knowledge in hand, I turned off all existing checks, picked a simple
scenario test with multiple lines and no container elements, and started to work
on it.  I was not trying to solve the entire problem, just get
a good head start on rewriting the code.&lt;/p&gt;
&lt;p&gt;It was not too long before I had a promising idea of what I needed to do, and I committed
that code to my local repository.  Then I enabled the Markdown generator check
for only those scenario tests that did not container any container elements.
Working through those issues, I then added checking for scenario tests including
only Block Quote elements and worked through those issues.  Finally, I repeated
that process with List elements, to get to where I am now.&lt;/p&gt;
&lt;h2 id="looking-ahead"&gt;Looking Ahead&lt;a class="headerlink" href="#looking-ahead" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As of the writing of this article, I have 25 scenario tests that I need to get
working without enabling the remaining tests with both Block Quote elements and
List elements.  Turning those on, the total jumped to 53 scenario tests, which
is still a manageable number.  Some of those tests are going to be easy to resolve,
and there are other tests that are going to tax me.  But having the simplified design
means that it is easy to defend and that change makes it worthwhile&lt;/p&gt;
&lt;p&gt;It is worthwhile because I can easily maintain a picture in my head about what
needs to happen.  Every single whitespace character needs to be preserved in a
token somewhere.  Most of the time, which means that I need to ensure that the
whitespace emitted in container tokens is correct.  That is simply a fact because
the new algorithm is simple, and I mean to keep it that way.  Sure, it is shifting
the effort to the tokens, but I feel good about that.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During the middle of the week, I was at a bit of a low point, mentally speaking.
While I realize
that I am not perfect, I do hope that I make good development choices that do not
result in too much wasted effort.  I do acknowledge that there are parts of the PyMarkdown
code base that look busy, but usually I keep things grouped by
functionality.  But in those cases, there are a small group of functions that
provide support for each other and their common responsibility.  In each of those
cases, I can usually pick up a function and understand its purpose within
five minutes, and what to change in fifteen minutes.&lt;/p&gt;
&lt;p&gt;Not being able to do that is exactly what I had to come to terms with during
this week.  I had spent time maintaining code that became overly complex and spun
out of control.  It was enough out of control, that I did not think that there
was an option other than to rewrite that functionality using a different algorithm.
That hurt.&lt;/p&gt;
&lt;p&gt;But as I author this article, I think my viewpoint has changed.  With around fifty
scenario tests left to convert and get working, I find myself having a renewed
sense of optimism.  The new code is cleaner and more direct on what it is trying
to accomplish.  The new code is independent of the processing for the other
Markdown elements, so it just focuses on what it needs to do.  And more importantly
to me, the new code is easily more maintainable.&lt;/p&gt;
&lt;p&gt;Did I throw away a Saturday on getting the new code to work? Yes.
However, if I am honest, this new code just feels better.  It is a bit more work
right now to get back to a “stopping point” where I can start fixing issues
again.  But I am more confident that any later changes can be incorporated into
the generation of the tokens themselves, not requiring any changes to the new
functions for handling container elements.&lt;/p&gt;
&lt;p&gt;And when it all comes down to it, that is what is important.  I sometimes forget
that every line of code that I write is an experiment.  I make good guesses
as to what I need, so my coding accuracy is decent, but it is still just a guess.
In this case, an experiment failed, and I needed to try and find a better way to
accomplish the same task.&lt;/p&gt;
&lt;p&gt;So, yes. it sucks that I had to do a rewrite. But honestly, sometimes, there
is no uncomplicated way, just difficult paths to follow.  And I am okay with that… now.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since I have started on the first part of this changeover, it makes sense
that I keep on going until it is finished.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:modulo"&gt;
&lt;p&gt;This is a fancy way of saying “what is the remainder after dividing by the other number?” &lt;a class="footnote-backref" href="#fnref:modulo" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="extract method"></category></entry><entry><title>Markdown Linter - The Bug That Almost Knocked Me Down</title><link href="https://jackdewinter.github.io/2021/11/29/markdown-linter-the-bug-that-almost-knocked-me-down/" rel="alternate"></link><published>2021-11-29T00:00:00-08:00</published><updated>2021-11-29T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-11-29:/2021/11/29/markdown-linter-the-bug-that-almost-knocked-me-down/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/22/improving-quality-finding-better-tooling-extact-method/"&gt;last article&lt;/a&gt;, I talked
about my progress in refactoring and my experience with the three added tools. In
this article, I talk about the work I did this week, including the bug that almost
knocked me down for the count!&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What a long two weeks of …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/22/improving-quality-finding-better-tooling-extact-method/"&gt;last article&lt;/a&gt;, I talked
about my progress in refactoring and my experience with the three added tools. In
this article, I talk about the work I did this week, including the bug that almost
knocked me down for the count!&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What a long two weeks of work I just had on the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
project!  I took those two weeks and
invested them wisely in doing some major refactoring on the project.  The project itself was
in decent shape, but I had let some of the functions grow to large and with too many
responsibilities.  For my own sanity and for the project’s own good, I needed to
take some time and get it closer to what I would consider to be a good, healthy
code base.&lt;/p&gt;
&lt;p&gt;But that did not mean the work was over.  Not by far.  There were still a couple
of cleanup items that I needed to attend to, plus a list of issues that I found
while doing the refactoring. And while it was nice to take a bit of a break, I
needed to get back to focusing on getting things progressing forward to a non-beta
release soon.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/e842435752235675cfca5ed17e62122608042e85"&gt;22 Nov 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5ab751db859c92bd25f3edcc253d71b0b889659f"&gt;28 Nov 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="issue-151-doing-some-cleanup"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/151"&gt;Issue 151&lt;/a&gt; - Doing Some Cleanup&lt;a class="headerlink" href="#issue-151-doing-some-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It will probably not surprise any long-time readers that I decided to take
a small amount of additional time to tidy up some loose ends left after the
work I did in the last two weeks.  Having touched a substantial part of the files
in the project’s core, I wanted
to at least go over the code once and look for anything that I could easily
simplify to make it more maintainable.&lt;/p&gt;
&lt;p&gt;There were no tremendous changes, just a lot of little ones.  Things like simplifying:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;coalesced_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;coalesced_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;into:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;coalesced_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and moving small classes such as the &lt;code&gt;ContainerIndices&lt;/code&gt; class into their own modules.
I also double checked the use of return codes from functions to make sure that
they were still being used and removed them if they were not being used.&lt;/p&gt;
&lt;p&gt;Other than that, there were cases where I took multiple variable initializations,
such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;processed_parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and condensed them down into:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;processed_parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even with &lt;a href="https://pypi.org/project/black/"&gt;Black&lt;/a&gt; reformatting such assignments
across multiple lines, I have gradually been moving towards grouping all my
variable initializations together in that manner. I
am not sure if every Python developer feels that it is a good style, but I do.
For me, it clearly states that these variables are being set together and eases
my ability to read the functions.  Basically, it works for me.&lt;/p&gt;
&lt;p&gt;But after an evening of going through the source code and cleaning it up,
I knew I had to start making progress on the other issues.&lt;/p&gt;
&lt;h2 id="issue-155-refactoring-common-structures"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/155"&gt;Issue 155&lt;/a&gt; - Refactoring Common Structures&lt;a class="headerlink" href="#issue-155-refactoring-common-structures" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the code base over the last few weeks, I really wanted to be able to
harmonize a few of the
variables that get passed repeatedly into functions.  While there are more examples
of that in the code base than I would like, the ones that I picked to work on for
this ticket were the &lt;code&gt;this_bq_count&lt;/code&gt; and &lt;code&gt;stack_bq_count&lt;/code&gt; variables.  These are
just one example of variable tuples where two or more variables are usually seen
together.&lt;/p&gt;
&lt;p&gt;While not used outside of the Container Block Processor, these two variables are
heavily used inside of the Container Block Processor to capture the current count of
block quotes.  As their names suggest, the &lt;code&gt;this_bq_count&lt;/code&gt; variable tracks the
“observed” count of block quote characters and the &lt;code&gt;stack_bq_count&lt;/code&gt; variable tracks
the current number of block quote tokens on the stack.  As a Block Quote element
can start and stop on any line, these variables are passed together to ensure
the current state is well known.&lt;/p&gt;
&lt;p&gt;At least they were passed together until this work was completed.  When I looked
at the source code for the Container Block Processor, the Block Quote Processor,
and the List Block Processor, there were only five places where these values were
not passed together.  As such, it made sense to add a new class, BlockQuoteData,
and encapsulate those values inside an instance of that class.  It was a bit of
work to move the code to use the new variables, but it did make the code cleaner.
And that means lower maintenance, so that was good!&lt;/p&gt;
&lt;h2 id="issue-157-upgrading-test-scripts"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/157"&gt;Issue 157&lt;/a&gt; - Upgrading Test Scripts&lt;a class="headerlink" href="#issue-157-upgrading-test-scripts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From experience, depending on how software developers work, they typically either
love typing things out manually on the command line or they love to use scripts.
With my propensity for mistyping
things, otherwise known as “fat-fingering”, I fall into the “love scripts” category.
The PyMarkdown project is a fitting example of how I use scripts to make the simple
development tasks into scripts.&lt;/p&gt;
&lt;p&gt;My ability to run Python tests using a script is a example of this practice.
As I do my PyMarkdown work on Windows,
I have a &lt;code&gt;ptest.cmd&lt;/code&gt; script that has evolved to have a fair amount of usability,
some of which is the re-used by my &lt;code&gt;clean.cmd&lt;/code&gt; script.  But even with the functionality
that it has,
there were times where I could literally go to my kitchen, make a simple sandwich,
eat it, and be back in front of my computer before the script completed.  Granted,
that was running the &lt;code&gt;clean.cmd&lt;/code&gt; script with a slowdown for measuring code coverage,
but it was still a long time to wait for a script to complete.&lt;/p&gt;
&lt;p&gt;I had looked around and found a couple of PyTest addons that could possibly let
me run the tests on multiple cores, something that would hopefully reduce those
long testing times.  As the upside to finding a workable addon was huge, I took
an evening and experimented with two candidates.  While the first candidate failed
right away, the second candidates looked promising.  After a bit of research on
the issues that I was seeing, I was able to resolve those issues and I added support
for the &lt;code&gt;pytest-xdist&lt;/code&gt; package into the project.&lt;/p&gt;
&lt;p&gt;I think the reasons that this package works is that it seems to keep things simple,
and it has been around for a while.  By adding the &lt;code&gt;-n !CORES_TO_USE!&lt;/code&gt; argument to
where I invoke PyTest in the script, I was able to control how many cores were
used by PyTest on my machine.  Deciding to take a cautious approach, I added the following
code to the script to only use one-half of the available cores for testing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;defined&lt;/span&gt; &lt;span class="nv"&gt;PTEST_MULTI_CORE_ARGS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;/a&lt;/span&gt; &lt;span class="nv"&gt;CORES_TO_USE&lt;/span&gt;&lt;span class="o"&gt;=%&lt;/span&gt;&lt;span class="nv"&gt;NUMBER_OF_PROCESSORS&lt;/span&gt;&lt;span class="o"&gt;%/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;!CORES_TO_USE!&lt;/span&gt; &lt;span class="ow"&gt;LSS&lt;/span&gt; 1 &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;CORES_TO_USE&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;1
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;PTEST_MULTI_CORE_ARGS&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;-n &lt;span class="nv"&gt;!CORES_TO_USE!&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Digging into the occasional failures I was getting, I added the &lt;code&gt;--dist loadscope&lt;/code&gt;
flag as per a suggestion from a reply to a similar question on Stack Exchange. With
the occasional failure not showing up since then, I knew I had a viable solution.&lt;/p&gt;
&lt;p&gt;To be open about the entire process, the bulk of the work for these changes was done while I was working
on the previous two issues, so I had a lot of time to experiment with what settings
work best with the way that I work.  That one-half of the available cores was arrived
at because it seemed to be a good balancing point between making my system crawl
and getting a good speed boost for the tests.  Similarly, I added an optional
&lt;code&gt;--maxfail=5&lt;/code&gt; to the PyTest command line to better manage the failure cases.  However, as there
is a greater chance that failures will happen in large batches, such as when I
am refactoring, the limit is enabled by default and disabled by using the &lt;code&gt;-a&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;Based on the refactoring work I did during this last week, this work has been
extremely useful in cutting down test run times.  The time for a full test run with
coverage on my machine went from 7 minutes 32 seconds to 1 minute 35 seconds.
For a nomrmal full run, the duration went from 1 minute 44 seconds to 36 seconds.
Between that and similar tweaks to the other linters, I was happy
with this progress.&lt;/p&gt;
&lt;h2 id="issue-93-this-is-that-bug"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/93"&gt;Issue 93&lt;/a&gt; - This Is That Bug&lt;a class="headerlink" href="#issue-93-this-is-that-bug" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, this is the bug that almost knocked me down.  In all honesty, it probably knocked
me down more than a couple of times, I just go back up right away and got back to work.
I do know that at least once
I needed to walk away and collect my cool before getting back to solving the problem.
Basically, resolving this issue was a test of my will to properly fix this issue instead
of doing a partial job.  And it was not always pretty.&lt;/p&gt;
&lt;p&gt;Due to commitments at home, I spent the American Thanksgiving holiday at home with my
son.  While we had loose plans to chill out during the holiday weekend, we both had
a lot on our plates and just decided to watch a Champions League game together and
recharge our batteries.  This ended up being useful because of some research that I
had started to do earlier on in the week on
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/93"&gt;Issue 93&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In doing my research and playing around with finding a quick solution for this issue,
there was one thing that became at once clear.  Depending on how you look at the
tokens, I either did not have the correct information or I had conflicting information
in the tokens.  Specifically, I was noticing that the whitespace in and around List
elements and Block Quote elements was not being stored in the tokens properly.&lt;/p&gt;
&lt;p&gt;The issue was around how this document was parsed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;this&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;*****&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When parsed, the Block Quote token and the List token were both recording the
whitespace associated with the first line.  In particular, the Block Quote token
was storing &lt;code&gt;&amp;gt;{space}&lt;/code&gt; and the List token was storing &lt;code&gt;{space}{space}&lt;/code&gt;.&lt;sup id="fnref:curlies"&gt;&lt;a class="footnote-ref" href="#fn:curlies"&gt;1&lt;/a&gt;&lt;/sup&gt;
My original thought was that this decision would be convenient in that the inner
List token would simply “know” that its two space characters were the
greater-than character and the space character from the Block Quote token. When
I was working through that part of the parser, it made sense.&lt;/p&gt;
&lt;p&gt;Given time to work on other features, that decision was looking less and less
correct.  There were competing parts of the algorithms that needed their data in
one of two formats, and it was not always clear which format was correct.  On top
of that, the extra work to convert between the two formats was not done consistently
and needed more maintenance than I hoped for.&lt;/p&gt;
&lt;p&gt;So, before I did anything else, I needed to make a choice on how to
approach this: pay now or pay later.&lt;/p&gt;
&lt;h3 id="the-decision"&gt;The Decision&lt;a class="headerlink" href="#the-decision" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Looking at a couple of relatively open days ahead of me, I needed to decide how
to most effectively apply that time to the PyMarkdown project. The one
option was to clear out multiple issues, but only touch the code that I
needed to.  This would incur extra costs in the future, but I could budget those
costs over a couple of weeks.  The other option was to buckle down with the current
time I had and make major progress to getting that work done. That would incur an
immediate expense but would involve less rewriting of code later.&lt;/p&gt;
&lt;p&gt;It was not any easy decision for me to make.  I knew that at the very least, I was
talking about eight hours of work.  On the other end of the range, the duration for
that same work could be in the three-to-four-day range.  At that point, it was in
the middle of the day on Thursday, and the prospect  of my entire holiday being
swallowed up was not a good one.&lt;/p&gt;
&lt;p&gt;But as I thought about it over the next couple of hours, my mind kept coming back
to two points.  The first point was that this cost was something I was going to
have to pay in the future.  That was not up for debate.  To make the whitespace in
the container tokens more usable, I would need to make changes.  The second point
was about whether I wanted to pay that cost in one large chunk and get it over
with, or incur that cost in smaller chunks, but with interest added on.  The logic
there was that if I chose smaller chunks, not only would I have to pay the main cost
for the changes, but I would have to pay interest on those changes until the main
changes were completed.&lt;/p&gt;
&lt;p&gt;With those two points crystalizing as the main differentiators in my decision, the
decision almost made itself.  If I had the time to spend, it would be easier to
do the work in one chunk and avoid the extra work incurred by the spreading that
work out.&lt;/p&gt;
&lt;p&gt;And with that… the work started.&lt;/p&gt;
&lt;h3 id="just-get-on-with-it"&gt;Just Get On With It&lt;a class="headerlink" href="#just-get-on-with-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For my own sanity, I broke the work out into three chunks: getting the scenario tests
passing, getting the Markdown checks passing, and getting the other consistency checks
passing.  It was 11 am Pacific time on Friday morning when I started to make the
changes, and it was after 2pm Pacific time on Sunday when I finished making the changes.
I will not go into all the changes that I had to do, as I would prefer not to try and
relive all that effort.  Do not get me wrong, it was the right thing to do, but it was
just excessively precise work.&lt;/p&gt;
&lt;p&gt;The good points were as follows.&lt;/p&gt;
&lt;p&gt;The updated tooling effort from earlier in the
week paid off handsomely during this effort.  Most the changes looked good when
I sketched them out in my head, but when I implemented them about half of them,
things changed.  Either
that design did not work as well as I had hoped, or there were nasty side effects
to consider.  By having a quickened “change-test-observed” loop, I could get to
the observed part of the loop that much quicker.  &lt;/p&gt;
&lt;p&gt;Having a good set of scenario tests helped me make those changes with confidence.
While I cannot account for tests that I have not added yet, the “test” part of the
“change-test-observed” loop meant that these changes were about going forward and
not introducing more problems. And as I debug best by looking at the overall
picture, having good logging throughout the code base helped me diagnose the
issues and verify the results of the changes.  A good set of tests and 100 percent
code coverage gives me confidence.  But being able to follow the flow
of data through the newly changed portions of the code raises that confidence
even higher.&lt;/p&gt;
&lt;p&gt;I was also happy to see that one of the design points of the project, the keeping
the container processing separate from the leaf processing, was still in place.
While fixing this issue properly required substantial work in the Container Block
Processor, only a couple of lines on the boundary between the Container Block
Processor and the Leaf Block Processor needed to be changed.  And I believe most
of those changes were just with logging input values.&lt;/p&gt;
&lt;p&gt;And now for the bad points.&lt;/p&gt;
&lt;p&gt;Changing the method with which I save whitespaces in container tokens would have
been better made when I was designing the parser.  Doing it at this point was
a nightmare like trying to talk on the phone on the tarmac at a busy airport.
I had to try and keep my focus on what I specifically trying to target.  And
that was not always easy. But while I think I may have been able to design
that part of the system better, I am more convinced that I needed to see the
old design and its flaws to arrive at this improved design.  Sometimes, we need
to take one step backwards to take two steps forward.&lt;/p&gt;
&lt;p&gt;The other bad point that I saw is that I think I still have a way to
go in simplifying
the container handling.  These changes were obviously a huge step in the
right direction, but I am sure I can simplify them even more.  It could be
the nature of preserving the whitespace, but I found myself writing code that
was “if in a list block that is in a block quote block”.  In one or two
cases, I believe I had to write something even more devious than that code.&lt;/p&gt;
&lt;p&gt;While there may have been other points that I could include here, most were
too minor to mention or on a list of things to look for
when I get free time.  Things like more minor refactorings and patterns to
look out for when writing any new Python code.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given the arduous work that I put in, I found it useful to find my balance
between the work I was doing and not letting the weekend slip away
without taking advantage of it.  Similarly, I had to balance those previously
mentioned good points and bad points with what I have carried out with the project.&lt;/p&gt;
&lt;p&gt;Yes, there were a couple of times that I yelled “why did I want to write a
linter?” to my computer screen.  If I had chosen to write a Markdown-to-HTML
parser, like &lt;a href="https://commonmark.org/"&gt;CommonMark&lt;/a&gt;, then I would be done.
As HTML throws almost all the whitespace away, the parser just needed to
understand the whitespace, not properly store it in a token.  If not for
the fact that I have written a linter and that I wanted to be able to verify
that I had parsed the Markdown properly, I would not need to get the extracted
whitespace &lt;em&gt;exactly&lt;/em&gt; correct.&lt;/p&gt;
&lt;p&gt;And to me… knowing that I made a hard call, but it was for what I consider
to be the right reasons… that is good enough for me.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having made good inroads to fixing the spacing issues in the parser, I know
I want to find other related issues and see if I can resolve them or easily
resolve them.  But I also would not mind getting some more small refactors
done.  Not sure which is going to win out yet.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:curlies"&gt;
&lt;p&gt;As Markdown does not like space characters inside of code spans, I have replaced any such spaces with the text &lt;code&gt;{space}&lt;/code&gt;. &lt;a class="footnote-backref" href="#fnref:curlies" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Improving Quality - Finding Better Tooling + Extact Method</title><link href="https://jackdewinter.github.io/2021/11/22/improving-quality-finding-better-tooling-extact-method/" rel="alternate"></link><published>2021-11-22T00:00:00-08:00</published><updated>2021-11-22T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-11-22:/2021/11/22/improving-quality-finding-better-tooling-extact-method/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/15/improving-quality-figuring-out-better-tooling/"&gt;last article&lt;/a&gt;, I talked
about taking a bit of a break and focus on refactoring for a couple of weeks.
Specifically, I talked about the things that I was looking for with respect to more tools to
help with the refactoring.  This week, I talk about the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/15/improving-quality-figuring-out-better-tooling/"&gt;last article&lt;/a&gt;, I talked
about taking a bit of a break and focus on refactoring for a couple of weeks.
Specifically, I talked about the things that I was looking for with respect to more tools to
help with the refactoring.  This week, I talk about the progress that I made with
the refactoring and my experience with the three added tools.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Professionally I am an SDET, otherwise known as a Software Development Engineer
in Test.  When I mention my job title, people often think I am in a company to
test things and break them.  The reality could not be more different.  Most of
what I do is more properly defined as risk management and risk prevention.  A large
part of that is working to find better processes and to find better measurements
for the quality of the projects that I work on.  If I do things properly, I simply present the
information to both teams and their management, helping them make smart
information-based decisions that are keyed to the specific situation that they are in.&lt;/p&gt;
&lt;p&gt;From that viewpoint, what I have been doing for the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project is not much
different than my day job.  There are many viewpoints that show risk in any given
project, and it is a tough job to figure out which of those viewpoints to focus
on at any given time.  But even giving myself time to work on the compositional
quality of the PyMarkdown project, I wondered if my usual tools (PyLint and Flake8)
were good enough or if I can do better.  So, as part of my work in the last two
weeks, I picked out three new tools to experiment with, to see if they add any
value to my well-established tool set.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/397433405008fef9c1ec4c835c1608c473ca51bc"&gt;07 Nov 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5ab751db859c92bd25f3edcc253d71b0b889659f"&gt;20 Nov 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="setting-the-playing-field"&gt;Setting The Playing Field&lt;a class="headerlink" href="#setting-the-playing-field" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned in the last article, my usual choice of tools for analyzing
Python projects is the combination of the &lt;a href="https://github.com/pycqa/flake8"&gt;Flake8&lt;/a&gt;
tool followed by the
&lt;a href="https://github.com/PyCQA/pylint"&gt;PyLint&lt;/a&gt; tool.  While they do not have information
to help with every refactoring or guideline that I want to use with Python projects,
they do a respectable job in getting me most of the way there.  The question I had asked
myself was whether there were automation tools out there that could help
me to boost the quality even higher than it is.&lt;/p&gt;
&lt;p&gt;To that extent, I picked three different tools to try out:
&lt;a href="https://www.code-inspector.com"&gt;Code Inspector&lt;/a&gt;,
&lt;a href="https://codebeat.co"&gt;CodeBeat&lt;/a&gt;,
and &lt;a href="https://sourcery.ai"&gt;Sourcery&lt;/a&gt;.  The minimum qualification for me to use them was that they needed
to have some integration with GitHub that activates when something is pushed to
the repository.  While two of the tools also offer VSCode support, it was not a
requirement.  After all, I run PyLint and Flake8 on the command line and as part
of a lint job using GitHub Actions.&lt;/p&gt;
&lt;p&gt;So on to the tools.&lt;/p&gt;
&lt;h2 id="code-inspectorcodiga"&gt;Code Inspector/Codiga&lt;a class="headerlink" href="#code-inspectorcodiga" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before I started the refactoring last week, I was using a tool called
&lt;a href="https://www.code-inspector.com"&gt;&lt;code&gt;Code Inspector&lt;/code&gt;&lt;/a&gt;,
but today I am using the same tool, but now called &lt;code&gt;Codiga&lt;/code&gt;.  Some of the URLs
for the tool still point to &lt;code&gt;code-inspector.com&lt;/code&gt;, but I expect that they will be
moved over to &lt;code&gt;codiga.io&lt;/code&gt; before too long.  And, as far as I can tell, the change
has not affected the usefulness of the tool.&lt;/p&gt;
&lt;p&gt;As I mentioned last week, my first impression of this tool was that it would be
useful in helping me keep the number of new PyLint errors down.  Essentially,
as their
&lt;a href="https://doc.codiga.io/docs/faq/#tools"&gt;tools page&lt;/a&gt;
states, they use specific tools on their platform to scan the projects.  You
can opt in or opt out of scanning your project with any of those tools, so it
is very flexible.  But to be clear, they do not seem to have any custom analysis
tools of their own, only open-source software.&lt;/p&gt;
&lt;p&gt;But there is where they shine.  Having used this tool for two weeks, I can
positively say that I am going to continue using this tool going forwards.  Whenever
I make a change to source code in my VSCode editor, the Problems window at the
bottom updates with any &lt;code&gt;Code Inspector&lt;/code&gt; information within 10 seconds of me
saving the file.  By having the output in the Problems window with a line
number and column number, I can click on it and go there to fix the issue.
Since &lt;code&gt;Code Inspector&lt;/code&gt; is running PyLint as one of its tools, that means
I can find and address any PyLint errors without leaving the editor.  That
is cool!&lt;/p&gt;
&lt;p&gt;In addition, their dashboard view of a project is a useful way to see what
is happening with the project.  The dashboard view for the PyMarkdown project
&lt;a href="https://app.codiga.io/project/29635/dashboard"&gt;is here&lt;/a&gt; and presents some
nice graphs with clickable elements throughout.  During the last two weeks,
the dashboard and the views were immensely helpful in keeping me targeted on the
most impactful changes. And when I want to improve the quality of a given
code base, that is exactly the information that I need.&lt;/p&gt;
&lt;h3 id="evaluation"&gt;Evaluation&lt;a class="headerlink" href="#evaluation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While this can be considered a repeat of the PyLint and Flake8 tooling,
the in-editor experience and the reporting of those tools supplies enough
of a value-add that I am going to keep on using this.&lt;/p&gt;
&lt;h2 id="codebeat"&gt;CodeBeat&lt;a class="headerlink" href="#codebeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Initially I was optimistic about the &lt;a href="https://codebeat.co"&gt;CodeBeat&lt;/a&gt; tool,
as it looked promising.  But after
using it for the last two weeks, I am left in a confused state about what
help this tool provides.&lt;/p&gt;
&lt;p&gt;When using this tool, it seems to take a while to get my project scanned.
Since I am not paying for this tool, I am okay with that.  But
when I do get a report, the metrics really confuse me.&lt;/p&gt;
&lt;p&gt;One of their
metrics, &lt;code&gt;Function too long&lt;/code&gt;, is based on the actual number of lines in
the source file, not the number of statements.  As such, after the
&lt;a href="https://pypi.org/project/black/"&gt;Black&lt;/a&gt; formatter has cleaned up my files and placed various function
arguments on their own lines, I find that their
line limit of 30 is breached often.  I get that they are trying to
keep each function on one viewable page within an IDE, but that metric
does not sit right with me.&lt;/p&gt;
&lt;p&gt;Then there is the &lt;code&gt;Assignment Branch Condition too high&lt;/code&gt; metric.  Brushing up
on the available metrics, I found some valuable information on how to calculate
this metric for Python.  But no matter which function I try it with, the number
that I get is always lower than the one they report in their errors view. And
since they only list the final &lt;code&gt;ABC&lt;/code&gt; value, I am unable to check my actual
numbers against their actual numbers.&lt;/p&gt;
&lt;p&gt;Finally, from my point of view, the &lt;code&gt;Block Nesting too deep&lt;/code&gt; metric is
broken.  This metric is supposed to reflect the maximum number of block nesting
levels in each function. That is not my research, that is
&lt;a href="https://hub.codebeat.co/docs/software-quality-metrics#maximum-block-nesting"&gt;their documentation&lt;/a&gt;.
But unless my math is off, the depth level that they supply is the total block
nesting depth, not the maximum block nesting depth.  A good example of this is
the following function from the Rule Md027 module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__handle_within_block_quotes_blocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_directly_within_block_quote&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_directly_within_block_quote&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_fenced_code_block_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_directly_within_block_quote&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_html_block&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_indented_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_leaf_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_html_block_end&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_indented_code_block_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_leaf_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The block nesting depth reported for this function is &lt;code&gt;4&lt;/code&gt;.  I calculate it as
a depth of &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="evaluation_1"&gt;Evaluation&lt;a class="headerlink" href="#evaluation_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While the idea of this tool was nice, I have removed it from the PyMarkdown project.&lt;/p&gt;
&lt;h2 id="sourceryai"&gt;Sourcery.Ai&lt;a class="headerlink" href="#sourceryai" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I had an early idea that &lt;a href="https://sourcery.ai"&gt;Sourcery&lt;/a&gt; would be useful,
it was not until I
started using it for refactoring that I was able to find out how useful it
was.  From the usability point of view, it was always spot on with what it
found and suggestions on how to make it better.  Looking at the list
of &lt;a href="https://docs.sourcery.ai/refactorings/"&gt;possible refactorings&lt;/a&gt;, I believe
that I have hit about maybe 25% of the refactorings presented.&lt;/p&gt;
&lt;p&gt;Some of those refactorings were easy ones that I had missed.  Others
were making the code more readable by doing things like applying the De Morgan
Identity to a conditional expression.  Now, I have been doing that refactoring
for years, but I always must write it out and manually work through the arguments
of the expression, just to make sure that I get it right.  With Sourcery, I just
clicked on the apply refactoring menu item, and it was one for me.  It was the
same thing with applying their “Convert to Enumerate” rule. I could easily do it
for myself, but I was always concerned that I was going to fat-finger something
and break the code. This was a lot easier and a lot less error prone.&lt;/p&gt;
&lt;p&gt;Those features alone would have sold me on using this as a tool.  And then I
ran into a couple of refactorings such as “List comprehension”.  To be totally
open, I struggle with comprehensions.  I have tried three times to make
some serious pushes into learning comprehensions, but I have struggled each
time.  I think that the
&lt;a href="https://docs.sourcery.ai/refactorings/list-comprehension/"&gt;List Comprehension&lt;/a&gt;
might be the thing that helps me make progress on learning comprehensions.&lt;/p&gt;
&lt;p&gt;Why do I say that?  Well, there is the obvious fact that Sourcery detected
a series of statements that can more compactly and efficiently represented using
a comprehension.  I know I sometimes have issues with just that.  Then there
is the ability to translate it with a press of a button.  For me, that is a
teaching moment.  Being able to see that something can be changed, and having
that change being applied gets through to me more than any amount of reading
can do.  And it works even better if it is something I am familiar with and
not a made-up example.  I think it is safe to say, it just hits home in a
new way for me.&lt;/p&gt;
&lt;h3 id="evaluation_2"&gt;Evaluation&lt;a class="headerlink" href="#evaluation_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Basically, if I had to assign a role to Sourcery and how it helped
me with the PyMarkdown project, it would be role of mentor.  It was not the
role I assign to PyLint and Flake8, which is essentially a monitor role.
Besides, that role is solidly filled by the existing tools PyLint and
Flake8.  Sourcery provides
me with better ways to do things, providing me with solid information on how
things would look after that change, how to make that change, and why it
should be changed.&lt;/p&gt;
&lt;p&gt;And as I can always use a good nudge in the direction of cleaner code, this
is a tool that I want to keep in my toolbox.&lt;/p&gt;
&lt;p&gt;Oh, and did I mention this other nifty feature?  If I forget to apply a
suggested refactoring, Sourcery creates a new PR with their suggested changes
already applied, ready to merge into a newly committed branch at my command.
While I am not usually forgetful when it comes to process, it is nice to
know that Sourcery has my back!&lt;/p&gt;
&lt;h2 id="choosing-a-quality-measurement"&gt;Choosing a Quality Measurement&lt;a class="headerlink" href="#choosing-a-quality-measurement" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having experimented with the Sourcery’s Quality measure for a function, I was
pleased that its measurement of quality was mostly coordinated with my own observations.
To be clear from the start, I do not have any plans to stipulate that all of the functions
in the PyMarkdown project to have a Quality measure in the 70s or higher.  While
it might be nice to get there on smaller projects, I do not believe that achieving
that measurement on larger projects such as PyMarkdown are achievable.  And
even if they are achievable, I believe that the breakdown of the functions to
achieve that measure would trash the readability of each function.&lt;/p&gt;
&lt;p&gt;But looking through their reports, I had to come up with a quality score that I
at least thought was a good target for an initial push to clean up the project.
I found the one boundary of 25 to be too low and needed all the functions in
the project to be higher than that.  Experimenting with a couple of functions
and what their Quality score were, I decided that a score of 40 was a good
starting point.  Why 40?  I just found it to be a satisfactory level of quality without
being too disruptive to the readability of the project.&lt;/p&gt;
&lt;h2 id="refactor-extract-method"&gt;Refactor: Extract Method&lt;a class="headerlink" href="#refactor-extract-method" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having picked a minimum quality score of 40 for each function, I started working
my way through the PyMarkdown project, one module at a time.  The process of
going through the entire project was long and arduous, taking the better part
of two complete weeks.  The process was also very monotonous, as it was always
the same thing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check through the next module, examining the reported Quality for each function.&lt;/li&gt;
&lt;li&gt;Find the next lowest code quality function in the current module.&lt;/li&gt;
&lt;li&gt;If the quality for that function is 40 or above, go to Step 1.&lt;/li&gt;
&lt;li&gt;Otherwise, examine the function and Find a good block of code to extract.&lt;/li&gt;
&lt;li&gt;Add a marker function call with the name of the new function.&lt;/li&gt;
&lt;li&gt;Create a new function and extract the code to that new function.&lt;/li&gt;
&lt;li&gt;Add arguments to the new function to satisfy any missing variables from the function.&lt;/li&gt;
&lt;li&gt;Copy that argument list and add it to the marker function’s argument list.&lt;/li&gt;
&lt;li&gt;Go through all assignments from the function and add them to the list of variables to be returned by the function.&lt;/li&gt;
&lt;li&gt;Copy that return variable list to the marker function.&lt;/li&gt;
&lt;li&gt;Use VSCode to figure out which variables are not used by the original function and remove those variables from both lists.&lt;/li&gt;
&lt;li&gt;Run the full set of &lt;code&gt;PyTest&lt;/code&gt; tests, looking for any asserts that show something is wrong.&lt;/li&gt;
&lt;li&gt;If something is wrong, fix it.  If it cannot be fixed, revert the file and start over.&lt;ul&gt;
&lt;li&gt;The most likely thing that happened to me was that a variable was not assigned before usage.
  This happened with variables that were assigned in optional code blocks.  The fix was to make
  sure to add default values before the optional code block to ensure that variable was set to something reasonable.&lt;/li&gt;
&lt;li&gt;In some cases, I entered the wrong code, and I just got either a syntax error or a test failure.
  In those cases, reverting the file was the easiest way to go.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Verify that it looks right, and stage that change to the repository, so it does not get lost.&lt;/li&gt;
&lt;li&gt;Look at the new quality score for the function.  If it is below 40%, go to Step 4. Otherwise go to Step 3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As far as the PyMarkdown project was concerned, that was my life for two weeks.
It was not overly exciting, but it was rewarding.  Even as I was making my way through
the modules, I could see that the readability of the modules was already increasing.
I could be wrong, but I believe there is only one place in the refactored code where
I simply added a number to the end of an extracted method.  In all other cases, I
was able to find a solid, logically place for the function to be split up.&lt;/p&gt;
&lt;h2 id="cleaning-up-the-todo-items"&gt;Cleaning Up The TODO Items&lt;a class="headerlink" href="#cleaning-up-the-todo-items" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing that Codiga listed in its Violations view were the number of &lt;code&gt;# TODO&lt;/code&gt;
comments that I had littered around the PyMarkdown project code base.  While I
did not initially agree with their definition of these comments as violations,
I started to come around quickly.  Deciding to get them out of the way,
I spent Saturday afternoon going through most of the TODO comments.  In each
case, I either removed the comment, fixed the issue and removed the comment,
or logged a new issue and removed the comment.  When all was said and done,
the comments for &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/145"&gt;Issue 145&lt;/a&gt;
detailed each of the TODO comments and what was done with it.&lt;/p&gt;
&lt;p&gt;To be honest, there were an equal amount of “what the F***?” comments as there
were “didn’t I already…?” comments.  Then there were the “yeah, I should have
done this long ago” comments.&lt;/p&gt;
&lt;p&gt;Basically, it was good to just get these things done, figured out, or removed
from the code base.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The reason that I decided to write a linter in Python is that I wanted to learn
Python and this was an excellent project to do that with.  The reason I chose
a Markdown linter is because I did not feel there was a good, flexible linter
for Markdown out there.  Specifically, I picked a linter because linters help
developers look within their content to see if there is something that they can
do to be more consistent and to raise the quality of their content.&lt;/p&gt;
&lt;p&gt;And that is what I like about the PyMarkdown project.  I am still learning about
Python and I know I have a solid set of rules that can help Markdown document
authors.  Additionally, I know I can write more rules to help those same
authors apply extra structure to their documents.&lt;/p&gt;
&lt;p&gt;That is why, even through the boring refactoring effort, I kept on going.  Because I
knew that this work was helping me to help myself, and to help others. As
altruistic as it sounds, that is enough for me.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I still have a couple of smaller items to clean up, but the big refactoring work
has been completed.  I do want to make more progress on bugs, so I will probably
split my time between those two efforts.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="extract method"></category></entry><entry><title>Improving Quality - Figuring Out Better Tooling</title><link href="https://jackdewinter.github.io/2021/11/15/improving-quality-figuring-out-better-tooling/" rel="alternate"></link><published>2021-11-15T00:00:00-08:00</published><updated>2021-11-15T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-11-15:/2021/11/15/improving-quality-figuring-out-better-tooling/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/08/markdown-linter-fun-with-block-quotes/"&gt;last article&lt;/a&gt;, I talked
about my desire to focus on Nested Container blocks.  After a long hard push
to get to this point in the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project, I decided to take a bit of a
break and focus on refactoring for a couple of weeks.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/08/markdown-linter-fun-with-block-quotes/"&gt;last article&lt;/a&gt;, I talked
about my desire to focus on Nested Container blocks.  After a long hard push
to get to this point in the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project, I decided to take a bit of a
break and focus on refactoring for a couple of weeks.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After deciding to take a bit of time off to focus on not fixing issues, I decided
that refactoring the codebase was an effective way to stay connected to the PyMarkdown
project while taking a more relaxed approach to work.  I have been aware for some
time that refactoring that needed to be done, it just was never a priority to work
on that part of the project.  As I try to give my best for every part of every
project that I work on, I decided that I needed to make the time, and that now
was that time.&lt;/p&gt;
&lt;h2 id="why-take-time-now-to-refactor"&gt;Why Take Time Now To Refactor?&lt;a class="headerlink" href="#why-take-time-now-to-refactor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The truth?  I was tired of fixing issues and having more issues waiting
for me to fix.  I am under no illusion that I need to get back to fixing the remaining
issues, but I decided that I needed a break from the issue resolution process.
I know it might seem weird, but choosing to focus on improving the quality of
the PyMarkdown project is relaxing to me. And when it came down to it, I knew
that the right thing for me to do at this point was take time to focus on
something else for a couple of weeks.  I need to make sure that I have the drive
and energy to enable me to reach the finish line on the remaining issues.&lt;/p&gt;
&lt;p&gt;And it was not like the project was desperately in need of refactoring, so I am
confident that it is a relatively relaxing task that I am undertaking. When developing
the PyMarkdown project, I undertook most of the small refactors as I was
developing the code itself.  If I have developed the project according to this
belief, hopefully I just have the larger, more complicated refactorings to
complete.&lt;/p&gt;
&lt;h2 id="what-do-i-mean-by-improving-quality"&gt;What Do I Mean By Improving Quality?&lt;a class="headerlink" href="#what-do-i-mean-by-improving-quality" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are numerous ways to refactor code.  For each of those ways, there are
recipes that can be followed to improve the quality of the code.  But before
the quality can be improved, there are two things that greatly enhance the
success of improving the quality of the code: solid tests and good metrics.&lt;/p&gt;
&lt;p&gt;The more complete the testing of a given codebase is, the more confidence that
I have that a given refactoring will not negatively affect that codebase. When
it comes down to it, the reason for that confidence is a simple one.  Codebases
are complex entities where all the side effects of changing a given line of
code may not be easily known.  Each test helps increase the level of
monitoring of that codebase for any unwanted side effects.  With the right
monitoring in place,
changes can be more confidently made with more certainty that the change is
creating a positive change, not a negative one.&lt;/p&gt;
&lt;p&gt;Good metrics are needed because of a simple reason:
not every piece of code requires refactoring.  Code only needs to be refactored
if there are warning signs that are clear using tools specifically
designed to look for a sampling of those warning signs.  For the PyMarkdown
project, I have used the &lt;a href="https://github.com/pycqa/flake8"&gt;flake8&lt;/a&gt; and
&lt;a href="https://github.com/PyCQA/pylint"&gt;pylint&lt;/a&gt; tools to look for obvious
issues as I write the code.  With very few exceptions, if Flake8 reports an
issue, I fix it before checking in code.  For PyLint, I try and fix the issue
if it is one of the simpler issues to fix.  If the issue is one of &lt;code&gt;too-many-locals&lt;/code&gt;,
&lt;code&gt;too-many-branches&lt;/code&gt;, or &lt;code&gt;too-many-statements&lt;/code&gt;, I often delay fixing the issue
until later.  This helps me stay creative, fixing the issue that I am working on.&lt;/p&gt;
&lt;p&gt;But as soon as the bulk of the creativity is order, that is when my focus on
quality takes over.  Creativity helps me get near to the finish line, but
I know that my focus on quality and solid testing is what gets me over the
finish line. Relating it to the woodworking that I do, the creativity is
what gets the item built. But it is the quality that makes the item usable
and attractive to others.  You cannot have just one of them, you need them
both working together to cross that finish line.&lt;/p&gt;
&lt;h2 id="what-tools-should-i-use"&gt;What Tools Should I Use?&lt;a class="headerlink" href="#what-tools-should-i-use" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Deciding that I
wanted to have a better picture of what PyLint suppressions I have added to
the PyMarkdown project, I created a small Python script to help me out with that
analysis.  It extracts that information from a project on a module-by-module
basis, as well as a convenient cross-project total, and saves that information
to a JSON file of my choosing.  With that information in hand, I have the start
of some good metrics on how I can improve the quality.  But I often wondered if there
were other tools that would supply additional benefits with useful metrics.&lt;/p&gt;
&lt;p&gt;To that extent, I started looking for potential candidates.  The first
qualification is that the tool must be free for Open Source Projects. The second
qualification is that it must provide one or more added metrics that help
me to find issues with the PyMarkdown project.  Finally, the third qualification
is that the tool must be decently usable.  While that third qualification is
more intangible than the others, it is an important one.&lt;/p&gt;
&lt;p&gt;Following those guidelines, I found three potential candidates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codebeat.co/"&gt;CodeBeat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.code-inspector.com/"&gt;Code Inspector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sourcery.ai/"&gt;Sourcery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All three of these tools provide for simple installation into the GitHub workflow
of the PyMarkdown project, so they are on equal footing there.  Both Sourcery
and Code Inspector have VSCode plugins, so they both gets extra marks there.
That is where things start to differ.&lt;/p&gt;
&lt;h3 id="codebeat"&gt;CodeBeat&lt;a class="headerlink" href="#codebeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CodeBeat is a tool that provides each repository with a GPA score, outlining how
each part of the repository contributes to that score.  Looking like a high school
report card, each module can be clicked on to discover how that module’s score
was calculated.  One of the benefits of CodeBeat is that it is a cross-platform
tool, supporting 20+ different languages, of which Python is just one.&lt;/p&gt;
&lt;p&gt;I can only investigate the metrics that are reported for the PyMarkdown project,
as there is no information on their web page about what metrics are calculated
and with which tools.  Based on the metrics that I see, there are only two
possible metrics that may be useful, Block Nesting and ABC.&lt;/p&gt;
&lt;h4 id="block-nesting-level"&gt;Block Nesting Level&lt;a class="headerlink" href="#block-nesting-level" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Block nesting is meant to calculate the maximum number of distinct indentation
levels that are applied to a given function. Given this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_incremented_for_this_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the block nesting level should be calculated as &lt;code&gt;1&lt;/code&gt; due to the single indentation
level that occurs on the fourth line of the function.  Similarly, the following
example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_end_token&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# do something here&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_incremented_for_this_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;has a block nesting level of &lt;code&gt;2&lt;/code&gt;.  Nicknamed the
&lt;a href="http://wiki.c2.com/?ArrowAntiPattern"&gt;Arrowhead Anti-pattern&lt;/a&gt;, anything beyond
three nested levels is considered to follow this anti-pattern, decreasing
comprehension, and making it difficult to support.&lt;/p&gt;
&lt;p&gt;While interesting, there are two problems with this metrics.  The first is that
a rule for this metric is already present in PyLint as &lt;code&gt;too-many-nested-blocks&lt;/code&gt;,
though with a
default value of &lt;code&gt;5&lt;/code&gt;.  The second is that this tool reports the total number
of distinct indents, not the maximum indent.  Due to both, this metric
is not an option for me to use.&lt;/p&gt;
&lt;h4 id="assignment-branch-condition"&gt;Assignment Branch Condition&lt;a class="headerlink" href="#assignment-branch-condition" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The other possible metric is the “Assignment Branch Condition” or ABC metric.
With a more complete description of the
&lt;a href="http://c2.com/cgi/wiki?AbcMetric"&gt;metric here&lt;/a&gt;,
the basic idea is to calculate the magnitude of the elements for those three
classes of elements in the functions.  Using the last example, there is one
assignment on line 6, two branches on lines 1 and 5, and zero conditions.
Therefore, the ABC value for that example is the square root of &lt;code&gt;1*1 + 2*2 + 0*0&lt;/code&gt;
or the square root of five.&lt;/p&gt;
&lt;p&gt;My issue with this metric is that its accuracy is very dependent on how the
calculation is applied to the function being evaluated.  This rule only reports
errors when the (unconfigurable) limit of &lt;code&gt;10&lt;/code&gt; is exceeded, without showing any
indication of how the triggering value was arrived at.  Based on that lack of
information, I do not find this metric to be actionable, as it is difficult
to figure out what to try and optimize for in the triggered code.&lt;/p&gt;
&lt;h4 id="where-does-that-leave-me"&gt;Where Does That Leave Me?&lt;a class="headerlink" href="#where-does-that-leave-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Things are not looking good for this tool with respect to the PyMarkdown
project and its needs.  It may be that this this tool benefits projects
that are not using PyLint and Flake8, but that is not the case for this project.
That means that for me, this at best is a curiosity.&lt;/p&gt;
&lt;h3 id="code-inspector"&gt;Code Inspector&lt;a class="headerlink" href="#code-inspector" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Code Inspector is a tool that supplies a high-level categorization of the issues
that it finds, something that is useful. Another cross-platform solution,
this tool benefits from a decently responsive VSCode extension.&lt;/p&gt;
&lt;p&gt;There are multiple things that this tool brings to the table.  The first is that
it is decent at discovering duplicated code.  There seems to be a five- or six-line
threshold for detecting those duplicates, but that seems reasonable.
Other than that, this tool relies on PyLint and Bandit for Python analysis.  Bandit
is a decent tool that adds security checking to the suite of tools being applied
against the
project.  As the PyMarkdown project is an application with very few, if any,
security concerns, adding Bandit to the mix does not help.&lt;/p&gt;
&lt;p&gt;However, one thing that should not be overlooked is that the Code Inspector
VSCode extension allows for PyLint to be executed against the codebase with
every save.  This has proven invaluable so far for being able to assess changes
to see if there are any negative consequences of that change.  While I am
currently using their Basic package which is free, there is a noticeable 10 to
30 second delay between when I save a Python file and when the scan information
is updated.  But since I am not paying anything for their service, I am
okay with that.&lt;/p&gt;
&lt;h4 id="where-does-that-leave-me_1"&gt;Where Does That Leave Me?&lt;a class="headerlink" href="#where-does-that-leave-me_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While the tool itself does not add any useful metrics that I can use, it does
execute PyLint with each save, which is useful to me.  Having the information
there as I am making the changes is unbelievably valuable.&lt;/p&gt;
&lt;h3 id="sourcery"&gt;Sourcery&lt;a class="headerlink" href="#sourcery" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sourcery is a Python only tool that integrated directly into the GitHub action
process and into VSCode as an extension.  Because of the focus on Python and the
integration with VSCode, Sourcery can not only find issues but suggest fixes to
issues that it finds.  For a full list of suggested refactorings, look at
&lt;a href="https://docs.sourcery.ai/refactorings/"&gt;this web page&lt;/a&gt;.  The list is long and
substantial.&lt;/p&gt;
&lt;p&gt;Two other parts of this tool really appeal to me and the way I develop in Python.
The first is that the duplicate analysis in Sourcery is decent.  While not as
powerful as in the paid versions, the free version has decent pattern
matching for detecting duplicates.  The second part that appeals to me is the
code quality percentage metric.  It is very clearly explained and broken down
into its components parts when displayed.  That breakdown helped me figure out
how to best address the issue.&lt;/p&gt;
&lt;p&gt;Next up is the email it sends out with every Pull Request with the same information
on where things were before the Pull Request and where they will be after the Pull
Request.  I know that it might appear to be duplication, but I find it nice to
be able to go over what I did the day before and see how any commits affected the
quality of the project.&lt;/p&gt;
&lt;p&gt;The final part of this tool that I like is the Pull Request that is created for me
with any suggested refactorings based on my last commit.
Just to be clear, I did not add anything or turn anything on to enable that feature.
That is a stock option for this tool.  For me, that is an extremely useful feature to
have.  While I may decide to not include that Pull Request for assorted reasons,
if I do decide to approve the Pull Request, it has already started to pass any
tests or metrics that I use for a normal Pull Request.  And if nothing else,
if my own Pull Request gets a clean bill of health from Sourcery, I know that
I have solid code in that Pull Request.&lt;/p&gt;
&lt;h4 id="where-does-that-leave-me_2"&gt;Where Does That Leave Me?&lt;a class="headerlink" href="#where-does-that-leave-me_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While I have been developing software for decades now, I am still learning
when it comes to Python.  Even if I was not learning the ropes, I
know that I do not always follow best practices.  Sourcery is a great tool for
keeping me honest and for helping me to refine my understanding of Python.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, it is not my usual ending, but it is an ending… kind of.  I am going to
continue using these tools for another week while I see if there are any other
features that show up during my refactoring.  I know I am leaning heavily on
Sourcery to augment my knowledge of Python and Code Inspector to help with
executing PyLint as I developer, but things may change!  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="extract method"></category></entry><entry><title>Markdown Linter - Fun With Block Quotes</title><link href="https://jackdewinter.github.io/2021/11/08/markdown-linter-fun-with-block-quotes/" rel="alternate"></link><published>2021-11-08T00:00:00-08:00</published><updated>2021-11-08T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-11-08:/2021/11/08/markdown-linter-fun-with-block-quotes/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/01/markdown-linter-double-checking-my-double-checks/"&gt;last article&lt;/a&gt;, I talked
about my efforts to bolster the consistency checks I have built into the project.
In this article, I decided to focus on Nested Container blocks.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have confidence that most of the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
parser is working the way that
I want …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/11/01/markdown-linter-double-checking-my-double-checks/"&gt;last article&lt;/a&gt;, I talked
about my efforts to bolster the consistency checks I have built into the project.
In this article, I decided to focus on Nested Container blocks.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have confidence that most of the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt;
parser is working the way that
I want it to, there are two areas where I feel that I still need to shore up my
confidence: Link Reference Definitions
and Nested Container Blocks.  Most of my lack of confidence in the Link Reference
Definition code is in how it handles boundary conditions.  As they are boundary
conditions that are not hit that often, I am not too worried
about users hitting those conditions too much.&lt;/p&gt;
&lt;p&gt;Nested Container Blocks are a different story.  I personally use these when authoring
documents like this article.  While I do not usually go more than two levels deep,
they are still Markdown constructs that I use quite often.  I would expect that,
outside of Markdown
power users, most authors will probably encounter the same issues. As such, increasing
my confidence on Nested Container Blocks was something I wanted to work on.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/860aea72a8d5e2b0c7dd088c121d7e1ce9012b7b"&gt;01 Nov 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9105fbbedb72997638b209b61766aee0d33a51c0"&gt;06 Nov 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="issue-90-verifying-existing-rules"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/90"&gt;Issue 90&lt;/a&gt; - Verifying Existing Rules&lt;a class="headerlink" href="#issue-90-verifying-existing-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first part of Issue 90 was a thorough look through the existing tests for Rule
Md005,  Basically, I was wondering if those tests were really fixed or if it just
looked like they were fixed.  Probably due to earlier work that I have done
in the area, each of these tests worked flawlessly.  They worked so well that I
started to look at other tests in the area to verify if they were also working
properly.  An obvious place to look for me to look was Rule Md027.  I have been doing
a fair amount of work there in the last couple of months, and it is a
meaty module with a decent number of moving parts.  Basically, a good place to look.&lt;/p&gt;
&lt;p&gt;It was hard for me to figure out exactly when I noticed something was wrong and what
the exact thing was that I noticed was wrong, but there was something there.  I
could not figure out exactly what it was, only that something was “off”. As I have
valuable experience following my gut feelings about code and finding something,
I decided to try experimenting, and as a result created eight new scenario tests.
To do this, I just started
looking through different test files and started making changes.  I then went to
execute those new scenario tests, and a couple of them failed, raising &lt;code&gt;AssertError&lt;/code&gt;
exceptions in Rule Md027.  Both had the same issue: the Block Quote index
was off.&lt;/p&gt;
&lt;h3 id="taking-a-good-look-and-making-a-decision"&gt;Taking A Good Look… And Making A Decision&lt;a class="headerlink" href="#taking-a-good-look-and-making-a-decision" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Digging into what I had just found, I noticed a couple of things.
The first thing was that the handling of the Block Quote index was off.  The second
was that everything else seemed to be in decent shape.  Trying extra variations
on nested containers
elements and other elements inside of them helped me figure that out.  It seemed
to be that the index field for the Block Quotes were the only things that were not
correct.  If that was true, then I could get a lot of mileage out of fixing the
index logic.&lt;/p&gt;
&lt;p&gt;The further I debugged into the code, the stronger that my confidence in that
observation’s accuracy increased.  There were a couple of small
issues that, if I could
get them resolved, should get me most of the way to stabilizing Rule Md027 and
Block Quotes.  That would also raise my confidence in Nested Container Blocks,
so there was a direct payoff.  But it was going to be arduous work for a couple of
days, instead of addressing other issues.  Was the tradeoff worth it?&lt;/p&gt;
&lt;p&gt;In the end, I decided yes.  Improving my confidence in Nested Container Blocks
by adding more scenarios for Block Quote elements with other nested elements
was a win for both my confidence and the project.  As such, I decided that was
the way I wanted the week to play out.  For better or worse!&lt;/p&gt;
&lt;h3 id="getting-down-to-work"&gt;Getting Down To Work&lt;a class="headerlink" href="#getting-down-to-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before starting on the actual changes, I wanted to start the week with some cleanup.
The main &lt;code&gt;next_token&lt;/code&gt; function for Rule Md027 was getting big, and since I was going
to be spending the week in that code, I wanted to split it up
to make it more maintainable. To that extent, I took the code to manage
the start of the Block Quotes and moved it into the new &lt;code&gt;__handle_block_quote_start&lt;/code&gt;
function, the code to handle the end of the Block Quotes into the new
&lt;code&gt;__handle_block_quote_end&lt;/code&gt; function and so on.  It made things
neater and easier to read, even with the many comments with debug code scattered
throughout the module.&lt;/p&gt;
&lt;p&gt;After that, the first thing I noticed when I was debugging was that the Blank Line elements
were not updating the index properly.  From experience, I know that the order of
the Blank Line tokens and the end List tokens are backwards from what they are
expected to be.  It was therefore no surprise to find something like this in
the Rule Md027 code. To properly handle these Blank Lines, I figured out that I
needed to wait until the right point after the any end List tokens were processed.&lt;/p&gt;
&lt;p&gt;To deal with that, once a Blank Line token is found within an active
Block Quote element, I set the new &lt;code&gt;__delayed_blank_line&lt;/code&gt; variable to &lt;code&gt;True&lt;/code&gt;
and added the following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__process_delayed_blank_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow_block_quote_end&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__delayed_blank_line&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_leaf_end_token&lt;/span&gt;
            &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allow_block_quote_end&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_incremented_for_this_line&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_incremented_for_this_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_blank_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__delayed_blank_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_container_tokens&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__delayed_blank_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Taking a while to get to this point, the debugging was worth it. Called from the
top of the &lt;code&gt;__handle_within_block_quotes&lt;/code&gt; function and the top of the
&lt;code&gt;__handle_block_quote_end&lt;/code&gt; function, this function delays the processing of a
Blank Line token until after any processing of required end tokens is completed.
The setting of &lt;code&gt;__have_incremented_for_this_line&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;?  I will get to that
in a bit.&lt;/p&gt;
&lt;p&gt;Like the logic for the Blank Line tokens, there was also a need to delay the
processing of the end Paragraph token.  Working through the debugger and examining
the log files took a while to get right.  But going through that, I noticed that
there were a few cases where the incrementing of the Block Quote
index from the end Paragraph token was doubling up with an increment for the token
that followed it. Specifically, this doubling was occurring for start Block Quote
tokens, List Item tokens, and end List tokens.  To counter this effect, the
&lt;code&gt;__process_delayed_paragraph_end&lt;/code&gt; function was added that delays the increment
for the end of the Paragraph element until such time as any increments for the
listed tokens are dealt with.&lt;/p&gt;
&lt;p&gt;Finally, after all that work to handle those two cases, there were a couple of
boundary cases that needed to be addressed.  While not as &lt;code&gt;__have_incremented_for_this_line&lt;/code&gt;
simple.&lt;/p&gt;
&lt;h2 id="issue-92-staying-the-course"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/92"&gt;Issue 92&lt;/a&gt; - Staying The Course&lt;a class="headerlink" href="#issue-92-staying-the-course" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While on the path of cleaning up Rule Md027, and Nested Blocks in particular, I
decided to stay on that path and clean up other code dealing with nested
blocks.  Having cleaned up the Block Quote index in the last section, I was hoping
that I had found all the issues.  But if I am honest, I was not convinced
that I had.  For me to be convinced that I had found them all, I really needed to
do a deep dive and start throwing some serious levels of nesting container examples
against the parser, and Rule Md027 specifically.&lt;/p&gt;
&lt;p&gt;So, starting with the scenario tests and their data, I created forty-five new
scenario tests and their test data.  To do that, I started with nesting containers
within each other up to three levels of nesting.  When I was done with that, I
added variations on each of the Leaf elements inside of a simple Block Quote
element.  Finally, I added variations on each of those Leaf elements to embed
them within a List element within a Block Quote.&lt;/p&gt;
&lt;p&gt;As I worked through those scenarios, I ended up adding eight new tests to
the “extra” scenario tests to verify that I had found a new issue.  While not
related to those eight scenario tests, eight issues were added to
the project because of working through those issues.  I do not like to see
parser issues in general, but it was not strange to me to see them here.  As I have said at
least a couple of times before, groups of alternating Nested Block elements are
one area where I am not convinced that I have found all the issues.&lt;/p&gt;
&lt;p&gt;And before I get into the work done to address the issues that I could, I want
to point out that I did a bit of work with the debug strings to ensure that they
are using f-strings where possible. Normally I do not expect debug strings to stay
around for a long time, so I am not too fussy with them.  However, with this rule
and its complexities, I know that I have at least eight more visits to this code
for each of the eight issues that are related to this issue.  It just seemed
prudent to clean them up if they are staying around for a while.&lt;/p&gt;
&lt;h3 id="refactoring-the-code"&gt;Refactoring The Code&lt;a class="headerlink" href="#refactoring-the-code" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I was going through the new code for Rule Md027, I noticed that the code
I added for handling start List tokens was almost the same as the code that
I added to handle List Item tokens.  While it was not a big effort, I decided
that it was best if I refactored the code into the new &lt;code&gt;__check_list_starts&lt;/code&gt;
function.&lt;/p&gt;
&lt;p&gt;Upon further examination, it also made sense to create a new &lt;code&gt;__get_current_block_quote_prefix&lt;/code&gt;
function and a new &lt;code&gt;__get_last_block_quote&lt;/code&gt; function to deal with the
work in the &lt;code&gt;__check_list_starts&lt;/code&gt; function.  This allowed me to streamline
the &lt;code&gt;__check_list_starts&lt;/code&gt; even more, simplifying the code to a good clean
level.&lt;/p&gt;
&lt;p&gt;One of the other reasons that I went so far to do some refactoring was that I
expect that I am going to need to work with those concepts after I deal with
the issues that I found during the recent examination of Rule Md027.  With eight
issues open, I am confident that at least one or two of them are going to
require me to change the code for the rule, and similarly confident that one of those is going
to require one of the two new functions.  And if I am wrong, the code has been
tightened a bit and looks that much better.&lt;/p&gt;
&lt;h3 id="fixing-up-the-remaining-scenario-tests"&gt;Fixing Up The Remaining Scenario Tests&lt;a class="headerlink" href="#fixing-up-the-remaining-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the bulk of the other issues out of the way, the issues that were left were
ones where one of the elements fixed in the earlier sections were also firing
on any of those elements within List elements within Block Quote elements.
Taking a couple of minutes to think about these scenarios clearly, I was relieved that I
came up with a solution that was easy to implement.  At the top of the
&lt;code&gt;__handle_within_block_quotes&lt;/code&gt; function, I added the following statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;is_directly_within_block_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, I added that new variable to the argument list of most of the handlers,
using it to opt-out of any reporting of errors. With that in place, I started
running tests, and watched as most of the tests started passing.  Investigating
the failing tests, I started to notice something.  A decent number of scenario
tests were not passing, even with these changes.  What was the issue?&lt;/p&gt;
&lt;h3 id="the-issue-was"&gt;The Issue Was…&lt;a class="headerlink" href="#the-issue-was" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lack of scenario coverage.  As I mentioned earlier, I do not have confidence that
I have all the required scenarios to test nested container blocks.  After the
work that I did this week, I know I am closer to that goal.  However, even after
that work, I still believe that I have not found every scenario.&lt;/p&gt;
&lt;p&gt;As I know I found some new scenarios with this work, I believe that it was
reasonable to expect that some percentage of those scenario tests would fail.
And a small percentage did fail.  To wrap up the work, I filed eight issues
to investigate later.  It was not much, but it was more than I had optimistically
hoped for.  But even though it was more than I had hoped for, I was still optimistic.
After everything I have thrown at the parser so far, eight scenario tests failing
was still a good metric.&lt;/p&gt;
&lt;p&gt;But having met my goal of discovering what I had missed, I now had a good count
of the issues to fix.  Things were good for now, so I decided to move on
and do something different for the last day of the week.&lt;/p&gt;
&lt;h2 id="issue-104-dial-home-device"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/104"&gt;Issue 104&lt;/a&gt; - Dial Home Device&lt;a class="headerlink" href="#issue-104-dial-home-device" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having been a science fiction fan since an early age, when
&lt;a href="https://en.wikipedia.org/wiki/Stargate_SG-1"&gt;Stargate SG-1&lt;/a&gt; started airing in
the last 1990s, I was hooked.  Sure, it was a simple premise and did not have
the international support of Doctor Who and Star Trek, but it had a certain flair
of its own.  With the show came its own plot device: the Dial Home Device. Without
the correct coordinates to input into this device, the team was locked out of gate
travel, stuck wherever they were. And yes, as those were the days of
&lt;a href="https://en.wikipedia.org/wiki/DVD"&gt;DVDs&lt;/a&gt;, I waited to get each season of the
series as it came out on DVD, just to see the show and the highlights.&lt;/p&gt;
&lt;p&gt;I believe it was there that I got the idea that any kind of decent software should
have some way of checking to see if there are any upgrades to it, especially to
solve issues.  If there is a problem with one of the components on my car, I get
mailed a recall notice and I must go to my local dealer to get it fixed.  If
one of the services is changing its terms, they must send out snail
mail or email with the specifics on those changes. Following along from there,
why should not an application be able to find out if there is a newer version and
suggest upgrading it?&lt;/p&gt;
&lt;p&gt;For me, the answer was a simple one.  It should.  As someone who uses editors like
VSCode and Notepad++, repository browsers like SourceTree, and web browsers such
as Chrome, I am kind of used to it.  With each of those programs, a periodic check
is made to figure out if there is an available upgrade.  While the actual upgrade
is left up to me, I am presented with that information to allow me to know to look
and see if the upgrade is beneficial.&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first part of the design for this feature was a quite simple rule: unless something
was setup exceptionally wrong, any errors should be captured and logged, but should
not stop the application.  The purpose of this feature is to supply extra information
about improvements to itself as an aside, not as a focus.  That was the only one iron
rule.
Other than that, there were three simple parts that quickly fell into place: find
the current version of the application, find the published version of the
application, and find out how often to check.&lt;/p&gt;
&lt;p&gt;Finding the current version was a simple part to design.  As the setup code
already had a version of that code implemented, I just needed to make a couple of adjustments to that
code to make it capture all errors.  Other than that, it remained pretty much the
same.  Finding the published version was almost as easy to design.  The pages
over at PyPi.org are static, so scraping the pages once every seven days
should not be a big deal.  Since the &lt;code&gt;request&lt;/code&gt; package is one of the common ones,
its interface is very well known, and easy to work with.&lt;/p&gt;
&lt;p&gt;That left the &lt;code&gt;how often&lt;/code&gt; question to be designed.  Opting for simplicity, I
decided to borrow from greatness and create a &lt;code&gt;.pymarkdownlnt&lt;/code&gt; file in the user
directory with the last checked timestamp.  If there were any errors reading this
file and interpreting the timestamp, the code should assume that a check is
needed.  Otherwise, a simple comparison between the current timestamp and the
written timestamp will inform the module if seven days have passed since the
last check.  To round that out, I decided to add a &lt;code&gt;--force&lt;/code&gt; type flag to the
command line to force the &lt;code&gt;how often&lt;/code&gt; algorithm to skip the check and check
anyway.  To balance that out, the &lt;code&gt;--disable&lt;/code&gt; type flag would never check and
leave it up to the user.&lt;/p&gt;
&lt;p&gt;Even though the designs of the individual components were simple, I took the
time to do my usual due diligence and walk through the scenarios. And even
with something so simple, there were a couple of tweaks that I was able to
make to the design to make everything work better.&lt;/p&gt;
&lt;h3 id="implementation"&gt;Implementation&lt;a class="headerlink" href="#implementation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given that design, it was simple and methodical to implement. As far as the PyMarkdown
core was concerned, this was the interface to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__check_for_current_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disable_version_check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;package_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__package_name&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x_test_version_fault&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;package_name&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;"xxxxxx"&lt;/span&gt;
    &lt;span class="n"&gt;helper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DialHomeHelper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dial_home_expiry_in_days&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;current_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;version_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_semantic_version_from_version_module&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;current_version&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Version information was not in the expected location: {version_error}"&lt;/span&gt;

    &lt;span class="n"&gt;update_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify_version_is_currrent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;current_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;force_version_check&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;update_message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following from the design, the only thing that will cause this check to have a
critical error is during the extraction of the version from the PyMarkdown module.
Because this should only happen if something gets very messed up, the &lt;code&gt;assert&lt;/code&gt;
statement is there to prevent that. Other than that, either nothing gets printed
out because everything is fine, or a simple warning message is presented to the
user and logged in the log file.&lt;/p&gt;
&lt;p&gt;While I will not go into it in detail, the new code is the &lt;code&gt;DialHomeHelper&lt;/code&gt; module
was created and tested to try and ensure that all error paths were thought of
and mitigated.  The &lt;code&gt;get_semantic_version_from_version_module&lt;/code&gt; function uses simple
techniques to get the &lt;code&gt;__version__&lt;/code&gt; field from the &lt;code&gt;version.py&lt;/code&gt; module compiled
within the project.  Once that version is figured out, the &lt;code&gt;verify_version_is_currrent&lt;/code&gt;
function is called to check to see if that version is the same as the version that
is currently registered at PyPi.org for
&lt;a href="https://pypi.org/project/pymarkdownlnt/"&gt;PyMarkdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code itself is not the most complicated code I have written recently, but it
does hit a mark within me for being some of the most satisfying work to complete.  As
the preface to the section indicates, having a process in place that lets a user
know when there is an update available just makes sense to me.  This work just
made me feel that the project itself was that much more complete.  If I had to
pin it down to a concrete concept and not a feeling, I would say that I believe
that useful applications should be able to dial home. As such, know that PyMarkdown
can dial home, it is that much closer to being a useful application.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week was interesting and fulfilling, but in weird and unusual ways.  One
of the fun metrics that I keep in my head is that there are now only thirty-three lines
of issues in the Issues List between &lt;code&gt;Priority 2&lt;/code&gt; and &lt;code&gt;Priority 3&lt;/code&gt;. That was a
good improvement.  And looking at that section of the list, at least half of the
items there will probably move to the &lt;code&gt;Priority 3&lt;/code&gt; section of the list or
to the GitHub issues list.  Not bad.  I also added over fifty new scenario
tests to the project and came away with only eight added issues that were not
resolvable right away. Decent for my work over the last week.&lt;/p&gt;
&lt;p&gt;But my best output from the week was my improved confidence that I had the right
design and right implementation for Nested Container Blocks.  Sure, there were
eight added issues that I needed to fix, but that is par for the course when talking
about software development.  But to have most of the 3 level and less variations
on Nested Container Blocks working without problems is something solid.  More
importantly, it helps me reframe my confidence with Nested Container Blocks to
a more positive level.&lt;/p&gt;
&lt;p&gt;And that is what made this week interesting and fulfilling. Just run of the mill
working hard to get things working together properly.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having been highly creative in the last few weeks, I need to take at least a week
off any do a tiny bit of brainless stuff.  As such, I am going to start looking at a few
products that are available to analyze open-source projects.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Double Checking My Double Checks</title><link href="https://jackdewinter.github.io/2021/11/01/markdown-linter-double-checking-my-double-checks/" rel="alternate"></link><published>2021-11-01T00:00:00-07:00</published><updated>2021-11-01T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-11-01:/2021/11/01/markdown-linter-double-checking-my-double-checks/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-e.md"&gt;last article&lt;/a&gt;, I talked
about my continuing efforts to clean up the scenario tests and the existing parser
issues. In this article, I talk about my efforts to bolster the consistency
checks I have built into the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By now, all the low hanging fruit from …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-e.md"&gt;last article&lt;/a&gt;, I talked
about my continuing efforts to clean up the scenario tests and the existing parser
issues. In this article, I talk about my efforts to bolster the consistency
checks I have built into the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By now, all the low hanging fruit from the Issues List have been picked, preserved,
and stored away. What are left are the more difficult to deal with issues.  Depending
on how one feels about challenges, this is either a good thing or a bad thing.
I choose to interpret it as a good thing.  But I also know that a challenge usually
means more work.
And in the case of getting the PyMarkdown project’s consistency checks working
at full strength, it was going to take a lot of intense debugging work.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/521b5ab61e38f30472562804f63797174a2c5ba9"&gt;26 Oct 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/479ace2d2d9dd5def81c72ef3b58bce6fb76f594"&gt;31 Oct 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-do-i-care-about-consistency-checks"&gt;Why Do I Care About Consistency Checks?&lt;a class="headerlink" href="#why-do-i-care-about-consistency-checks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I started to implement the parser part of the PyMarkdown project, I quickly
came to one unshakeable conclusion: I was undertaking something that would be huge
in scope.  I knew that the 673 examples that came with the
&lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown&lt;/a&gt;
specification were only the start of the testing. I figured that those cases would
be most useful in verifying that the correct HTML was being generated, and that verification
would lend some confidence to the parser processing the documents properly.  But
as those examples only include HTML output, I would need to verify the tokenized output
independently of those examples.  And my guess was that the other verification would explode
the number of scenario tests to somewhere over 2500, which is what I thought was a decent
estimate at the time.&lt;/p&gt;
&lt;p&gt;To overcome this perceived testing deficiency, I added two levels of checks to
verify the consistency of the parsed Markdown tokens.   The first level of checks,
the Markdown generator, tests the ability to parse from Markdown into a token stream
and back again.  While the presence of container blocks requires extra code to
manage the complexity, this is meant to check prove that that parsing is a relatively
simple bi-directional
process without any loss of information.  The second level check, the position
checker, is a more intense look at the information provided with each token.  Basically,
it specifically focused
on the size of each token and whether the position of the token plus the size
of the token equals the position of the next token.&lt;/p&gt;
&lt;p&gt;These two types of checks account for around 95% of the discovered and reported
issues that I have found so far.  And as the easy-to-find issues are mostly gone, it is the
difficult-to-find issues that are now showing up.  Knowing this, I can easily guess
that if any new scenario tests uncover issues, they will probably uncover issues with either nested
List elements or Link Reference Definition elements.  And in the last couple of
months, I believe that only a handful of parser errors have been found, a slightly
larger number of Markdown generation errors, with the position checked having
the most issues.  Put together, there are two problem areas that are well tested
in the parser, but the consistency checks are still finding issues, though mostly
within their own code.  Not perfect, that that knowledge helps.&lt;/p&gt;
&lt;p&gt;So why do I care about these consistency checks?  Because they are thorough
in finding issues.  That is, when I do not disable them.&lt;/p&gt;
&lt;h2 id="so-why-do-you-disable-them"&gt;So… Why Do You Disable Them?&lt;a class="headerlink" href="#so-why-do-you-disable-them" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The truth is that the parser and the Markdown generator are the most stable
components of the project.  Because of its very nature, the position checker is
very precise on where it expects tokens to be positioned.  As such, I have often
disabled the checks with &lt;code&gt;disable_consistency_checks=True&lt;/code&gt; when adding a
new feature or fixing an existing issue.  I usually try for between one hour
and three hours to get the checks working, but after the two-hour mark, I go
increasingly with disabling the check.
I honestly admit that this is a bad habit, and one that I am trying to stop following.
But that process does help me from getting stuck, so as with anything, it is not
all bad.&lt;/p&gt;
&lt;p&gt;In looking at what I wanted to do this week, I decided to focus on
examining the existing tests with consistency checks disabled&lt;sup id="fnref:pragma"&gt;&lt;a class="footnote-ref" href="#fn:pragma"&gt;1&lt;/a&gt;&lt;/sup&gt;, with a
goal to enable those checks.  Following a search-and-remove of that text from
the scenario tests, I had eighteen tests that I needed to get passing.  And as
I was removing that code, I did notice that the tests were in at least six groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 dealing with HTML Blocks&lt;/li&gt;
&lt;li&gt;1 dealing with Paragraphs&lt;/li&gt;
&lt;li&gt;1 dealing with Link Reference Definitions&lt;/li&gt;
&lt;li&gt;8 dealing with List Blocks&lt;/li&gt;
&lt;li&gt;1 dealing with Block Quotes&lt;/li&gt;
&lt;li&gt;5 from the “extra” scenario tests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even with this limited information, I knew that this work would likely take me
the rest of the week to complete.  With at least six distinct groups, it was
highly likely that I was going to look at six or more different areas of the
position checker code and address those issues.  That was going to be time
consuming, as that meant I was going to be looking all over the position checker
code.&lt;/p&gt;
&lt;p&gt;As I started fixing issues with the position checker, I was not surprised when
fixing those issues uncovered other errors with the Markdown generator and even
the Markdown parser.  It just made sense to me.  If there was an issue with one
of the two checkers, there was a decent chance that the issue would affect the
other checked.  And with both consistency checks disabled, there was also a decent
chance that a boundary condition failure was being missed.  From my experience,
I had a feeling that once I was able to clear up any issues with the consistency
checkers, I had a high degree of confidence that it would uncover at least two to
three issues in the other components.  After all, that is what those consistency
checks are designed to do.&lt;/p&gt;
&lt;p&gt;Finishing the work for
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/87"&gt;Issue 87&lt;/a&gt;,
the issue I created to contain this work, it took me until right around noon on
Sunday to get everything completed.  I am not in the least bit surprised that it
took that long to complete.  The amount of debugging I did this week was just
immense.  If I had to guess, I probably added as much debug code as non-debug
code, just to be able to follow what was going on in the code.  But the goal was
reached: all eighteen scenario tests are now fully enabled.&lt;/p&gt;
&lt;h2 id="the-journey"&gt;The Journey&lt;a class="headerlink" href="#the-journey" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The journey to get there was not an easy one, but it was one that paid off in
the end.  While these are in order of where they were found, the order in
which they were found was all over the place.  In one case, I found three issues
at the same time and had to focus on one before getting to the others.  In my mind,
it was more important to fix things and note how long they took to fix, not the order
in which they were fixed. That, and I arranged my notes by where they were found
and not the order in which they were fixed.&lt;/p&gt;
&lt;h3 id="it-just-so-happened-that-this-was-first"&gt;It Just So Happened That This Was First&lt;a class="headerlink" href="#it-just-so-happened-that-this-was-first" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Picking one of the tests at random, I settled on test function &lt;code&gt;test_list_blocks_237g&lt;/code&gt;.
While I was there for problems with the position checked, I noticed something
almost at once upon looking at the tokenized output for the test: the
Blank Line token was repeated when there was only one Blank Line present in the
Markdown document.  Enabling debug and rerunning the test, it was obvious to see
why.  As far as I could tell, the Blank Line element was being properly processed
within the Block Quote element.  But once that was complete, that same Blank Line
was also being handed off to the Leaf Block Processor where it was processed again,
yielding another Blank Line token.  It was a parser issue!&lt;/p&gt;
&lt;p&gt;Fortunately for me, I was able to figure out a quick way to resolve this issue.
The following code was already in place to handle the Blank Line within the
Block Quote element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;did_blank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;gt;already handled blank line. returning."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_bq_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I just made one minor change to that code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_bq_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as well as other changes to the returns in that function and the functions that
call that function. While it was correctly parsing the Blank Line the first time,
that function was not passing back any information that would allow the second
parsing of the Blank
line to be avoided.  By returning that &lt;code&gt;True&lt;/code&gt; from that code, downstream code
was notified that the Blank Line had already been processed, and that it did
not need to continue.&lt;/p&gt;
&lt;p&gt;That was one of the easier issues to debug.&lt;/p&gt;
&lt;h3 id="double-check-your-output-twice"&gt;Double Check Your Output… Twice&lt;a class="headerlink" href="#double-check-your-output-twice" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another test that looked weird when I looked at it was test function
&lt;code&gt;test_extra_007cx&lt;/code&gt;.  When I look at a scenario test that is failing, the first
thing that I do is go over the Markdown and the tokens to make sure that I
have familiarity with the content that is being parsed.  As I did that for
this test function, I noticed that trailing whitespace was missing.
After I double checked my initial findings, I did indeed have another parser
issue.  In this case, any whitespace within Text elements within Link elements
was being omitted from the Link token.  Not an easy find, but a good one.&lt;/p&gt;
&lt;p&gt;Tracking through the code with the debugger, I came to the &lt;code&gt;__complete_inline_loop&lt;/code&gt;
function, where I was firmly convinced the issue was.  Looking through the logs,
the Link token and the encompassed Text token agreed up to this point,
and they diverged after it.  And while it was not much, the space at the end of
the line was present in the Link’s Text element, but not in the Link element
itself.&lt;/p&gt;
&lt;p&gt;Doing a bit of experimentation, I added the following code to correct this behavior.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_string&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;end_string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;split_end_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"split_end_string&amp;gt;&amp;gt;$&amp;gt;&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;split_end_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_end_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;new_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_end_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_end_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;new_string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the trailing space was present in text block, but not in link element, I knew
that I should not touch the &lt;code&gt;new_string&lt;/code&gt; variable, only the &lt;code&gt;new_string_unresolved&lt;/code&gt;
variable.  It took a while to get the second &lt;code&gt;if&lt;/code&gt; conditional right, adding an
extra scenario test to help tune the code properly.&lt;/p&gt;
&lt;p&gt;The interesting part of trying to solve this issue was not the challenge in
fixing the issue itself, that was the easy part.  The interesting part was that
the definition of the issue was tricky and often nuanced.  As I said above:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;any whitespace within Text elements within Link elements was being omitted from
the Link token&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was easily a boundary case, and a good find.  But not all the solutions were
as easy as these two.&lt;/p&gt;
&lt;h2 id="transforming-into-markdown"&gt;Transforming Into Markdown&lt;a class="headerlink" href="#transforming-into-markdown" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was looking for a next scenario test to clean, function &lt;code&gt;test_block_quotes_extra_02ae&lt;/code&gt;
and its related scenario tests looked like they were an excellent choice.  At some point
in the resolution work, I noticed that there were four scenario
tests that were failing their consistency checks due to Markdown generation. Before
I spent more time digging deeper into the position check, I felt that my time would
be best spent getting these four functions working properly.&lt;/p&gt;
&lt;p&gt;As I examined each of the failing scenario tests, I noticed that they all focused
on one single are: extra whitespace at the start of a Block Quote element line.
There were slightly different variations on this issue, but underneath they all
had the same cause.  Digging into the cause, it was a simple matter to overlapping
data due to nested container elements.  Specifically, in the case of test function
&lt;code&gt;test_block_quotes_extra_02ae&lt;/code&gt;, it was the overlapping data of the List element
and the Paragraph element.&lt;/p&gt;
&lt;p&gt;During the development of the List elements and the Block Quote elements, I made
some decisions that have affected later work.  The easy decision to explain is the
decision about the Block Quote element.  Looking across all the examples in the
&lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown&lt;/a&gt;
specification, there are a good collection of properly spaced Block Quote characters
and improperly spaced Block Quote characters.  Given that information, I made the
hard choice to include those starting characters in the field &lt;code&gt;leading_spaces&lt;/code&gt;
for the Block Quote token that owns that line.  Managing that field and tracking
along with it will parsing and checking has been frustrating, but it still makes
sense to me.  However, because of the more rigorous spacing requirements and a reduced
quantity of improperly indented List element examples, for List tokens I
decided to record their indentation levels in the &lt;code&gt;indent_level&lt;/code&gt; and dealing
with any outliers as they surfaced.&lt;/p&gt;
&lt;p&gt;Based on the data that I had at the time, I sincerely believe that was the correct
choice to make.  Adding that same &lt;code&gt;leading_spaces&lt;/code&gt;  field to the List tokens
would have been too ambitious given the requirements for it.  And whether I liked
it or not, this situation was a direct result of that decision.  But because of
those decisions when this Markdown is parsed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;quote&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the last line gets parsed into a Paragraph token starting with two spaces inside
of a List token with an indent of &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;found_block_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;was_list_found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container_token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;found_block_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;was_list_found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_block_token&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_list_found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;specific_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;found_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;specific_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;specific_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It took a bit of time to get there, but finally I arrived at the above code
to mitigate this issue.  Because of the overlap the whitespace in the Paragraph
token and the List indent, this code detects that very circumstance with an existing
Block Quote element and changes the &lt;code&gt;extracted_whitespace&lt;/code&gt; variable to reduce
the amount of whitespace.  With a decent amount of testing, this was able to knock
a couple of issues off the list all by itself!&lt;/p&gt;
&lt;h2 id="position-checker-woes"&gt;Position Checker Woes&lt;a class="headerlink" href="#position-checker-woes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point in the debugging process, I was keenly aware of two things.
The first was that I probably had any existing parser issues and Markdown generator issues
resolved.  While that meant that I needed to be vigilant about my work in getting
the position checker issues resolved, it gave me the confidence to know that I
probably would get most of the serious issues resolved.  At the time and while I was
writing this, I was incredibly careful to think “most” and not “all”.  Issues are tricky
things, and my experience makes me believe that you never get all.&lt;/p&gt;
&lt;p&gt;The second thing was that this work was taking a lot of time.  Just for the analysis,
debugging, fixing, and testing of the three prior issues, I was up over twelve hours
in total.  While that included one or two of the issues in this section, the
point was clear.  This was taking a lot of time to get right.  But I still felt
strongly that it needed to get done, so I continued to push forward.&lt;/p&gt;
&lt;h3 id="providing-foundational-support"&gt;Providing Foundational Support&lt;a class="headerlink" href="#providing-foundational-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The most obvious thing that I needed to add was a sense of whether a Block Quote
element was in effect when validating a given set of tokens.  While the actual code
to use it would come later, this code was added in a couple of places, such as in
the &lt;code&gt;__validate_block_token_height&lt;/code&gt; function, to calculate that token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;container_token_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;block_container_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_token_index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;container_token_index&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;block_container_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;container_token_index&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I would normally be more carefully about copy-and-paste code, I already
have plans to revisit the consistency check modules to see about improving them.
As such, this was both quicker and would give me a chance to evaluate some refactoring
tools in the new future.&lt;/p&gt;
&lt;p&gt;Along the same path, I added proper support for Block Quotes elements within List
elements in the &lt;code&gt;__maintain_block_stack&lt;/code&gt; function. It was not much, but I knew that
I needed to have that value calculated in multiple places. This was providing that support
while adding the necessary code only in a single place.&lt;/p&gt;
&lt;h3 id="list-elements-and-block-quote-elements-redux"&gt;List Elements and Block Quote Elements - Redux&lt;a class="headerlink" href="#list-elements-and-block-quote-elements-redux" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Like the work detailed in the
&lt;a href="#transforming-into-markdown"&gt;Transforming Into Markdown&lt;/a&gt; section,
this change to the &lt;code&gt;__validate_new_line&lt;/code&gt; function needed to account for Block Quote
tokens and List tokens being used at the same time.  Although the code looks slightly
different, both changes are accomplishing the same goals, just in different ways.
In this function, because of the position checks that go on, the code was a lot
more convoluted and nuanced.  But with a solid group of five scenario tests that
all looked similar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FAILED test/test_markdown_block_quotes.py::test_block_quotes_extra_02ae - AssertionError: Line:4:[para(4,5):  ]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_237x - AssertionError: Line:3:[para(3,8):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_237f - AssertionError: Line:4:[para(4,8):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_237g - AssertionError: Line:4:[para(4,8):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_238a - AssertionError: Line:3:[para(3,10):]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it was easy to go through and look for commonalities. It did take a fair amount
of time to get the solution dialed in properly, but it was worth it.&lt;/p&gt;
&lt;h3 id="block-quotes-and-blank-lines"&gt;Block Quotes and Blank Lines&lt;a class="headerlink" href="#block-quotes-and-blank-lines" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not yet finished with those tests, I resolved the issue in the previous section,
only for me to be greeted by another issue with those same five scenario tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FAILED test/test_markdown_block_quotes.py::test_block_quotes_extra_02ae - AssertionError: Line:3:[BLANK(3,2):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_237x - AssertionError: Line:2:[BLANK(2,3):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_237f - AssertionError: Line:3:[BLANK(3,3):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_237g - AssertionError: Line:3:[BLANK(3,3):]
FAILED test/test_markdown_list_blocks.py::test_list_blocks_238a - AssertionError: Line:2:[BLANK(2,3):]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had taken care of one issue, only to have another one replace it. I cannot say
that I was surprised because I was not.  This entire week was about things getting
uncovered that also needed fixing.  And like the other issues, this one was
obvious when I looked at it.  When computing the estimated column number for a
Blank Line element, the estimated was sometimes off by two within Block Quote elements.&lt;/p&gt;
&lt;p&gt;While this was obviously the problem, the issue with this issue was in defining the
circumstances in which this was the problem.  This code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;leading_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;did_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;container_block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_next_leading_space_part&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was obviously being used in all cases, and there was at least one case where it
was being used improperly.  After performing handful of experiments, it turned out that
there were three cases.  The first was if the Blank Line token was followed by
end tokens.  If it was only followed by end tokens, then that recalculation
needs to be applied.  The second was if the “block” of end tokens after the
Blank Line did not include an end List token.  Finally, the block part of
the logic depended on whether the last block token was a Block Quote token
or if the first block token was a Block Quote token.&lt;/p&gt;
&lt;p&gt;After about four hours of experimentation and debugging, I arrived at this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;top_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;top_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;top_block_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;top_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top_block_token&lt;/span&gt;

    &lt;span class="n"&gt;needs_recalculation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;was_end_list_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;next_token_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;next_token_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_token_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_end_token&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_token_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;was_end_list_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="n"&gt;next_token_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_token_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;needs_recalculation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;needs_recalculation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;was_end_list_end&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;top_block&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;needs_recalculation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;leading_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;did_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;container_block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_next_leading_space_part&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;top_block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_next_leading_space_part&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It backed up my earlier suspicion that the code was right, just not being used
properly.  It did take a while to nail down the nuances of this code, but it
all made sense then I got there!&lt;/p&gt;
&lt;h3 id="second-verse-same-as-the-first"&gt;Second Verse, Same as The First&lt;a class="headerlink" href="#second-verse-same-as-the-first" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And it seems like a continuing theme, having to adjust for Block Quote idents
in various pieces of code, and the changes to the &lt;code&gt;__process_previous_token&lt;/code&gt; function
and the &lt;code&gt;__verify_next_inline_handle_previous_end&lt;/code&gt; were no different. The change
for the &lt;code&gt;__process_previous_token&lt;/code&gt; function was to add this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block_container_token&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;old_line_number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;estimated_line_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;estimated_line_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;old_line_number&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;current_inline_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_link_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;
    &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;estimated_column_number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the change to the &lt;code&gt;__verify_next_inline_handle_previous_end&lt;/code&gt; function was
to add this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;new_lines&lt;/span&gt;
    &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_estimated_column_number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;block_container_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both sets of changes are almost identical, except for a couple of slight changes.
But that was always expected, so it was comforting in a way to find these last
two sets of changes to be so alike.  If the triggering condition was met, update
the &lt;code&gt;leading_text_index&lt;/code&gt; field, grab the part of the &lt;code&gt;leading_spaces&lt;/code&gt; field
relating to the index, and add the length of that value to the current column
number.&lt;/p&gt;
&lt;p&gt;And with that, things were clean.  Well, almost.  As I mentioned at least once
in this article, nested container blocks are nuanced.  As such, when I tried to
test something against alternating container blocks that were four levels deep,
I ran into an issue.  While I do want to tackle that as time allows, this work
was about cleaning up disabled consistency checks, not nested blocks.  As such,
left those two tests in the code and disabled them for now.&lt;/p&gt;
&lt;p&gt;I must admit that I wanted to deal with them right away, but I knew that I had
enough to do as it was.  Taking that on would just delay things.  I believe
I made the right move in delaying that work, but sometimes it does not feel that
way.&lt;/p&gt;
&lt;h2 id="doing-my-usual-cleanup"&gt;Doing My Usual Cleanup&lt;a class="headerlink" href="#doing-my-usual-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was going through that work, I did notice that there were unusual
cases where I was still using string concatenation instead of f-strings.  While
gearing up for the actual check of the reported issues, I thought it would be
good to go through and clean those up.  While it does not show us as increased
code coverage or increased scenario coverage, it just felt good to get it done
and have everything using f-strings.&lt;/p&gt;
&lt;h2 id="the-main-event"&gt;The Main Event&lt;a class="headerlink" href="#the-main-event" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, after all this work, there was one more thing to do: The Main Event.
With a solid set of passing tests, with all consistency checks working properly,
I could now start verifying that the Paragraph token’s &lt;code&gt;rehydrate_index&lt;/code&gt; field
and the Block Quote token’s &lt;code&gt;leading_text_index&lt;/code&gt; field were
working as intended. This was the plan all along, but I had to be sure everything
else was in place before I could start on this.&lt;/p&gt;
&lt;p&gt;Working through all the scenario tests listed in the issue, I was able to verify
that any paragraph hydration concerns with those scenario tests had been fixed as
I was unable to reproduce even one failure.  There were now multiple checks to verify
that the &lt;code&gt;rehydrate_index&lt;/code&gt; field was being used properly, and all those checks were passing properly.
That was the focus, and after a solid week of work to get there,
I was able to resolve those issues from the Issues List. That was the good news.&lt;/p&gt;
&lt;p&gt;The bad news was that the same could not be said for the checks for the &lt;code&gt;leading_text_index&lt;/code&gt;
field.  At the end of the &lt;code&gt;__rehydrate_block_quote_end&lt;/code&gt; function
was an assert that was commented out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# assert (&lt;/span&gt;
&lt;span class="c1"&gt;#     leading_text_index == expected_leading_text_index&lt;/span&gt;
&lt;span class="c1"&gt;# ), f"leading_text_index={str(leading_text_index)};expected_leading_text_index={str(expected_leading_text_index)}"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After two hours of trying to resolve all the issues, I added an issue to the
project’s Issues List and cleaned things up.  What I was able to do however, was
to get it closer to the final state:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;leading_text_index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;expected_leading_text_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;expected_leading_text_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"leading_text_index={leading_text_index};expected_leading_text_index={expected_leading_text_index}"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This uncovered an unnoticed issue in the &lt;code&gt;parse_paragraph&lt;/code&gt; function that caused
the parser to emit an extra newline character.  This issue is a weird
boundary condition, and without the above assert, the likelihood of me finding
it was remote at best.  Things must align properly for this to happen,
as the code to detect this condition shows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;apply_paragraph_adjustment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;container_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;top_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;container_index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;container_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
        &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;container_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;apply_paragraph_adjustment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;apply_paragraph_adjustment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, once again, it took a while to figure it out, but I got there.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes the solution hits you right away, and sometimes you must fight for
every part of that solution. This week, there was a lot of fighting.  While some
of the time it was about the problem and not the solution, most of the time it
was around discovering the nuances of the problem.  And that was challenging, but
the work was exceedingly difficult to focus on.  It required me to keep a level head and to clearly write things
out for myself, so that I could look at the problem from different angles.&lt;/p&gt;
&lt;p&gt;And that is what ultimately saved me.  Writing things out.  Yes, lots of scribbles
and pages of weird drawings with arrows and boxes, but it worked.  What I found
useful about my usual practice of using paper to design was that in trying to
figure out the actual problem, I was not establishing a clean visualization of the
problem.  Only when I was able to get enough test data represented in a cohesive
form on those pieces of paper, all visible at the same time, was I able to properly
view the problems and make my breakthroughs.&lt;/p&gt;
&lt;p&gt;Now, am I saying that everyone should use paper? Nope.  But for me, the pivotal thing
is that it helps me to visualize things.  It does not matter if it works
for anyone else, but that helps me to visualized.  And the more difficult things
get, the more important it is to find a way to visualize things in a cohesive
manner that is digestible.  For me, that formula is a decent amount of paper scribbles
mixed in with good logging.  That just allows me to keep state and assumptions
on paper while testing them as I go through the log files and recording the actual
changes. As I said at the start of the paragraph, it just must work for me.&lt;/p&gt;
&lt;p&gt;So, was it hard? Yes… it was hard.  But I also moved the project forward while
starting to refine another skill to add to my toolbox.  That was unexpected, but
cool!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking ahead in the Issues List, I would like to make more progress on getting
things cleared out.  And with me removing the disabled consistency checks
this past week, I at least want to try and tackle the pragma issues.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:pragma"&gt;
&lt;p&gt;Except for pragmas, that hopefully will be next week. &lt;a class="footnote-backref" href="#fnref:pragma" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Fun With Nested Containers</title><link href="https://jackdewinter.github.io/2021/10/25/markdown-linter-fun-with-nested-containers/" rel="alternate"></link><published>2021-10-25T00:00:00-07:00</published><updated>2021-10-25T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-10-25:/2021/10/25/markdown-linter-fun-with-nested-containers/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-d.md"&gt;last article&lt;/a&gt;, I talked
about my continuing efforts to clean up the scenario tests and the existing parser
issues. In this article, I continue to talk about cleaning up existing parser issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is yet another week of me working on bugs, and I can easily …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-d.md"&gt;last article&lt;/a&gt;, I talked
about my continuing efforts to clean up the scenario tests and the existing parser
issues. In this article, I continue to talk about cleaning up existing parser issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is yet another week of me working on bugs, and I can easily tell that progress
is being made to reduce the amount of outstanding work.  As I look at the Issues
List, the number of issues above the Priority 3 line is dwindling, and that is
a good thing.  Depending on how I look at the Issues List, I can just about see
both headings for Priority 2 and Priority 3 at the same time!  For me, that is
progress!&lt;/p&gt;
&lt;p&gt;And while it was not planned, almost all the work that I did this week was related
to nested container blocks in some way, so that was interesting.  As the only way
that I make that progress is by buckling down and getting stuff done, here I go!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d3618cc194ae490a71e6360ebc6473616ff40095"&gt;20 Oct 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/e55b0bbfbee2cdfee8666489e65da7fc6106f14a"&gt;24 Oct 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="issue-72-fun-with-nested-blocks"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/72"&gt;Issue 72&lt;/a&gt; - Fun with Nested Blocks&lt;a class="headerlink" href="#issue-72-fun-with-nested-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Picking an issue somewhat at random, I ended up looking at the following issue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;md006&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt; &lt;span class="n"&gt;works&lt;/span&gt; &lt;span class="n"&gt;within&lt;/span&gt; &lt;span class="n"&gt;bq&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;level&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ordered&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;unordered&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;unordered&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ordered&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I delved into the issue, I must admit that I never determined the real purpose
of this rule.  First off, the original rule was disabled, but there was no documented
reason for disabling the rule.  If I had to guess, it was because there was
another rule that did the job better than that one.  Which rule replaced this rule?
I am not sure. If I had to guess, perhaps it was Rule Md007, though I do not
feel that Rule Md007 works as an improved version of Rule Md006.  Secondly, the
rule documentation for Rule Md006 seems… well… incomplete.
It describes lists at the start of the line but does not take any time to exclude
sublists.  It is almost as if someone started to make a rule, gave up in the middle,
and then published that rule.&lt;/p&gt;
&lt;p&gt;Those feelings left me with an interesting problem.  The primary goal of the PyMarkdown
project is to provide parity with the Markdown Lint rules.  So far, this is the
only rule where I am not sure that I can provide that required parity. In this
case, I strongly feel that parity alone is not good enough.  While I realized that this
rule is also disabled in PyMarkdown, I did not feel that it gave me any leeway
in implementing something that I felt was half done.  As always, I felt that I
need to do what I thought was right for the PyMarkdown
project.  And in the end, that is what I focused on.  For every other rule,
parity was the best choice.  But I made a firm decision that for this rule, leaving
the rule as-is was the wrong decision.  I needed my version of this rule to
be something I could stand behind my work on.&lt;/p&gt;
&lt;p&gt;Given that decision, I started to work on the small adjustments needed to change
the rule to allow it to function with Unordered List elements
inside of another container.  First, I started by adding ten new scenario
tests and verifying that each of the tests were failing.  Then I went back to the
rule module and started to make a couple of targeted changes.  Instead of having
a &lt;code&gt;__list_stack&lt;/code&gt;, I replaced it with a &lt;code&gt;__token_stack&lt;/code&gt; and placed both List elements
and Block Quote elements on the stack.  After a couple of adjustments to ensure
that the Block Quotes were being added and removed from the stack properly, I moved
the calculation of the expected indentation value into the new
&lt;code&gt;__calculate_expected_indent&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;From there, it was largely trial and error as I worked through the existing scenario
tests, adjusting the calculations within the &lt;code&gt;__calculate_expected_indent&lt;/code&gt; function
as I went.  One scenario test at a time, I moved closer to having them all passing
until they were all passing. The big addition to the &lt;code&gt;__calculate_expected_indent&lt;/code&gt;
function was that I needed to take the Block Quote characters into account.  Once
I had that figured out, the rest of the stuff was easy.&lt;/p&gt;
&lt;h2 id="issue-74-more-fun-with-nested-blocks"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/74"&gt;Issue 74&lt;/a&gt; - More Fun With Nested Blocks&lt;a class="headerlink" href="#issue-74-more-fun-with-nested-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I had just finished work on nested container blocks, I thought that it
might be useful to get some other nested block issues out of the way as
well.  I decided to tackle this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;### &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt; &lt;span class="mi"&gt;270&lt;/span&gt;, &lt;span class="mi"&gt;271&lt;/span&gt;, &lt;span class="mi"&gt;237&lt;/span&gt;, &lt;span class="mi"&gt;238&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;blank&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;starts&lt;/span&gt; &lt;span class="nv"&gt;after&lt;/span&gt; &lt;span class="nv"&gt;bq&lt;/span&gt; &lt;span class="nv"&gt;starts&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;varying&lt;/span&gt; &lt;span class="nv"&gt;spaces&lt;/span&gt; &lt;span class="nv"&gt;between&lt;/span&gt; &lt;span class="nv"&gt;bqs&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;no&lt;/span&gt; &lt;span class="nv"&gt;space&lt;/span&gt; &lt;span class="nv"&gt;between&lt;/span&gt; &lt;span class="nv"&gt;bq&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;following&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was a bit of a meaty issue to tackle, mostly because it is not very clearly
defined.  Specifically, when I started digging into this issue and breaking it
apart, it resulted in seven new variations of the &lt;code&gt;test_list_blocks_271&lt;/code&gt; scenario
test, three new variations of the &lt;code&gt;test_list_blocks_270&lt;/code&gt; scenario test, and
two variations a piece of the &lt;code&gt;test_list_blocks_237&lt;/code&gt; and &lt;code&gt;test_list_blocks_238&lt;/code&gt;
scenario tests.  For the most part, everything worked well, and all the tests
passed.  In addition, there were two tests dealing with the alternating four
levels of nesting scenario tests which I postponed until later.&lt;/p&gt;
&lt;p&gt;Other than those two scenario tests, the only scenario test that I had a problem
with involved the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Blockquote&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;continued&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the parser first encountered this Markdown document, it incorrectly parsed
the text and merged it all together.  But looking at the reference HTML,
the reference document and the tokens were not matching up.  The reference HTML
had two Block Quote elements, with one line of text in each element.  The tokens
had everything in one Block Quote element, with the text appended together.
That difference is what I needed to figure out.&lt;/p&gt;
&lt;p&gt;Walking through the Markdown in my head, it took a bit for me to get the Markdown
parsing in the correct context. When the second line is reached, there are already
three active
containers in play: a List element, a Block Quote element, and another List element.
When the parser then encountered the second line, it only saw the Block Quote starting
on that line and ignored the List elements completely.  That was the main problem.
To parse the document correctly, the parser needed to close all three
containers, as the main List container requires an indent of two spaces, and that
indent is not provided.  Only after those containers are closed can the line be
properly parsed.  With the slate being effectively cleared, a new Block Quote
can then be opened to hold the second line of text, just as the reference HTML
dictates.&lt;/p&gt;
&lt;p&gt;But how to get there?&lt;/p&gt;
&lt;h3 id="doing-the-hard-work"&gt;Doing The Hard Work&lt;a class="headerlink" href="#doing-the-hard-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Most of the changes occurred in the &lt;code&gt;is_block_quote_start&lt;/code&gt; function.  During the
initial parsing of the document, the parser believed that the text on the second
line was a continuation of the first line due to paragraph continuation lines.
As those lines apply to both Block Quote elements and List elements, removing
the first two characters from the second line would enact exactly that scenario.
So, care had to be taken not to destroy that existing functionality.&lt;/p&gt;
&lt;p&gt;The first part of this solution was the easy part.  I changed the &lt;code&gt;is_block_quote_start&lt;/code&gt;
function to look for any List elements near the start of the &lt;code&gt;token_stack&lt;/code&gt; list.
If the potential Block Quote start column had any List elements before it where
the leading spaces were not present,
then the algorithm closed all open elements back to and including that List element.
Basically, if current line was not indented enough so that the encompassing List
element was satisfied, everything back to that point needed to be closed. That
code was a bit tricky in places, but relatively easy to figure out.&lt;/p&gt;
&lt;p&gt;The tricky part was what to do at that point to get the parsing to continue.
All the obvious options were messy.  Most of them were variations of calling
back into the Container Block Processor and reprocessing the line.  A couple of
the variations were simply trying to bend the processors to do something that I
did not feel comfortable with.  I tried about four different solutions before
I decided that I needed to do something different.  So, I finally tried
to do something unexpected:  I tried the non-obvious solution.  Normally, I would
report that it was the dead simple solution that worked the best, but in this case,
that solution was more work than it was worth.  In this case, I just had a hunch
that something different was needed.&lt;/p&gt;
&lt;p&gt;After taking a handful of deep breaths, I decided that the non-obvious but best option
was to use the parser’s requeue ability.  It took me a bit to flush the concept
out, but it made sense in a non-obvious sort of way.  Once I added any tokens
that arose from the blocks that were closed from the close-blocks action, the only
thing left to do was to properly parse the line.  Putting extra code in that
function to call back into the parser just was not working.  On a whim, thinking
that it probably would not work, I added the lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines_to_requeue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;requeue_line_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RequeueLineInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then returned that &lt;code&gt;requeue_line_info&lt;/code&gt; variable after fourteen &lt;code&gt;None&lt;/code&gt;
keywords.  And it worked!  Well, it mostly worked, but it got me close enough
to getting the document parsed properly that I was able to finish the work in
about ten minutes with some smart debugging.&lt;/p&gt;
&lt;p&gt;What saved me was that while I wanted to keep things simple, I was not afraid to
try something unusual.  Just because it had not worked before, did not mean it was
not going to work this time.  And the idea itself was a stretch.
Up to that point, the requeue
feature of the parser was only used with Link Reference Definitions.  But if there
was another case for using it to make the code cleaner, this was it. Once the
effects of closing the blocks was completed, the cleanest way for the line to
be processed properly was to requeue the line for further processing.  The handling
of the &lt;code&gt;requeue_line_info&lt;/code&gt; return variable was already supported, so no other
code was needed.&lt;/p&gt;
&lt;p&gt;And except for &lt;a href="https://github.com/psf/black/blob/main/README.md"&gt;Black&lt;/a&gt; placing
each return value on its own line&lt;sup id="fnref:record"&gt;&lt;a class="footnote-ref" href="#fn:record"&gt;1&lt;/a&gt;&lt;/sup&gt;, the code was compact and
localized to where the issue was.  That made it easy to tidy things up and verify
that all tests were passing properly before going on.  I did go back and
forth on whether to leave the &lt;code&gt;container_depth&lt;/code&gt; variable debugging in, but as
I have added it and removed it during debugging sessions three times now, I
figured I might as well leave it in.&lt;/p&gt;
&lt;h2 id="issue-76-nested-unordered-list-fun"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/76"&gt;Issue 76&lt;/a&gt; - Nested Unordered List Fun&lt;a class="headerlink" href="#issue-76-nested-unordered-list-fun" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The solution to this issue was so funny to me that it made me laugh.  By looking
at the project code, anyone can tell that I prefer descriptive names for my functions
and variables.  Instead of &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;, I am more likely to use &lt;code&gt;inner_loop_index&lt;/code&gt;
and &lt;code&gt;outer_loop_index&lt;/code&gt;.  It is something that has served me well over the years
and is something I plan to keep on doing.  But that does not mean I always use
it flawlessly.&lt;/p&gt;
&lt;p&gt;In looking over the scenario tests for Rule Md007, I decided that it needed at
least one solid complex scenario test to ensure things were working properly.
As such, I added this Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;

 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
      &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was a good complex test because the only List start or List Item that was
in the right column was the last line.  Every other line was off by at least one
column, and in some cases, off by two columns.&lt;/p&gt;
&lt;p&gt;But when I ran the document through PyMarkdown the first time, the errors that
I got back were not the complete list I was expecting.  Narrowing things down
to the &lt;code&gt;__process_eligible_list_start&lt;/code&gt; function, I debugged through the
following code until I noticed something.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws_before_marker&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;current_start_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;allow_list_removal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws_before_marker&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I did not really notice it clearly at first, but I noticed that something was
weird about the code.  It took me fifteen minutes before I noticed it clearly
enough that I could explain it to myself:  the &lt;code&gt;while&lt;/code&gt; statement was comparing
an index to a depth.  As I walked through it again, the reasoning for the error
crystalized before my eyes.&lt;/p&gt;
&lt;p&gt;In counting terms, depths and positions are usually different than indices.
The first group of items usually start counting at 1, where the indices always
start counting at 0. And in this case, that made all the difference.  Instead of
comparing an index to a depth, I either needed to compare an index to an index
or a position to a depth.  After flipping a coin, I changed the above code
to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws_before_marker&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;last_stack_depth_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;current_start_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;last_stack_depth_index&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;allow_list_removal&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws_before_marker&lt;/span&gt;
    &lt;span class="n"&gt;last_stack_depth_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_stack_depth&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I could have gone either way, but once I altered the &lt;code&gt;last_stack_depth&lt;/code&gt; variable,
it just seemed like the right choice.  More importantly, with those minor changes,
the tests that were previously passing were still passing, as were the tests that
were previously failing.&lt;/p&gt;
&lt;p&gt;Yup, I had an off-by-one error, and I fixed it!  Me, finding an off-by-one
error in my own code.  I laughed.  Maybe you had to be there to get why that
was funny.  But trust me, it was.&lt;/p&gt;
&lt;h2 id="issue-79-fixing-rule-md005"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/79"&gt;Issue 79&lt;/a&gt; - Fixing Rule Md005&lt;a class="headerlink" href="#issue-79-fixing-rule-md005" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rule Md005.  A simple rule, but one that I was never one hundred percent happy
with.  But that was about to change with this issue.  This issue was basically
my “stop complaining and start fixing” issue for this rule.&lt;/p&gt;
&lt;p&gt;From the top, there was never anything wrong with this rule, at least
nothing I could point to at the time.  It just did not feel right.  When I was
implementing the rules and checking out their documentation, I was just
left with a feeling that I had missed something in the rule or its scenario tests.
Along the way, I added an issue about
checking for left alignment and right alignment in the same list, but I knew
that there was more to my feeling than that.  I just had to figure out what that
feeling was based on and deal with it.&lt;/p&gt;
&lt;p&gt;I started the process by looking through the existing scenario tests for any
holes that I perceived in the tests.  Adding scenario tests to address those
spots, I ended up with ten new scenario tests.  As I started testing the
Unordered List elements, I found out that the new tests for those elements were
passing with only small adjustments to do with the reported expected and actual
measurements.  That was good.  But when I got to the Ordered List elements, things
were not in the same shape.  While I had done a decent job on covering simple scenarios
in the original tests, the more complicated scenario tests were largely ignored.&lt;/p&gt;
&lt;h3 id="how-did-this-happen"&gt;How Did This Happen?&lt;a class="headerlink" href="#how-did-this-happen" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Digging into the code, I was able to quickly determine what the issues were.
Before I started addressing this issue, the code for detecting the failures for
List elements was relatively simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__report_issue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;original_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_content&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;original_text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
    &lt;span class="n"&gt;original_text_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;current_prefix_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_content&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;original_text_length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;current_prefix_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__report_issue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If a new List Item was detected, and that List Item element was part of an
Unordered List element, then a simple check was made against the indent level
of the parent List element.  Anything other than that was a failure.  For the
Ordered List Items, there was a bit more to the calculation.  If the two
&lt;code&gt;column_number&lt;/code&gt; fields were the same, then the List Item was left-aligned with
the parent List element, and things were okay.  Otherwise, a calculation was done
to see if the new List Item was right aligned with that same parent List element.&lt;/p&gt;
&lt;p&gt;There is nothing wrong with that logic… for simple cases.  All the tests were
passing properly, and it was detecting each problem properly and triggering the
rule properly.  But the scenario tests that I added were for more complex scenarios,
and that is where that logic failed.  The failures were not about the individual
lines themselves, but how different lines and different lists interacted with
each other.&lt;/p&gt;
&lt;h3 id="what-next"&gt;What Next?&lt;a class="headerlink" href="#what-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After starting to understand the scope of the issues, I took a bit of a break
and did some stuff around the house before getting back to the problem.  Looking
at the issue with a fresh set of eyes, I figured out that there were three significant
issues that I needed to take care of.  The first is that there was no cohesion
between lists within the same base list.  The second is that the determination
of alignment for an Ordered List was being made on a List Item by List Item basis.
Finally, the third issue was that List Start tokens were being left completely
out of the check.&lt;/p&gt;
&lt;p&gt;Leaving a copy of the existing rule in the editor, I started working on a new
rule from scratch.  I started by copying the &lt;code&gt;__report_issue&lt;/code&gt; function and
everything above it over to the new rule, followed by adding a blank &lt;code&gt;next_token&lt;/code&gt;
function.  I then started by adding the framework for the Unordered List elements
back into the function.  Except for a couple of small improvements, that handling
was working fine, so there was no need to make drastic changes to it.  But
the Ordered List elements were another story.&lt;/p&gt;
&lt;p&gt;Instead of tackling each of the above issues individually, I took a step back
and quickly designed a better rule.  Addressing the third problem first, I needed
code that could work with either a List Item or a List start to decide if it
was properly indented.  To that extent, I created the &lt;code&gt;__handle_ordered_list_item&lt;/code&gt;
function that accepted either token as its input and tested that thoroughly
before moving on.  As that function was the cornerstone of the design, it was
critical that I got it right!&lt;/p&gt;
&lt;p&gt;I then designed around the second issue by delaying the determination of the
alignment of the list until the end of the list.  Before the rule had been deciding
that line by line, and it did not work well.  Using this design, I could make a
clean determination of the alignment once using every list element.  Once I had
that determination, I could call the &lt;code&gt;__handle_ordered_list_item&lt;/code&gt;
function at the end of the list without any loss of functionality.  Instead,
it allowed me to simplify the &lt;code&gt;__handle_ordered_list_item&lt;/code&gt; code to look for
one alignment or the other, not both.  That cleared up that issue.&lt;/p&gt;
&lt;p&gt;Finally, I looked at the first issue and came up with a quick and dirty solution.
Whenever a new Ordered List was started, it stored an alignment of &lt;code&gt;UNKNOWN&lt;/code&gt;
at the level of the sublist.  Then, when a positive determination of the
alignment was made, it would update that value to &lt;code&gt;LEFT&lt;/code&gt; or &lt;code&gt;RIGHT&lt;/code&gt;.  Within
the &lt;code&gt;__handle_ordered_list_item&lt;/code&gt; function the following code was added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;list_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;list_alignment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ordered_list_alignment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;list_level&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;list_alignment&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;OrderedListAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RIGHT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At that point, the calculation was as simple as determining the depth of the List
element, grabbing the alignment from the &lt;code&gt;__ordered_list_alignment&lt;/code&gt; field, and
using that value to determine what alignment to check against.  As part of the
design, I verified that unless the alignment was determined to be &lt;code&gt;RIGHT&lt;/code&gt;, the
other two alignments were equivalent.  That helped simplify things.&lt;/p&gt;
&lt;p&gt;It was pedantic, but I walked through it all on paper before writing even
one line of code.  It took a bit of time, but it was worth it.  By doing that,
I was quickly able to spot a couple of design flaws and fix them right away.
I do admit that I had a couple of small “black boxes” that were labelled
&lt;code&gt;calculate alignment&lt;/code&gt; and &lt;code&gt;handle ordered list&lt;/code&gt;, but I was confident that
I had a solid grip on the algorithms for those two components.  It was the
rest of the design I was worried about.&lt;/p&gt;
&lt;p&gt;Once done, I found that with the design in hand, the code came naturally from the
design.  I started with
everything in the &lt;code&gt;next_token&lt;/code&gt; function before moving groups of functionalities into
their own functions. The &lt;code&gt;__compute_ordered_list_alignment&lt;/code&gt; function was used to
calculate the alignment of a list, and &lt;code&gt;__handle_ordered_list_item&lt;/code&gt; was used to
evaluate both Ordered List start tokens and Ordered List Item tokens.  The remaining
&lt;code&gt;handle_*&lt;/code&gt; were used to manage the delegation of calls to those functions, as well
as ensuring that the various fields to collect the required information were maintained.&lt;/p&gt;
&lt;p&gt;It was unexpected, but exception for a couple of small errors that were easily
fixed, the updated version of the rule worked on the first try.  I do not attribute
that to any prowess in writing Python code. Rather it was because I took the time
to design it on paper and walk through the scenarios in my head before going on.
I do admit that sometimes I do some “cowboy coding”, but unless it is something
really simple, I find that those sessions are more hit-or-miss than I prefer.&lt;/p&gt;
&lt;p&gt;But what is important to me is that this entire development process has helped
me hone my design skills. And it was cases like this where I got to use those
skills to produce something that worked very cleanly and very solidly.&lt;/p&gt;
&lt;h2 id="issue-77-fun-with-scripts"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/77"&gt;Issue 77&lt;/a&gt; - Fun with Scripts&lt;a class="headerlink" href="#issue-77-fun-with-scripts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With time left before my noon&lt;sup id="fnref:noonish"&gt;&lt;a class="footnote-ref" href="#fn:noonish"&gt;2&lt;/a&gt;&lt;/sup&gt; deadline, I wanted to look at
a puzzling issue that was just reported within the last couple of days.  In this
issue, the reporter claimed that the &lt;code&gt;pymarkdown&lt;/code&gt; script was not being assigned
the right permissions upon installation.  I double checked with them, and they
confirmed the steps the included with the issue.  It just was not working for them.&lt;/p&gt;
&lt;p&gt;Not wasting any time, I switched over to my &lt;code&gt;pymtest&lt;/code&gt; project and ran my usual
release tests against the version of the project I have built in the &lt;code&gt;dist&lt;/code&gt;
directory.  Two minutes later, I walked through the test script and the output
one line at a time, and everything looked good.  I then switched to the variation
of that script that grabs the package from PyPi.org and performed the same
verification with the same results.  Everything looked good so far.&lt;/p&gt;
&lt;p&gt;Switching over to my Ubuntu shell running on WSL2, I repeated the same tests,
and everything looked fine.  Nothing deviated from my &lt;code&gt;pymtest&lt;/code&gt; project except
the name of the script, the &lt;code&gt;upymtest&lt;/code&gt; project it was in, and that it was running
under Ubuntu instead of Windows 10.  I had to be missing something. But what?&lt;/p&gt;
&lt;h3 id="starting-from-scratch"&gt;Starting From Scratch&lt;a class="headerlink" href="#starting-from-scratch" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I knew I had to do something different, but I did not have a clue of what to
change.  So, the only thing I could think of was to go back to the beginning and
build my way back up to the level of the script in the &lt;code&gt;upymtest&lt;/code&gt; project.
I started by going into the &lt;code&gt;upymtest&lt;/code&gt; project and doing a &lt;code&gt;pipenv --rm&lt;/code&gt; to remove
the virtual environment.  To be sure, I also found out the location of the virtual
environments on my machine and removed both directories associated with them.
Then I tried to remove the &lt;code&gt;Pipfile&lt;/code&gt; file and the &lt;code&gt;Pipfile.lock&lt;/code&gt; file. While
I did think this may be overkill, at the very least I knew I was thorough in
my work!&lt;/p&gt;
&lt;p&gt;Running through the Ubuntu version of my test, everything stayed the same.  It
was frustrating and rewarding at the same time.  There was something in my process
of local testing that masked the issue, and I still had to find it. But at the
same time, I was mostly there, and just had to find the right thing to tweak.
And just to confirm, with a thoroughly removed PyMarkdown package, installing it
from
&lt;a href="https://pypi.org/project/pymarkdownlnt/"&gt;PyPi&lt;/a&gt;
resulted in incorrect permissions, installing it locally resulted in correct
permissions.&lt;/p&gt;
&lt;h3 id="digging-deeper"&gt;Digging Deeper&lt;a class="headerlink" href="#digging-deeper" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So, I pulled up some online resources and started to read them.  I was about
45 minutes into that research when I came across
&lt;a href="https://realpython.com/python-wheels/"&gt;this article&lt;/a&gt;
at Real Python.  In it, there was one line that caught my attention:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you’ve installed a Python package using pip, then chances are that a wheel
has made the installation faster and more efficient.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Huh?  I had always thought it was the tarball, the &lt;code&gt;*.tar.gz&lt;/code&gt; file, which was
used with PyPi.org and the &lt;code&gt;pip&lt;/code&gt; family of commands.  Could I have been wrong?&lt;/p&gt;
&lt;p&gt;With nothing to lose, I read the rest of that article, and I was convinced
that I had made a mistake.  Changing my test process to operation off the wheel
file instead of the tarball, everything worked the same on the Windows shell.
But in the Ubuntu shell, I was finally able to reproduce the behavior.  Installing
from the wheel, the script to start PyMarkdown did not have the correct permissions.
I had reproduced the reported issue, now to fix it.&lt;/p&gt;
&lt;h3 id="scripts-and-permissions"&gt;Scripts and Permissions&lt;a class="headerlink" href="#scripts-and-permissions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that I had a good handle on the problem, I started looking for a solution.
It took a while to find one because looking for &lt;code&gt;python wheel permission script&lt;/code&gt;
or any variation of those words usually results in pages that deal with the proper
permissions needed to install Python packages, not on how to specify the
correct permissions for the scripts.
But it was during one of those searches that I found information referring
to specifying &lt;code&gt;entry-points&lt;/code&gt; to allow for post-install fixes.  That
article was about providing an extra feature to set that package up for use
with one of three editors, but it was still a useful find.  It explained that there
was a &lt;code&gt;console_scripts&lt;/code&gt; setting for &lt;code&gt;entry-points&lt;/code&gt; that creates platform specific
scripts for each entry point at install time.&lt;/p&gt;
&lt;p&gt;That just clicked with me as the right thing to do.  Prior to reading that
article, I had hard-wired the &lt;code&gt;pymarkdown&lt;/code&gt; and &lt;code&gt;pymarkdown.bat&lt;/code&gt; scripts into
the &lt;code&gt;scripts&lt;/code&gt; directory.  Since they have been there for months, I can only
assume that there were one or more examples of projects that used &lt;code&gt;scripts&lt;/code&gt; and
that method of launching projects.  And to be honest, if you are building on a
Linux system and have all the permissions set right, that might be a practical
alternative.  For my setup, it just was not cutting it.&lt;/p&gt;
&lt;p&gt;So, I went to my &lt;code&gt;setup.py&lt;/code&gt; file and removed this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PACKAGE_SCRIPTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and replaced it with these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"console_scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;"pymarkdown=pymarkdown.__main__:main"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;According to the article, that code should inform the setup tools to create a new script
called &lt;code&gt;pymarkdown&lt;/code&gt; specifically for the operating system it is installed on.
In that script, it looks in the &lt;code&gt;__main__&lt;/code&gt; module of the &lt;code&gt;pymarkdown&lt;/code&gt; package
and invokes the &lt;code&gt;main&lt;/code&gt; function.  After a small alteration to the &lt;code&gt;__main__.py&lt;/code&gt;
file to include an extra function, I created a new package.&lt;/p&gt;
&lt;p&gt;Holding my breath, I walked through the Windows installation tests, and everything
worked fine.  Switching over to my Ubuntu shell, I repeated the installation tests
and… everything worked!  It was a relief!  It had taken me three hours at that
point to figure out the problem and devise a solution, but it was worth it.&lt;/p&gt;
&lt;p&gt;Just to be sure, I cleaned up the &lt;code&gt;__main__.py&lt;/code&gt; file and the &lt;code&gt;setup.py&lt;/code&gt; file
before repackaging the project and running through the steps two more times.
Once again, it might have been overkill, but I wanted to make sure.&lt;/p&gt;
&lt;h2 id="release-092"&gt;Release 0.9.2&lt;a class="headerlink" href="#release-092" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having completed all the changes I was going to make for this week, I decided that
I had enough changes and fixes queued up to make a release.  After quick
double checking to make sure that everything looked right, I created a package
using my &lt;code&gt;package.cmd&lt;/code&gt; script.  Then, using both my Ubuntu shell and my Windows
shell, I tested against the wheel file produced by the &lt;code&gt;package.cmd&lt;/code&gt; script to
make sure it installed properly in both environments.&lt;/p&gt;
&lt;p&gt;This was only a slight change from earlier releases, but an important one.  In
earlier releases, I was testing against the &lt;code&gt;*.tar.gz&lt;/code&gt; file produced by the
script, not the &lt;code&gt;*.whl&lt;/code&gt; or wheel file.  As the wheel file is the file that is
uploaded to the PyPi.org site, it is important to test against that file.  As I
thought it was the &lt;code&gt;*.tar.gz&lt;/code&gt; file that was uploaded, I was testing locally
against that file.  As such,
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/77"&gt;Issue 77&lt;/a&gt;
slipped through the cracks.&lt;/p&gt;
&lt;p&gt;But with my slightly adjusted process in place, everything looked good, so
I published the release, tagged the repository, and published the release notes
for the release.  It was a good feeling.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Things are rolling, and I am starting to feel that they are taking longer than
I want them to.  And I know that this is my personal danger zone.  For me,
getting that last five to ten percent of a project done has always been my
weak spot.  It happens not because I grow tired of the project, but because I
do not find any fun in the work.  And yes, solving issues is fun for me,
while double checking everything is more of a chore.&lt;/p&gt;
&lt;p&gt;Regardless, I need to make sure I keep my focus on completing this section of
the work and getting on to more of the interesting problems in the next
section: code quality improvements and performance improvements.  For now,
I am reminding myself of those tasks coming up as a “carrot” to dangle in front
of myself to get this “boring” work done.&lt;/p&gt;
&lt;p&gt;Hope it helps… but I am close enough I think I can manage.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking ahead in the Issues List, I see a lot of validation and a lot of added
scenario tests.  I am not sure which one I will decide to do, but either way, with
those items out the way, the list will almost be down to Priority 3 items.
Gotta like that!
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:record"&gt;
&lt;p&gt;For the record, that is 14 &lt;code&gt;None&lt;/code&gt; keywords and 1 &lt;code&gt;requeue_line_info&lt;/code&gt; variable. &lt;a class="footnote-backref" href="#fnref:record" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:noonish"&gt;
&lt;p&gt;Well… okay, noon-ish. &lt;a class="footnote-backref" href="#fnref:noonish" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Tying Up Some Loose Ends</title><link href="https://jackdewinter.github.io/2021/10/17/markdown-linter-tying-up-some-loose-ends/" rel="alternate"></link><published>2021-10-17T00:00:00-07:00</published><updated>2021-10-17T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-10-17:/2021/10/17/markdown-linter-tying-up-some-loose-ends/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-c.md"&gt;last article&lt;/a&gt;, I talked
about my efforts to clean up the scenario tests and the existing parser issues.
In this article, I continue to talk about cleaning up existing parser issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To an outside viewer, it may seem like I am doing boring stuff, week
in …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-c.md"&gt;last article&lt;/a&gt;, I talked
about my efforts to clean up the scenario tests and the existing parser issues.
In this article, I continue to talk about cleaning up existing parser issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To an outside viewer, it may seem like I am doing boring stuff, week
in and week out. And I will admit, a certain amount of the work that I do is
boring.  But knowing that the work is going towards increasing the quality of
the project really motivates me when things are dragging on. Since I spent
most of this past week finishing the big task from last week, I did find the
need to remind myself of those observations during the week… multiple times.
And remembering why I was doing this did help me push through.&lt;/p&gt;
&lt;p&gt;And while I am used to showing as much code as I can for what I am working on,
this week is going to be a bit different.  To be honest, most of the issues that I
fixed had a relatively minor change that was implemented, with the effects of that
change rippling out into the rest of the code. In some cases, it was a one-line
initial change, and thirty or more lines of ripple changes.
I still will try and explain things as best I can, you have my word on that. I’ll
see how that works out and see how I feel about it later!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/12dae17158b4db3dd2aa51107f0a645b1ad743b5"&gt;12 Oct 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9899a414f1c2c9c86a7f307929bfe1036fad8544"&gt;17 Oct 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="issue-44-the-long-and-winding-road"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/44"&gt;Issue 44&lt;/a&gt; - The Long And Winding Road&lt;a class="headerlink" href="#issue-44-the-long-and-winding-road" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I said during the introduction, it was an exceedingly long week.  I had hoped that
I would be able to rip through the comment strings for the scenario tests that
related to rules, but that was not the case.  Instead of having to read 7 strings
and having to fix 1, I was lucky if I encountered any strings that I did not have
to fix.&lt;/p&gt;
&lt;p&gt;Part of that was my own making though.  To make sure that the strings were all
readable, I started establishing a common preface for each rule comment string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Test to make sure this rule does not trigger with a document that&lt;/span&gt;
&lt;span class="sd"&gt;contains ...&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While that brough consistency to every comment string for rules, it did
involve tons of editing.  That and in the cases where the rule did trigger,
I had to ensure that I removed the &lt;code&gt;not&lt;/code&gt; on the first line.  Just checking
that out for each file took a bit of time.&lt;/p&gt;
&lt;p&gt;And that editing took me into Saturday afternoon.  It was a slog.  But I
never had any doubt that it was worth it.  Did I question if my sanity
would remain intact? Yes, that was something I wondered many
times during the task.  But not the base worth of the task.  I knew that it
was something that I had put off, and I knew that this rewriting was the
price that I needed to pay.  And that was okay with me.  It just
needed to get done.&lt;/p&gt;
&lt;p&gt;But I was incredibly happy when it was done.  There were other things that
I wanted to get cleaned up this week!&lt;/p&gt;
&lt;h2 id="issue-56-cleaning-up-rules"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/56"&gt;Issue 56&lt;/a&gt; - Cleaning Up Rules&lt;a class="headerlink" href="#issue-56-cleaning-up-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In terms of nagging tasks that I wanted to deal with, cleaning up the
comment strings was the biggest one.  Thought it was not as high on the list,
as the comment string, it still bugged me that I had skipped tests.  I know
that at the time that I
marked those tests as skipped it probably was the right thing to do. But now
that I had some time, the right thing to do was to make sure that I resolved
those skipped tests.&lt;/p&gt;
&lt;p&gt;Having resolved some skipped tests dealing with language elements last
week, I decided to try and deal with the skipped tests for rules this week.
Luckily, as soon as I walked through the scenario tests for Rule Md005 and Rule
Md027, I noticed that everything looked correct. All that I needed to do for
those tests was to clean them up, reset the expected values, and verify that
there were no other problems. Done.&lt;/p&gt;
&lt;p&gt;Rule Md028 was another story.  I worked through the debugger and log
files for about an hour or two before I figured out the issue.  In
this scenario, the essence of the problem was with this Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I walked through the parsing of that Markdown, the tokens that I got
back were mostly correct, just in a weird order.  In particular, the Block
Quote was started properly, but it was immediately followed by an end Block
Quote token.  And walking through the code did not at once reveal any
interesting information because everything looked right.  That is until
I noticed that there was a single point where it no longer looked right.&lt;/p&gt;
&lt;p&gt;That point was the on the return of the parser from the
&lt;code&gt;__handle_nested_container_blocks&lt;/code&gt; function.   Everything looked correct before
that function returned, especially the &lt;code&gt;this_bq_count&lt;/code&gt; variable that contains
what the perceived count of the Block Quote is.  It was then that I noticed
that when the function returned, the &lt;code&gt;this_bq_count&lt;/code&gt; variable dropped from
&lt;code&gt;1&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;.  As there was a Block Quote stack token on the &lt;code&gt;token_stack&lt;/code&gt;
and a &lt;code&gt;this_bq_count&lt;/code&gt; variable with a value of &lt;code&gt;0&lt;/code&gt;, that Block Quote was
being closed as no longer being correct.  It was not the proper thing to
do in this case, but in general, it was doing the right thing by removing
the Block Quote from the stack.&lt;/p&gt;
&lt;p&gt;To fix this, one change was needed, with a lot of ripples to accompany it.
The one change was to have the &lt;code&gt;__handle_nested_container_blocks&lt;/code&gt; function
pass the &lt;code&gt;this_bq_count&lt;/code&gt; variable back to its callers.  A handful of
functions needed changes to accommodate this, including code in
the &lt;code&gt;__look_for_container_blocks&lt;/code&gt; function to use this information.
While these changes were not difficult, it took me a bit to get them
right and review them to make sure that I felt that they were right.&lt;/p&gt;
&lt;p&gt;But after all that work, all three sets of rule-based scenario tests
had their &lt;code&gt;skipped&lt;/code&gt; tag removed, and they were all working cleanly.
To make sure things stayed that way, I added test functions
&lt;code&gt;test_extra_009&lt;/code&gt; and &lt;code&gt;test_extra_009a&lt;/code&gt; with the boiled down version of
the issue.  One nagging item off the list.  That felt good!  Now for
another one.&lt;/p&gt;
&lt;h2 id="issue-53-cleaning-up-list-tests"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/53"&gt;Issue 53&lt;/a&gt; - Cleaning Up List Tests&lt;a class="headerlink" href="#issue-53-cleaning-up-list-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes the problem just stares you in the face and announces itself
proudly.  This was the case with test function &lt;code&gt;test_list_blocks_237x&lt;/code&gt;
which was clearly throwing an assert.  Looking at the assert itself,
it was obvious that it was failing, but not how.  By adding a clear
assert message, I was able to find that out.  It was asserting because
it assumed that the extracted whitespace would always be whitespace.&lt;/p&gt;
&lt;p&gt;In this case, the variable &lt;code&gt;adj_line_to_parse&lt;/code&gt; contained the adjusted
line that needed to be parsed.  However, because it occurs within a
Block Quote, the start of the line included the Block Quote characters
and whitespace, not just whitespace.  That meant that when the parser hit
this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the assert failed.  The length of &lt;code&gt;extracted_whitespace&lt;/code&gt; field was as it
was expected to be, the string that it was being compared to just included
other characters at the start of it.&lt;/p&gt;
&lt;p&gt;The first step in fixing this was to change the &lt;code&gt;assert&lt;/code&gt; into an &lt;code&gt;if&lt;/code&gt;.  The
positive case of the previous &lt;code&gt;assert&lt;/code&gt; was working fine, there were just
some cases where it needed some refinement.  To take care of that
“refinement”, this code was added in the &lt;code&gt;else&lt;/code&gt; clause of the &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;original_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;orig_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;original_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;curr_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;delta_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orig_parse&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;curr_parse&lt;/span&gt;
&lt;span class="n"&gt;whitespace_to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;delta_parse&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;whitespace_to_remove&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;whitespace_to_remove&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code was all to get around the possibility that the leading spaces for
any line in a Block Quote can have Block Quote characters as part of that
leading space.  Once past those characters, everything else should be
whitespace.  So, this code works with that ending whitespace to adjust the
line to what it needs to be.&lt;/p&gt;
&lt;p&gt;It took me a while to come up with that approach, but it made sense. And
another nagging issue down.  Just one more left.&lt;/p&gt;
&lt;h2 id="issue-59-cleaning-up-setext-tests"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/59"&gt;Issue 59&lt;/a&gt; - Cleaning Up SetExt Tests&lt;a class="headerlink" href="#issue-59-cleaning-up-setext-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The last nagging issue deal with two almost identical scenario tests:
&lt;code&gt;test_setext_headings_064a&lt;/code&gt; and &lt;code&gt;test_setext_headings_069a&lt;/code&gt;.  With little information
to go on, I started to look at the output of the parser for this document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;
&lt;span class="o"&gt;===&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Quickly looking at those Markdown documents, I guessed wrong that the document
should produce a SetExt Heading.  Using the faithful Babelmark tool, I verified
that the provided Markdown should produce this HTML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Foo
===&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It took me a couple of minutes to have an “aha” moment, but I eventually got there.
The problem that I had is that I prejudged the text because it looked like a SetExt
sequence.  Working though it some more in my head, I could then see that the
second line would be considered a paragraph continuation line unless there was
something more to that second line.  Indeed, when I added two extra spaces before
that second line, it matched the indent of the List Item and became a SetExt
Heading element.  But anything short of that, and it rightfully remaining a
simple paragraph continuation line.&lt;/p&gt;
&lt;p&gt;With that information in hand, I debugged through the &lt;code&gt;parse_setext_headings&lt;/code&gt;
function for a while before adding this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;is_paragraph_continuation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;adj_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;original_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;removed_text_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;original_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;adj_text&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;adj_text&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;removed_text_length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;is_paragraph_continuation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on the &lt;code&gt;if&lt;/code&gt; statement just before this code, it would only be
activated if the Leaf Block Processor was inside a Paragraph element.
In the logic that I added, if that paragraph was inside of a List Item,
a check was added to see how much whitespace was removed from the line
to get to that point.  If the amount removed was less than the indent
level and there was at least one non-whitespace character on that line,
it considered the current line a paragraph continuation.&lt;/p&gt;
&lt;p&gt;With that logic in place, the ‘if’ statement in the code that followed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;after_whitespace_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;extra_whitespace_after_setext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collected_to_index&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;after_whitespace_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_paragraph_continuation&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;after_whitespace_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, the existing logic was almost fine, but needed to also
check that it was not a paragraph continuation before proceeding.
Verifying the new code against both original test functions, it
also passed the two new function I added to help diagnose the problem.
I did leave them in there as they cleanly verified the boundary
cases that existed.&lt;/p&gt;
&lt;h2 id="issue-43-sometimes-it-is-a-small-fix"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/43"&gt;Issue 43&lt;/a&gt; - Sometimes It Is A Small Fix&lt;a class="headerlink" href="#issue-43-sometimes-it-is-a-small-fix" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Encountered during a previous debugging session, I made a note to myself to
check out the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;First&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
  &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;First&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;First&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;First&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Second&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;First&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Third&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;Second&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While that Markdown made no difference to the rule that I was debugging at the time, I
recognized that it was not properly creating a List Item out of the fourth line
as it should have.  Instead, the List Item started on line 3 contained both the
text for line 3 and for line 4.&lt;/p&gt;
&lt;p&gt;After creating a new scenario test, I quickly dropped into debug mode and found
the problem relatively easily. Near
that start of the &lt;code&gt;is_olist_start&lt;/code&gt; and &lt;code&gt;is_ulist_start&lt;/code&gt; functions, there is a
standard whitespace check to make sure that the whitespace does not exceed the
usual three characters.  Simply speaking, prefaced with zero to three spaces,
this Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is translated as a List Item.  By adding one more space to that prefix:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;indented&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;that List Item becomes content for an Indented Code Block.  Within another
List element, after the list indent is considered:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is translated into a List and a Sublist, while:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;continuation&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is translated into one List with two-line content.&lt;/p&gt;
&lt;p&gt;Verifying that everything still worked properly for the first two cases, I then
moved my focus to the remaining two cases. While the last case worked properly,
the “this is a nested list” case was being parsed as a continuation line.&lt;/p&gt;
&lt;p&gt;With my eyes on those whitespace checks, this made sense.  Those checks were
evaluating whether the number of whitespace characters from the beginning of
the line was three or less.  In the “nested” case, it was failing that check
from the beginning of the line, when it should have been passing that check
from the start of the indent from the first List.&lt;/p&gt;
&lt;p&gt;Already having calculated the amount of indent required by the parent list in
the &lt;code&gt;__adjust_whitespace_for_nested_lists&lt;/code&gt; function, it was a simple matter
to pass it back with the &lt;code&gt;adj_ws&lt;/code&gt; value.  Once passed back, that value was
added into the whitespace length check to reduce the required whitespace
properly.&lt;/p&gt;
&lt;p&gt;After the code was passing the first scenario test &lt;code&gt;test_extra_010x&lt;/code&gt;, I
added two extra scenario tests to make sure that this worked for other
cases.  While I could have added more tests, I figured that these
three tests gave the changes a good amount of coverage for now.  If necessary,
I can always go back and add more.&lt;/p&gt;
&lt;h2 id="issue-62-sometimes-it-really-is-a-check"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/62"&gt;Issue 62&lt;/a&gt; - Sometimes It Really Is A Check&lt;a class="headerlink" href="#issue-62-sometimes-it-really-is-a-check" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At an earlier point in the project’s history, I had tested this snippet of Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;simple&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and it had failed.  I can remember adding it during the development of Rule Md027,
as the repository history
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d34c7ed2248c4728ce4c14b812bad6a6a2c87289/issues.md"&gt;attests to&lt;/a&gt;,
and I remember being surprised that something so simple could change the tokens.&lt;/p&gt;
&lt;p&gt;However, in the time between 2021 Aug 15 and when I looked at on the morning
of 2021 Oct 17, it has ceased to be a problem.  Just to be sure, I added three new
scenario tests &lt;code&gt;test_extra_011x&lt;/code&gt; to &lt;code&gt;test_extra_011b&lt;/code&gt; to ensure that it would
remain a non-issue.  Sometimes you get lucky.&lt;/p&gt;
&lt;h2 id="issue-64-and-sometimes-you-did-something-wrong"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/64"&gt;Issue 64&lt;/a&gt; - And Sometimes You Did Something Wrong&lt;a class="headerlink" href="#issue-64-and-sometimes-you-did-something-wrong" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Noticed during the “grand” commenting rewriting of
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/44"&gt;Issue 44&lt;/a&gt;,
I added a note to the Issues List to check on Rule Md030, as I had noticed something
weird.  It was a good thing that I noticed it, as there was something weird that was
exposed by the scenario tests.&lt;/p&gt;
&lt;p&gt;When I went to verify Rule Md030 and its scenario tests, I started by looking at the
original rule that this rule was based off.  While there is little clear
documentation on the configuration values for the original rule, this specific phrase
leapt out at me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;consists of a single paragraph or multiple paragraphs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The reason that this leapt out at me is that the work I had done on Rule Md030
was about single versus multiple levels of lists not paragraphs.  Delving into
the disconnect a bit more, the page
&lt;a href="https://cirosantilli.com/markdown-style-guide/#spaces-after-list-marker"&gt;sited by the original rule&lt;/a&gt;
does show examples with multiple paragraphs, not multiple levels within a list.&lt;/p&gt;
&lt;p&gt;I can honestly say that the thought that went through my head was something akin
to “huh.  wonder how that happened?”  To be continually honest, if this is the
only big mistake I made during my efforts to implement every rule, I
will still consider it remarkably successful.  For me, if I do not must throw
away lots of work, my focus is on getting things done right, not
trying to figure out where it messed up.&lt;/p&gt;
&lt;p&gt;Looking through the code for module &lt;code&gt;rule_md030.py&lt;/code&gt;, most of the code was still
very usable.  I removed the function &lt;code&gt;__is_current_list_multiline&lt;/code&gt; as it was no
longer needed.  Instead, the &lt;code&gt;__current_list_parent&lt;/code&gt; field and the
&lt;code&gt;__paragraph_count_map&lt;/code&gt; field were introduced to track the current list item and
the paragraph count for that list item.  Other than those changes, plus some
extra code to properly populating those fields and their associated objects,
and it relatively remained the same.&lt;/p&gt;
&lt;p&gt;However, the changes to the scenario tests were more substantial.  Each of the
existing &lt;code&gt;*_double.md&lt;/code&gt; tests were changed to have a list item with two paragraphs
instead of a list item that was part of a level 2 sublist.  Basically, the
Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;First&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;Second&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;Second&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Third&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;First&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;Second&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

   &lt;span class="k"&gt;Second&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Third&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To add coverage to properly test the new understanding of the rule, eight new
scenario tests were added with nested sublists.  These were evenly divided between
the Ordered Lists and Unordered Lists, and again between single paragraph List Items
and multiple paragraph List Items.  Add to that the required cleanup of the documentation
page for &lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/rules/rule_md030.md"&gt;Rule Md030&lt;/a&gt;,
and things were ready to go!&lt;/p&gt;
&lt;h2 id="issue-66-winding-down"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/66"&gt;Issue 66&lt;/a&gt; - Winding Down&lt;a class="headerlink" href="#issue-66-winding-down" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As far as authoring these articles go, I am getting into a good groove most
weekends.  Because I take the time during the week to curate a simple outline
of what I want the article to be, I can start building a set of good paragraphs
and examples from that outline and really bring it to life.  But sometimes I
can get ahead of where I feel I need to be, and tonight is one of those nights.&lt;/p&gt;
&lt;p&gt;Having spent a solid amount of time writing, doing work around the house, and
spending time with my family, I found I had some “extra” time left over.  To be
honest, the reason the word &lt;em&gt;extra&lt;/em&gt; is in quotation marks is because there
really is no concept of extra time.  I believe it would be more correct to say
that I found myself with about two hours of time that I had not planned for,
and I wanted to fill that time with something useful.  As such, I started to
look at some more of the issues that I logged during my work on
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/44"&gt;Issue 44&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first issue that I grabbed was simple labelled as such:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;###&lt;/span&gt; &lt;span class="n"&gt;Verify&lt;/span&gt; &lt;span class="n"&gt;test_md023_bad_improper_indent_atx_in_list_item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As such, I looked at the specified tests, and everything looked fine.
In fact, it was a fitting example of Rule Md023 operating cleanly inside of a
List Item.  Then I took another look at the title of the function:
&lt;code&gt;test_md023_bad_improper_indent_atx_in_list_item&lt;/code&gt;.  Well, that was a bit off!&lt;/p&gt;
&lt;p&gt;To fix this issue, and the same issue with the &lt;code&gt;*in_block_quotes&lt;/code&gt; variant
of this scenario test, I changed the prefix of both files from
&lt;code&gt;test_md023_bad_improper&lt;/code&gt; to &lt;code&gt;test_md023_good_proper&lt;/code&gt;.  After changing the
file names, I changed the scenario text function names to match, and all
was good.  However, to make sure the original intent of those scenario tests
was fulfilled, I created two new test functions and test data files with the
original names.  Executing those two new scenario tests, I then verified
that they were failing properly, adjusted the expected output, and declared
the issue fixed.&lt;/p&gt;
&lt;h2 id="issue-70-more-winding-down"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/70"&gt;Issue 70&lt;/a&gt; - More Winding Down&lt;a class="headerlink" href="#issue-70-more-winding-down" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the minutes of my “extra” time winding down, I found this issue and
figured out that it was a simple one to fix.  For the most part, the main
problem with this issue was that the names of the functions were not
indicative of what was being tested.  In addition, I added a new
&lt;code&gt;test_md036_bad_configuration_punctuation&lt;/code&gt; test function to supply a test
for the &lt;code&gt;punctuation&lt;/code&gt; configuration value.&lt;/p&gt;
&lt;p&gt;And then I put the digital equivalent of my pen down for the evening.
I had an incredibly good start on the article for this week, and I also had
managed to get a fair number of items removed from the Issues List.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To explain how I am feeling about the project is hard to explain without
relating it to something relatable like drafting an article or an essay.
There are those essays that we all wrote in high school where we just
wanted to get it done.  Those were more about ensuring that we met the
minimum requirements for the essay to be counted by our teachers, and
that was it.&lt;/p&gt;
&lt;p&gt;This project is something different to me.  To me, this feels like an
extended essay on something that I care very deeply about.  It is not
enough that I want to meet the minimum requirements of the task, I
want to make sure to convey a certain feeling with my essay.  To that
extent, I do not mind if I must go over certain parts of the essay
repeatedly until I get the tone and theme exactly right.&lt;/p&gt;
&lt;p&gt;From a given viewpoint, this project is already a success.  I have
a beta release that is out, and it addresses the linting requirements
that I want it to address.  But for me, that is not enough.  I want
to make sure the project is solid, with good development principles
throughout.  And for me, the first part of meeting that goal is to
address those items that I put off for any reason.&lt;/p&gt;
&lt;p&gt;And for me, striving to increase quality is the goal that keeps
me going!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be blunt, I am starting to get to the end of the easier to resolve
issues.  What are left are more general issues and issues that require
me to double check things.  Not sure where that is going yet, so
stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Cleaning Things Up</title><link href="https://jackdewinter.github.io/2021/10/10/markdown-linter-cleaning-things-up/" rel="alternate"></link><published>2021-10-10T00:00:00-07:00</published><updated>2021-10-10T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-10-10:/2021/10/10/markdown-linter-cleaning-things-up/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-b.md"&gt;last article&lt;/a&gt;, I talked
about the headway I am making towards getting more pending issues dealt with.
In this article, I talk about my efforts to clean up the scenario tests and
the existing parser issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another week of demanding work, and another week of results …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-b.md"&gt;last article&lt;/a&gt;, I talked
about the headway I am making towards getting more pending issues dealt with.
In this article, I talk about my efforts to clean up the scenario tests and
the existing parser issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another week of demanding work, and another week of results to show for it.  While
the results of this week are not as flashy and the results from previous weeks,
they are still all very meaningful and useful.  After a couple of weeks focusing
on the newer issues, I decided to tackle some of the older issues.  Or
at the very least, issues that have been around for a while.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather than the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/c265b2328298ca134e31b3fc14dd448e4c4ab37a"&gt;06 Oct 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/debc82ac05bf2c8db689fd9b4f8bf69352d5ec6a"&gt;10 Oct 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="issue-44-the-task-that-keeps-on-giving"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/44"&gt;Issue 44&lt;/a&gt; - The Task That Keeps on Giving&lt;a class="headerlink" href="#issue-44-the-task-that-keeps-on-giving" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To say that completing Issue 44 is a huge task is not doing it justice.  At nine hours and counting,
I have verified that all non-rule scenario tests have either descriptive or derivative
documentation at the top of their test function.  With over 3300 scenario tests as of this
afternoon, it is no easy feat to go through and verify the comment string starting each
test.  It is incredibly boring and monotonous.  And I do not know about any readers,
but for me, those are the tasks where I get into a mindless kind of action that easily
leads itself to mistakes.  Did I mention monotonous?  Huge? Boring?&lt;/p&gt;
&lt;p&gt;So why do it?  Because I believe it is the right thing to do.  During the months of
work on this project, I tried to keep every comment string current.  When all is said
and done, that is the easiest way to ensure the documentation is up to date.  But the truth is
that I did not always keep those strings current.  If I were in a hurry, I would often
copy a scenario test, change it to suit the current circumstances, and then go on to
the next scenario test.  The function name of the test was changed, but not the description.
It was because of that “speedy” behavior that I now found myself scouring over 3300 scenario
tests for proper comment strings.&lt;/p&gt;
&lt;p&gt;After nine hours of grueling work, I now have all scenario tests covered except for the ones
that deal with the rules.  There is not much to talk about regarding the fixing of documentation
strings.  In each case, I determine if the scenario test is an original test or a derivative
of a nearby test.  If it is an original test, I create a descriptive comment string to
try and capture what the test is trying to achieve.  In the other cases, I use a
derivative comment string, usually stating with &lt;code&gt;variation of&lt;/code&gt;, that notes the test that
it is a derivative of and what change is being made for that specific test.&lt;/p&gt;
&lt;p&gt;To be honest, while this task is monotonous, extremely monotonous, it is mostly
reading the comment strings to make sure they make sense.  When there are obvious
copy-and-forget-to-change strings, they are typically easy to spot and come in groups
of three or more.  There really is no other way to describe it than it being a boring
task.  But the benefit is in having a coherent set of scenario tests with confidence
that their comment strings describe what the test is about.  And that decreases the
cost of maintaining the project.&lt;/p&gt;
&lt;p&gt;It is a pain, but it is worth it.  I think so at least.  But let me revisit that
statement once I have finished verifying every scenario test.  As a friend said
one time:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your Mileage May Very.  Objects in the rear-view mirror may be closer than they appear.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="issue-28-pre-commit-hooks"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/28"&gt;Issue 28&lt;/a&gt; - Pre-Commit Hooks&lt;a class="headerlink" href="#issue-28-pre-commit-hooks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It probably skipped everyone’s notice, but a change was introduced
during the last month to add Git pre-commit support to the project.  The
change itself was a ridiculously small one: adding the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/.pre-commit-hooks.yaml"&gt;.pre-commit-hooks.yaml&lt;/a&gt;
file to the project by one of our contributors.  But the effect was huge. The PyMarkdown
project can now be used as a pre-commit hook on any system that supports Git Pre-Commit
hooks.&lt;/p&gt;
&lt;p&gt;By including that file in the repository, Git projects on GitHub can now
leverage that information to execute the PyMarkdown project without having to
install a Python package.  While the file itself does not contain much
information, it allows for a &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file to be added to any
repository that references PyMarkdown.  If that file is present and contains a
reference to the PyMarkdown repository
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/pre-commit.md"&gt;as documented here&lt;/a&gt;,
then PyMarkdown will be invoked as configured.  It is neat and tidy.  Even better,
it is an almost zero-cost approach for using PyMarkdown.&lt;/p&gt;
&lt;p&gt;But as with any project, there were a couple of baby steps that needed to be taken.&lt;/p&gt;
&lt;h3 id="problem-1-allowing-for-configuration"&gt;Problem 1: Allowing for Configuration&lt;a class="headerlink" href="#problem-1-allowing-for-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first issue with this feature was easy to overcome: how to allow for
configuration?  Because of the way the &lt;code&gt;.pre-commit-hooks.yaml&lt;/code&gt; file is organized,
my first instinct was to specify an &lt;code&gt;entry&lt;/code&gt; value of &lt;code&gt;pymarkdown scan&lt;/code&gt;.  While this
worked as a great default, when custom arguments were added, they were appended
to the end of that value.  Therefore, if you wanted to disable rule &lt;code&gt;not-me&lt;/code&gt; and tried
to add an &lt;code&gt;args&lt;/code&gt; value of &lt;code&gt;["--disable-rules", "not-me"]&lt;/code&gt;, the executed command
line would be &lt;code&gt;pymarkdown scan --disable-rules not-me&lt;/code&gt;.  Adding the &lt;code&gt;scan&lt;/code&gt; keyword
to the end would not work either, as that keyword had already appeared.&lt;/p&gt;
&lt;p&gt;After a bit of research, the solution to this was to use a good default
and to add easy-to-read documentation on how to deal with the rest.  Having the
default composed string of &lt;code&gt;pymarkdown scan&lt;/code&gt; was the correct choice, I just chose
a bad implementation of how to get there.  By splitting those two keywords into
an &lt;code&gt;entry&lt;/code&gt; value of &lt;code&gt;pymarkdown&lt;/code&gt; and an &lt;code&gt;args&lt;/code&gt; value of &lt;code&gt;scan&lt;/code&gt; provided the
required flexibility to add user-defined configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pymarkdown&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;PyMarkdown&lt;/span&gt;
  &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"PyMarkdown&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GitHub&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Flavored&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Markdown&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CommonMark&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Compliant&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Linter"&lt;/span&gt;
  &lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
  &lt;span class="nt"&gt;language_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python3&lt;/span&gt;
  &lt;span class="nt"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pymarkdown&lt;/span&gt;
  &lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;scan&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;markdown&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To deal with the rest of the issue,
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/pre-commit.md#arguments"&gt;documentation was added&lt;/a&gt;
to inform the user that
if they add scanning configuration, the final &lt;code&gt;args&lt;/code&gt; argument should be &lt;code&gt;scan&lt;/code&gt;.
While there is nothing preventing users from using any of the other modes of
the project, those modes tend to be mostly static.  Therefore, I determined that
invoking those modes have near-zero use for invoking PyMarkdown through a
pre-commit hook and geared the pre-commit documentation solely towards
the &lt;code&gt;scan&lt;/code&gt; mode usage.&lt;/p&gt;
&lt;h3 id="problem-2-what-is-good-documentation"&gt;Problem 2: What Is Good Documentation?&lt;a class="headerlink" href="#problem-2-what-is-good-documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While addressing the simple stuff for pre-commit hooks was easy, there was an
interesting question posed by one of the contributors.  The
condensed version of that question was: why provide any pre-commit documentation
at all?  The points that they raised were valid.  The target implementation
of pre-commit used by GitHub may change, requiring a change to the documentation.
So would not a “for any questions, go to pre-commit’s site” be sufficient.&lt;/p&gt;
&lt;p&gt;Thinking about the issue like someone who had just found out about pre-commit
hooks&lt;sup id="fnref:rediscover"&gt;&lt;a class="footnote-ref" href="#fn:rediscover"&gt;1&lt;/a&gt;&lt;/sup&gt;, I added documentation while trying to maintain that viewpoint.
My goal was
to add enough documentation that a relative pre-commit newbie like myself could
add PyMarkdown support to their project using that documentation.  While the amount
of text in that document was not large, it was not small either.  But for me, it
was the right amount of documentation for the subject at hand.&lt;/p&gt;
&lt;p&gt;Even so, I spent the next couple of weeks after that comment wondering whether
I had gone overboard or not.  It was not an easy decision or a hard decision,
I just was not sure how I should evaluate it.&lt;/p&gt;
&lt;p&gt;In the end, I decided I had to set a clear goal for the feature and for the
documentation.  To me, the goal of the feature was
to make it easy to add PyMarkdown support into a Git project.  Once I
nailed that down, the documentation focus became a lot clearer.  If I
wanted to make adding pre-commit support easy, I needed good support to walk
people through 90% of the things they can do with PyMarkdown and their
pre-commit hooks.&lt;/p&gt;
&lt;p&gt;With that focus, I felt that the scope of the document
was validated.  As I had written the document as a relative pre-commit
newbie, I felt that the information presented answered all normal
questions that I had during that process.  How do I add it? Where
do I add it? Can I lock it down to a version so I can replicate a
set of results? How do I configure it?  Can I use a local configuration
file?  Can I control which files it scans?  These were all questions
that I asked myself when I added PyMarkdown support to one of my
private repositories.&lt;/p&gt;
&lt;p&gt;While the document is long, I strongly feel that it answers each
of the questions in the previous paragraph properly.  And from my viewpoint,
if my goal is to make it easy to add PyMarkdown support through git pre-commit
hooks, then that is the level of documentation required. Time will tell.&lt;/p&gt;
&lt;h2 id="release-091"&gt;Release 0.9.1&lt;a class="headerlink" href="#release-091" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully release events will be happening more frequently for this project,
and this was a good one.  With a good collection of additions and fixes, it
just felt like a suitable time to release an update.&lt;/p&gt;
&lt;h2 id="issue-47-fun-with-fenced-code-blocks"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/47"&gt;Issue 47&lt;/a&gt; - Fun with Fenced Code Blocks&lt;a class="headerlink" href="#issue-47-fun-with-fenced-code-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Okay, maybe fun is not the right word.  Going back over the results of
the latest test scan, I noticed that I still had around eleven scenario
tests that were marked as &lt;code&gt;skipped&lt;/code&gt;.  Deciding to tackle them to wrap up
the week, I first started looking at the three scenario tests that were
part of the Fenced Code Block tests.&lt;/p&gt;
&lt;p&gt;The parsing errors were simple to see.  In two of the tests, a
start Fenced Code Block token was present without a matching end
Fenced Code Block token.  The remaining test mistakenly reports the
Fenced Code Block element as a HTML Block element, totally missing the
mark.  It just looked bad.&lt;/p&gt;
&lt;p&gt;The good news?  Well… the relatively good news?  All three scenario tests
dealt with Link Reference Definitions that are aborted part way through. As
I have mentioned in previous articles, the proper handling of Link Reference
Definition elements are not easy, and those elements remain as the one aspect
of the parser that does not have my full confidence.  That lack of confidence
is not for lack of trying.  It is a measure of the many combinations of aborted
Link Reference Definitions and the other elements that surround them there are.
I know I am getting closer to having them
all covered, but I am not sure that I have every combination covered… yet!
This was just continuing the process of increasing coverage on Link
Reference Definitions, and I was ready to accept that challenge.&lt;/p&gt;
&lt;h3 id="covering-this-combination"&gt;Covering This Combination&lt;a class="headerlink" href="#covering-this-combination" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In each of these three scenarios, a Fenced Code Block element was started inside
of a container element.  In all three scenarios, the next line includes a
valid open for a Link Reference Definition element, only to have the container
close on the third line.  From a parser point of view, the Link Reference
Definition element was only in a partial state and therefore needs to be
rewound to be interpreted as normal text.  It was in that code that the
issue appeared.&lt;/p&gt;
&lt;p&gt;In all three scenarios, the currently active token stack (&lt;code&gt;token_stack&lt;/code&gt;)
and the current token document (&lt;code&gt;token_document&lt;/code&gt;) maintained in the
&lt;code&gt;parser_state&lt;/code&gt; variable were not being rewound properly.  The result
was that both the &lt;code&gt;token_stack&lt;/code&gt; and &lt;code&gt;token_document&lt;/code&gt; variables were left
in weird states.  It was then that I recognized that the second line of
the Link Reference Definition was valid, and I needed to adjust the
tokens to match a partially finished Link Reference Definition.&lt;/p&gt;
&lt;p&gt;In these specific cases, the second line of the Link Reference Definition
was properly following the first line, providing a Link Reference Definition
element that has a label and an URL, but no title.  By reducing the
number of examined lines to only include those two lines, the code was
able to form a complete reference with only the label and the URL.
After having done that, the work that went into that was being
erased.  But why?&lt;/p&gt;
&lt;p&gt;Looking some more at the code, the answer slowly became obvious.  As the code
for the &lt;code&gt;process_link_reference_definition&lt;/code&gt; function existed at that time,
if a requeue was requested, the code assumed that no valid Link Reference
Definition was parsed.  However, in these three scenarios, a partial Link Reference
Definition was found and there was at least one line to requeue for
processing.&lt;/p&gt;
&lt;p&gt;The fix was simple: do not rewind everything if a partial reference is
parsed.  Even a partial reference is valid and that means that the
text from the start of the element remains valid.  Looking in the (seriously
in need of a refactor) function &lt;code&gt;process_link_reference_definition&lt;/code&gt;, there is
a block of code near line 188:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lrd_stack_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy_of_last_block_quote_markdown_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and another block near line 228:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To fix these scenarios, I grabbed the lines between those two sections
and placed them under the following conditional:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;did_complete_lrd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even though there may be lines that need to be requeued, if there
is even a partial Link Reference Definition, the document stack and the
document token are not rewound.&lt;/p&gt;
&lt;p&gt;It took a while to figure that out, but when I added that code, things
started to fall into place.  I went through the three scenario tests and
started to adjust the tokens and to verify the output against
&lt;a href="https://johnmacfarlane.net/babelmark2"&gt;Babelmark&lt;/a&gt;.
And things just worked.  It was a good feeling.&lt;/p&gt;
&lt;h2 id="issue-49-html-blocks"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/49"&gt;Issue 49&lt;/a&gt; - HTML Blocks&lt;a class="headerlink" href="#issue-49-html-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Following up from the previous work I did on Fenced Code Blocks, I thought
that dealing with the six scenario tests dealing with HTML blocks was a good
option for my next task.  That, and
while I had confidence I could deal with the skipped List element scenario
tests, I wanted to leave them to last.  I know that container elements are
tricky and can easily devolve into a time sink.  So, HTML Block elements it
was!&lt;/p&gt;
&lt;h3 id="html-blocks-are-like-code-blocks"&gt;HTML Blocks Are Like Code Blocks&lt;a class="headerlink" href="#html-blocks-are-like-code-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting at the end of the skipped HTML Block tests, I worked my way back
up the list.  It was quickly obvious that the problem with each of the
first four tests was a simple one.  In each case, the Container Block
processor was looking for a valid Link Reference Definition within a
HTML Block element.  It was as simple as that.&lt;/p&gt;
&lt;p&gt;If that does not make sense, there are two lines in the
&lt;a href="https://github.github.com/gfm/#html-blocks"&gt;GitHub Flavored Markdown specification&lt;/a&gt;
that should make this clear:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTML blocks continue until they are closed by their appropriate end
condition, or the last line of the document or other container block.
This means any HTML within an HTML block that might otherwise be
recognized as a start condition will be ignored by the parser and passed
through as-is, without changing the parser’s state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While a bit terse, the meaning of those two sentences is clear.  Once a
HTML Block element is started, any HTML is passed through as-is.  To be
even more precise, everything within the block is considered HTML, even if it is
not valid HTML.  Therefore, if something that looks like a Link
Reference Definition is started, it should be treated like HTML and
passed through as-is.&lt;/p&gt;
&lt;p&gt;To address that problem, I modified the call to &lt;code&gt;__handle_link_reference_definition&lt;/code&gt;
in the function &lt;code&gt;__parse_line_for_leaf_blocks&lt;/code&gt; from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;outer_processed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContainerBlockProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_link_reference_definition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;outer_processed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ignore_link_definition_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;pre_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;ignore_lrd_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ignore_link_definition_start&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_html_block&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;outer_processed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContainerBlockProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_link_reference_definition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;outer_processed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ignore_link_definition_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ignore_lrd_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;pre_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code ignores any Link Reference Definition starts if
the flag is passed to the function or if the current stack token is
an HTML Block token.&lt;/p&gt;
&lt;p&gt;Going through the last four scenario tests, I was able to make quick work of
getting each of the tests cleaned up and passing.  In each scenario, it was
just matter of validating the tokens by hand, then using Babelmark to verify
the HTML.  That process went quickly.&lt;/p&gt;
&lt;p&gt;To ensure that things were kept in a good state, I decided to commit these
changes, having a good solid bookmark for later.   It turns out that it was
a clever idea that would pay dividends soon.  Things were about to get messy.&lt;/p&gt;
&lt;h3 id="link-reference-definitions-and-line-requeues"&gt;Link Reference Definitions and Line Requeues&lt;a class="headerlink" href="#link-reference-definitions-and-line-requeues" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I can clearly remember looking at the Markdown for scenario test
&lt;code&gt;test_html_blocks_extra_02a&lt;/code&gt;, then looking at the generated HTML and thinking
“that looks wrong”.  It took me about twenty minutes of looking
and work around the house to figure out why, but I got there.&lt;sup id="fnref:break"&gt;&lt;a class="footnote-ref" href="#fn:break"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;To understand the reason that the generated HTML looked wrong
requires history on the PyMarkdown project.  I started working on the
PyMarkdown project because I saw a need for a Markdown linter that was
written in Python.  Now, I have a long love of parsers based on solid
specifications because there is a finality to them that is appealing to me.
People can argue about whether this one piece of Markdown is prettier or more
functional than another piece of Markdown.  That is opinion.  But I decided to
start writing the parser against the
&lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown specification&lt;/a&gt;,
following that wherever it took me.  It was a solid specification with examples,
so it provided guidance what was valid and test data that backed up that
guidance. For most of the project, I easily implemented the new elements,
one after the other.&lt;/p&gt;
&lt;p&gt;The last element of the specification core that I implemented were Link
Reference Definition elements.  From looking at the specification for the
element, I knew there was a simple way to do it and a proper way to do it.
Knowing that the difference between the two approaches was at least one month
of development time, I followed my gut and decided to do it the proper way.
Regardless of what happens, I solidly feel that I made the right decision at
that point.&lt;/p&gt;
&lt;p&gt;And the fallout from that decision was not easy to swallow.  The resultant
effort added at least two months of work required to support Link Reference Definitions
and line requeues.  Parsing the Link Reference Definitions going forward
was the easy part.  Because of the nature of Link Reference Definitions,
it is not unusual for the next line to be read in before determining if an
active Link Reference Definition is complete.  If that next line completes
the Link Reference Definition, everything is good.  Otherwise, the data
needs to be rewound, resulting in any lines used to be requeued.  To
keep things simple, I always use the &lt;code&gt;requeue_line_info&lt;/code&gt; variable to denote
requeued lines of this nature.&lt;/p&gt;
&lt;p&gt;Those line requeues also must reverse any state changes, which is where
the problems usually arise.  In a smaller, more contained system, it would
be easier to record any changes and simply roll them back when the lines
are requeued.  That is a more challenging task to achieve in this project.
I am confident that I have at least 85% to 90% of the cases dealt
with, but that is just a guess.  And with only a small handful of failures
in the base specification’s test data, I have had to generate my own test
data to test these scenarios properly.&lt;/p&gt;
&lt;h3 id="what-does-this-mean-for-these-tests"&gt;What Does This Mean for These Tests?&lt;a class="headerlink" href="#what-does-this-mean-for-these-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With that history refresher completed, I can now point out that PyMarkdown
is one of the few parsers that I have examined that properly implement Link
Reference Definitions. After talking with a handful of parser authors and checking
their source code,
the most prevalent way of parsing Link Reference Definitions is to examine
parsed Paragraph elements looking for Link Reference Definitions within
their content.  While it is not a perfect match for the functionality, that
approach surprisingly handles most of the cases that come up.  The only
difference is that the use of Paragraphs as a “container” also allows for
Paragraph Continuation to happen.&lt;/p&gt;
&lt;p&gt;It was as I was looking at the &lt;code&gt;test_html_blocks_extra_02a&lt;/code&gt; test when all
this information came flooding back to me.  The resultant HTML looked wrong
because it was wrong.  If you are using the “parse from paragraph” approach,
then the Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;producing a Link Reference Definition token makes sense.  Line two starts the
Link Reference Definition, only to be continued and completed on line three
because line three becomes
&lt;a href="https://github.github.com/gfm/#paragraph-continuation-text"&gt;paragraph continuation text&lt;/a&gt;,
allowing it to be added to the previous line due to
&lt;a href="https://github.github.com/gfm/#lazy-continuation-line"&gt;laziness&lt;/a&gt;.  This results in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, I decided to approach Link Reference Definitions as their own leaf
element.  This meant adjusting the output of the scenario tests to
reflect that approach.  In particular, the above example produces the following
HTML output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="err"&gt;/url&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without the paragraph continuation promoting laziness, the Link Reference
Definition is not valid, resulting in it being interpreted as plain text.&lt;/p&gt;
&lt;h3 id="fixing-the-problem"&gt;Fixing The Problem&lt;a class="headerlink" href="#fixing-the-problem" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Digging into this problem, I noticed a few issues that I needed to solve.
The first issue was in the &lt;code&gt;__check_for_list_closures&lt;/code&gt; function where an
already started Link Reference Definition stopped a list from being properly
closed.  In the previous Markdown example, this is what prevented the parser
from properly terminating the Link Reference Definition when the indentation
did not support continuing the list on line three.&lt;/p&gt;
&lt;p&gt;But removing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;was_link_definition_started&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;caused a cascade effect. Once removed, the &lt;code&gt;close_open_blocks_fn&lt;/code&gt; function was
able to try and close the open list element.  The problem that it uncovered is
that there was not any support for the &lt;code&gt;requeue_line_info&lt;/code&gt; variable.
It took the better part of two hours to add proper support for the
&lt;code&gt;requeue_line_info&lt;/code&gt; variable, including support for the cases where that
variable was not used.  And even after adding that code and getting all
the other tests passing, I still walked through the scenarios with the debugger
to make sure things were working properly.&lt;/p&gt;
&lt;p&gt;As I switched my focus back to solving the issue for the tests, the
next issue that arose was that an extra blank line was getting inserted
during the rewind.  After figuring out that it was the “empty”
arguments used to terminate the Link Reference Definition in the
&lt;code&gt;close_open_blocks_fn&lt;/code&gt; function, I explored whether to pass extra
data into that function to be used for aborted Link Reference Definitions.
Since this was the only case where it happened, I opted instead to keep
the modifications local, adding in two asserts and replacing that
blank line with the current line in the &lt;code&gt;__check_for_list_closures&lt;/code&gt; function
itself.  I am not sure if I am 100% okay with this solution, because it
feels like more of a hack that a proper fix.  But given the amount of
extra work that would need to be done to support a new parameter in the
&lt;code&gt;close_open_blocks_fn&lt;/code&gt; function, it was a lower cost option that was
clean to implement.&lt;/p&gt;
&lt;p&gt;Thinking I was done, I reran the tests, expecting them to pass.  They
did not pass.  Going once again into the debugger, I found that I was
not properly managing the cases where the stack depth decreased.
Specifically, there were cases where the start of the Link Reference
Definition removed an existing element when it was parsed.  As that
line was now being unwound, those &lt;code&gt;token_stack&lt;/code&gt; elements needed to
be put back to how they were before.&lt;/p&gt;
&lt;p&gt;Once again trying to think out of the box, I worked on clever tricks
to make things work before deciding on using something simple: a
stack copy.  I had avoided using these in the past as I was afraid
that they would not capture the state properly.  But in this case,
there was no alternative.  Going back to the
&lt;code&gt;process_link_reference_definition&lt;/code&gt; function, I transformed this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;original_stack_depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;original_stack_depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;into:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;original_stack_depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;original_stack_depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lrd_stack_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy_of_token_stack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that last change added, the final two scenario tests were now passing.
Executing every scenario test for the project, I found and handful of other
scenario tests that were also “wrong” and fixed them.  It was a good find,
and I was happy to increase my confidence in how aborted Link Reference
Definitions were handled.&lt;/p&gt;
&lt;p&gt;But next… the three disabled List element scenario tests.  But they
could wait until Sunday morning.&lt;/p&gt;
&lt;h2 id="issue-51-lists-and-indents"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/51"&gt;Issue 51&lt;/a&gt; - Lists and Indents&lt;a class="headerlink" href="#issue-51-lists-and-indents" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After spending my free time on Saturday working on Issue 49, I could
only hope that Issue 51 would be a lot easier.  But knowing that those
scenario tests were dealing with List elements did not give me
confidence.  It is not that I cannot find issues with Lists, it is quite the
opposite.  Whether it is true or not, I think I have worked hard to deal with
most of the List element related failures.  That means that whatever failures
are left and more difficult.  Not fun… but still worth doing.&lt;/p&gt;
&lt;p&gt;Taking a quick look at the three scenario tests, the Markdown documents quickly
divided the tests into two groups.  The first group dealt with strange indents
and Block Quote elements while the second group dealt with interesting indentation
and its effect on the output.   After flipping a card that I keep on my desk for
just these decisions, I decided to work on the second group first.&lt;/p&gt;
&lt;p&gt;Looking at the failures, it was obvious that there were two separate
problems.  The first problem was that valid list starts that started with more
than three space characters were being ignored.  In particular, the entries
for nested lists that were indented more than three spaces from the start were
not parsing properly. To solve this issue, I created a new
&lt;code&gt;__adjust_whitespace_for_nested_lists&lt;/code&gt; function that examined a current list
token and its parent token, finding the correct range for a “base”
ident to use.  Once that range was determined, if the amount of whitespace
was within that range, the &lt;code&gt;adj_ws&lt;/code&gt; variable was trimmed to remove excess
space characters.&lt;/p&gt;
&lt;p&gt;Continuing with that theme, the next issue was within the &lt;code&gt;__process_eligible_list_start&lt;/code&gt;
function.  Like the work performed in the &lt;code&gt;__adjust_whitespace_for_nested_lists&lt;/code&gt;
function, the &lt;code&gt;__process_eligible_list_start&lt;/code&gt; needed to be adjusted to
only remove stack items that were necessary to remove.  Like the case for
the previous solution, this solution was geared towards properly taking
care of lists and their indentation.  In this case, it needed to
deal with list indents that were decreasing for a given list level but
were still considered valid.&lt;/p&gt;
&lt;p&gt;A good example of this is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
   &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In each list item for the nested list, the lists are indented properly, just
aligned on the right side.  In that document, it means the starting point for
the text remains constant, but the starting point for the list text decreases
by one for each line.&lt;/p&gt;
&lt;p&gt;To solve this, I needed to add another range check.  While increasing indents
for lists had already been dealt with, I needed to support decreasing indents.
As such, the left bound for that range was the start of text for the parent
list.  The right bound was that point plus three characters, as dictated by
the specification.  It took a bit to code, but it was quickly added to the
function.&lt;/p&gt;
&lt;p&gt;Hoping I had done enough to solve the issue, I executed the scenario tests and
verified the results.  After correcting the tokens and verifying the output,
I was happy to have both List element tests now passing.  It was a good feeling.&lt;/p&gt;
&lt;h3 id="what-about-the-first-group"&gt;What About the First Group?&lt;a class="headerlink" href="#what-about-the-first-group" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After all that work, it was already later in the afternoon that I had hoped
for.  As such, I created a new issue for the remaining test and started to
compose the article as I went through the process of committing the changes
so far.  The work was a big enough chunk as it was that I did not feel bad
in separating the work.  It just made sense.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ugh.  It was a long week and a boring week.  But I know that work is going
to pay off in lower maintenance costs going forward, so I am still on-board
for getting it done.  It just needs to get done, and I must muster the
patience to get it accomplished in short order.&lt;/p&gt;
&lt;p&gt;As for the other work that I accomplished this week, I am happy to get those
items off the Issues List.  The painful thing that I realized after solving
those issues is that I could have solved them earlier.  Granted it took the
better part of two days to eliminate ten of eleven skipped tests, but that is
a small amount of effort to expend.  I feel that I could have
expended that effort earlier and expended less effort to solve them.&lt;/p&gt;
&lt;p&gt;But things worked out the way they did, and the project is better for it.
At this point, I am just focusing ahead at getting the reported issues
dealt with and making the project as robust as possible.  I do feel it is
in a good place, I just want it to be in a slightly better place!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I still need to finish the verification of the comment strings.  I do not
want to let that drag on.  But as to which issues I will choose other than
that one, I am not sure.  Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:rediscover"&gt;
&lt;p&gt;I had been exposed to them before but had forgotten all about them in the time since then. &lt;a class="footnote-backref" href="#fnref:rediscover" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:break"&gt;
&lt;p&gt;I am not sure if it works for any readers out there, but I often find that taking a break and doing something that is not related to what you are having a problem with is great for breaking through problems. &lt;a class="footnote-backref" href="#fnref:break" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - More Beta Bugs</title><link href="https://jackdewinter.github.io/2021/10/04/markdown-linter-more-beta-bugs/" rel="alternate"></link><published>2021-10-04T00:00:00-07:00</published><updated>2021-10-04T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-10-04:/2021/10/04/markdown-linter-more-beta-bugs/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-a.md"&gt;last article&lt;/a&gt;, I talked
about getting to work on reducing the count of bugs in the Issues List. In
this article, I talk about the headway I am making towards getting those
issues dealt with.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Issues, issues, issues.  Bugs, bugs, bugs.   Problems, problems, problems.
No matter …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="{filename}/articles/SoftwareQuality/beta-bugs-a.md"&gt;last article&lt;/a&gt;, I talked
about getting to work on reducing the count of bugs in the Issues List. In
this article, I talk about the headway I am making towards getting those
issues dealt with.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Issues, issues, issues.  Bugs, bugs, bugs.   Problems, problems, problems.
No matter which way I talk about it, it means the same thing to me.  With the beta
release out the door, it is time for me to try and battle the issues on the Issues
List.  I know I need to either resolve them as already fixed or to fix them there
and then.  I just need to keep on making good progress on fixing things.&lt;/p&gt;
&lt;p&gt;That and I hope that I do not find any “must rearchitect” issues.  That would
be… well… expensive and time consuming.  Fingers crossed!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5f14d073b6a526fde77cbb88292e6639185340b5"&gt;26 Sep 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/86f974d15dc6eff1602a3fd88f8eeac41de15f9a"&gt;03 Oct 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="issue-34-getting-things-to-line-up"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/34"&gt;Issue 34&lt;/a&gt; - Getting Things To Line Up&lt;a class="headerlink" href="#issue-34-getting-things-to-line-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue was recorded simply as a Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;so&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="k"&gt;simple&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;"a&lt;/span&gt;
&lt;span class="ss"&gt;&amp;gt;  title"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The note itself was not that helpful, but once I parsed the document into
its tokens and looked at them, I noticed the problem right away:  the tokens
were not there.  Looking more closely at the output, an exception occurred
that stopped the document from being parsed.&lt;/p&gt;
&lt;p&gt;Enabling the &lt;code&gt;--stack-trace&lt;/code&gt; command line option, I quickly found that
within a loop in the &lt;code&gt;correct_for_leaf_block_start_in_list&lt;/code&gt; function, an assert
statement was present to ensure that the loop only worked on lists.  It
was that assert statement that was failing, causing the parsing to be stopped.
I started to address the issue by adding code to only continue the loop
if the last item on the &lt;code&gt;token_stack&lt;/code&gt; list was a list.  Also adding
code to conditional cleanup after the loop based on the same condition,
I was ready to see how this document would parse.&lt;/p&gt;
&lt;p&gt;Feeling a bit anxious, I reran the test, hoping that everything would
work.  It initially looked like everything was going to work properly.
But when I looked at the tokens, something was wrong.  It looked like
most of the tokens were correct, but there were tokens that were slightly
off.  For the most part, the data was correct, but the position of the
tokens was a bit off.&lt;/p&gt;
&lt;p&gt;This was going to be a more complicated issue to work through.&lt;/p&gt;
&lt;h3 id="digging-into-the-debug"&gt;Digging Into The Debug&lt;a class="headerlink" href="#digging-into-the-debug" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It took a fair amount of experimentation to figure out what the real issue
was.  Adding debug here and there and observing the behavior slowly
led me to the observation that the positions were not off by line numbers,
but by small column numbers.  Doing some further digging into the problem,
I noticed that each column number offset remained constant within
an example.  With a stroke of luck, I noticed that it only happened with
examples that had other elements within a Block Quote element.&lt;/p&gt;
&lt;p&gt;It was then I figured out it was a problem with Block Quote elements
and their &lt;code&gt;leading_text_index&lt;/code&gt; variable.  Suddenly, the full scope of the
problem fell into place, and additional debug confirmed that hypothesis.
When each example was being parsed, the leading text for the Block
Quote was being carefully removed and placed in the Block Quote token,
but the &lt;code&gt;leading_text_index&lt;/code&gt; variable
was not updated.  As such, each of the calculated positions within the
Block Quote element were calculated solely using the length of the
leading text from the first Block Quote line.&lt;/p&gt;
&lt;p&gt;Wow… it did take a while to get to that hypothesis, and it took a
bit more time to confirm it.  But when I had it confirmed, it made a lot
of sense.  To address it, I started adding the required plumbing to
update the &lt;code&gt;leading_text_index&lt;/code&gt; variable properly, and the rest just
fell into place.  It didn’t take me long to get that up and working,
but I wanted to be extra sure that I solved the problem properly.&lt;/p&gt;
&lt;p&gt;As the positions for most of the inline tokens are calculated, I double
checked those tokens more thoroughly than the other tokens.  I even
checked variations on the Markdown document to make sure they were also
working.  In the end, after much thinking to get there, the issue was solved.&lt;/p&gt;
&lt;p&gt;After that long effort, I wanted to pick something more relaxing to
work on and get my energy back.&lt;/p&gt;
&lt;h2 id="issue-36-verifying-disabled-rules"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/36"&gt;Issue 36&lt;/a&gt; - Verifying Disabled Rules&lt;a class="headerlink" href="#issue-36-verifying-disabled-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was a monotonous task, but one that I knew that I needed to do at some point:
verify that any rule test that disabled another rule did so for the right reasons.  As
the number of rules grew dramatically in the last three months, I had suspicions that some
of the reasons that rules were disabled were no longer applicable.  And while I can check
for any enabled rule and its applicability by executing the full set of tests for the
project, verifying disabled rules was a very manual process.&lt;/p&gt;
&lt;p&gt;This task took the better part of ten hours to complete over four days.  It wasn’t
that exciting, so I decided to break the one big task into smaller tasks to help keep me motivated
throughout the entire process.  That turned out to be a great decision. I found
that the more I worked on the process, the more errors I made in verifying the disabled
rules.  Nothing too serious, but for each error I made, I restarted the testing at the
last-known good point, hindering my forward process.  As far as I can tell, it was just
the monotonous nature of the task that made my mind wander just enough to lose track of
things.&lt;/p&gt;
&lt;p&gt;But after almost ten hours, I was done.  When all was said and done, just over one
hundred rules had extra &lt;code&gt;--disable-rules&lt;/code&gt; options that they did not need.  And while
it was a very boring task, I found it to be a very worthwhile task.  I now had my
confidence back that the rules tests were testing what they were supposed to test,
and only disabling rules when they had to.  That meant I could introduce changes
to the core and the rules with “that much” more confidence that the tests would
catch any changes gone bad.&lt;/p&gt;
&lt;h2 id="issue-37-verifying-lists-and-blank-lines"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/37"&gt;Issue 37&lt;/a&gt; - Verifying Lists and Blank Lines&lt;a class="headerlink" href="#issue-37-verifying-lists-and-blank-lines" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I do try and put forth my best effort every time, sometimes I fall short
of that goal.  When I picked this Markdown out of the Issues List:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;some&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I looked for it in the scenario tests and found it.  But for some reason, I
focused on the scenario test right above the actual test that held this document.
I feel kind of stupid, but for the first three or four times that I looked
at what I thought was the test housing this example, I was looking at the
previous test.  After that, I think it was just stuck in my head until
I came back to it after leaving it alone for a while.  I was very embarrassed
when I finally figured that out.&lt;/p&gt;
&lt;p&gt;Once I got that straightened out, everything made sense.  Because I had
made this mistake this time, I probably had made a similar mistake when
adding this document to the Issues List.  But while I was verifying that
example, I used the time to check the other examples for the rule.  While
all the existing tests were fine, I added this document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;some&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to fill in a hole that I saw in the testing.&lt;/p&gt;
&lt;p&gt;While the actual example was not a problem, I did find a minor problem
that I was able to overcome and add to the tests for the rule.  Sometimes,
the steps are small.  I am okay with that!&lt;/p&gt;
&lt;h2 id="issue-38-false-positive"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/38"&gt;Issue 38&lt;/a&gt; - False Positive&lt;a class="headerlink" href="#issue-38-false-positive" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes I get lucky and see issues that look like problems, only to have them
turn out not be problems at all.  While that does not happen as often as I would
like, this was one of those cases.  The Markdown is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;paragraph&lt;/span&gt; &lt;span class="n"&gt;inspired&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;paragraph&lt;/span&gt;
&lt;span class="ss"&gt;"paragraph"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While there wasn’t that much information in the list except for the Markdown example,
I can only assume that the extra newline in the Link’s label was the cause of my concern.
Looking at other examples for rule Md044, I was able to find examples that somewhat
looked like that example, but not one that had a split Link label.&lt;/p&gt;
&lt;p&gt;But in the end, just like the previous issue, the example in the Issues List passed
without any problem.  I added a new scenario test to fill a small hole that I found,
but that was it.  However, I still feel that this was time well spent.  Sure, for the
second time in a row the actual issue was a false positive, but I was also able to
find something that I missed.  And if nothing else, I verified that things were working
properly.&lt;/p&gt;
&lt;h2 id="issue-39-fun-with-nested-containers"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/39"&gt;Issue 39&lt;/a&gt; - Fun with Nested Containers&lt;a class="headerlink" href="#issue-39-fun-with-nested-containers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During the testing of Rule Md007, I came across a document that was parsing incorrectly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Playing around with it at the time, I noted that the first two levels were being parsed
properly, but the text from the third level was being included into the second level.
Taking the time to look at it some more, I determined that the same example without
any Block Quote element worked fine.  Therefore, it was something about the Block Quote
that was causing this to happen.  And that meant looking at the
&lt;code&gt;__get_nested_container_starts&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;It was obvious that I needed to massage the whitespace to consider the
Block Quote, but I was not sure how.  After four or five hours of tinkering,
I had this code ready:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex_ws_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;whitespace_scan_start_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token_stack_index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token_stack_index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# if text_removed_by_container:&lt;/span&gt;
                &lt;span class="c1"&gt;#     if text_removed_by_container.startswith("&amp;gt; "):&lt;/span&gt;
                &lt;span class="c1"&gt;#         text_removed_by_container = text_removed_by_container[2:]&lt;/span&gt;
                &lt;span class="c1"&gt;#     elif text_removed_by_container.startswith("&amp;gt;"):&lt;/span&gt;
                &lt;span class="c1"&gt;#         text_removed_by_container = text_removed_by_container[1:]&lt;/span&gt;
                &lt;span class="c1"&gt;#     else:&lt;/span&gt;
                &lt;span class="c1"&gt;#         POGGER.info("check next container_start&amp;gt; out of block quote data")&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token_stack_index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token_stack_index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws_before_marker&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex_ws_test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;whitespace_scan_start_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token_stack_index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws_before_marker&lt;/span&gt;

        &lt;span class="n"&gt;after_ws_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;whitespace_scan_start_index&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;ex_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ex_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
            &lt;span class="n"&gt;after_ws_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;whitespace_scan_start_index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is a lot of whitespace to deal with, the function needs to
make an educated guess as to how much of that is actual whitespace and how much
of that belongs to the List element.  For example, given this Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it is visibly obvious that there are three levels to the list, with all three
levels within a Block Quote element.  But creating an algorithm to figure
that out is not as easy.  That algorithm must consider whether the text on
the third line is a new level or is a continuation of level two.  And since
the container processing comes before the leaf processing, that determination
needs to be made early on.&lt;/p&gt;
&lt;p&gt;The algorithm works with this and tries to remove only as much whitespace
as is necessary to get a solid determination of whether the line is eligible
for a new List element start or if it is just text.  While the second part
of the algorithm, not shown in the above example, tackles the “eligible List
element start” part of that process, the above code tries to get the whitespace
ready for that process.  If there is whitespace that has a length that
is less than the current List element indentation, that whitespace can be
removed for the purposes of the second algorithm.  In fact, it is imperative
that the whitespace is removed.&lt;/p&gt;
&lt;p&gt;It took a while to get there, but with a couple of slight changes, it was
working. And for what it is worth, I know that this is probably just the start of issues with
nested container tokens.  Right now, it is just a feeling, but that feeling tells me
that I am going to need to add extra testing for various nested container elements.
And as far as this project goes, those feelings are usually correct.&lt;/p&gt;
&lt;h2 id="issue-40-images-as-headings"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/40"&gt;Issue 40&lt;/a&gt; - Images as Headings&lt;a class="headerlink" href="#issue-40-images-as-headings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most of the time, I look at a collection of rules and they just look like they are meant to be
together.  But sometime, I see a set of rules that look like two completely different
organizations crafted them.  That was the case with Rule Md041 and Rule Md033.  Rule Md041
allows a top-level heading to be defined as a &lt;code&gt;H1&lt;/code&gt; HTML tag, but Rule Md033 triggers on any
HTML tags that are present in the document.  To me, that looked like a bit of a mismatch,
and a mismatch that was easily fixable.&lt;/p&gt;
&lt;p&gt;To cleanly fix this issue, I added a configuration value &lt;code&gt;allow_first_image_element&lt;/code&gt; that
defaults to &lt;code&gt;True&lt;/code&gt;.  First, I added code to set the &lt;code&gt;__is_first_element&lt;/code&gt; variable
if the current token is the very first token, and the &lt;code&gt;__is_first_html_block&lt;/code&gt;
variable to allow the &lt;code&gt;__look_for_html_start&lt;/code&gt; function to know that the HTML block was
part of that first token.  With that preamble set up, the following code was added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;is_first_image_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_first_html_block&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__allow_first_image_element&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;tag_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"h1"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;is_first_image_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/h1&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_first_image_element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;full_tag_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/h1&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="n"&gt;end_of_start_heading_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;end_of_start_heading_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;full_tag_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_of_start_heading_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="n"&gt;end_of_image_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;is_first_image_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;img"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;end_of_image_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_tag_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code is not pretty, but it is packed with functionality.
This code ensures that the &lt;code&gt;allow_first_image_element&lt;/code&gt; configuration value is
enabled and that the HTML tag text starts with &lt;code&gt;&amp;lt;h1&lt;/code&gt;.  From there, it makes sure
that the text ends with &lt;code&gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;, that only the &lt;code&gt;img&lt;/code&gt; tag follows the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag,
and that the &lt;code&gt;img&lt;/code&gt; tag is the only tag present between the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag and the &lt;code&gt;&amp;lt;/h1&amp;gt;&lt;/code&gt; tag.
Only if all those things line up, does the &lt;code&gt;is_first_image_element&lt;/code&gt; variable get set to
&lt;code&gt;True&lt;/code&gt;, allowing the rule to not trigger on image headings.&lt;/p&gt;
&lt;p&gt;It just felt good to get this taken care of.  If I can find someone to make a good
heading image for the PyMarkdown project, I might use this!&lt;/p&gt;
&lt;h2 id="issues-41-cleaning-up-documentation"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/41"&gt;Issues 41&lt;/a&gt; - Cleaning Up Documentation&lt;a class="headerlink" href="#issues-41-cleaning-up-documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another issue that was added to the Issues List was the documentation for Rule Md041.
While verifying that everything looked good for all rule documentation, there was a cryptic
set of text at the bottom of the documentation for that rule:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;“Diff html comments?”  What did that mean?  I wasn’t sure.  It took me a big of
poking around before I was able to figure out what it meant.  After looking at the
test documents for this rule in my Markdown editor, I noticed that there was only
one difference between the project rule and the original rule: it handled the HTML
comment tags differently.  Specifically, the original rule doesn’t deal with the
comment tags or other special tags at all, rendering them more or less invisible.&lt;/p&gt;
&lt;p&gt;Thinking through this difference, I came to a defensible decision that I had written
the PyMarkdown rule correctly.  Depending on the definitive source used, tags such
as the comment tags can be viewed as either proper HTML tags or helper HTML tags.
Since those tags do not directly affect how the web page is displayed, it can be
argued that they are not proper tags.  But it can also be argued that those tags
are as important to a document as punctuation or foot notes.&lt;/p&gt;
&lt;p&gt;Taking a holistic
view, I decided that view every part of a HTML document as integral part of that
document.  Therefore, HTML comment tags and the other special tags are integral
to the document.  It therefore follows, if they show up in the Markdown before
being translated into HTML, they will be present in the rendered HTML document.
Therefore, the rule should trigger on those special tags just like it triggers
on any other tag.  Done!&lt;/p&gt;
&lt;p&gt;Hopefully, resolving this issue will teach me to leave better notes for myself.
Probably not right away, but I hope it does!&lt;/p&gt;
&lt;h2 id="issue-42-sorted-output"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/42"&gt;Issue 42&lt;/a&gt; - Sorted Output&lt;a class="headerlink" href="#issue-42-sorted-output" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue was recently put on the Issues List after more rules were added to the project.
While it does not have a lot of impact on the tests within the project, I have seen unordered
output in normal uses.  It is not usually a big problem to mentally go through the list
of reported issues and figure out where they are in the document.   However, I thoroughly
admitted that it would be useful to have them be in sorted order to allow for a good top-to-bottom
or bottom-to-top scan of the output.&lt;/p&gt;
&lt;p&gt;To supply the output in a sorted order, a couple of small changes needed to be made,
mostly in the &lt;code&gt;plugin_manager.py&lt;/code&gt; module.  Previously, an instance of the &lt;code&gt;ScanContext&lt;/code&gt;
class was created at the start of each document and functioned as a conduit to ensure that
any triggered rules were reported properly.  To address this issue, that design was changed slightly to
introduce the &lt;code&gt;add_triggered_rule&lt;/code&gt; function and the &lt;code&gt;report_on_triggered_rules&lt;/code&gt; function.
Instead of the &lt;code&gt;report_next_line_error&lt;/code&gt; function and the &lt;code&gt;report_next_token_error&lt;/code&gt; function
directly calling the &lt;code&gt;log_scan_failure&lt;/code&gt; function themselves, the new &lt;code&gt;add_triggered_rule&lt;/code&gt; function
is called, adding the reported error to the context’s list of errors.  Once the entire
document has been scanned, the &lt;code&gt;report_on_triggered_rules&lt;/code&gt; function is then called.  This
function simply sorts the list of reported errors before calling the &lt;code&gt;log_scan_failure&lt;/code&gt; function
to report each error.&lt;/p&gt;
&lt;p&gt;While resolving this issue does not provide a lot of difference to documents with a small
number of reported failures, I find that it makes a substantial difference to larger
sets of reported failures.  In my case, when going through lists of errors, I tend to
work from the bottom of the list to the top so that the line numbers are not disturbed.
I can see this working better for me and how I attack those lists.  I hope it helps
others too!&lt;/p&gt;
&lt;h2 id="issue-31-adding-module-support"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/31"&gt;Issue 31&lt;/a&gt; - Adding Module Support&lt;a class="headerlink" href="#issue-31-adding-module-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue didn’t really involve a big change, but it was a request from one of the users, so it
made the top of the list.  In Python, one of the interesting ways of executing Python
code is through exposing the package as an
&lt;a href="https://docs.python.org/3/tutorial/modules.html"&gt;executable module&lt;/a&gt;.
As I was not sure which people would want to execute the project it that manner, I left it off the
list of features to add.  But with a request from a user, it was back on the list.&lt;/p&gt;
&lt;p&gt;It took a bit of research to get it right, but in the end, the only change that was
needed was the addition of the &lt;code&gt;__main__.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pymarkdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If that code seems overly simplistic, it is because it is.  According to various
pages on the &lt;a href="https://docs.python.org/3/library/__main__.html"&gt;Python site&lt;/a&gt;,
the &lt;code&gt;__main__.py&lt;/code&gt; file had special properties that are invoked when it is
invoked on behalf of a package using the &lt;code&gt;-m&lt;/code&gt; module flag.  When it is run as
a module, the above &lt;code&gt;if&lt;/code&gt; statement evaluates to &lt;code&gt;True&lt;/code&gt; and the &lt;code&gt;main&lt;/code&gt; function
from the &lt;code&gt;main.py&lt;/code&gt; module is invoked.&lt;/p&gt;
&lt;p&gt;Not much to add, but a good addition to tidy things up for the week!&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I know there are probably a couple of difficult issues hiding
in plain sight amongst the Issues List, I haven’t hit any of them yet.
I am keeping up a good pace and finding and fixing issues, and I happy
with the progress.  Do I wish it went faster? Sure… but I also know
it will take as long as it takes.  Now that I have the beta release
out there, it takes the pressure off a bit.&lt;/p&gt;
&lt;p&gt;But I also know that I have a good collection of fixed issues, so
I am planning a build version update tomorrow to get these fixed
issues into the hands of users.  That does feel great, knowing that
I am at a place where I can do that!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What else? More issues. Hopefully, some exciting ones this next week.
Well… maybe hopefully? Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Clearing Away Some Bugs</title><link href="https://jackdewinter.github.io/2021/09/27/markdown-linter-clearing-away-some-bugs/" rel="alternate"></link><published>2021-09-27T00:00:00-07:00</published><updated>2021-09-27T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-09-27:/2021/09/27/markdown-linter-clearing-away-some-bugs/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/09/20/markdown-linter-race-to-the-finish/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting the final three rules completed. In this article, I
talk about getting to work on reducing the count of bugs in the Issues List.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With all the work on creating the missing rules wrapped up …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/09/20/markdown-linter-race-to-the-finish/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting the final three rules completed. In this article, I
talk about getting to work on reducing the count of bugs in the Issues List.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With all the work on creating the missing rules wrapped up, I was eager to double check things for
the beta release, and get it packaged and uploaded to &lt;a href="https://pypi.org/"&gt;PyPi.org&lt;/a&gt;.
But after that was done, I knew that I still had to work to do, simply different work.
Instead of writing new rules, I needed to go back over previous issues I have found and
start dealing with the “I’ll deal with it later” issues.&lt;/p&gt;
&lt;p&gt;Yes, it was now “later”.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/47ab4e6e6c57c4187398870ffb9632375975fd64"&gt;21 Sep 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/a5669f0f5b956b38447924eff78427f0c52aef1a"&gt;25 Sep 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-beta-release-happens"&gt;The Beta Release Happens&lt;a class="headerlink" href="#the-beta-release-happens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From a commit point of view, the beta release was not anything more than changing a couple
of files and running a script that I normal do not run.  But mentally, it was an important thing for me.
After working for two years to get something working on my terms, I was able to finish
a beta release that I am confident about.  Running that script knowing that it would
publish a solid, well-tested version of my project to the Python &lt;a href="https://pypi.org/"&gt;PyPi&lt;/a&gt;
repository just seemed right.  It was not too soon, it was not with reservations, it was
just the right time for the release to happen.&lt;/p&gt;
&lt;p&gt;Do I expect issues to get logged in GitHub?  Yes, I would be surprised if issues were not
logged.  First off, I know I have confidence that I covered most of the more common scenarios, but
I also have confidence that I did not cover all the scenarios. Secondly, as weird as it
may sound, if people are filing issues, it means they are using the project and putting
it through their own scenarios.  And hopefully, for every issue that gets logged
with GitHub, there is a given multiplication factor of users that do not have any issues
with the project, and are therefore happy with the project.&lt;/p&gt;
&lt;p&gt;What is that multiplication factor?  I do not currently know.  But even if that multiplication factor
is in the single digits, it means that people are using the project.  That is good for
my confidence.  That is all that I need, nothing more.&lt;/p&gt;
&lt;p&gt;And as usual, before digging into fixing issues, there was a bit of cleaning up
that I wanted to get done.&lt;/p&gt;
&lt;h2 id="doing-some-house-cleaning"&gt;Doing Some House Cleaning&lt;a class="headerlink" href="#doing-some-house-cleaning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having a &lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/clean.cmd"&gt;clean script&lt;/a&gt;
and a
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/.github/workflows/main.yml"&gt;Continuous Integration script&lt;/a&gt;
has been a big asset for the &lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project.
I am usually fussy about running the clean script before every commit, but the
Continuous Integration script makes sure that I stick to that process.  Normally, I develop on a
Windows machine because I have more tools that work seamlessly with how I work.    But
that still leaves testing on other operating systems, which has previously been painful.
The Continuous Integration script addresses that by running the full set of
tests against a Windows operating system, a Mac operating system, and a Linux operating system.
Having this process done automatically with each commit has helped me concentrate on
the project itself, not the operating systems.&lt;/p&gt;
&lt;p&gt;But one little thing has been bugging me during the rule development phase: changing command
lines.  There are a small handful of rules that I want to disable on my own Markdown
scans. In most cases, this is temporary while I get everything else worked out and
think about possible rule changes.  In some cases, it is just to give me time to
fix the issues instead of disabling it.
These disabled rules are
no-space-in-code,
no-space-in-emphasis,
line-length, and
no-duplicate-heading.
That is not what I was concerned about.  It was that when developing the rules,
I needed to change the disabled rules in both scripts.  That just was not cool.&lt;/p&gt;
&lt;p&gt;Before I started tackling reported issues as they trickle in, I decided that I wanted
to fix that right away.  It was not a tremendous change to make, but I believe it was a
good choice to work on as it would be one less thing to worry about.  Additionally,
it showed off a real-world use of the configuration file, which was a benefit.&lt;/p&gt;
&lt;p&gt;To perform this switch to use a configuration file, I
created a new file, &lt;code&gt;clean.json&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"no-space-in-code"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"no-space-in-emphasis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"line-length"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"no-duplicate-heading"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Saving it in the root directory of the repository, I then went and replaced this
part of the command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--disable-rules no-space-in-code,no-space-in-emphasis,line-length,no-duplicate-heading
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in both scripts to read:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--config ./clean.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I executed the clean script locally and verified that everything looked correct.
Hoping that I
did not miss anything, I created a new commit for this change, pushed it to main
repository, and watched as the tests started to run.  It took about four minutes,
but when I saw that green circle besides the tasks saying that everything executed
correctly, I let go a little “Yes!” to myself.&lt;/p&gt;
&lt;p&gt;Not a big issue, and an issue that no one except me would probably worry about.
But it was an issue that I was happy to get taken care of.&lt;/p&gt;
&lt;h2 id="issue-23-issue-with-rule-md023"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/23"&gt;Issue 23&lt;/a&gt; - Issue with Rule Md023&lt;a class="headerlink" href="#issue-23-issue-with-rule-md023" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know it might seem weird to some people, but I love debugging.  It gives me a chance to really
dig into something and either learn about it or increase my knowledge about how it works.
Sometimes I learn that I did not think of a given use case, and sometimes I learn that
I forgot something completely.  That last one was the case with this issue: I forgot
to implement pivotal code in Rule Md023.&lt;/p&gt;
&lt;h3 id="token-history"&gt;Token History&lt;a class="headerlink" href="#token-history" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To understand the issue, I need to go into a bit of parser history to explain that the
&lt;code&gt;end_whitespace&lt;/code&gt; within a Text token that existing within a SetExt Heading element was a bit
tricky to store.  Because whitespace must be removed from both the start of each line
and the end of each line in a SetExt Heading element, it left me with a fun decision to make: where to put the
removed whitespace?  Because one of the project’s cardinal parser rules is that any parsing must
produce a set of tokens that can then reconstitute the Markdown document exactly as it was.
As such, the whitespace had to go somewhere.  If it was a normal paragraph, only the
leading whitespace from each line would be removed and stored within the Paragraph
element that owns that Text token.&lt;/p&gt;
&lt;p&gt;After considering assorted options, none of them were attractive.  But the least
unattractive was to override the &lt;code&gt;end_whitespace&lt;/code&gt; field to hold both the leading space
characters and trailing space characters that were removed.  Normally, I would do this by having two different
fields, one for the leading spaces and one for the trailing spaces.  But not wanting to
add an extra field to the Text token just for use within a SetExt Heading element, I
improvised.  The &lt;code&gt;end_whitespace&lt;/code&gt; would normally hold any trailing spaces, separated
by the newline character.  So, to “duplex” each line, if there were any leading spaces to
store in the same line, it would be followed with the &lt;em&gt;whitespace split character&lt;/em&gt;,
&lt;code&gt;\x02&lt;/code&gt;.  In that way, I was able to store both leading spaces and trailing spaces
within the same field.&lt;/p&gt;
&lt;h3 id="back-to-the-issue"&gt;Back To the Issue&lt;a class="headerlink" href="#back-to-the-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Going back to the issue at hand, that special character presented an issue that I
had not thought about when I was writing this rule.  Reminding myself of this,
I looked at the existing code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__setext_start_token&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__any_leading_whitespace_detected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_whitespace&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__any_leading_whitespace_detected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without support for the whitespace split character, that code was detecting
any whitespace that occurred at the start or the end of the line.  Since whitespace
at the start of the line would be encoded as &lt;code&gt;{space}\x02&lt;/code&gt; and whitespace at the
end of the line as &lt;code&gt;{space}&lt;/code&gt;, the above code would evaluate both as extra leading
whitespace.&lt;/p&gt;
&lt;p&gt;The only way to fix this was to scan through the &lt;code&gt;end_whitespace&lt;/code&gt; field, one
line of information at a time, looking for any cases where the sequence
&lt;code&gt;{space}\x02&lt;/code&gt; was found.  To do that, I replaced the earlier code with the
following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__setext_start_token&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__any_leading_whitespace_detected&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_whitespace&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;split_end_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_split&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;split_end_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__seen_first_line_of_setext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;split_next_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_split&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;whitespace_split_character&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_next_split&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;split_next_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__any_leading_whitespace_detected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__seen_first_line_of_setext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code works by going through each line represented in the &lt;code&gt;end_whitespace&lt;/code&gt; field,
one line at a time.  For each line, it splits the line’s information on the whitespace
split character.  If the whitespace split character is present, then the split will
result in the variable &lt;code&gt;split_next_split&lt;/code&gt; having an array of two strings, with the
first element holding any characters in the line that occurred before the whitespace
split character.  Therefore, if at least one line has a &lt;code&gt;split_next_split&lt;/code&gt; variable
of length &lt;code&gt;2&lt;/code&gt; with a non-zero length, then that line has leading whitespace.&lt;/p&gt;
&lt;p&gt;Thinking this was clever, I ran it through the first time, and was disappointed that
it failed.  After a couple of minutes of debugging, I remembered that the leading spaces
for SetExt Heading tokens are stored with that start token, not within the Text token
contained within.  Adding a bit of extra code to take care of that first case,
I executed the code again and everything worked fine!&lt;/p&gt;
&lt;p&gt;Just to be sure, I created five new scenario tests for Rule Md023, each with a different
amount of trailing space at a different location.  Maybe it is a bit paranoid, but after
finding one example that failed, I wanted some extra insurance that I had fixed the
problem and fixed it properly.&lt;/p&gt;
&lt;p&gt;It was an interesting feeling getting back to debugging non-rule code.  It partly
felt like it was something that I was used to, and partly that it was something
new and different.  It was an odd pair of feelings, but both were good feelings,
so I was okay with both.&lt;/p&gt;
&lt;h2 id="issue-22-issue-with-rule-md033"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/22"&gt;Issue 22&lt;/a&gt; - Issue with Rule Md033&lt;a class="headerlink" href="#issue-22-issue-with-rule-md033" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This issue was not really a big one, but it was reported as not making sense to users, so
I wanted to tackle it quickly. Rule Md033 deals with Raw HTML being exposed, either as
a HTML Block element or a Raw HTML Inline element.  I figured that I had missed something
simple and wanted to make sure it was set right.&lt;/p&gt;
&lt;p&gt;It turned out that I had missed two small issues, both nuisances.  The first one
was that I included a close HTML tag, any normal HTML tag starting with &lt;code&gt;&amp;lt;/&lt;/code&gt;, in the list
of acceptable trigger items.  While I had thought that the original rule did fire one
this, extra checking revealed that it did not.&lt;/p&gt;
&lt;p&gt;The other issue was a bit more nuanced, but just as small.  In HTML, there are
special sequences that allow for special handling of HTML documents.  Of special note,
these sequences are called out in the GFM documentation of the
&lt;a href="https://github.github.com/gfm/#html-blocks"&gt;HTML Block element&lt;/a&gt; by each one of them
having their own special HTML Block type.  These sequences are comment blocks, processing
instructions, declarations, and CDATA.  I had originally taken one of them,
the &lt;code&gt;![CDATA[&lt;/code&gt; sequence and provided special behavior for that sequence, but that was not
good enough.  Given a simple example from one of the project’s users:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="c1"&gt;--TOC--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apparently, my habit of following a start HTML comment tag with whitespace was just that…
my habit.&lt;/p&gt;
&lt;p&gt;So, to correct that issue, I change the code to allow for both CDATA and comments to be
detected on their own without any whitespace to follow.  Along with a change to the default
value to suppress processing instructions and declarations by default, this issue was
fixed.&lt;/p&gt;
&lt;p&gt;It was not a big fix, but a good one to get out of the way.&lt;/p&gt;
&lt;h2 id="issue-27-issue-with-rule-md032"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/27"&gt;Issue 27&lt;/a&gt; - Issue With Rule Md032&lt;a class="headerlink" href="#issue-27-issue-with-rule-md032" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I must admit.  When I first saw this issue pop up, in my head I looked at it and went:
“No, that looks right!”  But after checking it more closely, the issue began to seep into
my brain.  Starting with something simple, the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;parsed cleanly.  Then the second example, the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;also parsed cleanly.  Fine.  I agreed with both of those.  Md032 deals with blank
lines around List elements, and everything looked good so far.  Then the third sample was
presented, one which was causing the rule to trigger.  A modification of the earlier
example, this one was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and it triggered the rule each time.  From looking at the nested List elements, it was
obvious that it should not fire, so what was wrong?&lt;/p&gt;
&lt;p&gt;Enabling debug for the rule, I was able to quickly narrow down on the issue.
Specifically, the third line sets up the third level of a
List element only to have the top two levels of those lists ended with the first level
List element on the fourth line.  As was shown from my debugging, there were two
end List element tokens in a row in the token stream.  That was something I had missed.&lt;/p&gt;
&lt;p&gt;Looking at two lines from the rule, I was quickly able to nail
down the source of this issue.  In the following &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;only the Blank Line token and a New List Item token prevent the rule from firing
if the previous token was an end List token.  That meant in this case, the first
end List token caused that &lt;code&gt;if&lt;/code&gt; statement to be evaluated to &lt;code&gt;False&lt;/code&gt; when that
second end List token was used in the &lt;code&gt;if&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;It did not take much code or time to fix this properly.  By adding the
end List token to the &lt;code&gt;if&lt;/code&gt; statement, it allowed the List elements to flow
properly when dropping multiple levels.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_end&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="issue-32-issue-with-rule-md037"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/32"&gt;Issue 32&lt;/a&gt; - Issue with Rule Md037&lt;a class="headerlink" href="#issue-32-issue-with-rule-md037" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every so often, you look at something you did and hope no one notices that you did it.
In this case, I had Issue 32 filed against it, so I had no choice.  Someone noticed it.&lt;/p&gt;
&lt;p&gt;The Markdown itself was simple, and the point of focus was a single paragraph:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Read&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt; &lt;span class="n"&gt;readme&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
&lt;span class="k"&gt;And&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;changelog&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was this sample that was triggering Rule Md037, looking for spaces inside of asterisks
that may show that an Inline Emphasis element was not completed properly.  There was
only one problem:  the was half-finished code commented out to deal with the actual search
for whitespaces.&lt;/p&gt;
&lt;p&gt;Whoops!&lt;/p&gt;
&lt;p&gt;Oh well, it happened.  After I got over a momentary feeling of embarrassment, I started to
look at the commented-out code and quickly decided that it would not work properly.
When the triggering section of the &lt;code&gt;next_token&lt;/code&gt; function is entered, it has a list of
every token that occurred between the possible start of emphasis and the possible end
of emphasis.  The main thing I needed the code to do was to verify if the specific
pattern, whitespaces directly inside of the possible start or end, were present.&lt;/p&gt;
&lt;p&gt;Instead of doing something fancy, I opted for something simple.  With both the possible
start and possible end sequences, this rule should only trigger if they were Text tokens.
If it is not a Text token, it cannot start or end with whitespace, so there was one aspect
of the issue dealt with.
The other was a good observation on what this was supposed to look for.  Since I needed
the function to look for directly inside of the emphasis sequences, I needed to have
the function check for the first character of the first token and the last character
of the last token.  If either of those specific characters were a space character,
then it was a space directly inside of the emphasis characters.  And to be extremely
specific, I needed to set it to detect either scenario, not both.&lt;sup id="fnref:yes"&gt;&lt;a class="footnote-ref" href="#fn:yes"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;After going through that research,  I came up with the following code, exactly
what I just described above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__emphasis_token_list&lt;/span&gt;
&lt;span class="n"&gt;first_capture_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__emphasis_token_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;did_first_start_with_space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;first_capture_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;first_capture_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;last_capture_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__emphasis_token_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;did_last_end_with_space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;last_capture_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;last_capture_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;did_first_start_with_space&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;did_last_end_with_space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once again, nothing stellar, but good simple corrections in the code.&lt;/p&gt;
&lt;h2 id="issue-33-issue-with-rule-md031"&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/33"&gt;Issue 33&lt;/a&gt; - Issue With Rule Md031&lt;a class="headerlink" href="#issue-33-issue-with-rule-md031" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my blitz to get all rules completed and a beta release out the door, I had encountered
this Markdown when trying to get Rule Md031 to work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;```&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;```&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;another&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With some more relaxed time on my hands now, I decided to look closely at this rule
and figure out what the problem with the rule was.  What I did not notice at the time is that this
was not a problem with the rule, this was a problem with the parser.  When executed,
the parser was stopping in this code with an exception.  It was something that needed
to be looked in to.&lt;/p&gt;
&lt;p&gt;It took me a bit to figure out what was going wrong.  As I have been concentrating
on getting things done for the beta release, I have not spent considerable time in the parser
code.  If I had to guess, it has been at least six months since I last looked at the
parser code.  Luckily, with the comments and log messages that I placed in the code;
I was able to get up to speed quickly.&lt;/p&gt;
&lt;p&gt;In the Leaf Block Processor module, there is code in the &lt;code&gt;correct_for_leaf_block_start_in_list&lt;/code&gt;
function to properly correct the indent of a line when coming out of List element.
Originally, the &lt;code&gt;token_stack&lt;/code&gt; state variable was used to track the List elements,
with plans to implement an easier mechanism for dealing with Block Quote elements.
However, when I started to implement support for Block Quote elements, I realized
how similar Block Quote elements and List elements really were.  In response to
that, the &lt;code&gt;token_stack&lt;/code&gt; state variable was then repurposed for both elements, with
extra work on my behalf to clean up the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;repeat_loop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;removed_chars_at_start&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;repeat_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tokens_from_close&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;until_this_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;include_lists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
        &lt;span class="n"&gt;html_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens_from_close&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;
&lt;span class="n"&gt;last_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
&lt;span class="n"&gt;delta_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;removed_chars_at_start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;last_indent&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;delta_indent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, it looks like I missed a boundary use case.  In this case, the List element
was getting closed properly within the loop, but it was then followed by an assert
to verify that the remaining element on the stack was a list.  If it was a List token,
then there were extra verifications that I had in place to verify the sanity of the
parsing.&lt;/p&gt;
&lt;p&gt;While slightly more verbose, once I understood the problem, the fix was simple: only
act on List tokens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;repeat_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;is_remaining_list_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;repeat_loop&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;is_remaining_list_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;removed_chars_at_start&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;repeat_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tokens_from_close&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;until_this_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;include_lists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;html_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens_from_close&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;is_remaining_list_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_remaining_list_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;
    &lt;span class="n"&gt;last_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="n"&gt;delta_indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;removed_chars_at_start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;last_indent&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;delta_indent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because this change fixed the parsing of that Markdown document,
I was able to take the &lt;code&gt;skip&lt;/code&gt; tag off the
&lt;code&gt;test_md031_bad_fenced_block_in_list_in_block_quote&lt;/code&gt; function.  In
addition, to make sure that fenced code blocks did not suffer from the
same issue, I added the
&lt;code&gt;test_md032_bad_fenced_block_in_list_in_block_quote&lt;/code&gt; function to perform
the same test for Fenced Code Block elements.  This was a good find,
and I was happy to have it taken care of.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After working hard for two years, it was a relief to run the scripts
to package the project and to upload it to PyPi.org.  As I mentioned
earlier in this article, I just felt like it was the right time to do
it.&lt;/p&gt;
&lt;p&gt;But there are still things to do to make it better, and I wanted to
keep on marching forward.  After measuring my progress for the last
two months in terms of the number of rules I completed per week, I
am not sure how, or if, I am going to measure progress going forward.
I mean, I am going to resolve issues, of that there is no doubt.
However, I cannot divine if the issues I pick are going to be easy
issues or difficult issues.&lt;/p&gt;
&lt;p&gt;I guess the only thing I can do is to keep on going what I have
always done with this project:  keep on making it better!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, I hate to say it (well, no I don’t), but I am going to be fixing
issues for a while.  While some portions of that work will be boring, I will
try and make it more interesting by describing what I am doing and
my reasons for doing it.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:yes"&gt;
&lt;p&gt;Before I read the rule again very closely, I did write a version of the code where it looked for &lt;em&gt;both&lt;/em&gt; instead of &lt;em&gt;either&lt;/em&gt;.  It did not work very well. &lt;a class="footnote-backref" href="#fnref:yes" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry></feed>