<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack's Digital Workbench</title><link href="https://jackdewinter.github.io/" rel="alternate"></link><link href="https://jackdewinter.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jackdewinter.github.io/</id><updated>2021-04-12T00:00:00-07:00</updated><entry><title>Markdown Linter - Road To Initial Release - Creating A Package</title><link href="https://jackdewinter.github.io/2021/04/12/markdown-linter-road-to-initial-release-creating-a-package/" rel="alternate"></link><published>2021-04-12T00:00:00-07:00</published><updated>2021-04-12T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-04-12:/2021/04/12/markdown-linter-road-to-initial-release-creating-a-package/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/05/markdown-linter-road-to-initial-release-cleaning-up/"&gt;last article&lt;/a&gt;, I talked about
resolved the remaining Priority 1 items from the issues list.  In this article, I talk
about how I worked through the issue in creating an installable package for the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having invested a lot of time getting the PyMarkdown project to …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/05/markdown-linter-road-to-initial-release-cleaning-up/"&gt;last article&lt;/a&gt;, I talked about
resolved the remaining Priority 1 items from the issues list.  In this article, I talk
about how I worked through the issue in creating an installable package for the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having invested a lot of time getting the PyMarkdown project to a place where I feel
confident in creating an initial release of the project, it was now time for me to create
that release.  To be honest, I was not sure what to expect out of the Python setup
process.  Creating releases for other languages is usually done as an add-on to the
language, not part of the core language as Python does.  As such, I was genuinely
interested in how the process would differ between Python and the other languages I have
written installers for.&lt;/p&gt;
&lt;p&gt;Like everything else in this project, this was going to be a learning experience, and
I was eager to get underway!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/a335ca8974d4260d47b5cd592f8c20e90dda6048"&gt;01 Apr 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/937a1839e2a4695fbbd2b6e2f38c68994faf5c65"&gt;03 Apr 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="where-to-start"&gt;Where To Start?&lt;a class="headerlink" href="#where-to-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While the changes that I needed to perform on the project to get it from its then
state to a packaged state were small, the path to get there was anything but short.
Having done my usual research, I ended up finding three sources that I thought would
be helpful to my effort:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nrempel/python-package-boilerplate"&gt;Nicolas Rempel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/build-your-first-python-package/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.8/distutils/setupscript.html"&gt;Python’s Own Setup Script documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I liked Nicolas’ article on creating Python packages because it was the first article that
I found in my searches that seemed to lay everything out on the table.  It felt that it
provided me with a lot
of useful information in a concrete, easy to digest form.  While I did have a couple of
issues with his examples, I do believe that they were because I was trying to adapt his
example as I went and messed things up.  The FreeCodeCamp article was useful in filling
in the gaps that I found in Nicolas’ article, especially when it came to what to do after
you had a package.  Finally, having the Python 3.8 library documentation helped me fill
in the last bit of the knowledge that I needed to complete the setup process.  Together,
with just a dash of experimentation thrown in for good measure, I was confident that I
could create a Python package.  Even if that effort took a while.&lt;/p&gt;
&lt;h2 id="creating-a-new-setuppy"&gt;Creating a New Setup.py&lt;a class="headerlink" href="#creating-a-new-setuppy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have had a local &lt;code&gt;setup.py&lt;/code&gt; file on my machine for months, it was always something
that I was toying around with, nothing concrete.  As such, I found that it was more
efficient to start from scratch and
create a new &lt;code&gt;setup.py&lt;/code&gt; file based mostly on Nicolas’s article.  I do not have any
issues with his use of mainline function calls, such as the ones that he uses to read the
&lt;a href="https://github.com/nrempel/python-package-boilerplate/blob/master/setup.py"&gt;readme.md&lt;/a&gt;
file from the directory, but I prefer things in functions.  From my perspective, it just
helps me to keep things readable.  I did like the
way he was organizing some of the values at the start of the module and decided to
follow that approach.  Furthermore, I decided that it was more readable to have every
value in variables, instead of being somewhat hidden in the call to the &lt;code&gt;setup&lt;/code&gt; function,
so I also made that change.&lt;/p&gt;
&lt;h3 id="the-most-important-parts-of-setup"&gt;The Most Important Parts of Setup&lt;a class="headerlink" href="#the-most-important-parts-of-setup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For me, the four most important parts of any setup are: name of the package, version of
the package, minimum required platform, and a declaration of any dependencies. Others can
disagree with me on whether these things are the most important parts of any setup script,
but I believe I have a strong argument in my favor.  It is a simple argument: without
these four parts, the rest of the setup script is useless.  Any documentation without
something to document is pointless.  Similarly, any declaration of what needs to be
included in the package and how to access it are useless without that base declaration.
At least in my mind, those four properties are always the foundation of any installation
script.&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;setup.py&lt;/code&gt; module from the article Nicolas wrote as a good set of
&lt;a href="https://idioms.thefreedictionary.com/crib+note"&gt;crib notes&lt;/a&gt;,
I created a very basic module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;runpy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"PyMarkdown"&lt;/span&gt;
&lt;span class="n"&gt;SEMANTIC_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;MINIMUM_PYTHON_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"3.8.0"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_requirements&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;lineiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"install-requirements.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lineiter&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;version_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"./version.py"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"__version__"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PACKAGE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SEMANTIC_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;python_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;MINIMUM_PYTHON_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parse_requirements&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was not much, but it was a good start.  Both the package name and the minimum Python
version required are hardwired in as they are almost never going to change.  The function
&lt;code&gt;get_semantic_version&lt;/code&gt; was written to encompass the code from the article to fetch the
version number, and the &lt;code&gt;parse_requirements&lt;/code&gt; function was written to encompass the
requirements for the project.&lt;/p&gt;
&lt;p&gt;Since I decided to specify the installation requirements for the project in the file
&lt;code&gt;install-requirements.txt&lt;/code&gt;, I added a very simple version of this file with a single
line present:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Columnar
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="moving-version-information-into-a-single-module"&gt;Moving Version Information Into A Single Module&lt;a class="headerlink" href="#moving-version-information-into-a-single-module" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It took me a bit to warm up to this, but after reading
&lt;a href="https://www.python.org/dev/peps/pep-0396/"&gt;PEP 396&lt;/a&gt;,
it just made sense.  If there is any reason to know the exact version of a Python library,
the &lt;code&gt;__version__&lt;/code&gt; field applied to the library name should contain the definitive version
for that library.  Following this PEP just made sense but required some rearrangement of
code in the project.&lt;/p&gt;
&lt;p&gt;Previously, the only place where the version information was kept was in the
&lt;code&gt;__version_number&lt;/code&gt; field of the &lt;code&gt;PyMarkdownLint&lt;/code&gt; class.  While I debated an approach that
would leverage that existing code, the simplicity of simply having a single &lt;code&gt;version.py&lt;/code&gt;
file just made more sense to me.  With the &lt;code&gt;get_semantic_version&lt;/code&gt; function already present
in the &lt;code&gt;setup.py&lt;/code&gt; module, as detailed in the last section, I added the following code to
the &lt;code&gt;PyMarkdownLint&lt;/code&gt; class to reference that same file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vm"&gt;__file__&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;last_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;second_last_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;second_last_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"version.py"&lt;/span&gt;
        &lt;span class="n"&gt;version_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"__version__"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is effectively the same code as in the &lt;code&gt;get_semantic_version&lt;/code&gt; function of
the &lt;code&gt;setup.py&lt;/code&gt; module.  The only changes present were to deduce the executable path
from the &lt;code&gt;__file__&lt;/code&gt; variable
and to determine the relative location of the &lt;code&gt;version.py&lt;/code&gt; file from where that
executable is located.&lt;/p&gt;
&lt;p&gt;After all this work, the only thing that was needed was a new &lt;code&gt;version.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Library version information.&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0.5.0"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and a small change to the &lt;code&gt;test_markdown_with_dash_dash_version&lt;/code&gt; test function to fetch
the version from the &lt;code&gt;version.py&lt;/code&gt; module.&lt;/p&gt;
&lt;h3 id="adding-documentation"&gt;Adding Documentation&lt;a class="headerlink" href="#adding-documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With those basics out of the way, it was time to add the documentation basics to
the &lt;code&gt;setup.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_readme_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"README.md"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;readme_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;readme_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Jack De Winter"&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"jack.de.winter@outlook.com"&lt;/span&gt;

&lt;span class="n"&gt;ONE_LINE_DESCRIPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"A GitHub Flavored Markdown compliant Markdown linter."&lt;/span&gt;
&lt;span class="n"&gt;LONG_DESCRIPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_readme_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;LONG_DESCRIPTION_CONTENT_TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"text/markdown"&lt;/span&gt;
&lt;span class="n"&gt;KEYWORDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"markdown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"linter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"markdown linter"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;PROJECT_CLASSIFIERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"Development Status :: 4 - Beta"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"Programming Language :: Python :: 3.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"License :: OSI Approved :: MIT License"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"Operating System :: OS Independent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTHOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTHOR_EMAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ONE_LINE_DESCRIPTION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LONG_DESCRIPTION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description_content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LONG_DESCRIPTION_CONTENT_TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;KEYWORDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PROJECT_CLASSIFIERS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Most of these fields are self-explanatory and are simple string objects or lists of
string objects.   The
three fields that stand apart from that are the &lt;code&gt;LONG_DESCRIPTION&lt;/code&gt; field,
the &lt;code&gt;LONG_DESCRIPTION_CONTENT_TYPE&lt;/code&gt; field, and the &lt;code&gt;PROJECT_CLASSIFIERS&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;LONG_DESCRIPTION_CONTENT_TYPE&lt;/code&gt; field is the easiest of the three as it assumes that
the &lt;code&gt;README&lt;/code&gt; file for the project will always be &lt;code&gt;README.md&lt;/code&gt;.  As such, the MIME content
type for the long description will always be &lt;code&gt;text/markdown&lt;/code&gt;.  For my projects, I feel
that it is a good assumption to make, so that was an easy one to get out of the way. Then,
to ensure that the &lt;code&gt;LONG_DESCRIPTION&lt;/code&gt; field is always up to
date, the &lt;code&gt;load_readme_file&lt;/code&gt; function reads the contents of the &lt;code&gt;README.md&lt;/code&gt; file and places
them into the &lt;code&gt;LONG_DESCRIPTION&lt;/code&gt; field. For me,
these fields just make sense as I can contain a package description of the project and
the GitHub description of the project in one place.&lt;/p&gt;
&lt;p&gt;Finding the right values for the &lt;code&gt;PROJECT_CLASSIFIERS&lt;/code&gt; field was the tasks that I had the
hardest time with out of the three fields.  With a seemingly
&lt;a href="https://pypi.org/classifiers/"&gt;endless page&lt;/a&gt;
of available classifiers, it was hard to narrow down the classifiers to a small set.
While I am not comfortable that I have the right set of classifiers for the project,
I believe I have a good set to start with.&lt;/p&gt;
&lt;p&gt;Looking at that work, the one thing that I needed to do to wrap it up was to
make sure that the &lt;code&gt;README.md&lt;/code&gt; file only contained information I wanted someone to
see when they were having their initial look at the project.  While I do not want
to hide the project’s issues list, I did not want it to be the first thing people
saw.  As such, I moved it over into the new &lt;code&gt;issues.md&lt;/code&gt; file.&lt;/p&gt;
&lt;h3 id="rounding-out-the-setup-properties"&gt;Rounding Out The Setup Properties&lt;a class="headerlink" href="#rounding-out-the-setup-properties" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;According to my research, the only two other fields that I needed to add were the &lt;code&gt;scripts&lt;/code&gt;
field and the &lt;code&gt;packages&lt;/code&gt; field.  The &lt;code&gt;packages&lt;/code&gt; field was the easy one to define out of
those two: I simply needed to list all the packages for the project.&lt;sup id="fnref:duh"&gt;&lt;a class="footnote-ref" href="#fn:duh"&gt;1&lt;/a&gt;&lt;/sup&gt;  While both
examples use the &lt;code&gt;setuptools&lt;/code&gt; module and its &lt;code&gt;find_packages&lt;/code&gt; function, I wanted to
maintain fine-grained control over the packages.  As such, I specified each package name
separately.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ensure_scripts&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"scripts/pymarkdown"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"pymarkdown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"pymarkdown.extensions"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"pymarkdown.plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"pymarkdown.resources"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the specification on how to start the PyMarkdown application, it took me a while to
decide on an action to use for that.  During my research phase, I had three possibilities
for how to interact with the project itself: &lt;code&gt;py_modules&lt;/code&gt;, &lt;code&gt;scripts&lt;/code&gt;, and &lt;code&gt;entry_points&lt;/code&gt;.
There was barely any information on &lt;code&gt;entry_points&lt;/code&gt; and how to use them, so I decided to
not use those unless I found enough information to warrant changing to them.  Looking to
my third reference source, the Python libraries documentation, I found this article
on
&lt;a href="https://docs.python.org/3/distutils/setupscript.html#installing-scripts"&gt;setup scripts&lt;/a&gt;.
As that is what the standard libraries used, I decided that was the best way for this
project.&lt;/p&gt;
&lt;p&gt;Looking at the example that Nicolas provided in his article, I quickly created my
own script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

from pymarkdown import PyMarkdownLint
PyMarkdownLint.main&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but came across one glaring problem right away.  That script would work well on Linux
systems, but my development environment is a Windows machine.  As I use the &lt;code&gt;PyLint&lt;/code&gt;
scanner on all my Python projects, I decided to look at how they solved this problem,
and used their &lt;code&gt;ensure_scripts&lt;/code&gt; function verbatim&lt;sup id="fnref:since"&gt;&lt;a class="footnote-ref" href="#fn:since"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ensure_scripts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linux_scripts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Creates the proper script names required for each platform (taken from PyLint)&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_platform&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"win"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;linux_scripts&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;".bat"&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;linux_scripts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;linux_scripts&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is wonderful in its simplicity!  If the first three characters of the platform
are &lt;code&gt;win&lt;/code&gt;, then the function assumes that the list of scripts must refer to scripts
that will work on a Windows machine.  It accomplishes this by adding another
list of scripts to the list, this new list being comprised of every element of the
original list, but with a &lt;code&gt;.bat&lt;/code&gt; appended to the end.  With that, the last thing
was to copy the &lt;code&gt;.bat&lt;/code&gt; batch file format over from &lt;code&gt;PyLint&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; off
&lt;span class="c1"&gt;rem Use python to execute the python script having the same name as this batch&lt;/span&gt;
&lt;span class="c1"&gt;rem file, but without any extension, located in the same directory as this&lt;/span&gt;
&lt;span class="c1"&gt;rem batch file&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;%~dpn0&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nv"&gt;%*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I was not sure if that batch script was going to work, but if it was good enough for
PyLint, I figured it was a good enough starting place for me.&lt;/p&gt;
&lt;h3 id="almost-finished"&gt;Almost Finished&lt;a class="headerlink" href="#almost-finished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Two simple things were left before my first attempt to compile my first Python package.
The first thing was to add a simple &lt;code&gt;LICENSE.txt&lt;/code&gt; file to the project
to establish the use of the project.  The other was to add a &lt;code&gt;__init__.py&lt;/code&gt; module
to the &lt;code&gt;pymarkdown&lt;/code&gt; directory to make sure that the base of the project was considered
a module for setup to pick up.&lt;/p&gt;
&lt;p&gt;With those two things addressed and out of the way, it was time to compile the setup
for the project!&lt;/p&gt;
&lt;h2 id="the-fun-begins-getting-packaging-to-work"&gt;The Fun Begins: Getting Packaging To Work&lt;a class="headerlink" href="#the-fun-begins-getting-packaging-to-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To start compiling the setup, I included the &lt;code&gt;twine&lt;/code&gt; and &lt;code&gt;setuptools&lt;/code&gt; into my
development environment using &lt;code&gt;pipenv install twine setuptools&lt;/code&gt;.  Once that
was complete, I added the following &lt;code&gt;package.cmd&lt;/code&gt; script to the repository to make things
easier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;rmdir&lt;/span&gt; /s /q dist
&lt;span class="k"&gt;rmdir&lt;/span&gt; /s /q build
&lt;span class="k"&gt;rmdir&lt;/span&gt; /s /q PyMarkdown.egg-info

pipenv run python setup.py sdist bdist_wheel
pipenv run twine check dist/*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was nothing fancy, but it allowed me to repeatedly repackage the project to test
any changes in an efficient manner.  Basically, it removes any signs of a previous
build before running the &lt;code&gt;setup.py&lt;/code&gt; script and then the &lt;code&gt;twine&lt;/code&gt; script.  While it
is not as fancy as the Gradle scripts I have for Java projects at work, I found that it
is uncomplicated and works very well.  I purposefully did not add any error handling to
the batch script as I wanted to make sure I saw all the information that was reported,
unfiltered.&lt;/p&gt;
&lt;p&gt;To assist in testing those changes, I created a new project &lt;code&gt;pymtest&lt;/code&gt; at the same level
as the &lt;code&gt;PyMarkdown&lt;/code&gt; project and left it almost empty for now.  I created that project
to be my test installation environment, useful once I had a package to install.  For now,
I just wanted to get it ready for later.  Thus, I created a simple &lt;code&gt;refresh_package.cmd&lt;/code&gt;
script with these contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv uninstall PyMarkdown
pipenv install ..\pymarkdown\dist\PyMarkdown-0.5.0.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simply, uninstall any existing &lt;code&gt;PyMarkdown&lt;/code&gt; package and install a new one right from
the &lt;code&gt;dist&lt;/code&gt; directory of the &lt;code&gt;PyMarkdown&lt;/code&gt; project.&lt;/p&gt;
&lt;p&gt;Now on to the real work: debugging the install script.&lt;/p&gt;
&lt;h3 id="pass-1-getting-the-version-right"&gt;Pass 1: Getting The Version Right&lt;a class="headerlink" href="#pass-1-getting-the-version-right" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Executing the &lt;code&gt;package.cmd&lt;/code&gt; script, everything worked fine, and I had a new package to
test!  Switching over to my test project, I executed the &lt;code&gt;refresh_package.cmd&lt;/code&gt; batch
script… and waited.  Looking at the output, the &lt;code&gt;uninstall&lt;/code&gt; command was completing
in under a second, but the install command was taking its time on the Resolving
phase of installing the package.  It was agonizing!&lt;/p&gt;
&lt;p&gt;But when it was done, it displayed the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    ERROR: Command errored out with exit status 1:
...    
    FileNotFoundError: [Errno 2] No such file or directory: '..pip-req-build-mfg5j1bu\\version.py'
    ----------------------------------------
ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I tried a couple of different things with no luck before I opened the
&lt;code&gt;PyMarkdown-0.5.0.tar.gz&lt;/code&gt; archive file from the project’s &lt;code&gt;dist&lt;/code&gt; directory and examined
its contents.  When I did that, I noticed that there was no &lt;code&gt;version.py&lt;/code&gt; file anywhere in
the archive.&lt;/p&gt;
&lt;p&gt;At that point, I spent about an hour or so trying to figure out how to get that
&lt;code&gt;version.py&lt;/code&gt; file into the archive at the right place before deciding to go with a more
intuitive approach.  After looking
at how the files were installed after the &lt;code&gt;install pymarkdown&lt;/code&gt; command was completed,
it was obvious that my current approach would necessitate copying the &lt;code&gt;version.py&lt;/code&gt; file
into the &lt;code&gt;pymarkdown&lt;/code&gt; directory.  So, instead of trying to figure out how to do that
“complicated” action, I decided on the “simple” action to move the &lt;code&gt;version.py&lt;/code&gt; file
into the &lt;code&gt;pymarkdown&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;With that decision made, I rewrote the &lt;code&gt;get_semantic_version&lt;/code&gt; in the &lt;code&gt;setup.py&lt;/code&gt;
module as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;version_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"./pymarkdown/version.py"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"__version__"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also rewrote the &lt;code&gt;__get_semantic_version&lt;/code&gt; function in the &lt;code&gt;main.py&lt;/code&gt; module as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vm"&gt;__file__&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;last_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;last_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"version.py"&lt;/span&gt;
        &lt;span class="n"&gt;version_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"__version__"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the &lt;code&gt;version.py&lt;/code&gt; file moved into the &lt;code&gt;pymarkdown&lt;/code&gt; directory, and with both references
to that file now looking for it in the new location, that error was now resolved.&lt;/p&gt;
&lt;h3 id="pass-2-file-name-casing-matters"&gt;Pass 2: File Name Casing Matters&lt;a class="headerlink" href="#pass-2-file-name-casing-matters" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After packaging the project again, I ran the &lt;code&gt;refresh_package.cmd&lt;/code&gt; script and
was now greeted with this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FileNotFoundError: [Errno 2] No such file or directory: 'README.md'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I examined the directory structure of the archive a good four or five times without any
ideas coming to mind.  I even looked at the Python install pages to see if I could find
anything. But all I could find with a list of the
&lt;a href="https://docs.python.org/3.8/distutils/sourcedist.html?highlight=readme#specifying-the-files-to-distribute"&gt;files to distribute&lt;/a&gt;.
This included other types of readme files, but not specifically the &lt;code&gt;README.md&lt;/code&gt; file.
Double checking the project that Nicolas set up, I saw that he was using &lt;code&gt;README.md&lt;/code&gt; as
a source for his long documentation without any apparent extra setup needed to include
that file.  So, I figured it must be something else.&lt;/p&gt;
&lt;p&gt;That is when it hit me.  Windows has many uses as an operating system&lt;sup id="fnref:religious"&gt;&lt;a class="footnote-ref" href="#fn:religious"&gt;3&lt;/a&gt;&lt;/sup&gt;, but one
of the things I do not like about it is the case-insensitivity of the file system.  In
this case, I had called the readme file &lt;code&gt;readme.md&lt;/code&gt; instead of &lt;code&gt;READMD.md&lt;/code&gt;.  Simply
correcting the case of the file name resolved this issue.&lt;/p&gt;
&lt;p&gt;After a simple case of “cannot see the forest
&lt;a href="https://idioms.thefreedictionary.com/cannot+see+the+forest+for+the+trees"&gt;because of the trees&lt;/a&gt;”,
it was on to the next issue.&lt;/p&gt;
&lt;h3 id="pass-3-making-sure-the-right-files-are-included"&gt;Pass 3: Making Sure The Right Files Are Included&lt;a class="headerlink" href="#pass-3-making-sure-the-right-files-are-included" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This time, when I executed the &lt;code&gt;refresh_package.cmd&lt;/code&gt; script after repackaging the project,
I was greeted with this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FileNotFoundError: [Errno 2] No such file or directory: 'install-requirements.txt'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With some newfound experience under my belt, I immediately opened the archive and
found that the &lt;code&gt;install-requirements.txt&lt;/code&gt; file was not in the archive. Thankfully, in
looking for solutions for the last error, I came across a solution to include data
files into the setup process using a &lt;code&gt;MANIFEST.in&lt;/code&gt; file. Located in the same section where
I found the information detailing which files were
automatically included in the setup archive,
&lt;a href="https://docs.python.org/3.8/distutils/sourcedist.html?highlight=readme#specifying-the-files-to-distribute"&gt;that section&lt;/a&gt;
there is information on the &lt;code&gt;MANIFEST.in&lt;/code&gt; file near the end of that section.
Following those instructions, I was quickly able to create a new &lt;code&gt;MANIFEST.in&lt;/code&gt; file
with the following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include install-requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After a quick repackaging and reinstalling, this error was indeed solved.&lt;/p&gt;
&lt;h3 id="pass-4-lather-rinse-repeat"&gt;Pass 4: Lather, Rinse, Repeat&lt;a class="headerlink" href="#pass-4-lather-rinse-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While that file was now present in the archive, the new error was complaining about
a missing directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error: package directory 'pymarkdown\resources' does not exist
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main reason for this directory is to host the &lt;code&gt;entities.json&lt;/code&gt; file.  That file
contains each of the named entities, with the corresponding Unicode character they each
entity maps to.  I tried adding
an &lt;code&gt;__init__.py&lt;/code&gt; and other such workarounds to get the file included, but nothing worked.
Convinced that I had tried other approaches, I followed the same approach as the last
section, and added it to the &lt;code&gt;MANIFEST.in&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include pymarkdown/resources/entities.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I do not want to make it sound that I dislike the &lt;code&gt;MANIFEST.in&lt;/code&gt; approach to including files
in the setup archive.  I don’t.  But to me, it feels like that file is the last option to
include files, with all other options having been exhausted.  For me, that is my own
&lt;a href="https://idioms.thefreedictionary.com/sniff+test"&gt;sniff test&lt;/a&gt;
for whether the use of the &lt;code&gt;MANIFEST.in&lt;/code&gt; file is warranted. For example, I would rather
figure out that I need to change the &lt;code&gt;readme.md&lt;/code&gt; file into the &lt;code&gt;README.md&lt;/code&gt; file before I
thought about adding it to the &lt;code&gt;MANIFEST.in&lt;/code&gt; file.  In this case, I was convinced that
there was no other way to include the file, and as such, I had passed my own sniff test.&lt;/p&gt;
&lt;h3 id="and-it-was-done"&gt;And It Was Done&lt;a class="headerlink" href="#and-it-was-done" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With that change made, I was now seeing the refresh of the packaging complete without
any errors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installing ..\pymarkdown\dist\PyMarkdown-0.5.0.tar.gz...
Adding PyMarkdown to Pipfile's [packages]...
Installation Succeeded
Pipfile.lock (db4242) out of date, updating to (29513d)...
Locking [dev-packages] dependencies...
Locking [packages] dependencies...
 Locking...Building requirements...
Resolving dependencies...
Success!
Updated Pipfile.lock (29513d)!
Installing dependencies from Pipfile.lock (29513d)...
  ================================ 1/1 - 00:00:05
To activate this project's virtualenv, run pipenv shell.
Alternatively, run a command inside the virtualenv with pipenv run.
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="and-now-verifying-the-usage"&gt;And Now, Verifying The Usage&lt;a class="headerlink" href="#and-now-verifying-the-usage" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With everything looking good in the packaging and installation, the next step was
to test the usage of the newly installed library.  With optimism in my heart, I went to
execute my first test command, &lt;code&gt;pipenv run pymarkdown --help&lt;/code&gt;, and I waited.  After a good
couple of minutes, I killed the script, checked things again, and everything seemed fine.&lt;/p&gt;
&lt;p&gt;It seemed like I was not done debugging the setup process quite yet.&lt;/p&gt;
&lt;h3 id="pass-1-proper-script-files"&gt;Pass 1: Proper Script Files&lt;a class="headerlink" href="#pass-1-proper-script-files" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having “imported” the script files from the PyLint project, I hoped they would work
out of the box, but assumed that I would have to do some work to get them operational.
I liked the idea of calling the &lt;code&gt;pymarkdown&lt;/code&gt; script from the &lt;code&gt;pymarkdown.bat&lt;/code&gt; script,
but after 45 minutes and approximately 4 attempts at rewriting the scripts, I gave up.
Just like before, I decided to go with simplicity for both files, the &lt;code&gt;pymarkdown&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;
&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the &lt;code&gt;pymarkdown.bat&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;"from pymarkdown import PyMarkdownLint; PyMarkdownLint().main()"&lt;/span&gt; &lt;span class="o"&gt;%*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of having one script call the other, I opted for matching the contents of both
scripts as closely as possible.  In the shell version, the
&lt;a href="https://en.wikipedia.org/wiki/Shebang_(Unix)"&gt;shebang&lt;/a&gt;
at the start of script takes care of invoking Python and Python itself takes care
of the command line arguments.  In the batch script version, I needed to explicitly
call Python with the &lt;code&gt;-c&lt;/code&gt; argument to tell Python to execute the next argument as
a Python script.  Finally, the &lt;code&gt;$*&lt;/code&gt; at the end of that line causes any arguments passed
to the batch script to be passed to the Python program specified with the &lt;code&gt;-c&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;After a couple of tries, mostly due to small typing mistakes, when I executed the
command line &lt;code&gt;pipenv run pymarkdown --help&lt;/code&gt;, I was welcomed with the help documentation
for the project.  Success!&lt;/p&gt;
&lt;h3 id="pass-2-init-files"&gt;Pass 2:  Init Files&lt;a class="headerlink" href="#pass-2-init-files" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the batch
script issue in the last section resolved, the execution of the test command
&lt;code&gt;pipenv run pymarkdown --help&lt;/code&gt; now yielded this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
  File "&amp;lt;string&amp;gt;", line 1, in &amp;lt;module&amp;gt;
ImportError: cannot import name 'PyMarkdownLint' from 'pymarkdown' (C:\Users\jackd\.virtualenvs\pymtest-W-bOTTm6\lib\site-packages\pymarkdown\__init__.py)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perhaps it is my knowledge of other programming languages, but I favor direct imports
in the files that need them over the use of &lt;code&gt;__init__.py&lt;/code&gt; modules.  For me, it just
seems like overkill in 98% of the cases, leading to a hard-to-understand view of
dependencies between files.  In the case of creating a setup package, this
turned out to be one of the 2% cases that I had not come across yet.  &lt;/p&gt;
&lt;p&gt;But, seeing it as this was an obvious request for a proper &lt;code&gt;__init__.py&lt;/code&gt; module, I added
one to the &lt;code&gt;pymarkdown&lt;/code&gt; package with the contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown.main&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I do not use it in any of the other modules for the project, but it is there for the
&lt;code&gt;setup.py&lt;/code&gt; module and any others that need it.  As such, I can stay true to how I use
&lt;code&gt;import&lt;/code&gt; statements while providing the information that the setup scripts need.
For me, that is a win-win.&lt;/p&gt;
&lt;h2 id="pass-3-including-data-files"&gt;Pass 3:  Including Data Files&lt;a class="headerlink" href="#pass-3-including-data-files" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the &lt;code&gt;pipenv run pymarkdown --help&lt;/code&gt; command now running without any issues, I wanted
to include some more complex examples to test in the &lt;code&gt;refresh_package.cmd&lt;/code&gt; script.  To
that extent, I added the following lines to the end of that file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run pymarkdown plugins list
pipenv run pymarkdown plugins info md048
pipenv run pymarkdown plugins info md047
pipenv run pymarkdown scan ..\blog-content\website\content\articles
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going through the reinstall process with the new version of this script, the installation
and the first three commands all went off without any issues.  However, when it got to the
&lt;code&gt;scan&lt;/code&gt; command, the following error was emitted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BadTokenizationError encountered while initializing tokenizer:
Named character entity map file '..\lib\site-packages\pymarkdown\resources\entities.json' was not loaded ([Errno 2] No such file or directory: '..\\lib\\site-packages\\pymarkdown\\resources\\entities.json').
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going back to the useful
&lt;a href="https://docs.python.org/3.8/distutils/sourcedist.html?highlight=readme#specifying-the-files-to-distribute"&gt;files to distribute section&lt;/a&gt;,
I quickly noticed that one of the items in the list was labelled
&lt;a href="https://docs.python.org/3.8/distutils/setupscript.html#installing-additional-files"&gt;Installing Additional Files&lt;/a&gt;.
This seemed to fit the situation that I had before me exactly.  Reading the information
on the other side of that link, I knew what to do within a couple of minutes.  Within a
couple more minutes, I had this change coded up and inserted at the end of the &lt;code&gt;setup&lt;/code&gt;
function call in the &lt;code&gt;setup.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;data_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;'Lib/site-packages/pymarkdown/resources'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'pymarkdown/resources/entities.json'&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going through the entire process again, everything worked fine, and I was now done
with the test scenarios I had in mind.  I tried a handful of additional scenarios to
make sure I had them all covered, and each scenario worked as I expected it to. I
had a fully functioning install script!&lt;/p&gt;
&lt;h3 id="pass-31-cleanup"&gt;Pass 3.1: Cleanup&lt;a class="headerlink" href="#pass-31-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was not really a pass on its own, but a little bit of cleanup that I wanted to
do.  While looking at various other Python setup articles and library packages, I
decided to add three more arguments to the &lt;code&gt;setup&lt;/code&gt; function call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;maintainer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTHOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;maintainer_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTHOR_EMAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PROJECT_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since I am both the author and the maintainer, it just made sense to set the &lt;code&gt;maintainer&lt;/code&gt;
fields to the same values as with the &lt;code&gt;author&lt;/code&gt; fields.  I also wanted people to be able to
get more information on the project, so setting the &lt;code&gt;url&lt;/code&gt; field also made sense.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Based on my experience with other languages, creating an installation package for the
project in Python was a walk in the park.  There was no fancy extra packaging required,
everything was written in Python.  While it took me about four hours to make sure
everything was working properly, I would estimate that a similar installer for C# or
Java would easily take at least eight hours to get into a similarly finished form.
For me, that is a win.&lt;/p&gt;
&lt;p&gt;In general, I am very pleased with how this work went on getting the setup code into proper
shape.  There were some very good examples that I could lean on to get my code working,
and the starting points were all well-defined.  That made the distance I needed to travel
from sample code to working code very short,  which was very pleasant for once.  During
the creation of the setup script, I did notice a couple of extra things that I want to
clean up before the initial release.  But like before, they are all small and reasonable,
so I am confident I can make short work of them.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the setup packaging complete for now, I move on to simplifying the output from
some of the commands and starting to update the rules for the initial release.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:duh"&gt;
&lt;p&gt;I almost feel that a “duh?!” would be warranted here, but do not feel that it is appropriate. &lt;a class="footnote-backref" href="#fnref:duh" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:since"&gt;
&lt;p&gt;Since I took a look, someone refactored the setup code.  Please look at &lt;a href="https://github.com/PyCQA/pylint/commit/e8b44339a28630e087373416e4e725e454ed025f#diff-60f61ab7a8d1910d86d9fda2261620314edcae5894d5aaa236b821c7256badd7"&gt;this code&lt;/a&gt;, which is the code I cribbed from. &lt;a class="footnote-backref" href="#fnref:since" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:religious"&gt;
&lt;p&gt;This comment is not meant to start a religious war.  I firmly believe that there are many different jobs that need done, with some tools being the obvious choice for that job.  There are other jobs where the tools that can be used are more on personal preference combined with the job at hand.  For myself, operating systems are just that: tools. &lt;a class="footnote-backref" href="#fnref:religious" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Cleaning Up</title><link href="https://jackdewinter.github.io/2021/04/05/markdown-linter-road-to-initial-release-cleaning-up/" rel="alternate"></link><published>2021-04-05T00:00:00-07:00</published><updated>2021-04-05T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-04-05:/2021/04/05/markdown-linter-road-to-initial-release-cleaning-up/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/"&gt;last article&lt;/a&gt;, I talked about
how I integrated my configuration system into the PyMarkdown project, revamping the
command line interface along the way.  In this article, I talk about my efforts in
resolving the remaining Priority 1 items from the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At one point late …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/"&gt;last article&lt;/a&gt;, I talked about
how I integrated my configuration system into the PyMarkdown project, revamping the
command line interface along the way.  In this article, I talk about my efforts in
resolving the remaining Priority 1 items from the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At one point late last year, I was worried that I would never get to the point where
I would release the PyMarkdown project in some form.  It seemed that for every
item I resolved from the issues list, I added two more items.  It just looked like I
was never going to get to a point where I was comfortable with releasing the project.&lt;/p&gt;
&lt;p&gt;Things have changed a lot since last year.  While it is taking me longer to get to that
initial release point than I had hoped for, I know that I am very close to having a
solid first release of this project.  One of the best things I did
to help me work towards that point was to classify most of the issues list into one
of four categories.  And with only three items left in the Priority 1 section of that
list, it was time to deal with them and get that much closer to a solid release!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/7d5fd4f265d3bf33963c1cf3c91af7a001473a39"&gt;27 Mar 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/02c2f671fe397bba2d0e9cd89498570763f22895"&gt;28 Mar 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-was-this-cleanup-required"&gt;Why Was This Cleanup Required?&lt;a class="headerlink" href="#why-was-this-cleanup-required" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking through the issues list, I knew that most of the issues were in one of four
buckets of issues, numbered one to four.  There were a small handful of issues left
in the bucket labelled &lt;em&gt;“Priority 1 - Must Solve Before Initial”&lt;/em&gt;, and these were
important to me to get resolved before the initial release of the project.  But why?&lt;/p&gt;
&lt;p&gt;In categorizing the remaining issues into those buckets, any issues placed in the first
bucket were issues that either would drastically impede the project’s success or would
be too costly to fix later.   The remaining handful of issues in the Priority 1 section
were all issues that I consider to be breaking changes.&lt;/p&gt;
&lt;p&gt;From experience, breaking changes are painful.  A breaking change is any change to a
system that causes dependent systems to fail specifically due to that change.  These
changes usually happen when some part of the interface between systems is deleted or
changed, but it can also occur if a newly added part of the interface is required.
A great
example of a breaking change starts with a system allowing free-form user input for the
&lt;code&gt;id&lt;/code&gt; field of one of its objects.  If that system decided to modify that user input
process to mandate that any &lt;code&gt;id&lt;/code&gt; fields must be only alphabetic characters, that is
not enough for it to be a breaking change.  For it to be a breaking change, there needs
to be a dependent system that interfaces with that field, requiring that system to
change its understanding of that field to match the newly provided understanding. Until
such time as that understanding is fixed, the dependency between those two systems is
broken.&lt;/p&gt;
&lt;p&gt;These changes are painful for two main reasons.  The biggest reason is that the
interface between the two systems is changed in such a way that the old interface is
invalidated.  Therefore, one of the more frequently suggested mitigations for breaking
changes is to support a fixed number
of the old interfaces, say the last two interfaces, until such a time as there is
confidence that no other system is depending on that old interfaces.  If things are
done properly, the oldest of the supported interfaces can then be dropped with no
systems being dependent on it, therefore removing the “breaking” from a breaking change.&lt;/p&gt;
&lt;p&gt;That is where the other big reason comes in: communication.  Whether the strategy is
to “bite the bullet” and do everything at once or whether it is to support old interfaces,
that must be clearly communicated to other teams and other projects.  If not, everything
falls apart very quickly.  And please take it from me, that is where the wrong kind of
communication usually happens, with a lot of finger pointing and harsh words being thrown
around.  Unless careful attention and effort is made to clearly communicate what is going
to be done, when it is going to be done, and the work required of all teams, breaking
changes are just a source of pain that it is best to avoid.&lt;/p&gt;
&lt;p&gt;For each of the remaining Priority 1 issues, I wanted to change small things with tokens
and how their debug output is rendered.  If I waited until after I released the project,
I believe these changes would all qualify as breaking changes when people start to use
the project.  As these tokens are part of the foundation of the project, it would be
difficult to version them in any way that would make sense.  Therefore, I mandated
these changes as a requirement for the initial release.&lt;/p&gt;
&lt;h3 id="a-quick-note"&gt;A Quick Note&lt;a class="headerlink" href="#a-quick-note" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The PyMarkdown project uses its Markdown parser to translate Markdown into tokens, layering
a rules engine on top of those tokens emitted by the parser.  Unlike other
articles in this series, this article almost exclusively deals with tokens.  Therefore,
I believe that a rudimentary knowledge of tokens is required to understand this article.&lt;/p&gt;
&lt;p&gt;The base of every token is either the &lt;code&gt;MarkdownToken&lt;/code&gt; class or the &lt;code&gt;EndMarkdownToken&lt;/code&gt;
class.  The &lt;code&gt;MarkdownToken&lt;/code&gt; class itself contains the names of each of the different
tokens in a list of member variables at the top of the class.  When looking at the debug
output for a token, it is the open square bracket character &lt;code&gt;[&lt;/code&gt; and this name that
form the start of every token. For every &lt;code&gt;MarkdownToken&lt;/code&gt; instance and most instances of
&lt;code&gt;EndMarkdownToken&lt;/code&gt;&lt;sup id="fnref:whenNot"&gt;&lt;a class="footnote-ref" href="#fn:whenNot"&gt;1&lt;/a&gt;&lt;/sup&gt;, this information is followed by the line number and column
number where the area belonging to that token begins.  This is then followed by the
separator character &lt;code&gt;:&lt;/code&gt;, any extra token data, and the close square bracket character &lt;code&gt;]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A simple example of this is a simple Text token containing the words &lt;code&gt;baz&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;
separated by a newline character.  When parsed, the Text token &lt;code&gt;[text(1,1):baz\nbar::\n]&lt;/code&gt;
is emitted within the scope of a Paragraph token. Following the instructions above,
it reads that this a &lt;code&gt;text&lt;/code&gt; token that starts at line &lt;code&gt;1&lt;/code&gt; and column &lt;code&gt;1&lt;/code&gt;.
The extra data for this token starts with the text content &lt;code&gt;baz\nbar&lt;/code&gt;, followed by some
extra information regarding any whitespace encountered.&lt;/p&gt;
&lt;p&gt;As the extra data for each token varies from token to token, the extra token data part of
the debug output varies from token to token.  Where possible, I will try and call out what
is present in the tokens in the description of the information.  As the HTML output is
usually not concerned with whitespace characters, the most common start to the extra
token data section of the debug output usually deals with any whitespace that was
encountered.&lt;/p&gt;
&lt;h2 id="the-important-of-good-scenario-tests"&gt;The Important Of Good Scenario Tests&lt;a class="headerlink" href="#the-important-of-good-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I usually consider good unit tests and good scenario tests pivotal to any project,
they are even more important when refactoring code.  The group of tests for any
project present a logical description of how the project is supposed to behave under
a given set of circumstances.  Depending on the type of refactoring that is being done,
one of two types of expectations are desired.  If the refactoring only changes
internal components, then the expectation is that no tests will need to be changed.
For these changes, a small external change is the expected change, and if the refactoring
is successful, then only those small external changes should occur.&lt;/p&gt;
&lt;p&gt;I maintain a high level of code coverage and scenario coverage for the PyMarkdown project.
Because of this, I have the confidence to make these changes.  If anything breaks, I will
know about it right away, and not days later.  With that confidence in hand, it was time
to start making those changes.&lt;/p&gt;
&lt;h2 id="end-tokens"&gt;End Tokens&lt;a class="headerlink" href="#end-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first change that I wanted to tackle was something that sounded simple, but I
figured it was going to trickle down into many changes.  That change was to refine how the
&lt;code&gt;EndMarkdownToken&lt;/code&gt; was used, specifically with how it closed certain tokens.&lt;/p&gt;
&lt;p&gt;During my development of the PyMarkdown project, I made certain decisions based on
the information I had at the time.  One of the first decisions that I needed to make
revolved around the use of the &lt;code&gt;EndMarkdownToken&lt;/code&gt; token.  This token is used for
tokens that require some manner of manual close token to delineate the section being
specified.  One part of that token was an indicator &lt;code&gt;force_close&lt;/code&gt;, which indicates
whether one or more characters caused the section to be closed without force, or whether
the section was forced close without any characters.  It was that decision that I wanted
to take another look at.  Was it always necessary?&lt;/p&gt;
&lt;h3 id="the-research"&gt;The Research&lt;a class="headerlink" href="#the-research" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One week, as I was fixing an issue with the &lt;code&gt;EmphasisMarkdownToken&lt;/code&gt; tokens, I looked
at the &lt;code&gt;EndMarkdownToken&lt;/code&gt; output and wondered if I had made the right choice, those many
months
ago.  While I was sure that I had made the right decision at that time,
I was not sure that the information underlying that decision had changed enough
to invalidate that decision.  I needed to take a new look.&lt;/p&gt;
&lt;p&gt;To me, it just seemed wasteful and misleading to have a &lt;code&gt;force_close&lt;/code&gt; field that
was always set to &lt;code&gt;False&lt;/code&gt;.  It was correct to say that it was never forced close,
but it just seemed to me that it was extra information that could be conveyed in a better
form.&lt;/p&gt;
&lt;p&gt;Searching through the source code for &lt;code&gt;[end-emphasis&lt;/code&gt;, I searched the many results that
appeared and could not find one case where the found debug output indicated a forced
close.  This backed up my thoughts that always presenting that &lt;code&gt;force_close&lt;/code&gt; field
in the debug output was inefficient.  That information along with the over 100 results
that I found in my search led me to decide to make this change.  Without searching for
any other end tokens, I believe that making this change solely on the merits of the
end Emphasis token were enough.&lt;/p&gt;
&lt;h3 id="the-effort"&gt;The Effort&lt;a class="headerlink" href="#the-effort" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The fist change was an easy one.  To better understand things in the future, I
added a new &lt;code&gt;requires_end_token&lt;/code&gt; field to the token classes to define which tokens require
an end token to match their start token.  There was no external indication of this
change, it was just something to help me to define the characteristics of each type
of token.  To make use of this change, I added a new &lt;code&gt;assert&lt;/code&gt; call when a new
&lt;code&gt;EndMarkdownToken&lt;/code&gt; is created to confirm that the token type supports end tokens.&lt;/p&gt;
&lt;p&gt;It was the other change that I was dreading.  If I wanted to remove the &lt;code&gt;force_close&lt;/code&gt;
indication for any type of token that did not support it, I needed to know with
certainty that it would never be forced.  To do this, I added a new &lt;code&gt;can_force_close&lt;/code&gt;
field and property to track that property of the tokens.  Adding to the effort
started in the previous section, I also added another check in the &lt;code&gt;EndMarkdownToken&lt;/code&gt;
constructor to verify that if that flag was set, the &lt;code&gt;was_forced&lt;/code&gt; argument was never
set.  This left me with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requires_end_token&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Token '{start_markdown_token} does not require end token."&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;can_force_close&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;was_forced&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Token '{start_markdown_token}'s end token cannot be forced."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that in place, a small change to &lt;code&gt;__compose_data_field&lt;/code&gt; function was all that
was needed to effect the change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_markdown_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;can_force_close&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;field_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;was_forced&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was not the part I was dreading… that came next.&lt;/p&gt;
&lt;h3 id="the-cleanup"&gt;The Cleanup&lt;a class="headerlink" href="#the-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With all the foundational changes in place, it was time to activate that code.  To be
doubly sure, I again verified that the corresponding end token was always created with
&lt;code&gt;was_forced&lt;/code&gt; set to &lt;code&gt;False&lt;/code&gt; and set the new &lt;code&gt;can_force_close&lt;/code&gt; field to &lt;code&gt;False&lt;/code&gt;.
Running the scenario tests, I went through and fixed all the scenario tests that
were expecting the old format and corrected them to the new format.  That might
sound difficult, but it effectively was changing the expected output that
looked like &lt;code&gt;"[end-emphasis(1,8):::False]"&lt;/code&gt; into &lt;code&gt;"[end-emphasis(1,8)::]"&lt;/code&gt; for
each reference that occurred in a scenario test.&lt;/p&gt;
&lt;p&gt;Once those changes were fixed, I looked for other tokens that fell into this
category and discovered that this behavior was true for the &lt;code&gt;AtxHeadingMarkdownToken&lt;/code&gt;,
the &lt;code&gt;SetExtHeadingMarkdownToken&lt;/code&gt;, and the &lt;code&gt;LinkStartMarkdownToken&lt;/code&gt;.  One at a time,
I verified that the &lt;code&gt;EndMarkdownToken&lt;/code&gt; for those tokens were not being forced, and set
the &lt;code&gt;can_force_close&lt;/code&gt; arguments to &lt;code&gt;False&lt;/code&gt;.  From there it was lather, rinse, and repeat.
By the time I was done, I had changed the format more than 879 times in over 879 scenario
tests.&lt;/p&gt;
&lt;p&gt;That was about five hours of really mind-numbing work, but it was worth it. It just
looked cleaner to me. It was a good first step.&lt;/p&gt;
&lt;h2 id="fenced-code-blocks"&gt;Fenced Code Blocks&lt;a class="headerlink" href="#fenced-code-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the things that I never had time to research is why the Text tokens inside of
Fenced Code Blocks tokens did not coalesce like they did within other tokens.
And it was not all the time either, it was only part of the time.  With this issue, there
were two things that I wanted to accomplish.  The first was to figure out why it happened.
The second, depending on the answer of the first, was to fix it.  If I was going
to fix it, I was highly confident that it would require changes to the tokens.  So,
while it was not big enough to normally make my radar, if I was going to fix it, now was
the time while I was addressing other tokens.&lt;/p&gt;
&lt;h3 id="the-examples"&gt;The Examples&lt;a class="headerlink" href="#the-examples" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To illustrate this behavior, consider the Markdown string from the test function
&lt;code&gt;test_fenced_code_blocks_099f&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;source_markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""```&lt;/span&gt;

&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="se"&gt;\a\a&lt;/span&gt;&lt;span class="s2"&gt;abc&lt;/span&gt;
&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;

&lt;span class="s2"&gt;```"""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This test was created to test how blank lines and lines with text interact with each other
within a Fenced Code Block element.  Since this occurs within a Fenced Code Block, the
important thing to remember is that the translation to HTML must occur without losing
any data, including whitespaces.  As such, when it is tokenized, it tokenizes into the
following form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[fcode-block(1,1):`:3::::::]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK(2,1):]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK(3,1): ]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(4,3):abc:  ]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK(5,1): ]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK(6,1):]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-fcode-block::3:False]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This set of tokens generated for that Markdown starts and ends with generic Fenced Code
Block tokens.  Between those tokens are the Blank Line tokens representing each blank
line and the one Text token for the one non-blank line of text.&lt;/p&gt;
&lt;p&gt;For comparison, test function &lt;code&gt;test_fenced_code_blocks_099c&lt;/code&gt; starts with a line of text
and then is followed by blank lines until a final line of text and the closing fence:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;source_markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""```&lt;/span&gt;
&lt;span class="s2"&gt;z&lt;/span&gt;
&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="se"&gt;\a\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;z&lt;/span&gt;
&lt;span class="s2"&gt;```"""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is translated into the tokenized form of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    expected_tokens = [
        "[fcode-block(1,1):`:3::::::]",
        "[text(2,1):z\n\x03 \n\x03  \n\x03 \nz:]",
        "[end-fcode-block::3:False]",
    ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike the previous token output, the Text tokens and Blank Line tokens have all been
coalesced or combined into a single Text token.  In the debug output for this Text token,
the &lt;code&gt;\n&lt;/code&gt; sequence represents a newline character and the &lt;code&gt;\x03&lt;/code&gt; is used to separate the
removed whitespace from the start of the line from the removed whitespace at the end of
the line. While it is a dense form of the information, it provides every bit of
information needed to faithfully generate the HTML output for that Markdown sample.&lt;/p&gt;
&lt;p&gt;I sincerely believe that this single Text token format is easier to understand than the
alternative.  That alternative would be to use five tokens instead of one token; the
first and last tokens of that sequence would be Text tokens with the remaining three
tokens being Blank Line tokens.  While the single Text token is packed with information,
all the necessary information is contained within that one token, not spread out over five
tokens.  As such, I find that I do not need to try and remember what interactions occur
between the tokens as there is only the one token.  It is just there.&lt;/p&gt;
&lt;p&gt;But if this is the case, why didn’t the previous example also coalesce its tokens into
one token?&lt;/p&gt;
&lt;h3 id="the-research_1"&gt;The Research&lt;a class="headerlink" href="#the-research_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It did not take me that long to track the cause for this behavior down, and I was shocked
at how easy it was to fix.  Inside of the &lt;code&gt;coalesce_processor.py&lt;/code&gt; module, there is a loop
that looks for Text tokens and Blank Line tokens and sees if it can combine those tokens
into an already encountered Text token.  Basically, a Text token for &lt;code&gt;a&lt;/code&gt; followed by a
Text token for &lt;code&gt;b&lt;/code&gt; becomes a Text token for &lt;code&gt;a\nb&lt;/code&gt;.  Similarly, a Text token for &lt;code&gt;a&lt;/code&gt;
followed by a Blank Line Token becomes &lt;code&gt;a\n&lt;/code&gt;.  Of course, this is all without whitespace,
which changes those combinations a bit, but not by much.&lt;/p&gt;
&lt;p&gt;There are five Markdown elements that can contain Text tokens: the two paragraph-like
elements (Paragraph and SetExt Heading) and the three code block elements (Indented Code
Block, Fenced Code Block, and HTML Code Block).  Because of the way that they are parsed,
the two paragraph-like elements never start with a Blank Line token.  The paragraph-like
element is only started when actual text is presented, skipping over those blank lines.
The HTML Code Blocks elements are always started by a HTML tag and the Indented Code
Block element is always started by indented text.  That leaves the Fenced Code Block
element as the only element that can start with a Blank Line token.&lt;/p&gt;
&lt;h3 id="the-effort_1"&gt;The Effort&lt;a class="headerlink" href="#the-effort_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With that research under my belt, it was easy to determine the base change needed
to fix this issue.  The reason that the Text tokens and Blank Line tokens were not
coalescing was that there was no Text token to coalesce to.  The change was to add the
following code to the end of the loop in the &lt;code&gt;coalesce_text_blocks&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
                &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;coalesced_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;
            &lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;replacement_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TextMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;coalesced_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;replacement_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;did_process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code would only trigger for the scenarios in which the current element was a
Blank Line token and it was the first token inside of a code block.  In those cases,
it kicked off the coalesce process by creating an “empty” Text token that represented
the blank line.  With this new logic in place, the Markdown for function
&lt;code&gt;test_fenced_code_blocks_099f&lt;/code&gt; now parsed as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[fcode-block(1,1):`:3::::::]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(2,1):&lt;/span&gt;&lt;span class="se"&gt;\n\x03&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  abc&lt;/span&gt;&lt;span class="se"&gt;\n\x03&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n\x03&lt;/span&gt;&lt;span class="s2"&gt;:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-fcode-block::3:False]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="the-cleanup_1"&gt;The Cleanup&lt;a class="headerlink" href="#the-cleanup_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The cleanup for this change was not too bad.  The HTML transformer was simplified by
removing two lbocks of code, one from the &lt;code&gt;__handle_text_token&lt;/code&gt; function and the other
from the &lt;code&gt;__handle_blank_line_token&lt;/code&gt; function.  As Blank Line tokens no longer appeared
within Fenced Code Blocks, there was now no need for that processing. In addition,
the &lt;code&gt;__handle_end_fenced_code_block_token&lt;/code&gt; function required a similar change to remove
unused code, as well as a small change to add a newline character under certain specific
circumstances.  The Markdown transformer change was even simpler, requiring the
string modification at the end of the &lt;code&gt;transform&lt;/code&gt; function to be further restricted
in cases where the end Fenced Code Block token was forced.&lt;/p&gt;
&lt;p&gt;Other than those changes, the remaining changes were in the scenario tests that included
Fenced Code Blocks that began with a Blank Line.  Including new tests that were added
to round our scenarios, only 34 scenario tests needed to be adjusted.  I was lucky
with that change, only requiring changes for scenarios that specifically dealt with
Fenced Code Block elements beginning with a blank line.  It could have been a lot worse!&lt;/p&gt;
&lt;h2 id="hard-line-breaks"&gt;Hard Line Breaks&lt;a class="headerlink" href="#hard-line-breaks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This change is something that I have looked at on and off for around seven months.  For
whatever reason, when I added support for the Hard Line Break token, I added it
without capturing the newline that accompanies the hard line break inside of the token.
Instead, that newline was placed in the Text token that followed the Hard Line Break token.
Having recently made sure that Hard Line Break elements were being handled properly, I
was now even more convinced that the newline character should be with the Hard Line Break
token itself, not with the following token.&lt;/p&gt;
&lt;p&gt;The reason I had just looked at this before and taken no action to fix it was because of
the scope of this change.  There was no way that fixing this was not going to be a
breaking change.  I was moving a newline character from a following token back to the
current token, where it should have been from the start.  According to my estimates, it
was going to impact at least 20 tests outside of the tests for the Hard Line Break token
itself.  But, to avoid a breaking change later, it was better to incur the effort of
changing the code now.&lt;/p&gt;
&lt;h3 id="the-examples_1"&gt;The Examples&lt;a class="headerlink" href="#the-examples_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To illustrate this behavior, consider the Markdown string from the test function
&lt;code&gt;test_hard_line_breaks_655x&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;source_markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""foo&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;baz"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a simple example that illustrates how a single backslash at the end of the line
(shown in its Python form as a backslash escaped by a backslash) causes a Hard Line Break
token to be generated.  This in turn produces the tokens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[para(1,1):&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(1,1):foo:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[hard-break(1,4):&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(2,1):&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;baz::&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-para:::True]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If this does not look a bit weird, it should.  Usually, the newline character is contained
within the token that contains that newline character.  In this case, the newline character
for the Hard Line Break token is contained at the start of the following Text token.
I mean, it works, but it is not ideal.  Dealing with that weirdness caused me to have to
add extra bits of code to compensate for that behavior, as well as causing issues during
debugging.  It just did not work well for me.&lt;/p&gt;
&lt;p&gt;Ideally, what I wanted to see was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[para(1,1):&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(1,1):foo:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[hard-break(1,4):&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(2,1):baz:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-para:::True]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was just a matter of making the necessary changes to get there and undoing a lot of
the little changes made to compensate for it along the way.&lt;/p&gt;
&lt;h3 id="the-effort_2"&gt;The Effort&lt;a class="headerlink" href="#the-effort_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From a change point of view, the first two parts were the easy ones: changing the token
itself and changing the &lt;code&gt;__handle_hard_break_token&lt;/code&gt; function in the HTML transformer to
produce the correct output.  Starting from there, I expected a change would be required
in the &lt;code&gt;handle_line_end&lt;/code&gt; function, and I was correct.  For both forms of the token,
the &lt;code&gt;whitespace_to_add&lt;/code&gt; variable needed to be set to &lt;code&gt;None&lt;/code&gt; and the
&lt;code&gt;append_to_current_string&lt;/code&gt; variable needed to be set to &lt;code&gt;""&lt;/code&gt;.  This ensured that the
correct actions were taken at the end of that line.&lt;/p&gt;
&lt;p&gt;After some more debugging, a couple of lines were removed from the &lt;code&gt;__complete_inline_loop&lt;/code&gt;
function and the &lt;code&gt;__complete_inline_block_processing&lt;/code&gt; function as they were no longer
needed.  The Markdown transformer itself was mostly correct, requiring recombination with
any existing paragraph text to be taken care of in the &lt;code&gt;__rehydrate_hard_break&lt;/code&gt; function.
While not as simple, the &lt;code&gt;verify_line_and_column_numbers.py&lt;/code&gt; module required a series of
changes that were foreseeable, based on the changes that had already been made.&lt;/p&gt;
&lt;p&gt;One of the trickier things to debug in this area were the changes required for links and
images.  To get things working properly before this change, the
&lt;code&gt;__collect_text_from_blocks&lt;/code&gt; function and others like it had “funny” logic to deal with
the newline being in a separate token.  For the &lt;code&gt;__collect_text_from_blocks&lt;/code&gt; function,
I was lucky: I literally just needed to append a newline character to both the &lt;code&gt;text_parts&lt;/code&gt;
variable and the &lt;code&gt;text_raw_parts&lt;/code&gt; variable.   But in other cases, I had to remove code
that had worked before and replace it with code, often code that was aware of whether or
not it was captured inside of a link label.  That took a while to work through.&lt;/p&gt;
&lt;h3 id="setext-headings"&gt;SetExt Headings&lt;a class="headerlink" href="#setext-headings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The SetExt Heading token presented its own set of issues.  As that token is essentially
a Paragraph token followed by a special sequence, the inline processing had to be coded
differently than the paragraph handling.  With this change, all the fixes that corrected
for the Text token following a Hard Line Break token within a SetExt Heading token needed
to be removed.&lt;/p&gt;
&lt;p&gt;While there weren’t any big blocks of codes that had to be written, there was a lot of
moving code around and adding code to specifically handle the whitespace to be stored
near Hard Line Break tokens.  This occurred in three places within the
&lt;code&gt;__process_inline_text_block&lt;/code&gt; function and the only effective way to debug it was to
uncomment every &lt;code&gt;PLOGGER&lt;/code&gt; call within that function.  Small thing: I forgot to comment
them out again when I was done.&lt;/p&gt;
&lt;h3 id="the-cleanup_2"&gt;The Cleanup&lt;a class="headerlink" href="#the-cleanup_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Both the transformers were not that bad, as they are contained, but the consitency checks
were full of cases for handling the newline character in the following Text token that
had to be undone.  In all, 59 scenario tests were changed, and it took a lot of debugging
to remove the “fixes” that were previously added.   As a lot of those “fixes” only
impacted two or three scenario tests, I just had to work through each of those issues
and the ones that followed.&lt;/p&gt;
&lt;p&gt;But, as I have said with the previous two changes, those changes just looked right.
It just made sense to have the newline character for the Hard Line Break token with
the token itself.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I previously could not see my way to get here, I was now at the point where I had
zero Priority 1 items in the issues list.  I had to make some hard choices of what I needed
to have in the project for an initial release versus what I wanted to have for that
release.  But I made those choices and followed through to get to this point.  No
more Priority 1 items!&lt;/p&gt;
&lt;p&gt;And then that passed… but in a good way.  There were a couple of new items that
I knew I needed to add into that section, and I added them. Nothing major, but the
section had items again.  But knowing that I emptied that section was a big confidence
booster.  And knowing that I only added three small issues also helped:
a task to write documentation, to check that the existing rules were still valid,
and setting configuration properties from the command line.  These were tasks that I
knew would be achievable in a short amount of time.&lt;/p&gt;
&lt;p&gt;The big thing for me was to start getting the project out there with a solid initial
set of features, fixing up things in a following release as I worked on resolving issues.
From there I could start to get feedback, which would help me figure out how to
prioritize things going forward.&lt;/p&gt;
&lt;p&gt;It was just a good feeling knowing that I was getting close to a solid initial release
with an increased sense of confidence in the project.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I was sure that I was going to find a couple more things to add to the Priority
1 section of the issues list, it was currently empty.  As such, I wanted to devote the
next week to getting a first pass at the Python library setup code underway.&lt;/p&gt;
&lt;p&gt;Almost there!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:whenNot"&gt;
&lt;p&gt;The line number and column number are only present if the &lt;code&gt;EndMarkdownToken&lt;/code&gt; instance consumes one of more characters to create the &lt;code&gt;EndMarkdownToken&lt;/code&gt;.  For example, an Emphasis element requires matching opening and closing characters to delineate the emphasized text, so that instance of the &lt;code&gt;EndMarkdownToken&lt;/code&gt; shows the line number and column number.  Conversely, Indented Code Blocks are terminated when a new line of information does not begin with the required indentation, so that instance of the &lt;code&gt;EndMarkdownToken&lt;/code&gt; does not show either the line number nor the column number. &lt;a class="footnote-backref" href="#fnref:whenNot" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Command Lines</title><link href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/" rel="alternate"></link><published>2021-03-29T00:00:00-07:00</published><updated>2021-03-29T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-03-29:/2021/03/29/markdown-linter-road-to-initial-release-command-lines/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/"&gt;last article&lt;/a&gt;, I talked about
some of my requirements for configuration and how I applied those requirements to the
PyMarkdown project.  In this article, I talk about how I integrated that configuration
object more readily into the PyMarkdown project, revamping the command line interface to
match that …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/"&gt;last article&lt;/a&gt;, I talked about
some of my requirements for configuration and how I applied those requirements to the
PyMarkdown project.  In this article, I talk about how I integrated that configuration
object more readily into the PyMarkdown project, revamping the command line interface to
match that newly upgraded configuration object.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It might seem to others that I left the command line to last because I forget about it.
Nothing could be further from the truth.  For any kind of non-graphical
utility, the command line is the central hub from which the application gets executed in
various ways and forms.  Therefore, if the utility does not have the right command line
interface, it can seriously impact the usability of that application.  It is for that
exact reason that I usually add a “placeholder” command line interface during my
development phase, only adding the real interface when I have a solid idea of which
features have made it into the final version of the project.&lt;/p&gt;
&lt;p&gt;While that placeholder provides the access to the features that the project needs, it
often does them in a haphazard way.  Now, with everything else dropping into place, it was
time for
me to finalize how configuration was being applied to the project and to start thinking
seriously about what command line interface I wanted the project to have.  After all,
I am getting really close to having met my own requirements for an initial beta release!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/486c1cc77f828b710b2d15bb469e37a5dc032d6f"&gt;11 Mar 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/782433db8cd89f8be8b47825786a8a7552a768ff"&gt;25 Mar 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="wiring-up-the-new-properties-class-to-the-project"&gt;Wiring Up The New Properties Class To The Project&lt;a class="headerlink" href="#wiring-up-the-new-properties-class-to-the-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After the work detailed in my last article, the project now has a file-based configuration
via the &lt;code&gt;ApplicationProperties&lt;/code&gt; class that can handle the more complex needs
of the project.  While I did refer to the process of applying ordering to the different
sources of configuration in the section on
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/#ordering"&gt;Ordering&lt;/a&gt;,
I had not wired it up at that point.  I had added the code mentioned in that section as
a simple test of whether the process worked, but I had not yet added fully functional code
that followed that process to the project.  It was time to do that.&lt;/p&gt;
&lt;h3 id="logging"&gt;Logging&lt;a class="headerlink" href="#logging" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The obvious first choice for configuration to add to the project was logging.  It was also
the trickiest in a certain sense.  From the point at which the configuration was properly
initialized and the determination of the log file and log level is achieved,
everything works as everyone expects.
However, there is a slight amount of time between the start of the application and that
point where things are in a grey zone.  During that time, the loading of the configuration
file itself or determining the logging properties can log information themselves that may
be of use when debugging a scenario.  With those systems dependent on configuration that
was not yet initialized when I needed to debug those systems, I was left to hardwire
logging workarounds directly into the code. I wanted a better way to handle those debug
scenarios.&lt;/p&gt;
&lt;p&gt;Looking at what I had available to use, I decided to imply extra context for the command
line’s &lt;code&gt;--stack-trace&lt;/code&gt; flag.  Normally, my utilities use this flag to enable a mode
where an exception that stops the application displays the full stack trace of the
exception.  As
this flag defaults to disabled, the user just gets a simple message indicating
what the error is.  Most of the time, users do not care about where in the application
something broke down, they just want it to work.  If it is not working, they want to know
why and if they can fix it themselves.
However, when I look for root causes and I need to debug those issues, having a full
stack trace of how that error was generated is always helpful.  Following that logic, I
determined that the only time a user might need to debug the loading of the configuration
file is if they were debugging one of those scenarios that the &lt;code&gt;--stack-trace&lt;/code&gt; flag was
meant for.&lt;/p&gt;
&lt;p&gt;As such, I added some code at the front of the &lt;code&gt;main&lt;/code&gt; function to handle the setup for the
logging system, using the &lt;code&gt;--stack-trace&lt;/code&gt; flag in a useful manner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;base_logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;base_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ApplicationPropertiesJsonLoader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_and_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_error&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_log_level&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log_level_to_enact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available_log_maps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;effective_log_level&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To enable debug logging before the log level and log file are setup properly, the log
level is set to &lt;code&gt;DEBUG&lt;/code&gt; if the &lt;code&gt;--stack-trace&lt;/code&gt; is present and &lt;code&gt;WARNING&lt;/code&gt; otherwise.  Then,
the configuration file is loaded and the log level to use is calculated with the
appropriate final log level.  However, the important part of this is that I now have a
simple switch that allows me to debug the configuration initialization without resorting
to rewriting code.  That is a bonus I like!&lt;/p&gt;
&lt;p&gt;With that code in place, I removed the &lt;code&gt;__load_configuration_and_apply_to_plugins&lt;/code&gt; function
and the &lt;code&gt;load_json_configuration&lt;/code&gt; function. I replaced those functions with the new
&lt;code&gt;__apply_configuration_to_plugins&lt;/code&gt; function that performed most of the same functions.
The big change here was that instead of being passed a simple dictionary object, the
&lt;code&gt;apply_configuration&lt;/code&gt; function of the &lt;code&gt;PluginManager&lt;/code&gt; class was now being passed an
instance of the &lt;code&gt;ApplicationProperties&lt;/code&gt; class.  It was time to wire that up as well.&lt;/p&gt;
&lt;h3 id="plugin-manager"&gt;Plugin Manager&lt;a class="headerlink" href="#plugin-manager" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting with the &lt;code&gt;FoundPlugin&lt;/code&gt; class, I decided to make all those properties read-only by
making the fields private and exposing those fields using properties.  At the same time,
I renamed arguments for the constructor from &lt;code&gt;enable_rules&lt;/code&gt; and &lt;code&gt;disable_rules&lt;/code&gt; to
&lt;code&gt;enable_rules_from_command_line&lt;/code&gt; and &lt;code&gt;disable_rules_from_command_line&lt;/code&gt;.  While the old
names were okay, I wanted to make sure the source of their values were clearer.  I also
cleaned up the registration of the plugins to ensure that things were consistent. I
added the following regular expressions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;__id_regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"^[a-z]{2,3}[0-9]{3,3}$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;__name_regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to make the id field two or three lower case letters followed by three numbers and
limit the characters for the name field.  I figured that since I was there, I might as
well leave the code better than when I got there.&lt;/p&gt;
&lt;h3 id="changing-the-plugins"&gt;Changing The Plugins&lt;a class="headerlink" href="#changing-the-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After that cleanup, I proceeded to make the necessary changes to accompany
the changes made in the &lt;code&gt;main&lt;/code&gt; function.  As the &lt;code&gt;PluginManager&lt;/code&gt; instance is just a
container used to provide access to the various registered plugins, the instance itself
has no need for configuration.  This kept things simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_key_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_identifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_section_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{PluginManager.__plugin_prefix}{properties.separator}{next_key_name}{properties.separator}"&lt;/span&gt;
        &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ApplicationPropertiesFacade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plugin_section_title&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going through the list of identifiers for the plugin, the &lt;code&gt;PluginManager&lt;/code&gt; instance creates
a test instance of an &lt;code&gt;ApplicationPropertiesFacade&lt;/code&gt; object, initializing it with the
property string leading up to that point.  For the &lt;code&gt;md002&lt;/code&gt; plugin, if the id field is
used, the section title is &lt;code&gt;plugins.md002.&lt;/code&gt;, with similar titles for each of the
comma-separated values in the name field, &lt;code&gt;plugins.first-heading-h1.&lt;/code&gt; and
&lt;code&gt;plugins.first-header-h1.&lt;/code&gt;. Once created, if that test facade instance
reports that it has any properties, it is considered to be the best candidate, and any
other configuration for that plugin by its other names is ignored.&lt;sup id="fnref:yesIKnow"&gt;&lt;a class="footnote-ref" href="#fn:yesIKnow"&gt;1&lt;/a&gt;&lt;/sup&gt;  That best
candidate is then passed in to the plugin’s &lt;code&gt;set_configuration_map&lt;/code&gt; function, where it is
used by the &lt;code&gt;initialize_from_config&lt;/code&gt; function to set the actual configuration for that
plugin.&lt;/p&gt;
&lt;h3 id="the-fallout-from-those-changes"&gt;The Fallout From Those Changes&lt;a class="headerlink" href="#the-fallout-from-those-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a new type of object being passed for configuration, the plugins themselves required
other changes to work properly.
The first change that this required was changing every plugin to utilize the
&lt;code&gt;ApplicationPropertiesFacade&lt;/code&gt; instance that was now being passed in as an argument instead
of the old dictionary instance.  Using the changes for rule &lt;code&gt;md002&lt;/code&gt; as an example, the code
in the &lt;code&gt;initialize_from_config&lt;/code&gt; function changed from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_configuration_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_integer_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second change that happened was an appropriate change in test data.  Prior to this
change, the test configuration for the &lt;code&gt;md002&lt;/code&gt; plugin was usually&lt;sup id="fnref:usually"&gt;&lt;a class="footnote-ref" href="#fn:usually"&gt;2&lt;/a&gt;&lt;/sup&gt; presented
in the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"MD002"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To accommodate the addition of the &lt;code&gt;plugins&lt;/code&gt; namespace, each test configuration provided in
the &lt;code&gt;supplied_configuration&lt;/code&gt; variable needed to be changed to add that namespace, as
follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"md002"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With both changes in place, the only thing left was to hook up was the enabling
and disabling of plugins from the command line.  This change replaced the contents of
the &lt;code&gt;__determine_if_plugin_enabled&lt;/code&gt; function with the slightly more complicated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_identifier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plugin_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_identifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_identifier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;command_line_disabled_rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_identifier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plugin_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_identifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_identifier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;command_line_enabled_rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the entrance into the &lt;code&gt;__determine_if_plugin_enabled&lt;/code&gt; function, the &lt;code&gt;plugin_enabled&lt;/code&gt;
argument is already
set to its default value.  As such, this function only needs to determine if there is an
override to use and to apply that override.  This function was changed to treat both the
id field
and each comma-separated value of the name field as equal in terms of being identifiers.
While this initially only
applied to the name of the configuration section in the JSON file, it made sense to use it
here as well.  In this case, if any of those identifiers are found in the
&lt;code&gt;command_line_disabled_rules&lt;/code&gt; set, the plugin is disabled.  If no matches are found in
the disabled set, the same process is repeated for the &lt;code&gt;command_line_enabled_rules&lt;/code&gt; set.
Only if a matching value is found in one of those sets is the &lt;code&gt;plugin_enabled&lt;/code&gt; variable
overridden with the new value.&lt;/p&gt;
&lt;p&gt;To me, this just made sense.  If a user prefers to disable a rule using its id, they can
do that.  If a user prefers to enable a rule using one of its names, they can also do that.
That flexibility appealed to me, and I hope it appeals to users.&lt;/p&gt;
&lt;h3 id="testing"&gt;Testing&lt;a class="headerlink" href="#testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hopefully, any readers of my website should know that I use test driven as my main process
of writing quality code.  Given that process, I added the new tests as I went and before
adding the functionality required to complete those tests.
While it was a bit more difficult to do with all these changes going on, it was pivotal
to the way in which I work.  And it was because of that process that I remembered an
imbalance that I had put off until somewhere near this point in the project.  I had done a
lot of work on configuration files, but almost none on command line configuration.&lt;/p&gt;
&lt;h2 id="what-about-the-command-line"&gt;What About The Command Line?&lt;a class="headerlink" href="#what-about-the-command-line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the &lt;code&gt;ApplicationProperties&lt;/code&gt; mechanism wired into the project, it was time to tackle
the other part of that mechanism: the command line.  Up to this point, I had a command
line interface to the project, but it was a command line that was put in place by default.
I never sat down and thought about what style of command line interface I wanted
for the project, and really thought through it.  It was time to do that.&lt;/p&gt;
&lt;h3 id="which-way-to-go"&gt;Which Way To Go?&lt;a class="headerlink" href="#which-way-to-go" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using various utilities on my system, I found a handful of different styles of interacting
with the user on the command line.  But the one that really stuck with me is what I refer
to as the “Git” style of command line organization.  Similar to my discussion in my last
article on
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/#ordering"&gt;complex configuration&lt;/a&gt;,
this style of command line organization is complex.  This style is built of building
blocks of commands and options, allowing more complex command lines to be constructed.&lt;/p&gt;
&lt;p&gt;For example, take this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="c1"&gt;--long setup.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main part of the command is the &lt;code&gt;git&lt;/code&gt; at the start of the line.  The &lt;code&gt;-c ab=cd&lt;/code&gt; part
of that line is a modifier to that &lt;code&gt;git&lt;/code&gt; command.  Following that, the &lt;code&gt;status&lt;/code&gt; part of
that line specifies the status subcommand, which in turn has its own modifier &lt;code&gt;--long&lt;/code&gt;
to alter how that status subcommand is presented.  Finally, the text &lt;code&gt;setup.py&lt;/code&gt; is
another modifier to the subcommand, asking that only information for the file &lt;code&gt;setup.py&lt;/code&gt;
be provided.&lt;/p&gt;
&lt;p&gt;To me, this makes very good sense for the PyMarkdown project and the command line interface
that I want for it.  While the main “scanning” workflow will be the most used workflow,
there are other workflows that I want to expose to allow users to find out information
about the results of the scan.  The one that came immediately to mind was being able to
show the user more information about the installed plugins.  As such, a simple version of
the command line interface would not work.  I needed a command line interface that
supported the “scanning” workflow as well as the “show information about plugins” workflow.&lt;/p&gt;
&lt;p&gt;To be clear, this type of a command line interface is not required for every project
that I do, but it was required for this one.  This interface was complex enough to have
to support multiple workflows, which in turn made this command line processing complex,
just like the configuration.&lt;/p&gt;
&lt;h3 id="wiring-up-subcommands"&gt;Wiring Up Subcommands&lt;a class="headerlink" href="#wiring-up-subcommands" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once I had that figured out, it was time to go to work.  When I took my initial look
at the &lt;code&gt;__parse_arguments&lt;/code&gt; function, I was afraid that I was going to have to rewrite
the entire function. However, on a closer look, I discovered that it was going to be
more of a reorganization than a rewrite.  Except for the &lt;code&gt;--version&lt;/code&gt; option
and the &lt;code&gt;--list-files&lt;/code&gt; options, the options were all still valid for the application
itself.  It was once those options were added to the &lt;code&gt;argparse&lt;/code&gt; object that things
changed.&lt;/p&gt;
&lt;p&gt;To handle this kind of scenario, the &lt;code&gt;argparse&lt;/code&gt; object handles subcommands by using
subparsers.  So, to add a subcommand to handle the &lt;code&gt;scan&lt;/code&gt; workflow, I used the
following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;subparsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subparsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"primary_subparser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subparsers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"scan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"scan the Markdown files in the specified paths"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once I had that subparser created, I added the rest of the arguments that were specific to
that subcommand:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"-l"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"--list-files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"list_files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"list the markdown files found and exit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"One or more paths to scan for eligible files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"one or more paths to scan for eligible Markdown files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this subcommand, the &lt;code&gt;--list-files&lt;/code&gt; option that was removed from the base &lt;code&gt;argparse&lt;/code&gt;
parser was placed under the &lt;code&gt;scan&lt;/code&gt; subparser along with the &lt;code&gt;paths&lt;/code&gt; variable to hold
the paths of Markdown files to scan.  The &lt;code&gt;plugins&lt;/code&gt; subcommand was added in the
same manner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subparsers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"plugin commands"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"-p"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"--list-plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"list_plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"list the available plugins and exit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"one or more paths to scan for eligible Markdown files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, to implement the &lt;code&gt;--version&lt;/code&gt; option (which was really a subcommand disguised
as an option in the previous version of the command line interface), a subcommand was
added for it as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;subparsers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"version of the application"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With all those options in place, I executed the application from the command line and
noticed that I needed to do a bit more work myself now that I was using subcommands.
I needed to handle the case where no subcommands were present as well
as handling the &lt;code&gt;version&lt;/code&gt; subcommand.  After a bit of experimentation, I came up with the
following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;parse_arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primary_subparser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;parse_arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frodo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{self.__version_number}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parse_arguments&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Back in the &lt;code&gt;main&lt;/code&gt; function, implementing the &lt;code&gt;scan&lt;/code&gt; and &lt;code&gt;plugins&lt;/code&gt; subcommands were easy.
As all other subcommands were taken care of, so adding the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primary_subparser&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'plugins'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_plugins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plugins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_argparse_subparser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;allowed me to redirect the &lt;code&gt;plugins&lt;/code&gt; workflow to the &lt;code&gt;PluginManager&lt;/code&gt; class.  If the
program’s flow was not redirected at that point, the &lt;code&gt;scan&lt;/code&gt; workflow would execute by
default.&lt;/p&gt;
&lt;p&gt;With the command line now organized in a more orderly fashion, it was time to clean up
the use of those workflows.&lt;/p&gt;
&lt;h3 id="revisiting-logging"&gt;Revisiting Logging&lt;a class="headerlink" href="#revisiting-logging" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/#ordering"&gt;Ordering section&lt;/a&gt;
of my last article, I provided an example of how ordering was important when considering
how to apply configuration to a project.  Specifically, that code snippet was from the
following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__initialize_logging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;new_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;effective_log_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_file&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"log.file"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;new_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"log.level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level_type&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_log_level&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To keep things neat, I moved any of the logging related initialization code into one of
two functions, &lt;code&gt;__set_initial_state&lt;/code&gt; and &lt;code&gt;__initialize_logging&lt;/code&gt;.  The &lt;code&gt;__set_initial_state&lt;/code&gt;
function simply took the initial logger settings and loading of the configuration file
data and placed it under a much simpler function to read.  The &lt;code&gt;__initialize_logging&lt;/code&gt;
function was where all the interesting log initialization really happened, working out
what the actual values to be used were.&lt;/p&gt;
&lt;p&gt;This new function followed the process that I had outlined in my last article.  For both
the log level and the log file settings, there are command line and configuration file
settings for both settings.  In both cases, the command line is processed first, followed
by the configuration property, followed by any system default.&lt;/p&gt;
&lt;p&gt;Looking at these values and their sources after I completed them, they just looked right.
More than that, they looked usable.  If no configuration was provided, there were
defaults.  If a configuration was provided, any supplied values would be taken from
there, if they were present.&lt;/p&gt;
&lt;h3 id="fixing-an-old-issue"&gt;Fixing An Old Issue&lt;a class="headerlink" href="#fixing-an-old-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Back in the section titled
&lt;a href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/#changing-the-plugins"&gt;Changing The Plugins&lt;/a&gt;,
I presented something that was just a little off.  I presented it that way because at the
time that I wrote that code, it looked right and was passing every existing test.  It was
only at this point, when I was more thoroughly testing the &lt;code&gt;PluginManager&lt;/code&gt; configuration
that I noticed that the first &lt;code&gt;ApplicationPropertiesFacade&lt;/code&gt; tried was always being
selected.&lt;/p&gt;
&lt;p&gt;Yeah, I needed to fix that.  The first thing I did was to thin out that for loop and
move most of that code into a new &lt;code&gt;__find_configuration_for_plugin&lt;/code&gt; function.  That
changed the relevant code to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enabled_plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__find_configuration_for_plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;always_return_facade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__find_configuration_for_plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;always_return_facade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;first_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_key_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_identifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_section_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{PluginManager.__plugin_prefix}{properties.separator}{next_key_name}{properties.separator}"&lt;/span&gt;
        &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ApplicationPropertiesFacade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plugin_section_title&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;first_facade&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;first_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;property_names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;always_return_facade&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_facade&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, two small changes were required to fix this function.  The first change was
to fix the problem of the first facade always being selected.  This was accomplished
by adding the &lt;code&gt;property_names&lt;/code&gt; function to the facade and checking to see if at least
one property was found.  If one property was found, then the initial intention of the
search was satisfied, and a configuration entry was found.  This is what I had intended
to do with the initial implementation, so it felt good to correct this issue.&lt;/p&gt;
&lt;p&gt;But that caused another issue to manifest, one that was never an issue before the first
issue was fixed: what if no configuration values were ever found? As there are cases
where the application needs to know nothing was found and cases where it just wants
some default behavior, I added the &lt;code&gt;always_return_facade&lt;/code&gt; argument.  With this argument
set to &lt;code&gt;True&lt;/code&gt;, the first facade is returned instead of a &lt;code&gt;None&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;With that part of the configuration fixed, it was now time to add the &lt;code&gt;plugin&lt;/code&gt; workflow.&lt;/p&gt;
&lt;h3 id="boring-support-for-plugins"&gt;Boring Support For Plugins&lt;a class="headerlink" href="#boring-support-for-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the main reasons that I added a complex command line interface was to support
multiple workflows.  As I felt that the &lt;code&gt;scan&lt;/code&gt; workflow was now developed enough to
test, it was time to implement the &lt;code&gt;plugins&lt;/code&gt; workflow.  In my design for this workflow,
I wanted to support a listing of all plugins and summary information, as well as more
focused information for a specific plugin.  Much like how I added the &lt;code&gt;scan&lt;/code&gt; and
&lt;code&gt;plugins&lt;/code&gt; subparsers to the main &lt;code&gt;argparse&lt;/code&gt; instance, I added the &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;info&lt;/code&gt;
subparsers to the &lt;code&gt;plugins&lt;/code&gt; subparser.&lt;/p&gt;
&lt;p&gt;From there, it was just a matter of handing off control at the right spot to each
of those processors, as such:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_argparse_subparser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Handle the parsing for this subparser.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;subparser_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PluginManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__root_subparser_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;subparser_value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"list"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_argparse_subparser_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;subparser_value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"info"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_argparse_subparser_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;PluginManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__argparse_subparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;return_code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So why did I start the title for this section with the word “Boring”?  It is because
once I added subparsers on the main &lt;code&gt;argparse&lt;/code&gt; instance, this was just copying that
pattern and pasting it to the &lt;code&gt;plugins&lt;/code&gt; subparser.  The &lt;code&gt;list&lt;/code&gt; subcommand was a simple loop
through
all available plugins and adding values to a string to display.  The &lt;code&gt;info&lt;/code&gt; command
was just locating a given plugin and displaying the information for it.  After the
rest of things that have been added to this project, that was quite boring.  Necessary,
but boring.&lt;/p&gt;
&lt;h3 id="almost-boring"&gt;Almost Boring&lt;a class="headerlink" href="#almost-boring" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Two exceptions did stand out though.  The first one was the use of the &lt;code&gt;Columnar&lt;/code&gt;
library for output.  This library is very effective in determining how much screen
real estate the application has, and sizing columns to fit that screen size. That
was very useful, instead of having to create that functionality myself.&lt;/p&gt;
&lt;p&gt;The second exception was to mimic the results of the &lt;code&gt;glob&lt;/code&gt; library to work on
in-memory strings.  Given a command line of &lt;code&gt;pymarkdown plugins list plugin-id&lt;/code&gt;, it
should be obvious that only the plugin with the id or name &lt;code&gt;plugin-id&lt;/code&gt; should be
listed.  But what about the command line &lt;code&gt;pymarkdown plugins list md??9&lt;/code&gt;?  If the
strings were filenames, then the plugins that started with &lt;code&gt;md&lt;/code&gt;, contained two
more arbitrary characters, and finally the digit &lt;code&gt;9&lt;/code&gt; would match.  Why could I not
do that with plugins and their identifiers?&lt;/p&gt;
&lt;p&gt;Thankfully, due to my earlier work to reduce the allowable text for plugin ids and plugin
names to a smaller subset of values, this effort was made easier.  As I did not
have to worry about the &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; characters appearing natively in the strings that
I was looking at, the regular expression to satisfy my required glob functionality was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;list_re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"^"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;".*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"$"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For those readers not familiar with regular expressions, the &lt;code&gt;^&lt;/code&gt; at the start of the
expression and the &lt;code&gt;$&lt;/code&gt; at the end of the expression are anchors.  Together these specify
that the expression inside of those characters must match the entire string, not just
being found somewhere inside of the string.  For the rest of the expression, I used the
&lt;code&gt;.&lt;/code&gt; character in two forms.  As the &lt;code&gt;.&lt;/code&gt; character represents any single character in
the expression, it was a perfect match for the &lt;code&gt;?&lt;/code&gt; glob character.  As an extension of
that, the &lt;code&gt;*&lt;/code&gt; glob character represents any number of arbitrary characters.  To match
that in the expression, the sequence &lt;code&gt;.*&lt;/code&gt; matches zero or more instances of any character.&lt;/p&gt;
&lt;p&gt;After satisfying all the scenario tests I had written, and adjusting output to match
the columnar output, the &lt;code&gt;plugins&lt;/code&gt; subcommand tests were all passing.  Things were good
with those scenario tests.  I now had to expand my scope to all the scenario tests in
the project.&lt;/p&gt;
&lt;h3 id="altered-tests"&gt;Altered Tests&lt;a class="headerlink" href="#altered-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When the change was made to the command line, I expected most of the existing scenario
tests that deal with the command line to fail, and I was not disappointed.  For most of
the existing tests, I just needed to add the &lt;code&gt;scan&lt;/code&gt; keyword to the right position in the
arguments list, as that was the workflow that already had tests before this point.  I
stopped counting those changes after I passed the count of 20.&lt;/p&gt;
&lt;p&gt;But it was a very useful task.  As I progressed through the tests, I was able to see
how specifying the workflow or subcommand was enhancing the tests. It just gave each
test a bit more context that I felt was missing before.  I was able to find a couple
of small issues that I would have otherwise missed because of the organization.&lt;/p&gt;
&lt;p&gt;To be blunt, between the command line changes and tests to cover them, it just felt
like the project was that much more complete.&lt;/p&gt;
&lt;h3 id="lather-rinse-repeat"&gt;Lather, Rinse, Repeat&lt;a class="headerlink" href="#lather-rinse-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After all that work, there were little things there that I needed to work on.  I
disliked how some of the code was organized, so I went back and tried to organize the code
more thoughtfully along usage lines.  I poured through the coverage report and looked
for missing coverage, adding scenario tests to provide any coverage for missed areas.
Just general cleanup stuff.&lt;/p&gt;
&lt;h2 id="adding-version-information-for-plugins"&gt;Adding Version Information For Plugins&lt;a class="headerlink" href="#adding-version-information-for-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that work in place, it was time to see if I was able to add something useful to the
project’s configuration without many issues.  The something I had in mind was better
version information for the plugins.  From a plugin point of view, I figured it would be
useful to know what specific version was being attributed to that specific plugin.  From
a plugin manager point of view, it would also be useful to be able to version the actual
interface itself.  Both would be useful going forward, and useful to relate to
the user of the application.&lt;/p&gt;
&lt;p&gt;Changing the &lt;code&gt;FoundPlugin&lt;/code&gt; class to accept these two new version fields was easy, adding
private
fields and property functions to access them.  From there, I added those two parameters
to each of the existing plugins, setting active plugins to &lt;code&gt;0.5.0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; and setting
inactive or “templated” plugins to &lt;code&gt;0.0.0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;.  After adding some support in the
&lt;code&gt;__register_individual_plugin&lt;/code&gt; function to ensure that both versions were in acceptable
formats, I was ready to make the big change to expose that information.&lt;/p&gt;
&lt;p&gt;Okay, maybe big change is a bit misleading.  In the &lt;code&gt;__handle_argparse_subparser_list&lt;/code&gt;
function, I changed the setting of the &lt;code&gt;display_row&lt;/code&gt; variable to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;display_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;next_plugin_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;", "&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_names&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_enabled_by_default&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_enabled_now&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the setting of the &lt;code&gt;headers&lt;/code&gt; variable was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"names"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"enabled (default)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"enabled (current)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These were not big changes, but that was the point.  This was a relatively small change
and if things were organized properly, it should have required a relatively small number
of changes.  If that were not the case, I would have been worried.&lt;/p&gt;
&lt;p&gt;And I was happy, as I had a good workflow to get output on the plugins like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ID     NAMES                                ENABLED (DEFAULT)  ENABLED (CURRENT)  VERSION

  md001  heading-increment, header-increment  True               True               0.5.0
  md002  first-heading-h1, first-header-h1    False              False              0.5.0
  md003  heading-style, header-style          True               True               0.5.0
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While my efforts to have a completed configuration system with command line support is not
fully implemented, this works moves the command line system a lot further along to being
the beacon of the PyMarkdown project.  I realize that I still need a generic way of
specifying override values for those values specified in the configuration file, but
this is still a big step forward.  Now that I have the configuration and command line
systems in place, I can spend a bit of reflective time looking for pieces of those
systems that I missed while working on other issues.&lt;/p&gt;
&lt;p&gt;I really am feeling that the project is coming together.  While it has never felt like
a hodgepodge of functionality, I always had a feeling that it was just not quite ready to
show to the public.  With each of these little subsystems that I am focusing on, that
feeling is going away and is being replaced with a feeling of confidence that it is
ready.  In my books, that is a really good feeling to have.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After nicely wrapping up configuration and the command line, there was only
one thing left to do before I seriously thought about a beta release.  That was to
resolve the remaining items in the Priority 1 section of the issues list.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:yesIKnow"&gt;
&lt;p&gt;Yes, I know that is not what this code snippet actually does.  I found that out by adding tests later in on in the process.  I fixed this issue later, in the section named &lt;a href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/#fixing-an-old-issue"&gt;Fixing An Old Issue&lt;/a&gt;. &lt;a class="footnote-backref" href="#fnref:yesIKnow" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:usually"&gt;
&lt;p&gt;Unless I was purposefully creating bad data to test failure cases, that is the form that I passed into the plugins for configuration. &lt;a class="footnote-backref" href="#fnref:usually" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Configuration</title><link href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/" rel="alternate"></link><published>2021-03-22T00:00:00-07:00</published><updated>2021-03-22T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-03-22:/2021/03/22/markdown-linter-road-to-initial-release-configuration/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/15/markdown-linter-road-to-initial-release-front-matter/"&gt;last article&lt;/a&gt;, I talked about
my own requirements for a front-matter processor and how I added it to the project.  In
this article, I talk about my own requirements for configuration and how I applied them
to this project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes I encounter a part of a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/15/markdown-linter-road-to-initial-release-front-matter/"&gt;last article&lt;/a&gt;, I talked about
my own requirements for a front-matter processor and how I added it to the project.  In
this article, I talk about my own requirements for configuration and how I applied them
to this project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes I encounter a part of a programming language that I do not like for one
reason or another.  For whatever reason, the concept of having a good entry-level
configuration library for each given language seems to be not high on anyone’s
priority list. To be clear, I know that there are libraries out there for each language
that do some form of property reading and access, but the support is always basic
at best. If one is provided, it either seems to be too simple to accomplish the task
that is normally required of it, or it seems that it was added as an afterthought.&lt;/p&gt;
&lt;p&gt;Therefore, it was a bit disheartening to find out Python was also in this category.  When
it comes
to built-in support for logging, Python is there with the &lt;code&gt;logging&lt;/code&gt; library and its good
set of features.  When it comes to command line parsing, Python is there with the
&lt;code&gt;argparse&lt;/code&gt; library and its various helper functions.  When it comes to configuration file
parsing, Python is there with… &lt;code&gt;configparser&lt;/code&gt;?  Honestly, I was not impressed.  It
only supports the &lt;code&gt;ini&lt;/code&gt; file format and does not seem to have much in the way of useful
support for helper functions that I could find.&lt;/p&gt;
&lt;p&gt;So, for this project, I now need to figure out what configuration I need, and how to
properly store it.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commit between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/8a30dee0c0105898258e6074d5058556c08410ca"&gt;06 Mar 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/486c1cc77f828b710b2d15bb469e37a5dc032d6f"&gt;11 Mar 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-is-configuration"&gt;What Is Configuration?&lt;a class="headerlink" href="#what-is-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At face value, configuration is anything that provides information that guides the
execution of the project.  While input information is one class of configuration,
a discussion of that class of configuration is a whole other article unto itself.
As such, I am going to stick to the
two types of configuration that most people think about when they hear configuration:
dynamic configuration and static configuration.&lt;/p&gt;
&lt;p&gt;To be honest, I usually take the phrases “data stores” and “dynamic configuration” to mean
the same thing.  This type of configuration is expected to change its configuration
information during the execution of the project.  More often than not, the project itself
is the entity that is changing that information.  This dynamic information can be as
simple as a file that holds the time the project last scanned another data store to a
complete map of the data and relationships for the project. The key point here is that
this information is expected to change often.&lt;/p&gt;
&lt;p&gt;The natural complement to dynamic configuration is static configuration.  When most
software developer hear “configuration”, they most often think of things such as
configuration files, environment variables, and command line data.  These items are
all classified as static configuration as they generally do not change once the
execution of the program has started.  Showing a bit of synergy with each other,
if a data store is used to hold information, there is usually one or more static properties
that provide any needed configuration to gain access to that data store.&lt;/p&gt;
&lt;p&gt;So, for this article, I am focusing on static configuration and how I added better
support for static configuration to the PyMarkdown project.&lt;/p&gt;
&lt;h2 id="configuration-requirements-are-important"&gt;Configuration Requirements Are Important&lt;a class="headerlink" href="#configuration-requirements-are-important" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Up to this point, the project and its tests have been able to get by without any real hard
requirements for
configuration with respect to this project.  I have a loose set of command line arguments
and a simple map used to configure the plugins, but that is it.
Taking a look at my
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/#what-are-the-requirements"&gt;initial list of requirements&lt;/a&gt;,
there is nothing specifically in there about configuration, just phrases here and there
that somewhat speak of configuration. Phrases like “plans to later add other flavors of
parser” and “extending the base linting rules” that kind of infer that configuration will
be needed, but do not explicitly state its need.&lt;/p&gt;
&lt;p&gt;From a design point of view, this was not a failure, but a planned action.  In many
previous projects, I implemented a simple configuration system early in the
project, only to find out that it missed a couple of significant configuration scenarios.
In this case, “missed” means that there was not a straightforward way of representing some
aspect of the configuration in a way that made the most sense.  Given that history, I
decided to go with a minimal configuration approach until I could see what kind of
configuration the project was going to need.&lt;/p&gt;
&lt;p&gt;I was glad I took that approach, as it allowed me to properly classify the configuration
into the right category.  For me that classification for configuration deals primarily
with the requirements in 5 categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic property support&lt;/li&gt;
&lt;li&gt;overriding from the command line or environment&lt;/li&gt;
&lt;li&gt;validation&lt;/li&gt;
&lt;li&gt;grouping of values&lt;/li&gt;
&lt;li&gt;hierarchy and nesting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depending on how many and which of these requirements are needed defines the type of
configuration that is required.&lt;/p&gt;
&lt;p&gt;While there may be more “official” types of static configuration, the ones that I know
about fall into three main types.&lt;/p&gt;
&lt;h3 id="configuration-type-1-simple"&gt;Configuration Type 1: Simple&lt;a class="headerlink" href="#configuration-type-1-simple" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When people talk about configuration, most often they are talking about simple
configuration.  This is primarily configuration that can easily be put into a file or
passed around in variables, such as environment variables.  From a file-based point of
view, this type of configuration usually looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;host=localhost
port=8080
username=admin
password=admin@123
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking for example, a simple Google search turned up
&lt;a href="https://www.journaldev.com/39861/python-read-properties-file"&gt;this article&lt;/a&gt;
on how to handle properties files in Python using the &lt;code&gt;jproperties&lt;/code&gt; library.  This type
is called simple because it is simple, usually implemented with no bells and whistles.  If
the application needs to fetch configuration for the &lt;code&gt;username&lt;/code&gt; property, the application
needs to explicitly specify the full name of the property as it appears in the
configuration file. The result is a string that the application must then do any further
changes or validation to before the application can use it.&lt;/p&gt;
&lt;p&gt;There are pros and cons to this approach.  The pros are easily this type’s simplicity and
the
ability to easily add a layer on top of this configuration that allows overriding these
values from the command line.  Unfortunately, the cons are almost the same,
just for other reasons.  Because this approach is simple, if the application requires any
extra organization or validation for the configuration, the application needs to handle
that code.  As mentioned before, another big con is that with this type of configuration,
everything is a string.  Any interpretation of the data as anything other than a string is
left up to the developer.&lt;/p&gt;
&lt;p&gt;Checking in against the list of five requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic property support?  Done.&lt;/li&gt;
&lt;li&gt;overriding from the command line or environment?  Extra code required.&lt;/li&gt;
&lt;li&gt;validation?  Extra code required.&lt;/li&gt;
&lt;li&gt;grouping of values? Extra code required.&lt;/li&gt;
&lt;li&gt;hierarchy and nesting? Extra code required.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="configuration-type-2-grouped"&gt;Configuration Type 2: Grouped&lt;a class="headerlink" href="#configuration-type-2-grouped" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next step up from the simple type is a grouped type.  While it is a step up from the
simple type, it does not add much.  From a file-based point of view, this type of
configuration usually either looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="mi"&gt;@123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Db]&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;localhost&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8080&lt;/span&gt;
&lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;admin&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;admin@123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the name of this type suggests, the main thing that this type adds is the ability to
group a collection of configuration items together into a group.  While this may not seem
like a big step forward, it is this type of configuration that I have found to be of most
use in approximately 95% of the projects that I have worked on.&lt;/p&gt;
&lt;p&gt;Clarifying that statement, I believe I can successfully demonstrate that 95% of the
projects that I have worked on have used a Grouped type of configuration for any
non-dynamic project configuration.  My choice of words was very deliberate in that previous
statement. While many of those projects had dynamic configuration that was quite complex,
the static configuration for those projects that pointed to the dynamic configuration
artifacts were quite simple.  And while many of those projects started out using the Simple
type of configuration, something always seems to come up that requires the need of
grouping of configuration values on some level.&lt;/p&gt;
&lt;p&gt;I do believe that my experiences in this area are common.  Servers?
Most of the time they require some setup of the server and pass any heavy lifting
of information to a data store.  This usually requires two or three small groups of
information, usually with not more than two or three items in each group.  Command line
applications?  Most of the time there was
no data stores and any information was passed in through the command line or environment
variables.  Even if some manner of data store was involved, the configuration only provided
the data to connect to the data store, where the dynamic information was stored.&lt;/p&gt;
&lt;p&gt;So, what changes from the previous type?  Only this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grouping of values? Extra code required.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next type is where all the big changes occur.&lt;/p&gt;
&lt;h3 id="configuration-type-3-complex"&gt;Configuration Type 3: Complex&lt;a class="headerlink" href="#configuration-type-3-complex" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While this type of configuration is overkill for simple projects, it can be required
for more complex projects, hence its name.  From the main list of configuration items,
there is support for all five, though the support for overriding may be limited due to
the nature of the configuration itself.  When I have encountered a need for this type
of configuration, it has usually been configuration scenarios where there is a strong
need for nesting or hierarchical information.&lt;/p&gt;
&lt;p&gt;A good example of this is our standard group of configuration items, this time expressed
using a JSON file for information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"db"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"host"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"port"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"username"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"admin@123"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this hierarchy could be flattened, expressing it in this form provides meaningful
context to the configuration.  There is no looking for other configuration items throughout
the file that may have the same prefix.  All four of the related items are grouped
together under the &lt;code&gt;db&lt;/code&gt; key.  However, a better example of this hierarchical relationship
requires a slight adjustment of the example file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"db"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"server"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"host"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"database"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"port"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"account"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"username"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"admin@123"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With a slight addition of the &lt;code&gt;database&lt;/code&gt; field, this file now represents what I feel is
a more logical expression of the configuration items.  While it is true that the previous
group of four items were all related to the database, they were not all related in the
same way.  This organization of the fields presents a more cohesive mapping of what
configuration is required for database access: where the database is and what account to
use.&lt;/p&gt;
&lt;p&gt;But as I mentioned at the start of this section, this may be overkill for some
applications.  If all you are storing in the configuration is 10 strings or less, I
would argue that a Grouped or Simple type can more easily be used, with some adjustments
required in the application.  But for other applications with more complex configuration,
this type may be just right for the project.&lt;/p&gt;
&lt;h3 id="which-is-best-for-this-project"&gt;Which Is Best For This Project?&lt;a class="headerlink" href="#which-is-best-for-this-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After reviewing the different types in my head, I decided that the PyMarkdown project
would benefit from a complex configuration type.  While the base configuration for
the project is basic, I believe that the configuration requirements for any
plugins and extensions will require more complex configuration.  I know that a couple
of the plugins that I want to write for my own website will require lists and possibly
list of maps.  As such, it is better to plan and be prepared, rather than face
a nasty rewrite.&lt;/p&gt;
&lt;p&gt;And with that decision, I was on to adding complex configuration support to the
project!&lt;/p&gt;
&lt;h2 id="adding-proper-configuration-support"&gt;Adding Proper Configuration Support&lt;a class="headerlink" href="#adding-proper-configuration-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having written both low-level and high-level code to work with configuration, I had a
good idea of what to do.  The most important thing for me to do is to make sure
I had any extra requirements for the complex configuration worked out before I
started.&lt;/p&gt;
&lt;h3 id="starting-with-base-requirements"&gt;Starting With Base Requirements&lt;a class="headerlink" href="#starting-with-base-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The base configuration requirement for this project is that it can handle complex
configuration.  Based on that requirement, the most frequently used formats for that
kind of data are
&lt;a href="https://en.wikipedia.org/wiki/YAML"&gt;YAML&lt;/a&gt; and
&lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt;.
Both have their strengths and weaknesses, as the information at those links will
detail.  Having used both of them in previous projects, my feeling was that the JSON
format is simpler format and more direct for users to use.  Because of those reasons,
they made a JSON file a better choice for holding configuration information.&lt;/p&gt;
&lt;p&gt;With that out of the way, I created a simple class &lt;code&gt;ApplicationProperties&lt;/code&gt;
to hold the configuration information.  Keeping any interaction with it simple,
I added a &lt;code&gt;load_from_dict&lt;/code&gt; function to take care of transforming a loaded
dictionary into a more convenient form for the class.  After that was place, I
created a simple &lt;code&gt;ApplicationPropertiesJsonLoader&lt;/code&gt; class with a straightforward
static function named &lt;code&gt;load_and_set&lt;/code&gt;.  This function (and class) was created for
one purpose: to load a JSON file as a dictionary and add it to the provided instance
of the &lt;code&gt;ApplicationProperties&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;Class to hold the properties.  Check.  Class to read properties in JSON format and
set to the properties object. Check.  Scenario tests to verify that the loading was
working properly?  Check. Now I needed to figure out the best way to hold
the data within the class and how to access it from the application.&lt;/p&gt;
&lt;h3 id="loading-the-configuration-from-a-file"&gt;Loading The Configuration From A File&lt;a class="headerlink" href="#loading-the-configuration-from-a-file" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Thinking of the properties “grouping of values” and “hierarchy and nesting”, I had
a decision to make on how to store the data.  To me, that problem had two possible
solutions: keep the dictionary as it was or translate it into a flattened map.  To shape
that decision, I had to keep in mind that one of the reasons that a complex configuration
type is best for this project is due to its extensibility.  Designed correctly, the
configuration for any part of the project would be kept in its own “playground”, free
from interference from any of the other parts.&lt;/p&gt;
&lt;p&gt;Keeping that in mind, I knew that if I kept the dictionary the way it was, I could easily
hand off portions of that dictionary to a subsystem using a single line of code.  However,
if used properly, accessing a property using that dictionary would require multiple
lookups, one for each level of hierarchy required for that property.  The balance to that
was a flattened dictionary, which only every required one lookup.  However, this would
mean that handing off the configuration for a distinct part of the project would not be
as straightforward or inexpensive.&lt;/p&gt;
&lt;p&gt;After a fair amount of thought, I decided that the flattened option was the best choice.
It optimized fetching values over hierarchy exclusion, which I believe was the right
choice to make.  Following that decision were three other key decisions.  The first
decision, which might seem like a straightforward decision, was that all keys are
strings.  However, as JSON and other configuration formats can handle non-string
keys, I wanted to be explicit about it.  Secondly, I needed to choose a key separator
character that would determine how to create a path to allow orderly traversal through
configuration.  With many great ones to choose from, I decided to keep it simple and in the
property file family by using the period character &lt;code&gt;.&lt;/code&gt;.  Finally, I had to decide about
having all key strings be in upper case or lower case, or to simply have case-sensitive
property keys.  That one was a bit more difficult, but after looking at a few
property files, the answer was obvious: lower case.&lt;/p&gt;
&lt;p&gt;With those choices made, I added the &lt;code&gt;__scan_map&lt;/code&gt; function and called it from the
&lt;code&gt;load_and_set&lt;/code&gt; function.  It was less than 20 minutes before I had the following function
ready to go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__scan_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_prefix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"All keys in the main dictionary and nested dictionaries must be strings."&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__separator&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Keys strings cannot contain the separator character '{self.__separator}'."&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;next_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__scan_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;next_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{current_prefix}{next_key}{self.__separator}"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{current_prefix}{next_key}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__flat_property_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"Adding configuration '&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;' : {&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every key in the dictionary is checked to verify that it is a string
and does not contain the key separator character.  Once the key is verified, if the current
value is a dictionary, the function is called recursively with the current key and
that dictionary.  If it is not a dictionary, it is added to the flattened dictionary by
creating a copy of its value.  When inserted into the dictionary, the key is transformed
into lower case to ensure consistency.&lt;/p&gt;
&lt;p&gt;I did try a couple of different options out, but in the end, this simple recursive function
was the clear winner.  I tried to be super-smart about doing the same thing in an
iterative fashion, but it seemed to me to be too much code for such a simple task.  While
I do not have problems with recursive functions in any programming language, I do know that
they can get into runaway mode with one wrong conditional statement.  As such, I verified
the code a couple of times before running it.  I also added the &lt;code&gt;number_of_properties&lt;/code&gt;
function and the &lt;code&gt;property_names&lt;/code&gt; function before adding more tests to test what I had so
far.&lt;/p&gt;
&lt;h3 id="fetching-values-from-the-configuration"&gt;Fetching Values From The Configuration&lt;a class="headerlink" href="#fetching-values-from-the-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a lot of the tough work behind me, I created some new scenario tests to test
the new function that I was just about to add: the &lt;code&gt;get_property&lt;/code&gt; function.  As this
was the start of this function, its coding was very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get an property of a generic type from the configuration.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;
    &lt;span class="n"&gt;property_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;property_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__flat_property_map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;found_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__flat_property_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_eligible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found_value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;property_value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, unless a valid value is found to replace its value, the &lt;code&gt;property_value&lt;/code&gt;
variable is set to &lt;code&gt;default_value&lt;/code&gt;.  This made sense to me because it allowed me to
write code that would know if a property was not found, or to just use a default,
whichever solution worked best for the scenario I was working on.  From there, the
function checks to see if the value of &lt;code&gt;property_name&lt;/code&gt; is present in the flattened
dictionary and has the specific type that is being looked for.  If both of those
conditions are met, the &lt;code&gt;property_value&lt;/code&gt; variable is set to the value found in the
flattened dictionary.&lt;/p&gt;
&lt;p&gt;To me, this was just the start, but it was a good, solid, simple start.  Basic
property support was now done… almost. To make things a little easier, I added three
functions:
&lt;code&gt;get_boolean_property&lt;/code&gt;, &lt;code&gt;get_integer_property&lt;/code&gt;, and &lt;code&gt;get_string_property&lt;/code&gt;.  These were
all simple wrappers around the &lt;code&gt;get_property&lt;/code&gt; function, providing the appropriate
type information for the third &lt;code&gt;property_type&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;Where was I now?  Basic property support. Check.  Grouping of values. Check.
Hierarchy and nesting. Check.  &lt;/p&gt;
&lt;p&gt;The next one to tackle?  Validation.&lt;/p&gt;
&lt;h3 id="adding-validation"&gt;Adding Validation&lt;a class="headerlink" href="#adding-validation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I do not always need to validate values that I am fetching from configuration,
sometimes it is essential to have.  Where possible, I prefer to assume that the user
is intelligent and will provide intelligent values that make sense. If there is an issue
with the value, I prefer to report that error at a later stage when they are being used,
either directly to the command line or by logging it to a log file.&lt;/p&gt;
&lt;p&gt;But in some cases, I need to have some configuration values that I know I can trust on
as they are pivotal to the way the application works.  The easiest one for me to think
of is the &lt;code&gt;log.level&lt;/code&gt; configuration value.  As I rely on a solid log file to report
any errors, it is pivotal to me that any changes to the logging behavior are completely
airtight.  Specifically, I only want the log level to be set to one of the known values.
The code to do this for the &lt;code&gt;argparse&lt;/code&gt; library and command line handling is relatively
straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;available_log_maps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"CRITICAL"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CRITICAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"ERROR"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"WARNING"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"INFO"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"DEBUG"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"--log-level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"log_level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"minimum level required to log messages"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available_log_maps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_level_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available_log_maps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Value '{argument}' is not a valid log level."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The argument is added with a &lt;code&gt;type&lt;/code&gt; argument that specifies the &lt;code&gt;log_level_type&lt;/code&gt;
function.  This function is called with the provided value as its argument, either
returning that object or raising a &lt;code&gt;ValueError&lt;/code&gt;.  The check itself is to simply compare
the argument with the name of one of the keys in the &lt;code&gt;available_log_maps&lt;/code&gt;
dictionary.  For me, this is simple, and it seemed like a good pattern to follow.&lt;/p&gt;
&lt;p&gt;To start following that pattern, I added the &lt;code&gt;valid_value_fn&lt;/code&gt; argument to the
&lt;code&gt;get_property&lt;/code&gt; family of functions, defaulting to &lt;code&gt;None.&lt;/code&gt;  Once that was done, the other
modification to that function was simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Added right after the type check, if the &lt;code&gt;valid_value_fn&lt;/code&gt; is set, the function will
be called to validate the &lt;code&gt;found_value&lt;/code&gt;, catching any exceptions that are thrown.
Once again, I looked at a few other options, but simplicity won out again.&lt;/p&gt;
&lt;p&gt;But having finished that change, something still was not right.  Something was a bit off.
I was not sure what though.&lt;/p&gt;
&lt;h3 id="adding-strict-mode-to-validation"&gt;Adding Strict Mode to Validation&lt;a class="headerlink" href="#adding-strict-mode-to-validation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using the log level case as a baseline scenario, I thought through variations on
that scenario and came up short.  There was just something missing that I had not covered
yet.  After a bit of thinking and working through scenarios, it finally came to me:
I needed a strict mode.&lt;/p&gt;
&lt;p&gt;There are times where I want a call to the &lt;code&gt;get_property&lt;/code&gt; function to return a value
no matter what, but there are other times where I want an exception thrown.  In the
case of fetching the log level, if there is a problem with the value, I want to follow the
&lt;code&gt;argparse&lt;/code&gt; example and thrown an exception that halts the application at that point. I
needed something to toggle between this &lt;em&gt;strict&lt;/em&gt; behavior and the more relaxed behavior.&lt;/p&gt;
&lt;p&gt;To accomplish this, I added the &lt;code&gt;strict_mode&lt;/code&gt; argument to the function with a default
of &lt;code&gt;False&lt;/code&gt;.  I then added this code snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;strict_mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"The value for property '{property_name}' must be of type '{property_type.__name__}'."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and this code snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;strict_mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"The value for property '{property_name}' is not valid: {str(this_exception)}"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the &lt;code&gt;log.level&lt;/code&gt; configuration item as an example, I do not want to default the
log level if it is not a string or is not one of the valid strings.  In those cases,
I want a clear message telling me what the issue is.  For me, this completed the
validation.  I could strictly enforce the validation, request a value from the
configuration file and know it was not fetched (checking &lt;code&gt;default=None&lt;/code&gt;), or request
a value and use the default if anything was wrong.&lt;/p&gt;
&lt;p&gt;I believe this now covers all the scenarios for validation.  After double checking
that the scenario tests were all up to date and passing cleanly, there were just a couple
of small things left to handle.&lt;/p&gt;
&lt;h3 id="almost-there"&gt;Almost There&lt;a class="headerlink" href="#almost-there" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Looking at what I had, I believed that the &lt;code&gt;ApplicationProperties&lt;/code&gt; class was almost there,
but I needed to add two small little things to make it complete.  The first of those
things was a &lt;code&gt;is_required&lt;/code&gt;
argument to allow me to state my intention that an argument must be present. That
was followed by code that was added near the end of the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;is_required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"A value for property '{property_name}' must be provided."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that in place, I just wanted to bulletproof the main function &lt;code&gt;get_property&lt;/code&gt;.
To do that, I added the following code at the start of the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"The propertyName argument must be a string."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"The property_type argument for '{property_name}' must be a type."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"The default value for property '{property_name}' must either be None or a '{property_type.__name__}' value."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this may not be Pythonic, as the types of arguments are being checked, I think it
is necessary.  As a developer, any reliance that I have on low level functions and
libraries requires trust.  I trust that those functions will let me know as quickly as
possible if I mess up.  For me, these parameter checks are just that.&lt;/p&gt;
&lt;h2 id="ordering"&gt;Ordering&lt;a class="headerlink" href="#ordering" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Out of the initial five items, there was now only one remaining: overriding from the
command line or environment.  While I did not integrate direct support for this into
the &lt;code&gt;ApplicationProeprties&lt;/code&gt; class, I did start by setting up a process to follow
for any new configuration items.  This process is simply a “ladder” to follow when
checking configuration values from multiple sources.  That ladder is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;command line&lt;/li&gt;
&lt;li&gt;configuration file&lt;/li&gt;
&lt;li&gt;default value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I might add code to integrate &lt;code&gt;ApplicationProperties&lt;/code&gt; and &lt;code&gt;argparse&lt;/code&gt; together
in the future, for right now it was manually done.  Using the &lt;code&gt;log.level&lt;/code&gt; item
as an example, the code to properly fetch it was as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"log.level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level_type&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_log_level&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This follows the process to the letter.  The first line checks to see if the &lt;code&gt;log_level&lt;/code&gt;
field is provided from the command line, either using the present value or setting it
to &lt;code&gt;None&lt;/code&gt;.  If that variable is &lt;code&gt;None&lt;/code&gt;, then the function uses the &lt;code&gt;get_string_property&lt;/code&gt;
function with the &lt;code&gt;log_level_type&lt;/code&gt; validator to fetch the log level from the
configuration.  Implied in that call is that if the value is not present, the default
value is &lt;code&gt;None&lt;/code&gt;.  Finally, if neither of those actions resulted in assigning the
&lt;code&gt;effective_log_level&lt;/code&gt; variable a non-None value, the &lt;code&gt;default_log_level&lt;/code&gt; member variable
is used to set a default.&lt;/p&gt;
&lt;p&gt;That process is what I want, but it seems a bit long.  Maybe I will see about shortening
it in the future, but for right now, it is exactly what I want.&lt;/p&gt;
&lt;h3 id="providing-constrained-access-to-subsystems"&gt;Providing Constrained Access To Subsystems&lt;a class="headerlink" href="#providing-constrained-access-to-subsystems" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Finally, before I could finish implementing this in the PyMarkdown project, I needed to
handle the scenario of passing off a subsection of the configuration to a subsystem.
This was important to me because I wanted to make sure that there was absolutely no
chance of overlap between the main application configuration and the configuration of
any plugin.&lt;/p&gt;
&lt;p&gt;To do this, I created a new class called &lt;code&gt;ApplicationPropertiesFacade&lt;/code&gt; that takes as
arguments the root &lt;code&gt;ApplicationProperties&lt;/code&gt; instance and a &lt;code&gt;property_prefix&lt;/code&gt; that is
specific to the section to isolate to.  This class is a facade, as the name suggests.
To that extent, this class spends most of its code handing off responsibility for
satisfying the requests by passing on to the root instance with the &lt;code&gt;property_prefix&lt;/code&gt;
appended to the start of the key string.  While this may seem simplistic, it gets the
job done remarkably well.&lt;/p&gt;
&lt;p&gt;With the work done on this class, its incorporation into the PyMarkdown project, and
all tests passing, it was time to wrap up the work on this item.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have written many of these types of classes in many languages over the years,
I really am happy about how this one turned out.  The way I know that I am happy about
it as a library-type class is that it does one thing simply but is easily extendable
to do slightly more complex things.  This class does not try and answer for all the
responsibilities of fetching configuration information, it focuses on getting that
information from a file. It is small, it is light, and it accomplishes its goals in what I
believe is a clean manner.  What is there not to like?&lt;/p&gt;
&lt;p&gt;But as much as I was confident that I had the right fit for the configuration file,
I now found the command line interface lacking.  I was going to need to take some time
to clean that up.  I was also aware that the initial release is very close now.  There are
two other things in the way of a good first release: cleaning up some important issues and
having a good release story.  I was hoping to fix the first as soon as possible and to
research the second before I needed to start on it.  Here we go!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the &lt;code&gt;ApplicationProperties&lt;/code&gt; class coded and working fine, I realize that I needed
to up my game for the command line.  Therefore, the next thing I worked on was the
command line of the project.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Front-Matter</title><link href="https://jackdewinter.github.io/2021/03/15/markdown-linter-road-to-initial-release-front-matter/" rel="alternate"></link><published>2021-03-15T00:00:00-07:00</published><updated>2021-03-15T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-03-15:/2021/03/15/markdown-linter-road-to-initial-release-front-matter/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/08/markdown-linter-road-to-initial-release-cleaning-up-the-list-and-readability/"&gt;last article&lt;/a&gt;, I talked about
how I started to focus more on resolving the higher priority issues from the project’s
issues list and the problems I faced doing that.  In this article, I talk about my own
requirements for a front-matter processor and how I added …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/08/markdown-linter-road-to-initial-release-cleaning-up-the-list-and-readability/"&gt;last article&lt;/a&gt;, I talked about
how I started to focus more on resolving the higher priority issues from the project’s
issues list and the problems I faced doing that.  In this article, I talk about my own
requirements for a front-matter processor and how I added it to the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a sharper focus, I took a look at the
&lt;a href="https://github.com/jackdewinter/pymarkdown#project-to-do-list"&gt;issues list&lt;/a&gt;
for the project and made a firm commitment to myself: to work through and complete as
many of the Priority 1 issues as possible as quickly as possible.  But in terms of
importance, there was one of those issues that stood apart from the rest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="n"&gt;YAML&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;simple&lt;/span&gt; &lt;span class="n"&gt;front&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Back at the start of the project, I sat down and figured out what the real
requirements for the project were, as
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/#what-are-the-requirements"&gt;detailed here&lt;/a&gt;.
However, while it is not explicitly stated in that list of requirements, the
overarching requirement is stated in the last paragraph of that section:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From my point of view, these requirements help me visualize a project that will help me maintain my website by ensuring that any articles that I write conform to a simple set of rules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The big push for me to do this was always to help me maintain my own website.  Since
that website is written as a collection of Markdown documents, I did not think that I
needed to explicitly state that this project must work on my own website’s Markdown
documents. It was just expected. And to do that, I needed to be able to handle the
metadata in the front-matter of my articles.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commit for
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/f4c785d6d15734208d995067b1de486d30bd6cea"&gt;04 Mar 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="markdown-front-matter"&gt;Markdown Front-Matter&lt;a class="headerlink" href="#markdown-front-matter" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With respect to Markdown, if all someone has ever done is to use it to format a readme.md
file or to add formatting to a control on a web form, the term &lt;code&gt;front-matter&lt;/code&gt; might be
a bit confusing.  But for someone like me, who has a website authored in Markdown,
it is a pivotal piece of the authoring process.  As such, it needs to be done right.&lt;/p&gt;
&lt;h3 id="why-is-it-needed"&gt;Why Is It Needed?&lt;a class="headerlink" href="#why-is-it-needed" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I write an article for my website, the body of the article is approximately 95 percent
of the work. Coming up with a good format, making sure the article flows, and checking for
grammar; these are the harder parts of writing articles on the weekly schedule
that I follow.  Those parts of the article form the content of the article, and once I
fine-tune that content, it is very important to me that the content is presented
properly.  That is where metadata comes in.&lt;/p&gt;
&lt;p&gt;To properly ensure that the articles are rendered properly and placed in the right areas
of my website, I need
to have a method that allows me to communicate metadata about the article to my website
generator.  Different website generators structure their content in different ways,  but
every website generator that I have looked at requires some form of additional metadata
provided within each article to be published.  After all, only so much information can be
obtained from a directory structure or the article itself. For most website generators,
that extra information is contained within something referred to as front-matter.&lt;/p&gt;
&lt;h3 id="what-is-markdown-front-matter"&gt;What Is Markdown Front-Matter?&lt;a class="headerlink" href="#what-is-markdown-front-matter" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having experimented with a handful of
&lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/"&gt;static site generators&lt;/a&gt;,
I chose the
&lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; website generator for my own personal site.
While I admit that I could have gone with something different, I do not regret any part
of my decision to use Pelican as my site generator.  It fits all my needs perfectly, and
my simple tooling around it allows me to focus on the publishing of the articles, not
the site generator.&lt;/p&gt;
&lt;p&gt;I believe that one of the reasons that I work well with Pelican is that
Pelican treats article metadata as a first-class object, not as an afterthought.  This is
evident as the first example of creating an article that exists on the Pelican
&lt;a href="https://docs.getpelican.com/en/latest/quickstart.html#create-an-article"&gt;Quick Start&lt;/a&gt; page
is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: My First Review
Date: 2010-12-03 10:20
Category: Review

Following is a review of my favorite mechanical keyboard.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That example is then followed up by a more complete example in the next section on
&lt;a href="https://docs.getpelican.com/en/latest/content.html#file-metadata"&gt;Writing Content&lt;/a&gt;
with the section on “File Metadata”:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: My super title
Date: 2010-12-03 10:20
Modified: 2010-12-05 19:30
Category: Python
Tags: pelican, publishing
Slug: my-super-post
Authors: Alexis Metaireau, Conan Doyle
Summary: Short version for index and feeds

This is the content of my super blog post.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are both great examples of articles containing front-matter metadata.  In its
simplest form, front-matter is
extra metadata that is attached to the beginning of an article, to be consumed by
the website generator and not presented to the reader as content.  While the effects of
one or more of the data fields may influence how the content of the rest of the article is
presented, that information is not explicitly part of the article itself.&lt;/p&gt;
&lt;p&gt;A good example of that is the &lt;code&gt;Title&lt;/code&gt; field in the above examples.  If I were to publish
this article on my website, the content of the article would be a single paragraph:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is the content of my super blog post.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, at the top of the page, the title itself would be presented as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    My super title
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, different parts of Pelican may use other fields to affect how the article
is rendered or where the article is rendered.  When was the article written?  Is this
article part of a series of articles?  What tags are associated with the article? These
are all specified in the front-matter of each article that I write.&lt;/p&gt;
&lt;p&gt;That is why front-matter support is so important to me.  This website is how I communicate
with others, and I want to get it right.&lt;/p&gt;
&lt;h3 id="what-are-the-standards"&gt;What Are The Standards?&lt;a class="headerlink" href="#what-are-the-standards" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing I need to cover is why any definition or standard around front-matter
is not present in the
&lt;a href="https://github.github.com/gfm/"&gt;GFM specification&lt;/a&gt;.
The GFM specification itself is specifically focused on the common parts of Markdown
and how it is rendered into HTML.  Front-matter influences how the
content is presented but is not directly part of the content.  Therefore, it feels right
that the GFM specification has no mention of front-matter.&lt;/p&gt;
&lt;p&gt;Knowing this, I started looking for any kind of specification for front-matter weeks
before I started to work on this feature.  While information was hard to find, the
information fell into three groups.&lt;/p&gt;
&lt;h4 id="group-1-pelican-static-site-generator"&gt;Group 1: Pelican Static Site Generator&lt;a class="headerlink" href="#group-1-pelican-static-site-generator" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The first group that defined front-matter was in the documentation for the
&lt;a href="https://python-markdown.github.io/extensions/meta_data/"&gt;Pelican Meta-Data&lt;/a&gt; plugin.
This documentation was not easy to define, but provided the following paraphrased rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keywords are case-insensitive letter, numbers, underscore, dashes and must end with a colon&lt;/li&gt;
&lt;li&gt;everything after the colon on the line, including a no data, are acceptable&lt;/li&gt;
&lt;li&gt;if a line is idented by 4 or more spaces, that line is added to the data for the previous keyword&lt;/li&gt;
&lt;li&gt;the first blank line ends all metadata for the document&lt;/li&gt;
&lt;li&gt;alternatively, fences may be used&lt;ul&gt;
&lt;li&gt;the first line of the document must be &lt;code&gt;---&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the metadata ends at the first blank line or the first line containing &lt;code&gt;---&lt;/code&gt; or &lt;code&gt;...&lt;/code&gt;, whichever comes first&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had been following these rules without knowing them for months, but it was nice to
finally know that they were in a concrete way.  At least it was a start.&lt;/p&gt;
&lt;h4 id="group-2-commonmark-markdown-parser"&gt;Group 2: CommonMark Markdown Parser&lt;a class="headerlink" href="#group-2-commonmark-markdown-parser" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The second group that I found was in the documentation for the
&lt;a href="https://github.com/commonmark/commonmark-java#yaml-front-matter"&gt;Commonmark&lt;/a&gt;
Markdown Parser.  While it it is not explicitly stated as such, after a bit of digging
in the
&lt;a href="https://github.com/commonmark/commonmark-java/blob/main/commonmark-ext-yaml-front-matter/src/main/java/org/commonmark/ext/front/matter/internal/YamlFrontMatterBlockParser.java"&gt;Java source code&lt;/a&gt;
yielded the following rules by reading through the regular expressions in that code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;normal lines are started with 0 to 3 spaces, followed by 1 or more characters in &lt;code&gt;a-z0-9._-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;in certain cases where a “special” sequence was started, a line that starts with 4 or more spaces may add to the current value (such as literals)&lt;/li&gt;
&lt;li&gt;fences are required&lt;ul&gt;
&lt;li&gt;the start fence must start with 3 or more &lt;code&gt;-&lt;/code&gt; characters&lt;/li&gt;
&lt;li&gt;the end fence must start with 3 or more &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; characters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I really love documentation that presents you with a single example and almost nothing
else.  Without being able to read the Java code for details, this one would not have
made the list.&lt;/p&gt;
&lt;h4 id="group-3-markdown-it-front-matter-extension"&gt;Group 3: Markdown IT Front Matter Extension&lt;a class="headerlink" href="#group-3-markdown-it-front-matter-extension" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The final group that I found was in the documentation for the
&lt;a href="https://github.com/ParkSB/markdown-it-front-matter"&gt;Markdown IT Front Matter Extension&lt;/a&gt;.
By far, this was the most complete documentation.  It is so complete and well documented
that I did not have to search any source code or paraphrase any other documentation.
These points are copied verbatim from that website:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Indicated by three or more dashes: —&lt;/li&gt;
&lt;li&gt;Opening and closing fences must be the same number of dash characters&lt;/li&gt;
&lt;li&gt;Opening fence must begin on the first line of the markdown string/file&lt;/li&gt;
&lt;li&gt;Opening fence must not be indented&lt;/li&gt;
&lt;li&gt;The example above uses YAML but YAML is not required (bring your own front matter parser)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I mentioned before the list: complete and well-documented.&lt;/p&gt;
&lt;h4 id="finding-the-best-of-all-worlds"&gt;Finding The Best of All Worlds&lt;a class="headerlink" href="#finding-the-best-of-all-worlds" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Faced with those three groups of definitions, I needed to think about how I was going to
pull these together in a way that made sense.  For this initial release, my big reason
for adding this feature was to enable front-matter for linting my own website files.  As
such, the rules that apply to the Pelican Meta-Data plugin needed to have a bit more
weight than the other rules.  Even so, as I want to be able to add more support for other
types of front-matter in the future, it made sense to only use that as a weighting, not as
a final decision.&lt;/p&gt;
&lt;p&gt;The first set of decisions that I needed to make were regarding the “fences” at the start
and end of the metadata.  Each of the sample implementations specify that the metadata
must start at the beginning of the article, so that was one decision neatly out of the
way.  With respect to the fences themselves, while the Pelican plugin provides for them
as an option, the other two implementations do not, so I decided to make them mandatory
for now.  But that left me to decide on the exact format of those fences. The
Pelican plugin
implementation specifies exactly 3 &lt;code&gt;-&lt;/code&gt; characters for the start fence and exactly 3 &lt;code&gt;-&lt;/code&gt;
or &lt;code&gt;.&lt;/code&gt; characters for the end fence.  The CommonMark implementation specifies 3 or more
&lt;code&gt;-&lt;/code&gt; characters for the start fence and 3 or more &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; characters for the end fence.
Finally, the Markdown-It implementation specifies 3 or more &lt;code&gt;-&lt;/code&gt; characters for the start
fence and 3 or more &lt;code&gt;-&lt;/code&gt; characters for the end fence.  This implementation also added
the caveat that the start and end fences must have the same number of characters.
Each one of these was a little different, and I wanted to make a good first choice with
respect to the fences.  That took a bit of thought.&lt;/p&gt;
&lt;p&gt;In the end, I decided that for now, having fences with 3 or more &lt;code&gt;-&lt;/code&gt; characters
was the best way to go.  Since each of these implementations specifies, either explicitly
or implicitly, that the fences must be at the start of a line, that decision was a simple
one.  Finally, as I like symmetry in my articles, I felt that mandating that the start
fence and the end fence contain the same number and type of characters was the final
decision I had to make with respect to the headers.
As for the content of the front-matter, I felt that since my initial push was to support
the Pelican Meta-Data plugin, using its rules for content were good enough for me.&lt;/p&gt;
&lt;p&gt;As I was coming up with these rules, I was cognizant of one big thing: I did not have to
be correct, I just needed a good set of defaults.  I was sure that at some point I was
going to support all three formats, just not right away.  Until I got to that point, I
just needed to have something “good enough”.&lt;/p&gt;
&lt;h2 id="before-we-go-on"&gt;Before We Go On&lt;a class="headerlink" href="#before-we-go-on" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I pride myself on my honesty, so here goes: I messed up.  This article is mainly about
the setup around the addition of a new feature to the project, which is mostly complete
in
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/f4c785d6d15734208d995067b1de486d30bd6cea"&gt;this commit&lt;/a&gt;.
However, for some reason, I did not add the module &lt;code&gt;front_matter_markdown_token.py&lt;/code&gt;
and the module &lt;code&gt;test_markdown_front_matter.py&lt;/code&gt; until
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/8a30dee0c0105898258e6074d5058556c08410ca"&gt;this commit&lt;/a&gt;
which is where the bulk of the work for parsing is located.  So, while most of the work
is contained within the first commit, I ask for you lenience, dear reader.  Please
pretend that that one file was added in the first commit.  Thank you.&lt;/p&gt;
&lt;h2 id="adding-the-feature"&gt;Adding The Feature&lt;a class="headerlink" href="#adding-the-feature" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting to add this feature, I was keenly aware that I needed to start thinking about
how to implement new features in an adaptable manner.  This was only the first extension,
and not the last one to come.  To that end, I wanted to start the process of
making sure that extending the parser and the linter were both possible.  This was a good
place to start!&lt;/p&gt;
&lt;p&gt;Based on the actions that the front-matter processing needed to perform, I made the
decision that it had to be encapsulated in a Leaf Block token.  It was not a
container and it did not make sense to specify it as an Inline token.  After a bit of
thinking on it, I concluded that it was a special token that contains
other information, although not tokens.  As such, while it was a bit of a reach, I
figured that it made sense to express it as a Leaf Block token, just a specially scoped
token.&lt;/p&gt;
&lt;h3 id="testing-first"&gt;Testing First&lt;a class="headerlink" href="#testing-first" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As is my process, while I might have added a bit of simple code here and there to test
some little things out, this feature started with the first of the scenario tests added
to the &lt;code&gt;test_markdown_front_matter.py&lt;/code&gt; module.  While this may appear to some as a
backwards way to do things, I consistently return to the process because of one thing: it
works well for me.  Before starting the coding part of the feature, I have a test that
provides a good set of requirements for what is needed to complete that one part.&lt;/p&gt;
&lt;p&gt;For me, this is the best way to go.  Write the test to specify your goal for the feature,
and then work towards it.&lt;/p&gt;
&lt;h3 id="keeping-a-single-point-of-entrance"&gt;Keeping a Single Point of Entrance&lt;a class="headerlink" href="#keeping-a-single-point-of-entrance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I knew that the bulk of the code was going to be provided in an extension module,
it was important to me that there be only one point of entry for the code to process
front-matter.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__process_header_if_present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;requeue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FrontMatterExtension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_header_if_present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;requeue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenized_document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make sure that it was called exactly once, I added the call to that function at the
start of the &lt;code&gt;__parse_blocks_pass&lt;/code&gt; function, right at the &lt;code&gt;try&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__process_header_if_present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;did_start_close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token_to_use&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="filling-out-the-processing"&gt;Filling Out The Processing&lt;a class="headerlink" href="#filling-out-the-processing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For the most part, the processing was simple.  If anyone is interested in the
actual code that was added, look in
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/8a30dee0c0105898258e6074d5058556c08410ca"&gt;this commit&lt;/a&gt;
for &lt;code&gt;process_header_if_present&lt;/code&gt; and follow along from there.  I am going to focus on
more description about what is done rather than walk through each function line-by-line.&lt;/p&gt;
&lt;p&gt;As I already had the
&lt;code&gt;is_thematic_break&lt;/code&gt; function that was 95% of the way to where I needed it to be,
I decided to retrofit that function instead of implementing a new one.  The only
three differences between a thematic break and the start fence were the characters
used, the indentation allowed, and whitespaces being allowed between thematic break
characters.  The characters difference was easily taken care of by adding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;start_char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;after the call to the &lt;code&gt;is_thematic_break&lt;/code&gt; function.  The indentation was also easy
to mitigate by simply not extracting any whitespace from the source string and passing
in an empty string (&lt;code&gt;""&lt;/code&gt;) for the extracted whitespace.&lt;sup id="fnref:commonIssue"&gt;&lt;a class="footnote-ref" href="#fn:commonIssue"&gt;1&lt;/a&gt;&lt;/sup&gt;
The whitespace issue took a bit more finessing.  To deal with that, I modified the
&lt;code&gt;is_thematic_break&lt;/code&gt; function by adding a switch called
&lt;code&gt;whitespace_allowed_between_characters&lt;/code&gt;.  This allowed the calling function to specify
whether whitespaces were allowed between the characters.&lt;/p&gt;
&lt;p&gt;Once there was a valid start to the front-matter section, the
&lt;code&gt;__handle_document_front_matter&lt;/code&gt; function was called to handle the rest of the processing.
This enabled me to keep the &lt;code&gt;process_header_if_present&lt;/code&gt; function focused on the external
processing of the front-matter section itself.  When the
&lt;code&gt;__handle_document_front_matter&lt;/code&gt; function returned, there were only two possibilities.
If a Front Matter token was created, it was added to the document.
Otherwise, if for any reason it failed, every line that was used in determining that the
Front Matter token could not be created was requeued for reprocessing.  That encapsulation
kept things nice and clean.&lt;/p&gt;
&lt;h3 id="implementing-the-interesting-stuff"&gt;Implementing The Interesting Stuff&lt;a class="headerlink" href="#implementing-the-interesting-stuff" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once there was a Front Matter element start fence was detected, it was up to the
&lt;code&gt;__handle_document_front_matter&lt;/code&gt; function to collect and validate any front-matter that
was collected.  This meant collecting lines until such time as a blank line or a closing
fence was encountered.  With my initial rule of having the start fence and the end fence
containing the same number of characters, the code simply had to check to see if it
encountered the same fence twice: once at the start and once at the end.&lt;/p&gt;
&lt;p&gt;When the end fence was encountered, the processing was passed off to the
&lt;code&gt;__is_front_matter_valid&lt;/code&gt; function to determine if the lines formed a valid front-matter
section and to create a dictionary of those values if it did. The logic for this
initial version of the Front Matter token was very simple.  If the number of spaces were
4 or more, add it to the last line.  If not, check to see if it started with a valid
property name.  Any errors along the way aborted the validation, with a good reason
returned to the caller indicating why it was aborted.&lt;/p&gt;
&lt;p&gt;Finally, upon return to the &lt;code&gt;__handle_document_front_matter&lt;/code&gt; function with a valid
dictionary of values, the &lt;code&gt;FrontMatterMarkdownToken&lt;/code&gt; instance was created.  Following
in the steps of other tokens, it was easy to add all the required fields and properties
needed by the token.&lt;/p&gt;
&lt;h2 id="rounding-out-the-feature"&gt;Rounding Out The Feature&lt;a class="headerlink" href="#rounding-out-the-feature" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was adding the bulk of this feature, I commented out the parts of the scenario
tests that validated the HTML support, the Markdown support, and the consistency checks.
With all the scenario tests passing, I uncommented those parts and cleaned them up.&lt;/p&gt;
&lt;h3 id="adding-html-support"&gt;Adding HTML Support&lt;a class="headerlink" href="#adding-html-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Even though the Front Matter token does not generate any HTML output, I still
needed to add the proper code to deal with adding nothing to the HTML output.
To do this, I added the following code to the &lt;code&gt;transform_to_gfm.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown.extensions.front_matter_markdown_token&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;FrontMatterExtension&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FrontMatterMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_handlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;FrontMatterMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FrontMatterExtension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_front_matter_token&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;handle_front_matter_token&lt;/code&gt; function was simple, as it had to do nothing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_front_matter_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform_state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output_html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="adding-markdown-rehydration-support"&gt;Adding Markdown Rehydration Support&lt;a class="headerlink" href="#adding-markdown-rehydration-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While this was not exactly like adding the HTML support, there were a lot of
similarities.  Instead of adding code to the &lt;code&gt;transform_to_gfm.py&lt;/code&gt; module, code
was added to the &lt;code&gt;transform_to_markdown.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_handlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;FrontMatterMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FrontMatterExtension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rehydrate_front_matter&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As PyMarkdown tokens capture all the information pertaining to how that token was
created, it was easy to write the rehydrate function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rehydrate_front_matter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;previous_token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;previous_token&lt;/span&gt;

    &lt;span class="n"&gt;front_matter_parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boundary_line&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;front_matter_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collected_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;front_matter_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boundary_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;front_matter_parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="adding-consistency-check-support"&gt;Adding Consistency Check Support&lt;a class="headerlink" href="#adding-consistency-check-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I am sure that I will have to add more functions later, when adding this extension,
there were only two functions that I needed to add: &lt;code&gt;__validate_block_token_height&lt;/code&gt; and
&lt;code&gt;__calc_initial_whitespace&lt;/code&gt;.  Both the &lt;code&gt;__validate_block_token_height&lt;/code&gt; function and the
&lt;code&gt;__validate_first_token&lt;/code&gt; function are a long series of &lt;code&gt;if&lt;/code&gt; statements that probably
need refactoring.  But the immediate need was to enable the Front Matter token to be
handled properly by these functions.&lt;/p&gt;
&lt;p&gt;In both cases, I used the &lt;code&gt;is_extension&lt;/code&gt; property of the token to indicate that the token
itself would calculate these values.  For the &lt;code&gt;__validate_block_token_height&lt;/code&gt; function,
I added this code at the start of the &lt;code&gt;if&lt;/code&gt; statement chain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;token_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_block_token_height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and for the &lt;code&gt;__calc_initial_whitespace&lt;/code&gt; function, I added this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;calc_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;had_tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_initial_whitespace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The bodies were easy to fill out because the token is so simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_block_token_height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collected_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_initial_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let me get the good things out of the way first.  It was easy to add the new
Front Matter token, even in a raw form.  While I realize that this token is a very
easy token to add, I was able to add it cleanly and with only minimal issues.  Hopefully,
this means that adding future extensions will be somewhat easy, even if they are not as
easy as this feature.  In addition, the changes to the HTML generator, the Markdown
generator, and the consistency checks were very easy to add.  Once again, that bodes
well for future extensions.  But even so, I was cognizant that most of the ease of
adding this feature came from the fact that this new token is very specialized and
only occurs at the start of the document.  So, I hope things will be good going forward,
but I also realize that I got lucky in this case.  For now, that is a good mindset for
me to have.&lt;/p&gt;
&lt;p&gt;While the bad things is not a really big bad thing, it is still something that I mostly
missed implementing in a real fashion: application configuration.  I have little bits and
pieces of it wired in as dictionaries containing hierarchical structures, I do not have
a good start to end story around application configuration that I can live with.  And
after a few searches for “Python application configuration”, it seems that there are no
easy answers to this need.  That means I will need to write something.  A bit of a miss,
but I can recover from it.&lt;/p&gt;
&lt;p&gt;After taking a bit of a break when writing this article, I reread the above two paragraphs
and realized something that put both paragraphs into a new perspective.  While I was
previously looking at the Front Matter token as present and configuration as “should have
been done in the past”, I believe I had the time frames wrong.  With my new viewpoint,
I realized that I am adding the Front Matter token because I want to use the project now,
and both parts help me accomplish that goal.  In essence, these are both concepts that
are needed for a release.  If I am now worrying about them, it means the release is near!&lt;/p&gt;
&lt;p&gt;Sometimes, it just takes a bit of a break and a fresh point of view.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the Front Matter token is non-GFM compliant, I need to make sure that I have a decent
way to enable it when needed.  Next up, application configuration.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:commonIssue"&gt;
&lt;p&gt;During various points in development, a common issue was the improper passing of the correct whitespace to functions like this.  It was neat using this “issue” as a positive for once. &lt;a class="footnote-backref" href="#fnref:commonIssue" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Cleaning Up The List and Readability</title><link href="https://jackdewinter.github.io/2021/03/08/markdown-linter-road-to-initial-release-cleaning-up-the-list-and-readability/" rel="alternate"></link><published>2021-03-08T00:00:00-08:00</published><updated>2021-03-08T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-03-08:/2021/03/08/markdown-linter-road-to-initial-release-cleaning-up-the-list-and-readability/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/01/markdown-linter-road-to-initial-release-measured-performance-increases/"&gt;last article&lt;/a&gt;, I talked about
applying my newfound knowledge on performance measuring in Python to the PyMarkdown
project.  In this article, I start to focus more on resolving the higher priority issues
from the project’s issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When working on a project like the PyMarkdown …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/01/markdown-linter-road-to-initial-release-measured-performance-increases/"&gt;last article&lt;/a&gt;, I talked about
applying my newfound knowledge on performance measuring in Python to the PyMarkdown
project.  In this article, I start to focus more on resolving the higher priority issues
from the project’s issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When working on a project like the PyMarkdown project for as long as I have, there are
things that you like doing, things that you do not mind doing, and things that you know
you have to do.  For the most part, most of the things that I do related to the project
are in the first two categories.   But strangely enough, the closer I get to a potential
release, the more that I am feeling that things are moving into that third category.&lt;/p&gt;
&lt;p&gt;Maybe it is just that after working on this project for over a year, I do not want it
to go the next level.  Once I release the project, I need to promote the project more
than on my own blog, and that will take time.  I must admit, I have a bit of
a concern that people are going to look at my code and go “why did you do that?”.&lt;/p&gt;
&lt;p&gt;Regardless, I am going to try and clear out the Priority 1 section as much as possible
and get ready for a beta release as soon as I can.  At least, that is what my plan is.
Here is hoping I can stick to it!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/88ad9002b296edc2763e498cb9fc2c99e9e74c60"&gt;25 Feb 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/902fbfbdffb4fb9684e00a8d973e53814d393368"&gt;28 Feb 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="performance-or-readability"&gt;Performance or Readability?&lt;a class="headerlink" href="#performance-or-readability" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After spending the last week working on performance improvements, I was left with one
potential improvement that I did not get around to looking at: string concatenation. As I
have explained in part articles, when I am solving an issue, I work the issue and fit
things together as I go. The rigor that I have built into my development process allows me
the freedom to do that, knowing that I will revisit the code at least once before I commit
it to the repository.  At that time, I know with certainty that I will give the code a
more thorough looking over, guided by the knowledge that the algorithm that the code is
implementing has been tested properly.  That process is just built into how I develop
projects.  And it was because of that rigor that I felt that it was time to give string
concatenation another look.&lt;/p&gt;
&lt;p&gt;When it comes to string concatenation, I figured that if it ever became an issue, I would
just give that code another look.  A such, I just added strings the normal way using the
&lt;code&gt;+&lt;/code&gt; operator.  However, I started to suspect that concatenating strings in this way was an
issue, so I surveyed the project code.  In the process, I found that there are many places
where strings are concatenated using the &lt;code&gt;+&lt;/code&gt; operator and almost none being concatenated
using any of the other methods. Performing some quick “off-the-cuff” performance tests, I
was able to find only miniscule improvement between the various methods of concatenating
strings.  As such, I was faced with a question of whether I wanted to refactor the code for
readability rather than performance.&lt;/p&gt;
&lt;h3 id="how-do-you-define-readability"&gt;How Do You Define Readability?&lt;a class="headerlink" href="#how-do-you-define-readability" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Readability is an interesting concept in software development because often it is thought of
as how easy it is for other people on the team to read it.  This is increasingly confusing
on a project like PyMarkdown where I am the only one on the team.  Technically speaking,
if I can read my own code with decent ease, the code is readable.  I would further argue
that the above definition does not really define what readability is, just what it is
within a limited scope.&lt;/p&gt;
&lt;p&gt;From my point of view, readability is more than that.  Having developed software
professionally in over 6 different languages, I believe that readability is more fluid
that that.  Unless there is a business reason to define it otherwise, my general
definition of readability is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Readability is defined as the confidence that the development team has in the ability of someone, who is outside of the team and is familiar with the given language, to look at the code and to be able to clearly read and understand the code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, obviously there are some caveats, but there it is.  In the case of the PyMarkdown
project, my goal for readability is that I follow standard Python programming practices and
write performant Python code according to those practices.  Following my definition of
readability, as stated above, I expect that a competent Python developer should be able to
look at the source code for the PyMarkdown project and read it without too many issues.
For me, string concatenation using the &lt;code&gt;+&lt;/code&gt; operator is one of those issues that I believe
impedes the readability of the code.  From my viewpoint, there are two other methods of
concatenation that are more readable because they are more concise.&lt;/p&gt;
&lt;p&gt;So, purely from
a position of wanting to increase the readability of the project, I decided to refactor
all string concatenations to those two other forms.  This meant I would need to switch
every string concatenation over to one of the two more readable forms: f-strings and
lists with join statements.&lt;/p&gt;
&lt;h3 id="f-strings"&gt;F-Strings&lt;a class="headerlink" href="#f-strings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Added in Python 3.6, f-strings are a special type of string that combines the previous
ways of formatting strings together in a way that just makes sense.  Take this example
from the &lt;code&gt;container_block_processor&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"{ContainerIndices:ulist_index:"&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ulist_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;";olist_index:"&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;olist_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;";block_index:"&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For debug purposes, this string is being composed of variables and constants weaved
together to create the resultant string.  While it creates a string with the desired
information, I often have a hard time reading strings formatted in that manner.
It is a long sequence of operands over multiple lines, and just seems broken up. Each of
those breaks causes me a bit of confusing when I try and figure out what piece goes
with that other piece.  Therefore, when I try and scan those lines with my eyes, I find
that I need to slow down and parse through the line mentally a couple of times before
getting a good understanding of that function.&lt;/p&gt;
&lt;p&gt;In comparison, here is that same code refactored to use a f-string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{{ContainerIndices:ulist_index:{self.ulist_index};olist_index:{self.olist_index};block_index:{self.block_index}}}"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For me, this is easier to read.  While the string itself is longer and I may have to
scroll to read it, it is one string that describes everything in order.  The “curly-brace”
characters &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; encompasses code that computes a value to be added to the
string.  The sequences &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; are used to add a single one of those characters to
the string.  The f-string itself is denoted by simply adding a &lt;code&gt;f&lt;/code&gt; character to the start
of an otherwise normal string.  It manages to keep the simple things simple.&lt;/p&gt;
&lt;p&gt;While it initially took me a bit to warm up to f-strings, I now find them to be more
readable by far. I can easily scan from left to right in the string and almost instantly
know how the code is going to
compose that string.  But what about strings with a variable number of arguments?  Or
strings that have a separator that would be burdensome to use repeatedly?
That is where lists come in.&lt;/p&gt;
&lt;h3 id="lists"&gt;Lists&lt;a class="headerlink" href="#lists" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While f-strings are very readable, they do not work with an optional number of
arguments.  For those cases, &lt;code&gt;list&lt;/code&gt; objects and their &lt;code&gt;join&lt;/code&gt; function are recommended.
Consider the following code for the &lt;code&gt;debug_string&lt;/code&gt; function of the &lt;code&gt;MarkdownToken&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;add_extra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;":"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;column_row_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"(&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;include_column_row_info&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"[&lt;/span&gt;&lt;span class="si"&gt;%s%s%s&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_row_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_extra&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After various refactors of this function, I had replaced the variable parts of the
string with ternary statements and used a &lt;code&gt;%&lt;/code&gt; style format to stitch those values
together.  But it still looked disjointed to me.  Even after changing the &lt;code&gt;%&lt;/code&gt; style
format strings into f-strings, I was not happy with how it read.  The part that was
bothering me was that the optional parts of the string were not clearly being represented
as optional when I read them.  Basically, if I just looked at the last line of that
function, I felt that each one of those strings would contribute all the time, not
optionally.  I just felt that was not a good thing.&lt;/p&gt;
&lt;p&gt;Therefore I switched the optional parts of that concatenation to a &lt;code&gt;list&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;debug_parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;include_column_row_info&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;debug_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"({self.line_number},{self.column_number})"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;debug_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;":{self.extra_data}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;debug_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug_parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For me, this reads cleaner than the previous iteration of this function.  The start of the
string and the end of the string are clearly stated.  The optional parts format their data
only if needed, and only then do they calculate and add those formatted results.  For me,
this is more readable because it clearly delineates between the optional parts of the
string and the mandatory parts of the string.&lt;/p&gt;
&lt;p&gt;But there are also other areas where I find using lists to concatenate strings useful.
Take this code from one of the &lt;code&gt;__init__&lt;/code&gt; functions for a token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_data_separator&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_data_separator&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;list_start_content&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like my statements above, I do not find this code easy to read.  When I try and
read this code, the &lt;code&gt;MarkdownToken.extra_data_separator&lt;/code&gt; takes up most of my attention
as I try and make sure each one is in the right place.  Instead of focusing on what
is between those strings, I find myself focusing on those strings.  As such, I rewrote
it using lists as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_data_separator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_start_content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I find this format a lot easier to read.  I can see that I have a list
of items and that they will be joined using the &lt;code&gt;MarkdownToken.extra_data_separator&lt;/code&gt;
string.  That fact is mentioned exactly once, and then I do not have to concern myself
with it again.  After I have read that, I can then clearly see the list of items that are
going to be joined together, allowing me to focus on the contents of that list instead of
the separator. For me, that is a win!&lt;/p&gt;
&lt;h3 id="after-four-days"&gt;After Four Days&lt;a class="headerlink" href="#after-four-days" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It took me roughly four days of evenings to go through the PyMarkdown code base and move
every string concatenation over to one of the above methods.  There were times during that
effort that I felt like I should give up, but I persevered.  And once I got to the end
of that huge effort, I almost immediately saw the payoff.  Looking over code that I
had changed during those four days, the code looked a lot more readable to me.  In
addition, finding string concatenations was a lot easier now.  Instead of searching for
the &lt;code&gt;+&lt;/code&gt; operator, which is also used in numeric calculations, I could search for the
sequence &lt;code&gt;f"&lt;/code&gt; to look for the search strings.  By searching for &lt;code&gt;.join(&lt;/code&gt;, I was able to
find both string concatenations and token list concatenations, but my naming practices
make differentiating those two groups of concatenations easy.&lt;/p&gt;
&lt;p&gt;It was a slog, but I believe my choice to improve readability with respect to string
concatenations was the correct one.  Not only could I find any concatenations easier
than before, but when I read the concatenations, they just were easier to read.
I just hope others think the code is more Pythonic and more readable as well.&lt;/p&gt;
&lt;h2 id="whittling-down-the-issues-list"&gt;Whittling Down The Issues List&lt;a class="headerlink" href="#whittling-down-the-issues-list" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having been on the issues list for a long time, I decided that I needed to make a good
dent in the issues list, specifically the items dealing with Hard Line Breaks.  I had
fixed some issues with Hard Line Break tokens in the last month or so, and I figured it
would be a good time to continue that effort.&lt;/p&gt;
&lt;p&gt;The first issue that I picked up on this theme was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;hard&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt;?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking through all the examples and scenarios that I have already implemented, I was
astounded that I did not have any scenarios where there was a Hard Line Break element
at the start of the line.  After adding four very simple tests, I executed those tests,
and the only issue was the firing of an &lt;code&gt;assert&lt;/code&gt; statement in the
&lt;code&gt;__verify_first_inline_paragraph&lt;/code&gt; of the consistency checks.  That was issue was remedied
within 10 minutes, and I then moved on to the next issue.&lt;/p&gt;
&lt;h3 id="hard-breaks-and-inline-types"&gt;Hard Breaks And Inline Types&lt;a class="headerlink" href="#hard-breaks-and-inline-types" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next item that I picked up regarding Hard Line Breaks was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;hard&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nv"&gt;followed&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;inline&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this item, I looked through the code base and found most of the examples that I
was looking for, but I felt that they were scattered all over the place.  With an eye to
resolve this item in the shortest time possible, with time for refactoring later, I simply
went through the list of available inline tokens and created functions
&lt;code&gt;test_hard_line_breaks_extra_03x&lt;/code&gt; to &lt;code&gt;test_hard_line_breaks_extra_03i&lt;/code&gt; for the
one Hard Line Break sequence &lt;code&gt;\&lt;/code&gt; and functions &lt;code&gt;test_hard_line_breaks_extra_04x&lt;/code&gt; to
&lt;code&gt;test_hard_line_breaks_extra_04i&lt;/code&gt; for the other Hard Line Break sequence &lt;code&gt;{space}{space}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Due to a lot of hard work in previous weeks, I was lucky in that I only had to make a
small change to how the &lt;code&gt;__complete_inline_block_processing&lt;/code&gt; function changed the
&lt;code&gt;end_string&lt;/code&gt; variable.  Double checking my work and running the scenario tests again,
just to make sure, I resolve this item and moved on.&lt;/p&gt;
&lt;h2 id="hard-line-break-grab-bag"&gt;Hard Line Break Grab Bag&lt;a class="headerlink" href="#hard-line-break-grab-bag" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Apart from the “big” item itself, what was left was a bit of a grab bag of issues:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;hard&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nv"&gt;followed&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;spaces&lt;/span&gt;, &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nv"&gt;emphasis&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;variations&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;extra&lt;/span&gt; &lt;span class="nv"&gt;spaces&lt;/span&gt; &lt;span class="nv"&gt;after&lt;/span&gt;, &lt;span class="nv"&gt;etc&lt;/span&gt;.
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;variation&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt;, &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nv"&gt;hard&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;, &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nv"&gt;something&lt;/span&gt; &lt;span class="nv"&gt;like&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt; &lt;span class="nv"&gt;again&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;.&lt;span class="nv"&gt;e&lt;/span&gt;. &lt;span class="nv"&gt;make&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;x02&lt;/span&gt; &lt;span class="nv"&gt;splitter&lt;/span&gt; &lt;span class="nv"&gt;come&lt;/span&gt; &lt;span class="nv"&gt;into&lt;/span&gt; &lt;span class="nv"&gt;affect&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I hopefully knew what I intended when I wrote those down, I was left a bit in the
dark as I now read them.  I knew that the lines that contain the sequence &lt;code&gt;/x02&lt;/code&gt; deal with
SetExt Heading tokens, as that is the only place that I used that sequence as a splitter.
So, between what I knew and what I could guess, I came up with five new scenario tests
that tried to capture the spirit of what I thought those statements meant.&lt;sup id="fnref:andYes"&gt;&lt;a class="footnote-ref" href="#fn:andYes"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;There was one issue that I needed to deal with after executing the new scenario tests.
In the &lt;code&gt;InlineProcessor&lt;/code&gt; class, the tokens were not being generated correctly
when dealing with leading spaces on a line that was preceded by a Hard Line Break
within the confine of a SetExt Heading element.  After I bit of debugging, I was
able to figure out the right setting for the three variables in question, and that
was fixed.  To balance that out, I needed to add code with the inverse functionality
to the &lt;code&gt;__verify_next_inline_hard_break&lt;/code&gt; function of the consistency checks to
correctly compensate for that first change.&lt;/p&gt;
&lt;p&gt;Another execution of the scenario tests, another double check that things were good,
and I was on to another issue.&lt;/p&gt;
&lt;h3 id="tabs"&gt;Tabs&lt;a class="headerlink" href="#tabs" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I grabbed the following item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;stop&lt;/span&gt; &lt;span class="nv"&gt;gap&lt;/span&gt; &lt;span class="nv"&gt;solution&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;handling&lt;/span&gt; &lt;span class="nv"&gt;Tabs&lt;/span&gt; &lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="nv"&gt;tab&lt;/span&gt; &lt;span class="nv"&gt;work&lt;/span&gt; &lt;span class="nv"&gt;can&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it was with the intent to document what needed to be done to properly handle tab
characters in various situations.  It was with delight that I looked at and experimented
with the source code to find out that I was almost there. With one small change to the
&lt;code&gt;parse_inline&lt;/code&gt; function, I was able to get all the GFM specification examples with
tabs characters to work.&lt;/p&gt;
&lt;p&gt;So, the short story for this item is that there was nothing else that currently needed
fixing with respect to tab characters.  The long story for this item is that I have over
2000 tests for various parts of the linter and less than 20 tests for tab characters.  As
such, I added a new item to the issues list to deal with this later.  I am not sure how
many users have tab characters in their documents, so right now, the priority of that
item’s priority is just a guess, based on my usage.&lt;/p&gt;
&lt;h3 id="false-alarms-but-good-alarms"&gt;False Alarms But Good Alarms&lt;a class="headerlink" href="#false-alarms-but-good-alarms" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having poked around the code while performing the refactor that I talked about
in the above section on
&lt;a href="https://jackdewinter.github.io/2021/03/08/markdown-linter-road-to-initial-release-cleaning-up-the-list-and-readability/#performance-or-readability"&gt;Performance or Readability&lt;/a&gt;,
I noticed that two of the
functions that I expected to have code in their body were mysteriously blank. As
such, I added the following items to the issues list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;__calculate_shortcut_collapsed_deltas&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="k"&gt;at&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;why&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;shotrcut&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;over&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;seem&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="k"&gt;any&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking into this, I did my research and added two extra scenario tests to be sure of
my results.  In both cases, everything was fine.  Digging deeper into the code, I found
the answer to why these functions were okay with an empty body.  As both of those two
scenarios rely heavily on the link label, which is common to all link types, any
calculations for the size of the link label are already factored into the code.
However, to prevent myself from looking at this again, I added some extra comments to
indicate what I had found, and why these functions being empty was okay.&lt;/p&gt;
&lt;h3 id="some-final-cleanup"&gt;Some Final Cleanup&lt;a class="headerlink" href="#some-final-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I picked this item from the list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_paragraph_series_m_ul_t_nl_ulb_nl_tb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hoped it was going to be simple to resolve.  When I created the M-series of paragraph
scenario tests, I noted that I did not have any more complicated tests and suggested
a variation of a test with multiple lines.  Creating a few variations on the initial
scenario test with more complex data, I added three tests with variations on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
  &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="c1"&gt;---&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I tested more than three scenario tests, I did not find anything wrong with any
of the tests that I tried.  Instead of adding a whole bunch of scenario tests with only
a guess that there might be a future problem, I whittled those tests down to the three
tests that I did add.&lt;/p&gt;
&lt;h2 id="getting-back-to-performance"&gt;Getting Back To Performance&lt;a class="headerlink" href="#getting-back-to-performance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a decent handful of issues resolved from the issues list, there was a tiny bit of
extra cleanup I wanted to do with respect to the plugins.  Having looked at their code
during breaks, I knew there were a couple of small changes I wanted to make before release.
My feeling was that if I waited until after release, those changes would become breaking
changes, and I wanted to avoid that if possible.&lt;/p&gt;
&lt;h3 id="calling-plugin-functions-only-when-necessary"&gt;Calling Plugin Functions Only When Necessary&lt;a class="headerlink" href="#calling-plugin-functions-only-when-necessary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having already reaped benfits from calling two of the plugin functions
&lt;a href="https://jackdewinter.github.io/2021/03/01/markdown-linter-road-to-initial-release-measured-performance-increases/#plugin-performance"&gt;only when necessary&lt;/a&gt;,
I decided that those changes were a good practice that I wanted to spread to each of the
functions that comprise the plugin’s interface.  I quickly made similar changes to the
&lt;code&gt;completed_file&lt;/code&gt; and &lt;code&gt;starting_new_file&lt;/code&gt; functions, went to measure their change, and…
well… I was not sure.&lt;/p&gt;
&lt;h3 id="rethinking-performance-measurements"&gt;Rethinking Performance Measurements&lt;a class="headerlink" href="#rethinking-performance-measurements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In previous sections on performance, I was thinking about performance as actual clock
time.  Spending some time thinking about this while walking our dog, I realized that
the main issue was that there was always going to be some difference in timing, even
if I took two measurements minutes apart from each other.  If something external to
the PyMarkdown project hit my hard drive when I was taking measurements, it could cause
the measured time to be off.  So, was clock time the best measurement to use?&lt;/p&gt;
&lt;p&gt;It was then that I decided to move from measuring clock time to measuring clock time
percentages.  While I was pretty sure that if I took three samples that I would get
different timings in each sample, I had a high degree of confidence that the percentage
of the time spent in each function would remain relatively the same.  Running some sample
tests, this theory bore out in practice.  While there were some
differences in the percentages of the top 25, they were mostly negligible.  When
there were differences, it was most often from the &lt;code&gt;print&lt;/code&gt; function or one of the
functions in the &lt;code&gt;io.builtin&lt;/code&gt; module.  Since those two function groups are used for
input and output, it made sense that there would be variations.&lt;/p&gt;
&lt;p&gt;Throwing together a simple Excel spreadsheet, I now had what I believe to be a better
way to measure performance.&lt;/p&gt;
&lt;h3 id="using-the-new-process"&gt;Using The New Process&lt;a class="headerlink" href="#using-the-new-process" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using that new process, I was able to compose a new spreadsheet to track any changes
and I found only negligible improvements.  I was sure that I was going to get a performance
boost out of those changes, so I checked the code base again and I found the issue:
the templated plugins.  When I was adding the original set of plugins to be implemented, I
added all the plugins that I had planned to implement with templated functions.  Those
templated function were placeholders in the plugin that did not have any body to the
function other than a &lt;code&gt;pass&lt;/code&gt; statement.  My thinking was that when I was ready to write
the code for the plugin, I could start right away without having to add templated stuff.&lt;/p&gt;
&lt;p&gt;While that worked as planned, it was now proving to be a performance issue.  Roughly one
third of all plugins have been coded, but all the plugins were being called regardless of
whether they had
any code other than a &lt;code&gt;pass&lt;/code&gt; statement in their function body.  So, I quickly went
through the plugins and removed any plugin function that did not have any meaningful
statements.
Once I completed that task, I measured the performance again, and entered the results into
&lt;a href="https://github.com/jackdewinter/pymarkdown/raw/b15a9d1da2d4938f97ef8956c3002a19f0916fe3/perf/2020Feb27%20-%20After%20initial%20refactor%20on%20plugins.xlsx"&gt;this spreadsheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It took me a minute to understand what I was looking at, but it then made sense to me. The
&lt;code&gt;next_line&lt;/code&gt; functions were a large part of the templated plugin functions that were
removed, so the measurements for that function dropped off the list.  This effectively
created n “vacuum” at the top of the measurements, causing other measurements to increase
slightly to compensate for it.   Specifically, the &lt;code&gt;debug&lt;/code&gt; function went from 10.49% of the
execution time to 11.51% of the execution time not because of any changes, but because
the item before it in the list was no longer there.  With that item no longer occupying
that “space”, the &lt;code&gt;debug&lt;/code&gt; function occupied a pro-rated portion of what that time that
item used to occupy.&lt;/p&gt;
&lt;p&gt;Running two extra sets of performance tests, I was able to replicate this behavior of
these performance test both times.  Looking at the clock time for each function alone,
I am not sure if I would have made the same observation as I did with the percentages,
so I was glad that I switched to it!&lt;/p&gt;
&lt;h3 id="setting-context"&gt;Setting Context&lt;a class="headerlink" href="#setting-context" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While it was more evident before the previous performance changes, there was also an issue
with the &lt;code&gt;set_context&lt;/code&gt; function.  Each time any of the plugin functions were called, a
separate call to the &lt;code&gt;set_context&lt;/code&gt; function was being made to establish the context
for any reporting that was done.  I am not sure why I thought that was a good idea,
but it looked like it was causing performance issues before the last change. Now that
I looked at the performance numbers, it was low down on the list, almost inconsequential.&lt;/p&gt;
&lt;p&gt;Sitting back and thinking about it, the reduction of the impact of the &lt;code&gt;set_context&lt;/code&gt;
function on the performance made sense to me.  With fewer plugins having eligible functions
to call, the number of times that the &lt;code&gt;set_context&lt;/code&gt; function was called was reduced at
the same rate.  Just as the &lt;code&gt;next_line&lt;/code&gt; function dropped off the top 25 list, the
&lt;code&gt;set_context&lt;/code&gt; function also dropped off that same list.&lt;/p&gt;
&lt;p&gt;But looking forward, I knew that those functions would soon be resurfacing on the
top 25 list.  I had removed those templated methods in the last section, as they were not
being used.  Somewhere between now and the intial release of the project, I know I have
plans to implement those missing plugins, thereby increasing their impact on the
performance once again.  So, while I could easily say I would do it later, it just made
more sense to me to do it now while I was in the code.  Also, by getting the refactoring
out of the way now, it would give me more time.&lt;/p&gt;
&lt;p&gt;It was a rather quick set of changes to make, and it was done within a couple of hours
including running the scenario tests and gathering the performance measurements.
Looking at the
&lt;a href="https://github.com/jackdewinter/pymarkdown/raw/a8b6f4edc84ab1644c54f3e36b19196fff66b952/perf/2020Feb28%20-%20After%20refactor%20on%20plugins%20to%20remove%20set_context.xlsx"&gt;measurements&lt;/a&gt;,
I had to look far down the list to find the plugin entries, but I found them and
added them to the spreadsheet below the normal area.  Before I removed the templated
functions, there were a combined 62,000 calls to the &lt;code&gt;next_line&lt;/code&gt; and &lt;code&gt;next_token&lt;/code&gt;
functions.  For those calls, there were 1.2 million calls to &lt;code&gt;set_context&lt;/code&gt; which took
0.16 seconds or 3.49% of the execution time.&lt;/p&gt;
&lt;p&gt;Based on those numbers alone, I felt like refactoring that now was still a good thing
to do from a performance point of view.  Maybe the effects of the change would not
show up right away, but I knew that it was quelling a future performance issue that
would have definitely occurred otherwise.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I am not sure I speak for everyone, I have an inkling that most software
developers exist on a spectrum of “so what” to “what if they say…” with respect to
others seeing their code.  If that were not the case, linters for various languages
and numerous articles on how to contribute successfully to a code review would not be
needed.  I know I am using PyLint and Flake8 as linters, and Black as a style formatter,
so I hope I am covered in those areas.  It is the other areas that I am concerned about.&lt;/p&gt;
&lt;p&gt;But, in my normal guest to continually learn, I know that if I do not put the code out
there, I will not get that feedback that I need to learn.  I do know that the parser behind
the linter passes every example in the GFM specification, along with every other case
that I have come up with and run against CommonMark 0.92.  I do know that I have a good
handle on what the initial group of rules should be, based on the rules as defined by
MarkdownLint.  I must put my faith in the work that I have done to architect
and design the project to meet my goals.&lt;/p&gt;
&lt;p&gt;With that bit of deep thinking out of the way, I am looking at the issues list with
a new eye to try and figure out what the minimum set of features that I need to have
really is.  What are the things that I will regret not having done before I release?
The answer to that question, however, is something for another article!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having resolved a number of other items on the issues list, there is once glaring one
that I need to resolve before I can use this project myself: a YAML/simple front loader.
Without it, using this linter on my own blog posts is a no-go.  As such, I tackle that!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:andYes"&gt;
&lt;p&gt;And yes, if that statement sounds wishy-washy, it is because it is. &lt;a class="footnote-backref" href="#fnref:andYes" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Measured Performance Increases</title><link href="https://jackdewinter.github.io/2021/03/01/markdown-linter-road-to-initial-release-measured-performance-increases/" rel="alternate"></link><published>2021-03-01T00:00:00-08:00</published><updated>2021-03-01T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-03-01:/2021/03/01/markdown-linter-road-to-initial-release-measured-performance-increases/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/22/markdown-linter-road-to-initial-release-starting-performance/"&gt;last article&lt;/a&gt;, I focused on
starting to gain experience with finding and improving performance on the PyMarkdown
project using cPython and SnakeViz. In this article, I talk about applying that
knowledge and doing more performance tuning on the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the last article, I earned first-hand …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/22/markdown-linter-road-to-initial-release-starting-performance/"&gt;last article&lt;/a&gt;, I focused on
starting to gain experience with finding and improving performance on the PyMarkdown
project using cPython and SnakeViz. In this article, I talk about applying that
knowledge and doing more performance tuning on the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the last article, I earned first-hand experience in profiling the PyMarkdown
project.  While getting that learning accomplished, I also managed to get a big
performance boost from writing a simple facade in
front of the Python logging libraries.  That is probably the only simple and big
performance boost that I am going to get, so I know I am going to have to start
digging to find the more difficult items to optimize.  And I am ready for that
work!&lt;/p&gt;
&lt;p&gt;From experience, I am also aware that not everything I am going to try will work.
I was lucky with the logging facade… that was just one big performance issue that
was extremely obvious.  This effort is still new, so I am hoping that I am still in
the honeymoon period.  While it is not the same as a
&lt;a href="https://politicaldictionary.com/words/honeymoon/"&gt;political honeymoon period&lt;/a&gt;,
it does share some characteristics with it.  Namely, it is during this period that
a lot of the performance improvements are obvious or easy to arrive at.  They might
entail some work, but there will be a very low failure rate.&lt;/p&gt;
&lt;p&gt;Here is hoping that the honeymoon lasts for a while longer!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/88ad9002b296edc2763e498cb9fc2c99e9e74c60"&gt;13 Feb 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/902fbfbdffb4fb9684e00a8d973e53814d393368"&gt;20 Feb 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="dipping-my-toes-into-the-waters-of-performance"&gt;Dipping My Toes Into the Waters of Performance&lt;a class="headerlink" href="#dipping-my-toes-into-the-waters-of-performance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was with a lot of nervousness that I started to work on performance improvements to
the project.  I know from experience that I can easily get lost in improving the
execution of an application, and this project is no different.  I need to make sure
that I focus on keeping this effort timeboxes so that I can get back to getting ready
for the initial release without too much of a delay.&lt;/p&gt;
&lt;p&gt;In documenting this work, I have tried to keep the explanations to a minimum, but I
am also trying to balance that with solid explanations of why I chose that
improvement and the thought processes around that decision.  Please bear with me as
I try and find that balance point between those two competing goals!&lt;/p&gt;
&lt;h3 id="starting-at-the-beginning"&gt;Starting At The Beginning&lt;a class="headerlink" href="#starting-at-the-beginning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using
&lt;a href="https://docs.python.org/3/library/profile.html#module-cProfile"&gt;cProfile&lt;/a&gt;
and
&lt;a href="https://jiffyclub.github.io/snakeviz/"&gt;SnakeViz&lt;/a&gt;,
I captured information about running the PyMarkdown project over the Markdown pages that
comprise this website.  This is what I initially saw:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-1.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;Looking at that information, the two lines that jumped out at me were the first
line, &lt;code&gt;debug&lt;/code&gt;, and the fourth line, &lt;code&gt;isEnabledFor&lt;/code&gt;.  These two functions were both part
of the recent work I did to improve the speed of debugging.  As logging was still showing
up high on the list, it was obvious to me that I needed to take another look and see
if I could fine tune it anymore.&lt;/p&gt;
&lt;p&gt;After looking at the code, the one line that seemed to me to be the most expensive was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabledFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The way I thought about it, every time that the &lt;code&gt;debug&lt;/code&gt; logging method was called, this
function was being called in the base of the Python &lt;code&gt;logging&lt;/code&gt; library.  While it was okay
to have that happen, I decided that it was too expensive to happen every time that
function was called, and it needed to be rewritten.&lt;/p&gt;
&lt;p&gt;To reduce the cost of calling that library function, it was necessary to change the
logging requirements of the project to achieve a bit of “wiggle room” to allow for the
change to
occur.  In this situation, the requirement that I changed was the ability to dynamically
change the logging level at any time.  Because of the way that the PyMarkdown project
is setup, it is highly unlikely that anyone will want to change the logging level in
the middle of a Markdown file scan.  As such, it seemed like it was a good thing to
trade off on.&lt;/p&gt;
&lt;p&gt;To replace that one line, I started by adding some extra code to the &lt;code&gt;ParserLogger&lt;/code&gt;
class as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;__global_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_logger&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_logger&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_info_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabledFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_debug_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabledFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__local_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserLogger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__global_count&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__reset_if_needed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ParserLogger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__global_count&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__local_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__local_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserLogger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__global_count&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_info_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabledFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_debug_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabledFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sync_on_next_call&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Sync the local instance of the logger on the next call.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;ParserLogger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__global_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of calling the &lt;code&gt;isEnabledFor&lt;/code&gt; function each time, I added some code to
cache the results of calling that function in &lt;code&gt;DEBUG&lt;/code&gt; mode.
To keep the ability to change the logging level alive, I added the &lt;code&gt;sync_on_next_call&lt;/code&gt;
function to set a class level member variable.  Then, instead of calling the
&lt;code&gt;isEnabledFor&lt;/code&gt; function, I replaced that line with these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__reset_if_needed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_debug_enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My hope was that by replacing the library call with the cached values, it would
improve performance.  But, as with any performance change, the only way to check is
to run tests after the change to show any changes.  Running those tests again, this
is the information that SnakeViz showed:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-2.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;The results?  The total time for &lt;code&gt;debug&lt;/code&gt; went from 1.3 seconds in first place to 0.5
seconds in fifth place.  The entry for &lt;code&gt;isEnabledFor&lt;/code&gt; went from 0.7 seconds in fourth
place to so far down on the list that I did not bother looking for it.  It was just the
first improvement, but that was a good one!  It took me only minutes to finish up
that change by implementing the same functionality for the &lt;code&gt;INFO&lt;/code&gt; related functions, before
moving on to the next change.&lt;/p&gt;
&lt;h2 id="plugin-performance"&gt;Plugin Performance&lt;a class="headerlink" href="#plugin-performance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before talking about this change, I want to address something important with measuring
performance: the measurements are volatile.  Especially with very fine differences
between measurements, it is very to measure the performance of whatever is
being changed without any changes, apply those changes, and then measure the performance
again with the changes.  In my case, I get things ready to go, use Git’s &lt;code&gt;stash&lt;/code&gt; command
to save the changes, restoring the stash before I take the second set of measurements.
If I had not done that, I would have been very surprised that the time taken for the
&lt;code&gt;debug&lt;/code&gt; statement to execute had crept up about 0.15 seconds.  I’ll speak about that
more at the end of this section.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-3.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;Examining the performance samples, the two lines that struck me as odd were the third line
containing &lt;code&gt;next_line&lt;/code&gt; and the fourth line contained &lt;code&gt;next_token&lt;/code&gt;.  Both these functions
exist as part of the plugin support and I could not think of any existing plugin that
required an examination of both lines and tokens.  At the same time, within a given
range, those two duration measurements were equal.&lt;sup id="fnref:whatIsEqual"&gt;&lt;a class="footnote-ref" href="#fn:whatIsEqual"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Given the requirement that PyMarkdown plugins only need to be called when they implement
a given function, I did some digging and tested this assignment out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_next_token_implemented_in_plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"next_token"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on some digging I did, this assignment sets the value of the member variable
&lt;code&gt;__is_next_token_implemented_in_plugin&lt;/code&gt; to indicate whether a given plugin
implements a given function, in this case the &lt;code&gt;next_token&lt;/code&gt; function.  After tests
confirmed that it was working, I added some extra code to the &lt;code&gt;apply_configuration&lt;/code&gt;
function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_next_token_implemented_in_plugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enabled_plugins_for_next_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, in the &lt;code&gt;next_token&lt;/code&gt; function of the &lt;code&gt;PluginManager&lt;/code&gt; class, I changed the
plugin notification code from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enabled_plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enabled_plugins_for_next_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result was that the plugin function &lt;code&gt;next_token&lt;/code&gt; was only called when it was
defined in the plugin itself, not in the base class.  After repeating this process for
the &lt;code&gt;next_line&lt;/code&gt; function, I ran the performance tests again:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-4.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;Instead of those values both being called, it now looked like the roughly 5.6 seconds
was being split between the two of them.  Another good start!&lt;/p&gt;
&lt;p&gt;As for the increase in the &lt;code&gt;debug&lt;/code&gt; function execution time?  I am not sure what
did it, but the total time duration was roughly equal between the before and after
samples, as were the next 2 to 3 items in the sample.  That means the process is working!
But if I was only comparing the sample to the previous sample taken under different
circumstances, I may have come to some other conclusion.  The key to getting these
good measurements was to ensure I was taking the before and after measurements within
minutes of each other.&lt;/p&gt;
&lt;h3 id="excessive-use-of-the-len-function"&gt;Excessive Use of the Len function&lt;a class="headerlink" href="#excessive-use-of-the-len-function" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Following my now established process, I ran the performance tests again to look for the
next item that caught my eye:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-5.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;This time, it was the line that includes &lt;code&gt;built-in method builtins.len&lt;/code&gt;.  Parsing any
kind of language is string intensive, so I did expect this measurement to be high, but
I did not expect it to be that high.  Digging into the code, I found a few things
that I thought I could change to make the code perform better.&lt;/p&gt;
&lt;p&gt;The first thing that I found were debug statements that included calls to &lt;code&gt;len&lt;/code&gt; that
did not provide any additional information.  Statements like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"parsed leaf&amp;gt;&amp;gt;$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"parsed leaf&amp;gt;&amp;gt;$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leaf_tokens&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where the first statement is already implicitly providing the length of the array by
simply counting the number of elements displayed in the array’s debug output.  By
removing the second statement, I was able to make it more performant without changing
any information, just the way the information would be obtained in the future. Similarly,
there were cases where I was just logging information in the form of the second statement,
where the information from the first statement would suffice.  Both those changes were
easy to look for and make across the code base.&lt;/p&gt;
&lt;p&gt;Another change that I did was to cache the results of the &lt;code&gt;len&lt;/code&gt; function for a given
string within a single function.  There were quite a few cases where I was calling
the &lt;code&gt;len&lt;/code&gt; function 2 to 4 times within a function, or more if I called it from within
a loop.  In those cases, I found the first place in that function where it was used, say:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_parse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and replace it with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;string_to_parse_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;string_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;string_to_parse_length&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that code tested, I then proceeded to replace every other instance of
&lt;code&gt;len(string_to_parse)&lt;/code&gt; inside of that function with &lt;code&gt;string_to_parse_length&lt;/code&gt;
before testing again.&lt;/p&gt;
&lt;p&gt;That set of changes resulted in many modifications over most of the files in the project,
but it was accomplished quickly.  Once completed, the performance tests showed the
results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-6.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;The line that includes &lt;code&gt;built-in method builtins.len&lt;/code&gt; went from 6th place at
0.42 seconds to 17th place at 0.11 seconds.  At a solid 0.3 second difference, it
was a good optimization!&lt;/p&gt;
&lt;h3 id="going-back-to-logging"&gt;Going Back To Logging&lt;a class="headerlink" href="#going-back-to-logging" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Performance is not something you can measure once and be done with it.  It must be
continuously examined again and again to see how the program peforms under different
circumstances.  When I looked at this set of performance tests:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-7.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;I wondered if I had stopped optimizing the logging code too early.  As that code is the
most often called code in the project, I decided to spend some extra time looking at it.
When I did, I realized that if I traded my Don’t-Repeat-Yourself code for performance on
a limited scope, I could rewrite:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__reset_if_needed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ParserLogger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__global_count&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__local_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__reset_cache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By doing this, I was avoiding a function call by performing the same action
directly in the function, often referred to as inling.  Only in
those cases where the counts had changed, did the code need to reset the cache.
Given that I was pretty sure that changing logging levels was going to be an
extremely rare occurrence, I felt that this was an acceptable trade-off.&lt;/p&gt;
&lt;p&gt;This was a very localized change, so it was easy to make and test:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-8.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;With that small change, I reduced 1.8 seconds of duration between the first two lines
with 0.7 seconds of the new first line.  That was worth it!&lt;/p&gt;
&lt;h3 id="bending-the-rules-is-part-of-the-game"&gt;Bending The Rules Is Part Of The Game&lt;a class="headerlink" href="#bending-the-rules-is-part-of-the-game" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Looking at the next set of outputs from the performance tests:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-9.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;one thing was obvious. I was not going to be able to avoid looking at the
&lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function any longer.   But this one function was a tough
one.  This is the main function through which all the container processing and leaft
processing gets handled.  Without
it, the container block processing wouldn’t be done, and it wouldn’t be handing off the
leaf block processing as designed.  This was a pivotal function, but I was not seeing any
obvious places where I could make a good impact on the code’s performance.&lt;/p&gt;
&lt;p&gt;Thinking a bit about how I made the requirements trade-offs for the previous items,
I started thinking about how I could make a similar trade in requirements here.
Unfortunately, nothing was coming to mind at all.  That is, until I looked through
the function and realized that there was one thing I hadn’t considered: removing the
logging.&lt;/p&gt;
&lt;p&gt;Now, removing the logging itself would be harmful, as that logging had
helped me debug issues quite often, so the cost of outright removing the logging was
prohibitively high.  It would be like trying to tie your shoes in a knot while wearing a
cast on one hand and slinging a yoyo with the other hand.  However, I realized that if
I commented out the log statements, it would have the same effect as removing the log
statements.  Also, by commenting out those lines, I kept them in the project so that I
could add them back in when I needed them but leave them out during normal operation.&lt;/p&gt;
&lt;p&gt;The trade-off here?  Time to debug would increase if I needed to uncomment the debug
statements.
Thinking about it for a bit, I decided that for this function it was a good trade-off
and commented out every log statement inside of the function.  That resulted in the
following results from the performance tests:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-10.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;From 3rd place with 0.55 seconds down to 6th pace with 0.29 seconds.  At roughly half
the previous execution time, it was a good trade-off to make.  Granted, it is bending
the rules, but in a good way.&lt;/p&gt;
&lt;h3 id="there-is-a-limit-to-bending-the-rules"&gt;There Is A Limit to Bending The Rules&lt;a class="headerlink" href="#there-is-a-limit-to-bending-the-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After looking at the current performance test results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-11.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;it seemed like it was a good process to try again with the &lt;code&gt;__process_inline_text_block&lt;/code&gt;
function.  In my mind, I was worried that I was using this manner of performance
improvement too often, and I needed a hard limit.  In looking at this method,
through which all inline processing is done, I figured I was still within the limits
that I found acceptable.  I was close to what I considered the limit to be, but I
was confident that this change was within that bounds of that limit.&lt;/p&gt;
&lt;p&gt;With that, I repeated the commenting process that I used in the last section on this
function, with the following results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-12.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;While not as dramatic as before, I dropped the &lt;code&gt;__process_inline_text_block&lt;/code&gt; item from
3rd place and 0.37 seconds down to 13th and 0.12 seconds.&lt;/p&gt;
&lt;h3 id="having-some-fun"&gt;Having Some Fun&lt;a class="headerlink" href="#having-some-fun" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the fun things I love about doing performance testing and improving is that you get
to experiment with different approaches to see how they fare.  Looking at the latest
results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-13.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;I knew that I was going to have to get creative with the &lt;code&gt;index_any_of&lt;/code&gt; function.  It is
a simple function but one that is heavily used in the &lt;code&gt;InlineProcessor&lt;/code&gt; class.  During
the parsing of an inline block, the processor looks ahead to find the character which is
any one of a set of characters that denotes the possible start of an inline sequence.
Hence, the &lt;code&gt;index_any_of&lt;/code&gt; is used to find the first instance of any of those characters.
The original version of this function was as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;source_text_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;source_text_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;find_any&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;
        &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Knowing that this enhancement would soon make my to-do list, I had been experimenting on
different algorithms on the side, trying to find one that was better than what I had.
While I tested four variations that failed, I found one that performed better if
the number of characters to find was under 15 characters.&lt;/p&gt;
&lt;p&gt;During my reading on performance, one thing that was mentioned frequently was that many
of the Python builtins were more performant than Python code because it was precompiled
and optimized.  Taking a hint from that, my wining solution rewrote the above function
to leverage the builtin &lt;code&gt;index&lt;/code&gt; as much as possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;first_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_character&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;find_any&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_character&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;first_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;first_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;first_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;first_index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my simple tests, if I kept the length of the &lt;code&gt;find_any&lt;/code&gt; variable to 15
characters or less, it won over the other algorithms.  But those “test” results
did not mean anything if the same impact was not present when tested against the
project’s code.  So, it was time to test it out on the ‘real’ code:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-14.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;Moving from 3rd place with 3.8 seconds down to 9th place with 1.7 seconds of duration
was impressive! With my experience in performance tuning, I wasn’t sure if this was
one of those cases where it looked good in simple tests but failed when inserted
into the host project.  I was glad that it worked well in both situations!&lt;/p&gt;
&lt;h3 id="bending-or-breaking"&gt;Bending Or Breaking?&lt;a class="headerlink" href="#bending-or-breaking" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Remember back a couple of sections where I said there were times to bend the rules and
there were limits to how much you could bend them?  It was after looking at these
test results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-15.png" title="Performance Before Changes"/&gt;&lt;/p&gt;
&lt;p&gt;that I looked at the &lt;code&gt;__get_list_start_index&lt;/code&gt;. I knew I had to be honest with myself about
which side of that limit line this function was on.  The first function that I had
applied that process to was easy to decide on as it was the most heavily trafficked part of
the actual parsing code.  It was a no-brainer to reduce the logging in that function.  The
second function was not as easy of a decision to make, but as the second most heavily
trafficked function, it made sense.&lt;/p&gt;
&lt;p&gt;That left me with trying to figure out where the &lt;code&gt;__get_list_start_index&lt;/code&gt; function stood
in that spectrum.  It was while I was looking at the code that I realized that I needed
to bump this function’s importance up the chain 1 level.  This function was not called
once but twice every time it was needed: once for unordered list block and the second
time for ordered list blocks.&lt;/p&gt;
&lt;p&gt;As soon as I realized that fact, the decision was already made in my mind to go forward
with commenting out the debug statements.  Applying the process, I ran the performance
tests and held my breath:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-16.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;p&gt;Looking for the &lt;code&gt;__get_list_start_index&lt;/code&gt; in the top 15, I did not see it at all.  When
I found it, it was down at the 96th position in the table.  From the 5th place in the
table with 0.29 second down to 96th place with 0.08 seconds.  That was cool.&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Changes" src="https://jackdewinter.github.io/images/road-to-release-4/13-Feb-part-16a.png" title="Performance After Changes"/&gt;&lt;/p&gt;
&lt;h3 id="is-the-honeymoon-over"&gt;Is The Honeymoon Over?&lt;a class="headerlink" href="#is-the-honeymoon-over" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the returns diminishing, as I write this article I am wondering if the honeymoon
period for finding “easy” performance fixes is over.  I do not know if it is or not,
but I do know that I have optimized a lot of the top 10 functions in the list.
This means that I am going to have to work harder for less return from here on out.
I do have a couple of ideas on how to improve things further, but that is for another
article!&lt;/p&gt;
&lt;p&gt;What is really evident to me though is that my current snapshot and seconds approach
to finding new items to try and optimize is almost hitting its limit.  It is becoming
harder to figure out what to try and optimize, and whether any changes help the
performance.  That is something that I am going to have to do some thinking on!&lt;/p&gt;
&lt;h2 id="cleaning-up"&gt;Cleaning Up&lt;a class="headerlink" href="#cleaning-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I was poking around the code, there were a handful of things that I wanted to
clean up, as usual.  When measuring the performance of these changes, most of these
changes resulted in a performance improvement on the order of 0.1 or 0.3 seconds over 10
million iterations.  But more than that, they just seemed like it made sense to clean
these things up for code maintenance reasons.&lt;/p&gt;
&lt;h3 id="return-statements"&gt;Return Statements&lt;a class="headerlink" href="#return-statements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Honest confession time.  I am not perfect.  When I am writing code, I get lost in the
moment, and write the code that I need to write, knowing I will come back and clean it
up later.  Sometimes, that is obvious.  Take this piece of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_length_less_than_or_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;adj_ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlockQuoteProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_quote_character&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yup, I wrote that.&lt;sup id="fnref:facePalmOn"&gt;&lt;a class="footnote-ref" href="#fn:facePalmOn"&gt;2&lt;/a&gt;&lt;/sup&gt;  It took me less than 10 seconds to rewrite
it, but it was me that originally wrote that.  Not:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_length_less_than_or_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;adj_ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
            &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;BlockQuoteProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_quote_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which would have made much more sense.&lt;sup id="fnref:facePalmOff"&gt;&lt;a class="footnote-ref" href="#fn:facePalmOff"&gt;3&lt;/a&gt;&lt;/sup&gt;  But then, we all do things
when we are writing code that we look back on, knowing we can do better.  Part of
my journey in writing this project is understanding that quality in a project is
very iterative.  For example, I found a couple more instance of that pattern in the
project’s code, but thankfully, not anymore.  I am learning to be okay with things like
that. I know I sometimes look at the code and go “What was I on when I wrote that?”, but
I also accept that it is an artifact of how I work.  Focus on the algorithm and clean up
the code later.  It just happens.&lt;/p&gt;
&lt;p&gt;A more frequent find was to find blocks of statements like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;processed_line&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"processed_line&amp;gt;&amp;gt;$&amp;lt;&amp;lt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;processed_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;processed_line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In cases like this, I made sure that the debug statement was not needed and removed it.
At that point, I have one statement that adds another string to its value, and another
statement that returns it.  It was more legible and performant to do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;processed_line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="removing-needless-default-variable-settings"&gt;Removing Needless Default Variable Settings&lt;a class="headerlink" href="#removing-needless-default-variable-settings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another frequent find was a block of statements like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;did_add_definition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;LinkHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__link_definitions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;did_add_definition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at those statements now, I realize that I probably added the &lt;code&gt;if&lt;/code&gt; block or the
&lt;code&gt;else&lt;/code&gt; block after the initial code was written.  While that was acceptable during the
building phase of the project, now that I was getting ready to release, I wanted to
clean scenarios like this up.&lt;/p&gt;
&lt;p&gt;That is why I refactored the code to be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;LinkHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__link_definitions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;did_add_definition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;did_add_definition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, there is no need to do an assignment to False, only to have the &lt;code&gt;False&lt;/code&gt; case
of the &lt;code&gt;if&lt;/code&gt; statement set it to &lt;code&gt;True&lt;/code&gt;.  To me, that is just a useless assignment that
can easily be avoided.  Also, from a readability viewpoint, that double assignment is
confusing to read.  For me, the &lt;code&gt;= False&lt;/code&gt; case stuck in my head in the first example.
In the second example, both &lt;code&gt;= False&lt;/code&gt; and &lt;code&gt;= True&lt;/code&gt; stuck in my head at the same level.
To me, that just makes sense.&lt;/p&gt;
&lt;p&gt;And looking over the code now, I realize I could have just set the variable
&lt;code&gt;did_add_definition&lt;/code&gt; to &lt;code&gt;link_name not in LinkHelper.__link_definitions&lt;/code&gt;.  The learning
continues.&lt;/p&gt;
&lt;h3 id="ternary-statements"&gt;Ternary Statements&lt;a class="headerlink" href="#ternary-statements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am not sure if everyone loves ternary statements, but I do.  For me, these statements
are very useful in cleanly encapsulating the setting of a single value depending on a
given condition.  From my point of view, why type in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;init_bq&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;init_bq&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;when the much shorter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;init_bq&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;init_bq&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is syntactically the same and more concise?&lt;/p&gt;
&lt;p&gt;In all fairness, when I am work on writing the code, I will almost always write
it in a long form.  The best answer that I can give as to why I do that is that I believe
that
ternary statements are great for final states, but not so for intermediate states.  By
leaving the statements in their original long form, I feel more ready to change the
conditions and values if needed.  However, once those are nailed down, its ternary
statements as much as possible!&lt;/p&gt;
&lt;h3 id="single-characters-startswith-and-endswith"&gt;Single Characters StartsWith and EndsWith&lt;a class="headerlink" href="#single-characters-startswith-and-endswith" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This cleanup was more of a pet peeve than any kind of performance improvement.  If
possible, I prefer to keep character references and string references separate. Seeing
as Python does not have a concept of a single character that is distinct from a string,
that is difficult.  For me, I feel that being more “honest” about the input allows me
to better design algorithms that use those inputs to achieve their goals.&lt;/p&gt;
&lt;p&gt;That is why I sent through the code and replaced occurrences of the &lt;code&gt;endswith&lt;/code&gt; and
&lt;code&gt;startswith&lt;/code&gt; function with their character-based equivalents.  That is why I
changed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InlineHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backslash_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;remaining_line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;InlineHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backslash_character&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I realize that it might not seem like a big change, to me, it is a more readable
and more honest form of the condition.&lt;/p&gt;
&lt;h3 id="when-in-rome"&gt;When In Rome…&lt;a class="headerlink" href="#when-in-rome" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Looking around for hints on how to improve performance in Python, I came across a handful
of documents that gave good hints on how to be more Pythonic.  The best way that I can
describe the feeling of these documents is that I need to follow the doctrine: When in
Rome, do as the Romans do.  Basically, if I want to leverage the power of the Python
language, I need to use the features it provides in ways that add clarity and readability
to the code.&lt;/p&gt;
&lt;p&gt;Because of the nature of this project, there is only one place in the entire project where
I found that a common Pythonic concept, list comprehensions, is useful.
&lt;a href="https://book.pythontips.com/en/latest/comprehensions.html"&gt;List comprehensions&lt;/a&gt;
are very Pythonic, involving the simplification of lists in a very performant manner.
I just have not found more than one use for them in the project.  Another very Pythonic
concept is the
&lt;a href="https://book.pythontips.com/en/latest/global_&amp;amp;_return..html#multiple-return-values"&gt;returning of multiple values&lt;/a&gt;
from a function.  While trickery can be used in other languages to get some level of the
same effect, Python’s first-class support for tuples makes this concept very useful and
very easy to use.&lt;/p&gt;
&lt;p&gt;A good example of this is when I changed this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;adjusted_text_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;
    &lt;span class="n"&gt;adjusted_index_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;adjusted_text_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;adjusted_index_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While these statements may look almost the same, I see a large difference in readability.
When I read the first example, the first questions that I usually have are around the
grouping of those two statements.  Are there blank lines before and after to separate them
into a group?  Are they related to each other?  These are some of the questions that I
think about when reading code.&lt;/p&gt;
&lt;p&gt;The second example takes most of those questions and tosses them out the window.  By using
that specific grouping, I feel that I invert the questions I ask, reducing them to one
question: Is there any reason that any one statement should not be in that group?  For me,
that is usually a far easier question to answer.  In that above case, it is a logical
grouping for me as both variables deal with text and the current index into that text.
Used at the start of a function, they communicate that those variables are all being
set to their initial states.&lt;/p&gt;
&lt;p&gt;Of course, there is also a simpler answer: I just think it looks more readable.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing that comes to mind is to answer the question of whether the
project is still in the honeymoon period as far as performance tuning goes.
As I am still seeing reductions in durations
of about 50% and very few experiment failures, I am convinced that I still have at least
a little way to go before it ends.  I am not sure how far, but there still is some time.
But with my desire to get an initial release out and circulating, I know the right
decision currently is to focus on items in the issues list that are blocking the
release.  And that means focusing on those items and not on performance.  And I am okay
with that.&lt;/p&gt;
&lt;p&gt;In terms of finding a balance and getting the project out there, I am feeling good
about that too.  Yes, I got sidetracked on performance. But honestly, I knew
that was going to happen.  I want to make the project better, and I know that focusing
on performance will increase the usability of the project.  I must remember
that people can easily focus on performance with no end in sight.  Unless I want to
succumb to that, I need to make sure I have good solid limits on performance tuning
and what is acceptable.  And I think I found that.&lt;/p&gt;
&lt;p&gt;Through the performance enhancements, I realized something with this round of
enhancements that really had not dawned on me before. Performance, like other parts of
a project, is a requirement that is just as malleable as any other.  Some of the
improvements that I made may appear to be tightening screws here and there, but they
were also flexing and bending requirements.  Caching logging levels?  That was reducing
the requirement to change log levels during program execution.  Caching calls to the
&lt;code&gt;len&lt;/code&gt; function?  That could be seen as reducing the readability of code by centralizing
that call in a location that might not be “correct” for some people.  Commenting out
debug statements?  That was a clear reduction of the immediate debuggability of those
functions to gain some performance.  In each case, it was finding a good balance
between those.  I may have “known” it before, but it was cool to understand it enough
at this point to be able to put it into words.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is one more performance improvement that I will talk about next time, and it
is a doozy of one.  Other than that, I am focusing on getting all the items in
the priority 1 section resolved.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:whatIsEqual"&gt;
&lt;p&gt;If you have ever looked at any polling, they will usually say that a poll is accurate to +/-3%, or something like that.  This same principle is usually applied to performance measurements, with similar levels of accuracy. &lt;a class="footnote-backref" href="#fnref:whatIsEqual" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:facePalmOn"&gt;
&lt;p&gt;Imagine me doing a face palm when I read that piece of code. &lt;a class="footnote-backref" href="#fnref:facePalmOn" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:facePalmOff"&gt;
&lt;p&gt;Going to try and move on now.  Damage done. &lt;a class="footnote-backref" href="#fnref:facePalmOff" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Autism And Dementia</title><link href="https://jackdewinter.github.io/2021/02/28/autism-and-dementia/" rel="alternate"></link><published>2021-02-28T00:00:00-08:00</published><updated>2021-02-28T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-02-28:/2021/02/28/autism-and-dementia/</id><summary type="html">&lt;p&gt;When I started writing these articles, I intended to write one article every month to
help people with and without Autism understand what goes on in my mind.  By exposing how
my Autism affects me, my hope is that each reader will be able to apply some small portion
of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I started writing these articles, I intended to write one article every month to
help people with and without Autism understand what goes on in my mind.  By exposing how
my Autism affects me, my hope is that each reader will be able to apply some small portion
of what they read in these articles.  Every person with Autism manifests their Autism
differently from everyone else.  As such, having a goal of helping everyone with any
connection to Autism would be a tough goal to achieve.  My more modest goal is that each
article will have some impact on at least one person&amp;rsquo;s life.  Maybe it helps someone to
understand a loved one, it encourages someone to be a little kinder to someone with Autism
in their life, or it causes someone to take a minute to read the article and then think
about it. That is why I write these articles, to ignite that spark in my readers.&lt;/p&gt;
&lt;p&gt;You see, that is how I was raised.  I have a great mother who raised three children on
her own starting in the late 1970s - a time where a decision like that was not very
popular.  Over the years, we have talked about the reasons why she did that, and her
response always remained the same: &amp;ldquo;I love you kids, and I knew it
would be hard, but I also knew that I could do it.  So, I did it.&amp;rdquo;  From there, it was
always a solid talk about how her faith in God, as a Roman Catholic, helped her in the
tough times.  There is always a mention of how we often threw roadblocks in her way,
which all three of us blush or laugh at when they are now mentioned.
Outshining all of that, was the firm statement from my mother that, through it
all, her love for us never faltered. And in return, all us kids had one extra best friend
in our lives.&lt;/p&gt;
&lt;p&gt;We were not the only ones that she affected.  By continuing to be involved in her
church, she was fortunate enough to meet, fall in love with, and marry her second
husband, Gerry.  She loved Gerry&amp;rsquo;s kids as her own, often speaking of his kids and his
grandkids with the same love that she has for her own
grandkids.&lt;/p&gt;
&lt;p&gt;Giving back was so wired into her system, that she found a job working
with the Red Cross to provide aide to the elderly, by helping them with everyday things
that they could no longer do.  When we heard stories of the people she helped,
it would be easy to believe that those people were related to our family by
the way my mother talked about them.  Not one to be idle, in her off hours it was rare
that she was not sitting in her favorite chair sewing or knitting.  She used those skills
to make doll clothes for children in need, and baby blankets for newborns at the local
hospital.  Once again, when I asked, she would say that
it kept her busy and that she was giving back to a community that had helped her when
she needed it.  So, she did it.&lt;/p&gt;
&lt;p&gt;It is because of this, that I have started writing these articles and writing in general.
As someone with Autism, I cannot help everyone out there, but perhaps I can help get some
manner of message to some of the people that need it and do my bit to help.  Write the
next great
science fiction novel?  Tried that and failed miserably.  Invent some new software that
will revolutionize the way we do something?  Tried that and did decently okay back in the
1990s.  Write from my heart about how my Autism affects me?  To echo what my mother said
with my own spin: &amp;ldquo;It isn&amp;rsquo;t going to be easy, and I know being vulnerable is hard, but
I know I can do it.  So, I did it.&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;But that bedrock of my life, my mother, is now faltering.  After 75+ years of her life,
my mother is being attacked by the disease known as dementia.  Its effects are brutal.
There was a time when I could pick up the phone and have a good 30-minute conversation
with one of my best friends, now we struggle to have a 30 second conversation that is
coherent.  In the past, we used to laugh at all the stupid things I did as a kid,
now, I try to hold back the tears as I tell my brother and sister about the calls I
have had with my mom.  Instead of talking about our next family gathering with
Mom and all three sibilings, we end up talking about funeral plans and how
we know she is in pain while she is losing her mind.&lt;/p&gt;
&lt;p&gt;The last decent conversation I remember having with my mother is in August, right after
my son&amp;rsquo;s birthday.  It was a bit sketchy in places, and it was obvious that some of her
long-term memory was going, but it was a good conversation.  Every two or three weeks
after that, some element of the conversation dropped away.  It was as if someone was taking
the color out of my mother&amp;rsquo;s life bit-by-bit, and the struggle in her voice to form
sentences was obvious.  After that, it was harder to call her.  I knew that when I called,
it would hang over me like a dark cloud for the next couple of days.  I started making
excuses as to why I could not call her, convincing myself it was for the better.  I was
just scared.  I was losing my best friend.&lt;/p&gt;
&lt;p&gt;This really hit home just after New Year&amp;rsquo;s Day when I called her to wish her a happy
new year.  I wish I could relate to you what that conversation was about, but I honestly
do not have a clue about it myself.  I asked her how she was doing, and she said she was
sad.  And then she mentioned something about children and red and a couple of other things
I could not understand.  Talking with my sister later, she mentioned that she must be
having a good day that I was able to get 1 or 2 coherent minutes out of her.  Most days, my
sister was struggling with her to even get that.  &lt;/p&gt;
&lt;p&gt;That really threw me.  I tried writing an article about Autism after that call, but
nothing came out.  Every time I started to write, I wrote one sentence and stared at the
screen for 15 minutes before giving up.  In each case, I always went back to thinking
about Mom and her dementia.  After a good solid six weeks of repeating that process and
getting nowhere, I had a &amp;ldquo;lightbulb&amp;rdquo; moment.  It was then, that I realized that this was
also affecting me on another level, a more personal level.  I was afraid for me.&lt;/p&gt;
&lt;p&gt;Autism by itself is no walk in the park.  Sure, I have learned to mitigate a lot of it,
but it still a lot of work.  I was lucky to find a second wife later in life, who takes
the time to understand me.  In return, she reasonably asks me to understand her quirks
and accept her for who she is.  Our conversations often reminds me of my conversations
with my mother as I was growing up, trying to figure things out.  Now, instead of being
able to share my happiness with my mother, I see how quickly my mother&amp;rsquo;s dementia is
removing most of the woman that I knew, admired, and loved.  That&amp;rsquo;s chilling.&lt;/p&gt;
&lt;p&gt;You see, as someone with Autism, I have spent my life working on my communication skills
and overcoming a lack of social skills by using the positive aspects of my Autism to
compensate.  Back in August, when my mother&amp;rsquo;s dementia was getting worse, I looked up
the definition of dementia on the
&lt;a href="https://www.mayoclinic.org/diseases-conditions/dementia/symptoms-causes/syc-20352013"&gt;Mayo Clinic&amp;rsquo;s website&lt;/a&gt;,
and it looked like it was tailor made as a nasty list for people with Autism.  In the
Cognitive part of the list, it talks about “difficulty” items. Most people with Autism
struggle with all/some of these “difficulty” items and, if they are lucky, can find ways
to compensate for all/some of those items.  The thought of losing some of my ability
to mitigate my Autism sucks.  The &lt;em&gt;Psychological Changes&lt;/em&gt; part of the list is not much
better.  To be truthful, I know that my Autism has caused me to experience at least
4 out of the 7 things on that list in some form.  It is only by working hard and trusting
in my doctor, my psychologist, and my friends that I now keep their influence down to a
bare minimum.  But if they get worse?&lt;/p&gt;
&lt;p&gt;For me, part of having Autism is being hyper-aware of things around me.  It is hard to
miss things when you brain is busy analyzing things for most of your life.  At 52
years of age, I am noticing that I am forgetting some little things here and there, mostly
short-term stuff.  There are times where I have difficulty in finding the right words to
communicate something, only for the word that I am looking for to be something simple.
And as funny as it sounds, I am forgetting where I placed my keys more often these days,
something that almost never happened in the past.  And with what my mother is going
through, I sometimes wonder if I am getting some early tinges of dementia, or if this
is just normal&amp;hellip; or at least as normal as a person with Autism can get.&lt;/p&gt;
&lt;p&gt;But I am not one to wallow, I am one to get out there and do stuff.  I know I get knocked
down from time to time, but I also know that I am not alone.  My family, in their own
unique ways, helps to give me the courage to dust myself off and stand up again.&lt;/p&gt;
&lt;p&gt;Am I worried about my mother?  Yes.  But the only thing I can do there is to try and call
her to let her know I am here, and to send peaceful thoughts her way.&lt;/p&gt;
&lt;p&gt;Am I still worried that the same thing that is afflicting my mother will one day afflict
me?  Yes.  But I hopefully have some time before that happens, I can look for positive
actions that I can do to help me combat this disease.&lt;/p&gt;
&lt;p&gt;Does my writing help me as much as it helps others?  Yes.  For me, I think that my
writing helps me as much as others by acting like my own
&lt;a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging"&gt;rubber duck&lt;/a&gt;.
It hurts to talk about things sometimes, but if I can help one person in some way, it
is good enough for me.&lt;/p&gt;
&lt;p&gt;So, I did it.&lt;/p&gt;</content><category term="Autism"></category><category term="Autism"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Starting Performance</title><link href="https://jackdewinter.github.io/2021/02/22/markdown-linter-road-to-initial-release-starting-performance/" rel="alternate"></link><published>2021-02-22T00:00:00-08:00</published><updated>2021-02-22T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-02-22:/2021/02/22/markdown-linter-road-to-initial-release-starting-performance/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/15/markdown-linter-road-to-initial-release-refactoring/"&gt;last article&lt;/a&gt;, I focused
on refactoring that was performed to clean up the code base of the PyMarkdown
project.  In this article, I talk about how I started to learn about finding and
implementing performance improvements in the PyMarkdown project using cPython and
SnakeViz.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/15/markdown-linter-road-to-initial-release-refactoring/"&gt;last article&lt;/a&gt;, I focused
on refactoring that was performed to clean up the code base of the PyMarkdown
project.  In this article, I talk about how I started to learn about finding and
implementing performance improvements in the PyMarkdown project using cPython and
SnakeViz.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have mentioned before that I was starting to investigate performance measurements
for the project, it was time to bring those measurements and my observations on those
measurements into the light.  Based on
initial measurements, I knew there was a big performance
degredation going on with the logging library and my use of it.  If I wanted the
PyMarkdown project to be even remotely performant, I knew I needed to deal with at
least that performance refactoring.  At the same time, as I knew I would need to apply
other performance improvements on the project down the road.  So, I just figured it was a
good time to learn about the analyze-deduce-change cycle of performance metrics and how
to perform it with a Python program.&lt;/p&gt;
&lt;p&gt;Basically, I needed to spend some time learning how to properly measure and improve
the performance of the PyMarkdown project.  I was stoked!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/c13f2d6ff8213b65d22f4e1a8cb358b1a15ae3e5"&gt;03 Feb 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/0337dbbf0af39efa5f31e5ebceb45fb3d9862e05"&gt;13 Feb 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="dipping-my-toes-into-the-water"&gt;Dipping My Toes Into the Water&lt;a class="headerlink" href="#dipping-my-toes-into-the-water" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having upgraded the PyMarkdown project to
&lt;a href="https://jackdewinter.github.io/2021/01/25/markdown-linter-delving-into-the-issues-18/#upgrading-to-python-38"&gt;Python 3.8&lt;/a&gt;,
I was able to use two Python tools that I was eager to learn from:
&lt;a href="https://docs.python.org/3/library/profile.html#module-cProfile"&gt;cProfile&lt;/a&gt;
and
&lt;a href="https://jiffyclub.github.io/snakeviz/"&gt;SnakeViz&lt;/a&gt;.
The best way to think about these tools is that cProfile allows the Python interpreter
to collect information on what happened during the execution of a program and
SnakeBiz is a useful way to present that information.  While I have tried to use cProfile
before to analyze this project, I found it too cumbersome to read effectively.  For my
use, I needed a GUI display that I could more easily navigate through.  For me,
SnakeViz provided just that interface.&lt;/p&gt;
&lt;h3 id="getting-started"&gt;Getting Started&lt;a class="headerlink" href="#getting-started" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Getting started using these tools was easy.  In the project’s home directory, I
have a script, named &lt;code&gt;run_blog.cmd&lt;/code&gt;, that I use to run the PyMarkdown project over all
my articles for this site.  This script is very basic and very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run python main.py --stack-trace -d MD018,MD020 ../blog-content/website/content/articles/SoftwareQuality
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, I copied that script to a file named &lt;code&gt;prof_blog.cmd&lt;/code&gt; and changed the contents
of the script file to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run python -m cProfile -o p0.prof main.py --stack-trace -d MD018,MD020 ../blog-content/website/content/articles/SoftwareQuality
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was it!  Nothing else was needed.  Running that new script, a new &lt;code&gt;p0.prof&lt;/code&gt; file
was deposited in the project directory.  To save time, I created a new file (with yet
another imaginative name) named &lt;code&gt;show_profile.cmd&lt;/code&gt; and place the following text into
that file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run snakeviz p0.prof
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running that script, it was obvious that it started a webserver on the command line, and
then proceeded to open up a new tab in my browser to show me the results on.&lt;/p&gt;
&lt;h3 id="looking-for-the-obvious-starting-point"&gt;Looking For The Obvious Starting Point&lt;a class="headerlink" href="#looking-for-the-obvious-starting-point" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I will not go into how to use SnakeViz, as I believe the
&lt;a href="https://jiffyclub.github.io/snakeviz/"&gt;SnakeViz homepage&lt;/a&gt;
does a real good job of walking users through the required steps.  It was presenting a lot
of information, and I needed to find a way to focus and walk through the data.  While I
did confirm that I need a GUI to help me walk through the data, it was not the graphs that
were helping me out.  It was being able to click on various parts of the tables and dig
down into the performance of the items that I clicked on.  That is what really helped
me understand things!&lt;/p&gt;
&lt;p&gt;After getting more comfortable with the output, I cleaned everything up and reran the
&lt;code&gt;prof_blog.cmd&lt;/code&gt; script, followed by the &lt;code&gt;show_profile.cmd&lt;/code&gt; script and was greeted
with this information:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before Logging" src="https://jackdewinter.github.io/images/road-to-release-3/before-logging-refactor.png" title="Performance Before Logging Change"/&gt;&lt;/p&gt;
&lt;p&gt;As this learning was being done in the background as I was working on the project, I let
that picture sink in for a bit while I thought about the implications in my spare time.
But the results were obvious to me.  Based on what I
was seeing, the first 5 items in the performance list were taking 54 seconds of execution
time, with none of those items having anything to do with the processing.  That time was
being spent processing all the debug information that I had in place to help me diagnose
issues.  But as far as I knew, with the project at its default settings, the project was
using the &lt;code&gt;WARN&lt;/code&gt; debug level, and should not be outputting anything
to the logs.  As it should not be outputting anything to the logs, it logically
followed that it should not be creating debug strings that are used to place information
in those logs.  I was stumped.&lt;/p&gt;
&lt;h3 id="another-try-with-a-fresh-mind"&gt;Another Try With A Fresh Mind&lt;a class="headerlink" href="#another-try-with-a-fresh-mind" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After fixing some issues in the project, I returned
to this problem with a fresh mind.  This time, as I looked over the code, I noticed the
issue almost right away.  While the information was not being output to the logs, it was
being prepared and formatted assuming it was being added to the logs.  A good example of
this is this snippet of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"coalesce_text_blocks&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;&amp;lt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_value_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whether the information gets logged or not, the interpreter is going to go
through the process of preparing the string passed as a parameter into the &lt;code&gt;debug&lt;/code&gt;
function.  In this case, it is going to dereference the &lt;code&gt;first_pass_results&lt;/code&gt; list
using the index &lt;code&gt;coalesce_index&lt;/code&gt; and passing that into the
&lt;code&gt;ParserHelper.make_value_visible&lt;/code&gt; function.  Yup, that is the same &lt;code&gt;make_value_visible&lt;/code&gt;
function that is in the number 3 position on the above list.  To make matters worse,
the &lt;code&gt;first_pass_results&lt;/code&gt; list contains tokens that made it through the first pass of
parsing.  This means that the &lt;code&gt;debug_string&lt;/code&gt; function of the &lt;code&gt;MarkdownToken&lt;/code&gt; class is
being called for the token inside of the &lt;code&gt;make_value_visible&lt;/code&gt;.  And yes, that is the
same &lt;code&gt;debug_string&lt;/code&gt; that is in the number 1 position of that same list.&lt;/p&gt;
&lt;p&gt;Basically, every time that line is hit, the interpreter prepares the data, whether it is
needed or not.  For this line, that contributes to the &lt;code&gt;debug_string&lt;/code&gt; function being in
position 1 of that list and the &lt;code&gt;make_value_visible&lt;/code&gt; function being in position 3 of that
same list.  It was then that I knew that I needed to find a way to log the information
but delay evaluation of any parameters passed to it until the logger knows that it will be
logging that information.&lt;/p&gt;
&lt;h3 id="the-benefits-of-experience"&gt;The Benefits Of Experience&lt;a class="headerlink" href="#the-benefits-of-experience" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having faced issues like this before, I had some ideas on how to proceed, I just did not
know if Python supported any of them.  The best approach that I had in my developer’s
toolkit was to use a
&lt;a href="https://en.wikipedia.org/wiki/Facade_pattern"&gt;Facade pattern&lt;/a&gt;
to create a class that would handle any transformations of the parameters that I required,
but only apply those transformations if the information was actually going to be logged.&lt;/p&gt;
&lt;p&gt;Throwing something together quickly, I came up with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ParserLogger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_logger&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_logger&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log_format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEnabledFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__munge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log_format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__munge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log_format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;split_log_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;log_format&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;recipient_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_log_format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_array_index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recipient_array&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_array_index&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;recipient_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_array_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
                    &lt;span class="n"&gt;split_log_format&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_array_index&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;recipient_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_array_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
                    &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_value_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_array_index&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recipient_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully, the &lt;code&gt;__init__&lt;/code&gt; function and the &lt;code&gt;debug&lt;/code&gt; functions are self-explanatory as they
were the simplest parts of the class to write.  The rest took a bit of work to get working
right, but it was worth it.  Instead of passing in logger-formatted strings, I decided to
use my own formatting.  Therefore, in place of using the &lt;code&gt;%s&lt;/code&gt; sequence to key a
substitution as with normal logging
calls, I opted for the simpler &lt;code&gt;$&lt;/code&gt; sequence.  For debugging uses, I do not want to worry
about what type of object is being passed or making sure it is cast to a &lt;code&gt;string&lt;/code&gt; type.
That is why I created the &lt;code&gt;make_value_visible&lt;/code&gt; function.  But to seamlessly incorporate
those requirements together was going to take some work.&lt;/p&gt;
&lt;p&gt;The first thing that I needed to do was to create a list that would hold the information.
This meant that I had to have enough space for each part of the &lt;code&gt;log_format&lt;/code&gt; string
between &lt;code&gt;$&lt;/code&gt; characters and for each argument passed into the function.&lt;sup id="fnref:yes"&gt;&lt;a class="footnote-ref" href="#fn:yes"&gt;1&lt;/a&gt;&lt;/sup&gt;  With that
list created and initialized to &lt;code&gt;None&lt;/code&gt; instances, I then needed to populate that
list.  The function iterates from &lt;code&gt;0&lt;/code&gt; to the index that is 1 less than the size of the
list.  When the index is an even number (&lt;code&gt;if next_array_index % 2 == 0:&lt;/code&gt;), the next item
is populated with the information from the &lt;code&gt;log_format&lt;/code&gt; string split on the &lt;code&gt;$&lt;/code&gt;
character.  When the index is odd (the &lt;code&gt;else&lt;/code&gt; clause), the next item is populated with the
results of the next argument being processed through the &lt;code&gt;make_value_visible&lt;/code&gt; function.
Essentially, between the module operator &lt;code&gt;%&lt;/code&gt; and the divisor operator &lt;code&gt;/&lt;/code&gt;, the loop
takes elements from each list, alternating which list it is taking a value from.&lt;/p&gt;
&lt;p&gt;For me, the important part to concentrate on is that the formatting of the information,
including the call to the &lt;code&gt;make_value_visible&lt;/code&gt; function, is only done after the &lt;code&gt;debug&lt;/code&gt;
function has determined that debug logging is enabled.  If it is not enabled, the only
overhead was calling the function with the specified parameters and the &lt;code&gt;if&lt;/code&gt; statement at
the start of the &lt;code&gt;debug&lt;/code&gt; function. For me, that was ideal!&lt;/p&gt;
&lt;p&gt;And to be honest, in the first couple of iterations, I had to work on how the list was
populated with the information from the other two lists.  In the end, the modulo approach
was the most efficient and most tidy, so it won out.  I tried to be fancy with how I
was populating the lists, but they did not pan out.  The clear winner was the above
solution that used little code and basic high school math.&lt;/p&gt;
&lt;h3 id="almost-there"&gt;Almost There&lt;a class="headerlink" href="#almost-there" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It only took a couple of hours to come up with the &lt;code&gt;ParserLogger&lt;/code&gt; prototype, which was
encouraging.  Writing a couple of simple throwaway scenario tests, I was able to verify
that it was working properly almost right away.  There was just one small problem.
The source of the information.&lt;/p&gt;
&lt;p&gt;When any good logger logs information, it includes information that describes where
the log information was submitted from.  For example, in its default configuration,
the Python logging library output for our sample logging line is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DEBUG&lt;/span&gt;    &lt;span class="nv"&gt;pymarkdown&lt;/span&gt;.&lt;span class="nv"&gt;coalesce_processor&lt;/span&gt;:&lt;span class="nv"&gt;coalesce_processor&lt;/span&gt;.&lt;span class="nv"&gt;py&lt;/span&gt;:&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="nv"&gt;coalesce_text_blocks&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;[&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;,&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:&lt;span class="k"&gt;end&lt;/span&gt;:]&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But with the current implementation of the &lt;code&gt;ParserLogger&lt;/code&gt; class, the same logging location
was being logged for each line of information: the line in the &lt;code&gt;ParserLogger&lt;/code&gt; class where
the lower-level logger was being called.  From my experience, I expected this, so I turned
to the
&lt;a href="https://docs.python.org/3.8/library/logging.html#logging.Logger.debug"&gt;Python logging documentation&lt;/a&gt;
to look for something very specific.  On every platform where I have seen it supported,
the thing I was looking for was a parameter to the &lt;code&gt;debug&lt;/code&gt; function that, on logging
packages where it is supported, always had “stack” in the title.  This information helped
me to weed out parameters that were not helpful, landing on: &lt;code&gt;stacklevel&lt;/code&gt;.  Directly from that documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The third optional keyword argument is stacklevel, which defaults to 1. If greater than 1, the corresponding number of stack frames are skipped when computing the line number and function name set in the LogRecord created for the logging event. This can be used in logging helpers so that the function name, filename and line number recorded are not the information for the helper function/method, but rather its caller. The name of this parameter mirrors the equivalent one in the warnings module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Loggers are not a new feature in programming languages, and logging helpers are almost
as old as the logging features in those programming languages.  It stood to reason that
Python would have support for this, but I was surprised to find out that it was only
added in Python 3.8.  Lucky for me, as the
&lt;a href="https://stackoverflow.com/questions/49987228/alter-python-logger-stack-level"&gt;workarounds&lt;/a&gt;
are workarounds that I would prefer not to resort to.&lt;/p&gt;
&lt;p&gt;Armed with this information, I changed this line in the sample:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__my_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and everything just worked.  After that, I did a bit of cleaning up to make the
class more production ready before applying it on a grand scale.&lt;/p&gt;
&lt;h3 id="the-big-changeover"&gt;The Big Changeover&lt;a class="headerlink" href="#the-big-changeover" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While this would not be last big performance changeover in the history of the project,
it was the first.  As changeovers go, it was easy to do but large in scope.
I searched for the text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LOGGER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;at the top of each file and replaced it with the text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;POGGER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, it was a simple manner to search through the files, looking for any instances
of &lt;code&gt;LOGGER.debug&lt;/code&gt; and changing them to &lt;code&gt;POGGER.debug&lt;/code&gt;. As I changed the module the name
of the variable from &lt;code&gt;LOGGER&lt;/code&gt; to &lt;code&gt;POGGER&lt;/code&gt;, I also looked for any instances of &lt;code&gt;%s&lt;/code&gt; in the
string and transferred them over to the new &lt;code&gt;$&lt;/code&gt; syntax.  Finally, if there were any calls
to &lt;code&gt;str&lt;/code&gt; or &lt;code&gt;make_value_visible&lt;/code&gt;, I removed them, leaving only the bare minimum required
to log the requested information.&lt;/p&gt;
&lt;p&gt;A great example of this change is the sample logging line from above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"coalesce_text_blocks&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;&amp;lt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_value_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;POGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"coalesce_text_blocks&amp;gt;&amp;gt;&amp;gt;&amp;gt;$&amp;lt;&amp;lt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Smaller, more compact, and no need to call the &lt;code&gt;make_value_visible&lt;/code&gt; when passing in
the value.  A win from many viewpoints!&lt;/p&gt;
&lt;p&gt;It was a long process, but I was able to check along the way to see if the scenario tests
were still passing, correcting any errors as I went.  This helped me by breakig up that
long, boring task into smaller sections.  Then, after a lot of search-and-replace work, I
completed
the last change and ran the performance metrics again, and I was greeted with this
information.&lt;/p&gt;
&lt;p&gt;&lt;img alt="After Logging" src="https://jackdewinter.github.io/images/road-to-release-3/after-logging-refactor.png" title="Performance After Logging Change"/&gt;&lt;/p&gt;
&lt;p&gt;Phew! All that work paid off.  From experience, I knew I was very lucky to have something
that was so obviously off balance as my first performance refactoring.  I went from having
the first 5 items in the performance list taking 54 seconds to a slightly different set
of 5 items taking 1.446 seconds to complete.  That was a win.&lt;/p&gt;
&lt;p&gt;I want to stress again for any readers: this was luck.  In my mind, there was a greater
chance that I would be met with a different set of 5 items at the start of the list that
were harder to improve.  This was a slam dunk of a change because it was so obvious.
Keeping that in mind, it was time to move on to other tasks.&lt;/p&gt;
&lt;h3 id="about-that-logger-name"&gt;About That Logger Name?&lt;a class="headerlink" href="#about-that-logger-name" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Oh… &lt;code&gt;POGGER&lt;/code&gt;?  Why &lt;code&gt;POGGER&lt;/code&gt;?  I thought that &lt;code&gt;PERFORMANCE_LOGGER&lt;/code&gt; was too long. I
thought that &lt;code&gt;PLOGGER&lt;/code&gt; was too short and I felt it might be confused with &lt;code&gt;LOGGER&lt;/code&gt; on a
quick
read.  After a couple of simple experiments, with me as the guinea pig, I was clearly
able to distinguish between &lt;code&gt;POGGER&lt;/code&gt; and &lt;code&gt;LOGGER&lt;/code&gt; in some test files.  Because of the
different replacement sequence (&lt;code&gt;$&lt;/code&gt;) and no need for calling &lt;code&gt;str&lt;/code&gt; around non-string
parameter, I felt that having that distinguished difference was important.&lt;/p&gt;
&lt;h2 id="once-again-link-reference-definitions"&gt;Once Again, Link Reference Definitions&lt;a class="headerlink" href="#once-again-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wish I could say that I could keep away from these tokens, but as they are the most
troublesome token, I guess I do not get my wish.  During the refactoring that was
documented
in the last article, I suspected that things might not be good with Link Reference
Definitions if they were inside of Fenced Code Blocks or HTML Code Blocks.  Based on a
couple of quick tests, those suspicions were confirmed.  For some reason, the logic for
preventing a Link Reference Definition from starting within one of those two blocks was
either missing or not working properly.  Time to debug!&lt;/p&gt;
&lt;p&gt;Since this article is mostly about me learning about performance tuning in Python,
I will not go into too
many details.  Let’s just say that the code that I thought I had in place to prevent
that happening was not there.  Even more than that, after working on it for a good
solid four hours in the evening, I only got most of the scenario tests working, with
nine scenario tests still left as disabled. As these scenarios are very much off the
beaten path, I felt okay in marking them as disabled and handling them in the future.&lt;/p&gt;
&lt;h2 id="link-tokens-and-image-tokens-the-gathering"&gt;Link Tokens and Image Tokens: The Gathering&lt;a class="headerlink" href="#link-tokens-and-image-tokens-the-gathering" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it probably sounded better in my head than when I typed it in, it did feel like a
cheesy name for an old 1980s series that was thankfully not produced.  This task
was a simple one: as much as possible, merge the code to handle link tokens and image
tokens.  The interesting thing was that this was already partially done.  In a fair
number of areas, such as the &lt;code&gt;__calculate_link_and_image_deltas&lt;/code&gt; function, there was
already code that handled both tokens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;active_link_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image_uri&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre_image_uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;active_link_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre_image_uri&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;active_link_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_uri&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre_link_uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;active_link_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre_link_uri&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It just made sense to make it official and merge them instead of having this artifical
divide between the two tokens.&lt;/p&gt;
&lt;p&gt;The first part was relatively easy.  Starting with a new base class for both tokens, I
carefully moved any member field that had the exact same name in both classes to the base
class.  At that point, there were only two fields that needed special attention and one
field that was distinct to the Image token: the &lt;code&gt;image_alt_text&lt;/code&gt; field.  The two fields,
&lt;code&gt;image_uri&lt;/code&gt; and &lt;code&gt;image_title&lt;/code&gt; were renamed to meet the Link token counterparts, &lt;code&gt;link_uri&lt;/code&gt;
and &lt;code&gt;link_title&lt;/code&gt;, with a global search and replace taking care of any occurrences of the
old name.&lt;/p&gt;
&lt;p&gt;But I was not done yet!  I had also wanted to simplify calls to those pairs of fields for
quite some time.  There are a couple of specific cases where the individual field is
needed and the &lt;code&gt;link_title&lt;/code&gt; field is used.  In some cases, the original form of the data
is needed and the &lt;code&gt;pre_link_title&lt;/code&gt; field is used.  To save space in the token, if both
fields have the same value, the &lt;code&gt;pre_link_title&lt;/code&gt; field is set to &lt;code&gt;None&lt;/code&gt;.  So, to make it
easier to deal with that, I added the &lt;code&gt;active_link_title&lt;/code&gt; property and the
&lt;code&gt;active_link_url&lt;/code&gt; property to fetch the value that I want.&lt;/p&gt;
&lt;p&gt;After all that work, the code above was replaced with this one line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;active_link_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active_link_uri&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="single-call-special-character-resolution"&gt;Single Call Special Character Resolution&lt;a class="headerlink" href="#single-call-special-character-resolution" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is another task that I have wanted to do for a while, and I am pleased
with how well it proceeded.  Along the way, I have needed to define special character
sequences to deal with the dual representation of data in the token: actualized for the
HTML rendering and source for the Markdown rendering.  To accommodate this representation,
to present the required aspect of that data, I have developed a series of functions in
the &lt;code&gt;remove_*&lt;/code&gt; and &lt;code&gt;resolve_*&lt;/code&gt; namespace of the &lt;code&gt;ParserHelper&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;But as I have been looking at the code in the last couple of weeks, one thought occurred
to me about the various invocations of the various functions to remove those characters.
Did I really need specific functions called all the time, or could I just call a “remove
everything” function most of the time and be safe?&lt;/p&gt;
&lt;p&gt;To answer that question, I created the &lt;code&gt;resolve_all_from_text&lt;/code&gt; function and the
&lt;code&gt;remove_all_from_text&lt;/code&gt; function.  For each function, I located what I thought was the
most consistent ordering of the main set of functions and placed them in those two
functions.  I then went through the source code, replacing one of more instances of the
main set of functions with these “shorthand” functions.  In the 41 instances where these
functions were called, either singly or in groups, there were only 3 instances where
calling the “everything” function was detrimental to the operation of the parser.
In the other 38 instances, multiple trips were avoided while cleaning up the code at
the same time.&lt;/p&gt;
&lt;h2 id="and-of-course-some-cleanup"&gt;And Of Course, Some Cleanup&lt;a class="headerlink" href="#and-of-course-some-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And what would a set of tasks be for me without some cleanup tasks?  There really was not
anything too spectacular that I changed in these tasks, just some little things here
and there.  I used my first list comprehension in the
&lt;code&gt;__calculate_for_container_blocks&lt;/code&gt; function and I believe I have determined that I cannot
use any more due to the nature of the PyMarkdown project.  It was not as hard as I thought
to create, but I still need to figure it out some more to really understand it.  In the
&lt;code&gt;HtmlHelper&lt;/code&gt; class, there were three functions that were using relatively big conditionals
to determine whether a character was valid for the given HTML construct.  After some
research to confirm that I messed up the &lt;code&gt;_&lt;/code&gt; character and the &lt;code&gt;-&lt;/code&gt; character in one of
the conditionals, I replaced all three with a simpler &lt;code&gt;in&lt;/code&gt; clause.&lt;/p&gt;
&lt;p&gt;As always, nothing too stellar, but a number of small items that made me feel better
about the state of the project.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I said in the Introduction section that I was stoked about this, I was not kidding.
Two constants in my development career that have always kept me young and looking forward
is that I love challenges and I love to learn.  But instead of learning finely tuned
concepts, I try and learn those concepts and the “meta” ideas behind them.&lt;/p&gt;
&lt;p&gt;Take performance tuning on a program.  To be honest, with few exceptions, the language
that the tuning is being applied to and the program that the tuning is being applied to
are not as important as the approach to tuning.  And that is where performance tuning
scares developer with faint hearts because of one glaring truth about performance
tuning.  There is a honeymoon period of tuning, where there are some low hanging
“performance” fruit that are easy to solve.  After that, the tuning is more miss than
hit.  From my experience, and the experience of others, once you are in that second
phase, you must be prepared to fail way more often than succeed.&lt;/p&gt;
&lt;p&gt;And that scares some people.  I know it sometimes scares me.  I like to be able to make
a change and see that change.  But performance tuning can be a lot of “nah, the readability
suffers too much for such a small improvement” or “nah, that difference in performance is
not significant”.  And even for good performance trained developers, the percentage of
“good” experiments often does not exceed 10% once past the honeymoon period.&lt;/p&gt;
&lt;p&gt;That is where my experience comes in.  I knew I was lucky to have such an obvious gift
presented to me in terms of where the performance hit for the project was.  I was also
appreciative that previous rounds of performance improvements on prior projects allowed
me to know an approximate name of the parameter that I wanted to look for.  And I am
also aware that the honeymoon period for finding the easy solutions was not going to
last much longer.&lt;/p&gt;
&lt;p&gt;But, due to my experience, I was okay with that.  I knew I was off to a good start, and
I now had good solid experience in the performance measuring cycle with Python. So, as
I said in the Introduction section:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I was stoked!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With one foot into performance improvements, it seems like a good time to go all in
and to try and improve the performance of the PyMarkdown project some more.  Stay Tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:yes"&gt;
&lt;p&gt;Yes, I am not doing any safety checking on this.  I was doing a simple test to see if this would work.  That kind of safety checking was added before I checked in the actual version of this class that made it into the repository. &lt;a class="footnote-backref" href="#fnref:yes" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Refactoring</title><link href="https://jackdewinter.github.io/2021/02/15/markdown-linter-road-to-initial-release-refactoring/" rel="alternate"></link><published>2021-02-15T00:00:00-08:00</published><updated>2021-02-15T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-02-15:/2021/02/15/markdown-linter-road-to-initial-release-refactoring/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/08/markdown-linter-road-to-initial-release-learned-and-useful-things/"&gt;last article&lt;/a&gt;, I took a break
to look back over the last year’s work and what I learned on my path to this point.
In this article, I look at some refactoring that I have wanted to do for a while,
and why I can accomplish …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/08/markdown-linter-road-to-initial-release-learned-and-useful-things/"&gt;last article&lt;/a&gt;, I took a break
to look back over the last year’s work and what I learned on my path to this point.
In this article, I look at some refactoring that I have wanted to do for a while,
and why I can accomplish those changes successfully.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Refactoring can often be a tricky subject to bring up with software developers.  Depending
on the specific goals and experiences of a given software developer, saying the phrase
“Can we talk about refactoring your code?” can either be met with enthusiasm, with
judgement, or with something in between.  In the majority of situations, developers have
been trained
to only write code that is good enough to meet the set of requirements before them, and
not more.  While this satisfies the immediate needs of the project, it can often cause
long term problems in terms of maintenance and support.
As with the more personal reactions to the phrase, I find that they occur more rarely
these days, but they still occur.  If someone hears that phrase, it is possible that they
think you are judging their code to not be correct or “good enough”.  In those cases,
you want to try and remove that judgement aspect from their and move on.&lt;/p&gt;
&lt;p&gt;Luckily for me, I am the only one on this project and I have a very enthusiastic response
to that phrase.  For me, if someone asks that questions, they are seeing the same problem
that I solved, but through a different light. I see it as a chance to see the given
project from a different viewpont, engaging in a good discussion along the way.
From there, if it is agree that I need to work on the refactoring, it is just a question of
making sure that I have solid requirements for any refactoring and a solid block of time
to work on them.&lt;/p&gt;
&lt;p&gt;As luck would have it, I control both for the PyMarkdown project, so let’s go!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/10473f951bc17c4f74eeb067b40e6417bcad8a25"&gt;27 Jan 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9433471e996e83bea13dbd6472ff447f29fff9a7"&gt;02 Feb 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="refactoring"&gt;Refactoring&lt;a class="headerlink" href="#refactoring" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most concise and accurate definition of what I believe refactoring to be, comes from
the website
&lt;a href="https://www.refactoring.com/#:~:text=verb%3A%20to%20restructure%20software%20%20by%20applying%20a,technique%20for%20improving%20the%20health%20of%20a%20code-base."&gt;Refactoring.Com&lt;/a&gt;
which defines refactoring as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;verb: to restructure software by applying a series of refactorings without changing its observable behavior.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For me, that definition hits all the salient points that I believe need to be in the
definition. The first point is “to restructure software”.  Refactoring is not about
adding any new features to the software project, it is about improving some aspect of
the software in question.  The second point is that it is “a series of refactorings”.
Very rarely in my years of experience have I found that a refactoring is as simple as
just a small change.  Usually, it involves a number of small changes that bring about
the stated requirements of the refactorings, each one doing their part to meet the
goal.&lt;/p&gt;
&lt;p&gt;The third point is “without changing its observable behavior”, and I mostly agree with
that statement.  In my eyes, to be more correct, I would add the phrase “unless directed
to” to the end of that statement.  It is normally correct that any refactoring should
not change
the observable behavior.  However, I would argue that there are times where the
purpose of the refactoring is to change that observable behavior along a very narrow and
specific axis.
A good example of this is performance refactoring.  In that case, I want every other
observable part of the system to remain the same, but I want the observed time taken
to process the data to be reduced.&lt;/p&gt;
&lt;p&gt;But with my little caveat at the end, I think it is a solid definition of refactoring.&lt;/p&gt;
&lt;h3 id="how-i-work"&gt;How I Work&lt;a class="headerlink" href="#how-i-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is my usual practice to start writing a new feature or resolving an issue by having
a group of scenario tests that clearly define the problem.  From there, I write the code
as it comes to me, iterating over it in a natural way until it passes the scenario tests
that I am coding against.  While this may not be the way others work, I find that it helps
me keep the big concepts broken up into smaller concepts that I can more deftly handle.
Once I am finished with the code and all the scenario tests are passing, I usually look
locally and see if there are any simple refactorings that I can do.  If I have something
specific in mind, I may look globally to see if I can apply whatever I just coded on a
more global scale, but in many cases, I leave that for later.&lt;/p&gt;
&lt;p&gt;This process is very useful to me because I am very insistent on keeping my code coverage
numbers above the 95% mark, and in many cases above the 99% mark.  While this can often
lead to some tests that are frustrating to write, the reward for that pain is in the
confidence with which I can make changes.  Due to my high code coverage percentage, I
can make changes in any given piece of code, knowing that if there are any unintended
side effects, the scenario tests providing that high code coverage will detect them.&lt;/p&gt;
&lt;p&gt;For me, that is a plus that allows me to perform certain tasks, such as refactoring,
with a very high degree of confidence.&lt;/p&gt;
&lt;h3 id="cleaning-up-requeuing"&gt;Cleaning Up Requeuing&lt;a class="headerlink" href="#cleaning-up-requeuing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the first things that I wanted to cleanup was my use of the parameters
&lt;code&gt;lines_to_requeue&lt;/code&gt; and &lt;code&gt;force_ignore_first_as_lrd&lt;/code&gt;.  A long time ago (in project years),
I needed to add code throughout the code base to handle the requeuing needed by Link
Reference Definition parsing.  That concept of requeuing was introduced
&lt;a href="https://jackdewinter.github.io/2020/04/06/markdown-linter-adding-link-reference-definitions/"&gt;in April 2020&lt;/a&gt;
along with an explanation of why Link Reference Definition parsing needs the ability to
rewind the stack.  At the time, I wasn’t sure if those two parameters were the only
two parameters that I would need for any needed requeues, or if there were any other
elements that would
require requeues.  After more than nine months with no changes, I believed that those two
parameters were the first target for refactoring.&lt;/p&gt;
&lt;p&gt;When I looked at that code, there were two possible refactorings that came to mind:
reducing the number of parameters to one and raising an exception instead of using
return codes.  Since the second refactoring would make use of the work done for the
first refactoring, it made sense to start with that refactoring.  But replacing
those two parameters with an instance of a new class would require some work.&lt;/p&gt;
&lt;h4 id="phase-1-search-and-replace"&gt;Phase 1: Search and Replace&lt;a class="headerlink" href="#phase-1-search-and-replace" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The first phase of the refactoring was dead simple: locate any instances of the variables
&lt;code&gt;lines_to_requeue&lt;/code&gt; and &lt;code&gt;force_ignore_first_as_lrd&lt;/code&gt; and place them within a new instance
of the newly created &lt;code&gt;RequeueLineInfo&lt;/code&gt; class.  This took a while to complete but it was
relatively easy
to do.  In each case, I started with a call to the &lt;code&gt;process_link_reference_definition&lt;/code&gt;
function and worked backwards through the code.  As I worked backwards from that function,
I changed the
calling function’s two return values to a new single instance of the &lt;code&gt;RequeueLineInfo&lt;/code&gt;
class.  To ensure that there were no external changes other than that, I
immediately dereferenced both member variables as local variables.  Because that practice
kept any changes localized, I was able to execute the scenario tests after each step to
verify that the current set of changes were correct.&lt;/p&gt;
&lt;p&gt;The big issues that I ran into with these changes were the blank line function
&lt;code&gt;handle_blank_line_fn&lt;/code&gt; and the close blocks function &lt;code&gt;close_open_blocks_fn&lt;/code&gt;.  As both
functions can terminate a Link Reference Definition, both had to be changed to return a
single argument instead of the double arguments.  While the change for the
&lt;code&gt;handle_blank_line_fn&lt;/code&gt; function only required 1 change, the change for the
&lt;code&gt;close_open_blocks_fn&lt;/code&gt; function had to be implemented in 22 separate calls, each change
following the pattern mentioned above.  It was a handful but was completed without
incident. Well, without incident after I corrected some typos.&lt;/p&gt;
&lt;p&gt;A good example of these changes are the changes performed to the
&lt;code&gt;__close_required_lists_after_start&lt;/code&gt; function.  Before this change, the function’s code
around the call to the &lt;code&gt;close_open_blocks_fn&lt;/code&gt; function looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;force_ignore_first_as_lrd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;until_this_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;last_list_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;caller_can_handle_requeue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the change, this code was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;until_this_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;last_list_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;caller_can_handle_requeue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;requeue_line_info&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;lines_to_requeue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;
            &lt;span class="n"&gt;force_ignore_first_as_lrd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;force_ignore_first_as_lrd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pivotal thing to notice here is that while the function was handling the single
&lt;code&gt;requeue_line_info&lt;/code&gt; return value instead of the two return values &lt;code&gt;lines_to_requeue&lt;/code&gt;
and &lt;code&gt;force_ignore_first_as_lrd&lt;/code&gt;, those changes are completely localized.  That isolation
of the change is what helped make this a great refactoring.&lt;/p&gt;
&lt;h4 id="phase-2-reduce-the-instances"&gt;Phase 2: Reduce the Instances&lt;a class="headerlink" href="#phase-2-reduce-the-instances" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;With the scenario tests still verifying that everything was working properly, I started to
work on reducing the number of new instances of the &lt;code&gt;RequeueLineInfo&lt;/code&gt; class.  While
isolating the changes was a good priority for Phase 1, it resulted in a lot of extra
overhead whenever those new instances were returned from a function.  For this phase, the
focus was on identifying paths where that dereferencing was not necessary, replacing
them with the returned instance of the &lt;code&gt;RequeueLineInfo&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;Following along with the example of the &lt;code&gt;__close_required_lists_after_start&lt;/code&gt; function,
that function was again modified.  Inside of that function, any references to the variable
&lt;code&gt;lines_to_requeue&lt;/code&gt; was replaced with a reference to &lt;code&gt;requeue_line_info.lines_to_requeue&lt;/code&gt;,
with a similar change being made for the &lt;code&gt;force_ignore_first_as_lrd&lt;/code&gt; variable.  At the end
of the function, instead of returning:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force_ignore_first_as_lrd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the following was returned:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At that point, any function that calls the function was located, and switched to use the
new single value instead of the old double value.  This was usually repeated until the
function to be modified was the main &lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Executing scenario tests as I went, there were only two issues that popped up.  The first
issue had to do with the &lt;code&gt;requeue_line_info&lt;/code&gt; being &lt;code&gt;None&lt;/code&gt;.  In those cases, I had to make
sure to add some &lt;code&gt;if requeue_line_info:&lt;/code&gt; statements around sensitive code, ensuring that it
wouldn’t fail.  As I worked my way back up to the main function, most of those &lt;code&gt;if&lt;/code&gt;
statements that I added were removed as I refactored my way up towards the main function.
The second issue occurred in
functions that had multiple paths that required the changes.  In that case, I simply noted
down the name of the functions as I went.  When I finished all the “easy” paths, I went
back to that list as started checking items off that list one-by-one.&lt;/p&gt;
&lt;p&gt;By the end of this phase, there were only a few handfuls of new instances being created.
Cleaning those up were my next priority.&lt;/p&gt;
&lt;h4 id="phase-3-and-then-there-was-one"&gt;Phase 3: And Then There Was One&lt;a class="headerlink" href="#phase-3-and-then-there-was-one" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;With the above work accomplished, there was only a little bit of cleanup left to do.
My goal was to get from the few new instances that still existed down to one new instance.
Ideally, the
&lt;code&gt;process_link_reference_definition&lt;/code&gt; function was the only function that needed to create
a new instance, and I wanted to make that so.&lt;/p&gt;
&lt;p&gt;The new instances that were usually in places that had already been transformed before
this refactoring began.  These were usually functions like the
&lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function which had been one of my test functions for
this refactoring.  In those cases, I simply repeated the process that I
used in Phase 2 to remove those extra instances.  In cleaning up those instances, there
were a few cases where a “non-requeue” was being returned in a &lt;code&gt;requeue_line_info&lt;/code&gt;
instance, accomplished by setting the &lt;code&gt;lines_to_requeue&lt;/code&gt; member variable to &lt;code&gt;None&lt;/code&gt;.  While
these were not difficult to deal with, it did increase the challenge factor for the
refactoring.&lt;/p&gt;
&lt;h4 id="the-result"&gt;The Result&lt;a class="headerlink" href="#the-result" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;At each step of each phase, I was able to execute the scenario tests, ensuring that the
changes were not changing the output of the parser.  This was pivotal.  With 238 additions
and 271 deletions over 11 changed files, I would not have noticed any bad effects from
some of these changes without those scenario tests.  This refactoring was also very pivotal
in ensuring that I had confidence to make other refactorings.  Because this was not a
simple refactoring, I knew that completing this refactoring meant many others were
not only possible, but possible with confidence that they could be accomplished.&lt;/p&gt;
&lt;p&gt;What about raising exceptions instead of returning the instances? After having done this
work, I had a high degree of confidence that there will be issues with that approach.
The main issue that I saw was that a few functions recursively call the
&lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function.  While I think that it may be possible,
I wanted to focus on refactorings that I believe will positively impact the code with
a high probability of success.  At the time that I wrapped the refactoring up, I made
a decision that raising an exception with the information fell below my definition of
“a high probability of success”.&lt;/p&gt;
&lt;h3 id="bolstering-the-consistency-checks"&gt;Bolstering The Consistency Checks&lt;a class="headerlink" href="#bolstering-the-consistency-checks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I scanned through items in the issues list, there were a couple of items that I
thought would be easy to either verify or complete.  The first one was about
confirming that the &lt;code&gt;rehydrate_index&lt;/code&gt; was being verified in the consistency checks.
Looking into that one, I was pleased to find that there was already a check in the
Markdown transformer.  Looking at the &lt;code&gt;verify_line_and_column_numbers.py&lt;/code&gt; module,
I did not find the same check, but adding it was very easy. Similarly, confirming the
presence of the same types of checks for the &lt;code&gt;leading_space_index&lt;/code&gt; was just as easy.
However, in this case, all the needed checks were already in place, so no code changes
were required.&lt;/p&gt;
&lt;h3 id="validating-inline-tokens"&gt;Validating Inline Tokens&lt;a class="headerlink" href="#validating-inline-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next item was not as easy, but it was close to it.  For some reason that is now lost
to me, I had a suspicion that I had a blind spot with the inline tokens at the end of
a Text block.  If I had to guess, I was worried that I did not have at least one example
of every Inline token and end Inline token at the end of a Text block, meaning there was
a possibility that one of those calculations were off.&lt;/p&gt;
&lt;p&gt;While I was pretty sure that I had since covered that item, I wanted to make sure that
I had concrete proof of that.  Looking around the scenario test groups, I was happy to
find that the Paragraph Series D tests were constructed to have only a single inline
element in each paragraph.  By that very definition, each of the inline elements used
in those tests were both the first and the last token in each paragraph.  After verifying
that each inline token was present at least once, I resolved that item.&lt;/p&gt;
&lt;h3 id="a-quick-refactor"&gt;A Quick Refactor&lt;a class="headerlink" href="#a-quick-refactor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before moving on to some more substantial refactorings, I wanted to make sure I had
a bit more practice to boost my confidence.  To that extent, I started by taking the
function &lt;code&gt;count_of_block_quotes_on_stack&lt;/code&gt; from the &lt;code&gt;BlockQuoteProcessor&lt;/code&gt; class
and moving it to the &lt;code&gt;ParserHelper&lt;/code&gt; class.  It just did not feel right being in the
&lt;code&gt;BlockQuoteProcessor&lt;/code&gt; class, and this took care of that problem.&lt;/p&gt;
&lt;p&gt;Once that task was accomplished, I started work on a new related function:
&lt;code&gt;find_last_block_quote_on_stack&lt;/code&gt;.  The purpose of function itself was simple.  Start at
the end of the &lt;code&gt;token_stack&lt;/code&gt; list and work backwards until a Block Quote token was
encountered. I was doing this manually in four different places, and this change
simplified that code in those four locations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_last_block_quote_on_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;last_stack_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;last_stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_document&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;last_stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;last_stack_index&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;last_stack_index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once that was completed, I also created variants of that function, the
&lt;code&gt;find_last_container_on_stack&lt;/code&gt; for finding the last container block on the stack
(which was useful) and the &lt;code&gt;find_last_list_block_on_stack&lt;/code&gt; function (which was not
useful).  While these refactorings did not have the impact that I had hoped, each
one still left the code more readable by describing what they were doing in their function
name.&lt;/p&gt;
&lt;h2 id="doing-more-of-a-heavy-lift"&gt;Doing More Of A Heavy Lift&lt;a class="headerlink" href="#doing-more-of-a-heavy-lift" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After completing the above tasks, I felt sufficiently confident to attempt some
more interesting refactorings.  These refactorings were only interesting in that the
code that used them was all over the place, usually in calculations that would have
to be individually examined before each refactoring.  But, as this group of refactorings is
a group that I have noted in the issues list, I need to push through them.  On top of that,
with my recent successes, it just felt
like the right time to deal with those issues.&lt;/p&gt;
&lt;p&gt;On the surface, none of these new functions created for the refactorings are special.
Each one does a single, very basic thing, but it does it once.  In visiting different
parts of the project’s code base, I had a
loosely organized picture of which patterns were common, and I started looking for them
to confirm that they were indeed common.  While I talk about the five patterns that I
noticed here, there were also two other patterns that I chose not to do as I did not see
a common pattern in them.  While I do believe that refactoring those patterns to clean
up the code would be useful, I do not believe that a refactoring of either one of those two
patterns would substantially benefit the code base.  At least not yet.&lt;/p&gt;
&lt;h3 id="count_newlines_in_text"&gt;count_newlines_in_text&lt;a class="headerlink" href="#count_newlines_in_text" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This function was already in the &lt;code&gt;ParserHelper&lt;/code&gt; class, but it was not widely used outside
of the parser code itself.  In particular, every instance of this pattern was found in
the consitency checks.  In each case, a pattern like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;inline_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resolved_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was replaced with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;inline_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count_newlines_in_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resolved_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It just made sense to replace the old code with the function call.  The function was
already in the &lt;code&gt;ParserHelper&lt;/code&gt; class and it was already battle tested.  In addition,
by using the function, the function itself could be tweaked to be more performant
without having to change the calling code.&lt;/p&gt;
&lt;h3 id="calculate_deltas"&gt;calculate_deltas&lt;a class="headerlink" href="#calculate_deltas" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always near the top of my “refactor list” was a new function to calculate the deltas
for the line number and column number for a given text string.  I already knew that I
had this copied this in various forms into at least eight locations, and it just seemed
bad form not to refactor it. While
this code was easy to use once tested, there were a number of small tunings that could
make it more performant once its various implementations were gathered together in a
function with one single implementation.&lt;/p&gt;
&lt;p&gt;The essence of this new function is the logic to ensure that the line/column number pair
is updated to properly account for any element that was just parsed.  While the case for
updating a single line element is trivial, there are a few steps that must be
followed to ensure that a multiple line element’s position is updated properly.  The
change in the line number is the simple part, being a count of the number of newline
characters in the element’s source text.  The column is trickier.  Once any special
characters have been removed, the new column number is the number of characters that
occur after the last newline character.  With its little nuances, it just seemed right
to do this properly once.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_deltas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_to_analyze&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;delta_line_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;delta_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text_to_analyze&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;split_raw_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_to_analyze&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;delta_line_number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_raw_tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="n"&gt;last_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_raw_tag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;last_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve_replacement_markers_from_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;last_element&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;last_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_escapes_from_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;length_of_last_elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;delta_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length_of_last_elements&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;delta_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_to_analyze&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;delta_line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delta_column_number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I picked up the code from one of the three places that I found the code and was able
to easily create the &lt;code&gt;calculate_deltas&lt;/code&gt; function.  Replacing the code from the original
function that I copied it from, I found it just as easy to replace the other two instances
of that code.  To make its use simpler, I did some extra work to massage the input to
include surrounding characters in the calculation, to avoid extra math.  For example,
in the &lt;code&gt;handle_angle_brackets&lt;/code&gt; function, instead of a more complex calculation of the
column number, I simply adjusted the &lt;code&gt;between_brackets&lt;/code&gt; variable passed to the
&lt;code&gt;calculate_deltas&lt;/code&gt; function to include the actual angle brackets that were used.&lt;/p&gt;
&lt;h3 id="calculate_last_line"&gt;calculate_last_line&lt;a class="headerlink" href="#calculate_last_line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is one that I thought I had in more places than I found when I started
looking.  I thought that I was splitting a line in more than two places, using that
last line to determine what was left on a line.  My best guess is that most of those
cases were removed when I condensed most of that logic into the &lt;code&gt;calculate_deltas&lt;/code&gt;
function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_last_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;split_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;split_label&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But even so, clearly spelling out that the code was working with the last line of
text in a multiple line string was worth it to me!&lt;/p&gt;
&lt;h3 id="recombine_string_with_whitespace"&gt;recombine_string_with_whitespace&lt;a class="headerlink" href="#recombine_string_with_whitespace" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The last refactoring that I wanted to get out of the way was essentially a
&lt;a href="https://en.wikipedia.org/wiki/Swiss_Army_knife"&gt;Swiss Army Knife&lt;/a&gt; function
that I could use to recombine a string with its leading whitespace.  In each case,
the pattern started the same: split the text, split the whitespace.  It was the next
part, piecing the whitespace and the text together once split, where the various
functions varied in their approach.  But, taking my time, I was able to assemble
a single function with five default parameters that worked in each of the twelve
instances where that logic appeared.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recombine_string_with_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;text_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;whitespace_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_replace_marker_if_empty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;post_increment_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_text_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_whitespace_after&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;split_text_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;split_whitespace_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;whitespace_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_text_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_text_string&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;post_increment_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;ew_part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_whitespace_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ew_part&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;add_replace_marker_if_empty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ew_part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_replace_with_nothing_marker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ew_part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;add_whitespace_after&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;split_text_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_text_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ew_part&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;split_text_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ew_part&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;split_text_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;post_increment_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_text_string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It looks a bit ugly because of the optional parameters, but it is basically simple.
Given a processed string with its leading spaces removed and a separate string with
those leading spaces that were removed, recombine them into the original string.
All the “ugliness” is making sure to handle the various combinations and twists
needed to accommodate each use of this function.&lt;/p&gt;
&lt;h3 id="calculate_next_leading_space_part"&gt;calculate_next_leading_space_part&lt;a class="headerlink" href="#calculate_next_leading_space_part" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Unlike the other refactorings in this section, this refactoring was added to the
&lt;code&gt;ContainerMarkdownToken&lt;/code&gt; class.  One pattern that I found was that I kept on
copying and pasting code to to deal with Block Quote tokens, specifically to determine
what part of the &lt;code&gt;leading_spaces&lt;/code&gt; property of a Block Quote token was current.
Furthermore, I also
needed to ensure that in multiple cases, if I used that leading space, that I incremented
the &lt;code&gt;leading_text_index&lt;/code&gt; member variable to reflect that usage.&lt;/p&gt;
&lt;p&gt;Hence, the &lt;code&gt;calculate_next_leading_space_part&lt;/code&gt; was created:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_next_leading_space_part&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;increment_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;leading_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;increment_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_text_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;leading_text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="and-it-logically-follows"&gt;And It Logically Follows&lt;a class="headerlink" href="#and-it-logically-follows" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After completing the last set of refactorings, I took a bit of time to look around the code
and see if I could see anything that jumped out at me.  The first thing that I noticed
was that the &lt;code&gt;recombine_string_with_whitespace&lt;/code&gt; was already set up to handle both single
line and multiple line strings.  As such, doing a check to see if the string being passed
into the &lt;code&gt;recombine_string_with_whitespace&lt;/code&gt; function contained a newline character did
not have any benefit.  Hence, I simplified a few &lt;code&gt;if&lt;/code&gt; statements that occurred before
a call to &lt;code&gt;recombine_string_with_whitespace&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once that was done, I also noticed that the &lt;code&gt;__handle_extracted_paragraph_whitespace&lt;/code&gt;
function was almost a duplicate for the &lt;code&gt;recombine_string_with_whitespace&lt;/code&gt; function.
This meant that I could rewrite the &lt;code&gt;__rehydrate_inline_code_span&lt;/code&gt; function to use
the &lt;code&gt;recombine_string_with_whitespace&lt;/code&gt; function instead.  The only other reference
to the &lt;code&gt;__handle_extracted_paragraph_whitespace&lt;/code&gt; function was in the
&lt;code&gt;__rehydrate_inline_raw_html&lt;/code&gt; function, which was mainly using it to increase the
&lt;code&gt;rehydrate_index&lt;/code&gt; if it was within a paragraph.  Once that code was written inline,
the entire &lt;code&gt;__handle_extracted_paragraph_whitespace&lt;/code&gt; function was deleted.&lt;/p&gt;
&lt;p&gt;While neither of these refactorings were needed, they both left the source code in
a better condition, so I went ahead and completed them.  In my evaluation, as I was
refactoring the code in that area anyways, it did not seem right to not do those
refactorings as a cleanup task.&lt;/p&gt;
&lt;h2 id="ending-on-a-high-note"&gt;Ending On A High Note&lt;a class="headerlink" href="#ending-on-a-high-note" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In some cases, a refactor is simple but looks really messy.  That is the case with the
commit for
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9433471e996e83bea13dbd6472ff447f29fff9a7"&gt;this refactoring&lt;/a&gt;.
If you look at the commit, it looks like I changed the entire function to do something,
but what that something is seems obscured by the changes.  Looking at that commit
closely, there are only two small changes.&lt;/p&gt;
&lt;p&gt;The first change was an extremely simple one.  I changed the code in the &lt;code&gt;except&lt;/code&gt; block
of the &lt;code&gt;__transform&lt;/code&gt; function from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;BadTokenizationError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;BadTokenizationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"An unhandled error occurred processing the document."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to provide more information to the user if such an exception is ever caught.  That change
is very clear in the commit referenced above.&lt;/p&gt;
&lt;p&gt;The second change in the commit was also an equally simple one.  I changed the bulk of the
code in the
&lt;code&gt;__parse_blocks_pass&lt;/code&gt; function to be enclosed in a &lt;code&gt;try/except&lt;/code&gt; block to be able to
more accurately report on any assertions that were fired within the code.  To be clear,
I added a &lt;code&gt;try:&lt;/code&gt; near the top of the function and the following code at the end of the
function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;error_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"A project assertion failed on line "&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" of the current document."&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;BadTokenizationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The rest of the changes that are reported?  Indentation.  Yes, adding an indentation of
four to ensure that it compiled properly created the mess that shows up as differences
in the commit log.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I am not a perfectionist in my coding, I do believe that I have a different sense
of weights when trying to figure out what level of weight to associate with an aspect of
a project.  For me, having 10 mostly working and tested scenarios is not as important as
having 3 or 4 well tested and maintainable scenarios.  While that is my default weighting,
I have also learned to be able to adjust that weighting depending on certain situations.
In my professional life, I think what helps me be successful with those changing weightings
is that I usually state each of the relevant options, their weightings, and how I
calculated the weighting.&lt;/p&gt;
&lt;p&gt;For this project, I am both the developer, the tester, and the manager, so it is a bit
more nuanced.  During most of the duration of this project, my focus was to drive
the project towards completion, so I use the set of weightings that allowed me to
develop and test more efficiently.  But I always knew that those weightings would be
temporary, and that I am now moving towards the proper set of weightings for this project.&lt;/p&gt;
&lt;p&gt;So why that long description?  It is to back up my statement which is: meh.  I am still
confident about this project, but refactorings of this type were always expected, and I
realized that.  As such, it is just something to get done.  No hype, no fanfare, just
grunt work.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong, I am happy that it moves me one more step towards the release, and
I am happy that it went off without that many issues, but it is just a step.  To me,
refactorings are just a fact of life when you are a software developer.  If you are doing
them right, they will be simple, methodical, and uneventful. As they should be.&lt;/p&gt;
&lt;p&gt;I was able to keep the refactorings uneventful by having some clear goals in mind.
The first goal I have is to maintain a set of scenario tests that provide a high percentage
of test coverage for the project.  If something changes, I want to know about it as
quickly as possbile. The second goal I have it to always take small enough steps that I
can use my scenario tests to continually ensure that any changes are going in the right
direction.  Finally, my third goal is to have a solid plan going into each refactoring,
ensuring that I don’t get distracted along the way.&lt;/p&gt;
&lt;p&gt;I believe it was by following these goals that I was able to keep these refactorings
simple, methodical, and uneventful!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I do continue with some refactorings next week, my big focus was to apply some
of my recent learnings regarding performance to the project.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Learned and Useful Things</title><link href="https://jackdewinter.github.io/2021/02/08/markdown-linter-road-to-initial-release-learned-and-useful-things/" rel="alternate"></link><published>2021-02-08T00:00:00-08:00</published><updated>2021-02-08T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-02-08:/2021/02/08/markdown-linter-road-to-initial-release-learned-and-useful-things/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/01/markdown-linter-delving-into-the-issues-19/"&gt;last article&lt;/a&gt;, I documented how
I worked hard to get to complete the unprioritized items in my issues list.  This
article takes a break from all that hard work to look back over the last year’s work,
and what I learned on my path to this …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/02/01/markdown-linter-delving-into-the-issues-19/"&gt;last article&lt;/a&gt;, I documented how
I worked hard to get to complete the unprioritized items in my issues list.  This
article takes a break from all that hard work to look back over the last year’s work,
and what I learned on my path to this point.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just over a year ago, I came across a problem that I really wanted to solve.  I had been
writing articles and posting them on my personal blog for about five months and I was not
happy with some parts of that process.  I was improving my writing process and finding
my voice, so that was not the problem.  It was the lack of process around the consistency
of the articles that I felt was the problem.  I needed a tool that would help me
maintain the consistency of my articles as a group, ensuring they all followed some
basic rules that I wanted to enforce.  It was then that I knew I wanted to write
my own Markdown linter to do exactly that.&lt;/p&gt;
&lt;p&gt;During the time that I have been working on this project, I have learned a lot about
myself and some good practices to keep
while undertaking such a project.  I will not be so bold as to call these “Best Common
Practices and Learnings”, but I will definitely step up and own them as “What Jack
Learned and Finds Useful”.  I know it is not as shiny of a title as the first one, but it
is one that I feel I can own while remaining honest and keeping a relatively level ego.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  Unlike past articles in this and related series,
the articles used as inspiration for this article range from my first article
on PyMarkdown titled
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;Markdown Linter - Collecting Requirements&lt;/a&gt;
to the article before this titled
&lt;a href="https://jackdewinter.github.io/2021/02/01/markdown-linter-delving-into-the-issues-19/"&gt;Markdown Linter - Delving Into Issues 19&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="learning-1-find-the-passion-for-your-project"&gt;Learning #1: Find The Passion For Your Project&lt;a class="headerlink" href="#learning-1-find-the-passion-for-your-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It might seem silly to some, but when it comes to a lot of things in my life, I like a
good, solid, dependable process.  It is okay with me if that process grows, matures, and
changes in response to perceived issues with that process, but not having a dependable
process is just one more thing I must worry about managing.  Basically, if I know
I am going to stress out about something, I try and have a process in place to help me
mitigate that stress. So, when it comes to my personal blog, I had a simple process for
writing my articles and the beginning of a manual process for publishing those articles,
but I did not feel that I had any process around maintaining a solid consistency level
throughout those articles.  That bothered me.&lt;/p&gt;
&lt;p&gt;Looking around for a tool that would fill this gap, the only tool that I found that was
close to what I wanted was the
Javascript
&lt;a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint"&gt;Markdown Lint&lt;/a&gt; program,
by David Anson.  This is a plugin for Visual Studio Code (VSCode)
that is easy to use, install, and get started with for linting Markdown documents
with VSCode. But even though that project is in wide use and obviously means well, I 
did not feel that it was the right tool for
the job.  I wanted to be able to run a finely tuned process over
my articles, ensuring their consistency.  As Markdown Lint was written to be applied to
text being processed by
the many Markdown processors out in the wild, there are a fair number of rules
that are not as fine-tuned as I would like them.  On top of that, I did not
feel that Node.Js was a good language for developing a parser in.  To me, the NPM
library system is good for websites, but lacks the accountability and stability I
believe is a requirement for any good parser.  For those reasons, I decided to start and
write my own Markdown to HTML parser, with a Markdown Linter built on top of that.&lt;/p&gt;
&lt;p&gt;At
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;that time&lt;/a&gt;,
it was relatively easy for me to come up with the basic list of requirements for the
project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;must be able to see an accurate tokenization of the markdown document before translating to HTML&lt;/li&gt;
&lt;li&gt;all whitespace must be encoded in that token stream as-is&lt;/li&gt;
&lt;li&gt;initial tokenization for GitHub Flavored Markdown only, add others later&lt;/li&gt;
&lt;li&gt;must be able to provide a consistent lexical scan of the Markdown document from the command line&lt;/li&gt;
&lt;li&gt;extending the base linting rules should require very little effort&lt;/li&gt;
&lt;li&gt;written in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With only one small modification, these requirements have remained the same since I
recorded them down in that article on 2019 Dec 08.  That one change?  That change is a
&lt;a href="https://jackdewinter.github.io/2021/01/25/markdown-linter-delving-into-the-issues-18/#which-to-choose"&gt;recent change&lt;/a&gt;,
changing “for GitHub Flavored Markdown only” to “for GitHub Flavored Markdown only (as
defined by the CommonMark reference implementation CommonMark.Js version 0.29.2).”&lt;/p&gt;
&lt;p&gt;This desire to have a tool that meets these requirements is a large part of the passion
that drives me forward on this project.  The other part of the passion is made up of my
desire to learn and grow.  While it might seem (and usually is) dry reading, by writing
about the work I did on the project EVERY week, I give myself the ability to look back
and see how much I have changed along the way.  Writing an article back at the beginning
of the project took almost 24 hours before I was happy with the content and style.  Now
I can usually write an article that I am happy with in 4-6 hours, with breaks in between
to spend time with my family.  That kind of growth is the other part of my passion, so
that works out very well!&lt;/p&gt;
&lt;p&gt;When I have trouble making progress forward or sitting down and doing work, these are
the main drivers that keep me moving forward through the many obstacles in my way.
These are critical to any project that you want to see succeed.  I now have my own
clear proof that confirms that is the case!&lt;/p&gt;
&lt;h2 id="learning-2-your-project-is-not-your-life"&gt;Learning #2: Your Project Is Not Your Life&lt;a class="headerlink" href="#learning-2-your-project-is-not-your-life" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I will easily admit that I worked harder in the first three months of the project (to get
it off the ground) than I have at any other point in the project.  But even then, I was
careful to not work too hard on the project at the expense of other things in my life.
Even when the pandemic hit and I was at home all
the time, I tried to make sure that I balanced my work on the PyMarkdown project with
the other projects that I wanted to do and with spending time with the people in my life.
Even though it was often difficult to resist the siren’s call of the latest issue that
needed solving, I put them on hold when I needed to.&lt;/p&gt;
&lt;p&gt;Do not get me wrong.  I often
chose to spend some extra time working on the project for one reason or another.  I
like challenges, and I have a passion for the project, so it makes sense that I would
spend extra time on the project.
But balancing that passion were the other times where I did not feel that I could give the
project my best work, and specifically chose not to work on the project.  Sometimes the
reason was that I was not feeling well.  Sometimes the reason was that the feeling of
being stuck at home ALL THE TIME during a pandemic was getting to me.  Sometimes, it
was just I did not feel like it.  Whatever the reason was, if I did not feel that I could
give the project the same level of professional respect that I give to my full-time
job, I did not work on the project.&lt;/p&gt;
&lt;p&gt;For me, I believe that is one of the reasons that I have stuck with this project.  Sure,
there are times that I do not want to work on “yet another #@$%^&amp;amp; parsing error”, and I
have to grit my teeth and work through them.  But I also know that if I need to walk
away from the issue to rethink my approach to it, that option is also on the table.
I am the only one making the decision when to work and what to work on, and
that is both empowering and a responsibility.  At the same time, that both gives me
the freedom to live my life properly, helping me decide how to balance this project
and other projects with my life.&lt;/p&gt;
&lt;h2 id="learning-3-be-honest-about-your-goals"&gt;Learning #3: Be Honest About Your Goals&lt;a class="headerlink" href="#learning-3-be-honest-about-your-goals" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are in a team, make sure you are honest with your team about you goals.  If you
are the team, make sure you are honest with yourself.  I know that might not make a lot
of sense or seem that it is too basic, but I believe that it is important to my success
with this project. Getting from ground zero to a fully compliant
&lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown&lt;/a&gt;
parser was not something that occurred overnight.  It took a lot of hard work and a lot of
goal setting along the way.  &lt;/p&gt;
&lt;p&gt;It all started with my first goal on 2019 Dec 16: getting my
&lt;a href="https://jackdewinter.github.io/2019/12/16/markdown-linter-setting-up-parser-tests/#starting-with-the-first-scenario-test"&gt;first scenario test&lt;/a&gt;
coded.  That was followed by my writing down the
&lt;a href="https://jackdewinter.github.io/2019/12/22/markdown-linter-parser-testing-strategy/"&gt;parser testing strategy&lt;/a&gt;
that I intended to use to move forward, along with how I intended to
&lt;a href="https://jackdewinter.github.io/2020/01/06/scenario-testing-python-scripts/"&gt;capture the scenario information&lt;/a&gt;
for each test.  By setting those goals at the start of the project, I have been able
to use them as the
&lt;a href="https://theminimalistvegan.com/north-star/"&gt;North Star&lt;/a&gt;
for the project, foundational goals that I can refer to if I get disoriented or lost
along the way.  And from my experience, everyone gets lost at some point, needing
some form of light to find their way back.  It is just a matter of being prepared for
it when it happens.&lt;/p&gt;
&lt;p&gt;From that point forwards, I set realistic goals on what I wanted to achieve in the next
block of work for the project. Having a single scenario test but no source code to test
against, my first goal was to write the parser code behind that first scenario.
With that accomplished, I broadened the goal to get the other the Markdown elements
parsing, so I started in January with the
&lt;a href="https://jackdewinter.github.io/2020/01/27/markdown-linter-parsing-normal-markdown-blocks/"&gt;straightforward blocks&lt;/a&gt;,
and reached the final Markdown elements,
&lt;a href="https://jackdewinter.github.io/2020/04/20/markdown-linter-adding-image-links-and-simple-cleanup/"&gt;links and images&lt;/a&gt;,
at the end of April.  My next goal was to prove that I could easily write a rule that
would take advantage of the PyMarkdown parser, so I spent my time in May working on
that
&lt;a href="https://jackdewinter.github.io/2020/05/04/markdown-linter-core-pre-rule-improvements/"&gt;initial rule support&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Having come across approximately ten bugs in how the parser handled certain situations, I
decided that the next goal needed to be one that would bring stability to the scenario
tests.  As I am always concerned about the quality of any project that I work on, I was
honest with myself that this goal: I would not finish it until I was confident that my
solution could catch any failures that I missed.  To accomplish that, I started working on
the main bulk of the
&lt;a href="https://jackdewinter.github.io/2020/06/15/markdown-linter-rabbit-hole-1-adding-consistency-checks/"&gt;consistency checks&lt;/a&gt;
in June, stopping at the
&lt;a href="https://jackdewinter.github.io/2020/09/21/markdown-linter-adding-remaining-inline-tokens/"&gt;end of September&lt;/a&gt;.
Even though I have since completed that work, I still maintain a goal that ensures that
any source code changes are accompanied by any required changes to ensure that the
consistency checks remain current.&lt;/p&gt;
&lt;p&gt;With those checks in pace, my next goal was to do experimental testing, adding new
scenario tests for any issues I found or areas that I wanted to make sure were tested.
That task took me from the
&lt;a href="https://jackdewinter.github.io/2020/09/28/markdown-linter-delving-into-the-issues-1/"&gt;last week of September&lt;/a&gt;
to the first week of
&lt;a href="https://jackdewinter.github.io/2021/02/01/markdown-linter-delving-into-the-issues-19/"&gt;February 2020&lt;/a&gt;.  There were many times in that time frame
where I questioned if I was being too picky about the scenario tests.  At those times,
I took another look at the GFM specification and the breadth of scenarios that it tries
to cover.  And while it might sound counterproductive, I also looked at the output
from the
&lt;a href="https://johnmacfarlane.net/babelmark2/"&gt;Babelmark 2&lt;/a&gt; tool.
While I spent most of my time looking at the output for the &lt;code&gt;commonmark.js 0.29.2&lt;/code&gt;
entries produced by that tool, I also looked at the other output provided for other
Markdown parsers.  That output reminded me of why I felt that the testing of all
these scenarios was important.  A couple of lines of Markdown is interpreted into
a multitude of different HTML output by different Markdown parsers.  But only one set of
that HTML output was the right one for this project: the CommonMark one that is the
reference parser for the GFM specification.&lt;/p&gt;
&lt;p&gt;It is not always easy to get to the next goal but being honest with myself about the
amount of work required to get to that next goal helps me deal with it in a concrete
fashion.  For me, that honesty is represented in the project’s
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md"&gt;readme.md file&lt;/a&gt;.
While I will rename it before I release the project, that file provides me with a simple
and stark view of what I need to accomplish before releasing the project.  Not
a list of issues that are easily dismissed, but a cohesive list of issues that I
look at every time I open the project.&lt;/p&gt;
&lt;p&gt;That level of honesty, about what needs to be done and the values I have, keeps me
honest with myself.  There is no pushing off the release for years, and there is no
skimping on quality.  As the television actor is misquoted as saying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just the facts, ma’am.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://idioms.thefreedictionary.com/Just+the+facts%2c+Ma%27am"&gt;Jack Webb&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="learning-4-find-a-process-that-works-for-you"&gt;Learning #4: Find A Process That Works For You&lt;a class="headerlink" href="#learning-4-find-a-process-that-works-for-you" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After working on this project for over a year, I have a clearly defined process that
I use with every change.  For any group of scenario tests that I add, I use the North Star
processes mentioned in the last section to set up those tests.  I then
pick one of those tests and first run it without any debug active, forming an initial
observation on what I am seeing and why that may be happening.  Either to clarify that
observation or to confirm that observation, I then enabled debugging and follow through
the flow of the data for the specific lines where I believe the issues manifests.  If
needed, I then refine my observations and examine the output again until I have the
clarity that I require to fix the issue.  Sometimes it means adding more debug,
sometimes it is so obvious that I almost laugh.&lt;/p&gt;
&lt;p&gt;With that clarified observation in hand, I then start looking at the source code,
making small debug modifications to verify that I am in the
right part of the source code for the issue I am observing.  I then use that information
to help me make a change to the source code to change the behavior of that function
from non-compliant results to compliant results.  That often takes a number of
iterations that can take anywhere from 5 minutes to 5 hours.  Once I have that one
specific scenario test working with the new code, I execute the entire collection of
scenario tests to determine if any of those tests were negatively affected.  If so,
I note that negative effect as an observation, and take another look at the change I
made, altering that change into one that does not have that negative effect on the other
tests.  Only when all active tests are passing do I consider the change as “good”.
And, while it is rare, there are cases where my observations are totally wrong, and I need
to back out any changes I made and start from the beginning.  Part of my process is that
I need to be able to make that call if I find myself hopeless lost.&lt;/p&gt;
&lt;p&gt;When I am finished with a group of changes, I go through the changes that I made with my
editor, looking for funny variable names and function names that I used as shortcuts during
the debugging process.  Then I execute my &lt;code&gt;clean.cmd&lt;/code&gt; script to start running the
Black code formatter and the Flake8 and PyLint linters on the Python source code.
As the final stage of that script is to re-run the scenario tests to ensure that they
are all passing, I have a double check in place to ensure that I do not commit changes
that break existing tests.  When those checks pass, I double check the changes, and then
run the &lt;code&gt;clean.cmd&lt;/code&gt; script with the &lt;code&gt;-p&lt;/code&gt; flag, publishing the number of tests and the test
coverage to the &lt;code&gt;publish&lt;/code&gt; directory, where I can examine them at a later date.&lt;/p&gt;
&lt;p&gt;While that entire process is long, it works for me.  For me, it is not too complicated
or too bulky, it is just right.  I keep things at a granular level, so I do not have to
worry about big blocks of features or issues to work on, just small changes that need
to be completed and verified.  And while I might occasionally skip running the
&lt;code&gt;clean.cmd&lt;/code&gt; script, I know that I will most likely execute it the next time, catching
anything that I missed from the time before.  As such, I try and run it every time,
just to keep the scope of the changes small and manageable.&lt;/p&gt;
&lt;p&gt;The big thing here is that this process works for me.  It gives me a solid framework
to focus on, and it gives me a plan on how to attack each issue that I am working on.
Until there are more people on the project, that process does not have to make sense
to anyone else or work for anyone else other than me.  And I am confident that the
process works well for me!&lt;/p&gt;
&lt;h2 id="learning-5-but-know-when-to-deviate"&gt;Learning #5: …But Know When To Deviate&lt;a class="headerlink" href="#learning-5-but-know-when-to-deviate" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But even though I like process, there are times that I know I need to deviate from
that process for my own good.  During the project, there have been a few times where
I knew that there were a group of issues that were all going to change code in one
specific area.  As such, I followed my usual process for the first two steps of my
development process, but then delayed the third step of that process.  I made that
decision with the intent to delay that third step but not to omit it.  I felt that it
would produce better results if I delayed that third step until all the changes
were completed, rather than trying to clean up intermediate steps.  So, I deviated.&lt;/p&gt;
&lt;p&gt;Another good example is the recent learning I have been doing on Python performance
profiling.  While I will be delving into what I learned in future articles, I needed
some space to start working with the performance tools and learn how to use them
effectively.  To accomplish this, I took a couple of my usual nights off and spent an hour
or so of each night going through some tutorials on &lt;code&gt;cProfile&lt;/code&gt; and &lt;code&gt;SnakeViz&lt;/code&gt;.  Any future
performance work will follow the normal process but getting to the point where I felt
comfortable enough with the tools took some work.  So, I deviated.&lt;/p&gt;
&lt;p&gt;Having a process is good, and for me, it is a necessity.  It helps me release my mind
from figuring out what order to do things in, as I already have a process for that.
But being bound to that process with no escape valve is not a good thing.  I know I
have a personal high bar on when I deviate from the project’s process. But I also know
I am honest with myself on when and why I believe I need to deviate.  And the two of those
concepts working together is what makes my escape valve work nicely.&lt;/p&gt;
&lt;h2 id="learning-6-know-how-you-rubber-duck-you"&gt;Learning #6: Know How You Rubber Duck You&lt;a class="headerlink" href="#learning-6-know-how-you-rubber-duck-you" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For reference, I have a little rubber duck on my desk called “Duckie” (named after
the character in the movie
&lt;a href="https://en.wikipedia.org/wiki/Pretty_in_Pink"&gt;Pretty in Pink&lt;/a&gt;).  While the development
process of
&lt;a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging"&gt;rubber ducking&lt;/a&gt;
does not require an actual rubber duck to talk to, I had one available and I found
that rubber ducking to an actual rubber duck amusing.  Duckie also serves as a visual
reminder to me to stop and think through what I am doing.  If the concept that I am
trying to get working is too complicated, how can I make it less complicated?  If I
can make it less complicated, it should mean that I can solve the problem by breaking
it down into smaller, easier to understand problems.  And I know it sounds
silly, but if I cannot break the problem down into a simple enough problem that I
can explain it to Duckie&lt;sup id="fnref:Duckie"&gt;&lt;a class="footnote-ref" href="#fn:Duckie"&gt;1&lt;/a&gt;&lt;/sup&gt; and have Duckie understand it, then I have some work
to do.&lt;/p&gt;
&lt;p&gt;For me personally, I also know that sometimes I need to walk our dog or just get out and do
something else and rubber duck with myself.  From my experience, if I stare at a problem
for long enough, the answer does not materialize, I just get sore eyes and a headache.  By
taking a break from the problem that I am trying to solve, I find my mind wanders and
just naturally starts sifting through the problem in the back of my head.  If you are
around me when I am doing this, it will appear that I am going mad, mumbling to
myself.  But this process helps me sort through stuff, allowing me to then re-engage with
the problem with a fresh set of eyes, hopefully observing something new that I missed
before.  As a plus, I think our dog likes the extra attention he gets during those walks,
as I think he thinks I am talking to him when I am actually just muttering to myself.&lt;/p&gt;
&lt;p&gt;My final level of rubber ducking is my wife.  At various times during the day,
we visit each other and ask each other how the other’s day is going.  If she needs
to talk through something with me, I give her the floor.  If I need to talk through
something with her, she gives me the floor.  We both know that the other is seldomly
going to be able to provide actual advice on the subject, but the mere act of talking
it through helps.  We both know a bit about what the other is doing, enough that we
can ask simple questions to seek clarity on certain things that we heard.  Between
the listening and the simple questions, my wife is one heck of a rubber duck!&lt;/p&gt;
&lt;p&gt;The important thing for me is not talking about how I rubber duck to give other people
ideas on how they can rubber duck.  Instead, I am trying to communicate that everyone
rubber ducks in their own way, and if it gets the job done, it is a good
rubber duck process.  It must be something that either helps you organize your
mind until you see the picture more clearly, or you focus your mind on something completely
different to give your mind a chance to reset.  It can be as simple as breathing
techniques,as complicated as solving some manner of puzzle, or as exhausting as a
10 kilometer run.  It is just something that works for you.&lt;/p&gt;
&lt;h2 id="learning-7-ask-for-the-right-kind-of-help"&gt;Learning #7: Ask For The Right Kind of Help&lt;a class="headerlink" href="#learning-7-ask-for-the-right-kind-of-help" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This final bit of learning is one that should be obvious but is not always obvious
all the time:  ask for help, but ask for the right kind of help and in the right way.&lt;/p&gt;
&lt;p&gt;I have always used
&lt;a href="https://talk.commonmark.org/"&gt;the forums&lt;/a&gt;
for the CommonMark reference implementation as a resource but have recently started
to ask questions in those forums.  For the first 95% of the parser, the specification
has great examples and great explanations for each scenario that I came across.  Which
has higher precedence: a link sequence or a code span sequence?  See
&lt;a href="https://github.github.com/gfm/#example-533"&gt;example 533&lt;/a&gt; and the text around it. Are
empty links allowed?  See
&lt;a href="https://github.github.com/gfm/#example-559"&gt;example 559&lt;/a&gt; and
&lt;a href="https://github.github.com/gfm/#example-560"&gt;example 560&lt;/a&gt;.  But the questions are not
always that easy to answer.&lt;/p&gt;
&lt;p&gt;Now that I am into that last 5% of scenarios for the parser, I often find myself outside
in the weeds as far as the specification and reference implementation goes.  In some
cases, the parser is wrong, and I need to understand how it is wrong to fix it properly.
In some cases, the specification is poorly worded or did not include some text required
to resolve the specific outside case that I found.  And in some rare cases, I find issues
with the reference implementation that I am not convinced are issues until I talk through
them with the forum.  In those cases, after discussion with the members of
that forum, I add issue reports to the respective GitHub repository for that parser.&lt;/p&gt;
&lt;p&gt;I believe that part of my success in communicating with that forum is based on a handful of
principles. The first principle is that no parser is wrong, it just depends on what the
specific requirements of that parser are.  The second principle is that I am
not there to point fingers at anyone or their implementation, but to ask questions and get
some help.  This means that I try and always word my questions using the word “I”.  “I am
having trouble understanding…” “I am not sure where I went wrong with…” “I am reading
the specification and…”  The third principle is that I always do my homework.  Before
I post something to the forums, I make sure I have looked at the problem from multiple
angles and try and document the relative research in my post.  I do not want anyone to do
more work than they have to in order to help me.  Maybe it is just me, but I find that
rude.  And finally, the last principle is an easy one.  Be gracious.  Everyone on
the forum is participating because they want to, and many of them are responding on their
own free time.&lt;/p&gt;
&lt;p&gt;Every time I ask for help, it is with those principles in mind.  And so far, it seems to
be working quite well!&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While this entire article is about my experiences and how I have learned from them,
the one thing that I have learned a lot more about in the last year of working on this
project is my ability to be patient.  I am not sure to which extent it is surviving through
this year of the pandemic or it is developing the project to meet my goals, but I know
both have contributed to a renewed sense of patience that I now have.&lt;/p&gt;
&lt;p&gt;In both cases, I think that things just are the way they are, and they must play out.
Sure, I can rush the PyMarkdown project and release early, but then I would not feel good
about the quality.  Yes, I can decide to not be careful with the pandemic around, but I
would feel terrible if someone near me got sick because of my actions.  With the project,
I have requirements and goals, and I just need to follow those as my North Star.  With my
life, I know that helping to ensure the health and safety of others is one of personal
life North Stars. In both cases, I must be patient follow what I believe to be
right.&lt;/p&gt;
&lt;p&gt;It took me a lot of effort, both project-wise and life-wise to get to this point in
the project.  Now that I am on a clearly defined road to release, I know that I can be
patient for just a little bit longer, without sacrificing any of my requirements.
For me, that is a great thing to realize and learn about myself!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having exhausted the list of unprioritized items in the issues list, it was time to
get to work on the Priority 1 and Priority 2 items on that list.  Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:Duckie"&gt;
&lt;p&gt;To be clear, Duckie is not sentient and does not speak to me.  It really is a test of whether or not I think that Duckie could understand it, if he had a decent enough amount of sentience. &lt;a class="footnote-backref" href="#fnref:Duckie" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 19</title><link href="https://jackdewinter.github.io/2021/02/01/markdown-linter-delving-into-the-issues-19/" rel="alternate"></link><published>2021-02-01T00:00:00-08:00</published><updated>2021-02-01T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-02-01:/2021/02/01/markdown-linter-delving-into-the-issues-19/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/25/markdown-linter-delving-into-the-issues-18/"&gt;last article&lt;/a&gt;, I documented how
I was working hard to get to the end of the unprioritized items in my issues list
and on to the prioritized parts of the list.  This article details the work that
I am performing to get to the end of the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/25/markdown-linter-delving-into-the-issues-18/"&gt;last article&lt;/a&gt;, I documented how
I was working hard to get to the end of the unprioritized items in my issues list
and on to the prioritized parts of the list.  This article details the work that
I am performing to get to the end of the unprioritized list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I started the week with one goal on my mind: to clear out any unprioritized items so that
I can start working on the prioritized items next week.  I knew that goal might not be
achievable, but that was okay for me.  It was something concrete that I could work towards.
Possibly achievable and concrete… sounded good to me!&lt;/p&gt;
&lt;p&gt;Internally, I was fighting a different battle.  I knew that I had some work to do to
finish off the unprioritized items. I knew that I also had some clearly defined priorities
that I had listed in the issues list.  But in the process of prioritizing items, I missed
the sections that occur after the &lt;code&gt;Bugs - Tabs&lt;/code&gt; section.  While not everything would be
actionable right away, I did need to take the time to figure out when those
sections will be handled.  Not having a plan with the release getting closer was just
getting to me.&lt;/p&gt;
&lt;p&gt;At the very least, I know that I could wait with a concrete decision on that question
until after all the unprioritized items were resolved, so off I went!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/31b0169baae52401112a4ae422aac4c4d333d0e5"&gt;20 Jan 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/e1dcba175cb9837f77ec9f7c5b82120c6cd8a394"&gt;24 Jan 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-big-push"&gt;The Big Push!&lt;a class="headerlink" href="#the-big-push" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From the number of items in the issues list that were not prioritized, I knew that if I
focused for between a couple of days and a week, I could get every unprioritized item
resolved.  It was time for a big push!  &lt;/p&gt;
&lt;h3 id="yet-more-fun-with-link-reference-definitions"&gt;Yet More Fun With Link Reference Definitions&lt;a class="headerlink" href="#yet-more-fun-with-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It seems like I cannot get away from issues involving Link Reference Definitions, but
I was going to try by resolving this issue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dedup&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;append_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_reference_links_extra_03h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;hc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After consultation with the people on the
&lt;a href="https://talk.commonmark.org/t/hard-line-breaks-and-link-reference-definitions/3755"&gt;CommonMark forums&lt;/a&gt;,
I decided to double-down on my decision from last week to implement code that follows
the CommonMark reference implementation.  While I did get agreement that the Markdown
from function &lt;code&gt;test_reference_links_extra_03h&lt;/code&gt; should parse as a valid Link Reference
Definition, the current version of CommonMark (0.29.2) does not support that.  As such,
I had to make sure that the PyMarkdown parser does not support that.&lt;/p&gt;
&lt;p&gt;After adding a few extra test functions to make sure I had covered all the scenarios,
I started debugging and found the issue almost immediately.  In processing the line
within the Link Reference Definition using the &lt;code&gt;__is_link_reference_definition&lt;/code&gt; function,
the function was always finding that the Link Reference Definition was valid, including
when it ended with the Hard Line Break elements backslash &lt;code&gt;\&lt;/code&gt; character.  Adding some
extra code to the &lt;code&gt;__is_link_reference_definition&lt;/code&gt; function solved that issue, only to
show another issue.&lt;/p&gt;
&lt;p&gt;In some rare cases, a line can end with an escaped backslash character, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, the final backslash is escaped, and is represented in the token by
the Python string &lt;code&gt;bar\\\b\\\nfoo&lt;/code&gt;.  As Python escapes a backslash with another
backslash, that string is effectively read as the text &lt;code&gt;bar&lt;/code&gt;, an escaped backslash &lt;code&gt;\\&lt;/code&gt;,
a backspace special character &lt;code&gt;\b&lt;/code&gt;, another escaped backslash &lt;code&gt;\\&lt;/code&gt;, the newline character,
and finally the text &lt;code&gt;foo&lt;/code&gt;.  As I have mentioned in previous articles regarding the
project’s use of the backspace character, the first escaped backslash will be countered by
the backspace character, effectively leaving a single backslash followed by a newline
character as the most interesting character sequences in that string.  While it can be
a bit confusing to read (even to me sometimes!), that encoding allows a process to decide
whether to look at that string in its original Markdown form or in its target HTML form.&lt;/p&gt;
&lt;p&gt;While that interpretation of the sequence is correct, the parser needed to be changed
to prevent that particular end-of-line sequence from being recognized as a
Hard Line Break element.  That sequence was not really a &lt;code&gt;\&lt;/code&gt; character at the end of the
line, it was an escaped &lt;code&gt;\&lt;/code&gt; character at the end of the line.
Having identified the issue, I quick worked to modify the &lt;code&gt;handle_line_end&lt;/code&gt;
function to verify that the characters before a backslash at the end of the line were
not the sequence &lt;code&gt;\\\b&lt;/code&gt;.  After running the tests a couple of times and performing
some extra verification steps to make sure I got it right, it was on to the next issue.&lt;/p&gt;
&lt;h2 id="link-reference-definitions-and-list-boundaries"&gt;Link Reference Definitions and List Boundaries&lt;a class="headerlink" href="#link-reference-definitions-and-list-boundaries" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the goal of resolving this item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_link_reference_definitions_extra_01c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I enabled test function &lt;code&gt;test_link_reference_definitions_extra_01c&lt;/code&gt; and added a new
test function &lt;code&gt;test_link_reference_definitions_extra_01d&lt;/code&gt;.  Then I started looking at
the test examples, and I realized that I needed to think carefully about them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I knew it was a Link Reference Definition that should be broken, but I was not 100% sure
why it was broken.  Working through it on paper, I got the concrete answer that I needed.
At the end of line 1, the parser has a
single list started, with a partial Link Reference Definition active.  However, when the
second line starts with a character that is not part of a valid Link Reference Definition,
the processing is rewound, and the first line is reinterpreted as plaintext.  From there,
it becomes a single list with two list items, each list item containing half of the
“almost” Link Reference Definition.&lt;/p&gt;
&lt;p&gt;With that research in hand, I started debugging and realized two things.  The first was
that the &lt;code&gt;caller_can_handle_requeue&lt;/code&gt; argument on the &lt;code&gt;close_open_blocks_fn&lt;/code&gt; function
was not set to &lt;code&gt;True&lt;/code&gt;.  This meant that the Link Reference Definitions would never be
closed by that function.  When I addressed that issue, I found the second thing: turning
that flag on and supporting the rewind or requeue from that point required a lot of
argument passing.  While I didn’t have a lot of time to address it now, I made sure
that there was something in the issues list about addressing the issue of passing too
many arguments along and moved on.&lt;/p&gt;
&lt;h2 id="link-reference-definitions-and-block-quote-boundaries"&gt;Link Reference Definitions and Block Quote Boundaries&lt;a class="headerlink" href="#link-reference-definitions-and-block-quote-boundaries" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Being in the same area as with Link Reference Definitions and List Boundaries, I figured
that dealing with this item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_link_reference_definitions_extra_02b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was a good use of my time.  The research for this item almost followed the exact same path
that my research had followed for List Blocks.  The only difference was that they
were working on Block Quote boundaries instead of List boundaries.  Using the same
manner of fixing this issue for Block Quotes as I used for List Blocks, this issue was
quickly fixed.  This fix also carried over to the next issue that I addressed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;increases&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;LRD&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a matter of fact, I did not have to add any extra code to the parser above the code
that I originally added for function &lt;code&gt;test_link_reference_definitions_extra_02b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But having seen that I missed on a number of these scenarios involving non-paragraph
Leaf Block elements, I wanted to make sure that I had some coverage in there for the
other Leaf Block elements, hence, the issue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;introduces&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To address that issue, I added new scenario tests, test function
&lt;code&gt;test_block_quotes_229c&lt;/code&gt; to test function &lt;code&gt;test_block_quotes_229j&lt;/code&gt;.  I just started with
Indented Code Blocks, proceeded to Fenced Code Blocks, ending up on HTML Code Blocks.
With various variations in place, when I was done there were nine new scenario tests,
with five of those tests being disabled.  I had some work to do!&lt;/p&gt;
&lt;h2 id="before-signing-off-for-the-night"&gt;Before Signing Off For The Night&lt;a class="headerlink" href="#before-signing-off-for-the-night" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before I shutdown my system for the night, I looked around and noticed that there was
another item that was like the one I had just added tests for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;518&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;518&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;inside&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;test_paragraph_extra_j0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I had also forgotten to run Black on my last couple of commits, it was a good chance
to see if I had even more work to do, or if I would get a break and have some good,
positive test karma come my way.  I added test function &lt;code&gt;test_paragraph_extra_j0e&lt;/code&gt;
and two variations, one with the same thing in a Block Quote element and the other
with the same thing in a List Block element.  The good news? It worked first time,
with no test needing to be disabled.  It was a good way to end that day!&lt;/p&gt;
&lt;h2 id="friday-night-blues"&gt;Friday Night Blues&lt;a class="headerlink" href="#friday-night-blues" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As Friday night rolled around, I found that I had some spare time to work on the PyMarkdown
project that evening, but I was less than enthusiastic about it.  It seemed that every
time I worked on the project, I would resolve two or three items from the issues list,
only to add another three or
four items to that same list.  It felt like I was spinning my wheels and getting nowhere.
It took me looking at the specification and the existing scenario tests to realize that
I was just hitting a lot of boundary conditions for Block Quote elements.  At that moment
it dawned on me:  I was not adding hard-to-solve items to the issues list, I was adding
little issues that were, in all honesty, way off the beaten path of Markdown. Not to
sound too negative, but I was dealing with the nit-picky scenarios!  That helped me to
get my mind in the correct perspective!&lt;/p&gt;
&lt;p&gt;It was with that renewed sense of purpose that I refocused to work on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_block_quotes_229d&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;BQ&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ICB&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Working through the debug logs, I quickly came to an interesting conclusion.  Due to
paragraph continuation lines, most of the existing Block Quote tests would either
maintain or increase their level of Block Quotes, but never decrease.  If one of the
Block Quote start characters was missing within a paragraph, the paragraph continuation
rule would kick in the Block Quote would continue along without any disruptions.&lt;/p&gt;
&lt;p&gt;But that was not so with other, non-Paragraph elements.  Focusing on the item that
I was currently working on, I changed the &lt;code&gt;__ensure_stack_at_level&lt;/code&gt; function to
properly determine when the stack needed to increase (&lt;code&gt;stack_increase_needed&lt;/code&gt;) and
when the stack needed to decrease (&lt;code&gt;stack_decrease_needed&lt;/code&gt;).  With that code in place,
I added code to reduce the Block Quote count if needed, closing any open elements
until the proper Block Quote count was reached.&lt;/p&gt;
&lt;p&gt;And while a lot of issues I fixed in this time were only with the parser itself, this
issue required changes in the Markdown transformer.  It was not anything big, but to
make sure that the Block Quote token’s &lt;code&gt;leading_text_index&lt;/code&gt; field was properly maintained,
the &lt;code&gt;__rehydrate_block_quote&lt;/code&gt; function and the &lt;code&gt;__rehydrate_block_quote_end&lt;/code&gt; function
needed to properly increase that variable if needed.  After a bit of fiddling and
verification to make sure that everything was once again passing, it was off to
relax before a long day on Saturday.&lt;/p&gt;
&lt;h2 id="saturdays-slog"&gt;Saturday’s Slog&lt;a class="headerlink" href="#saturdays-slog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Knowing that I would have a big chunk of time on Saturday, I resolved to myself to push
hard to see if I could get to the end of the unprioritized list by the end of the day.  In
my mind, I was not sure if I would be able to do it, but I figured a good push to resolve
issues wouldn’t hurt either way.  With that, and some loud music in the background,
I hunkered down and got to work.&lt;/p&gt;
&lt;h3 id="block-quotes-and-html-blocks"&gt;Block Quotes and HTML Blocks&lt;a class="headerlink" href="#block-quotes-and-html-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having had good success with Indented Code Blocks and Block Quotes the night before,
I decided to just power ahead and deal with this item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_block_quotes_229i&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;test_block_quotes_229j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;BQ&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Doing some testing against BabelMark, I soon found out that unlike the Indented Code
Block element, HTML Code Blocks inside of a Block Quote element treated any extra
Block Quote start characters as Code Block text.  Looking over the GFM specification
and thinking about it a bit, this made sense to me.  The HTML Code Block has five different
start sequences and five matching close sequences.  Other than the Block Quote sequences
that were in place when it started, unless it matched one of those close sequences,
it would just treat any increases as text that was a part of the Code Block itself.
But that wasn’t how the parser was interpreting it. It was trying to open a new
Block Quote when it saw the extra Block Quote prefix character.&lt;/p&gt;
&lt;p&gt;To address this, I had to modify the &lt;code&gt;__count_block_quote_starts&lt;/code&gt; function to recognize
that situation, and then respond to that with changes in the
&lt;code&gt;__get_nested_container_starts&lt;/code&gt; function to ignore a change in Block Quote starts.
With those changes in place, enabling test function &lt;code&gt;test_block_quotes_229j&lt;/code&gt; was trivial,
modifying this piece of code from the function &lt;code&gt;__ensure_stack_at_level&lt;/code&gt; from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;stack_decrease_needed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top_token_on_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_indented_code_block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;stack_decrease_needed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;top_token_on_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_indented_code_block&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;top_token_on_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_html_block&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running the tests, the scenario tests now passed, and it was on to the next item.&lt;/p&gt;
&lt;h2 id="two-code-blocks-down"&gt;Two Code Blocks Down…&lt;a class="headerlink" href="#two-code-blocks-down" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And one type of code block left to deal with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_block_quotes_229g&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;test_block_quotes_229h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;BQ&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;FCB&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I would love to say that fixing these tests just required one or two lines of
code, that would be dishonest.  Because the processing of the Fenced Code Block elements
is sufficiently different from the other Code Blocks, the handling of it in the
&lt;code&gt;__handle_block_quote_section&lt;/code&gt; function was separate from the other token types.  But
while I had to repeat changes that were like the ones made for Indented Code Blocks
and HTML Code Blocks, it was very beneficial to have them to use as templates.  I
effectively used them to shortcut my debugging processes, getting both tests working
in what I would consider record time!&lt;/p&gt;
&lt;h2 id="just-to-be-sure"&gt;Just To Be Sure&lt;a class="headerlink" href="#just-to-be-sure" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was confident that I had properly addressed all the issues that had been raised so far,
but I was also concerned that I was being shortsighted.  So, at that time, I added
the item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="n"&gt;levels&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="n"&gt;over&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="n"&gt;transitions&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I re-read that item before starting to work on it, I clearly understood that it
was to question whether I
had coded the Block Quote transitions for the “plus one” cases or the “plus any” cases.  I
realize that it may not seem like a large difference to others, but I was concerned that I
had used an &lt;code&gt;if&lt;/code&gt; statement and checked at one level instead of using a &lt;code&gt;while&lt;/code&gt; statement,
checking until multiple levels had been processed.  &lt;/p&gt;
&lt;p&gt;After adding 10 new tests that did multiple increases and multiple decreases within
various Leaf Block elements, I held my breath and ran the scenario tests.  Did I get all
the cases the first time around?  How many did I miss?  Was the work to correct them
going to be difficult or easy to complete?  I just wanted to get this done.&lt;/p&gt;
&lt;p&gt;Having worked myself up over a possible lengthy set of fixes, I was pleased to find out
that only one change was required.  In the &lt;code&gt;__adjust_paragraph_for_block_quotes&lt;/code&gt; function,
I had coded a check to look for a Block Quote end token that was preceded by a Fenced
Code Block end token.  While the purpose of the check remained the same, I needed to
adjust it a bit for a case of multiple Block Quote transitions.  That check went from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block_end&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;number_of_block_quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;number_of_block_quotes&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;number_of_block_quotes&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block_end&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Other than that change, which took approximately 10 minutes to debug and implement,
all the other tests passed without requiring any changes.&lt;/p&gt;
&lt;h2 id="the-last-unprioritized-item"&gt;The Last Unprioritized Item&lt;a class="headerlink" href="#the-last-unprioritized-item" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, there was only one item left in the &lt;code&gt;Uncategorized&lt;/code&gt; section:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;single&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like the work done in the last section, I believe this was a reminder to myself
to not forget that List Blocks can also be encapsulated within a Block Quote block.
So, with the learnings of the past two sections in mind, I put together a series of
four new scenario tests for List Blocks within Block Quotes and ran the tests without
thinking about it.  They all worked on the first try, with no other changes required
in the project!  It was a good end to this series of work!&lt;/p&gt;
&lt;h3 id="and-done"&gt;And… Done!&lt;a class="headerlink" href="#and-done" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And it was with that commit that I finished working on the unprioritized items in the
issues list.  From here on, it was getting prioritized items out of the way for the
release!&lt;/p&gt;
&lt;h2 id="starting-on-prioritized-issues"&gt;Starting On Prioritized Issues&lt;a class="headerlink" href="#starting-on-prioritized-issues" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having spent a lot of my mental capital to get to this point in the project, I was
explicitly looking for some issues that were
&lt;a href="https://idioms.thefreedictionary.com/low-hanging+fruit"&gt;low hanging fruits&lt;/a&gt;.
While I knew that there were some bulkier items to deal with in the list, i wanted to try
and clear some of the light issues away to get a clearer picture of what was left.&lt;/p&gt;
&lt;h2 id="some-simple-research"&gt;Some Simple Research&lt;a class="headerlink" href="#some-simple-research" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Intending to start with something simple, this item seemed like a good fit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;where&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; `&lt;span class="nv"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;starting_whitespace&lt;/span&gt;:` &lt;span class="nv"&gt;used&lt;/span&gt;? &lt;span class="nv"&gt;why&lt;/span&gt;? &lt;span class="nv"&gt;better&lt;/span&gt; &lt;span class="nv"&gt;way&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt;?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thinking way back to when I added this, I remember wondering why I needed to do this in
addition to the other code in this function, and what effect it has.  To be honest, I
have written a lot of code for the PyMarkdown project in the last year.  While I try and
be clear with everything I write, I dropped the ball on this one.  Time to figure it out!&lt;/p&gt;
&lt;p&gt;Digging into this issue, I searched for the text &lt;code&gt;elif starting_whitespace:&lt;/code&gt; and replaced
that string with &lt;code&gt;elif False and starting_whitespace:&lt;/code&gt;.  After running the scenario tests,
I picked one of the failures at random, test function &lt;code&gt;test_atx_headings_extra_42&lt;/code&gt; and
looked at the failure.  As soon as I started looking at the test output, memories of this
change came flooding back to me.  Within an Atx Heading Element, there is at least one
space character between the start character (&lt;code&gt;#&lt;/code&gt;) and the text in the heading.  The HTML
output that is generated is fine, but when the Markdown transformer tries to reconstruct
the original Markdown, that leading space is not represented in the tokens.  To address
that issue, in those cases where it is not otherwise present in the list of tokens,
that code kicks in and adds a Text token with the right markers to resolve the issue.&lt;/p&gt;
&lt;p&gt;Experimenting with three or four alternate solutions to the issue, only one of those
solutions worked, and it was a lot more convoluted than the existing solution.  If there
is no text to create a Text token with that the parser can attach some extra whitespace to,
then create a Text token specially to hold that extra whitespace.  Basically, it
was good that I thought I could do better, but I already had the best solution for
the job!&lt;/p&gt;
&lt;h3 id="dealing-with-multiply-defined-link-reference-definitions"&gt;Dealing With Multiply Defined Link Reference Definitions&lt;a class="headerlink" href="#dealing-with-multiply-defined-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having thought about the item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;Link_helper&lt;/span&gt;.&lt;span class="nv"&gt;py&lt;/span&gt;&lt;span class="sc"&gt;#86&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;link&lt;/span&gt; &lt;span class="nv"&gt;already&lt;/span&gt; &lt;span class="nv"&gt;registered&lt;/span&gt;, &lt;span class="nv"&gt;should&lt;/span&gt; &lt;span class="nv"&gt;warn&lt;/span&gt;?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;at length, resolving it was easy.  While I could add something specific to deal with
that one case, it made more sense to just add a rule to deal with that case.  After a quick
check to verify that the &lt;code&gt;LinkReferenceDefinitionMarkdownToken&lt;/code&gt; class has a
&lt;code&gt;did_add_definition&lt;/code&gt; field, I resolved this one as done.&lt;/p&gt;
&lt;h2 id="picking-another-easy-one"&gt;Picking Another Easy One&lt;a class="headerlink" href="#picking-another-easy-one" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another easy item from the list was the item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;look&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;cases&lt;/span&gt; &lt;span class="nv"&gt;where&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;used&lt;/span&gt;, &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;convert&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;whitespace&lt;/span&gt; &lt;span class="nv"&gt;helper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This refactor was so easy, I almost feel that it is a waste talking about it.  Like the
replacement of the &lt;code&gt;\n&lt;/code&gt; character with &lt;code&gt;ParseHelper.newline_character&lt;/code&gt;, this
replacement was to replace the space character with &lt;code&gt;ParserHelper.space_character&lt;/code&gt; to
make it more visible.  While I was doing that, I noticed that there were a few
cases where I was trying to make those spaces visible using code like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;s"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To solve that issue, I cloned a copy of the &lt;code&gt;make_value_visible&lt;/code&gt; function, calling it
&lt;code&gt;make_whitespace_visible&lt;/code&gt;, and moving that code, plus code for the other whitespace
characters &lt;code&gt;\t&lt;/code&gt; and &lt;code&gt;\n&lt;/code&gt; into that function.  After refactoring the other occurrences
of that text to the use the new function, the work on that item was completed.&lt;/p&gt;
&lt;h3 id="wrapping-up-for-the-night"&gt;Wrapping Up For The Night&lt;a class="headerlink" href="#wrapping-up-for-the-night" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I was winding down to spend some time with my family, I wanted a simple task to help
me relax before stopping for the night.  While it was not very productive, I inspected
the code using PyCharm, resolving three very simple issues.  Combined with a full
run of my &lt;code&gt;clean&lt;/code&gt; script that runs Black, the changes were minor but useful.  Nothing
spectacular was changed, but it left the code “just that much better” and allowed me
to sign off for the night with a good feeling.  I had reached my goal for the week,
and I had also managed to clean some little things up as well.  A good combination!&lt;/p&gt;
&lt;h2 id="sunday-morning-refactoring"&gt;Sunday Morning Refactoring&lt;a class="headerlink" href="#sunday-morning-refactoring" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a long and productive Saturday, I decided to give myself a bit of a pass on the
hard work and resolve some easy “off-the-books” items.  Where possible, I have tried to
adhere to good
&lt;a href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;object-oriented programming&lt;/a&gt;
practices, encapsulating data within an object that cleanly encapsulates the purpose
behind the object.  From my experience, the problem with doing this with any kind of
language parser is that
there are often a group of miscenalenous variables that do not cohesively fall under a
single theme.  Often, I find that they are just a loose group of variables that need
to be maintained to get the job done.  Having the same type of problem with the
main processing phase of the PyMarkdown parser, I decided to just go ahead and group
these variables under the &lt;code&gt;ParserState&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;Over three commits, I managed to clarify the usage pattern for the four variables
already in that object.  This was done by adding a &lt;code&gt;__&lt;/code&gt; prefix to each of those
variables to ensure that only private usage of that field was allowed.  For external
usage of those variables, I added a new getter property for each variable with the same
name as the original variable.
In this way, I guaranteed that existing code that did not modify those variables would
remain as it was, while strengthening the usage pattern for those variables.
The additional eight variables were moved into the &lt;code&gt;ParserState&lt;/code&gt; class following a similar
pattern.  Instead of changing the name of the variable to include a &lt;code&gt;__&lt;/code&gt; prefix, the
variable was added to the class with the prefix already added, with the provided getter
function being added with the name of the variable minus the prefix.&lt;/p&gt;
&lt;p&gt;With those changes in place, I started to run the tests, and encountered and handful of
cases where the parser needed to change one of those variables during its processing.
In each of those cases, I looked at the code and tried to determine the best
way to set the information to the desired value while minimizing the exposure of that
variable to the rest of the parser.  In the case of the &lt;code&gt;set_no_para_start_if_empty&lt;/code&gt;
function, that exposure was just the name of the function, as the body of the function
only sets the &lt;code&gt;__no_para_start_if_empty&lt;/code&gt; variable to &lt;code&gt;True&lt;/code&gt;.  For the
&lt;code&gt;mark_start_information&lt;/code&gt; function, called when the container processor is invoked for a
new line, six of the variables in the class are set to their initial values, keeping any
changes in those variables within the class.  In all
cases, these were what I felt were the most minimal exposure that was needed for
other functions and classes dependent on the &lt;code&gt;ParserState&lt;/code&gt; class and its variables.&lt;/p&gt;
&lt;h3 id="more-cleanup"&gt;More Cleanup&lt;a class="headerlink" href="#more-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once those variables were placed within the &lt;code&gt;ParserState&lt;/code&gt; class with their getters and
setters, I started going through downstream functions.  In each case, I looked for the name
of one of the variables that I moved into the class and determined if it could be replaced
by a simple reference to the &lt;code&gt;parser_state&lt;/code&gt; variable that was used for the current instance
of the &lt;code&gt;ParserState&lt;/code&gt; class.  When I could replace it, I simply took the function argument,
say &lt;code&gt;original_stack_depth&lt;/code&gt;, and replaced it with &lt;code&gt;parser_state.original_stack_depth&lt;/code&gt; where
it was used in the function.  At that point, when I completed that task properly, the
argument would show up as unused, and I would remove it from the function’s argument list,
also removing it from the arguments passed to that function wherever it was called from.
At that point, it was simply another case of
&lt;a href="https://en.wikipedia.org/wiki/Lather,_rinse,_repeat"&gt;lather-rinse-repeat&lt;/a&gt;
until all non-class references were replaced with class references.&lt;/p&gt;
&lt;p&gt;And to be honest, here was where having the solid heft of the scenario tests came in very
handy.  Instead of just praying that I had made the right changes, every couple of changes
was followed with the execution of the complete set of scenario tests.  If there was a
failure, I would investigate and find out the reason why it failed, addressing that issue.
If things were fine, I would stage the changes in Git, allowing me to progress forward with
confidence that I could back out any change at any time.  While this process was a long
process, the confidence that it gave me that I was making the right changes was priceless.
With over 99.5% code coverage, if I messed something up in the refactoring, I found out
about it right away.  &lt;/p&gt;
&lt;p&gt;I was making the right changes to clean up the project code, and I was not negatively
impacting the code.  It was good to be able to do both with the security and confidence
of a well-tested project.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking back at the work I did during the week, it was hard not to get jazzed by the
fact that I set a goal to eliminate all non-prioritized items from the issues list.  That
was tampered with the question about what to do with the other sections that I had forgot
about, but it was still a win.  And in its own way, resolving the unprioritized section
of the issues list helped me answer my own question. I would just prioritize them!&lt;/p&gt;
&lt;p&gt;The remaining sections are cleanly divided into two groups: features and bugs.  With the
possible exception of front matter&lt;sup id="fnref:front"&gt;&lt;a class="footnote-ref" href="#fn:front"&gt;1&lt;/a&gt;&lt;/sup&gt;, while the other features would be nice to
have, I didn’t
need any of them for the initial release.  The bugs that remained also divided nicely
into two groups: Tabs and Rules.  As a linter is nothing without some good rules to
show its power, fixing the items in the Rules sections before release was non-negotiable.&lt;/p&gt;
&lt;p&gt;The issues in the Tabs section were a different story.  Making sure that the Tab support
was spot on was going to be a sub-project, not something that I wanted
to rush.  Provided that I can come up with an “almost” interim solution for Tabs, I should
be okay. Not great, but okay.  The only reason I have confidence in saying that is because
most people that I know shy away from tab character in their documents and source code,
mostly due to questions on how they are interpreted.  So, while I do have to address Tabs
properly at some point, it doesn’t need to be until after the release.&lt;/p&gt;
&lt;p&gt;Getting everything fixed and coming up with a good plan for the rest of the sections was
just what I needed.  Another concrete goal that I can see myself achieving.  And yet
another step closer to the release!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After 19 articles detailing how I was attacking each group of issues, I thought it
would be useful to look back over that effort and determine how things went and lessons
learned.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:front"&gt;
&lt;p&gt;Since every article I write has a front matter section to it, I strongly feel that including that one feature into the release should be a priority. &lt;a class="footnote-backref" href="#fnref:front" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 18</title><link href="https://jackdewinter.github.io/2021/01/25/markdown-linter-delving-into-the-issues-18/" rel="alternate"></link><published>2021-01-25T00:00:00-08:00</published><updated>2021-01-25T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-01-25:/2021/01/25/markdown-linter-delving-into-the-issues-18/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/18/markdown-linter-delving-into-the-issues-17/"&gt;last article&lt;/a&gt;, I documented how
I was working hard to get to the end of the unprioritized items in my issues list
and on to the prioritized parts of the list.  This article details the work that
I am doing to make that push happen.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/18/markdown-linter-delving-into-the-issues-17/"&gt;last article&lt;/a&gt;, I documented how
I was working hard to get to the end of the unprioritized items in my issues list
and on to the prioritized parts of the list.  This article details the work that
I am doing to make that push happen.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now a week or so removed from the New Year’s Holiday break, it was refreshing to know
that I was still able to resolve a healthy collection of items from the issues list.
Sure, it was not the same volume as during the holiday, but it was still a healthy
volume of issues to resolve.&lt;/p&gt;
&lt;p&gt;And I definitely felt that I was getting closer to the end of the initial phase of the
PyMarkdown project.  I was pretty sure that I would not be able to resolve every item
from the unprioritized section of the issues list this week, but I was confident that
it was going to happen in the week after.  I just had to maintain a good velicity of
resolving issues, and I would get there soon!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/dcffbeb19cce01f2a4acdf51c572712b0e303af8"&gt;11 Jan 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/8b0e5abc8ba7996ed35387c44914e3696b068885"&gt;17 Jan 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="doing-some-simple-cleanup"&gt;Doing Some Simple Cleanup&lt;a class="headerlink" href="#doing-some-simple-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As always, I try and ease into the project work for the week with something simple.  This
week was no different.  And while this change might seem to be of no consequence to others,
to me it was a question of readability and searchability.  The task?  To replace newline
characters in the source code with &lt;code&gt;ParserHelper.newline_character&lt;/code&gt; and to replace the
colon character (&lt;code&gt;:&lt;/code&gt;) separating the extra data field for the Markdown tokens with
&lt;code&gt;MarkdownToken.extra_data_separator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While it might not be obvious to people that are not dealing with the source code, the
presence of those two characters in an unescaped and unreferenced form had caused me a lot
of frustration.  I guess if I had to pin down a cause why that happened, it was because
a newline character and a single colon character are easy to miss when scanning through
source code.  I wanted something that I could easily find, and not something that I would
easily miss, as had happened numerous times during debugging sessions.  For me, the
cost of this change was easily outweighed by the benefit for readability.&lt;/p&gt;
&lt;p&gt;It was not a change that fixed an issue or enabled a scenario tests, but I was able
to notice the difference almost instantly.  It just helped me see the code better,
and that was its goal!&lt;/p&gt;
&lt;h2 id="upgrading-to-python-38"&gt;Upgrading To Python 3.8&lt;a class="headerlink" href="#upgrading-to-python-38" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having started a year ago, Python 3.7 was the stable release of Python at the time the
project started.  At that time, Python 3.8 had just been released on 14 October 2019
&lt;sup id="fnref:courtesy"&gt;&lt;a class="footnote-ref" href="#fn:courtesy"&gt;1&lt;/a&gt;&lt;/sup&gt;, a couple of weeks before I started working on the code.  With the
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d2c3b2c2cbbc6e9f5524c38571dedcec305915b0"&gt;first commit&lt;/a&gt;
of the source code on 22 Nov 2019, it just seemed like a safer bet to stay with version
3.7 until the bugs were worked out of the then brand new Python release.&lt;/p&gt;
&lt;p&gt;Just over a year later, with Python 3.9 released on 15 Oct 2020&lt;sup id="fnref2:courtesy"&gt;&lt;a class="footnote-ref" href="#fn:courtesy"&gt;1&lt;/a&gt;&lt;/sup&gt;, it felt like a
good time to upgrade one minor version with the same reasoning in mind.  However, there was
also another reason: performance.  Having started to explore the performance of the project
on sample Markdown pages, I found that the project’s parser was taking a long time to
parse a simple Markdown file.  Using
&lt;a href="https://docs.python.org/3/library/profile.html#module-cProfile"&gt;cProfile&lt;/a&gt; and
&lt;a href="https://jiffyclub.github.io/snakeviz/"&gt;SnakeViz&lt;/a&gt;,
I knew that the number one problem that I had with performance was the way I used log
statements.  Without going too far into my research&lt;sup id="fnref:moreLater"&gt;&lt;a class="footnote-ref" href="#fn:moreLater"&gt;2&lt;/a&gt;&lt;/sup&gt;, in order solve the
performance issue while keeping the extra functionality that helped me debug more
efficiently, I would soon need to write my own logging wrapper.  To do this properly, my
&lt;a href="https://docs.python.org/3/library/logging.html#logging.Logger.debug"&gt;research on logging&lt;/a&gt;
indicated that I would need to use the &lt;code&gt;stacklevel&lt;/code&gt; argument to allow the wrapper to
function while logging the location where the wrapper’s log statement was called from.
The catch?  It was introduced in Python 3.8.&lt;/p&gt;
&lt;p&gt;With a good reason to update and a good, stable version of Python 3.8 to update to, I
proceeded with the upgrade with relatively few issues.  The main issue that I hit was that
I needed to ensure that I uninstalled Python 3.7 in the project, install Python 3.8 on my
system (including all environment variables), and then install Python 3.8 in the project.
Once that was done, the only other issue that I had was with the
&lt;a href="https://pypi.org/project/black/"&gt;Black&lt;/a&gt;
Python formatter.  In that case, I needed to examine the graph for that package and make
sure that I installed the correct version of the dependent library in the project.&lt;/p&gt;
&lt;p&gt;After that small headache, which took minutes to solve, everything was working fine and continues to work fine.&lt;/p&gt;
&lt;h2 id="more-fun-with-link-reference-definitions"&gt;More Fun With Link Reference Definitions&lt;a class="headerlink" href="#more-fun-with-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing to mention about the next task is that while the commit was performed
earlier than the 3.8 Upgrade commit, chronologically this task came after the upgrade
task.  The reason that this is relevant is that the project uses the default settings
for Black, and either those defaults or the algorithm implementing the line folding
changed after the upgrade was completed.  Why is this relevant?  While the commit itself
looks like it has a lot of changes, many of those changes occurred in folding the lines
according to upgraded settings.  And as I was focused on the Link Reference Definitions,
I did not notice those formatting changes until after I had made a number of changes.
It was just easier to commit them together at that point than to pull them apart.&lt;/p&gt;
&lt;p&gt;Other than that noise, there were three new scenario tests introduced, testing
Link Reference Definition elements broken up across container block boundaries.  The
first test added, test function &lt;code&gt;test_link_reference_definitions_extra_01&lt;/code&gt;, was created
with a single Unordered List element character, followed by a valid Link Reference
Definition spread over two lines, with the second line not being indented:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second test, function &lt;code&gt;test_link_reference_definitions_extra_02&lt;/code&gt;, used the same
format, but used a Block Quote element prefix instead of an Unordered List prefix.
Finally, to provide a touchstone, I added function
&lt;code&gt;test_link_reference_definitions_extra_02&lt;/code&gt; that has both lines of the Link Reference
Definition preceded by the Block Quote element prefix.  While it was a duplicate
test, I felt it was a good reminder of how a test with both lines worked, and thus
it was a good reference test.&lt;/p&gt;
&lt;p&gt;Now, according to the specification, the List element continues if the next line starts
with enough whitespace
to maintain the indent or if it is a continuation of a Paragraph within the list.  As the
Link Reference Definition is not a Paragraph when parsed the first time, the second line
terminates the list, and causes the Link Reference Definition to be requeued and parsed as
a normal Paragraph on the second parse through.  Or so I thought.&lt;/p&gt;
&lt;h3 id="github-flavored-markdown-vs-commonmark"&gt;Github Flavored Markdown vs CommonMark&lt;a class="headerlink" href="#github-flavored-markdown-vs-commonmark" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While both specification are usually in sync with each other, sometimes the
&lt;a href="https://github.github.com/gfm/"&gt;GFM Specification&lt;/a&gt;
and the reference CommonMark implementation
&lt;a href="https://github.com/commonmark/commonmark.js"&gt;CommonMark.Js&lt;/a&gt;
called from
&lt;a href="https://johnmacfarlane.net/babelmark2/"&gt;Babelmark 2&lt;/a&gt;
differ in small implementation details.  I had experimented with the Block Quote
scenario test for three or so hours before I submitted a question to the
&lt;a href="https://talk.commonmark.org/t/block-quotes-laziness-and-link-reference-definitions/3751"&gt;CommonMark forums&lt;/a&gt;
asking if I had misunderstood something in the specification.&lt;/p&gt;
&lt;p&gt;The answer that came back was a supportive answer, but at the same time, an honest answer.
The approach that CommonMark’s reference parser had taken was to parse the lines as the
start of an Unordered List followed by a Paragraph block.  Only after that Paragraph block
had been parsed, with the paragraph continuation kicking in, does the parser look for a
Link Reference Definition at the start of that Paragraph.&lt;/p&gt;
&lt;p&gt;Is this 100% according to the GFM specification?  No.  But does it make sense for the
CommonMark team to do this?  I would argue yes.  Getting Link Reference Definitions correct
in the PyMarkdown parser has continued to be a pain to this day.  Based on my limited
experience, while
Link Reference Definitions can be spread over multiple lines, there are very few cases
where that is done in “real life”.  From a correctness viewpoint, if I had to guess on the
percentages,
I believe I would estimate that their approach correctly parses 99.5% of the Link Reference
Definition elements, with only some “weird” multiline Link Reference Definition scenarios
not being parsed.&lt;/p&gt;
&lt;p&gt;But that left me with a decision.  What was the correct thing to do for the PyMarkdown
parser?&lt;/p&gt;
&lt;h3 id="which-to-choose"&gt;Which To Choose?&lt;a class="headerlink" href="#which-to-choose" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After thinking about this overnight, I decided that the best approach for the project was
to align with the CommonMark reference implementation, while also discussing the
differences from
the GFM Specification with the CommonMark team in the forums.  By making that choice,
I had confidence that I would have something to compare against for correctness that was
both concrete and
measurable.  It either would parse properly against &lt;code&gt;commonmark.js 0.29.2&lt;/code&gt; and be
considered correct or it would
not and be considered a parsing failure. As for any differences, I could clearly note
them in documentation somewhere, and talk about them on the forums with the owners of
CommonMark and the GFM specification, trying to improve both.  It was not a perfect answer,
things rarely are perfect.&lt;/p&gt;
&lt;p&gt;With that decision in hand, I marked all three new tests as skipped before starting to
work on the Block Quote functions.  Based on what I was seeing in the test failures,
everything looked fine in the HTML output, except that the output was missing an entry
in the Block Quote for the parsed line.  Taking a wild guess, I determined that I needed
to introduce something in the &lt;code&gt;handle_block_quote_block&lt;/code&gt; function to ensure that the number
of lines in the Block Quote element were correct.&lt;/p&gt;
&lt;p&gt;Surprisingly, that was the fix that was needed.  No changes in the Markdown transformer
were needed, and no changes in the consistency check was needed.  Not sure what I had
going on that evening, I decided to mark the List Block version of the scenario test,
the function &lt;code&gt;test_link_reference_definitions_extra_01&lt;/code&gt;, as disabled.  Cleaning up
the code and committing it to the repository.  It was a good place to stop while I
figured out what was going on in the evening.&lt;/p&gt;
&lt;h3 id="getting-back-to-it"&gt;Getting Back To It&lt;a class="headerlink" href="#getting-back-to-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the plans for that evening falling through, I found that I had a couple of hours
free that evening. Not wanting to let them go to waste, I decided to see if I could tackle
the
&lt;code&gt;test_link_reference_definitions_extra_01&lt;/code&gt; function that I elected not to get working
in the previous section.  To ensure I was moving in the correct direction, I added
extra variations of the test that included one and two spaces before the second half
of the Link Reference Definition element, as well as one with each half of the Link
Reference Definition in its own List Item.&lt;/p&gt;
&lt;p&gt;As I have had numerous problems with List Blocks in the past, I expected to expend a
lot of effort to clean these cases up, but only a little bit of effort was required.
Specifically, the only change that was needed with in the &lt;code&gt;ListBlockProcessor&lt;/code&gt; class
and its &lt;code&gt;__check_for_list_closures&lt;/code&gt; function.  Like the previous section and the
Link Reference Definition element that spanned Block Quote element levels, the CommonMark
reference implementation was treating the Link Reference Definition text as a Paragraph
before detecting the Link Reference Definition element itself.  To replicate this
behavior, I needed to modify the &lt;code&gt;__check_for_list_closures&lt;/code&gt; function to keep the
‘paragraph’ open if it was parsing a Link Reference Definition.&lt;/p&gt;
&lt;p&gt;Making those modification, I was able to get the main function,
&lt;code&gt;test_link_reference_definitions_extra_01&lt;/code&gt;, working, as well as the sibling functions
&lt;code&gt;test_link_reference_definitions_extra_01a&lt;/code&gt; and
&lt;code&gt;test_link_reference_definitions_extra_01b&lt;/code&gt;.  This meant that a Link Reference
Definition split over a List Block and the end of that block with various amounts of
indentation was working properly.  However, function
&lt;code&gt;test_link_reference_definitions_extra_01c&lt;/code&gt;, where I split the Link Reference Definition
over two List Items was not working at all.  With my time used up in the evening, I
marked it as skipped, cleaned it up, committed it, and went to sleep for the night.&lt;/p&gt;
&lt;h2 id="and-more-link-reference-definitions"&gt;And More Link Reference Definitions&lt;a class="headerlink" href="#and-more-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I was looking at the content of the existing scenario tests, I noticed that I
did not have a couple of tests that had simple multi-line Raw HTML elements and
multi-line Code Span elements in links.  Basically, I wanted to take
&lt;a href="https://github.github.com/gfm/#example-644"&gt;example 644&lt;/a&gt; for Raw HTML elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="c1"&gt;-- this is a&lt;/span&gt;
&lt;span class="k"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;hyphen&lt;/span&gt; &lt;span class="c1"&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and &lt;a href="https://github.github.com/gfm/#example-345"&gt;example 345&lt;/a&gt; for Code Spans:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;``&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;bar&lt;/span&gt;  
&lt;span class="n"&gt;baz&lt;/span&gt;
&lt;span class="o"&gt;``&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and place them within both Inline Links and Reference Links.  I was hoping that this
was a simple test, but I was not sure.&lt;/p&gt;
&lt;p&gt;Adding all four tests, (two for Inline Links and two for Reference Links), I was pleasantly
surprised that all four tests passed without any changes.  While I am aware that I am
getting closer and closer to the initial release of the project, I still find that I
expect things to fail as a default setting.  As I am usually an optimistic person, my
only explanation for that failure viewpoint is one of writing too many automation tests
in my career.  When I note something down in the issues list, I believe that I feel that
most of those items are going to be things that I forgot to cover, not things that I wish
to ensure are covered.&lt;/p&gt;
&lt;p&gt;Regardless, I need to figure that out and work on it a bit.  I do have a lot of confidence
in the PyMarkdown project and its accuracy, and I need to project that more.&lt;/p&gt;
&lt;h2 id="fixing-disabled-tests"&gt;Fixing Disabled Tests&lt;a class="headerlink" href="#fixing-disabled-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a good night’s sleep and a good day’s worth of work under my belt, I settled down
in the evening to work on the next issue: enabling test functions
&lt;code&gt;test_block_quotes_extra_02ax&lt;/code&gt; to &lt;code&gt;test_block_quotes_extra_02ad&lt;/code&gt;.  The good news was
that the HTML transformer and the Markdown transformer were both working properly.
The bad news was that the consistency checks were failing for all these tests.&lt;/p&gt;
&lt;p&gt;It took me a bit to get going that evening, but when I did, it was obvious to me that the
problem was that the consistency checks were not recognizing the active Block Quote
element.  Following along in the &lt;code&gt;verify_line_and_column_numbers&lt;/code&gt; method, it became
obvious that the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;container_block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was not evaluating to &lt;code&gt;true&lt;/code&gt; for the four test functions that I was evaluating.  But
how to fix them?&lt;/p&gt;
&lt;p&gt;It took me a while to realize that the reason that the condition was not evaluating to
&lt;code&gt;True&lt;/code&gt; was that the Block Quote token was not always the last token on that list.
When I read the variable named &lt;code&gt;container_block_stack&lt;/code&gt;, in my head I was parsing it as
“the stack for container Block Quotes”, not “the stack for container blocks”.  Once
I figured that out, the answer became obvious.  I created a new function
&lt;code&gt;find_last_block_quote_on_stack&lt;/code&gt; that went back in the stack until it found to last
Block Quote token and returned it.  From there, I replaced any occurrence of
&lt;code&gt;container_block_stack[-1]&lt;/code&gt; with &lt;code&gt;last_block_quote_token&lt;/code&gt;.  Therefore, the code
from above became:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;last_block_quote_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_last_block_quote_on_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;container_block_stack&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_block_quote_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I ran the tests, and after clearing up a couple of typing mistakes, the tests all
worked properly, and they were now passing!&lt;/p&gt;
&lt;h2 id="a-quick-fix-i-hope"&gt;A Quick Fix… I Hope!&lt;a class="headerlink" href="#a-quick-fix-i-hope" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the end of the uncategorized section of the issues list, there was one item
that I felt confident that I could quickly deal with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;634&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;forcing&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To start working on this item, I made six copies of test function &lt;code&gt;test_html_blocks_123&lt;/code&gt;.
The first copy was in a List Block element, the next three copies were in various forms
of a Block Quote element, the fifth copy was within a SetExt Heading element, and the
last copy was within an Atx Heading element.  The hard part of each of these tests was
that I needed to make sure I was generating an HTML Block token and not a Raw HTML
token.  That took extra care but did not slow me down that much.&lt;/p&gt;
&lt;p&gt;Like a handful of other issues like this that I have fixed, the answer to this
one leapt out at me as soon as I looked through the log files.  When the next line
was examined to figure out if the Block Quote element should be continued, the
&lt;code&gt;check_for_lazy_handling&lt;/code&gt; was allowing it to continue.  The only issue here was that
it was an HTML block, a leaf block type that does not have any continuation logic in
the specification.  Having noticed that, it was easy to change the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_leaf_block_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_html_block&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_leaf_block_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;thereby fixing the issue.  Running the scenario tests again, the tests were indeed fixed
without needed any other changes.&lt;/p&gt;
&lt;h2 id="that-weeks-big-thing"&gt;That Week’s Big Thing&lt;a class="headerlink" href="#that-weeks-big-thing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Wrapping up the work for that week, I wanted to make another dent in the issues list,
so I decided to at least get the tests set up for the following item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="k"&gt;inner&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;mine&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;__collect_text_from_blocks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The base concept of this item was simple: create a group of tests to verify how inline
elements were represented when placed within a Link element.  To make sure that I was
doing a good scenario test, I made the choice to use a Reference Link element.  By
doing this, I would be testing the link label normalization code and the representation
code at the same time.&lt;/p&gt;
&lt;p&gt;Starting with &lt;code&gt;test_reference_links_extra_03x&lt;/code&gt;, I created a Link element with a link
label that contained a backslash in the link label:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, I then created a copy of that test that encapsulated that link label within
another link label:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and finally, I created a copy of that test, changing the Link element to an Image element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, after a bit of thinking, I decided there was only one combination I was missing,
so I added that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That being done, I then repeated that process with &lt;code&gt;&amp;amp;amp;&lt;/code&gt; and &lt;code&gt;&amp;amp;copy;&lt;/code&gt; for character
entity references, code spans, emphasis, autolinks, raw HTML, and hard line breaks.
By the time I was done, I had added 40 scenario tests to cover all these cases.&lt;/p&gt;
&lt;p&gt;Starting to execute the scenario tests, all the tests that just dealt with Link elements
were passing without any changes.  The Image elements, they were a different story.
The failures seemed to stare back at me, standing in the way of me writing the
article for that week.  It was just time to start debugging and figuring things out.&lt;/p&gt;
&lt;p&gt;After a bit of debugging, I seemed to notice that the test failures seemed to be in three
separate groups of issues.  The first group of issues was that the
&lt;code&gt;__collect_text_from_blocks&lt;/code&gt; function used to grab the existing tokens and render them
as text was not complete.  But that was not the entire issue, but I felt that there
was too much “noise” in the way for me to see the issue clearly.  Resolving to reduce
the noise in the issue, I started working on the main part of the issue.  In the cases
where the inline element was on its own inside the parent
Link element, the Code Span element, the Raw HTML element, and the Autolink element
were not representing their elements properly.  A bit of exploration and debugging took
care of that.  With that noise out of the way, I was able to see the other part of that
issue better, and added the condition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_inside_of_link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;at the start of each of those handlers.  The noise that I had experience was simply that
in cases where a possible Link element was within another Link element’s link label,
each of the changed elements just needed to emit nothing to the collection.  Running
the tests again, it verified that observations, but I also saw something else.&lt;/p&gt;
&lt;p&gt;Only after getting rid of those issues was I able to see that the
&lt;code&gt;__consume_text_for_image_alt_text&lt;/code&gt;
function was not handling Emphasis start and end elements properly, failing an assert
near the end of that function.  That fix was easy, adding four lines to the &lt;code&gt;elif&lt;/code&gt;
statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;inline_blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_emphasis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;inline_blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_emphasis_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With both of those issues dealt with, the couple of failures that remained were easy ones.
Looking at the HTML output, there were a number of &lt;code&gt;/a&lt;/code&gt; character sequences in the HTML
output.  Being the signature for replacement references, I quickly change of the code for
the Text element from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;image_alt_text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;inline_blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;image_alt_text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve_references_from_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;inline_blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="beware-of-special-cases"&gt;Beware Of Special Cases&lt;a class="headerlink" href="#beware-of-special-cases" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Running the tests again, all the tests were passing except for those that dealt with the
&lt;code&gt;&amp;amp;amp;&lt;/code&gt; sequence.  All the tests dealing with the &lt;code&gt;&amp;amp;copy;&lt;/code&gt; sequence were working fine,
so I had to think quickly to figure out what the problem might be.  Because I am used to
looking at processed HTML code, I initially did not see any problem with a &lt;code&gt;&amp;amp;amp;&lt;/code&gt; sequence
in the HTML output.  It looked right.&lt;/p&gt;
&lt;p&gt;Then it hit me.  The problem was not with the HTML output, it was with the processing of
the Markdown input.  In the cases that I had problems with, the desired HTML output had
&lt;code&gt;&amp;amp;amp;amp;&lt;/code&gt; which did not look right until I thought about it.  Whereas the &lt;code&gt;&amp;amp;copy;&lt;/code&gt;
character sequence is interpreted as a named charactery entity and replaced with the
© symbol, the sequence &lt;code&gt;&amp;amp;amp;&lt;/code&gt; was not being interpreted in the same way.  The
desired HTML output was correct!  The initial &lt;code&gt;&amp;amp;&lt;/code&gt; from the sequence was being replaced
with the sequence &lt;code&gt;&amp;amp;amp;&lt;/code&gt; to ensure it was displayed properly, removing any chance of
it being interpreted as a named character entity.&lt;/p&gt;
&lt;p&gt;Making a quick decision, I looked at the &lt;code&gt;InlineHelper&lt;/code&gt; class and noticed the
&lt;code&gt;append_text&lt;/code&gt; function used to ensure that such strings were properly interpreted.
Taking a quick look at the imports for &lt;code&gt;InlineHelper&lt;/code&gt; and &lt;code&gt;LinkHelper&lt;/code&gt;, I thought there
was a chance of a circular reference occurring.  Given that observation, I decided to
make a copy of the &lt;code&gt;append_text&lt;/code&gt; function in the &lt;code&gt;LinkHelper&lt;/code&gt; class to get around the
possibility of the circular reference.&lt;/p&gt;
&lt;p&gt;Finally, after a couple of hours of work, all 40 tests were passing.  It was a bit of
a trek to get there, but it was worth it!&lt;/p&gt;
&lt;h2 id="whoops"&gt;Whoops&lt;a class="headerlink" href="#whoops" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I was starting to write the article, I also started to look into what it would take
to remove the duplicate of the &lt;code&gt;append_text&lt;/code&gt; function in the &lt;code&gt;LinkHelper&lt;/code&gt; class.  I had
introduced the clone into the &lt;code&gt;LinkHelper&lt;/code&gt; class to avoid any issues with referencing
the &lt;code&gt;InlineHelper&lt;/code&gt; class from the &lt;code&gt;LinkHelper&lt;/code&gt; class.  It was as I was starting my
research into this task that I discovered something that I had previously missed.  The
&lt;code&gt;LinkHelper&lt;/code&gt; class was already referencing the &lt;code&gt;InlineHelper&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;After a bit of “how did I miss that?”, I replaced the call to &lt;code&gt;LinkHelper.append_text&lt;/code&gt; with
&lt;code&gt;InlineHelper.append_text&lt;/code&gt; and everything worked fine.  Removing the instance of the
&lt;code&gt;append_text&lt;/code&gt; function from the &lt;code&gt;LinkHelper&lt;/code&gt; class, I ran the complete suite of scenario
tests again, and everything worked fine.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking back at the work I did during the week, it was hard not to get jazzed
about the progress.  I started off by doing a simple fix that made the source code
more readable, enhancing my ability to read the source code.  Then I upgraded the
base Python version to 3.8, knowing that it would allow me to write the wrapper I wanted
around Python’s logging functions.  Add to that the coverage and testing I was able to
add and verify for Link elements, Image elements, and Link Reference Definitions, and
it was really good work!  &lt;/p&gt;
&lt;p&gt;At some point I noticed the number of scenario tests that I execute with each change.
At approximately 2000 tests, I am confident that I am hitting a very large degree of
all scenarios for Markdown transformation, not just the “Golden” scenarios, and that
was also a boost to my confidence.  While I can expect things that I note as an issue
to not work, I also need to make sure I appreciate what is working.  Having a solid
set of tests like that is what allows me to refactor with confidence that I am not
negatively impact the code.&lt;/p&gt;
&lt;p&gt;Refactor?  Sigh.  One of the things I know I am looking forward to is looking at
the refactor tasks in the prioritized sections and getting a couple of them underway.
The fact that they are present in those sections is a good reminder to me that I
can always learn how to do things better, and how to make the project more maintainable.
And that is always something I can look forward to!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a solid amount of work done this week, I am hoping to be able to clear out the
uncategorized section of the issues list in the next week.  Will I make it?  Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:courtesy"&gt;
&lt;p&gt;Information courtesy of the &lt;a href="https://www.python.org/downloads/"&gt;Python download page&lt;/a&gt;. &lt;a class="footnote-backref" href="#fnref:courtesy" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:courtesy" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:moreLater"&gt;
&lt;p&gt;I will be covering this in a separate series of articles in the near future. &lt;a class="footnote-backref" href="#fnref:moreLater" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 17</title><link href="https://jackdewinter.github.io/2021/01/18/markdown-linter-delving-into-the-issues-17/" rel="alternate"></link><published>2021-01-18T00:00:00-08:00</published><updated>2021-01-18T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-01-18:/2021/01/18/markdown-linter-delving-into-the-issues-17/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/11/markdown-linter-delving-into-the-issues-16/"&gt;last article&lt;/a&gt;,
I continued working on some big-ticket items from the issues list, making the most
of my New Year Holiday break.  Back in “normal time”, I am tackling Block Quote items,
to try to get to the prioritized part of my issues list within the next …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/11/markdown-linter-delving-into-the-issues-16/"&gt;last article&lt;/a&gt;,
I continued working on some big-ticket items from the issues list, making the most
of my New Year Holiday break.  Back in “normal time”, I am tackling Block Quote items,
to try to get to the prioritized part of my issues list within the next week or two.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I knew that I was not going to solve the same volume of items as last week, I was
confident that I could use this week to make some good
progress in dealing with Block Quote elements and their interaction with other elements.
I also knew that my mental space was going to be limited this week due to the end of
the holidays.  I was not the only one that took the time off from my day job, as most of
the company that I work for took the same two weeks off.  And with everyone coming back to
work at the same time, there were bound to be lots of meetings to make sure everyone was
resynced for the New Year. And that week there… were… lots… of… meetings.&lt;/p&gt;
&lt;p&gt;Factoring that into account, I started my work for that week with a reset of my personal
expectations on what I believe I can accomplish in a week. I felt that it was important to
my sanity to take the time to seriously understand that I did not need to continue taking
care of multiple big-ticket items. Just a handful of normal items would suffice.  I knew
that if I could manage to make the
switch to that mindset, it would be a good week.  So, with that in mind, the work started.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/a6390d02a8dc98e2092e0494f31f5f0a1fd3b5ba"&gt;07 Jan 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/8b0e5abc8ba7996ed35387c44914e3696b068885"&gt;11 Jan 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="starting-with-something-simple"&gt;Starting with Something Simple&lt;a class="headerlink" href="#starting-with-something-simple" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a matter of pride, I try and keep the PyMarkdown code base clean and following
&lt;a href="https://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt; and
&lt;a href="https://pylint.org/"&gt;pylint&lt;/a&gt;
guidelines.  While I mostly correct any raised issues right away, I often choose to
temporarily disable these issues until another time where I can resolve them. My logic
in making that decision is that it usually better for me to concentrate on the big picture
in the moment, addressing any raised issues when I have some less hectic bursts time.
As such, at various points in the code base, there are comments such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pylint: disable=too-many-public-methods&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to disable a warning and:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pylint: enable=too-many-public-methods&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to enable the warning again.&lt;/p&gt;
&lt;p&gt;But as I am only human, I sometimes forget to balance these statements out, disabling a
warning that
is only disabled, not enabling a warning that was disabled, or enabling a warning that was
not disabled.  Writing up a simple Python script, I quickly figured out where these issues
were and corrected them.  While it was not a very important thing to do, it was just nice
to ensure that I had these nailed down.  A good start to the week.&lt;/p&gt;
&lt;h2 id="rounding-out-multiline-inline-elements"&gt;Rounding Out Multiline Inline Elements&lt;a class="headerlink" href="#rounding-out-multiline-inline-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing that I was sure that I had not covered properly were newline characters
contained with
Code Span elements and Raw HTML elements.  While I had corrected a handful of issues from
this area in the past, I did not feel that I had properly covered all the necessary cases,
and I wanted to address that discrepancy.&lt;/p&gt;
&lt;p&gt;Like I normally do, I started with scenario test creation.  This began by taking
a good look at the available scenario tests in the &lt;code&gt;test_markdown_raw_html.py&lt;/code&gt; module and
the
&lt;code&gt;test_markdown_code_spans.py&lt;/code&gt; module.  For the first module, I added variations of test
function &lt;code&gt;test_raw_html_634&lt;/code&gt;, focusing on any container block elements
or leaf block elements that I had not covered elsewhere.  I then repeated this process
for the other module by adding variations on the &lt;code&gt;test_code_spans_346&lt;/code&gt; test function.
This resulted in eleven new scenario tests being added, four for the Raw Html element and
seven for the Code Span element.&lt;/p&gt;
&lt;p&gt;From a top-level point of view, the scenario tests for Raw HTML elements worked fine, and
did not reveal
any additional issues.  The Code Span element tests were another matter.  While I had
previously dealt with newline characters in the main body of the Code Span element, I had
forgotten to perform the same actions on the leading and trailing whitespace for the
element.  Feeling embarrassed that I forgot the whitespace parts of the token, I quickly
made changes to the &lt;code&gt;handle_inline_backtick&lt;/code&gt; function and the &lt;code&gt;__collect_text_from_blocks&lt;/code&gt;
function to ensure that the correct tokens were being generated.&lt;/p&gt;
&lt;p&gt;To balance these changes out, I also changed the &lt;code&gt;__verify_next_inline_code_span&lt;/code&gt; function
in the consistency checks to pay attention to the leading and trailing whitespace.  Like
the changes detailed in the last paragraph, these changes were not difficult once I knew
what the problem was.  But looking at the code while I was making these changes, I realized
that I should not feel embarrassed.  While I was being thorough with my testing, the issues
that I was finding were more corner cases than anything else.  Put bluntly, unless I was
testing corner cases, I was sure that I would not create a Raw Html element like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;""&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or a Code Span element like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;some&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;
&lt;span class="n"&gt;really&lt;/span&gt; &lt;span class="n"&gt;nasty&lt;/span&gt;
&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unless some specific formatting called for it in a really weird circumstance, I believe I
would always write them on one line, not multiple lines.&lt;/p&gt;
&lt;p&gt;But it was good to get the corner cases.  In my head, I know that if I am focusing on the
corner cases, I feel confident about the normal cases.  That is a good place for me to be!&lt;/p&gt;
&lt;h2 id="adding-glob-support"&gt;Adding Glob Support&lt;a class="headerlink" href="#adding-glob-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While not a part of the issues list, one of the things that I had been experimenting on
in some “down time” was adding
&lt;a href="https://docs.python.org/3/library/glob.html"&gt;Glob support&lt;/a&gt;
to the project.  This work came about as the quick script that I threw together for
validating
&lt;a href="https://jackdewinter.github.io/2021/01/18/markdown-linter-delving-into-the-issues-17/#starting-with-something-simple"&gt;PyLint disables and enables&lt;/a&gt;
needed to be able to specify a targetted set of files with Python &lt;code&gt;glob&lt;/code&gt; support. Using
the same type of mainline base as the PyMarkdown project,
I figured the PyLint scanner script was a low-cost, low-risk place to see how much
effort it would take to implement it in the PyMarkdown project.&lt;/p&gt;
&lt;p&gt;It turned out to be very easy.  The &lt;code&gt;__determine_files_to_scan&lt;/code&gt; function was the main
point of contact for determining the files to process.  It took exact file paths,
to either a directory or a file, and returned set containing all valid paths.  In the
case of a file path, it simply added the full path to that file to the collection to be
returned.  In the case of a directory, the directory was scanned, and all matching files
were added to that same collection.  Nice, self-contained, and simple.&lt;/p&gt;
&lt;p&gt;Being self-contained, it was easy to modify this function to add glob support.  To handle
those simple cases, I moved that functionality out of the main function and into a new
helper function &lt;code&gt;__process_next_path&lt;/code&gt;.  With that extracted, I rewrote the
&lt;code&gt;__determine_files_to_scan&lt;/code&gt; function as follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_path&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;"?"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;globbed_paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;globbed_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"Provided glob path '"&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;next_path&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"' did not match any files."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;did_error_scanning_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_globbed_path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;globbed_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;next_globbed_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_globbed_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__process_next_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_globbed_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__process_next_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files_to_parse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;did_error_scanning_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the call &lt;code&gt;glob.glob&lt;/code&gt; already returns an array of matching elements, I was already
most of the way to having this implemented. All I needed to do was to properly add the
elements returned from the &lt;code&gt;glob&lt;/code&gt; call to the collection.  So, instead of rewriting the
code to add matching elements to the &lt;code&gt;files_to_parse&lt;/code&gt; variable, I just called the already
debugged &lt;code&gt;__process_next_path&lt;/code&gt; function to do all the heavy lifting.&lt;/p&gt;
&lt;p&gt;Once that was done, manual testing of the new functionality went fine.  Some new scenario
tests needed to be added, and a couple of existing scenario tests needed to be changed
slightly, but nothing unexpected.  After an hour or so, the work was done and tested.
While not terribly exciting, I could now do some manual testing of the PyMarkdown project
against a set of files that was not a single file, nor every eligible file in that
directory.  And it just felt good to get a small task like that out of the way!&lt;/p&gt;
&lt;h2 id="filling-out-existing-tests"&gt;Filling Out Existing Tests&lt;a class="headerlink" href="#filling-out-existing-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Narrowing down the items to work on from the issues list, the one that I settled on was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_block_quotes_extra_02a&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="n"&gt;levels&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To start the work on this item, I added three variations of the
&lt;code&gt;test_block_quotes_extra_02&lt;/code&gt; test function, altering the number of lists in the document
and their locations.  Noticing that I could do the same type
of variations for Block Quote elements, I also added ten new scenario test functions
that were variation on the &lt;code&gt;test_block_quotes_extra_04&lt;/code&gt; function, mixing Block Quote
elements with the various types of non-inline elements.&lt;/p&gt;
&lt;p&gt;Executing the bulk of the new tests, I was pleasantly surprised that everything except for
the consistency checks were passing without any changes being needed.  Even the changes
needed for the consistency checks were relatively minor and in two main groups.&lt;/p&gt;
&lt;p&gt;The first group of changes were in the inline handling part of the
&lt;code&gt;verify_line_and_column_numbers&lt;/code&gt; function.  These changes were not material in nature
but served to ensure that the &lt;code&gt;leading_text_index&lt;/code&gt; field from the Block Quote token
was properly updated.  This required the inspection of each inline token to determine if
any newline characters are encountered.  If any are encountered, the &lt;code&gt;leading_text_index&lt;/code&gt;
field is incremented by the number of newline characters, ensuring that any references
to that field reference the correct line prefix.&lt;/p&gt;
&lt;p&gt;Seemingly balancing that change, there were a handful of end Leaf tokens that also needed
adjusting to properly support the
&lt;code&gt;leading_text_index&lt;/code&gt; field.  Through trial and error, I quickly
isolated each type of token, and was able to properly increment the
&lt;code&gt;leading_text_index&lt;/code&gt; field to handle the end token.  It was not a big task, but it was one
that I needed to be very methodical on.  I did find that I needed to do adjust each at
least once as each test was providing coverage for a specific scenario that had been
missed.  While it was not that much extra work for each individual test, the amount of work
required over all the tests added up quickly.&lt;/p&gt;
&lt;h2 id="properly-handling-link-reference-definitions"&gt;Properly Handling Link Reference Definitions&lt;a class="headerlink" href="#properly-handling-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the case of test function &lt;code&gt;test_block_quotes_extra_04f&lt;/code&gt;, the issue was that it
was just broken.  No niceties or anything else, just broken.  Added during the
last section’s work and disabled, the Markdown was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; [
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;abc&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ]&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;uri&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What made this test function broken was not the Markdown itself, but the generated tokens
for it.  For whatever reason, the parsing of the Block Quote was both started and ended
on the first line, only to be restarted on the second line.  Because of the container
nature of the Block Quote element, this then spread the text required for the Inline Link
element split over two distinct Block Quotes.  It was just wrong!&lt;/p&gt;
&lt;h3 id="setting-the-stage"&gt;Setting the Stage&lt;a class="headerlink" href="#setting-the-stage" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The debugging took a couple of hours to work through, but it was rewarding when I solved
it.  The problem with the parsing boiled down to my favorite element (heavy sarcasm
is implied), the Link Reference Definition element.  Because of the unique nature of this
element and how it is parsed, I had to add the ability to rewind or requeue the parser so
that failed lines from a Link Reference Definition could be properly processed.  And while
it had worked properly until this point, test function &lt;code&gt;test_block_quotes_extra_04f&lt;/code&gt;
provided an interesting twist to normal operation, and therefore, an interesting problem.  &lt;/p&gt;
&lt;p&gt;Because of design decisions for Markdown, the Link element and the Link Reference
Definition element both start with the same sequence: &lt;code&gt;[link]&lt;/code&gt;.  If this sequence is
followed by an
open square bracket character &lt;code&gt;[&lt;/code&gt;, then it probably specifies a collapsed or full link.
If this sequence is followed by an open parenthesis character &lt;code&gt;(&lt;/code&gt;, then it probably
specifies an inline link.  If this sequence is followed by a colon character &lt;code&gt;:&lt;/code&gt;, then it
probably specifies a Link Reference Definition.  And finally, if not followed by any of
the above, it is probably a shortcut link.&lt;/p&gt;
&lt;p&gt;Most of those combinations do not matter, except for my friend (once again, heavy sarcasm
implied), the Link Reference Definition.  While the Link element and its types are all
processed in the inline phase of processing, the Link Reference Definition is processed
much earlier in the block phase of processing.  Due to that difference, the Link element
processing is done with the entire contents of the processed Text token being available,
but the Link Reference Definition processing is done one line at a time.&lt;/p&gt;
&lt;h3 id="working-through-the-process"&gt;Working Through the Process&lt;a class="headerlink" href="#working-through-the-process" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Why was that information relevant?  In the case of the above Markdown, the specified text
supports both
a Link element and a Link Reference Definition element until line 3.  Before that point,
the Link Reference Definition processing continues forward.  When that point is reached on
line 3, the line is processed for
suitability as a Link Reference Definition, it fails, and the requeue mechanism needs to
be enacted so that the lines can be interpreted properly.  Unlike any previous scenario
tests, in this case, that requeue mechanism was not sufficient.&lt;/p&gt;
&lt;p&gt;What was being requeued was only the information after processing.  When the requeue
mechanism kicked in, it was trying to return to the state that was in place when
the Link Reference Definition started.  But when it started processing the requeued
information, it did so with the processed line of information.  That line was missing the
Block Quote prefix, causing the Block Quote to be closed.  It took a while to get there,
but I did figure out why that was happening with the closing of the Block Quote!&lt;/p&gt;
&lt;h3 id="fixing-the-issue"&gt;Fixing the Issue&lt;a class="headerlink" href="#fixing-the-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this case, the line that had been passed to the Link Reference Definition processor
did not have the Block Quote prefix attached to it.  Having been removed at the container
level before being passed on for Leaf Block processing, the lines to requeue were
missing information.  To fix that issue, I had to figure out a way to ensure that I could
retain that information so that it could be requeued if needed.  Therefore, I introduced a
the &lt;code&gt;unmodified_line_to_parse&lt;/code&gt; variable that contains the line as read, unmodified by
any processing.&lt;/p&gt;
&lt;p&gt;This got me a lot of mileage in fixing this issue, but after rerunning some of the tests,
a couple of the tests were failing because there was another issue somewhere.  Debugging
that issue over the course of
an hour, I found that there was another requeue issue that I needed to address: the
main document and the main token stack.  In a couple of the new scenarios, when the
processing of the Link Reference Definition was started, another type of block element was
ended.  The effect of this was that a new Markdown token was placed in the document and a
new stack token was placed on the main token stack.  While the rewinding took care of the
data, it did not take care of that state information.&lt;/p&gt;
&lt;p&gt;Dealing with that issue was somewhat simple but took a while to get right.  Before
starting the processing of the Link Reference Definition, I keep track of the lengths
of both the main document and the token stack.  If I need to requeue elements, I simply
remove any entries that are past that mark.  It is not very graceful, but it was
successful and worked wonderfully.&lt;/p&gt;
&lt;h2 id="squeezing-one-more-task-in"&gt;Squeezing One More Task In&lt;a class="headerlink" href="#squeezing-one-more-task-in" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If things are going normally, I organize and write my articles on Sunday, with the
editing the draft article going into Monday evening.  During that time, I do take a
fair number of breaks to ensure that I am writing and editting with a clear mind.
But just because I start
working on the article, it does not mean that I stop thinking about whatever it is I was
working on.  Usually, it is a battle between getting the writing done and my urge to
complete what I started.  Most of the time, the article wins. In this case, it did not.&lt;/p&gt;
&lt;p&gt;On Saturday morning, I had started working on figuring out
how to get test function &lt;code&gt;test_block_quotes_extra_03b&lt;/code&gt; working.  And while I had made some
progress on it, I was still working on it.  For whatever reason, when placed within a
Block Quote element, Link Reference Definitions were not being recognized properly. I had
started working on this right after fixing test function &lt;code&gt;test_block_quotes_extra_04f&lt;/code&gt;
and  I had spent a decent amount of time trying to get it working. But with a busy weekend
in my personal life, I was not able to get a good, solid, contiguous couple of hours to
work on this
issue as I had hoped to do.  As such, I had started to try to figure out this issue about
five times and gave up after each short try.  It gnawed at me that I could not figure it
out.  It had not taken me long to resolve the previous set of issues, why was it
taking me so long with this one?&lt;/p&gt;
&lt;h3 id="regrouping"&gt;Regrouping&lt;a class="headerlink" href="#regrouping" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After completing the bulk of the rough draft of the article, I took some time to relax
and clear my head, knowing that I needed to look at the problem again.&lt;/p&gt;
&lt;p&gt;This time, I had a lot better results with my debugging.  Starting with the basics,
I turned on debug logging for the test and followed along in the source code as I read each
line of the debug output.  It was then that I noticed the issue: the Block Quote token
itself was wrong.  As I looked through the logs, everything was fine up until the requeue
from the Link Reference Definition happened.  From there, everything was just off.&lt;/p&gt;
&lt;p&gt;Taking some time to think about it, I decided to take our dog Bruce for a walk.  During
that walk, I tried hard not to think about the issue, and mostly succeeded.  When I came
back, I was able to examine the log files again, knowing that the Block Quote token was
off, and that I had to find the cause.  Within five minutes, I had the answer.  It was
once again a state issue.  Before the requeue happened, as each line was being processed
within a Block Quote, new information was added to the Block Quote token.  This information
was about the leading text that was removed from each line in the container processor,
ensuring that the leaf processor only had to deal with leaf block related issues.  To
ensure that the Markdown could be properly rehydrated, this information was stored in the
Block Quote token itself.  But when the requeue happened, nothing was done to erase the
information added to the token between the start of the Link Reference Definition parsing
and the start of the requeue.  Or at least that is what I thought had happened.&lt;/p&gt;
&lt;p&gt;Doing some quick testing, I quickly proved my theory to be correct.  As I followed
along in the logs for the test function, I saw the amount of leading text in the Block
Quote token increase, but never decrease.  To further prove that I was on the right track,
I compared the number of lines that were requeued to the number of extra lines of leading
text present in the token, and it was a match!&lt;/p&gt;
&lt;h3 id="fixing-the-issue_1"&gt;Fixing The Issue&lt;a class="headerlink" href="#fixing-the-issue_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a solid lead on what the cause was, the most concrete manner of proving that I had
the right cause to fix it.  After mulling around various ideas in my head, the one that
won out was to simply store a copy of the Block Quote token in the Link Reference
Definition token at the start of processing.  With the other requeue logic in place,
once I had done all the other requeuing, I simply replaced the changed Block Quote token
with the copy of the original token.  Running through the tests, this worked right away!&lt;/p&gt;
&lt;p&gt;After having taken such a long way to get there, I now had it fixed.  But since I had
ended up solving the issue somewhat late on Sunday evening, I decided to put the changed
code
aside and to continue edit that week’s article.  It was enough to knowing that I had
solved it and that it just needed cleaning up before committing.  It was then after I
had completed my final edit of the article on Monday night that I noticed that I had
finished early on Monday night with a lot of time to spare.  With that extra time in hand,
I was able to take the roughly finished solution and polish it up enough to commit it.
While technically it should be a part of next week’s article, it just felt right to
include it with this article, as that is where most of the work occurred.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a busy week of getting rid of some big-ticket issues, it was very nice to
reduce my scope and focus on the smaller items.  Not that I mind working on the big
items, it is just that they require me to maintain a larger scope of focus, thereby
tiring me out a bit more.  The smaller items are not always as satisfying to resolve,
but they are also not as draining.&lt;/p&gt;
&lt;p&gt;During the article, I mentioned that I was becoming more aware that I was dealing more
with corner cases than anything else, and that was a good feeling.  I am very confident
that any of the main scenarios driving the parser have already been addressed. With those
out of the way, it stands to reason that any issues that I am finding are the weird cases
that do not occur that often.  It just makes sense to me.&lt;/p&gt;
&lt;p&gt;It also means that I am getting more confident that I am nearing the end of this testing
phase of the PyMarkdown project.  My main drive for the project was to complete the project
on my own terms, with the level of quality and testing that I expect from other projects.
While I could have started releasing this project a while ago, I wanted to make sure that
I have reached that level before I ship the project, and work on improving it from there.
And with the knowledge that I am cleaning up corner cases, I know that I now closer to
that point with the PyMarkdown project than I have ever been before!&lt;/p&gt;
&lt;p&gt;And it is a good feeling!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I do not want to sound like a broken record, but it is back to the same process of
finding the next item to work on, and getting it resolved.  The only difference was
that I was getting close to eliminating all the “open range” items in favor of the
prioritized issues.  Progress!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 16</title><link href="https://jackdewinter.github.io/2021/01/11/markdown-linter-delving-into-the-issues-16/" rel="alternate"></link><published>2021-01-11T00:00:00-08:00</published><updated>2021-01-11T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-01-11:/2021/01/11/markdown-linter-delving-into-the-issues-16/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/04/markdown-linter-delving-into-the-issues-15/"&gt;last article&lt;/a&gt;,
I continued working on Block Quote issues and some general clean up that I have wanted to
do for a couple of months now.  With one week left in my holiday, I wanted to make sure
I tackled as many of the big-ticket items that …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/01/04/markdown-linter-delving-into-the-issues-15/"&gt;last article&lt;/a&gt;,
I continued working on Block Quote issues and some general clean up that I have wanted to
do for a couple of months now.  With one week left in my holiday, I wanted to make sure
I tackled as many of the big-ticket items that I can while I have the time.  If I am
going to be doing some work during my holiday, I want to make it count!&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a couple of weeks off for the holidays and relatively light “honey-do”&lt;sup id="fnref:honey"&gt;&lt;a class="footnote-ref" href="#fn:honey"&gt;1&lt;/a&gt;&lt;/sup&gt;
schedule,
I had some free time to devote to getting the project closer to the goal line.  While
I did not want to lose focus on getting the smaller items completed, I had a number
of big-ticket items that I wanted to do.  Because of their size or scope, I wanted to
ensure that I had a dedicated amount of contiguous time to work on each item.  Except
for the occasional weekend, I figured that this would be the best time to work on them
and hopefully get all of them completed in one big push. With a good week left of
New Year’s holiday left to go, it seemed like a good idea to try and get as much done
as i could in the short amount of time I had.  At least, that was my plan.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9582d7f984dad91539877a073ef251f272f592e5"&gt;28 Dec 2020&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/a0281da5414ec2c45fb32c3d687027ba21f1ccb6"&gt;03 Jan 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="enhancing-code-quality"&gt;Enhancing Code Quality&lt;a class="headerlink" href="#enhancing-code-quality" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Continuing with the large item cleanup that I had started in the previous week; I was
eager to get some refactoring done on the Markdown token classes.  The first step towards
refactoring those classes was to make each token as read-only as possible, to avoid the
possibility of changing the tokens.  To accomplish this task, I just went through each
token in
order, adding the &lt;code&gt;__&lt;/code&gt; prefix to most of the field names, thereby making them private.
With each of those fields now private, I added a new getter property for each field
named after the original field name.  As the property name for the new getter function
matched the old name of the field, any read-only access was able to continue without any
issues.&lt;/p&gt;
&lt;p&gt;As with any such change, there are always exceptions that need to be dealt with
individually.  One such case was the &lt;code&gt;active&lt;/code&gt; field of the &lt;code&gt;SpecialTextMarkdownToken&lt;/code&gt;
class. The first exception was that instead of retaining the name &lt;code&gt;active&lt;/code&gt;, I felt that
the name &lt;code&gt;is_active&lt;/code&gt; was more descriptive.  The second exception was that this token
type is used to look for starts and ends of various inline token sequences.  As such,
when those sequences are found, the previous instances of those tokens are marked as
inactive, meaning they will not be used any more.  To take care of this, I introduced
to that token a new function &lt;code&gt;deactivate&lt;/code&gt;, specifically used to deactivate the token
without exposing the token’s member variable in its private form.&lt;/p&gt;
&lt;p&gt;Once this refactoring was completed, I realized that the &lt;code&gt;markdown_token.py&lt;/code&gt; module
was way too large for my liking and needed to be broken down.  Keeping the base
&lt;code&gt;MarkdownToken&lt;/code&gt; and &lt;code&gt;EndMarkdownToken&lt;/code&gt; classes in their original file, I started to
move every Markdown token to one of three new modules: one for container block tokens,
one for leaf block tokens, and one for inline tokens.  Once the tokens were in their
new modules and all tests passed, I added a new base token class for each of the three
new modules and switched the base class for each token to the new base token in the
same module.  By switching over each token to use these three new base classes, I was
able to further reduce the amount of code in each token.  While it was not too much of
a reduction, it was a reduction I felt good about.&lt;/p&gt;
&lt;h2 id="enhancing-some-more"&gt;Enhancing Some More&lt;a class="headerlink" href="#enhancing-some-more" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started working on this group of tasks, the first thing that came to mind was
the words to an old campfire song I learned long ago in Boy Scouts of Canada.  While
it is a silly song named
&lt;a href="https://makingmusicfun.net/htm/f_mmf_music_library_songbook/nelly_in_the_barn_lyrics.php"&gt;Nelly In The Barn&lt;/a&gt;,
the bit between the verses goes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Second verse, same as the first, a little bit louder and a little bit worse!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I could think of no phrase better to describe what I needed to do with the &lt;code&gt;StackToken&lt;/code&gt;
class.  Having had good success with changing all the &lt;code&gt;MarkdownToken&lt;/code&gt; classes to use
private fields and &lt;code&gt;is_x&lt;/code&gt; methods (as detailed in my last article), I felt that the
&lt;code&gt;StackToken&lt;/code&gt; class needed the same treatment.&lt;/p&gt;
&lt;p&gt;Unlike the almost 20 classes for &lt;code&gt;MarkdownToken&lt;/code&gt; descended classes, the transformation
on the 9 classes descended from &lt;code&gt;StackToken&lt;/code&gt; went by quickly.  Like the changes made to the
&lt;code&gt;MarkdownToken&lt;/code&gt;
classes, I was emboldened to make these changes due to the confidence of having a large
group of scenario tests that I can use to look for any issues.  Without that large
group of tests, I would be worried that I would fix one thing, only to break something
else in a related piece of code that I forgot about.&lt;/p&gt;
&lt;h2 id="closing-the-test-loop"&gt;Closing the Test Loop&lt;a class="headerlink" href="#closing-the-test-loop" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I noted in the section of the last article entitled
&lt;a href="{filename}/articles/SoftwareQuality/#making-the-test-invocation-more-efficient#making-the-test-invocation-more-efficient"&gt;Making the Test Invocation More Efficient&lt;/a&gt;,
I implemented a change to how I invoked the test infrastructure to reduce the needed code
from eight lines (1 blank line, 2 comment lines, and 5 code lines) to two lines (1 comment
line and 1 code line).  Having done some further examination of those changes, I felt that
those changes had settled in nicely and it was time to propagate those changes to all
similar test functions.&lt;/p&gt;
&lt;p&gt;I had a good model for the changes, but even so, the work was very monotonous.  With just
short of 2000 scenario tests that required changing, it was a test of wills: me versus
the code base.  To keep myself motivated, I kept a search window open on the side of my
editor, selecting a new group of tests to modify whenever I found myself getting bored.
Even after taking extra breaks to do household chores, I still found that it was a tough
task.  But I knew it was a good task to do, so even though I could feel the lobes of my
brain numbing with each keystroke, I pressed forward with making the changes.&lt;/p&gt;
&lt;h2 id="keeping-things-simple"&gt;Keeping Things Simple&lt;a class="headerlink" href="#keeping-things-simple" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having ensured that all end Markdown tokens had their &lt;code&gt;start_markdown_token&lt;/code&gt; field set, I
looked at the code to figure out if there were any redundancies that were introduced with
that change.  As
that field points to the start Markdown token, there was a good chance that I had stored
duplicate data in the &lt;code&gt;EndMarkdownToken&lt;/code&gt; to avoid having to calculate the start Markdown
token for some of the tokens.  It was just a matter of identifying any such tokens.&lt;/p&gt;
&lt;p&gt;While I was sincerely expecting more of an impact, the only change that I was able to
perform was around the end Markdown token generated for the &lt;code&gt;EmphasisMarkdownToken&lt;/code&gt;
token.  To get around the constraints at the time that it was written, I had added
duplicated data to that end token
to denote the length of the emphasis and the emphasis character.  With that actual start
token now available for reference, I was able to replace the duplicate data stored in the
&lt;code&gt;EndMarkdownToken&lt;/code&gt; with a reference to the &lt;code&gt;EmphasisMarkdownToken&lt;/code&gt; instance.&lt;/p&gt;
&lt;p&gt;No longer needing that duplicate data, I removed it from the &lt;code&gt;__process_emphasis_pair&lt;/code&gt;
function. The fallout of that change was approximately 200 instances where I needed to
replace the now useless data with the string &lt;code&gt;:&lt;/code&gt;.  To make things easier while editing,
I simply kept the text &lt;code&gt;:::&lt;/code&gt; in the clipboard, searched for &lt;code&gt;[end-emphasis(&lt;/code&gt;, and replaced
the first three characters after the &lt;code&gt;)&lt;/code&gt; character.  It was mind numbing work that I did
in three or four shifts, but I got it done.  Running the tests, everything was working
except for a couple of tests.  Investigating each of those failed tests, the failures
were all simple typing errors, quickly fixed to make the tests pass.&lt;/p&gt;
&lt;h2 id="reorganizing-the-series-m-file"&gt;Reorganizing the Series M File&lt;a class="headerlink" href="#reorganizing-the-series-m-file" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This task was a pure cut-and-paste task, but one that I really needed to do. At over
10 thousand lines of code, the &lt;code&gt;test_markdown_paragraph_series_m.py&lt;/code&gt; module was just
way too big!  I was initially okay with the size of the module, seeing that all the
scenario tests in the file were related to each other.  But as I started to add more
and more tests to that one large file, it was becoming too difficult to work on
in that form.  As such, I simply create one file for each group of tests, such
as &lt;code&gt;test_markdown_paragraph_series_m_fb.py&lt;/code&gt; for the Fenced Code Block tests, and moved
the test functions into their new home.&lt;/p&gt;
&lt;h2 id="collapsing-ordered-and-unordered-list-processing"&gt;Collapsing Ordered and Unordered List Processing&lt;a class="headerlink" href="#collapsing-ordered-and-unordered-list-processing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At the start of the project, while I was working through the initial parts of the parser,
I was not sure that the processing of Ordered List Blocks and Unordered List Blocks would
overlap.  With almost a year of processing accomplished, I now had a very solid observation
on that subject.  Most of the processing overlapped, and overlapped cleanly.  Now it was
just a manner of taking the time to surgically merge two List Block token concepts into one
in different places in the source code.&lt;/p&gt;
&lt;h3 id="the-first-step"&gt;The First Step&lt;a class="headerlink" href="#the-first-step" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A big first step on this journey was to move the code for calculating the looseness of
a HTML rendered list from the &lt;code&gt;TransformToGfm&lt;/code&gt; class into the new
&lt;code&gt;TransformToGfmListLooseness&lt;/code&gt; class.  While it was just a simple cut-and-paste move,
I feel that the move left the &lt;code&gt;TransformToGfm&lt;/code&gt; class better able to focus on the HTML
transformation, instead of also having the responsibility of figuring out the list
looseness.  It just felt cleaner to have that responsibility in its own class and module.&lt;/p&gt;
&lt;p&gt;Along with that change, I made equal changes to how the List Block starts were processed
in the HTML transformer and the Markdown Transformer.  In the HTML transformer, the
&lt;code&gt;__handle_start_unordered_list_token&lt;/code&gt; function was renamed to &lt;code&gt;__handle_start_list_token&lt;/code&gt;
and the &lt;code&gt;__handle_start_ordered_list_token&lt;/code&gt; function code was merged into that function.
In the Markdown transformer, the same process was repeated with the
&lt;code&gt;__rehydrate_unordered_list_start&lt;/code&gt; function was renamed to &lt;code&gt;__rehydrate_list_start&lt;/code&gt;
and the &lt;code&gt;__rehydrate_unordered_list_start_end&lt;/code&gt; function code was merged into that function.&lt;/p&gt;
&lt;p&gt;That merge allowed for the handler calls in each module to deal more simply with the List
Blocks, something that was worth it to me.&lt;/p&gt;
&lt;h3 id="equalizing-the-two-list-blocks"&gt;Equalizing the Two List Blocks&lt;a class="headerlink" href="#equalizing-the-two-list-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having done a lot of testing with the Unordered List Blocks, I felt it was time to give
some extra focus to the Ordered List Blocks.  Before the holiday break
started, I had noticed a handful of cases where the Ordered List Blocks had errors in
them that I thought should have been caught by existing tests.  While fixing this issue
was not the primary goal of this round of refactoring, I considered it a simple  secondary
goal that I should only have to fix list issues once, not twice.&lt;/p&gt;
&lt;p&gt;Looking at the second half of the &lt;code&gt;is_ulist_start&lt;/code&gt; function, I noticed that there
were significant differences from its sibling &lt;code&gt;is_olist_start&lt;/code&gt; function.  Slowly, I started
making changes to the &lt;code&gt;is_ulist_start&lt;/code&gt; function, bringing it more in line with it sibling.
But after making those changes, I still had the task of making sure that those changes
were working properly.  As any failures were not already caught, but discovered through
other tests, I figured that I needed to stop up my test game.&lt;/p&gt;
&lt;p&gt;To start this off, I picked six scenarios from each of Series M tests and made copies of
those tests.  Instead of using the Order List Blocks in those tests, I replaced the Ordered
List Blocks with Unordered List Blocks.  It was only after adding those 108 scenario tests
that I was confident that those changes had a good start at getting coverage.  And it paid
off too.  The only issues that were found were in the
&lt;code&gt;__perform_container_post_processing_lists&lt;/code&gt; function, where the data to be merged with
the surrounding list had to be massaged before a call to &lt;code&gt;__merge_with_container_data&lt;/code&gt; and
restored after that call was completed.&lt;/p&gt;
&lt;h3 id="refining-list-start-functions"&gt;Refining List Start Functions&lt;a class="headerlink" href="#refining-list-start-functions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The final set of functionality to merge was the &lt;code&gt;is_ulist_start&lt;/code&gt; function and the
&lt;code&gt;is_olist_start&lt;/code&gt; function.  Both of these functions had been on my “refactor” list for a
while, so I was glad to get started on them.  On closer examination, there were only a
few statements or values that changed between the two functions.  Once
the setup was accomplished in the first half of the function, the second half was near
identical.  Creating a new &lt;code&gt;__xxx&lt;/code&gt; function, I cut the second half of one of those two
functions and pasted it in that new function.  After checking to make sure nothing was lost
in the cut-and-paste, I compared it line-by-line with the similar code in the other
function, adjusting both functions to be represented by the new function.&lt;/p&gt;
&lt;p&gt;After a couple of rewind moments, the new &lt;code&gt;__xxx&lt;/code&gt; function incorporated the process from
both original functions.  With that accomplished and staged, I removed the second function
and used the new function in its place.  After fixing a couple of small issues, the new
function was up and running and working for both Ordered List Blocks and Unordered List
Blocks.&lt;/p&gt;
&lt;p&gt;At that time, I remember looking at the code and thinking that I had only completed half
of the job.  Repeating the same process that got me to that point, I soon renamed the
&lt;code&gt;__xxx&lt;/code&gt; function to &lt;code&gt;__is_start_phase_two&lt;/code&gt;, and further extracted code into a new
&lt;code&gt;__is_start_phase_one&lt;/code&gt; function.  With that done, the &lt;code&gt;is_olist_start&lt;/code&gt; function was
already slim, and I extracted the remaining logic into the &lt;code&gt;__is_start_olist&lt;/code&gt; function
to keep it slim, replicating that processing with the &lt;code&gt;is_ulist_start&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;In the end, I was very satisfied with the amount of refactoring that I was able to
accomplish.  Both methods were now six statements long, with 95% of the differing
functionality in the &lt;code&gt;__is_start_olist&lt;/code&gt; function and the &lt;code&gt;__is_start_ulist&lt;/code&gt; function.
While it was a good feeling getting the refactoring done, it was an even better feeling
knowing that I had a healthy set of test cases that I could count on when refactoring!&lt;/p&gt;
&lt;h2 id="consolidating-new-block-starts"&gt;Consolidating New Block Starts&lt;a class="headerlink" href="#consolidating-new-block-starts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having poured through the code looking for things to simplify, I was keenly aware of one
set of function calls that I could simplify: detecting new block starts.  Developed in
different parts of the code for similar reasons, both the List Block Processor’s
&lt;code&gt;__check_for_list_closures&lt;/code&gt; function and the Block Quote Processor’s
&lt;code&gt;check_for_lazy_handling&lt;/code&gt; function were performing almost the same set of
instructions.  One by one, the different Leaf Block start functions were being invoked
to determine if a newline indicated the start of a new block.&lt;/p&gt;
&lt;p&gt;It was not a big change but consolidating that code into the
&lt;code&gt;is_paragraph_ending_leaf_block_start&lt;/code&gt; function just made things cleaner.  There was just
one function to call with good documentation on what was going on.  It just made sense
to me.&lt;/p&gt;
&lt;h2 id="verifying-paragraph-usage"&gt;Verifying Paragraph Usage&lt;a class="headerlink" href="#verifying-paragraph-usage" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just before I started writing on that Sunday morning, I decided to add something that was
hopefully going to be a slam dunk.  While I was reasonably sure that all the various
referenced to Paragraph elements and any newlines within them were accounted for, I wanted
to be doubly sure.  So, to be sure of that, I added the following code to the end of
the &lt;code&gt;__rehydrate_paragraph_end&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;rehydrate_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rehydrate_index&lt;/span&gt;
        &lt;span class="n"&gt;expected_rehydrate_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;rehydrate_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_rehydrate_index&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"rehydrate_index+1="&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rehydrate_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;";expected_rehydrate_index="&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_rehydrate_index&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, by the end of the Paragraph element’s processing, the &lt;code&gt;rehydrate_index&lt;/code&gt; member
variable should have been incremented once for each newline contained within the paragraph.
If this did not happen, it means that the use of that &lt;code&gt;rehydrate_index&lt;/code&gt; member variable is
potentially off and needs to be fixed.&lt;/p&gt;
&lt;p&gt;Surprisingly, even after adding some extra tests, the only one element had issues: the
Raw HTML element.  In the main parser’s &lt;code&gt;parse_raw_html&lt;/code&gt; function, the raw text to use
for the tag was not properly accounting for the newline, something that was quickly fixed.
This pattern continued in the Markdown generator’s &lt;code&gt;__rehydrate_inline_raw_html&lt;/code&gt; function,
where I specifically created the &lt;code&gt;__handle_extracted_paragraph_whitespace&lt;/code&gt; to handle the
pulling apart and reintegration of that information.  This was a useful function to have
as I found some small issues with the &lt;code&gt;__rehydrate_inline_code_span&lt;/code&gt; function that required
applying that function to the various parts of the Code Span element.  Finally, to round
out the fixes, the &lt;code&gt;__verify_next_inline_raw_html&lt;/code&gt; function needed to have a similar
approach taken to address the last issues with the &lt;code&gt;rehydrate_index&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Given that it could have been a lot more cumbersome to fix, I was happy that I got off with
a relatively light amount of work!&lt;/p&gt;
&lt;h2 id="as-i-was-making-these-changes"&gt;As I Was Making These Changes…&lt;a class="headerlink" href="#as-i-was-making-these-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During the middle of these changes, I rearranged the items in the issues list.  My goal was
to take the priorities that I had in my mind and reinforce them in the list.  The only
exceptions to this reorganization were anything that was an immediate focus of what I was
doing at the moment.  The way I rationalized this was that anything that I could set down
for a while was something that I could figure out when to get to it.  With an item that
remained on the list or was newly added to the list, I deemed that the items were more of
an immediate task to get done, and just needed doing.&lt;/p&gt;
&lt;p&gt;While it may seem like a bit of a wishy-washy rule, it was one that I still felt fine with
after a couple of days of having the prioritization in place.  Granted, it felt like I was
churning through the immediate task section, but that also felt right.  As I am working on
whatever current task that I need to work on, I observe things in the code and have
questions about whether I took the right approach.  Writing those things down in
the issues list allows me to continue with the task without losing too much of the essence
of what I wanted to verify or question.  To me, that just seems like a good approach!&lt;/p&gt;
&lt;h2 id="preparing-for-the-future"&gt;Preparing for The Future&lt;a class="headerlink" href="#preparing-for-the-future" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A major part of this week’s work was to clean things up a bit with bigger tasks that I
do not normally have time for.  As such, I decided to spend about four to five hours during
the week experimenting with &lt;code&gt;SnakeViz&lt;/code&gt; and incorporating primitive SnakeViz support
into the project.  While it is too early to say what needs the most
improvement, I can say that I was able to get some good experience working with the tool
and the output HTML that helps visualize the performance.  I engaged in the
experimentation specifically to gain some experience with code profiling, and I can
honestly say that I think I got the experience that I was looking for!&lt;/p&gt;
&lt;p&gt;The smart thing about using SnakeViz to profile is that it is interactive.  To ensure
that a user can dig down and get relevant information, SnakeViz takes a performance
analysis file and hosts fragments of it through a webserver that it starts.  As the
webserver is starting, SnakeViz also launches it own page in its users own browser.
After that, it is just a matter of clicking around and displaying information on any
number of functions that were executed during the code profile run.&lt;/p&gt;
&lt;p&gt;I do not know if everyone will have the same experience that I did, but I found the
interface simple and easy to use.  When I start focusing on performance, I know I will
spend a decent amount of time looking at the &lt;code&gt;tottime&lt;/code&gt; column which displays the total
amount of time that was spent in each function during the entire code profile run.
I expect I will look at the top few items on that list and try and figure out why they
are taking that much time.  After making some guesses and changes to the code to match,
rerunning the code profile run with the exact same data will be pivotal.&lt;/p&gt;
&lt;p&gt;While it is still at least a month or so off, I am looking forward to using this tool
and making the code perform well!&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In terms of actual issues that I fixed during this week, the count was either low or
zero depending on who was doing the accounting.  But the big win was getting most of
the big-ticket items taken care of.  To be honest, it was a lot of pressure off my
mind getting those big items done.  From my viewpoint, I am not sure that I would have
felt okay with an initial release the project without those items being addressed.  It
was just good housekeeping, and now it was done!&lt;/p&gt;
&lt;p&gt;It just felt good to make the time to get those big-ticket items resolved.  While it
can be argued that there were not that many real changes to the code base, each of those
changes made a significant impact to my confidence about the project.  The refactoring
to provide easy and private access to the tokens?  It increased my confidence that I
have not missed any weird side effects.  The reorganizing and simple cleanup? It increased
my confidence that I had extra “stuff” to maintain across the code base that would make
things more complicated.  Consolidating the List Block code?  It increased my confidence
that I have captured a healthy set of scenarios that properly test both Ordered List Blocks
and Unordered List Blocks.  Each change simply increased my confidence by safely
reducing the amount of required code in the project.&lt;/p&gt;
&lt;p&gt;It also felt good for another reason: it was fun.  Sure, there were boring parts, like
making 2000 changes for the scenario test refactor.  That was definitely not fun.  But
that was kind of fun because it was something for the project that was different.  It
was not the same old test-fix-run and repeat process that I had been doing for months.  It
was just something different.  And that was just fun to do sometimes.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With most of the big-ticket tasks out of the way, I needed to buckle down and try and
resolve as many of the Block Quote items in the unprioritized section as possible.
While it would not be as fun as the big-ticket items, it knew they were worth doing and
it would get me closer to an initial release.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:honey"&gt;
&lt;p&gt;To be fair, in our household we have one honey-do list for me and one honey-do list for my spouse.  And we both ignore some items until reminded and get some items off the list on our own.  You know, typical list. &lt;a class="footnote-backref" href="#fnref:honey" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 15</title><link href="https://jackdewinter.github.io/2021/01/04/markdown-linter-delving-into-the-issues-15/" rel="alternate"></link><published>2021-01-04T00:00:00-08:00</published><updated>2021-01-04T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-01-04:/2021/01/04/markdown-linter-delving-into-the-issues-15/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/12/28/markdown-linter-delving-into-the-issues-14/"&gt;last article&lt;/a&gt;,
I continued working on Block Quote issues and issues with Block Quotes and their
interactions with List Blocks.  In this article, I document that work that was done
to address those issues and resolve them.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a couple of weeks off for the holidays …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/12/28/markdown-linter-delving-into-the-issues-14/"&gt;last article&lt;/a&gt;,
I continued working on Block Quote issues and issues with Block Quotes and their
interactions with List Blocks.  In this article, I document that work that was done
to address those issues and resolve them.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a couple of weeks off for the holidays and relatively light “honey-do” schedule
around the house, I was hoping to have some good relaxing days along with some good
productive project days.  In my head, I was mentally starting to evaluate each of the
remaining items in the list, assigning them a priority between 1 (highest) and
4 (lowest).  I knew completing the Block Quote issues and Block Quote adjacent issues
has a priority of 1, but I needed to take some time to think about the others.  And
while I was thinking about those others, it was a good time to get some solid work in!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/4c0432c60f6a3984052a585861c017ee2df0036d"&gt;22 Dec 2020&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/b5b42bce4f351febd62ad0303087ee0a9b190296"&gt;27 Dec 2020&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="creating-a-new-scenario-series"&gt;Creating A New Scenario Series&lt;a class="headerlink" href="#creating-a-new-scenario-series" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After doing a block of work with Block Quotes, I thought it was a good time to start
making a new scenario test group for them, Series N.  To start this new series off, I
simply copied and pasted
example scenarios from other series and began to work through the permutations.  Once
I had those roughly filled out, I created the &lt;code&gt;test_markdown_paragraph_series_n.py&lt;/code&gt;
module to hold the scenario tests, and just started working on putting them together.
After I had the first group of tests in Series N filled out, it was almost cut-and-paste
to get the next group of tests ready, with a simple change to the specific Markdown
element I was testing in that group.&lt;/p&gt;
&lt;p&gt;As nothing is ever easy (it seems…), I ran into some failures that I needed to fix.
The first set of failures occurred with unquoted HTML Blocks, in that those HTML
Blocks did not end the Block Quote element.  This was quickly followed up by the same
issue occurring with Atx Heading elements.  As I had already solved this problem for
List Blocks, it was quickly fixed by adding checks in the &lt;code&gt;check_for_lazy_handling&lt;/code&gt;
function for both the Atx Heading element starting (&lt;code&gt;LeafBlockProcessor.is_atx_heading&lt;/code&gt;)
or the HTML Block element starting (&lt;code&gt;HtmlHelper.is_html_block&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;At the same time, to handle two extra list-based scenarios, I added the
&lt;code&gt;test_block_quotes_213aa&lt;/code&gt; function and &lt;code&gt;test_block_quotes_213ab&lt;/code&gt; function as variations
on the &lt;code&gt;test_block_quotes_213a&lt;/code&gt; test function.  I tried for a good hour or so to resolve
the issues with all these functions, but I did not make a lot of progress.  In the
end, I got test function &lt;code&gt;test_block_quotes_213ab&lt;/code&gt; working, but functions
&lt;code&gt;test_block_quotes_213a&lt;/code&gt; and &lt;code&gt;test_block_quotes_213aa&lt;/code&gt; just did not want to seem to
work.&lt;/p&gt;
&lt;p&gt;My main priority at the time was filling out the Series N set of tests, so I left
those two tests disabled while I proceeded to fill out the Series N tests.  Nothing
exciting to report from that task… it was just a lot of moving, documenting,
checking, and rechecking. You know, the normal stuff.&lt;/p&gt;
&lt;h3 id="addressing-those-tests"&gt;Addressing Those Tests&lt;a class="headerlink" href="#addressing-those-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In looking good and hard at those disabled tests, I was able to eventually see that a
good group of those tests were dealing with nested containers.  Specifically, they
were dealing with a Block Quote element inside of a List Block element, or the other
way around. Putting the disabled tests, their Markdown documents, and their
expected tokens under a metaphorical microscope, it was a while before I noticed
something that I had previously missed.  When I followed the examples closely, it
looked like Block Quote elements within
a List Block element were not being properly closed in each example.&lt;/p&gt;
&lt;p&gt;In debugging this issue, I added a handful of extra tests to help me analyze the
situation. The Markdown for one of those tests, the &lt;code&gt;test_block_quotes_extra_02a&lt;/code&gt; test
function, is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;quote&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the list of tokens produced for that Markdown were:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[
    '[block-quote(1,1)::&amp;gt; \n&amp;gt; \n&amp;gt;\n&amp;gt; ]',
    '[para(1,3):]',
    '[text(1,3):start:]',
    '[end-para:::True]',
    '[ulist(2,3):-::4:  ]',
    '[para(2,5):]',
    '[text(2,5):quote:]',
    '[end-para:::True]',
    '[BLANK(3,2):]',
    '[para(4,3):]',
    '[text(4,3):end:]',
    '[end-para:::True]',
    '[end-ulist:::True]',
    '[end-block-quote:::True]'
]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I worked through the example, following the Markdown document and the parser’s
tokens,
I discovered the issue.  The Blank Line element on line 3 ended the first Paragraph
element, and I was good with that.  But more importantly, because that Paragraph element
was closed due to the Blank Line being encountered, the new text on line 4 was not
eligible to be included as paragraph continuation text.  Based on that information, the
new Paragraph element for line 4 needed to be created outside of the List Block element,
as it did not have the indentation to support being included in the list.&lt;/p&gt;
&lt;p&gt;Basically, the end Unordered List Block token was in the wrong place.  To fix it, I would
need to move it above the occurrence of the Blank Line element.&lt;/p&gt;
&lt;h3 id="fixing-it-right"&gt;Fixing It Right!&lt;a class="headerlink" href="#fixing-it-right" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Being an issue with the tokenization of the Markdown Document, I needed to start
with the parser and the &lt;code&gt;BlockQuoteProcessor&lt;/code&gt; class.  From the above information, I knew
that I needed to alter the way in which the &lt;code&gt;parser_state.handle_blank_line_fn&lt;/code&gt; function
was called, as it was not properly closing the right blocks.  After trying a few
other things, I reverted to a very basic approach to solve the issue:  forgo the
complicated calculations and just do the simple calculation where needed.  So, in the
&lt;code&gt;__handle_block_quote_section&lt;/code&gt; function, before the &lt;code&gt;handle_blank_line_fn&lt;/code&gt; function is
called, a quick calculation is done to see if the List Block should possibly be closed.
If so, the actual index number is set in the &lt;code&gt;forced_close_until_index&lt;/code&gt; variable.  Then,
making a small change to the &lt;code&gt;handle_blank_line_fn&lt;/code&gt; function, that variable is passed in
and all tokens on the stack are closed until they get to that point.&lt;/p&gt;
&lt;p&gt;At the time, it felt like I was using a large sledgehammer to fix a small problem, but
it worked.  The tokens were being generated properly, and I was able to move on from
there. While I could them go on to describe all the problems I had with the Markdown
transformer, I will spare any reader the pain.  While the basic handling of Block Quote
elements was working
fine, the proper handling of indents within Block Quote elements needed a good solid
day’s overhaul to get it right.  It was a good thing I was on holiday, because I had
that time to devote to working through all the issues and getting the Markdown
rehydration of Block Quotes and their indents just right.&lt;/p&gt;
&lt;p&gt;Following that, I expected a lot of issues with the consistency checks, but there was
only one major issue.  In the &lt;code&gt;__validate_new_line&lt;/code&gt; function, the &lt;code&gt;leading_text_index&lt;/code&gt;
member variable of the Block Quote token was not being updated properly, resulting in
an off-by-one error.  Unlike the problems with the Markdown transformer, this issue
took less than half an hour to find and fix.  Phew!&lt;/p&gt;
&lt;p&gt;In the end, I was able to enable four of the &lt;code&gt;test_block_quotes_213&lt;/code&gt; test functions
and all five of the new test functions that I had added.  That was a good feeling.&lt;/p&gt;
&lt;h3 id="still-missing-one"&gt;Still Missing One&lt;a class="headerlink" href="#still-missing-one" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After a good night’s worth of sleep, I got back to tackling the disabled functions,
specifically test function &lt;code&gt;test_block_quotes_213aa&lt;/code&gt;.  With a Markdown document of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;boo&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it was immediately obvious that this was somewhat related to the work that I completed
the day before.  It was just figuring out how that stumped me for a while.&lt;/p&gt;
&lt;p&gt;Adding some debug, I started to suspect that the “can I start a container block” logic
in the &lt;code&gt;__get_nested_container_starts&lt;/code&gt; function was not working properly.  Adding more
specific debugging in that function, my guess was confirmed.  Specifically, there were
cases where I felt it was obvious that a new List Block element should start, but the
code was skipping over those chances.&lt;/p&gt;
&lt;p&gt;Stepping through that code, I noticed weird behavior when I got to this part of that
function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;nested_ulist_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ListBlockProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ulist_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;nested_olist_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ListBlockProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_olist_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;nested_block_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BlockQuoteProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the debug output for that code while debugging the &lt;code&gt;test_block_quotes_213aa&lt;/code&gt;
function, it was obvious that on the second line of the document, the code was not
determining that a new block was starting.  It just skipped right over it.&lt;/p&gt;
&lt;p&gt;Thinking through the issue while I was debugging, this started to make sense.  It was
not triggering on any of the above start checks because the wrong information was being
presented to it.  In fact, the data presented to it for line 2 of the above Markdown
was literally two space characters followed by the Unsigned List Block start character
(&lt;code&gt;-&lt;/code&gt;).  While that specific form of data made sense for the
&lt;code&gt;__get_nested_container_starts&lt;/code&gt;
function, trying to invoke any one of the three Container block start functions with
that data would never succeed.  Each of those functions expected the line to at least
be minimally processed, and that line of data clearly had not been.&lt;/p&gt;
&lt;p&gt;Trying the simple approach first, I tested the following change while debugging function
&lt;code&gt;test_block_quotes_213aa&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;after_ws_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;nested_ulist_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ListBlockProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ulist_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;after_ws_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex_whitespace&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and it worked!  Debugging through the test again, that processing allowed the
&lt;code&gt;is_ulist_start&lt;/code&gt; to work with the processed line data, resulting in a non-None
result being returned.  After applying that same change to the other two start Container
block functions, I ran the tests again and everything was good.  The tests were passing
without any additional changes being required of the Markdown transformer or the
consistency checks.  I was stoked!&lt;/p&gt;
&lt;h2 id="making-the-test-invocation-more-efficient"&gt;Making the Test Invocation More Efficient&lt;a class="headerlink" href="#making-the-test-invocation-more-efficient" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I was making the changes to all these scenario tests, one thing was becoming
obvious to me: I was not changing the call pattern.  In the beginning of the project, I
was concerned that I was going to have a wide array of ways to invoke the scenario tests
based on need.  While it was a valid concern at the time, it had not played out that
way.  For each scenario test, I was always adding the following boilerplate code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# Act&lt;/span&gt;
    &lt;span class="n"&gt;actual_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_markdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;actual_gfm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Assert&lt;/span&gt;
    &lt;span class="n"&gt;assert_if_lists_different&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert_if_strings_different&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_gfm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual_gfm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert_token_consistency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_markdown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While those seven lines are not a lot, over the course of approximately 2,000 scenario
tests, those lines added up.  Thinking about it a bit, I realized that I was not going
to change this format because it was consistently worked well for me.  Declared before
this code block
in each test, the variables &lt;code&gt;source_markdown&lt;/code&gt;, &lt;code&gt;expected_tokens&lt;/code&gt; and &lt;code&gt;expected_gfm&lt;/code&gt; held
the relative information for each test.  Once set, I could not think of any reason to
alter from the pattern of calling the three validation functions, one after another.&lt;/p&gt;
&lt;p&gt;At the same time, if I was going to make this change on a large scale, I wanted to start
out with a smaller scope of work and validate it first.  At that point, I created a new
&lt;code&gt;act_and_assert&lt;/code&gt; function to contain those seven lines of code, and changed that code
block from above to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# Act &amp;amp; Assert&lt;/span&gt;
    &lt;span class="n"&gt;act_and_assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_markdown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_gfm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After testing it out on a couple of scenario tests, I applied it to all the scenario
tests in the &lt;code&gt;test_markdown_paragraph_series_n.py&lt;/code&gt; module and the
&lt;code&gt;test_markdown_block_quotes.py&lt;/code&gt; module.  Making sure the scenario tests all worked,
including introducing some false failures that I immediately fixed, I decided to leave
it alone for a while.  My thought process was that I would let it “set” in my mind.
If I was still interested in making the change after a week or so, I could
work on it over the course of a couple of weeks.&lt;/p&gt;
&lt;h2 id="link-reference-definitions-and-containers"&gt;Link Reference Definitions and Containers&lt;a class="headerlink" href="#link-reference-definitions-and-containers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the issues list, the following item gained my attention:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt; &lt;span class="n"&gt;within&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I was not sure it was going to be easy, I at least figured that it would be fun!
At the base level, it was an interesting question.  Block Quote elements and List Block
elements altered the way a line was processed, and Link Reference Definitions could span
lines and not appear to follow the right rules.  To that end, I added three new
scenario tests &lt;code&gt;test_block_quotes_extra_03x&lt;/code&gt; to &lt;code&gt;test_block_quotes_extra_03b&lt;/code&gt; and I
added three new scenario tests &lt;code&gt;test_list_items_extra_01x&lt;/code&gt; to &lt;code&gt;test_list_items_extra_01b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The bad news first.  Try as I may, I was not able to get the new Block Quote tests to
pass within a decent amount of time.  As such, I had to commit them as disabled tests.&lt;/p&gt;
&lt;p&gt;The ContainerBlockProcessor was largely unchanged, with the changes in that class being
made to get rid of code or simplify code, rather than fix issues.  The Markdown transformer
was altered to produce the proper output if there were any leading spaces in the list that
were not being merged in by the Link Reference Definition token.  Those were the easier
two fixes.  The hard changes involved the HTML transformer.&lt;/p&gt;
&lt;h3 id="list-looseness-again"&gt;List Looseness… Again&lt;a class="headerlink" href="#list-looseness-again" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I thought all my issues regarding list looseness were behind me, I was wrong.
Specifically:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A list is loose if any of its constituent list items are separated by blank lines, or if any of its constituent list items directly contain two block-level elements with a blank line between them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Breaking that down, a list is lose if, for any item within the list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it is not the first item and preceded by a blank line&lt;/li&gt;
&lt;li&gt;it is not the last item and followed by a blank line&lt;/li&gt;
&lt;li&gt;any item contains any two block elements that are separated by a blank line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How is this related to Link Reference Definitions?  When the PyMarkdown processors
parse a Link Reference Definition element, it creates a token that represents that
element so it can be analyzed.  However, from an HTML point of view, it does not exist.
As such, the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"title"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is for HTML output purposes equal to the Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, from the HTML transformer point of view, it is a Blank Line element. I had some
code in the &lt;code&gt;__is_token_loose&lt;/code&gt; function to report a Link Reference Definition as a Blank
Line element and in the &lt;code&gt;__calculate_list_looseness&lt;/code&gt; to trigger off a block, but it
was not that simple.  Rereading the above section on looseness, it only really mattered
inside of the list item if that Blank Line element was between two blocks.&lt;/p&gt;
&lt;p&gt;Fixing that specific case took a bit of work in the &lt;code&gt;__calculate_list_looseness&lt;/code&gt; function
to redesign the way I was handling those cases.  In cases where the previous token was
a Blank Line, I had to change the algorithm to look before that element and see if there
was a valid block token there.  It so, the logic from the last point above would come
into play,
and it would discover a valid case to check.  Otherwise, the Blank Line token or the
Link Reference Definition token would be intentionally overlooked, and the search would
continue.&lt;/p&gt;
&lt;h3 id="repeat-with-block-quotes"&gt;Repeat, With Block Quotes&lt;a class="headerlink" href="#repeat-with-block-quotes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It was no surprise that I had to do similar work with Block Quote elements to make sure
that they were also working properly.  To accommodate that, I added five new scenarios
and did a lot of debugging.  In the end, the fix was to add a flag in the
&lt;code&gt;__handle_blank_line&lt;/code&gt; function that triggered when a Link Referenced Definition had
been started.  Rather than avoid the default handling in this case, that handle was
carried out and appended to the already created tokens, resulting the proper output.&lt;/p&gt;
&lt;p&gt;Once that fix was made, getting the consistency checks to agree with it was
easy, with one calculation for the &lt;code&gt;leading_text_index&lt;/code&gt; being off by 1.  After a
simple adjustment to compensate for that case, those tests were now passing.
After only an hour and a half of work to get this working, I understood that I was
lucky that it did not end up taking as long as the last set of issues to fix.  I
was grateful!&lt;/p&gt;
&lt;h2 id="evaluating-how-i-was-spending-my-holiday"&gt;Evaluating How I Was Spending My Holiday&lt;a class="headerlink" href="#evaluating-how-i-was-spending-my-holiday" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I do not think that I am a workaholic, I just like to keep busy.  Whether it is figuring
out how to do something with home automation, working on a puzzle, cleaning up the
garage (again!?), or working on this project, it does not matter.  If it is
something that keeps me from spending hours doing one thing with no recognizable thing
to show for it, I am good.  Spending time with my wife helping her out with shopping
works wonderfully for that.  I get to spend time doing crossword puzzles and other fun
things on my phone while waiting for her to finish at various stores she needs to go
to.  For me, it is all about perspective.&lt;/p&gt;
&lt;p&gt;So, it was part of the way through Christmas Eve Day when I thought about this with
respect to the project.  While it was true that I was resolving items from the issues
list, it just was not feeling like it was the right thing to do at that time.  As I had
the weeks before and after Christmas off, I sat back and decided that I wanted
to do something for the project that would be hard to do at any other time.  I mean,
since I have the time, was I using it to my best advantage?&lt;/p&gt;
&lt;p&gt;Within minutes, I had an answer of “No, I was not using my time wisely!”.  I had a
couple of long-term things I wanted to
do with the code base, but those things would be hard to fit into a normal week’s worth
of work.  It was time to shift gears.&lt;/p&gt;
&lt;h3 id="reducing-the-code-required-to-check-for-a-specific-token"&gt;Reducing the Code Required To Check For A Specific Token&lt;a class="headerlink" href="#reducing-the-code-required-to-check-for-a-specific-token" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While this was done very leisurly over two days, this change was something I had wanted to
do for a while.  As the project’s growth was organic, I had started out check for the
pressence of a given token by looking at its name.  At that time, given the rule module
&lt;code&gt;rule_md_019.py&lt;/code&gt;, if I wanted to see if a given token was a paragraph, I would use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_paragraph&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is nothing intrinsically wrong with that comparison, but it did have things going
against it.  The first was that I had to make sure to import the MarkdownToken class into
any module where I wanted such a comparison.  Next was my observation that I usually had
to go to the &lt;code&gt;markdown_token.py&lt;/code&gt; module and find out exactly how the token’s type name
was spelled, hopefully avoiding any naming errors.  Finally, I found it bulky.  I guess
if I had to add more description to bulky, it was that it took an awful lot of typing to
figure out that the token was a paragraph.  And if it took a lot of typing, it would also
take a lot of reading to do the same thing.  I needed something simpler.&lt;/p&gt;
&lt;p&gt;Working through a couple of possibilities, I decided to use a simple approach and replace
that entire line with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It required no extra imports, the naming was easy to remember, and it was as simple as I
could make it without short forms that would make it to read.  Sure &lt;code&gt;is_para&lt;/code&gt; might be more
compact, but what was I really going to save with that?&lt;/p&gt;
&lt;p&gt;Over the course of approximately ten commits, I transferred all the Markdown Tokens from the
old way of comparing token types to the new way.  I started with Paragraphs and the other
Leaf Block tokens, moving on to Container Block tokens, before finishing up with
Inline tokens.  By the time I was done, there were more lines and functions present in
the base MarkdownToken class, but the entire code base seemed to read better.&lt;/p&gt;
&lt;p&gt;And that was the point of these changes.  No scenario tests were changed as a part of
this code base change, I just wanted it to read better!&lt;/p&gt;
&lt;h3 id="do-i-make-the-code-more-object-oriented"&gt;Do I Make The Code More Object Oriented?&lt;a class="headerlink" href="#do-i-make-the-code-more-object-oriented" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having made those changes, I felt emboldened to make another set of changes that I had
been itching to do for a while: making the code more object oriented.&lt;/p&gt;
&lt;p&gt;While each programming paradigm has its good points and bad points, object-oriented was
something I have had a lot of experience with.  At its core
&lt;a href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;object-oriented programming&lt;/a&gt;
had three pivotal concepts: encapsulation, composition, and polymorphism.  As the
PyMarkdown project generates tokens after parsing the Markdown document, I was most
interested in encapsulation and polymorphism and how they could be applied to tokens.&lt;/p&gt;
&lt;p&gt;From an encapsulation point of view, with a couple of exceptions&lt;sup id="fnref:tokens"&gt;&lt;a class="footnote-ref" href="#fn:tokens"&gt;1&lt;/a&gt;&lt;/sup&gt; there is no
reason to want to change the values of any of those parsed tokens.  In the case of those
exceptional tokens, there is a
multiline concept present in that token that needs to be properly tracked by any
after-parsing process.  Other than providing that tracking information during a specific
after-parsing process, those fields do not have any meaning to a consumer.  Therefore,
it is okay that they are exposed.  However, I did not feel that it was the case with
the other values.&lt;/p&gt;
&lt;p&gt;And from a polymorphism point of view, it makes sense to me that the tokens should be
organized
into groups of tokens that have similar properties: Container Blocks, Leaf Blocks, and
Inlines. As such, it also follows that some properties and methods are present in one or
more of those groups of tokens, but not all those groups.  So having a base class for each
of those groups is something to work towards.&lt;/p&gt;
&lt;p&gt;For both reasons, it just made sense to me to proceed!&lt;/p&gt;
&lt;h3 id="starting-with-endmarkdowntoken"&gt;Starting with EndMarkdownToken&lt;a class="headerlink" href="#starting-with-endmarkdowntoken" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the decision made to move forward with this transition, I started at the base by
making those changes with the &lt;code&gt;EndMarkdownToken&lt;/code&gt; class.  To be honest, as I worked
through the project’s development, I always felt a bit guilty that I had let the use
of this token get out of control.&lt;/p&gt;
&lt;p&gt;From my observations, this class is a “hidden” fourth class of tokens, providing a
close token to any of the tokens that provide for start functionality.  As this
functionality ranges across all three groups of tokens, the &lt;code&gt;EndMarkdownToken&lt;/code&gt; exists off
to the side in its own space.  Because of this special grouping, it was the ideal token
to start with.&lt;/p&gt;
&lt;p&gt;To change this token, I started off with the &lt;code&gt;EndMarkdownToken.type_name_prefix&lt;/code&gt; field
which contains the string that gets prepended to the start of any &lt;code&gt;EndMarkdownToken&lt;/code&gt;
type name.  Moving it into the &lt;code&gt;MarkdownToken&lt;/code&gt; class made the use of that field
self-contained, allowing it be modified into a protected field.&lt;sup id="fnref:protected"&gt;&lt;a class="footnote-ref" href="#fn:protected"&gt;2&lt;/a&gt;&lt;/sup&gt;  To accomplish
that change, I created a new &lt;code&gt;generate_close_markdown_token_from_markdown_token&lt;/code&gt; function
that allowed me to generate the proper &lt;code&gt;EndMarkdownToken&lt;/code&gt; from a given Markdown token.&lt;/p&gt;
&lt;p&gt;To me, this just made sense.  By performing these changes, I had an easy way of
generating
an &lt;code&gt;EndMarkdownToken&lt;/code&gt; that was documented and set all the right fields.  I was able to
make sure that the &lt;code&gt;start_markdown_token&lt;/code&gt; field was set.  As it had not been
set consistently, there were places in the code base where I had to do work arounds to
try
and figure out where the start token for a given end token was.  This was just cleaner.&lt;/p&gt;
&lt;h3 id="simple-refactorings"&gt;Simple Refactorings&lt;a class="headerlink" href="#simple-refactorings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Two of the paradigms that have served me well in my years of software development are
&lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;D.R.Y.&lt;/a&gt; and
&lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;S.O.L.I.D&lt;/a&gt;. The ‘L” in S.O.L.I.D. stands for the
&lt;a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle"&gt;Liskov substitution principle&lt;/a&gt;,
which (in its abbreviated form) states that an object should be able to be replaced
with another object that adheres to the same contract without any parent objects being
aware of the change.&lt;/p&gt;
&lt;p&gt;With respect to the PyMarkdown project, I had been using the &lt;code&gt;isinstance&lt;/code&gt; built-in
to deal with things instead of following the principle.  However, with the recent
round of refactorings completed, I was able to fix that.  While it may not seem like
much, it made me feel better to change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AtxHeadingMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;into a more SOLID-like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I know that there is only one implementation of the &lt;code&gt;AtxHeadingMarkdownToken&lt;/code&gt;
class, I was just not comfortable with having calls of &lt;code&gt;isinstance&lt;/code&gt; scattered throughout
the code base.  Over two commits, I was able to eliminate all uses of &lt;code&gt;isinstance&lt;/code&gt; except
for six legitimate uses of it in pivotal parts of the code base.&lt;/p&gt;
&lt;p&gt;As with the other changes, this change was a simple change, but an effective one.  With all
the checks for various tokens using a single manner of access, it was now easier to scan
the code base for locations where a given token was referenced.  That, and to me, it just
looked neater.&lt;/p&gt;
&lt;h3 id="cleaning-up-the-leaf-block-tokens-and-endmarkdowntoken"&gt;Cleaning Up The Leaf Block Tokens and EndMarkdownToken&lt;a class="headerlink" href="#cleaning-up-the-leaf-block-tokens-and-endmarkdowntoken" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All those changes inspired me, and I gave myself the green light to further encapsulate the
private fields as Python private fields.  It was not even remotely exciting, but it was
something I knew would make the code cleaner and more maintainable.  Using this
stripped-down example of the &lt;code&gt;EndMarkdownToken&lt;/code&gt;, this is where all the tokens started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EndMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;type_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each of the Leaf Block tokens, I then started by adding the two underscores to the
start of the field name, per Python requirements.  But as that made the field “invisible”
to other objects, I then needed to add a new function with the &lt;code&gt;property&lt;/code&gt; decorator to
be able to retrieve the value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EndMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;type_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__type_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_name&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__type_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lather, rinse, repeat.  Nothing special or exciting, which was what I was going for.  There
were no weird cases with these tokens that required a special setter function, so no
workarounds were needed.  And because the previously public field name and the newly added
property name had the exact same name, so changes were needed in other parts of the code.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I really cannot lie on this one.  While it was good to resolve some items off the
issues list, it was really good to get these refactorings done.  I have had those
ideas on how to clean up the project in my mind for weeks, and just getting them
done gave me a bit of an extra pep in my step.  It is not that they were any more
or less important than the other items, it is just that their large scope meant it
was going to be hard to fit them in.  As such, they always went into the “if I
ever have some time” bucket… and never seen again.&lt;/p&gt;
&lt;p&gt;I honestly think that taking the time to focus on what was important to me with
this project was good for me and the project.  It helped me refocus on the things
that I find important.  It helped the project by being able to present a more
concise and readable code base to any interested parties.  In all, it was a win-win.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a week left of holidays, I had hoped to get a similar mix of items dealt with
in the next week as I had the week before. Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:tokens"&gt;
&lt;p&gt;The exceptions as the &lt;code&gt;rehydrate_index&lt;/code&gt; field for Paragraph tokens, the &lt;code&gt;leading_spaces_index&lt;/code&gt; field for List Block tokens, and the &lt;code&gt;leading_text_index&lt;/code&gt; field for Block Quote tokens. &lt;a class="footnote-backref" href="#fnref:tokens" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:protected"&gt;
&lt;p&gt;Python does not have a protected field specifically.  The common practice of naming fields to be used in a protected-like manner is to preface them with a single &lt;code&gt;_&lt;/code&gt;. &lt;a class="footnote-backref" href="#fnref:protected" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 14</title><link href="https://jackdewinter.github.io/2020/12/28/markdown-linter-delving-into-the-issues-14/" rel="alternate"></link><published>2020-12-28T00:00:00-08:00</published><updated>2020-12-28T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-12-28:/2020/12/28/markdown-linter-delving-into-the-issues-14/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/12/21/markdown-linter-delving-into-the-issues-13/"&gt;last article&lt;/a&gt;,
I started the transition to working on Block Quote issues.  Having made good progress
with those issues, this week I continued with those issues, sometimes blurring the
line between Block Quote issues and Block Quote/List Block interactions.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now firmly in the mode of …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/12/21/markdown-linter-delving-into-the-issues-13/"&gt;last article&lt;/a&gt;,
I started the transition to working on Block Quote issues.  Having made good progress
with those issues, this week I continued with those issues, sometimes blurring the
line between Block Quote issues and Block Quote/List Block interactions.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now firmly in the mode of dealing with Block Quote block issues, I was looking forward
to making more progress in this area.  With each week that passed, I was becoming
more aware of how close I was to be able to at least do an initial release of the
project.  Block Quotes, and possibly Block Quote/List Block interactions are
the last big thing that I need to do before taking that leap, so I just needed to
buckle down and work through those issues, wherever they would lead.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/b5482d50d053d38a5635c07ba7455e9aaedf1fcb"&gt;16 Dec 2020&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/04b9be38529fc8d75a81401aa63002b61b21c741"&gt;20 Dec 2020&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="fixing-things-up-before-proceeding"&gt;Fixing Things Up Before Proceeding&lt;a class="headerlink" href="#fixing-things-up-before-proceeding" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before I started doing a lot of work for the week, I decided I needed to get one of
the disabled functions working: &lt;code&gt;test_list_items_282&lt;/code&gt;. While it was not a tremendously
important issue, it was one that I had put off for a while, and I just wanted it out of
the way.  Following the GFM Specification exactly, it can be argued that the following
Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;should either be parsed as a list with 2 items or two lists.  The crux of the issue
is whether the third line is considered a continuation of the second line or
if it is an entirely separate list.  Basically, it all comes down to how your parser
implements paragraphs and paragraph continuations.&lt;/p&gt;
&lt;p&gt;Luckily, one of the primary authors of the specification (@jgm) chimed in with this
following bit of information:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The intent was to have language that applies to the starting of list items in the middle of a paragraph that isn’t a direct child of a list item at the same level.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While some of the other help was not as useful, that one sentence was.  I did agree
with the other author that Paragraph elements in Markdown are the default element,
however I was not as sure that his interpretation of paragraph continuations was
correct. But this information helped me out a lot.  Using that information, I was able
to quickly put together these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;is_sub_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following the suggestion of @jgm, I changed the exclusion code at the end of the
&lt;code&gt;is_olist_start&lt;/code&gt; function to include a reference to &lt;code&gt;is_sub_list&lt;/code&gt;.  Following my
usual process, I was quick to find that everything just fell into place, and the
test was passing.  But I was not confident that I had properly fixed the issue,
so I created four variants of the test data, each just a little different from each
other.  It was only when all five tests had passed that I considered the issue resolved
and dealt with.&lt;/p&gt;
&lt;h2 id="an-easy-set-of-tests"&gt;An Easy Set of Tests&lt;a class="headerlink" href="#an-easy-set-of-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some of these items take days to complete and some take hours.  Until I start working
on them, I never know which bucket they will end up in.  Therefore, when I started
working on this item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;634&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bq&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had no clue what was going to happen.  Starting with the basics, I looked at the
Markdown for function &lt;code&gt;test_raw_html_634&lt;/code&gt; which was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;  &lt;span class="o"&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;
&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;"foo"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the start of the Markdown does not have a single HTML tag, or a HTML tag from one
of the special groups, an HTML block is ruled out.  But when the processing happens
for a Paragraph element, the inside of that paragraph is then filled with Raw HTML
elements, only slightly altering the Markdown when rendered as HTML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;  &lt;span class="p"&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;b2&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the item suggests, placing that same Markdown inside of a List Block or a Block Quote
should result in the same behavior, just inside of that block.  Crossing my fingers for
good luck, I created two variants of that Markdown: one that was prefixed with &lt;code&gt;-&lt;/code&gt; and
the other that was prefixed with &lt;code&gt;&amp;gt;&lt;/code&gt;.  Things flowed quickly through my usual process
and I was happy to find that these scenarios both worked without any additional changes
being needed.&lt;/p&gt;
&lt;h2 id="more-fun-with-block-quotes"&gt;More Fun with Block Quotes&lt;a class="headerlink" href="#more-fun-with-block-quotes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With good luck occurring for my last item, I hoped it would carry on to my next item.
So, when I looked for more work to round out the Block Quotes tests, I came across the
following group of items in the issues list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;different&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="n"&gt;levels&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;indented&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;blocks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rather than tackling them separately, I decided to tackle them together as a group.&lt;/p&gt;
&lt;p&gt;The first part of that work was making the requested variations on the data for test
function &lt;code&gt;test_list_items_300&lt;/code&gt;.  That data was somewhat simple, with the Markdown text
of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To address the first item, I added test function &lt;code&gt;test_list_items_300a&lt;/code&gt; that included an
Ordered List element after the Block Quote element, instead of an Unordered List
element.  Test function &lt;code&gt;test_list_items_300b&lt;/code&gt; addressed the second item by keeping that
List Item element as an Unordered List element but adding 2 space characters before it
to make it a sublist.&lt;/p&gt;
&lt;p&gt;Similarly, test function &lt;code&gt;test_list_items_301&lt;/code&gt; has a Markdown text of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
  &lt;span class="o"&gt;```&lt;/span&gt;
  &lt;span class="k"&gt;c&lt;/span&gt;
  &lt;span class="o"&gt;```&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The new variation of this Markdown in test function &lt;code&gt;test_list_items_301a&lt;/code&gt; was to change
the second line to start two Block Quote elements instead of one. Test function
&lt;code&gt;test_list_items_301b&lt;/code&gt; modified the test data slightly by indenting each line of the
Fenced Code Block element by one space.  Test function &lt;code&gt;test_list_items_301c&lt;/code&gt; did a more
drastic change by replacing the Fenced Code Block element with the single character &lt;code&gt;c&lt;/code&gt;
indented from the start of the Block Quote element.  Finally, the &lt;code&gt;test_list_items_301d&lt;/code&gt;
function did a more correct version of test function &lt;code&gt;test_list_items_301c&lt;/code&gt; by including
a blank line and a &lt;code&gt;c&lt;/code&gt; character indented by four spaces, but properly enclosing them
within the Block Quote started on line 2.&lt;/p&gt;
&lt;p&gt;With those changes made, it was time to get down to figuring out if there were any
problems and dealing with them!&lt;/p&gt;
&lt;h3 id="working-the-problem"&gt;Working The Problem&lt;a class="headerlink" href="#working-the-problem" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting with my normal process for working through new test functions, I worked
through the tokens and HTML for each of these functions.  Apart from
the functions &lt;code&gt;test_list_items_301b&lt;/code&gt; and &lt;code&gt;test_list_items_301c&lt;/code&gt;, the other tests
were producing the tokens that I expected them to.  After trying to get those two
functions working properly for an hour or so, I decided to put them on hold while I got
the other functions cleared up.&lt;/p&gt;
&lt;p&gt;Focusing on those other test functions, the HTML output was mostly there, but required
a small amount of fiddling.  Specifically, tests in which there was a Blank Line element
within a Block Quote element within a List Block element, the Blank Line within the
Block Quote was being used to determine whether the list was loose.  As that
Blank Line was within another Block and not within the List Block itself, it should not
have been affecting the calculation of List Block looseness. Luckily, the fix for this
was to add nine lines of code to the &lt;code&gt;__calculate_list_looseness&lt;/code&gt; function to properly
increase and decrease the &lt;code&gt;stack_count&lt;/code&gt; variable to account for the Block Quote token.&lt;/p&gt;
&lt;p&gt;With the tokens and HTML output deal with, it was time to deal with the rehydrated
Markdown and the consistency checks.  The fix to the Markdown was an easy one to
see: the whitespace allocated to the Block Quote tokens was not being added back into
the Markdown text that was generated.  Some easy changes to incorporate that information
was almost as easy to add, leaving the consistency checks.&lt;/p&gt;
&lt;p&gt;While the consistency checks took a bit, in retrospect they were somewhat easy to
understand and fix.  At the time though, it took a bit of effort to work through them.
Like the changes in the Markdown generator, changes needed to be introduced to
properly track which part of the Block Quote’s extracted whitespace was applied in the
Markdown generator.  That tracking is done using the Block Quote token’s
&lt;code&gt;leading_text_index&lt;/code&gt; variable, which was not being properly incremented to track the
newlines used within the owning Block Quote token.&lt;/p&gt;
&lt;p&gt;Once that change was done, things were looking a lot better, but there was a single
case where there was an index error getting that whitespace out of the token.  Upon
debugging, it was obvious that the &lt;code&gt;leading_text_index&lt;/code&gt; variable was getting incremented
twice.  Fixing that took a bit of passing information around but was quickly taken
care of.  And with that fix in place, each of the tests that I was working on was
solved and passing properly.&lt;/p&gt;
&lt;h3 id="not-everything-was-solved"&gt;Not Everything Was Solved&lt;a class="headerlink" href="#not-everything-was-solved" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the other tests passing cleanly, I refocused my efforts on test functions
&lt;code&gt;test_list_items_301b&lt;/code&gt; and &lt;code&gt;test_list_items_301c&lt;/code&gt;.  Doing my usual research into the
issues, I started to figure out what the tokens generating by the parser should be,
comparing that answer with what was being generated.  It was then that I
noticed that the tokens for the tests were close to normal, but not correct.  In both
test functions, the tokens mostly differed in where the one element stopped and the
next one started.&lt;/p&gt;
&lt;p&gt;Now, when I say, “I fiddled with the code”, I really mean I tried normal paths and
interesting paths to try and solve the issue.  And it was similar with these issues.
After around two hours of fiddling, I was no closer to having a solution than when
I first looking at the problem.
In the end, after doing a fair amount of research and debugging, I decided that I was
going to commit the code with functions &lt;code&gt;test_list_items_301b&lt;/code&gt; and
&lt;code&gt;test_list_items_301c&lt;/code&gt; disabled.  I just was not getting the right “angle” on solving
those issues.  I just felt it would be better to commit what I had and work on those
two functions in the next couple of days, so that is what I did!&lt;/p&gt;
&lt;h2 id="dealing-with-301b"&gt;Dealing With 301B&lt;a class="headerlink" href="#dealing-with-301b" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During that Saturday, I decided to take another shot at test function
&lt;code&gt;test_list_items_301b&lt;/code&gt;.  I knew the the tokens were just wrong.  To quantify that
wrongness, the Markdown text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
   &lt;span class="o"&gt;```&lt;/span&gt;
   &lt;span class="k"&gt;c&lt;/span&gt;
   &lt;span class="o"&gt;```&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was produced a Block Quote element that tried to include an empty Fenced Code Block
element into the Block Quote, leaving the &lt;code&gt;c&lt;/code&gt; character by itself on
a line outside of the element, followed by another empty Fenced Control Block.  From
prior work on List Blocks, I knew that the Fenced Code Block should terminate the
Block Quote element, as Block Quotes follow similar roads.  It was just a matter of
figuring out how to get there.&lt;/p&gt;
&lt;p&gt;Knowing that I have had tried to solve this problem the day before, I decided to take
the hard-line approach of debugging line-by-line through some of the code.  I don’t
usually do this as it is very time consuming and requires meticulous notes.  While I
am comfortable with doing that work, there are just more efficient ways of getting to
the same target.  But with those ways not working for this problem, it was down to
the nitty-gritty.&lt;/p&gt;
&lt;p&gt;It was a good thing that I used this approach because it told me something interesting.
Usually, at the start of processing, the code separates the line into extracted
whitespace and parseable line.  In this case, the debugger was showing me that the
separation that I had expected was not done.  As such, when the parser looked at the
raw data for the line, the spaces at the start of the line prevented that line from
being recognized as the start of a Fenced Code Block.&lt;/p&gt;
&lt;p&gt;The good news here was that adding these four lines to the &lt;code&gt;__process_lazy_lines&lt;/code&gt;
function made everything work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;after_ws_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;after_ws_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, I just took the same code that split the original &lt;code&gt;line_to_parse&lt;/code&gt; variable
in the main-line processor and added it here.  With that code in place, the
&lt;code&gt;is_fenced_code_block&lt;/code&gt; function did the rest, properly noticing the Fenced Code Block
start sequence, and properly starting the code block within the Block Quote.&lt;/p&gt;
&lt;h2 id="dealing-with-301c"&gt;Dealing With 301C&lt;a class="headerlink" href="#dealing-with-301c" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was just after 6pm PST when I committed the changes for &lt;code&gt;test_list_items_301b&lt;/code&gt;, and
I decided to start working on &lt;code&gt;test_list_items_301c&lt;/code&gt;.  In this case, it was not the
tokens that were wrong, but the spacing included from one of the lines within a
Block Quote element.  Doing research into the night, I still was unable to figure out
what the magic sequence was to get this working properly.  Rather than press on, I
decided to take a break and spend some time with my family, relaxing myself and my
brain.&lt;/p&gt;
&lt;p&gt;This worked well.  Starting again in the morning, I was able to quickly see that there
were two problems that I needed to address.  The first of those problems was that
the function &lt;code&gt;__adjust_paragraph_for_block_quotes&lt;/code&gt; was always adding an empty string
to the Block Quote token, which was the problem I was trying to solve.  The second
problem was that it was a great solution for most of the time, this specific test being
one of the few times where it was not.&lt;/p&gt;
&lt;p&gt;With that fresh information, I started experimenting and I was able to isolate code in
the &lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function that affected the outcome of the test.
The fun part was that if I took the indentation used for the list and added it to the
token’s data, test &lt;code&gt;test_list_items_301c&lt;/code&gt; worked, but other tests failed.  Doing some
extra plumbing and experimentation, I narrowed the active scenario down to specifically
only trigger when the &lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function was triggered within
a paragraph that was within a block quote. [more]&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having felt dread at the prospect of Block Quotes taking as long to complete as
List blocks did, I am happy to report that the feeling is quickly fading.  The
sense I am getting from the issues I am looking at are that there are issues to
deal with, but nothing I have not dealt with already, just variations on it.
On top of that, there are only one type of Block Quotes to worry about with a
very simple start sequence.  I was very solidly feeling that Block Quotes were
going to be a lot easier than List blocks.&lt;/p&gt;
&lt;p&gt;That did not mean things were going to be easy though!  I was starting to come close to
the end of the initial set of issues that I had added to the issues list, but I was
adding more as I looked through the code.  This week, I was able to get rid of
a handful of those issues, and it felt good.  But with approximately 70 lines of
items before hitting those that dealt with Rules, Tabs, and Correctness, it was
a sobering reminder that I just needed to get stuff done and done cleanly.&lt;/p&gt;
&lt;p&gt;And for me, that often poses a problem.  There are things that I want to do and feel
that I should be doing, and there are things that I need to do.  Resolving any issue
that deals with Tab characters?  Now that is a want, and I can live with a
“stupid” translation of Tabs until I can get the time to make them right.  Resolving
any issues that might uncover scenarios that I have not covered yet.  To the best of
my abilities, that is a must.  But there is a grey area between those two.&lt;/p&gt;
&lt;p&gt;Take the item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="n"&gt;handling&lt;/span&gt; &lt;span class="n"&gt;confusing&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;standard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I would like to get it resolved, but I am not sure that I need to do that.  I must
balance my desire for wanting things done right and delaying any release with my
knowledge that I can live with it for a couple of months while I get the project out.
And those are the types of decisions that I am going to have to make more and more as
this project gets to its closing stages.  Do I really need it, or can it wait?&lt;/p&gt;
&lt;p&gt;At least I know it is going to be fun!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was just as happy to get some holiday time off in which I could spend more time
with my family as I was to be able to make some solid holiday progress.  This next
week was going to be a good mixture of resolving solid issues, test cleanup, and
code cleanup.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 13</title><link href="https://jackdewinter.github.io/2020/12/21/markdown-linter-delving-into-the-issues-13/" rel="alternate"></link><published>2020-12-21T00:00:00-08:00</published><updated>2020-12-21T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-12-21:/2020/12/21/markdown-linter-delving-into-the-issues-13/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/12/14/markdown-linter-delving-into-the-issues-12/"&gt;last article&lt;/a&gt;,
I worked diligently to resolve all the tests that I had marked as disabled in the
previous week.  After cleaning up those issues, I finished cleaning up the remaining
List Block issues before getting back up to speed on Block Quote issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/12/14/markdown-linter-delving-into-the-issues-12/"&gt;last article&lt;/a&gt;,
I worked diligently to resolve all the tests that I had marked as disabled in the
previous week.  After cleaning up those issues, I finished cleaning up the remaining
List Block issues before getting back up to speed on Block Quote issues.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a week of digging deep to resolve the disabled tests, I checked the issues
list.  With only a handful of items left in the List Blocks section, I figured it was a
good time to make a push to finish with the List Blocks and start with the Block Quotes.&lt;/p&gt;
&lt;p&gt;Knowing that I was about to do that transition made me happy and filled me with dread
at the same
time.  It made me happy as I was more aware of how close I was getting to the end of the
first phase of the project.  It also filled me with a sense of dread because I had not
done any serious work with Block Quotes in a while.  As such, I am not sure if the
effort to get the Block Quotes to the same level as List Blocks will be the same.  I
hope it is significantly less, but we will see.&lt;/p&gt;
&lt;p&gt;If I think about it, I believe that
sense of dread is from not knowing how long it will take to address any issues that
arise.
I do know, that unless I finish up the List Blocks and start the Block Quotes, that
feeling will be stuck at dread.  So, time to buckle down and get stuff done!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/09682fe55c9e7962f18341be3212d3712b6888e8"&gt;10 Dec 2020&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/6db64e26af671e757156652ddcc457595542bc84"&gt;13 Dec 2020&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="closing-out-list-blocks"&gt;Closing Out List Blocks&lt;a class="headerlink" href="#closing-out-list-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having finished cleaning up the disabled scenario tests, there were a few items on the
issues list that I needed to get out of the way.  While not high-profile items,
those items were standing between myself and a list with no list block related items
on it.  That was motivation enough to put these items at the top of my list.&lt;/p&gt;
&lt;h3 id="adding-variations-of-existing-patterns"&gt;Adding Variations of Existing Patterns&lt;a class="headerlink" href="#adding-variations-of-existing-patterns" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;During the previous three weeks, I had taken the Series M scenario tests and
filled them out a lot.  As I filled them out, I did find parsing and transformation
issues, all which got fixed.  But in creating that series, I needed to take some
alternate path to properly exercise the specific patterns that I was trying to make sure
were covered by the tests.  In doing so, I often veered away from the correct variation
to faithfully create the right pattern in the group of scenario tests that I was
working on.&lt;/p&gt;
&lt;p&gt;Confused?  Hopefully, a concrete example will explain.  I started going through the
tests in each group, starting with Fenced Code Blocks and the scenario test function
&lt;code&gt;test_paragraph_series_m_ol_nl_fb&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;```&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="o"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The purpose of that specific test was to make sure that a Fenced Code Block following an
empty Order List start element was parsed properly.  However, from my point of view,
there was another variation of that test that was possible.  Creating the new scenario
test function &lt;code&gt;test_paragraph_series_m_ol_nl_all_i3_fb&lt;/code&gt;, I altered the Markdown
slightly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
   &lt;span class="o"&gt;```&lt;/span&gt;
   &lt;span class="n"&gt;foo&lt;/span&gt;
   &lt;span class="o"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Technically that was not a big change, but it was a significant one to me.  Instead of
testing
a variation where the Fenced Code Block terminates the List Block, it instead tests
the inclusion of that Fenced Code Block into the List Block. I consider that
the most correct form of that test.  At its base, that reason
for that classification is that if I said I wanted “an empty list with a fenced code
block”, that is what I would expect.  Nothing more, nothing less, just a simple example
that had that Markdown in its simplest form.&lt;/p&gt;
&lt;p&gt;I could have repeated that exercise with a lot of the scenario tests, but I
stayed with four tests from each group: two tests with a single list and two tests with
a sublist.  Starting with Fenced Control Blocks, I then proceded to HTML Blocks,
Indented Code Blocks, and SetExt Headings.  I hoped that the new scenario tests were
covering old scenarios, but I was not 100% confident that they were.  But as I executed
those tests, one by one I was convinced they were old scenarios, just being covered by
the Series M tests as a group.  Not one of the scenario tests failed!  After my
usual process of adopting the scenario tests, each test passed on its first try,
requiring no changes to the parser, the transformers, or the consistency checks.&lt;/p&gt;
&lt;p&gt;In the end, I was able to mark all these items from the issues list as resolved:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;variations&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;fenced&lt;/span&gt; &lt;span class="nv"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;proper&lt;/span&gt; &lt;span class="nv"&gt;indent&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;actual&lt;/span&gt; &lt;span class="nv"&gt;block&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;variations&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;html&lt;/span&gt; &lt;span class="nv"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;proper&lt;/span&gt; &lt;span class="nv"&gt;indent&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;actual&lt;/span&gt; &lt;span class="nv"&gt;block&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;variations&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;indent&lt;/span&gt; &lt;span class="nv"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;proper&lt;/span&gt; &lt;span class="nv"&gt;indent&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;actual&lt;/span&gt; &lt;span class="nv"&gt;block&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;variations&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;ext&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;proper&lt;/span&gt; &lt;span class="nv"&gt;indent&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;actual&lt;/span&gt; &lt;span class="nv"&gt;block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lazy-continuations-and-nested-list-blocks"&gt;Lazy Continuations and Nested List Blocks&lt;a class="headerlink" href="#lazy-continuations-and-nested-list-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another easy issue to get off the list was this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;levels&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;lazy&lt;/span&gt; &lt;span class="n"&gt;continuation&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on the work I had just completed to round out the Series M tests, I had confidence
that these would also not require any changes.  It was a bit of an educated guess, but
I believe that
all I wanted to do here is to provide different levels of List Blocks, ensuring that
the principle of
&lt;a href="https://github.github.com/gfm/#lazy-continuation-line"&gt;lazy continuation lines in lists&lt;/a&gt;
was being adhered to.&lt;/p&gt;
&lt;p&gt;Starting with test function &lt;code&gt;test_list_blocks_extra_5a&lt;/code&gt;, I added the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ensuring that text &lt;code&gt;def&lt;/code&gt; continued the paragraph started in the level 1 List Block.
Three tests later, the test function &lt;code&gt;test_list_blocks_extra_5d&lt;/code&gt; was testing the level 4
List Block with the Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
      &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
         &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was a simple set of scenarioes that passed right away, but I had expected them to.
However, with some of the issues that I have had with List Blocks and lazy continuation
lines, it was good to have some tests explicitly covering these cases.&lt;/p&gt;
&lt;h3 id="simple-cleanup"&gt;Simple Cleanup&lt;a class="headerlink" href="#simple-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having done some rewriting of code lately, I was debugging and found a couple of lines
in the &lt;code&gt;__handle_blank_line&lt;/code&gt; function that were not being used anymore.  With the
breadth of scenario tests and summaries of the code coverage of those tests also in
place, it was easy to determine and test to make sure this code was no longer being
used.  With that observation verified, that code was removed.&lt;/p&gt;
&lt;h3 id="getting-clarity"&gt;Getting Clarity&lt;a class="headerlink" href="#getting-clarity" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For a while, I have been convinced that I coded something wrong, but have not been able
to prove whether it was correct or not correct.  The only thing that I was convinced
of was that I needed to deal with this at some point.  With this being the last
issue in the List Block section, it was time to deal with it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;blank&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt; &lt;span class="nv"&gt;ending&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;parsed&lt;/span&gt; &lt;span class="nv"&gt;wrong&lt;/span&gt; &lt;span class="nv"&gt;into&lt;/span&gt; &lt;span class="nv"&gt;tokens&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;stack_count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="sc"&gt;#9&lt;/span&gt;:[&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ulist&lt;/span&gt;]
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;should&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nv"&gt;blank&lt;/span&gt;, &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;blank&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;outside&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;233&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;235&lt;/span&gt;, &lt;span class="nv"&gt;should&lt;/span&gt; &lt;span class="nv"&gt;blank&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;tokens&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;reversed&lt;/span&gt;?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The prototypical example of this was test function &lt;code&gt;test_list_blocks_233&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;

 &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the HTML output for that Markdown was correct, I had questions about whether I
was emitting the following tokens in the correct order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[ulist(1,1):-::2:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[para(1,3):]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(1,3):one:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-para:::True]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK(2,1):]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-ulist:::True]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[para(3,2): ]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(3,2):two:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-para:::True]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Specifically, my question was around the Blank token and the end Unordered List token.
Should the tokens be in Blank/Unordered order, or Unordered/Blank order?  Over the weeks
that I have looked at this case, I had never taken the time to sit down and work through
it.  As it was the last item for List Blocks in the Issue List, it was time.&lt;/p&gt;
&lt;h4 id="doing-the-dirty-work"&gt;Doing the Dirty Work&lt;a class="headerlink" href="#doing-the-dirty-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This may appear to be an easy case to some people, but I had issues with it.  Thinking
about it at length, it felt that my understanding of this problem was influenced by
which part of the GFM
Specification I had last dealt with.  So, to deal with that influence head-on, I re-read
the parts of the specification dealing with List Blocks, Paragraph Blocks, Blank
Lines, and lazy continuation lines.  With that information in my head, I started to work
through the problem logically.&lt;/p&gt;
&lt;p&gt;Starting at the beginning, line 1 starts the tokens off with the first three tokens of
the document, leaving an
Unordered List item active and a Paragraph element open.  When the Blank Line element
in line 2 is encountered, it closes the Paragraph element but leaves the Unordered List
and Unordered List item open.  Therefore, the fourth and fifth tokens are generated and
added to the document.&lt;/p&gt;
&lt;p&gt;It was at this point in working the problem that the clarity surrounded this problem
crystalized and became clear in my mind.  I am not sure why, but I had wrongly believed
that the Blank Line
element on line 2 not only closed the Paragraph Block but closed the List Block and
List Block item as well.  The Markdown for
&lt;a href="https://github.github.com/gfm/#example-240"&gt;example 240&lt;/a&gt;
clearly shows this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;


  &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as the Markdown is trnslated into a single Unordered List Block with a single item
that contains two paragraphs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;foo&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;bar&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This meant that when line 3 is interpreted, the List Block and List Block item are
still open, but the previous Paragraph element was closed by the Blank Line.  As
such, line 3 is not eligible for consideration as a lazy continuation line.  With
that option removed, the single leading space character is not enough leading space
to keep line 3 in the List Block, so that block is closed, and a new Paragraph element
is opened with the contents of line 3.&lt;/p&gt;
&lt;p&gt;It took a bit of work and a straight head to work through, but I had my answer!  To
make sure I did not forget about it, I added a comment to function
&lt;code&gt;test_list_blocks_232&lt;/code&gt;
to make sure I can look back at it when I need to.  While this was not something that
required a code solution, knowing that this issue was finally (and definitively)
resolved brought a smile to my face!&lt;/p&gt;
&lt;h2 id="starting-with-block-quotes"&gt;Starting with Block Quotes&lt;a class="headerlink" href="#starting-with-block-quotes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that last issue, all the specifically List Block related items were crossed off
the issues list.  It was now time to ease myself into work on Block Quotes and getting
them up to a comparable level as I had reached with List Blocks.&lt;/p&gt;
&lt;h3 id="starting-out-easy"&gt;Starting Out Easy&lt;a class="headerlink" href="#starting-out-easy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I decided to start with an easy item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;# TODO add case with &amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;tests&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the beginning, each of the scenario functions in the range &lt;code&gt;test_block_quotes_212&lt;/code&gt;
to &lt;code&gt;test_block_quotes_216&lt;/code&gt; were simple tests that showed how lazy continuation lines
work with Block Quote elements.  One of the observations that I made when adding those
tests was that, to properly test lazy continuation lines, the removed &lt;code&gt;&amp;gt;&lt;/code&gt;
character that makes the line “lazy” should be able to be inserted without changing
the HTML output.  Basically, according to the GFM Specification:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a string of lines Ls constitute a block quote with contents Bs, then the result of deleting the initial block quote marker from one or more lines in which the next non-whitespace character after the block quote marker is paragraph continuation text is a block quote with Bs as its content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To properly test this, I created &lt;code&gt;a&lt;/code&gt; variant functions of each of those five scenario
tests, and in
each case I added a variation with the &lt;code&gt;&amp;gt;&lt;/code&gt; character at the start of the line.  As
I worked through the scenarios, all the variant tests were working fine except for
function &lt;code&gt;test_block_quotes_213a&lt;/code&gt;.  Looking at what made that test different, the
answer was obvious: it involved List Blocks.  Even after adding other variants of this
test, I was unable to get any of them working.&lt;/p&gt;
&lt;p&gt;I was not 100% sure it was the right thing to do, but in the name of progress, I
marked the test functions &lt;code&gt;test_block_quotes_213a&lt;/code&gt; to &lt;code&gt;test_block_quotes_213d&lt;/code&gt; as
disabled, knowing I would get back to them when testing Block Quotes and List Blocks
and how they interacted.&lt;/p&gt;
&lt;h3 id="three-quick-reviews"&gt;Three Quick Reviews&lt;a class="headerlink" href="#three-quick-reviews" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next three items that I resolved were all easy issues to resolve.&lt;/p&gt;
&lt;p&gt;The first item was the removal of a piece of code that was no longer being used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_in_paragraph&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;at_end_of_line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;is_first_item_in_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;is_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next item was to remove the poorly worded item from the list and replace it with
one that specified the problem more clearly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;unify&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;separate&lt;/span&gt; &lt;span class="n"&gt;calculations&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="ss"&gt;`__pre_list`&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally, the last item was just to review the existing tests and make sure that
agreed with their current state:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;228&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;229&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;what&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;proper&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;col&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;None of these were tough tasks to undertake, but they were all helping me to get back
up to speed on parsing Block Quotes.&lt;/p&gt;
&lt;h3 id="mixed-levels-of-block-quotes-and-serendipity"&gt;Mixed Levels of Block Quotes and Serendipity&lt;a class="headerlink" href="#mixed-levels-of-block-quotes-and-serendipity" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Going through the list looking for other easy items to resolve, this one caught my
attention:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;quotes&lt;/span&gt; &lt;span class="nv"&gt;that&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;stop&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;.&lt;span class="nv"&gt;e&lt;/span&gt;. &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;, &lt;span class="nv"&gt;etc&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To me, this looked like an easy issue to tackle.  The test function
&lt;code&gt;test_block_quotes_229&lt;/code&gt; was a good base to start with.  However, I felt there needed
to be a bit more data, so instead of three lines with varying numbers of Block Quote
start characters, I created test function &lt;code&gt;test_block_quotes_229a&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and test function &lt;code&gt;test_block_quotes_229b&lt;/code&gt; with the same content, just blank lines
between each of the original lines.  Basically, the first test would verify how the
different lines worked together, and the blank lines in the second test would verify
how each line worked isolated from any other lines.&lt;/p&gt;
&lt;h4 id="serendipity"&gt;Serendipity&lt;a class="headerlink" href="#serendipity" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Except for some moving code around to make sure it looked correct, only one real change
needed to be done to get the tests working.  It was an interesting thing to run into,
but it was also a lucky break for me.  If I had selected any other text for each line,
things would have worked fine, and I would be none the wiser.  However, with the given
content for each line, the parser thought that the number for each line was a possible
start for an Ordered List Block.  As such, it consumed the digit and then looked for
the &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;)&lt;/code&gt; character to follow it.  When the end of the line was encountered instead
of one of those characters, an &lt;code&gt;IndexError: string index out of range&lt;/code&gt; error was thrown.
While this was quickly fixed by only setting that variable if the start of the List
Block had been confirmed, it was a good issue to find!&lt;/p&gt;
&lt;h3 id="building-up-test-coverage"&gt;Building Up Test Coverage&lt;a class="headerlink" href="#building-up-test-coverage" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;These issues were ones that I used to start the process of building up to the same
level of coverage for various Block Quote scenario groups as I had done with List
Blocks.  This effort was in response to the following issue list items:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;tests&lt;/span&gt; &lt;span class="nv"&gt;like&lt;/span&gt; &lt;span class="nv"&gt;cov2&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;blank&lt;/span&gt; &lt;span class="nv"&gt;before&lt;/span&gt;, &lt;span class="nv"&gt;after&lt;/span&gt;, &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;both&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;html&lt;/span&gt; &lt;span class="nv"&gt;blocks&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;other&lt;/span&gt; &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;tests&lt;/span&gt; &lt;span class="nv"&gt;like&lt;/span&gt; &lt;span class="nv"&gt;cov2&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;multiple&lt;/span&gt; &lt;span class="nv"&gt;lines&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;, &lt;span class="nv"&gt;like&lt;/span&gt; &lt;span class="nv"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;all&lt;/span&gt; &lt;span class="nv"&gt;leaf&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;all&lt;/span&gt; &lt;span class="nv"&gt;container&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To accomplish this, variations of Paragraph Blocks were added to function
&lt;code&gt;test_block_quotes_211&lt;/code&gt;, Thematic Breaks to function &lt;code&gt;test_block_quotes_212&lt;/code&gt;,
Indented Code Blocks to function &lt;code&gt;test_block_quotes_214&lt;/code&gt;, and Fenced Code Blocks to
function &lt;code&gt;test_block_quotes_215&lt;/code&gt;.  After adding 10 new scenario tests to address
these issues, I felt that this was a good start to addressing the issue of coverage
for Block Quotes.&lt;/p&gt;
&lt;p&gt;With all those changes completed, I followed my usual process of verifying each
scenario test.  Except for one issue with the Markdown transformer, the tests all
passed without incident.  That one issue was that the Markdown rehydration for
test function &lt;code&gt;test_block_quotes_214d&lt;/code&gt; included an extra &lt;code&gt;\x03&lt;/code&gt; character in the
output.  As I have mentioned in
&lt;a href="https://jackdewinter.github.io/2020/08/10/markdown-linter-adding-links-to-the-markdown-transformer/#moving-special-character-support"&gt;previous articles&lt;/a&gt;,
that character is a NOOP character, and is used to essentially place a “Blank” in
the tokens that can be removed if not needed.  In this case, that NOOP character was
added to the content of the Text token to indicate that a Blank Line was part of that
content.&lt;/p&gt;
&lt;p&gt;As that information was not needed for the translation back to Markdown, I eventually
added a call to the function &lt;code&gt;ParserHelper.resolve_noops_from_text&lt;/code&gt; at the end of the
&lt;code&gt;__perform_container_post_processing_lists&lt;/code&gt; function to remove that extra character.
While I knew that I needed to add a call to that function at some point in the
processing chain, it took an hour or so of experimentation to find the right place
to insert that call at.  Until I found and tested that location, I found lots of
locations where test function &lt;code&gt;test_block_quotes_214d&lt;/code&gt; was passing, but other test
functions started failing.  It was frustrating, but I was able to work through all
that noise and find the right place, which was satisfying!&lt;/p&gt;
&lt;h3 id="sunday-morning-relaxing"&gt;Sunday Morning Relaxing&lt;a class="headerlink" href="#sunday-morning-relaxing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a solid amount of work completed during the week, I found myself sitting in
front of my computer on another Sunday morning, wanting to get another issue resolved.
I do not want anyone thinking that I am workaholic, as I am not.  Sunday mornings in
our household are mostly for whatever personal projects we are working on.  As such,
I choose to get up early on Sundays and try and get a couple more issues resolved from
one of the projects that I am working on, before the family projects start taking
control of my day.&lt;/p&gt;
&lt;p&gt;Knowing that it was going to take a couple of hours, and having a couple of hours of
peace and quiet available, I started looking at the following item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;bquote&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt; &lt;span class="n"&gt;test_block_quotes_218&lt;/span&gt; &lt;span class="n"&gt;vs&lt;/span&gt; &lt;span class="n"&gt;test_blank_lines_197a&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="n"&gt;fixed&lt;/span&gt; &lt;span class="n"&gt;test_list_blocks_260&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;257&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While it may not seem like much, the positioning and whitespace of those blank lines
are just slightly off.  Looking at this back at the end of June 2020, I noticed that
within containers, the column number for blank lines was off.  Specifically, given this
Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(where the &lt;code&gt;\a&lt;/code&gt; character is a visual indicator for a space character), the token for
the blank line was being calculated as &lt;code&gt;[BLANK(2,5):]&lt;/code&gt;.  While that is one possible
answer to Blank Line token for that line, it has issues.  Specifically, because it is
within a List Block, the consistency checking had issues with that line because it
did not appear to have the correct indentation.&lt;/p&gt;
&lt;p&gt;After thinking about it, I eventually settled on the correct form of that token being
&lt;code&gt;[BLANK(2,2):   ]&lt;/code&gt;.  As the spaces were all that was on the line, I figured that it was
more correct to say that the column number was 2 followed by three space characters
than a column number of 3 followed by two space characters.  Influenced by
&lt;a href="https://github.github.com/gfm/#example-257"&gt;example 257&lt;/a&gt;,
I have confidence that I made the correct choice, backed up by the commit I made
on
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/4b681751cae38ce2007f3b0ada6158ed9a15f353"&gt;28 Jun 2020&lt;/a&gt;
with that choice and the fallout from that choice.&lt;/p&gt;
&lt;p&gt;At that time, I was focusing on List Blocks, and I added the item into the issues
list to fix this for Block Quotes, and it was now time to fix that.  Unlike the
fixes required to resolve this for List Blocks, the fixes required to resolve this
for Block Quotes were relatively small.  The first part of that change was to
set the column number to the length of the text removed by the owning container
blocks.  This firmly set that column number to the first character after the
container processing, removing the determination of the column number from the
leaf block processing.  To balance that out, the calculation for
initial whitespace to allow for a Blank Line token within a Block Quote was set
to the amount of whitespace that was extracted.  Other than that, no other
changes were made.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned earlier, it was a relief to wrap up the verification of the List Blocks
and moving on to Block Quotes.  But with that transition, there was also a sense of
dread that I felt as I started on Block Quotes.  Would getting a solid amount of
coverage for Block Quotes take a couple of months as it had for List Blocks?  Would
it be more? Would it be less?  I just did not know.  I was hoping it would be less,
but that not knowing was just driving me nuts.&lt;/p&gt;
&lt;p&gt;But I also realized that the sense of dread would not disappear until I started doing
something about it.  Even by working on easy Block Quote items, I was getting a
clearer picture of the effort it will take to cover Block Quotes properly.  Instead of
a sense of dread, I believe I am at a place where I am confident that it will be less
than four months, and probably more than two weeks.  Not sure where in that range it
will land, but pretty confident it will be in there.&lt;/p&gt;
&lt;p&gt;And that is okay for now.  The important thing is that I did not let that dread knock
me down.  I took it, channeled it, and got some more information that helped me deal
with it.  Cool!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Still feeling a small amount of
dread, but mostly I am feeling optimism about the progress I am making!
As such, I expect to be working with Block Quotes for a while, possibly dipping into
dealing with Block Quotes and List Blocks every so often.  &lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Autism And How It Affects My View of Christmas</title><link href="https://jackdewinter.github.io/2020/12/20/autism-and-how-it-affects-my-view-of-christmas/" rel="alternate"></link><published>2020-12-20T00:00:00-08:00</published><updated>2020-12-20T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-12-20:/2020/12/20/autism-and-how-it-affects-my-view-of-christmas/</id><summary type="html">&lt;p&gt;Many people in my life have been very understanding, but as always, there are a decent
number of people that have left some lasting negative impacts.  Some of those people I
blame for their actions, and some of those people were just reacting to me and how
my Autism appeared …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many people in my life have been very understanding, but as always, there are a decent
number of people that have left some lasting negative impacts.  Some of those people I
blame for their actions, and some of those people were just reacting to me and how
my Autism appeared to them.  But equally important to how I appeared to them was my
Autism and how it has affected my view of Christmas throughout my life.&lt;/p&gt;
&lt;p&gt;When I say that I was diagnosed with Autism in my 40s, that does not mean that I did not
have Autism before that.  It just means instead of &amp;ldquo;the weird guy with Autism&amp;rdquo;, I was
just the &amp;ldquo;the weird guy&amp;rdquo;.  And back when I was a kid, I definitely was &amp;ldquo;the weird kid&amp;rdquo;.
Contrary to the modern definition of Autism, the definition of Autism when I was a kid
was someone with below-average intellect who had severe problems interacting with the
world.  I did not have the benefit of any helpful labels and programs to help me
succeed, such as the help that my son was able to get throughout his childhood.  It was
just me trying to figure things out as I went, often feeling alone and alien, wanting
to fit in with my peers, but not knowing how to even start.&lt;/p&gt;
&lt;p&gt;That is where my negative view of Christmas started, based on a strong dislike of what
I perceived to be the over-commercialization of Christmas.  As I have been trying to
understand myself better over the years, it has been hard for me to disentangle two
aspects of this dislike from each other.&lt;/p&gt;
&lt;p&gt;The
original reason that I disliked Christmas was indeed a selfish one: our family did not
have enough growing up.  My mom is one of the most important people in my life, and
each year I saw her struggle throughout the year to make sure we had our basic
necessities and whatever other reasonable things she could get for us.  It pissed me
off that my father was almost never in the picture.  The thought of my mother having
to ask our local church or food bank for help and for presents, either made me feel
embarrassed and mad at the same time.  With the kind heart that I know my mother has,
I am pretty confident
that she felt like she should have been a better mother, even though that was not in
the cards. For me, even though my mom did everything for us out love for us,
Christmas was a time when I always felt more negative emotions that positive ones.&lt;/p&gt;
&lt;p&gt;And there is where the second aspect kicks in: my peers.  I remember the feeling of
dread that preceded going back to school after Christmas break.  Each year, I would go
back to school and everyone in the class
would be bragging about the wonderful things they got for Christmas.  While I tried to
pass off the things I got as equally wonderful, my lack of social skills meant that
I was unsuccessful, while my classmates would seemingly and convincingly go on and on
about the fantastic things that they got.  They all seemed to be bragging about how
wonderful their lives and families were, and it hurt.&lt;/p&gt;
&lt;p&gt;As that stuff was happening at school, there were also issues
I had with how my extended family dealt with Christmas.  I mean, at 11 years old, how
could I explain to them that the music of Tchaikovsky appealed to me because of his use
of harmony and melody?  I just knew that I liked it and could get lost in that music
for hours.  So, when my mother asked what I wanted for Christmas from my extended
family, I asked for a Tchaikovsky cassette tape.  It was simple, it would not cost too
much, and it was something that I would appreciate.  Sounds logical, right?&lt;/p&gt;
&lt;p&gt;I ended up asking for that single cassette tape of Tchaikovsky for three years
straight.
I would never dream of asking my mother for it, because she was having a hard enough
time making sure we were cared for.  But as a request for Christmas from my
extended family, I was sure it was an easy request to fulfil.  Not so.
The first year, one of my older cousins gave me a Bart Simpson poster and a dancing
beer can, because &amp;ldquo;they were sure that is what I meant to ask for&amp;rdquo;.  The second year I
did indeed get a cassette tape, but one with the works of Beethoven.  When I asked
about the cassette tape, I was asked &amp;ldquo;aren&amp;rsquo;t they the same?&amp;rdquo;.  The third year, a year
in which I remember one of my younger cousins being responsible for me in the gift
exchange, I finally received a cassette tape of some of Tchaikovsky&amp;rsquo;s symphonies.  I
did not find out who that cousin was, but I wish I did so I could have thanked them&amp;hellip; I
played that tape until it wore out.&lt;/p&gt;
&lt;p&gt;But those experiences left a bitter mark on my mind regarding Christmas.
Finding out more information about the gifts, I was able to figure out that the dancing
beer can was supposed to be a gag gift or a good joke.  The Beethoven tape? It was
bought two months before my mother gave them my Christmas list.  While it may not be
the right information to gleam from those events, my Autistic mind analyzed the facts
that I had gathered and came to a couple of conclusions.&lt;/p&gt;
&lt;p&gt;The first conclusion was that my extended family did not care about each other.  It was
about a good joke with the whole family there, or something that was bought at a sale
that they could pass off as good enough.  It was not about love or understanding, it
was about fulfilling a contract to present a gift.  The second conclusion was that even
though we were all good Catholics and went to mass in and around the holidays, most of
that was all for show.  One of the tenets that I learned growing up was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do unto others as you would have them do unto you.&lt;/p&gt;
&lt;p&gt;Gospel of Luke, 6:31.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When my aunts and uncles asked each other for something for Christmas, I believe they
almost always received what they asked for.  How would they have felt if it took one
of their siblings three years to get it right?  I do not think they would have been
happy.  Furthermore, how would they have felt if they asked for something they really
did need, and instead got a joke gift and had everyone laughing at them.  How would
they feel then?&lt;/p&gt;
&lt;p&gt;To my recollection, none of my extended family asked me or my mother what was so
important about Tchaikovsky that I would ask for it over a toy.  I just know that it
was not until I was in my 30s that one of my younger cousins asked.  The reason? In a
life where my Autistic mind was going the speed of thought, listening to those melodies
and harmonies helped me find peace and calmness for a brief amount of time.  I could
lose myself in them and forget about how difficult that the world was for me to
process.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;As I grew older, I was able to start figuring out how these things impacted my life
and how it colored my view of Christmas.  My loving wife has asked me for the last
ten years why I do not share her love of Christmas, and it is only recently that I have
been able to sort out parts of it.  It has been difficult to try and pull on all these
threads to try and figure it out but undertaking that task has helped me find some
peace with the subject. From those old threads of my Christmas experiences, I was able
to gather some things that I would like to share.&lt;/p&gt;
&lt;p&gt;As the years have passed, I have heard little bits of information here and there from
my trips back home that lead me to believe that a lot of my classmates were not always
as lucky as I was.  It was with a lot of sadness that I found out what a lot of
those classmates had to go through their own versions of hell in their own lives.  For
quite a few of them, those Christmas presents that they received were the only symbols
of love that they received from their parents.
For others, they felt a constant need to prove that they were better than others because
their families never made them feel like they were good enough.  I could go on with
other things I have heard about classmates over the years, but the picture is pretty
much the same.  Every one of those people had different forces impacting them in their
lives, and often, enough of them were negative and colored their perceptions.&lt;/p&gt;
&lt;p&gt;Using the analytical part of my Autistic brain, I came to understand that
their bragging about Christmas gifts were mostly cries for help, not joyous refrains.
While I was upset with them growing up, regardless of their station in life I now hope
that each and every one of them finds peace in their own way. I came to the realization
that I was, and continue to be, lucky that I have always had a kind and caring mother
in my life. She has always been there for me and never left me feeling that having
only one parent in your life was not enough.  While it should be more common, it is not,
and that is sad.&lt;/p&gt;
&lt;p&gt;To that extent, I believe that Christmas should not be based on a calendar, but on a
state of mind.  We should
be helping people and making sure our children and each other are comfortable, loved,
and respected.  It should not be about making a special effort during Christmas to make
time for each other and be patient with each other, it should be a normal occurrence
in our daily lives.  I am not sure if this makes me seem naïve or if it just the way
that my Autistic mind works, but it is how I feel.  I do not care if it is kind
of mushy or idealistic.  Can anyone really argue with me that showing each other a
little more patience and respect would not be a positive thing in our chaotic world?&lt;/p&gt;
&lt;p&gt;Another observation is that people are quick to point to the physical gifts that they
received at Christmas, but do not always pay attention to the other gifts throughout
the year.  Even though we did not have enough growing up, I have the utmost confidence
that I would not have made it to where I am today without my mother&amp;rsquo;s unconditional
love.  While she knew I was different from a young age, I never felt like I was a
&amp;ldquo;weird kid&amp;rdquo; to her, just her oldest son, who needed love just as much as her other
two kids.&lt;/p&gt;
&lt;p&gt;Finally, different people experience things differently, and we must make
our own efforts to understand people on their turf, not ours.  As someone with Autism,
I should not be expected to offer to explain myself and my Autism to people.  But if
someone were to ask me a question about how I perceive things and how they can help, I
would definitely be open to that.  I would like to think that if my relatives had asked
me that question about Tchaikovsky and I answered honestly that they would either
respect myself or my mother and help me find that 45 minutes of peace located on a
well-worn cassette tape.  I know I would gladly offer that gift to someone.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Even after finding peace with the subject, I am not sure that a &amp;ldquo;love&amp;rdquo; of Christmas
is in the cards for me.  I do know that in my own life, either inspired by my mother&amp;rsquo;s
love or her teaching of &amp;ldquo;the Christmas spirit&amp;rdquo; to me, Christmas is just another day
to me as I simply try and apply those &amp;ldquo;Christmastime&amp;rdquo; principles to my life daily.  To
be honest, I have no clue on whether it is my Autism or my upbringing that
has got me to this place in my life, I just know that it is the path that I chose.  And
I feel good about that choice.&lt;/p&gt;
&lt;p&gt;I guess you could say that it is my gift to those around me.  My gift to myself?
Letting go of some of those negative Christmas experiences each year.  Allowing myself
to forgive those people and hope that they find peace with their own person daemons.
I am not a religious person by nature, but I do know that the many holy books, the
Bible included, have some great verses.  Here is one I try and live by:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A new commandment I give to you, that you love one another: just as I have loved you, you also are to love one another.&lt;/p&gt;
&lt;p&gt;Gospel of John, 13:34&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Autism"></category><category term="Autism"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 12</title><link href="https://jackdewinter.github.io/2020/12/14/markdown-linter-delving-into-the-issues-12/" rel="alternate"></link><published>2020-12-14T00:00:00-08:00</published><updated>2020-12-14T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-12-14:/2020/12/14/markdown-linter-delving-into-the-issues-12/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/12/07/markdown-linter-delving-into-the-issues-11/"&gt;last article&lt;/a&gt;,
I continued in my quest to reduce the size of the issues list.  In this article, I
worked hard to deal with the 33 scenario tests that I skipped in the last set of commits
due to time constraints.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pure and simple, this week …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/12/07/markdown-linter-delving-into-the-issues-11/"&gt;last article&lt;/a&gt;,
I continued in my quest to reduce the size of the issues list.  In this article, I
worked hard to deal with the 33 scenario tests that I skipped in the last set of commits
due to time constraints.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pure and simple, this week was all about resolving the 33 scenario tests that I marked
as disabled from last week.  I was mostly confident at the time that the right decision
was to mark these tests as disabled and commit the changes I had already made.  The
question was whether I could fix this issues in five minutes, five hours, or five days.
If the answer was anything except five minutes, then disabling the tests was the right
thing to do.  Otherwise, it would not be the wrong thing to do, I would just feel
foolish that it could have been dealt with quickly instead of disabling the tests.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/b9b0e9707355c5e174e89588b4085eac912ada5f"&gt;03 Dec 2020&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/7137522b730ee7875020e495a39b45f9de2b2866"&gt;06 Dec 2020&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="cleaning-up-from-last-week"&gt;Cleaning Up from Last Week&lt;a class="headerlink" href="#cleaning-up-from-last-week" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At the end of the work that I covered in the last article, I marked 33 scenario test
functions as disabled.  While I felt comfortable in disabling them for a bit, I did
not feel comfortable leaving them disabled for too long.  It was time to tackle them and
get them resolved!&lt;/p&gt;
&lt;h3 id="starting-with-html-blocks"&gt;Starting with Html Blocks&lt;a class="headerlink" href="#starting-with-html-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I needed to start somewhere, and HTML Block elements just seemed like the best place
to start.  There was no real good reason to choose them other than, in my mind, they
were a simple block type.  The text in HTML Block is translated
to HTML with no changes or interpretation, and the start and the stop sequences for
HTML Block are very constrained, but also very simple.  It just seemed like the
simplest place to start for something that I was concerned about.  My concerns?
That solving the problems with all 33 failures were going to be a very difficult task
to accomplish.&lt;/p&gt;
&lt;p&gt;It was during my usual task of research though debugging that I was able to make a
quick breakthrough in diagnosing the problem.  As a lucky observation, I noticed that
when one of the Series M test functions was executed, the test’s Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 1.
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
foo
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;resulted in an HTML Block element that started between the end of the sublist and
the end of the list.  When the end of that list occurred, it caused the HTML Block
element to be closed, leaving the last two lines to be interpreted as a Paragraph
containing the text &lt;code&gt;foo&lt;/code&gt; and a Raw HTML element of &lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;.  By looking at the
Markdown text above, I believed that both lists should have been closed.  The
HTML Block start element should have closed both Ordered List blocks as the HTML
Block was not indented enough to keep either List block open.  But how was the code
interpreting that Markdown, that was the real question.&lt;/p&gt;
&lt;p&gt;Digging into the code a bit, adding extra debug as I went, I was able to soon figure
out that the parser was trying to close the list, but the right type of close was not
occurring.
As I dug into that code, I noticed that I had found a similar problem with the
Thematic Break element and list closures at some point in the past.  To solve the
problem with Thematic Breaks, I added Thematic Break specific code in the
&lt;code&gt;__check_for_list_closures&lt;/code&gt; function that properly closes the right amount of List
elements if a Thematic Break element occurred within a List element.  After going
through this code and the data from the scenario test’s log, I had a theory that
I had another instance where I needed to follow this pattern.&lt;/p&gt;
&lt;p&gt;To test that theory, I quickly changed the code in the &lt;code&gt;HtmlHelper&lt;/code&gt; class that
checks for the type of HTML block to break out the “is it a HTML start” code from the
“what kind of HTML start is it”.  By creating this new &lt;code&gt;is_html_block&lt;/code&gt; function,
it allowed me to change the &lt;code&gt;__check_for_list_closures&lt;/code&gt; function in the
&lt;code&gt;ListBlockProcessor&lt;/code&gt; class to calculate whether the current line was indeed the
start of a HTML Block, storing that value in the &lt;code&gt;is_html_block&lt;/code&gt; variable.
With that completed, I changed code that specified &lt;code&gt;is_theme_break&lt;/code&gt; as part
of two &lt;code&gt;if&lt;/code&gt; conditions to &lt;code&gt;is_theme_break or is_html_block&lt;/code&gt; and I was ready to go.&lt;/p&gt;
&lt;p&gt;Following my usual pattern of validation scenario tests, I was able to get the
new and changed tokens validated quickly, producing the HTML output that I
expected.  With no other changes, I was able to get all four disabled scenario
tests that dealt with HTML Blocks working again.&lt;/p&gt;
&lt;p&gt;With those four tests no longer being disabled, the total count of scenario tests
to fix was down 4 scenario tests from 33 to 29.  It was a good start, but I still
had a long way to go.  But with momentum on my side, I carried on!&lt;/p&gt;
&lt;h3 id="maintaining-the-momentum-with-fenced-code-blocks"&gt;Maintaining the Momentum with Fenced Code Blocks&lt;a class="headerlink" href="#maintaining-the-momentum-with-fenced-code-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I had a pattern that worked for one type of block, I decided to try that same pattern
out on the next type of blocks: Fenced Code Blocks. When I did that, I was
pleasantly surprised that following the same pattern led to the same results, with
one exception.  In this case, the “is this a Fenced Code Block start” function
already existed as &lt;code&gt;LeafBlockProcessor.is_fenced_code_block&lt;/code&gt;, so it was easy to
wire it into the &lt;code&gt;__check_for_list_closures&lt;/code&gt; function after assigning it to the
&lt;code&gt;is_fenced_block&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;The one exception was that there was a small failure in the rendering of the Fenced
Code Block tokens to HTML.
In cases where an empty Fenced Code Block element was present, any extra whitespace
in the Blank Line was being added to the HTML output after the newline character,
instead of just adding the newline character.  As this was the only failure, and
(at least to me) it was obvious that this was the issue, I was able to fix it
by adding the &lt;code&gt;exclusion_condition&lt;/code&gt; variable and keying off of that variable.  The
testing for that change happened almost as quickly as the coding did, and I was
able to resolve that group of four failing scenario tests.&lt;/p&gt;
&lt;p&gt;With another 4 tests that were no longer disabled, the disabled test count was now
down to 25.&lt;/p&gt;
&lt;h3 id="atx-headings-for-the-three-peat"&gt;Atx Headings for The Three-peat?&lt;a class="headerlink" href="#atx-headings-for-the-three-peat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Deciding to work on Atx Headings next, I applied the same pattern and got a very good
result.  Other than that changes required to isolate the “is this an Atx Heading start”
code into its own function (and its inclusion into the &lt;code&gt;__check_for_list_closures&lt;/code&gt;
function), no other Atx Heading code required changes.  After validating and modifying
the tokens for the scenarios, all the tests just passed.  It was so weird to have
that happen, that I ran the scenario tests again just to be sure, and they were
indeed passing.&lt;/p&gt;
&lt;p&gt;To be clear, it was not that I was doubting myself, I just expected a lot more
difficulty in resolving these issues.  But, with a little bit of work, another 3 tests
were removed from the disabled list, bringing the disabled test count down to 22 tests.&lt;/p&gt;
&lt;h3 id="cleaning-up-the-html-indented-code-blocks"&gt;Cleaning Up The HTML: Indented Code Blocks&lt;a class="headerlink" href="#cleaning-up-the-html-indented-code-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After looking at the disabled tests dealing with Indented Code Block elements,
it was almost immediately obvious the same pattern would not work with these tests.
As far as I
could tell from my initial look, the problem was not with the tokens, but in
the determination of the looseness of the Lists.  In each of the failures, the
only difference was whether the items in the List blocks were surrounded
by HTML’s Paragraph tags or not.  The problem definitely had something to do with
looseness.&lt;/p&gt;
&lt;p&gt;The GFM Specification’s
&lt;a href="https://github.github.com/gfm/#loose"&gt;definition of looseness&lt;/a&gt; states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A list is loose if any of its constituent list items are separated by blank lines, or if any of its constituent list items directly contain two block-level elements with a blank line between them. Otherwise a list is tight. (The difference in HTML output is that paragraphs in a loose list are wrapped in &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags, while paragraphs in a tight list are not.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And whether I liked it or not, the HTML output was just a &lt;em&gt;little&lt;/em&gt; bit off.  Not much,
but enough.  Specifically, it was cases in which the Blank Line token was appearing
right after an end List Block token, a case that I felt should not be marked as loose.&lt;/p&gt;
&lt;p&gt;Adding a lot of debug and scanning through the log files, I decided to take an approach
of removing the one set of cases that were producing bad results, rather than redesign
the &lt;code&gt;__calculate_list_looseness&lt;/code&gt; function from the ground up.  As far as I could tell,
everything else was working, just this one case was failing.  Therefore, I created the
new &lt;code&gt;__correct_for_me&lt;/code&gt; function where I looked for Blank Line tokens, looked for the
end List Block tokens directly before it.  At that point, being within the proper list,
the code was then able to make the right determination on the looseness of the list.&lt;/p&gt;
&lt;p&gt;Testing that theory took a while to code up, but the testing went by quickly.  It
was during that testing when I noticed that the whitespace in the Paragraph Block
tokens was off by one.  As the HTML output is checked before the Markdown rehydration
is checked, the issues with the HTML output prevented this issue from being seen.
However, due to the extensive logging I have in place, I was able to quickly deduce
that I had mixed up the passing of the &lt;code&gt;leading_space_length&lt;/code&gt; variable to the
&lt;code&gt;__adjust_line_for_list_in_process&lt;/code&gt; function with the &lt;code&gt;before_ws_length&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;After a quick fix and some retesting, everything was now working, and the count of
failing tests had fallen by another 2 tests down to 20 failing tests.&lt;/p&gt;
&lt;h3 id="the-long-slog-setext-headings"&gt;The Long Slog: SetExt Headings&lt;a class="headerlink" href="#the-long-slog-setext-headings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Working through the previous scenario tests, I was confident looking at the two
tests that deal with SetExt Heading elements that I would be able to deal with
them quickly.  If someone is right with their confidence on something like this, they
are told they are right.  If they are not right, they are usually told that they had
too much hubris.  That day, hubris was having a fun time laughing at me.&lt;/p&gt;
&lt;p&gt;As it was a Saturday, I was doing things around the house and getting them off our
house’s to-do list.  In between each of these tasks, I would sit down and work on trying
to figure out what the issue was with these tests and how to properly identify them.
I was fairly convinced that I needed to be able to detect the start of a SetExt Heading
element.  I was failing miserably on trying to figure out how to perform that
detection. I tried to be smart about the detection, and it failed.  I tried to be
simple about the detection, and that too failed.  And with each attempt, I was just
getting more frustrated.&lt;/p&gt;
&lt;p&gt;It was mainly as a joke that I decided to add &lt;code&gt;or True&lt;/code&gt; to the end of one of the
&lt;code&gt;if&lt;/code&gt; statements.  At the very most, I thought I might possibly find some information
related to the “detecting the start of a SetExt Heading” issue that I was working on.
I was flabbergasted when the scenario tests I was debugging just started working.&lt;/p&gt;
&lt;p&gt;In retrospect, it somewhat makes sense, though I want to dig into that function some
more in the future to verify it.  I believe that it worked because SetExt Heading
elements and Paragraph elements are related.  To get a SetExt Heading, you start with
a Paragraph element, and you transform it into the SetExt Heading element once the
SetExt Heading sequence is seen after that paragraph on its own line.  As such, I
didn’t need to add any extra processing above that of the Paragraph processing to
the first &lt;code&gt;if&lt;/code&gt; statement in the &lt;code&gt;__check_for_list_closures&lt;/code&gt; function, as the Paragraph
element processing was already sufficient.  &lt;/p&gt;
&lt;p&gt;In the case of the second &lt;code&gt;if&lt;/code&gt; statement, all the other types of Leaf Block element had
already been added, so adding &lt;code&gt;or True&lt;/code&gt; just included the one or two remaining types
of leaf blocks that had been missed.  As far as I can tell, it was nothing more than
a shortcut.&lt;/p&gt;
&lt;p&gt;Regardless of whether my guess is correct or not, the count was now down from 20
disabled scenario tests to 18 scenario tests… and these ones were going to take
some time to figure out.&lt;/p&gt;
&lt;h2 id="the-last-18"&gt;The Last 18&lt;a class="headerlink" href="#the-last-18" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was then down to the last eighteen scenario tests that I needed to get working, and
I knew some serious work was going to be involved.  I had already been thinking about
this for a while, even going as far to contact the
&lt;a href="https://talk.commonmark.org/"&gt;CommonMark Discussion List&lt;/a&gt;
to help understand some of the thorny issues.&lt;/p&gt;
&lt;h3 id="understanding-the-scope-of-the-problem"&gt;Understanding the Scope Of The Problem&lt;a class="headerlink" href="#understanding-the-scope-of-the-problem" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When all was said and done, these last
scenario tests were failing due to my lack of understanding and implementation of the
following section of the GFM specification:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exceptions:
1. When the first list item in a list interrupts a paragraph—that is, when it starts on a line that would otherwise count as paragraph continuation text—then
(a) the lines Ls must not begin with a blank line, and
(b) if the list item is ordered, the start number must be 1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It took me a bit to work through it, but here is how I think about it.  Take the
Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line clearly starts a list, but it also opens a paragraph block with the text
&lt;code&gt;abc&lt;/code&gt; in it.  Because of that open paragraph, the text in line 2 needs to be handled
carefully, as the previously noted exceptions come into play.  In this case, because of
section (a) of the exceptions, this Markdown will be interpreted as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;abc
1.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is even 1 non-whitespace character on that second line after the list start
identifier, say the Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then that section of the exceptions is no longer in play, allowing the second line to
be a valid list start:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;abc
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;a&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, the harder one for me to understand was section (b) of the exceptions.  The
impact of that exception is that while the above example works as I would expect, the
following Markdown did not:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
   &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;producing the following HTML&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;abc
2. a&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But why?&lt;/p&gt;
&lt;h3 id="everything-is-not-perfect"&gt;Everything Is Not Perfect&lt;a class="headerlink" href="#everything-is-not-perfect" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I could give many different examples of what is and is not a proper
translation, but the example from the discussion forum that sticks in my head a lot is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;risked&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt;
   &lt;span class="n"&gt;its&lt;/span&gt; &lt;span class="n"&gt;deadline&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;March&lt;/span&gt;
   &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;meeting&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="k"&gt;called&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;architect&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="n"&gt;flight&lt;/span&gt;
   &lt;span class="mi"&gt;457&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="n"&gt;eye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;She&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;stay&lt;/span&gt; &lt;span class="k"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Hilton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;room&lt;/span&gt;
   &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;had&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;ocean&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First off, this example is plainly an example based in the English language, and I
assumed that equally valid examples could be constructed for any language.  Given that
assumption, when I read that Markdown for the first item in the list, it is obvious to
me that the end of the first item in the list refers to &lt;code&gt;March 13.&lt;/code&gt;, not a sublist
starting at &lt;code&gt;13&lt;/code&gt; with the contents of &lt;code&gt;A meeting was called.&lt;/code&gt;.  The context of the rest
of the sentence leaves me with little doubt that the sentence was written that way.
And each of the other two list items left me with the same confidence.  Those numbers
were part of the sentences, and thus the paragraphs that the sentences were in, not
the starts of new lists.&lt;/p&gt;
&lt;p&gt;But how should the specification handle the codification of this?  The concepts of
“sentence context” and “looks right” do not apply to the specification.  For something
to apply to the specification, there needs to be a solid rule that can be followed
without fail.  In this case, the second exception comes into play:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(b) if the list item is ordered, the start number must be 1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While it is not perfect, this exception allows the specification to handle the above
cases in a way that it has a solid rule to follow, and hence predictable results. No
guesswork or “sentence context” involved.  I believe that &lt;code&gt;@jgm&lt;/code&gt; from the discussion
board put it best:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If we were inventing a light markup language from scratch, I’d want to require a blank line before a list or sublist (see Beyond Markdown), for this and many other reasons.&lt;/p&gt;
&lt;p&gt;But we’re not, so we need to find a compromise that works.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And that indeed is a viable solution for starting sublists with any number as the
list’s start number.  Therefore, if you the previous example with a non-one sublist
start of &lt;code&gt;2.&lt;/code&gt; to be rendered properly, you need to add a newline:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;

   &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;producing the following HTML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;abc&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt; &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;a&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As &lt;code&gt;@jgm&lt;/code&gt; said, and as I agree with, it is a solid compromise.&lt;/p&gt;
&lt;h3 id="attacking-the-problem"&gt;Attacking the Problem&lt;a class="headerlink" href="#attacking-the-problem" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing that I did was to validate that this issue applied to both Ordered Lists
and Unordered Lists, which was quickly accomplished.  To me, this indicated that I was
going to be making near identical changes to the &lt;code&gt;is_olist_start&lt;/code&gt; function and the
&lt;code&gt;is_ulist_start&lt;/code&gt; function.  As the Order List changes were the most complicated, I
decided to start with those.&lt;/p&gt;
&lt;p&gt;The first part of detecting the condition described above was deciding that the current
line being parsed was already marked for a list start.  This was already being
performed in the function, so it was an easy change to do some extra processing if the
&lt;code&gt;is_start&lt;/code&gt; variable was set.  In that case, to narrow down the things that need to be
checked, the first two changes were to set the &lt;code&gt;is_in_paragraph&lt;/code&gt; variable to indicate
whether a paragraph block was open, and the &lt;code&gt;at_end_of_line&lt;/code&gt; variable to indicate
that there was no more data to process on the line (hence, a blank line).&lt;/p&gt;
&lt;p&gt;With those easy changes out of the way, the variable &lt;code&gt;is_first_item_in_list&lt;/code&gt; needed to
be set to indicate whether or not the proposed Ordered List start sequence actually
indicated a new List item or a brand-new List block.  While lengthy in its description,
the next part of
the algorithm checked, in order, to see if a parent List block contained the Paragraph
element, if it was the same type of List element, if it had the same List character,
and if the start index for the proposed List element was greater than that of a matching
List element already in progress.  If any one of those checks failed, the proposed List
start was stored as &lt;code&gt;True&lt;/code&gt; in the &lt;code&gt;is_first_item_in_list&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;From there, the check was relatively easy.  After an additional change to set the
&lt;code&gt;is_not_one&lt;/code&gt; variable to indicate whether the &lt;code&gt;olist_index_number&lt;/code&gt; variable was not
the string &lt;code&gt;1&lt;/code&gt;, the calculation was easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;is_in_paragraph&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;at_end_of_line&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;is_not_one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;is_first_item_in_list&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;is_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following the exceptions detailed earlier, when a new list start occurs within an
ongoing paragraph (&lt;code&gt;is_first_item_in_list&lt;/code&gt; and &lt;code&gt;is_in_paragraph&lt;/code&gt;), a further check
is done to to see if the List element would begin with a blank line (&lt;code&gt;at_end_of_line&lt;/code&gt;)
or is an Order List start sequence where the start number is not &lt;code&gt;1&lt;/code&gt; (&lt;code&gt;is_not_one&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id="how-well-did-this-work"&gt;How Well Did This Work?&lt;a class="headerlink" href="#how-well-did-this-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The changes documented in the last section were the bulk of the work, and after that
the remaining changes were easy to figure out and work on.  With the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_theme_break&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;is_html_block&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;is_fenced_block&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;is_atx_heading&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;resolving to True in all cases, I removed that line to make things clearer.  While
it makes a mess of any displayed differences, it really is only removing that line and
shifting all text text that was under that &lt;code&gt;if&lt;/code&gt; statement to the left by four spaces.
After running through some tests, there were some failures with the translation to
HTML.  Those failures were all fixed with two lines of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;output_html&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;output_html&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;output_html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that completed, all the scenarios were running except scenario test function
&lt;code&gt;test_list_items_282&lt;/code&gt;.  After working on that for a while, I marked that scenario test
as disabled, to research it and work on it later.  Along the way, I also added two
variations of test function &lt;code&gt;test_list_blocks_263&lt;/code&gt; to test specific cases that I thought
would be a problem, both working without any problems.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing that came to mind is that I did have an answer to my question from
the Introduction section.  It took me five days to resolve those disabled tests.  More
than anything else, that really cemented my feeling that I made the right decision in
committing that block of work I had from the previous week, with tests disabled.&lt;/p&gt;
&lt;p&gt;While I was still a bit tired after my sinus cold from the previous two weeks,
it felt good to get some real solid debugging work done and out of the way.  The
contrast between this one week’s work and the previous two week’s work was just
staggering.  It was a real good feeling to get back up to a speed that I know I
can easily achieve.&lt;/p&gt;
&lt;p&gt;And given that non-cold increase in momentum, along with the recent reduction of
items in the issues list, it was nice to see that the finish line is getting visibly
closer.  While I don’t want to jinx myself by setting a date, and then missing it,
I am guessing that I am going to be ready sometime in early 2021, and that is good with
me. Believe it or not, I am very much looking forward to it!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With some of the hard issues out of the way, I wanted to finish up all the List Block
issues and get started on the Block Quotes issues.  Here is hoping that I would be able
to do that!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 11</title><link href="https://jackdewinter.github.io/2020/12/07/markdown-linter-delving-into-the-issues-11/" rel="alternate"></link><published>2020-12-07T00:00:00-08:00</published><updated>2020-12-07T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-12-07:/2020/12/07/markdown-linter-delving-into-the-issues-11/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/11/30/markdown-linter-delving-into-the-issues-10/"&gt;last article&lt;/a&gt;,
I continued in my quest to reduce the size of the issues list.  In this article, I
split my time between adding to the scenario cases tables and dealing with items from
the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I jokingly referred to this week as the week …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/11/30/markdown-linter-delving-into-the-issues-10/"&gt;last article&lt;/a&gt;,
I continued in my quest to reduce the size of the issues list.  In this article, I
split my time between adding to the scenario cases tables and dealing with items from
the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I jokingly referred to this week as the week from hell.  It was hellish in
nature because of a bad cold that got into my sinuses and would not leave, no matter
what I tried to get rid of it.  As such, I felt that I got approximately half the work
done that I had wanted to.  Therefore, I felt that it was appropriate to talk about the
work done during the two-week period that I had the sinus cold instead of just my usual
one week period.  Even though my brain was fogging with the sinus cold for a good
solid two weeks, I was able to get some good work done, even if it was not at the
pace that I am used to having.&lt;/p&gt;
&lt;p&gt;The big focus at this point in the project was on reducing the number of items on the
issues list that dealt with List elements.  Having taken a significant amount of time
working on
the leaf block elements and getting those items resolved, I was hoping to get a good
chunk of the list issues dealt with.  But I also knew that the impending American
Thanksgiving holiday and a nasty sinus cold were going to slow me down.  It was just
a matter of being honest with myself about what I could accomplish during this period.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/57ba5d7777602b3d67cbea901cc289db539cf0d2"&gt;17 Nov 2020&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/307bbc4ebf6b6f764a88731a1739a2ec895f5fbf"&gt;29 Nov 2020&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="indented-code-blocks-and-list-blocks"&gt;Indented Code Blocks and List Blocks&lt;a class="headerlink" href="#indented-code-blocks-and-list-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Up to that point, I had a good variety of cases for each leaf block type in Markdown
save for one: Indented Code Blocks.  Hence, I had logged this issue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;tests&lt;/span&gt;, &lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;computing&lt;/span&gt; &lt;span class="nv"&gt;indent&lt;/span&gt; &lt;span class="nv"&gt;properly&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;empty&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;indented&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I gave a good solid first try at getting them working, but in my mind, Indented Code
Blocks were different enough that they posed additional difficulty.  As such, I left
them for last.  The example that gave me the trouble was an additional test that I
added, function &lt;code&gt;test_list_blocks_256i&lt;/code&gt; or function &lt;code&gt;test_list_blocks_256ix&lt;/code&gt; as I
renamed it.  The Markdown for the example was simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the list start indented to the maximum with three leading spaces, the indentation
of the text &lt;code&gt;foo&lt;/code&gt; should have been enough to make it eligible for an Indented Code Block
with four leading spaces.   Instead, it was just getting captured as part of the text
for the List Item element.&lt;/p&gt;
&lt;h3 id="working-through-it"&gt;Working Through It&lt;a class="headerlink" href="#working-through-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Granted, my cold was raging in my head, and I was not thinking clearly, but eventually I
looked at the tokens long enough and something stuck out at me.   The start List Block
token for line 1 was &lt;code&gt;[olist(1,3):.:1:3:  :   ]&lt;/code&gt; which did not look weird to me at
first.  Looking at the end of the token, where I usually look, everything was fine.
There were three leading spaces before the start List element, and there were three
spaces registered for that token.  Exactly as it should be!  And it was an start
Ordered List token with a single digit start number, so the &lt;code&gt;indent_level&lt;/code&gt; for that
list should be 3: 1 for the single digit, 1 for the list character &lt;code&gt;.&lt;/code&gt;, and one for the
whitespace after it.  Check!  &lt;/p&gt;
&lt;p&gt;Then it dawned on me.  While the three leading spaces were appearing in the token
itself, they were not being accounted for in the &lt;code&gt;indent_level&lt;/code&gt;.  As such, when the
parser got to the second line, the &lt;code&gt;indent_level&lt;/code&gt; was set to &lt;code&gt;3&lt;/code&gt;, and it looked like the
that line was only indented by one character, not enough to start an Indented Code
Block.  After making some changes to pass through the &lt;code&gt;extracted_whitespace&lt;/code&gt; variable
from the first line, the &lt;code&gt;indent_level&lt;/code&gt; was adjusted by the length of the
&lt;code&gt;extracted_whitespace&lt;/code&gt; variable, resulting in an &lt;code&gt;indent_level&lt;/code&gt; of 6.  As the four
leading spaces on the second line was less than that value, it was properly interpreted
as an Indented Code Block element.&lt;/p&gt;
&lt;p&gt;After adding some additional variations to test and make sure that the change was the
right change, I was happy to resolve this issue, and get some rest.&lt;/p&gt;
&lt;h2 id="the-birth-of-series-m"&gt;The Birth of Series M&lt;a class="headerlink" href="#the-birth-of-series-m" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having documented this process before for the other series, I will not take the time to
go through all the steps performed to move these scenario tests over.  I will point out
that for me, with a sinus cold that was not letting up, it was the perfect thing for me
to work on.  It was a lot of moving tests over two days, but it was slow, and it was
methodical.  More importantly, it had built in error checking.  A good thing to have
when you are not 100% sure of how clearly you are thinking.&lt;/p&gt;
&lt;p&gt;As this series was genuinely moving scenario tests over from their origin module
&lt;code&gt;test_markdown_list_blocks.py&lt;/code&gt;, I did not expect any issues and there were none.  Due
to some clarity in thinking when setting up this work, any errors that I did make during
that process were caught and recovered from right away.  Other than that, the entire
process was a blur.&lt;/p&gt;
&lt;h2 id="weird-list-contents"&gt;“Weird” List Contents&lt;a class="headerlink" href="#weird-list-contents" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mostly due to the sinus cold, which was finally starting to ease up, it took me another
couple of days to get the next issue resolved.  Mentally, I realized that I could either
push myself hard and perhaps prolong the cold, or I could take more breaks and have that
energy go towards resolving the cold.  Whether it was the positive thinking or the
natural course of the cold, I will never be sure which one helped more.  But by noon on
Saturday, I was starting to feel better, and I started to tackle these issues:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="n"&gt;inside&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;multi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;inside&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first issue was easy.  I started with something simple, adding the function
&lt;code&gt;test_list_blocks_extra_2a&lt;/code&gt; to test split paragraphs with the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;ghi&lt;/span&gt;
&lt;span class="n"&gt;jkl&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, I made a small modification to test for Code Spans by using the following
Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="ss"&gt;`one`&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="ss"&gt;``&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="ss"&gt;``&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="ss"&gt;`two`&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="ss"&gt;``&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="ss"&gt;``&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the Code Spans dealt with, I moved on to links, using Inline Link elements and
splitting them between two lines are various points in the link itself.  While not
that interesting, it was a good solid scenario that I wanted to make sure was working:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;
&lt;span class="s"&gt;"out"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;really&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;
&lt;span class="s"&gt;"out"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tracking-down-the-issues"&gt;Tracking Down the Issues&lt;a class="headerlink" href="#tracking-down-the-issues" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After coding those new tests, I started executing the tests and everything within the
changing parts of the lists looked fine.  However, on the third line of each example,
when the next item of the base list was defined, some of the tests emitted their text
surrounded by a Paragraph tag.  As this relates to
&lt;a href="https://github.github.com/gfm/#loose"&gt;whether a List is considered loose&lt;/a&gt;,
I took some time to poke around and debug through it.&lt;/p&gt;
&lt;p&gt;Looking at the debug, I realized that I had some issues with the function
&lt;code&gt;__reset_list_looseness&lt;/code&gt; in the &lt;code&gt;transform_to_gfm.py&lt;/code&gt; module.  In trying to be smart
about locating the end of the relevant tokens belonging to a given list, I was going
forward from the start List token looking for the matching end List token.  The problem
was that I was not being selective about which end List token I found, just that I found
a token.&lt;/p&gt;
&lt;p&gt;A short while later, I had some changes coded up that kept track of the &lt;code&gt;stack_count&lt;/code&gt;
associated with the start List tokens and end List tokens that were seen.  The start
List tokens bumped the count by one and the end List tokens reduced the count by one.
If the &lt;code&gt;stack_count&lt;/code&gt; variable was ever zero, it meant that the algorithm had found
the matching end List token, and it broke out of the loop.&lt;/p&gt;
&lt;p&gt;After I finished executing the tests and verifying the results, it was clear to me that
I had found and remedied the issue.  While it was not a big issue to fix, it
was a sneaky one to find, and I was happy to resolve it.&lt;/p&gt;
&lt;h2 id="sometimes-it-is-not-obvious"&gt;Sometimes It Is Not Obvious&lt;a class="headerlink" href="#sometimes-it-is-not-obvious" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Feeling good from my success and solving the last issue, and with the sinus cold
allowing, I started to work on another issue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;242&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;variations&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I remembered adding this item to the issues list, I could not remember anything
around the reason that made me add this to the list.  As I was not aware of the
reasoning
behind the inclusion of this item into the list, and I could not figure out from the
item, I decided to make copies of function &lt;code&gt;test_list_blocks_242&lt;/code&gt; and experiment with
the positioning and number of blank lines within the document.  What I found was
interesting.&lt;/p&gt;
&lt;p&gt;It was a time where I was very happy that I had taken the time to add consistency
checks, as they caught this problem right away, where the output HTML comparison tests
did not.  The problem?  In cases where the &lt;code&gt;__remove_top_element_from_stack&lt;/code&gt; function
in the blank line handling of the &lt;code&gt;tokenized_markdown.py&lt;/code&gt; module were removing
blank lines to be added to the document, it was doing so in reverse order.  That reverse
order meant that in cases with multiple blank lines, the latest blank line would be
added first, messing up the ordering in the document.  &lt;/p&gt;
&lt;p&gt;Once again, a quick fix, and with a couple of iterations of testing to make sure other
functions were not impacted by that side effect (and mitigating those), things were
taken care of.  Another issue solved and resolved.&lt;/p&gt;
&lt;h2 id="variation-on-example-297"&gt;Variation on Example 297&lt;a class="headerlink" href="#variation-on-example-297" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I had some energy left from fighting my cold, and some time left before the American
Thanksgiving holiday started, so I figured I could work on something light.  Hopefully
picking something easy, I picked this task off the list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;296&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;297&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;added&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;case&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;LRD&lt;/span&gt;, &lt;span class="nv"&gt;but&lt;/span&gt; &lt;span class="nv"&gt;need&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;test&lt;/span&gt;:
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;other&lt;/span&gt; &lt;span class="nv"&gt;types&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;blocks&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;block&lt;/span&gt;, &lt;span class="nv"&gt;blank&lt;/span&gt;, &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nv"&gt;multiple&lt;/span&gt; &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After a quick look at the Markdown for
&lt;a href="https://github.github.com/gfm/#example-297"&gt;example 297&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had a good feeling that I would be able to deal with this issue in a couple of hours
or less. To deal with this issue properly, I quickly created variations on function
&lt;code&gt;test_list_items_297&lt;/code&gt; to
test those different scenarios.  Instead of a Link Reference Definition in each
variation, I used an Atx Heading element, a SetExt Heading element, a HTML Block
element, an Indented Code Block element, and a Fenced Code Block element.  Just for
good measure, I added an extra scenario test that had a Fenced Code Block element
followed by a HTML Block element.&lt;/p&gt;
&lt;p&gt;After adding those scenario test and executing them, I was greeted by
the good news which was that the tokens and the output HTML matched what was expected
of each test.  The only issue was in the Markdown generator where the original Markdown
was being reconstructed from the tokens.  After a quick bit of debugging was done
around the processing of the Html Block token, a small change was needed in the function
&lt;code&gt;__merge_with_container_data&lt;/code&gt; to allow the &lt;code&gt;remove_trailing_newline&lt;/code&gt; variable to be set
if the block ends with a newline character.  With those small changes in place, the
newly added scenarios worked fine, generating the correct Markdown to match the
original Markdown.&lt;/p&gt;
&lt;h2 id="fun-with-list-elements"&gt;Fun with List Elements&lt;a class="headerlink" href="#fun-with-list-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I do not have any notes on why I picked this task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_link_reference_definitions_185f&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;test_link_reference_definitions_183f&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but it was a fairly interesting task to pick.  Previously, I had disabled both
tests as I was not able to get them working previously.  And it was not
much, but I somewhat remembered working on both these items for at least a couple
of hours each, and not making much progress.  As I said, this was going to be
interesting.&lt;/p&gt;
&lt;p&gt;The good news was that, after a small amount of debugging, I was convinced that I
was looking at two separate issues.   While I did not have any concrete information,
I had a strong feeling that the &lt;code&gt;test_link_reference_definitions_183f&lt;/code&gt; function
failures were due to the Block Quote element in the Markdown, while the
&lt;code&gt;test_link_reference_definitions_185f&lt;/code&gt; function was simply an issue of getting
the Markdown generator adjusted properly.&lt;/p&gt;
&lt;h3 id="debugging-the-issues"&gt;Debugging the Issues&lt;a class="headerlink" href="#debugging-the-issues" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Picking what I thought was the easy issue to solve, I decided to start working on
the problem with the handling of the Block Quote element.  This happened to be a good
choice as some simple debugging showed me that the issue was a simple one of
not closing off an active List before starting off the Block Quote element.  I
quickly fixed that by adding a simple loop in the &lt;code&gt;__ensure_stack_at_level&lt;/code&gt; function of
the &lt;code&gt;BlockQuoteProcessor&lt;/code&gt; class to ensure that occurs before the Block Quote itself
is started.&lt;/p&gt;
&lt;p&gt;With that part of the issue fixed, my focus shifted to dealing with ensuring that
the Markdown was being properly generated.  After a couple of hours of debugging,
I finally figured out that the failures were being caused when the already transformed
data ends with a newline character, and the next token to transform is either a normal
text token, or one of the &lt;code&gt;SpecialTextToken&lt;/code&gt; related tokens:  Links, Images, and
Emphasis tokens.  In each case, these tokens somehow interrupted the accumulated text,
leaving it ending with a newline character.  To properly add any more text to that
accumulated text, the new data to be added needs to be processed differently to
accommodate that break.&lt;/p&gt;
&lt;p&gt;Like one of the previous sections, the first issue was relatively quick to fix,
while the second issue took hours.  Working through the debugging with a sinus cold
was a bit of a slog, but it was a good issue to take off the list.&lt;/p&gt;
&lt;h2 id="bulking-up-the-series-m-tests"&gt;Bulking Up the Series M Tests&lt;a class="headerlink" href="#bulking-up-the-series-m-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was Saturday afternoon and I had finished doing some work around my house.  While
I was a bit fatigued, I felt that the
sinus cold was letting up enough that I could spend some weekend time making some
progress on getting more depth to the Series M scenarios.  To do that, I basically
started by placing each of the tests in Series M of the scenario tests into their own
tables.  Having over 45 tests at that point, that separation was equal parts necessity
for my sanity to keep each table separate and readability for anyone looking at them.&lt;/p&gt;
&lt;p&gt;Adding 60 scenario tests to the series, I added 10 scenario tests in each of the six
groups within the series.  While there were small variations to each group of tests,
the underlying tests were essentially the same 10 tests added each time.  And just
as I have mentioned before, the process was a long one: adding the rough form of
the specific test to the table, adding a scenario test to match that rough form,
and then dialing in the example, the token list, and cleaning up the final form of the
entry in the table.  And as usually, it was a long, grueling process.&lt;/p&gt;
&lt;h3 id="powering-through-the-scenarios"&gt;Powering Through the Scenarios&lt;a class="headerlink" href="#powering-through-the-scenarios" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The bad news was that I did not get everything done.  After working hard to
get all tests passing, there were 35 tests that for one reason or another were not
passing.  Between the scope of the changes and the last vestiges of my sinus cold,
I did not think twice of marking those failed tests with &lt;code&gt;@pytest.mark.skip&lt;/code&gt;, to be
handled in the following week.  I had a feeling that this task was more than I
could handle in the time allotted with the energy I had, and I was right. Regardless,
I had 25 new scenario tests passing where I did not have them before.&lt;/p&gt;
&lt;p&gt;The good news was that in those 25 new scenario tests, I only found two issues that
I needed to fix and was able to fix.  The most obvious one was in the case of two
empty start List elements, nested together on the same line.  Following through the
code and the log files for that scenario test, it was immediately obvious to me that
assigning the first element of the result from the function
&lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; to &lt;code&gt;_&lt;/code&gt; (in essence, throwing it away), was the
wrong thing to do.   Assigning that first element to the &lt;code&gt;produced_inner_tokens&lt;/code&gt;
variable and adding the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;produced_inner_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fixed that problem. One down, one to go.&lt;/p&gt;
&lt;h3 id="digging-deep-into-the-issue"&gt;Digging Deep into The Issue&lt;a class="headerlink" href="#digging-deep-into-the-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The other issue that I found was in dealing with empty
list starts in the &lt;code&gt;__pre_list&lt;/code&gt; function.  In one of the first iterations of this
function, I added code in the &lt;code&gt;True&lt;/code&gt; evaluation of
&lt;code&gt;if after_marker_ws_index == len(line_to_parse):&lt;/code&gt; to handle those empty list items.
After a lot of work to come up with the correct formula, I had settled on the code
in that function, part of it for empty list items, and the other part of it for the
non-empty list items.  And that worked well.&lt;/p&gt;
&lt;p&gt;That is until I started looking at it considering the new examples added during these
tasks.  Looking at why scenario tests with empty list items were failing, I kept on
looking at this &lt;code&gt;__pre_list&lt;/code&gt; function.  And with each debugging session that I came
back to that function, the surer I was that I missed something pivotal.  And that
feeling was getting stronger each time.&lt;/p&gt;
&lt;p&gt;Given that feeling, I spent a couple of hours taking that &lt;code&gt;if&lt;/code&gt; statement apart and
putting it back together.  Ultimately, I left the &lt;code&gt;True&lt;/code&gt; case of the &lt;code&gt;if&lt;/code&gt; statement
as it was, but I changed the condition to
&lt;code&gt;after_marker_ws_index == len(line_to_parse) and ws_after_marker&lt;/code&gt;.  As for the cases
where &lt;code&gt;ws_after_marker&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, I added the following code to the &lt;code&gt;False&lt;/code&gt; case to
handle that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;after_marker_ws_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ws_after_marker&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ws_after_marker&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After my experimentation, it just seemed like the right thing to do.  I did find other
solutions that were way more complicated than this one, but those solutions were a lot
more convoluted.  This one was simple.  Instead of doing a complicated calculation and
having lots of &lt;code&gt;if&lt;/code&gt; statements, this just added a slight adjustment to the variable
&lt;code&gt;ws_after_marker&lt;/code&gt;, after which the rest of the &lt;code&gt;False&lt;/code&gt; part of the &lt;code&gt;if&lt;/code&gt; statement was
executed without change.&lt;/p&gt;
&lt;p&gt;While the first solution with the tokens took less than a half an hour to code and
test, when all was said and done, more than five hours had been spent on the task.
But even though it took a while, I was pleased with the result, and I am confident
that the time was well spent in upgrading those solutions.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the beginning of this project, having those 35 scenario tests marked as skipped
would have hung heavily over me.  But at this stage of the project, I recognized that
it was a necessary tool at my disposal.  Instead of waiting until all 60 new scenario
tests were working 100%, it was better to chip away at those tests, committing those
changes to the repository as I went.  Having worked on this project for almost a
year at this point, I knew there were going to be things that ended up running away
from me.  I also knew that while I try and break bigger issues into smaller issues,
there are times that is not possible, for one reason or another.  In this case, I
was concerned that if I did not add all 60 scenarios at once, I would miss one and
it would be hard to detect.  It just meant I would have to adjust.&lt;/p&gt;
&lt;p&gt;And for me, both in my professional life and with this project, is the big takeaway
that I have learned in the last couple of years.  It is extremely important to
set expectations at a healthy level that can be sustained.  Too little, and you can
be viewed as taking it easy.  Too much, and you may be expected to sustain that level
of output for months or years.  I have found great success in clearly stating my
goals and how I plan to achieve them, and resetting expectations on a weekly or
daily basis.  It just makes sense to me.  Well, it does now.  That was not always the
case.&lt;/p&gt;
&lt;p&gt;From my point of view, I could not see a clear way to break up that big issue without
sacrificing the quality in the Series M group changes.  So, I reset my own expectations
for resolving that issue, promising myself that I would address each of those skipped
tests in the next week.  And I was at peace with my decision to do that.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Leaving 35 scenario tests marked as skipped because I could not figure them out
did not sit well with me, so I made them the priority for the following week.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 10</title><link href="https://jackdewinter.github.io/2020/11/30/markdown-linter-delving-into-the-issues-10/" rel="alternate"></link><published>2020-11-30T00:00:00-08:00</published><updated>2020-11-30T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-11-30:/2020/11/30/markdown-linter-delving-into-the-issues-10/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/11/23/markdown-linter-delving-into-the-issues-9/"&gt;last article&lt;/a&gt;,
I continued in my quest to reduce the size of the issues list.  In this article, I
split my time between adding to the scenario cases tables and dealing with items from
the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a specific focus on getting list issues resolved …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/11/23/markdown-linter-delving-into-the-issues-9/"&gt;last article&lt;/a&gt;,
I continued in my quest to reduce the size of the issues list.  In this article, I
split my time between adding to the scenario cases tables and dealing with items from
the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a specific focus on getting list issues resolved this week, I was hoping to
make some decent headway with the issues list.  From my reading of the list at the
start of the week, there were a fair number of List element related issues, Block Quote
element related issues, and cross-over issues between the two.  It just made sense to
me to pick one and focus on it.  And I picked List elements related issues.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/4335e2dea51cafd20b96c54832e2cfc50abd1f01"&gt;11 Nov 2020&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/09fe53af190cf566d6476aa4a382f87e92b5cc76"&gt;15 Nov 2020&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="starting-off-with-an-easy-task"&gt;Starting Off with An Easy Task&lt;a class="headerlink" href="#starting-off-with-an-easy-task" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While not a big task, the task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;292&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ordered&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was a nice easy one to start with.  This task was simply to take the functions
&lt;code&gt;test_list_items_292a&lt;/code&gt; to &lt;code&gt;test_list_items_292c&lt;/code&gt;, copy them to &lt;code&gt;test_list_items_292d&lt;/code&gt;
to &lt;code&gt;test_list_items_292e&lt;/code&gt;, changing them from an Unordered List elements to Ordered
List elements.  Nothing more, nothing less.&lt;/p&gt;
&lt;p&gt;And this was very simple, and similarly, the tests passed without any issues.  A
simple, but a good, solid start.&lt;/p&gt;
&lt;h2 id="double-checking"&gt;Double Checking&lt;a class="headerlink" href="#double-checking" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For these tasks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;269&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;305&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;variations&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;whitespace&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;correct&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;weird&lt;/span&gt; &lt;span class="n"&gt;cases&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_in_process&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;nothing was changed, but some research was done.&lt;/p&gt;
&lt;p&gt;To start, I went to those
two scenario tests and their variations and looked at the whitespace in the
tests.  While it took me a second to remember why the whitespace looks that way in
the list tokens, there
was nothing wrong with the way it was being stored there.  However, it did take
me a second or two to remember that a paragraph within a list stores part of its leading
whitespace in the List token and the remaining leading whitespace in the paragraph
token.  Maybe that is what caused me to add the item to the issues list?&lt;/p&gt;
&lt;p&gt;I then looked at the code for the &lt;code&gt;list_in_process&lt;/code&gt; function with a similar
exploratory effort, but nothing seemed out
of place.  I even enabled debug for a few of the &lt;code&gt;test_list_items_292&lt;/code&gt; functions,
tracing through the code to look for any issues.  While I did not find anything wrong,
I was happy to take a second look at these areas to put any perceived issues that I
might have had to rest.&lt;/p&gt;
&lt;h2 id="ordered-list-blocks-and-start-numbers"&gt;Ordered List Blocks and Start Numbers&lt;a class="headerlink" href="#ordered-list-blocks-and-start-numbers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once again, I found a small task to get out of the way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;CommonMark&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;how&lt;/span&gt; &lt;span class="nv"&gt;handles&lt;/span&gt; &lt;span class="nv"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;initial&lt;/span&gt; &lt;span class="nv"&gt;cases&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;starts&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To examine this issue, I created two new functions, &lt;code&gt;test_list_blocks_extra_1&lt;/code&gt; and
&lt;code&gt;test_list_blocks_extra_2&lt;/code&gt;.  In the first of these functions, I added a couple of lists
with sub-lists, all starting with the the integer &lt;code&gt;1&lt;/code&gt;.  In the second of these
functions, I changed one of the sub-lists to start with the integer &lt;code&gt;2&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;Checking the PyMarkdown parser HTML output against the BabelMark, everything was fine
for the first function, but there was a slight difference for the second function.
Instead of acknowledging the &lt;code&gt;2.&lt;/code&gt; signifying the start of a sub-list, that &lt;code&gt;2.&lt;/code&gt; text
was combined with the paragraph element from the previous line.  That was curious.&lt;/p&gt;
&lt;p&gt;After combing through the specification for about an hour, I posted a question to
the
&lt;a href="https://talk.commonmark.org/"&gt;CommonMark Discussion Boards&lt;/a&gt;, and waited for a response.
More on that in a later article.&lt;/p&gt;
&lt;h2 id="variations-on-existing-lists"&gt;Variations on Existing Lists&lt;a class="headerlink" href="#variations-on-existing-lists" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Graduating from the simpler tasks, I decided to tackle a task that had a bit more
substance to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;276&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;olist&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ulist&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;olist&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ulist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Starting with the scenario test for
&lt;a href="https://github.github.com/gfm/#example-276"&gt;example 276&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I started generating variations based along different themes. For each of
the main variations, I simply ran through a simple list of combinations of the Ordered
List element and the Unordered List element: Unordered/Ordered, Ordered/Unordered,
Ordered/Ordered, and Unordered/Unordered.  After those combinations were taken care of,
the &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; variations of those variations were created by adding an Unordered List
element (for &lt;code&gt;a&lt;/code&gt;) or an Ordered List element (for &lt;code&gt;b&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;While I expected something to happen, it was nice to be proven wrong.  The tests all
passed without any issues.  The reason for my initial doubt on this issue?  I have
had problems with “empty” lists before.  While I do not use them myself, the Markdown
specification allows for a List element that only contains a start List Element text
sequence, say &lt;code&gt;1.&lt;/code&gt;, with no other text on that line.  And from my knowledge of the
GFM Specification, empty list items are covered, but not as completely as the list
item starts followed by text.  Based on that background, it was good to see that so
far, those empty list items were not going to be an issue.&lt;/p&gt;
&lt;h2 id="variations-on-a-theme"&gt;Variations on A Theme&lt;a class="headerlink" href="#variations-on-a-theme" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On a bit of a roll with some easy wins in the completed task column, I decided to
do a couple of tasks together as a single task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;extra&lt;/span&gt; &lt;span class="nv"&gt;spaces&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;blanks&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;other&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;types&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;last&lt;/span&gt; &lt;span class="nv"&gt;instead&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;just&lt;/span&gt; &lt;span class="nv"&gt;li&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on previous tasks, it seemed like a good idea to come up with variations to
deal with these tasks.  To do this, I started with the example for
&lt;a href="https://github.github.com/gfm/#example-256"&gt;example 256&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;
  &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;
  &lt;span class="o"&gt;```&lt;/span&gt;
  &lt;span class="n"&gt;bar&lt;/span&gt;
  &lt;span class="o"&gt;```&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;
      &lt;span class="n"&gt;baz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the first two variations on &lt;code&gt;test_list_blocks_256&lt;/code&gt;, I modified the example Markdown
to include extra trailing whitespace as part of the empty list items.  From there,
I added a variation which replaced the unordered list item elements with ordered list
item elements.  In addition, I further modified that variation by adding extra blank
lines and by reducing the indent on the Fenced Code Block element from 3 to 2, making
it ineligible for inclusion into the list. Basically, I looked at Example 256
and experimented with what I thought would be good variations to test.&lt;/p&gt;
&lt;p&gt;While a lot of those variations did not result in the discovery of any expected issues,
there was one interesting new issue.  In cases where there is a blank line inside
of a list, there was a weird ordering where the processing of the blank line and the
processing of the blank line to close the list were in the wrong order.  As such,
a small fix was required to make sure that the information is available to make a
proper decision on how to handle that blank line with the correct data.&lt;/p&gt;
&lt;p&gt;That one took a bit of effort to figure out, but it was a good warm up for what I knew
was going to be a bear of a task to follow.&lt;/p&gt;
&lt;h2 id="this-weeks-big-issue"&gt;This Week’s Big Issue&lt;a class="headerlink" href="#this-weeks-big-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While there was not an explicit entry in the issues list for this issue, it was an
issue that I had long been concerned about.  As the commit message stated, that issue
was to “add better support for lists that are aborted due to missing leading space in
front of a new block”.  I knew I was opening a can of worms by exploring this issue,
but for me to have confidence in the project, I felt that I needed to explore this, and
explore it now.&lt;/p&gt;
&lt;h3 id="aborted-due-to-missing-leading-space"&gt;Aborted Due to Missing Leading Space?&lt;a class="headerlink" href="#aborted-due-to-missing-leading-space" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Basically, in its simplest form, this issue breaks down into the following scenario:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c1"&gt;---&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this scenario, the Markdown specifies a simple List element that is created without
any content on that line, an empty list item.  In starting to parse the second line,
the parser must first determine if that newly parsed text will be part of that list or
not.  To ensure that text is added to that List element, the text on the next line must
be indented 3 spaces, matching the indent level
of that List element.  Therefore, when the Thematic Break element on that next line
fails to maintain that level of indentation, the original list is then aborted, and the
Thematic Break element is processed after the list has been closed.&lt;/p&gt;
&lt;p&gt;This reading of the specification is backed by the HTML output generated by
&lt;a href="https://johnmacfarlane.net/babelmark2/"&gt;BabelMark&lt;/a&gt;
for this scenario:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="what-is-the-issue-then"&gt;What Is the Issue Then?&lt;a class="headerlink" href="#what-is-the-issue-then" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I had a specific answer to a specific question regarding how the List element
and the Thematic Break element interacted, I wanted a more generic answer that I
could work with.  As usual, I opened up the
&lt;a href="https://github.github.com/gfm"&gt;GFM Specification&lt;/a&gt;
in my browser and started looking for that generic answer.  Unfortunately, I
did not get an answer that I was satisfied with.&lt;/p&gt;
&lt;p&gt;The first thing that I looked for
was some variation on the previous example, of which I kind of found a related test
with &lt;a href="https://github.github.com/gfm/#example-27"&gt;example 27&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="o"&gt;***&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While it was not exactly what I was looking for, it was something.  When I went to look
for a similar example including an Atx Heading element, I did not find any comparable
example.&lt;/p&gt;
&lt;p&gt;To be clear, I do not believe this is the fault of the GFM Specification. To
be honest, I think the specification has done a great job and specifying the main cases
that people are going to encounter.  But there is always room for improvement, and I am
hoping to contribute to that improvement with the PyMarkdown project’s testing suite.
That is part of the process, and how the specification gets better.&lt;/p&gt;
&lt;p&gt;With that newfound information in mind, I was left with a slightly modified issue.
As I did not have a good set of examples detailing how lists and other leaf blocks
interacted, I therefore did not have a good comprehensive
scenario test suite that I had confidence in.  I was confident that the GFM
Specification was getting me a good 90% of the way there, but I wanted more than that
90%.  Therefore, the newly modified issue that I needed to solve was that I needed to
specifically add more specific tests in this area.&lt;/p&gt;
&lt;h3 id="getting-a-good-view-on-the-issue"&gt;Getting A Good View on The Issue&lt;a class="headerlink" href="#getting-a-good-view-on-the-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing I did to address this issue was to stop and think clearly about what
needed to be done.  From the last bit of work, I knew that the scenario functions
&lt;code&gt;test_list_blocks_256*&lt;/code&gt; were a good start, so I decided to add functions with similar
names more from that point.&lt;/p&gt;
&lt;p&gt;Starting with the example I outlined the function &lt;code&gt;test_list_blocks_256f&lt;/code&gt; with the
following markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c1"&gt;---&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I added a variation on that, making test function &lt;code&gt;test_list_blocks_256fa&lt;/code&gt; be the
same thing, just with text after the List Item element.  Once that was done, I basically
copied those scenario tests, replacing the Thematic Break element with an Atx Heading
element, a SetExt Heading element, an Ordered Code Block element, a Fenced Code Block
element, and an HTML Block element.  With scenario test titles going from &lt;code&gt;256f&lt;/code&gt; to
&lt;code&gt;256k&lt;/code&gt;, I went back and used BabelMark to replace the output HTML in each of the
scenario tests.&lt;/p&gt;
&lt;p&gt;Running the newly created scenario tests, I discovered a solid number of issues that
needed to be looked at.  I knew at this point that there was not going to be an easy
solution here.  I rolled up my sleeves and got to work.&lt;/p&gt;
&lt;h3 id="html-blocks"&gt;HTML blocks&lt;a class="headerlink" href="#html-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Picking one of the elements to start with, that night I decided to start working with
the HTML Block element and regretted it within hours.  Looking at the failures
from those tests, it was obvious that there was more than one problem with these tests.
The most immediate problem was that the tokens produced by the parser just looked
wrong.&lt;/p&gt;
&lt;p&gt;Taking the time to look at the problem in depth, I quickly discovered that the
HTML Block element was not causing the list to close like it should.  As that was
a major issue to find, everything else after that token was affected in some way.
To address this issue, I created the &lt;code&gt;correct_for_leaf_block_start_in_list&lt;/code&gt; function
to allow the parser to clean up in situations like this.  More specifically, it was
for cases where a paragraph had just been closed while in an active list.  In those
cases, the parser thought the lists had been closed, but the proper tokens were not
being emitted.&lt;/p&gt;
&lt;p&gt;But even with those observations in place, there still was something about the tokens
that looked “off”.  However, I know that there was currently too much noise in the
way for me to see that other issue clearly, so I just decided to get it out of the
way first.&lt;/p&gt;
&lt;h3 id="cleaning-up-html-blocks-in-lists"&gt;Cleaning Up HTML Blocks in Lists&lt;a class="headerlink" href="#cleaning-up-html-blocks-in-lists" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To take care of those concerns, I experimented with eight other variations on that list
scenario, including some variations with sub-lists.  While I was mostly pleased with the
results, there were three tests that were failing due to issues in generating the
correct HTML and rehydrated Markdown text.  After some quick investigation, it became
obvious that there was whitespace missing at the start of the HTML blocks.&lt;/p&gt;
&lt;p&gt;Double checking with the other failing tests, the pattern that emerged was that the
spacing between the end of the previous paragraph and the new HTML block needed to
be altered a bit.  To make sure that information could get from the parser to the
HTML generator, I added a new member variable &lt;code&gt;fill_count&lt;/code&gt; to the HTML Block token,
using the &lt;code&gt;add_fill&lt;/code&gt; function to adjust its value.  Once that was added, I was then
able to make small alterations to the &lt;code&gt;correct_for_leaf_block_start_in_list&lt;/code&gt; function
to adjust that &lt;code&gt;fill_count&lt;/code&gt; member variable with the difference between the number of
whitespace characters removed and the indentation level of the currently active list.&lt;/p&gt;
&lt;p&gt;With that information now present in the token, the HTML generator was easily changed to
add those extra characters between the start of the HTML Block and the processing of
the text within that block.  With those changes generating HTML properly, the focus
shifted to applying similar changes to the the Markdown generator and the consistency
checks.  While the first part of this issue had taken days to complete and fix, this
part took only half an hour.  At that point, the HTML blocks and all their variations
were working properly.&lt;/p&gt;
&lt;h3 id="moving-on-to-the-other-blocks"&gt;Moving on To The Other Blocks&lt;a class="headerlink" href="#moving-on-to-the-other-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After fixing the HTML Block elements, I took a closer look at the other failing tests
and started to notice similar problems.  While the &lt;code&gt;fill_count&lt;/code&gt; solution was only useful
for the HTML blocks, the &lt;code&gt;correct_for_leaf_block_start_in_list&lt;/code&gt; function was useful
in fixing issues with the handling of Fenced Code Block elements and Atx Heading
elements.  In both of those instances, the new element was supposed to abort the
previous list but was not doing so.  The &lt;code&gt;correct_for_leaf_block_start_in_list&lt;/code&gt;
function needed a couple of tweaks to make sure it was handling things consistently
across all three scenarios, but they were all easy fixes.&lt;/p&gt;
&lt;p&gt;With the parser generating the tokens properly, the tests were making more progress but
still failed on the output HTML.  While not a big difference, the output HTML was
missing a newline between the end of the previous list and new Fenced Code Block
elements,
Atx Heading elements, and SetExt Heading elements.  That difference was quickly
eliminated by adding two small lines of code to the handle of those elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;output_html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/ol&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;output_html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/ul&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;output_html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After crossing my fingers for good luck, and fixing a couple of typing mistakes,
the new tests passed without much fanfare.  It was just a relief.  I knew it would
take a while, but I did not think it would take three days to complete the
implementation and verification of these new scenario tests.&lt;/p&gt;
&lt;h3 id="it-was-a-slog"&gt;It Was A Slog…&lt;a class="headerlink" href="#it-was-a-slog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over that three days, I was able to get 18 new scenario tests coded and passing
properly.  To be honest, I was doubtful at certain points that I would get done, as
progress was hard to come by.  While I cannot remember how “on my game” I felt during
that time, I do remember that I felt burdened by the knowledge that this work was
only the starting point, and I would have to repeat it multiple times in the future.&lt;/p&gt;
&lt;p&gt;And to that end, I had my next task already lined up.&lt;/p&gt;
&lt;h2 id="lather-rinse-repeat"&gt;Lather, Rinse, Repeat&lt;a class="headerlink" href="#lather-rinse-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it was a tough couple of days getting through that block of work, I felt that it
was a good task to complete, but that it was not yet 100% complete.  With some extra
time left in the evening, I decided to take a shot at replicating the width of tests
that I added for HTML Block elements to the other Leaf Block elements as well.&lt;/p&gt;
&lt;p&gt;Taking a bit of time to setup (copy, paste, alter, repeat… many times), I was
pleasantly surprised with the low number of failures.  For those tests that did fail,
patterns that I was familiar with from the previous issues with HTML Block elements
began to resurface.  As these issues arose in the Atx Heading elements and the Fenced
Code Block elements, the first set of changes I made were to add a &lt;code&gt;fill_count&lt;/code&gt;
member variable to those token class, similar to how I had added them to the Html Block
token class.  As some of those classes were in a bit more of a “raw” state than the
HTML Block class was, I needed to do a bit of extra work to make sure that I could
adjust the &lt;code&gt;fill_count&lt;/code&gt; variable and have it be persisted.  But it was nothing I had
not done multiple times before, so it was quickly accommodated.&lt;/p&gt;
&lt;p&gt;Other than a couple of small changes, the only big change was to the function
&lt;code&gt;__check_for_list_closures&lt;/code&gt;.  Taking a while to get right, I needed to alter
a few of the functions that feed that function to pass the right parameters
around.  While it was not too difficult, I was hoping that I would find time in
the near future to revisit parts of this code and refactor it to make it cleaner.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting a fair number of items related to lists taken off the issues list was a
good feeling.  While there were a couple of draining issues in the middle, it was
still good to make that progress forward.  While it was a bit disheartening finding
issues in the parser after a spell without any major issues with the parser, it
was par for the course.  Better for me to discover them now, than to have a consumer
discover them later.  But as long as I was finding these issues, I would have to make
sure to examine the existing tests and identify any potential areas where I can
add extra tests to validate that I had found most of the issues with lists.&lt;/p&gt;
&lt;p&gt;At this point, I thought it would be useful for me to reiterate a point from previous
articles.
I am not trying to make this project perfect.  After years of software development and
years of software automation, I know that eliminating all issues is not possible.  It
always boils down to when the next issue is going to happen, not if.  But for me, it is
very important to make my best effort in getting the quality to a point that I feel
comfortable with.&lt;/p&gt;
&lt;p&gt;Following that, while I know there is a bit left to go before releasing this project,
I know that it is getting nearer with each item I resolve from the issues lists.  And
that is the point.  It is getting closer, and I just need to keep my focus on the prize:
that project release.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Continuing with my efforts to get better scenario tests around lists, I knew
that I had to be more structured about that testing.  As that meant creating
a new test series, it forbade that the next week’s work would be moving this
week’s work into a new series and cleaning it up.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 9</title><link href="https://jackdewinter.github.io/2020/11/23/markdown-linter-delving-into-the-issues-9/" rel="alternate"></link><published>2020-11-23T00:00:00-08:00</published><updated>2020-11-23T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-11-23:/2020/11/23/markdown-linter-delving-into-the-issues-9/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/11/16/markdown-linter-delving-into-the-issues-8/"&gt;last article&lt;/a&gt;,
I continued in my quest to reduce the size of the issues list.  In this article, I
split my time between adding to the scenario cases tables and dealing with items from
the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Not much of an introduction here, just my usual …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/11/16/markdown-linter-delving-into-the-issues-8/"&gt;last article&lt;/a&gt;,
I continued in my quest to reduce the size of the issues list.  In this article, I
split my time between adding to the scenario cases tables and dealing with items from
the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Not much of an introduction here, just my usual plodding forward.  Having spent time
in the last couple of weeks working on either the scenario cases tables or resolving
items from the issues list, I tried this week to split my time evenly between those two
tasks.  Without further ado, on to the work!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/3ff576dcdbac37f42e176a0db6dd6b3d1933188e"&gt;03 Nov 2020&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/fe184f8a312033c2998f76b983b83a74a61a96ee"&gt;08 Nov 2020&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="dismissing-an-easy-issue"&gt;Dismissing an Easy Issue&lt;a class="headerlink" href="#dismissing-an-easy-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Initially, looking at  the following item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;553&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I thought I would have some work to do.  However, when I started looking at this
item, it did not take longer than a couple of minutes before I was able to resolve
this issue.&lt;/p&gt;
&lt;p&gt;Along the way, there are times where I have good ideas on things to check, and then
other times where I just have ideas.  While I think I meant well with this item,
it ended up falling into neither of those two buckets.  Taking a look at the Markdown
for
&lt;a href="https://github.github.com/gfm/#example-553"&gt;example 553&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[bar][foo\\!]&lt;/span&gt;

&lt;span class="na"&gt;[foo!]: /url&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I believe I wanted to make sure that I tested other concepts to make sure the lookup
worked properly.  The most obvious of those concepts would usually be inline elements,
so I think it might have made sense from that point of view.  However,
I had missed one little thing.  As function &lt;code&gt;test_reference_links_553&lt;/code&gt; centers around
subtle variations with the link reference, any inline element would be treated as
plain text, without any interpretation.&lt;/p&gt;
&lt;p&gt;Based on that quick research and the fact that I already had tests for inline elements
in the link label, I just resolved it without any changes.  I think while I might have
had something else on my mind when I added that issue to the list, I was unsure of a
good way to honor it in any reasonable form.  It was good to check out though, just
nothing to do to enhance the project with.&lt;/p&gt;
&lt;h2 id="empty-link-labels"&gt;Empty Link Labels&lt;a class="headerlink" href="#empty-link-labels" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Added a long time ago, I spotted two issues that I knew that I could resolve
quickly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="mi"&gt;560&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;full&lt;/span&gt; &lt;span class="n"&gt;reference&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="mi"&gt;560&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Obviously added at a time when I was not as complete in my knowledge of the
GFM Specification as I am now, both items were indicating confusion as to why an
empty link label wasn’t valid.&lt;/p&gt;
&lt;p&gt;With the experience gained since those items were added, it was easy for me to
reference the GFM Specification on
&lt;a href="https://github.github.com/gfm/#link-reference-definitions"&gt;Link Reference Definitions&lt;/a&gt;,
select the
&lt;a href="https://github.github.com/gfm/#link-label"&gt;link label&lt;/a&gt;
reference in the first line of the first paragraph, and extract the following bit
of text from the definition of a link label:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Between these brackets there must be at least one non-whitespace character.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While that one line escaped me early in the development of the project, I was now
familiar enough with it to be able to locate it in 30 seconds or less.  As I
acknowledge it is a boundary case, I can see why the specification writers added that
text in there to deal with that case.  From my point of view, an empty link label is
just an empty string that needs to be parsed.  But I also understand that there is
plenty of precedence to also look on an empty string as having no value.  I am not
sure if that is the way I would have gone with this, but I was happy to follow along
with the specification with this one.&lt;/p&gt;
&lt;h2 id="bolstering-up-the-scenario-cases"&gt;Bolstering Up the Scenario Cases&lt;a class="headerlink" href="#bolstering-up-the-scenario-cases" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The more I used the new &lt;code&gt;scenario-cases.md&lt;/code&gt; document, the more I was enjoying it and
the confidence it brings to the project.  While it is still early in the document’s
life, I am starting to rely on that document at the same level that I rely on the GFM
Specification examples.  Basically,
if a parser can properly handle either one of those groups of tests, it is a good thing.
If it can properly handle both groups of tests, it is a wonderful thing.&lt;/p&gt;
&lt;p&gt;As such, a certain amount of this week was spent beefing up that important document.&lt;/p&gt;
&lt;h3 id="moving-simple-inline-links"&gt;Moving Simple Inline Links&lt;a class="headerlink" href="#moving-simple-inline-links" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the start of this block of work, one of the things that I wanted to do was to move
the non-base &lt;code&gt;test_inline_links_518&lt;/code&gt; functions into the Series F group by moving them
into the &lt;code&gt;test_paragraph_extra_&lt;/code&gt; group.  While this was not a big move, it filled a
hole that I had perceived in the Series F group tests.  And since it was just
moving the tests from one module to the other, the tests were already passing.
That made the duration task seem to fly by.&lt;/p&gt;
&lt;h3 id="adding-links-as-the-last-element-in-the-document"&gt;Adding Links as The Last Element in the Document&lt;a class="headerlink" href="#adding-links-as-the-last-element-in-the-document" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having just moved that small group of tests into the Series F group, I noticed that
all the test cases in that group ended with a Text token, and not a Link element.
As that affects what is checked at the end of a leaf block, I thought it was
prudent to go through the Series F group and add a variation for each case that
tested the base document without any elements after the document.&lt;/p&gt;
&lt;p&gt;That was not a difficult task but was a task that was both tedious and lengthy.  I went
through each of the 16 base tests registered in the Series F group and created a
new variant of that base test.  Once created, I removed any trailing non-link
characters from each test document, double checking that I had not disturbed the Link
element itself.  As usual, I verified the HTML document against
&lt;a href="https://johnmacfarlane.net/babelmark2/"&gt;Babelmark&lt;/a&gt;,
then running the tests to see if there were any issues.&lt;/p&gt;
&lt;p&gt;When I ran the tests, I was greeted with the good news that the parser itself was
working properly and the consistency checks only required minor changes.  Those changes
were in the &lt;code&gt;__handle_last_token_end_link&lt;/code&gt; function, each of them small adjustments to
handle the various parts of the Link token in its various forms, but nothing that
wasn’t immediately resolvable.&lt;/p&gt;
&lt;h3 id="following-up-with-image-elements"&gt;Following Up with Image Elements&lt;a class="headerlink" href="#following-up-with-image-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It should be no surprise that after completing the work documented in the previous two
sections that I decided to follow that work up with ensuring parity for the Image
elements in the Series F group. In total, 29 new scenarios were added to the group,
mirroring the existing Link element tests.&lt;/p&gt;
&lt;p&gt;Due to previous hard work and a bit of luck, there
was only one change required in the &lt;code&gt;__handle_last_token_image&lt;/code&gt; function.  In the
case where the last token is a full Image token, I just needed to add a single line
to properly increase the &lt;code&gt;inline_height&lt;/code&gt; variable by one for each newline in the
&lt;code&gt;text_from_blocks&lt;/code&gt; field of the Image token.  While the verification phase of each
test took a while, the testing phase of these additions went by very successfully and
very quickly.&lt;/p&gt;
&lt;h3 id="moving-scenario-tests-into-their-own-modules"&gt;Moving Scenario Tests into Their Own Modules&lt;a class="headerlink" href="#moving-scenario-tests-into-their-own-modules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over the course of the next three commits, I took on the immense chore of moving and
renaming tests belonging to seven of the identified scenario case groups.  Those seven
groups were Series A to Series E, Series H and Series J.  For each group, I created a
new file, such as &lt;code&gt;test_markdown_paragraph_series_a.py&lt;/code&gt; and moved tests in from their
original modules, renaming them as I went.&lt;/p&gt;
&lt;p&gt;As I renamed those functions, I started to come up with a solution for how to identify
each test uniquely.  What I quickly settled on was to start the test name with
the series that it belonged to, followed by a descriptive name based on the contents
of the test document.  In this way, I could easily tell if I repeated a test within
a given group by looking at the name of the function.&lt;/p&gt;
&lt;p&gt;While this work was primarily copying and renaming scenario tests, it was exhausting.
For each test, I needed to make sure that the name of the function matched the
Markdown document contained within the test.  Then I needed to take that Markdown
document and run in through Babelmark to make sure the HTML output was correct.
Repeated on over 100 scenario tests, it took a lot of time and a lot of patience to
get correct.  But in the end, it was satisfying to be able to see the groups
come together, painting a cohesive picture of a group of passing tests along a given
theme.&lt;/p&gt;
&lt;h2 id="better-tests-for-link-reference-definitions"&gt;Better Tests for Link Reference Definitions&lt;a class="headerlink" href="#better-tests-for-link-reference-definitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Switching back to resolving items from the issues list, the first thing that caught
my eye was an issue dealing with Link Reference Definitions.
Of all the leaf blocks elements that I have had to design and code for this project,
the Link Reference
Definition element was by far the most difficult to get right.  It was no surprise to
me to find the following item in the issues list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;what&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;bad&lt;/span&gt; &lt;span class="nv"&gt;link&lt;/span&gt; &lt;span class="nv"&gt;definition&lt;/span&gt; &lt;span class="nv"&gt;discovered&lt;/span&gt; &lt;span class="nv"&gt;multiple&lt;/span&gt; &lt;span class="nv"&gt;lines&lt;/span&gt; &lt;span class="nv"&gt;down&lt;/span&gt;, &lt;span class="nv"&gt;how&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;back&lt;/span&gt; &lt;span class="nv"&gt;track&lt;/span&gt;?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Starting back in April 2020 when I added support for
&lt;a href="https://jackdewinter.github.io/2020/04/06/markdown-linter-adding-link-reference-definitions/"&gt;Link Reference Definitions&lt;/a&gt;,
I felt that while the feature was implemented, I knew that there was always going to be
a possibility of a gap in the feature implementation.  Because of the unique multiline
nature of this feature, it is impossible to determine if the element itself is valid
without reading the next line.  As such, I had to implement a “requeue” functionality
to allow the parsing of a possible Link Reference Definition element to be rewound and
attempted again as a different element.  While that has worked well, the bulk of my
concerns over this feature centered around whether that rewinding functionality
dealt with all possible side effects, not just the most common set of them.&lt;/p&gt;
&lt;p&gt;Given that history, I decided to add functions &lt;code&gt;test_link_reference_definitions_166a&lt;/code&gt;
and &lt;code&gt;test_link_reference_definitions_166b&lt;/code&gt; to test for two more cases where an element
was only discovered to be invalid.  In the case of function
&lt;code&gt;test_link_reference_definitions_166a&lt;/code&gt;, I made sure that the title portion starts on
the same line but was not properly terminated.  This was to make sure that the entire
element would be discarded as there was no solution where the Link Reference Definition
could be considered complete under any circumstances.  When I added function
&lt;code&gt;test_link_reference_definitions_166b&lt;/code&gt;, I took the opposite approach, starting the title
on the next line.  As I started it on the next line, the Link Reference Definition could
be completed, just without the title.&lt;/p&gt;
&lt;p&gt;When I ran the tests for these two tests, it was no surprise to me that there was a
failure.  In looking at the tests, the failure was with function
&lt;code&gt;test_link_reference_definitions_166b&lt;/code&gt; which fails due to an extra Blank Line token
being generated before the rewind is reprocessed.  It took me a bit of time to realize
that I needed to add the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;force_ignore_first_as_lrd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines_to_requeue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;at the end part of the &lt;code&gt;__stop_lrd_continuation&lt;/code&gt; function that dealt with continuations
that were partially successful.  I just had to try different combinations before
figuring out what the correct one was before proceeding.&lt;/p&gt;
&lt;h2 id="dont-judge-a-book"&gt;Don’t Judge A Book…&lt;a class="headerlink" href="#dont-judge-a-book" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Indeed, when I came across this item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;603&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;doesn&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;look&lt;/span&gt; &lt;span class="k"&gt;right&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I agreed that it did not look right.  The Markdown for
&lt;a href="ex-603"&gt;example 603&lt;/a&gt; is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;producing the HTML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://foo.bar.baz/test?q=hello&amp;amp;amp;id=22&amp;amp;amp;boolean"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;http://foo.bar.baz/test?q=hello&lt;span class="ni"&gt;&amp;amp;amp;&lt;/span&gt;id=22&lt;span class="ni"&gt;&amp;amp;amp;&lt;/span&gt;boolean&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I was able to verify it quickly against Babelmark, but it took me a bit to figure out
what the parser did to get to that result.  The big thing that I had to remember for
this case was that it was interpreted as an Autolink, which is meant as a quick way to
provide references.  As such, it makes sense that instead of a literal interpretation
of the
specified link, the processing leans more towards what the user probably intended.  To
that end, it makes sense that the ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) character in the link is translated
into the named character entity &lt;code&gt;&amp;amp;amp;&lt;/code&gt; for use in both the reference and the text.&lt;/p&gt;
&lt;p&gt;So, after thinking it through and checking it out, the function &lt;code&gt;test_autolinks_603&lt;/code&gt; is
100% correct.  For extra points though, to produce the correct link, I determined that
the following HTML block would be needed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://foo.bar.baz/test?q=hello&amp;amp;id=22&amp;amp;boolean"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;http://foo.bar.baz/test?q=hello&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;id=22&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;boolean&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeah, I like puzzles, and this was a good one.&lt;/p&gt;
&lt;h2 id="i-really-need-to-be-more-specific"&gt;I Really Need to Be More Specific&lt;a class="headerlink" href="#i-really-need-to-be-more-specific" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I am usually good at adding items to the issues list, this one was cryptic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;620&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;more&lt;/span&gt; &lt;span class="n"&gt;bad&lt;/span&gt; &lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Huh?  That really was not a lot to go on, but I gave it a shot.  Without more
information in the item, I just got a bit creative.&lt;/p&gt;
&lt;p&gt;Taking a look at function &lt;code&gt;test_autolinks_604&lt;/code&gt;, I took the initial URI autolink of
&lt;code&gt;&amp;lt;irc://foo.bar:2233/baz&amp;gt;&lt;/code&gt;, stripping it down to &lt;code&gt;&amp;lt;irc:foo.bar&amp;gt;&lt;/code&gt; for
function &lt;code&gt;test_autolinks_604a&lt;/code&gt; and expanding the theme to
&lt;code&gt;&amp;lt;my+weird-custom.scheme1:foo.bar&amp;gt;&lt;/code&gt; for function &lt;code&gt;test_autolinks_604b&lt;/code&gt;. Similarly,
I took the email Autolink of &lt;code&gt;&amp;lt;foo+special@Bar.baz-bar0.com&amp;gt;&lt;/code&gt; from function
&lt;code&gt;test_autolinks_613&lt;/code&gt; and reduced it down to &lt;code&gt;&amp;lt;l@f&amp;gt;&lt;/code&gt; for function &lt;code&gt;test_autolinks_613a&lt;/code&gt;.
Having added some good positive tests, I then decided to add negative tests.  For
function &lt;code&gt;test_autolinks_620a&lt;/code&gt; I specified a theme with too few characters, while
function &lt;code&gt;test_autolinks_620b&lt;/code&gt; specified a theme with too many characters. Test
function &lt;code&gt;test_autolinks_613c&lt;/code&gt; specified a scheme with an invalid character in the
theme, while function &lt;code&gt;test_autolinks_613d&lt;/code&gt; had no domain part and function
&lt;code&gt;test_autolinks_613e&lt;/code&gt; had no name part.&lt;/p&gt;
&lt;p&gt;These tests all passed without incident, but it felt good to increase the scenarios
and increase my confidence in the project.  While I was pretty sure that these would
all pass, as they are all based on regular expressions with specific character counts,
it just felt right to explicitly test those limits and make sure they were consistent.&lt;/p&gt;
&lt;h2 id="verifying-link-reference-definitions-with-other-blocks"&gt;Verifying Link Reference Definitions with Other Blocks&lt;a class="headerlink" href="#verifying-link-reference-definitions-with-other-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the same manner as other tests, this one started from the issues list item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_link_reference_definitions_183&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="n"&gt;lrd&lt;/span&gt; &lt;span class="n"&gt;followed&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;bq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;leaf&lt;/span&gt; &lt;span class="n"&gt;blocks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In test function &lt;code&gt;test_link_reference_definitions_183&lt;/code&gt;, the Link Reference Definition
(or its acronym LRD as used in the item) follows an Atx Heading element.  In the
GFM Specification for this example, it explicitly states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, it can directly follow other block elements, such as headings and thematic breaks, and it need not be followed by a blank line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While it states that it can follow other block elements, it only gave three examples:
one after an Atx Heading element, one before a Thematic Break element, and one before a
SetExt Heading element.  Those three tests cases, spread out in the three functions
between &lt;code&gt;test_link_reference_definitions_183&lt;/code&gt; and &lt;code&gt;test_link_reference_definitions_185&lt;/code&gt;
were a good start, I felt that better coverage was warranted.  Therefore, I created
functions &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;g&lt;/code&gt; for function &lt;code&gt;test_link_reference_definitions_183&lt;/code&gt; and functions
&lt;code&gt;a&lt;/code&gt; to &lt;code&gt;f&lt;/code&gt; for function &lt;code&gt;test_link_reference_definitions_185&lt;/code&gt; to cover the before and
after cases.&lt;/p&gt;
&lt;p&gt;Except for two of the tests, they all passed without incident.  The two
that did not pass were tests that involved a Link Reference Definition occurring both
before and after a list. As I knew I was going to be finishing up with leaf blocks
and heading to container blocks in the next week or two, I marked those test as
disabled, added an item to the issues list, and kept on going.&lt;/p&gt;
&lt;h2 id="cleaning-up-character-entity-tests"&gt;Cleaning Up Character Entity Tests&lt;a class="headerlink" href="#cleaning-up-character-entity-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At first, when I saw the issues list item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_markdown_entity&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;various&lt;/span&gt; &lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I thought that I had missed a couple of cases and looked for some missing cases.  It
was during that search that I came across the following text at the end of the
&lt;code&gt;test_markdown_entity_and_numeric_character_references.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# TODO&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;amp; and various forms at end of line&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# 327 special parsing for html blocks?&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;a href="&amp;amp;ouml;&amp;amp;ouml;.html" x="&amp;amp;ouml;"&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;x-me foo="&amp;amp;ouml;"&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;amp;ouml; bar="&amp;amp;ouml;" bbb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Comparing the items in the Python list, I determined that all those cases had already
been covered by other tests, but there were some tests that I thought it was worth
adding.&lt;/p&gt;
&lt;p&gt;While the example for function &lt;code&gt;test_character_references_321&lt;/code&gt; specified that the text
must match that of an entity in the named entities table, I added function
&lt;code&gt;test_character_references_321a&lt;/code&gt; to make it explicit that it was a case-sensitive
lookup.  Similarly, functions &lt;code&gt;test_character_references_322&lt;/code&gt; and
&lt;code&gt;test_character_references_323&lt;/code&gt; mention turning numeric entities into characters, but
only included the special &lt;code&gt;NUL&lt;/code&gt; character &lt;code&gt;0&lt;/code&gt; as a byproduct of the text in an example.
As such, I created the &lt;code&gt;test_character_references_323a&lt;/code&gt; function to call attention to
this special character, also showing that any number of leading zeroes does not matter
for numeric entities.&lt;/p&gt;
&lt;p&gt;In a similar pattern, but at a higher level, I added the &lt;code&gt;test_character_references_336&lt;/code&gt;
series of functions, named &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;e&lt;/code&gt;.  While I was okay with the examples showing the
usage of entities in paragraphs, I felt that having explicit cases of entities in each
of the other leaf blocks was useful.  In order, the tests added named entities in each
of an Atx Heading element, a SetExt Heading element, and Indented Code Block element,
a Fenced Code Block element, and a Html Block element.  I also verified that the entity
was interpreted in the first two elements, and not interpreted in the last three
elements, as per the GFM Specification.&lt;/p&gt;
&lt;p&gt;Finally, as a simple set of comprehensive tests, I wanted to have a good example of
specifying
a named entity using all three forms: named, decimal, and hexadecimal.  As such, I
created the &lt;code&gt;test_character_references_extra_&lt;/code&gt; functions with &lt;code&gt;01&lt;/code&gt; using &lt;code&gt;&amp;amp;quot;&lt;/code&gt;,
&lt;code&gt;02&lt;/code&gt; using &lt;code&gt;&amp;amp;#34;&lt;/code&gt;, and &lt;code&gt;03&lt;/code&gt; using &lt;code&gt;&amp;amp;#x22;&lt;/code&gt;.  I know that these functions were going
to pass ahead of time, but it gave me confidence knowing that I had a concrete set of
three tests showing that the form of the entity didn’t matter, as they all produced
the same HTML results.&lt;/p&gt;
&lt;h2 id="closing-things-up"&gt;Closing Things Up&lt;a class="headerlink" href="#closing-things-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I was getting close to writing time on Sunday morning, I wanted to try and
clear one more easy issue from the list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;text_from_chars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jackdewinter&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pymarkdown&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a506ddd3bda08a8ca1d97a7b0d68c114325b545e&lt;/span&gt; &lt;span class="ss"&gt;`extra_74`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was more of a bookkeeping issue than anything else, or at least I hoped it was.
During a previous change on 02 Oct 2020, I thought I had noticed that the HTML
transformer was using the &lt;code&gt;text_from_blocks&lt;/code&gt; field to create the text for the links.
Thankfully, resolving this took a quick look at the &lt;code&gt;__handle_image_token&lt;/code&gt; function
in the &lt;code&gt;transform__to_gfm.py&lt;/code&gt; module to verify it was not using that field.&lt;/p&gt;
&lt;p&gt;When I took a second, this should have been more obvious to me.  While it is possible
to derive the &lt;code&gt;image_alt_text&lt;/code&gt; field from the &lt;code&gt;text_from_blocks&lt;/code&gt; field, it is the last
thing I would have thought about when generating HTML.  But I still felt good that I
verified this and dispelled any doubts about the HTML output being based on the wrong
part of the token out of my mind.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The work went on like it always does, but an interesting milestone was met with
the completion of this work: any outstanding issues clearly identified as being
attributable to a leaf block has been solved.  Short version?  I finished any
issue that was clearly a leaf block issue.&lt;/p&gt;
&lt;p&gt;While the realization of that goal was not a big thing to me, it wasn’t a small one
either.  It still meant that I needed to check how leaf blocks interacted with the two
container blocks, but it reduced the number of things to check to just interactions
with and between container blocks.  That was a good feeling, knowing I had hit that
mark.  It increased my confidence that things were going in the right direction.&lt;/p&gt;
&lt;p&gt;It is still too early to tell, but I am now starting to hope for an initial release
of PyMarkdown as a linter in the early parts of 2021.  That felt good typing that.
Real good.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the work done to verify the leaf blocks, the next week was going to be full of
me trying to reduce the issues specific to list blocks. Closer to the line I get!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Delving Into the Issues - 8</title><link href="https://jackdewinter.github.io/2020/11/16/markdown-linter-delving-into-the-issues-8/" rel="alternate"></link><published>2020-11-16T00:00:00-08:00</published><updated>2020-11-16T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-11-16:/2020/11/16/markdown-linter-delving-into-the-issues-8/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/11/09/markdown-linter-delving-into-the-issues-7/"&gt;last article&lt;/a&gt;,
I continued in my quest to reduce the size of the issues list.  In this article, I
take a bit of time to focus on adding some depth to the scenario cases table.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I get closer to the end of this initial phase …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2020/11/09/markdown-linter-delving-into-the-issues-7/"&gt;last article&lt;/a&gt;,
I continued in my quest to reduce the size of the issues list.  In this article, I
take a bit of time to focus on adding some depth to the scenario cases table.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I get closer to the end of this initial phase of the PyMarkdown project, I find
myself measuring the project’s success differently than I did at various points in the
past. Initially the success criteria statement was “does it work at all”.
Then it moved on to “is it implemented for most circumstances”.  Finally, in the last
couple of weeks, it has moved on to the “what did I miss” stage.  And wow, does it
seem like it has taken both a couple of weeks and almost a year at the same time.&lt;/p&gt;
&lt;p&gt;While this phase might seem boring to other people, people that are Testers or
Automation Developers&lt;sup id="fnref:SDET"&gt;&lt;a class="footnote-ref" href="#fn:SDET"&gt;1&lt;/a&gt;&lt;/sup&gt; often enjoy times like these because of two words:
exploratory
testing.  Our job is to make sure the thing we are testing is working properly. To
a lot of us, exploratory testing is basically like leaving a kid in a room filled with
hundreds of opened
&lt;a href="https://www.lego.com/"&gt;LEGO&lt;/a&gt;
sets and saying to them “show me what you can build!”  It is in those times that we
get to “play around” and experiment.  We use that time to try and understand where the
issues are, and which scenarios give us the most benefit to test for the least cost.
And as this phase is closing, this type of testing is pivotal in being able to close
out the phase cleanly and with confidence.&lt;/p&gt;
&lt;p&gt;And as I have mentioned before, testing and test automation is not about trying to break
something, it is about reducing the risk that the user of the product will experience
that thing breaking.  That is where my recording of the bulk testing in the scenario
cases tables comes into play.  Instead of looking for one issue at a time, those tables
take a group of concepts and test them as a single group.&lt;/p&gt;
&lt;p&gt;I have found that the benefits of that approach are twofold.  The first benefit that
I have experienced is an increase in confidence.  This is an easy one to
explain, as I can concretely point to a collection of tests along a theme and know that
any scenario along that theme is working properly.  The second benefit is one of
economy.  The cost
of finding an individual issue is expensive.  It takes exploration or debugging to find
the issue in the first place, with the extra debugging and logging to try and figure
out what the issue really is, followed by the extra work required to fix the issue. That
ends up being a lot of time.  By amortizing the work over an entire group of tests,
that cost is drastically reduced.&lt;/p&gt;
&lt;p&gt;Having experienced these benefits on this project, I decided to dedicate a weeks’ worth
of work to adding to the table, to increase my confidence and to accelerate my journey
to having a shippable project.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/c467c617da4ca9e03457b18c9795d6fff7dceb65"&gt;27 Oct 2020&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/e1d9b9e016b799f5bc11670f21d8008e1c0cd967"&gt;31 Oct 2020&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="linksimages-and-other-inline-tokens"&gt;Links/Images and Other Inline Tokens&lt;a class="headerlink" href="#linksimages-and-other-inline-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The easy part about coming up with a theme is the title of the theme itself.  For the
Series J theme, it was easy an easy theme to identify: Link/image elements followed by
various other inline tokens.  In the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/scenario-cases.md"&gt;scenario-cases.md&lt;/a&gt;
file, that description is right there after the name of the series.  But the hard part
of a theme is the act of trying to make sure that each scenario that you want in that
theme is present.  And often, I miss the mark.&lt;/p&gt;
&lt;p&gt;When I originally added Series J to the document, I thought that I had added each of
the qualifying inline elements to the group.  Going through the list in my head, I
thought I had each of those newlines added when I created the group.  But in retrospect,
I did not have the right viewpoint as I missed a large part of that group: internal
versions of the scenarios I had already added.&lt;/p&gt;
&lt;p&gt;I came about this when looking at the J8 test and experimenting by creating two
new tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;J9&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt; &lt;span class="n"&gt;emphasis&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;nnk&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="ss"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;ndef&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;test_paragraph_extra_e1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;J9i&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt; &lt;span class="n"&gt;emphasis&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;nnk&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="ss"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;ndef&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;test_paragraph_extra_e2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whereas the other tests in the Series J group focus on the inline elements after the
Link elements and Image elements, I wanted to experiment with performing the same
process on those token’s link labels, inside of the tokens.  And that experimentation
bore fruit.  The J9 test failed in the consistency check with an overcount on the
line number.  After a quick debugging session, I discovered that the &lt;code&gt;rehydration_index&lt;/code&gt;
that I have mentioned in previous articles was being added to, both in the link label
and in the Link’s encapsulated tokens.  It was just a simple fix from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rehydrate_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;link_stack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rehydrate_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that quick fix, the issue was addressed.  But it outlined something to me that I
wanted to get back to before the end of the week: inline elements within the link label.
More on that near the end of this article!&lt;/p&gt;
&lt;h2 id="adding-the-series-l-theme"&gt;Adding the Series L Theme&lt;a class="headerlink" href="#adding-the-series-l-theme" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This work was the major focus of the week, focusing on links or images contained within
the link label section of another link or image.&lt;/p&gt;
&lt;h3 id="origin-story"&gt;Origin Story&lt;a class="headerlink" href="#origin-story" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I came up with the idea for this
group recently, I have been thinking about this topic since at least
31 July 2020.  It was at that time that I did the research that I would document in
a section labelled
&lt;a href="https://jackdewinter.github.io/2020/08/10/markdown-linter-adding-links-to-the-markdown-transformer/#example-528"&gt;Example 528&lt;/a&gt;,
followed by the work undertaken to fix that issue, documented in the section
“creatively” labelled
&lt;a href="https://jackdewinter.github.io/2020/08/17/markdown-linter-adding-lists-to-the-markdown-transformer/#fixing-example-528"&gt;“Fixing” Example 528&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That scenario test, encapsulating the GFM Specification’s
&lt;a href="https://github.github.com/gfm/#example-528"&gt;example 528&lt;/a&gt;,
is a bit contrived but a good example nonetheless.  Given the Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;[[foo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the expected output is the HTML document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"uri3"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"[foo](uri2)"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason I say that this example is contrived is that I can visualize useful cases of
a Link element within an Image element, I have a hard time coming up with a similar
example for a Link element within a Link element.&lt;/p&gt;
&lt;p&gt;A practical instance of this example is the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;![moon&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;nssdc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gsfc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nasa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gov&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;imgcat&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;midres&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gal_p37329&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gif&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wikipedia&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wiki&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Moon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which is rendered as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://en.wikipedia.org/wiki/Moon"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://nssdc.gsfc.nasa.gov/imgcat/midres/gal_p37329.gif"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"moon"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At the visual level, this HTML provides for a picture of a moon from the NASA
archives.  When
that image is clicked on, the browser goes to the Wikipedia article on the moon.&lt;/p&gt;
&lt;p&gt;Useful
element compositions like this is probably why there are multiple examples of a
Link element within an Image element in the GFM Specification.  However, in that same
specification, only the above example provides for a Link element within a Link element
within an Image element.  As the GFM Specification provides a unified interpretation of
Markdown, Example 528 is presented as a recipe on how to handle cases like that.  My
guess was that if that example was anything other than an outside case, there would be
more examples outlining that pattern.&lt;/p&gt;
&lt;h3 id="formulating-the-test-group"&gt;Formulating the Test Group&lt;a class="headerlink" href="#formulating-the-test-group" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the help of
&lt;a href="https://johnmacfarlane.net/"&gt;John McFarlane&lt;/a&gt;,
I was able to figure out the part of the algorithm that I had misunderstood and fixed
the error.  Having invested all that research and work to fix that one issue, I
wondered if there was a better way to handle issues with examples like that.  That was
when I really started thinking about how to cover all the cases that would lead to
having a good group of tests around Example 528.&lt;/p&gt;
&lt;p&gt;The downside about that exercise was that as soon as I thought about how to cover all
those scenario cases, a couple of negative things got in the way.  The first big one was
&lt;a href="https://github.github.com/gfm/#example-583"&gt;example 583&lt;/a&gt;
and the paragraph that follows it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Though this spec is concerned with parsing, not rendering, it is recommended that in rendering to HTML, only the plain string content of the image description be used. Note that in the above example, the alt attribute’s value is &lt;code&gt;foo bar&lt;/code&gt;, not &lt;code&gt;foo [bar](/url)&lt;/code&gt; or &lt;code&gt;foo &amp;lt;a href="/url"&amp;gt;bar&amp;lt;/a&amp;gt;&lt;/code&gt;. Only the plain string content is rendered, without formatting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically, given the Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foo [bar&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the specification suggests that the only content that should be used is the &lt;code&gt;foo&lt;/code&gt; text
contained at the start of the Image element’s link label, and the &lt;code&gt;bar&lt;/code&gt; from the link
label of inner Link element.  Therefore, after processing, the resultant HTML is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/url2"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo bar"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The downside of this information is that there are at least 64 “simple” combinations of
links inside of links, images inside of images, links inside of images, and images
inside of links.  Those simple combinations are 4 types of links inside of 4 types of
links inside of 4 combinations of link and image elements.  That lays the groundwork
for determining which combinations should be tested to address scenarios like example
528 but does not address example 528-like scenarios.&lt;/p&gt;
&lt;p&gt;Already taking the work required to create a single test for each combination into
account, the bigger downside was going to be the verification of each of those tests.
Increasing the cost of this downside was the possibility of finding issues that needed
to be addressed while the verification phase of the tests was ongoing.&lt;/p&gt;
&lt;p&gt;It was daunting, but I felt strongly that it needed to be done. So, I started working
on identifying the combinations that were needed, and added them to the
&lt;code&gt;scenario-cases.md&lt;/code&gt; file.  It was then that the hard work for this issue would start.&lt;/p&gt;
&lt;h3 id="working-the-issue"&gt;Working the Issue&lt;a class="headerlink" href="#working-the-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The bulk of the work on resolving this issue was done over 4 days of lengthy
sessions.  To reduce the cost of completing this work, I decided early on to come up
with a simple strategy to hopefully allow me to copy-and-paste tests where possible,
hopefully avoiding extra work.  To that end, I figured that the combination of Link
elements inside of Link elements was the best combination to start with.  I just hoped
that I could reuse a lot of the test code.&lt;/p&gt;
&lt;p&gt;The table that I created in the &lt;code&gt;scenario-cases.md&lt;/code&gt; file was a good tool to create
the tests from, but it lacked any Markdown that I could use as a template.  Keeping
it simple, I started with the Markdown &lt;code&gt;a[foo [bar](/uri)](/uri)a&lt;/code&gt;, and transformed
the Markdown for each scenario from there.  Once I started working with non-inline
Link elements, I added in a simple Link Reference Definition, including link
referenced to that Link Reference Definition and to a non-existent Link Reference
Definition.&lt;/p&gt;
&lt;p&gt;Following my usual pattern, I executed that new test and manually verified the
tokens, before copying them into the test.  After that, I executed the test again
and copied the HTML output into the test, after once again manually verifying that it
looked right.  Even after that step, I used
&lt;a href="https://johnmacfarlane.net/babelmark2/"&gt;BabelMark&lt;/a&gt;
against the Markdown for each test, comparing my parser’s output against the
&lt;code&gt;commonmark.js&lt;/code&gt; output.  This process was long, drawn out, and tedious… but it
worked.&lt;/p&gt;
&lt;p&gt;The hard part about mentally processing a lot of these combinations is that because
of the rule that Link elements cannot contain Link elements, I needed to do a lot
of tedious parsing of each combination.  It was not as simple as just looking at
the Markdown and quickly knowing what the answer was.  I kept a copy of the GFM
Specifications
&lt;a href="https://github.github.com/gfm/#phase-2-inline-structure"&gt;implementation guide&lt;/a&gt;
open in another window, just to make sure I was doing things in the right order.
Even then, I double checked, and triple checked each transformation being running the
tests, just to make sure I had things done correctly.&lt;/p&gt;
&lt;p&gt;After a couple of days of work in the evenings, I had finished this first
part.  For the other three parts, I was hoping I could leverage the work heavily
to allow me to shave some time off the process.&lt;/p&gt;
&lt;h3 id="completing-work-on-the-issue"&gt;Completing Work On The Issue&lt;a class="headerlink" href="#completing-work-on-the-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With Link elements inside of Link elements out of the way and committed to the
repository, I started to work on Image elements inside of Link elements.  The big
change here was that while nested Link elements need to be parsed carefully,
the parsing of Image elements inside of Link elements was more natural to me. The
Link token’s link label field contained the “raw” form of the link label, while the
tokens between that token and the end Link token contained a processed version.
With a decent amount of experience in reading Markdown due to this project, I was able
to gain proficiency at those required changes quickly.  It therefore followed
that the verification part of the process went a lot smoother than with nested Link
elements.&lt;/p&gt;
&lt;p&gt;Moving on to nested Image elements was a relatively easy step to take from there.
As the Image elements create their &lt;code&gt;alt&lt;/code&gt; attribute values by processing the link label
instead of encapsulating it (as with Link elements), the two big changes were
easy to consistently apply across each of the new tests.  The first change was to remove
any tokens that were being encapsulated between the start Link token and the end Link
token, replacing them with a single Image token.  The second change was to look at an
example nested Image element and determine what the &lt;code&gt;alt&lt;/code&gt; attribute was going to be.
After the first two or three tests, I started to get pretty good at doing that before
I started verifying the tokens, saving a lot of time.&lt;/p&gt;
&lt;p&gt;Finally, completing the group with the Link element inside of an Image element was
almost trivial.  As the different between a Link element inside of an Image element
and an Image element inside of an Image element is one character (&lt;code&gt;!&lt;/code&gt;), the link
labels remained constant between the tests.  As such, only minor changes were
required to these tests after copying them from the previous group.&lt;/p&gt;
&lt;h3 id="dealing-with-relatively-minor-issues"&gt;Dealing with Relatively Minor Issues&lt;a class="headerlink" href="#dealing-with-relatively-minor-issues" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To get all the test passing and verified was a chore, but the good news was that most
of the work was contained within the scenario test process that I have already defined.
Considering the scope of the group of tests, the number of issues found in the non-test
parts of the project were very small.&lt;/p&gt;
&lt;p&gt;To be specific, there was only one change required.  When adding the tests for Image
elements within a Link element, the only change that I needed to do was to change the
expression:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_paragraph&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_token&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_paragraph&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To be blunt, it was both confirming and unsettling at the same time.  The confirming
part of the process was that I had done the work on the project properly, with only
a very slight change required.  And hopefully it does not sound like I lack confidence,
but it was also unsettling.  After working on scenario tests across an entire theme,
taking three to four days in the process, I somewhat expected the new scenario tests
to find something that I missed.&lt;/p&gt;
&lt;p&gt;I was happy that it did not find anything, do not get me wrong.  It just took a bit of
getting used to.  And it was still a validation of the parser code itself, as the change
was only required in the consistency checks.  After some thought, it sank in that
at this late stage of the project’s initial push, I wanted the results to be exactly
this: the parser was being proved as validly constructed, again and again.&lt;/p&gt;
&lt;h2 id="rounding-out-series-j"&gt;Rounding Out Series J&lt;a class="headerlink" href="#rounding-out-series-j" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Based on the research that I did at the start of the week, I wanted to close out
the week by responding to that research by rounding out the Series J group. As
with my recent work in adding the Series L group of tests, I started out by
scribbling down the combinations that I thought needed to be covered, looking for
gaps that I had missed.  While not a big gap, I added tests &lt;code&gt;J2a&lt;/code&gt; and &lt;code&gt;J2ai&lt;/code&gt; to
fix a small gap where I did not have a newline in the Raw Html element.&lt;/p&gt;
&lt;p&gt;With that initial fix made, the rest of the changes were fairly in scope with the
new test that I documented at the start of this article.  Starting with emphasized
text, I added scenario descriptions and scenario tests encompassing a wide range
of inline tokens, including Hard Line Break elements.  I double checked everything
and then began my usual process of executing and verifying the tests.  And boy was
I glad that I did!&lt;/p&gt;
&lt;p&gt;While it was not a lot of code, I made changes to the &lt;code&gt;__collect_text_from_blocks&lt;/code&gt;
function and the &lt;code&gt;__consume_text_for_image_alt_text&lt;/code&gt; function to properly handle
these new cases.  In the case of both functions, most of the inline tokens were
handled, but the two Autolink inline tokens and the Hard Line Break tokens were not
handled.  While the extra code to remedy these issues was relatively small, it was
a good find.  It felt good that these issues were found directly because of this new
group of scenario tests.  It felt like validation of the approach I had taken.&lt;/p&gt;
&lt;p&gt;From a consistency check point of view, there were only a couple of issues that were
found.  Mirroring the change made for split emphasis at the start of this article,
the &lt;code&gt;__verify_next_inline_hard_break&lt;/code&gt; function was changed to only increase
the &lt;code&gt;rehydrate_index&lt;/code&gt; if the token was not inside of an active Link token.  The
other issue was a small, nitpicky thing: adding the text &lt;code&gt;+ 1&lt;/code&gt; to the output
for the main assert in the &lt;code&gt;__verify_next_inline_code_span&lt;/code&gt; function.  Other than
those two changes, the consistency checks had a clean bill of health.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have to admit that I wondered (out loud, to my dog, who did not help in the discussion
one way or the other) whether this was a good investment of time once the week had
ended.  The broad sweeping groups that I added confirmed that the parser code
was in good shape, as were the consistency checks that watched over that code.  Maybe
it was me still thinking I was in the middle part of the “game” of creating the project,
and not the end game where I believe I am currently at.  But as I mentioned above,
I had both positive and negative emotions about the results.  Happy that things were
going well, but not as trusting of those results as the tests had proved out.&lt;/p&gt;
&lt;p&gt;Taking some time to think about it as I am writing this article, I do think my
descriptions of “middle game” and “end game” are appropriate metaphors to where I
am on the project.  After a long time spent in the middle of the project, I
believe it is just taking me some time for me to switch into the mode where I am
wrapping things up to complete this first phase of the project.  As such, I when I
start that week’s work, I believe that I am going to find more issues than I find,
and then I turn out to be happy when I do not find many issues.  I truly
believe that when I properly switch my mentality to an end game mentality, I will
be expecting the tests to verify the work already done.&lt;/p&gt;
&lt;p&gt;Does that mean the project will be properly tested?  Nope.  If you ask any person
experienced with testing a project that question, they will not give you a solid
answer.  That is not due to lack of confidence, but because there is not one to give.
There will always been edge cases that are not thought of and weird things that can
show up.  It is my belief that you can find most of the issues with any given project,
but it is always a question of when that next issue will show up, and who will find
that issue.&lt;/p&gt;
&lt;p&gt;In both professional life and for this project, my goal is the same.  If not to find
that issue before the customer does, then to make sure I have a solid assessment of
the risk outlined and evaluated.  And with these latest changes in the past week,
I see that measure of risk going down, which is a good thing.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a solid weeks’ worth of “big ticket item” issues resolved, I decided to try
and tackle a lot of the smaller issues.  I just started with a couple of easy ones
and kept on going until I stopped.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:SDET"&gt;
&lt;p&gt;Nomenclature can be everything, and changes from job to job.  From my viewpoint, Testers are people that are very methodical and document what they did, in what order, and what the results are.  Automation Developers like me, a SDET or Software Development Engineer in Test, take documented patterns and results, writing test code and test frameworks to make sure that those scenarios can be written as code which can be used to automatically validate the results.  There are exceptions, but the general rule is that most Testers only have a small amount of the skills required for an Automation Developer, while most Automation Developers are very adept at most of the skills required for a Tester.  Both skill sets are very useful on projects from a quality point of view. &lt;a class="footnote-backref" href="#fnref:SDET" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Autism, Stress, and Anxiety</title><link href="https://jackdewinter.github.io/2020/11/11/autism-stress-and-anxiety/" rel="alternate"></link><published>2020-11-11T00:00:00-08:00</published><updated>2020-11-11T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-11-11:/2020/11/11/autism-stress-and-anxiety/</id><summary type="html">&lt;p&gt;&amp;ldquo;I don&amp;rsquo;t know.  I really don&amp;rsquo;t know.&amp;rdquo;  Those were the last words I said before a
solid minute&amp;rsquo;s worth of silence.  After being married for seven years, my wife and I
had a &amp;ldquo;heated discussion&amp;rdquo; that was almost an argument.   That was unusual in itself.
But even …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;ldquo;I don&amp;rsquo;t know.  I really don&amp;rsquo;t know.&amp;rdquo;  Those were the last words I said before a
solid minute&amp;rsquo;s worth of silence.  After being married for seven years, my wife and I
had a &amp;ldquo;heated discussion&amp;rdquo; that was almost an argument.   That was unusual in itself.
But even more unusual was that I was at a loss of words.  Her question?  &amp;ldquo;How can I
help?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Now, our marriage is an interesting one already.  I am a software guy with a diagnosed
case of Autism, with an anxiety disorder and sensory overload disorder to boot.  My
diagnosis is such that unless I tell people I have Autism or they know what to look
for, I can often hide under the radar. But even so, it does have significant impacts on
my day-to-day life.  In contrast, my wife is a lawyer that has a heart of gold,
preferring that people play together nicely.  When they don&amp;rsquo;t, she is the one that is
not afraid to step in and do or say what needs to resolve the situation.  But uniting
us together is the fact that we both have big hearts and open minds.  The combination
of that with humor and laughter has always been a major component to our success in
marriage.&lt;/p&gt;
&lt;p&gt;But in this case, I was stumped.  Earlier in the day she had told me that she wanted
to go on a vacation to Florida with her family.  During a pandemic.  On an airplane.
With people she doesn&amp;rsquo;t know around her.  I really didn&amp;rsquo;t know what to say.  I remember
ranting and raving about it, but as to what I said at that moment, I don&amp;rsquo;t
remember too much of that.  It was all a blur.  My logic and my emotions were all over
the place.&lt;/p&gt;
&lt;p&gt;Here is where things get interesting:  I know we have two different points of view
on things like this.  While my wife is weird (heck, she married me!), she is solidly
neurotypical with only a middling amount of introvert.  Even with her being cooped up
in our house since April, she has been going into her workplace once or twice a week
since our state allowed it during the summer.  Even with this, I can tell that not
being able to get out and stretch her legs among people is chewing away at her
sanity.  I know that her going on vacation with her family is a good thing for her. It
is what she needs.&lt;/p&gt;
&lt;p&gt;For me, it is a completely different equation.  Starting with the little things,
going on a vacation with crowds of other people around is just not a lot of fun for
someone with sensory overload disorder.  Trying to mitigate the effects of that disorder
is many times more exhausting than dealing with anything else. Adding to that, my
anxiety disorder and my Autism are acting the part of tag team wrestlers. My Autism
takes the first shot with an elbow, keeping me isolated from groups of people
that I know care about me.  Then my anxiety disorder takes control with an
&lt;a href="https://prowrestling.fandom.com/wiki/Wrestling_throws#Irish_whip"&gt;Irish Whip&lt;/a&gt;,
either complaining that I am getting too little information about the current state
of the pandemic and economy, or too much information.  Then my Autism tags in with a
high-five, hyper-focusing on one little thing that I think I heard or didn&amp;rsquo;t hear.
Finally, my anxiety tags in with a
&lt;a href="https://prowrestling.fandom.com/wiki/Wrestling_throws#Hurricanrana"&gt;hurricanrana&lt;/a&gt;,
trying to figure out all the possible situations that can happen and ways to deal
with each of them. &lt;sup id="fnref:wrestling"&gt;&lt;a class="footnote-ref" href="#fn:wrestling"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I struggled to figure out what metaphor to use to explain the vicious cycle that
escalates in my head.  While I haven&amp;rsquo;t watched professional wrestling in years, I
believe it is the best metaphor by far.  At its heart, professional wrestling is a
show.  For me to communicate with people every day, I must act a bit to communicate
clearly. Professional wrestling contains the good guys, or
&lt;a href="https://en.wikipedia.org/wiki/Face_(professional_wrestling)"&gt;faces&lt;/a&gt;, and the
bad guys, or
&lt;a href="https://en.wikipedia.org/wiki/Heel_(professional_wrestling)"&gt;heels&lt;/a&gt;.  Just like
in the shows, sometimes my positivity and clarity win, and sometimes my anxiety and
lack of connection with others wins.  And as anyone who has followed wrestling will
tell you, behind the bright white smiles, coifed hair, and shiny outfits are people
that are often hurting doing the thing they love to do.&lt;/p&gt;
&lt;p&gt;Thinking about how to answer that question as I write this article, where am I now? I
still don&amp;rsquo;t know.  I do know that in terms of where I am, I am currently fighting
my own personal wrestling match day-by-day.  There are some days where the good guys
win and some days where the bad guys win.  Some of the days I am acting for my
audience, and some of the days I am trying to be my honest self with them.  Just like a
wrestler needs to understand where they are in the ring relative to the others, I need
to understand where my wife is relative to where she needs to be.  And yes, somedays
I am controlling my anxiety and Autism, and somedays it controls me.&lt;/p&gt;
&lt;p&gt;And forgive me if I it seems like I am singling myself out from the people around me
and the stress they are experiencing.  But there are two things that I feel make a
big difference.  My Autism and anxiety do amplify each other, sometimes out of control.
Also, I don&amp;rsquo;t have the option of resorting to things like alcohol or other things to
help me forget for a while.  Quite the opposite, those things tend to amplify
how I feel even more.  I don&amp;rsquo;t get a break&amp;hellip; but I am okay with that.  This is
something I have dealt with every day of my life, this tug-of-war going on inside of
my head.  Yeah, it is exhausting.  It is so unbearably exhausting at times.  But the
flip side of that is: I know I can handle it.&lt;/p&gt;
&lt;p&gt;While I still don&amp;rsquo;t have a good answer for her question, I am working on it.  What I do
know is that our solutions to how to deal with the stress of this pandemic are
going to be on opposite sides of the spectrum.  As much as it would be a terrible idea
for me to think about, I believe that her flying down to Florida with her family is one
of the better things she can do for herself.  In contrast to her approach, I do know
that a lot of the things that I need to do are small and personal.  More mental
breaks.  Increased exercise.  Making better choices when eating.  No big silver
bullets, just little things that add up over time.&lt;/p&gt;
&lt;p&gt;And I guess that is okay.  The important thing I realized in all this is that we are
asking ourselves the right questions.  &amp;ldquo;How are you?&amp;rdquo;, &amp;ldquo;What are you feeling?&amp;rdquo;, and the
important one: &amp;ldquo;How can I help?&amp;rdquo;  I know I don&amp;rsquo;t have that answer for her on that last
one, I am working on it.  I do know that part of my answer is this article.  It&amp;rsquo;s
making sure others, people with Autism or not, ask themselves, their friends, and their
loved ones those questions.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:wrestling"&gt;
&lt;p&gt;I grew up in Southern Ontario in the 80s.  Yes, I watched wrestling.  Everyone I knew did.&amp;#160;&lt;a class="footnote-backref" href="#fnref:wrestling" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Autism"></category><category term="Autism"></category></entry></feed>