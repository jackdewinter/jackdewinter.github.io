<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack's Digital Workbench</title><link href="https://jackdewinter.github.io/" rel="alternate"></link><link href="https://jackdewinter.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jackdewinter.github.io/</id><updated>2021-08-30T00:00:00-07:00</updated><entry><title>Markdown Linter - Another Three Done!</title><link href="https://jackdewinter.github.io/2021/08/30/markdown-linter-another-three-done/" rel="alternate"></link><published>2021-08-30T00:00:00-07:00</published><updated>2021-08-30T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-08-30:/2021/08/30/markdown-linter-another-three-done/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/23/markdown-linter-three-more-rules/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting that weeks’ three rules completed. In this article, I
talk about the next three rules I worked on.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know I am getting close to being finished with this phase of implementing rules when
I …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/23/markdown-linter-three-more-rules/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting that weeks’ three rules completed. In this article, I
talk about the next three rules I worked on.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know I am getting close to being finished with this phase of implementing rules when
I can represent the number of rules left with two hands!  It was exciting.  I could add
a lot more, but what I really want to do is talk about the things I did this week, so
here I go!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/7ecdd796b0ee610b0398a788e2286d96ba924473"&gt;25 Aug 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/a417b4635a9df5d76fbf99bb5503839517d8e7e6"&gt;29 Aug 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="multiple-top-level-headings"&gt;Multiple Top-Level Headings&lt;a class="headerlink" href="#multiple-top-level-headings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The implementation of Rule Md025 was a long time coming, but I was finally getting around
to it.  The basis of the rule is very simple:  top-level headings are often used by parsers as
a document title.  Because of that, having multiple titles in the same document just doesn’t
make sense.  Well, it did not make sense to me at least.&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I felt that this rule was simple enough to start implementing without any
design, I wanted to stick to my goals and design this out… even if it only took
five minutes.  That five minute estimate was derived at because the design parts were
easy for me to grasp together in my head with room to spare.  From experience,
if you can think about a design as a complete puzzle in your head, the design is generally
going to be simple.&lt;/p&gt;
&lt;p&gt;The first part of the design was easy.  I needed a variable to keep track of whether the
first top-level heading was observed.  Once set, any other top-level heading was a
multiple and needed to trigger the rule.  Since both the Atx Heading tokens and the SetExt
Heading tokens share the &lt;code&gt;hash_count&lt;/code&gt; property, it would mean a simple check to see if
that property was set to 1.&lt;/p&gt;
&lt;p&gt;That was it.  Nothing complex.
Even with the configuration parts added in, those new parts were still manageable
and simple.  If the &lt;code&gt;level&lt;/code&gt; configuration value is set, that &lt;code&gt;1&lt;/code&gt; would be replaced with the
variable containing the &lt;code&gt;level&lt;/code&gt; configuration value.  The &lt;code&gt;front_matter_title&lt;/code&gt; configuration
required a check for the front-matter token, and then a check to see if property map for
the Front Matter token contained the specified configuration value.  If so, set the
indicator that the first top-level heading was observed.&lt;/p&gt;
&lt;p&gt;For me, it was easy going through that design, with no issues involved.  I did not even
see any warning signs.  But still, was it worth it?  It did feel good going through the
process and having that confidence verified, thinking some more about it and confirming
that there were no apparent issues.&lt;/p&gt;
&lt;h2 id="testing-and-implementation"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After coming up with nine scenario tests, I felt I had given the rule enough good test
coverage to move on to the implementation phase.  Like the simplicity of the design phase,
these scenarios were not particularly difficult.  Three good scenarios to make sure
the rule does not trigger for safe scenarios, and six scenarios testing the failure
combinations.&lt;/p&gt;
&lt;p&gt;Just like some of the rules from last week, the implementation was a reflection
of the design that I specified above.  The rule started with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;starting_new_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_top_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_top_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_top_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, when the &lt;code&gt;self.__level&lt;/code&gt; configuration value was introduced, the hash count
comparison was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, when the &lt;code&gt;self.__front_matter_title&lt;/code&gt; configuration value was added,
a new comparison was added at the end of the main &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_front_matter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__front_matter_title&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matter_map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_top_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like the design indicated, it was a simple implementation.   But I am
not always so lucky that things match up.  With extra confidence, but
still a firm believe that I am taking the right path, I went on to the next
rule.&lt;/p&gt;
&lt;h2 id="all-files-must-have-top-level-headings"&gt;All Files Must Have Top-Level Headings&lt;a class="headerlink" href="#all-files-must-have-top-level-headings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This rule, Rule Md041, was another rule that I had been delaying for
a long time.  Part of the reason for that delay is the scope of this rule.
I had confidence that when I completed this rule that it was probably
going to be triggered on around 60% of the test scenarios for rules.  That
was an easy estimate to come up with.  A good group of those test scenarios
were not focused on Atx Heading elements or SetExt Heading element; therefore
they were probably going to trigger this rule.&lt;/p&gt;
&lt;p&gt;So, taking a slight detour from the usual design first approach, I decided
that I needed to upgrade the &lt;code&gt;invoke_main&lt;/code&gt; function to handle this issue.
The &lt;code&gt;invoke_main&lt;/code&gt; function is part of the test framework and is used by
approximately 75% of the scenario tests.  The function’s one and only job is to allow
the scenario tests to execute the linter with as much parity as possible
with the command line.&lt;/p&gt;
&lt;p&gt;It was here that I needed to address the issue of Rule Md041 triggering
during the scenario tests.  Changing each test was out of the question…
that would be a mess.  Instead, I added a &lt;code&gt;suppress_first_line_heading_rule&lt;/code&gt;
parameter, defaulted it to &lt;code&gt;True&lt;/code&gt;, and implemented the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invoke_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;suppress_first_line_heading_rule&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;suppress_first_line_heading_rule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;new_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"--disable-rules"&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;new_arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--disable-rules"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;new_arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"md041"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;disable_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--disable-rules"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;disable_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;disable_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;disable_value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;disable_value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;","&lt;/span&gt;
            &lt;span class="n"&gt;disable_value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;"md041"&lt;/span&gt;
            &lt;span class="n"&gt;new_arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;disable_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;disable_value&lt;/span&gt;
        &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_arguments&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The changes were simple, yet efficient.  If there is no parameter named
&lt;code&gt;--disable-rules&lt;/code&gt;, then the parameter and the value &lt;code&gt;md041&lt;/code&gt; are inserted
at the front of the parameter list.  Otherwise, the value for that
parameter has the value &lt;code&gt;md041&lt;/code&gt; appended to the end of the existing
value.&lt;/p&gt;
&lt;p&gt;If was not rocket science, but it was efficient.  Instead of spending
hours making changes and validating them, I had this change up and
running within two hours, testing included.  It was a bargain.&lt;/p&gt;
&lt;h3 id="design_1"&gt;Design&lt;a class="headerlink" href="#design_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I felt that this design was a bit more complex than the previous rule,
but not by that much.  The basis for this rule is all about the
first “real” token in the document.  I knew there was going to be
a bit of a twist regarding the Front Matter token, so I left that to the
end.  Every other token was fair game though.&lt;/p&gt;
&lt;p&gt;Since this rule is specifically about the first token in the document,
I knew that I was going to need a variable just to provide that context
to the rule.  Once inside an &lt;code&gt;if&lt;/code&gt; condition on that variable, unless there
was a good reason not to, that variable would be set each time.
Quick, easy, done.&lt;/p&gt;
&lt;p&gt;From there it was just working through the allowable start cases one
by one.  If a Atx Heading element or a SetExt Heading element without the
right level was found, it needed to trigger the rule.  For a HTML Block,
I would have to do a bit more work as the allowable &lt;code&gt;&amp;lt;h1&lt;/code&gt; sequence was
inside a separate Text element.  That meant I would have to set a separate
capture variable, and not set the “done” variable until the rule analyzed
the following Text element.  But other than that, the general idea of how
the block was handled was the same as with the Heading elements.
I also figured out that Blank Lines would probably not count, so I made
a note to test what effect those Blank Lines had.&lt;/p&gt;
&lt;p&gt;For the Front Matter element, I thought there would have been more
work needed, but in the end, I figured that it was a simple check.  If
the title is in the Front Matter element’s property map, then a title
is present, and the requirements for having a title were met.  I checked
this a couple of times to make sense, and it passed each time.  I think
the original name of the rule could have been better worded, but it
was working properly.&lt;/p&gt;
&lt;h3 id="testing-and-implementation_1"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The thirteen scenario tests that I came up with for this rule were simple
to construct.  Four of those scenario tests were the good cases where each
of the four allowable elements start the document with good data.  Basically,
tests for things like a Level 1 (top-level) Atx Heading element.  I was
concerned about Blank Lines causing issues, so I throw an extra good scenario
test in there just to be sure.  The negative tests?  Just one scenario test
for every leaf element, and it was taken care of.&lt;/p&gt;
&lt;p&gt;The implementation was also uneventful, following the design of the rule
without any issues.  Starting with this code to handle the Heading elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;starting_new_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_seen_first_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_seen_first_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_seen_first_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash_count&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__have_seen_first_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the function was grown to handle Front Matter elements and HTML Block elements
as described in the design.  Except for a couple of typing mistakes here
and there, everything went very smoothly.&lt;/p&gt;
&lt;p&gt;It was as I was wrapping up the work for this rule and looking forward
to Rule Md043 that I realized that I was going to have my hands full with
that rule.&lt;/p&gt;
&lt;h2 id="required-heading-structure"&gt;Required Heading Structure&lt;a class="headerlink" href="#required-heading-structure" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first time I looked at Rule Md043, I did not think it would be
too difficult to implement.  It is a very simple text comparison between
a list of Heading elements and a list of required heading levels and
heading text.&lt;/p&gt;
&lt;p&gt;But then I looked further in the description and saw that it supports
the &lt;code&gt;*&lt;/code&gt; character.  My heart dropped.  That meant I was going to have
to implement a glob-based comparison.  I was not happy.&lt;/p&gt;
&lt;h3 id="glob"&gt;Glob&lt;a class="headerlink" href="#glob" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While the &lt;a href="https://www.merriam-webster.com/dictionary/glob"&gt;dictionary definition&lt;/a&gt;
is “a small drop” or “a usually large and rounded mass”, if you mention
Globs to most computer people, they immediately think of &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;.
From a
&lt;a href="https://docs.python.org/3/library/glob.html"&gt;Linux point of view&lt;/a&gt;, a glob
is a string of text that can contain the characters &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt; which serve
as placeholders for one or more other characters.  The phrase is so
commonly used that GitHub has a project &lt;a href="https://github.com/begin/globbing"&gt;just for glob&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;How does it work?  The &lt;code&gt;?&lt;/code&gt; character is a placeholder for any single character.
Therefore the glob &lt;code&gt;me?on&lt;/code&gt; will match the strings &lt;code&gt;melon&lt;/code&gt; and &lt;code&gt;menon&lt;/code&gt;.
The string &lt;code&gt;mennon&lt;/code&gt; will not match the glob as it only has one &lt;code&gt;?&lt;/code&gt;
character, not two.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; character is similar but is a placeholder for any number of any
characters. Keep things simple, the glob &lt;code&gt;me*on&lt;/code&gt; will match &lt;code&gt;meon&lt;/code&gt;,
both positve matches above, and the string &lt;code&gt;mennon&lt;/code&gt;.  As a matter
of fact, it will also match a string starting with &lt;code&gt;me&lt;/code&gt;, ending with
&lt;code&gt;on&lt;/code&gt;, and having an insanely large number of characters between them.&lt;/p&gt;
&lt;p&gt;So why was I worried about glob-based comparisons?  They look easy, do not
they?  Well, how do you deal with a glob like &lt;code&gt;me*e*on&lt;/code&gt;?  The algorithm
to handle one &lt;code&gt;*&lt;/code&gt; character is relatively simple.  Adding in support for
multiple &lt;code&gt;*&lt;/code&gt; characters gets messy really quickly.  I’ll get into that
a bit more later, but it was that support that I was dreading.&lt;/p&gt;
&lt;h3 id="design_2"&gt;Design&lt;a class="headerlink" href="#design_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Making sure that I was thinking about the rest of the design clearly, I
sat back and just let
my mind wander and think about this rule.  One thing that was immediately
obvious was that any “fancy” headings that were not 100% text were
going to be a problem.  If an author adds the text &lt;code&gt;# Heading *Me* One&lt;/code&gt;,
the parser will translate it into three Text elements with two Emphasis
element in the middle.  Should I then match the plaintext or the resolved
text?  That was ambiguous enough that I decided to not support any Heading
elements that were not 100% plain-text.  One issue down.&lt;/p&gt;
&lt;p&gt;The next issue was on how to process the entire set of Heading elements.
I could try and process as I went, but I felt that it would be too complex
to accomplish with little gain.  As such, I decided that at the end of
the document, the rule needed to example a list of all Heading elements
and their associated text.  With that complete picture in hand, it would
be a relatively simple matter of writing the Glob algorithm.  Two issues
down.&lt;/p&gt;
&lt;h4 id="glob_1"&gt;Glob&lt;a class="headerlink" href="#glob_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ah, yes… a relatively simple matter… Glob algorithm.  There were
options there as well. I just had to decide which approach worked the
best in this situation.  One option that I had was to try and represent
each line as a given character, then using Python’s built in
&lt;a href="https://docs.python.org/3/library/glob.html"&gt;Glob Library&lt;/a&gt; to resolve it.
But after checking with the library, it only works on files and directories,
so I would have to write it myself anyways.  So little benefit of doing
a transform to an easier format and then another transforms back if there
was an error.&lt;/p&gt;
&lt;p&gt;So given that I was going to need to write this myself, I decided to use
the compile option for the
&lt;a href="https://docs.python.org/3/howto/regex.html"&gt;Python RegEx library&lt;/a&gt;
as inspiration.  For this rule, I would take each part of the provided
configuration and determine if it was either a valid, plain-text Atx
Heading element or the &lt;code&gt;*&lt;/code&gt; character.  In this way, I could handle any
configuration errors during the configuration phase, and not later. This
was going to be a simple loop with some extra checks for Atx Heading element
parts, but nothing too bad.&lt;/p&gt;
&lt;p&gt;Given a compiled Glob to work with, the first thing I needed the algorithm
to do is to avoid any Glob code unless there is a wildcard character
present.  For a non-wildcard scenario, a simple check through the
entire compiled list against the actual Heading elements would be easy.
For the wildcard scenarios, I would need to handle any constant headers
and footers to get to the point where the algorithm could deal with
the wildcards themselves.  I was not sure where to go at that point,
but I decided I would do more design when I got there.&lt;/p&gt;
&lt;h3 id="testing-and-implementation_2"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In all, I created just four scenario test documents to test this rule.
I did not need any more.  As one of the variables in these scenarios
was the configuration, those four documents provided a solid enough
base for me to create all the scenario test functions.&lt;/p&gt;
&lt;h4 id="compiling-the-requirements"&gt;Compiling The Requirements&lt;a class="headerlink" href="#compiling-the-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Because of the nature of the design, I decided to allocate a block of time
specifically to the compiling and storing of the requirements.  The way
I look at it, if I did not get the internal form of the requirements correct,
I would be lucky if the actual comparisons worked.  It was better to be
sure the foundation was correct, so I invested the time there.&lt;/p&gt;
&lt;p&gt;The actual compilation function was spot on what the requirements asked for,
allowing for a simple element structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@classmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;found_parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;compiled_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_part&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;found_parts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_part&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;compiled_lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_while_character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;next_part&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Element must start with hash characters (#)."&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;"Element must start with between 1 and 6 hash characters (#)."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;new_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_any_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;next_part&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_index&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;"Element must have at least one space character after any hash characters (#)."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;new_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;"Element must have at least one non-space character after any space characters."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;compiled_lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_part&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_index&lt;/span&gt;&lt;span class="p"&gt;:]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;compiled_lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, go through the elements, looking for either a line with the
&lt;code&gt;*&lt;/code&gt; character, or look for a valid plain-text Atx Heading element.  As one
of my frequent complaints about software are error messages that do not
help the user, I tried to add useful error messages detailing what the
error is.&lt;/p&gt;
&lt;p&gt;This kept the list to compare against simple.  The entry was either a single
&lt;code&gt;*&lt;/code&gt; character or a tuple with the hash count and the heading text.&lt;/p&gt;
&lt;h4 id="collecting-the-headings-and-associated-text"&gt;Collecting the Headings and Associated Text&lt;a class="headerlink" href="#collecting-the-headings-and-associated-text" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;With the requirements compiling, it was then on to the collecting of
the Heading tokens and their Text data.  This proved to be relatively
easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;completed_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__compiled_headings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__collected_tokens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading_end&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__all_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__collected_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__collected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__collected_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__compiled_headings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__collected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This form actually took me a tiny bit of effort to get to as I struggled
with how to determine whether a Heading token was plain-text only.  In
the end, I just decided to collect all the tokens for the Heading, store
them in the list, and then decide later how to deal with them.  While it
may not be the most elegant way to deal with this problem, it was the
easiest.&lt;/p&gt;
&lt;h4 id="a-globbing-we-will-go"&gt;A Globbing We Will Go&lt;a class="headerlink" href="#a-globbing-we-will-go" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Rather than walking through the Glob code line by line, I thought it
would be more beneficial to walk through the design I did.  Globbing
a string is something that has weird cases in it.  To that extent, I
hope I did a good enough job in laying down the foundation for glob
comparisons in the above &lt;a href="#glob"&gt;Glob section&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Starting from that point, while whatever is being globbed is up to the
implementation, the most common way to think about it is with characters.
I believe this is due to the use of Glob for files and directories in Linux,
and that it easier to keep one character in your head than an entire
string.&lt;/p&gt;
&lt;p&gt;As I detailed above, the algorithm for dealing with zero &lt;code&gt;*&lt;/code&gt; characters
in a glob pattern is easy.  With no special characters, the comparison
becomes a simple comparison with no changes.  If the glob pattern is
&lt;code&gt;abc&lt;/code&gt;, then those characters must appear in that order.  To make
sure that I had a good starting point, I implemented that code first.
I made sure to get all the simple scenario tests passing, and everything
was good.&lt;/p&gt;
&lt;p&gt;I then went on to work out how to deal with one &lt;code&gt;*&lt;/code&gt; character.  As dealing
with any number of any character is a harder issue to deal with, I focused
on finding out if there are any characters at the start of the glob or
the end of the glob that are not wildcards.  If that is that case, then
I can use my comparison function for zero &lt;code&gt;*&lt;/code&gt; characters and deal with
both of those sections.  If the glob pattern only has one wildcard,
the start of the glob and the end of the glob will meet at the glob.&lt;/p&gt;
&lt;p&gt;This was a bit more interesting to work through.  I had the scenario tests
mostly passing, but I had to focus on the algorithm.  It deals
a lot with a start index and an end index of each section.  It was really
easy to get the different values mixed up.  But I persevered and got
all the scenario tests passing.  And then on to the hardest part: multiple
wildcard characters!&lt;/p&gt;
&lt;p&gt;Or so I thought.&lt;/p&gt;
&lt;h3 id="life-often-shows-up-when-you-least-expect-it"&gt;Life Often Shows Up When You Least Expect It&lt;a class="headerlink" href="#life-often-shows-up-when-you-least-expect-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I was hoping to get more done this week. However, due to
unrelated issues with both cars in our family, it became obvious
that life had other plans for me this week.  As I have mentioned
before, working on this project is a hobby for me, and I must
ensure that I keep the other parts of my life in balance.&lt;/p&gt;
&lt;p&gt;Well, these car-related issues worked together this week to remove the
better part of a day from my personal schedule.  And I believe I made
the right choice by focusing on those issues.  However, by removing
those hours from my schedule, I was not able to finish
the work on Rule Md043.  Specifically, I was not able to handle
instances of multiple wildcard characters in the required
configuration value list.&lt;/p&gt;
&lt;p&gt;Going over how to handle this in my head, I determined that I had
made significant progress on the rule itself to warrant it being
checked in. I added a custom warning and a new item to my Issues
List, just to make sure I had everything covered.  Hopefully I
will be able to get to it soon, but I feel that this was the
right decision to make.  Time will tell though.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From a pure numerical standpoint, the number of completed rules
is now 26 and the number of rules remaining is now 5.  As my
expected benchmark was 3 completed rules per week, I was
successful in meeting that goal.  While I wanted to get more
rules done this week, I did not feel it was worthwhile shortchanging
Rule Md043 to achieve that.&lt;/p&gt;
&lt;p&gt;And with five rules left to go, I have a real good shot at getting
the rules completed in the next week or two.  That was something
worth celebrating!  I felt good that I have made all this progress
and will know that I have something solid that people can use.&lt;/p&gt;
&lt;p&gt;It is all coming together, and I like it!  I wish it would move
faster, but I know I will get there and soon.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am almost so close to finishing off the rules that it is hard
for me to bear.  Will I reach it next week? Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Three More Rules</title><link href="https://jackdewinter.github.io/2021/08/23/markdown-linter-three-more-rules/" rel="alternate"></link><published>2021-08-23T00:00:00-07:00</published><updated>2021-08-23T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-08-23:/2021/08/23/markdown-linter-three-more-rules/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/16/markdown-linter-dealing-with-rule-md027/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting Rule Md027 implemented. In this article, I
talk about the next three rules I worked on.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It felt good to get Rule Md027 off of the Issues List.  I hated
to put it on there …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/16/markdown-linter-dealing-with-rule-md027/"&gt;last article&lt;/a&gt;, I talked
about the work I put into getting Rule Md027 implemented. In this article, I
talk about the next three rules I worked on.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It felt good to get Rule Md027 off of the Issues List.  I hated
to put it on there a couple of weeks ago, but it was the right call at the
time.  And since I had to tackle it at some point, reserving a week to
work on it and deal with it last week was also the right call.&lt;/p&gt;
&lt;p&gt;But with that work now completed, I needed to get back on track.  And the
closer I am getting to having all the rules implemented, the more I
want them to be done.  I know that is normal to feel that way, but I need
to make sure I temper that feeling with patience and keep following the rules
that got me here.&lt;/p&gt;
&lt;p&gt;Once more into the breach I go!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/aaa2c345e6a16f219ecd2dd930bbcbe0d3460af2"&gt;18 Aug 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/87d7901287d6f741832c40f35f84b2c4a240015f"&gt;22 Aug 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="fenced-blocks-elements-and-blank-lines"&gt;Fenced Blocks Elements and Blank Lines&lt;a class="headerlink" href="#fenced-blocks-elements-and-blank-lines" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having taken the entirety of last week to finish Rule Md027, I was hoping
that I could get this rule completed in less time than one week.  Just
from looking at the rule, it sure looked a lot simpler.  Instead of a whole
bunch of complicated stuff, just make sure that any Fenced Code Block
elements are surrounded by at least one Blank Line.&lt;/p&gt;
&lt;p&gt;The rule looked simple. But was it really going to be simple?&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Based on my initial looks at this rule, I determined that there were
going to be two groups of elements that I needed to deal with: the ones
that crossed container boundaries and ones that don’t.&lt;/p&gt;
&lt;p&gt;As soon as I figured out that the second group will cross container
boundaries, I knew that I would need to keep track of the container
tokens and which one of those tokens were active.  Thanks to Rule Md027 and the other
rules before it, I had some good design and code that I could reuse.
That was one part of the design taken care of.  Now on to the main
part of the design: dealing with both groups.&lt;/p&gt;
&lt;p&gt;Designing for that first group was easy.  For the opening of
the Fenced Code Block element, keep track of the token used the
last time the &lt;code&gt;next_token&lt;/code&gt; function was called.  If a start Fenced
Code Block token is encountered, check that “last” token to see
if it is a Blank Line token. The closing sequence is almost the same
but in reverse.  Once the end Fenced Code Block token is encountered,
set a variable to keep on looking for tokens.  In the next pass through
the &lt;code&gt;next_token&lt;/code&gt; function, check to see if that token is a Blank Line token.&lt;/p&gt;
&lt;p&gt;Logically, those two patterns came easy to me.  Track the Blank Lines in
case we find a start Fenced Code Block element that needs them and track
the Blank Lines after we found an end Fenced Code Block element.  Both
made sense.  That was easy… almost too easy.  Then the design for
the second group came into focus.&lt;/p&gt;
&lt;p&gt;For the second group, that design was going to require adjustments to
the existing design. For the opening part of the design, the “last”
token variable should only be
set if the token is not related to a container open or closing.  In that
way, it can span those container boundaries without any issues.  After
I ran through some simple examples in my head, I was sure that I had
the right design for the opening part.&lt;/p&gt;
&lt;p&gt;For the closing part, I started thinking that the same
consideration applies.  But after some thought, I realized it did not.
From the point of view of the Fenced Code Bock element, if it exists
inside of a container element, it makes sense to look after any end
tokens to determine whether any Blank Lines follow the Fenced Code Block
element.  The element does not care if those end tokens are there as
they simply offer a logical encapsulation of an element.  In most
cases, the end tokens do not represent actual text in the document.
Thus, if a new element and its token are present instead of the required
Blank Line, it should trigger the rule.&lt;/p&gt;
&lt;p&gt;Taking a second look at those designs, things looked solid.  It was time
to move on.&lt;/p&gt;
&lt;h3 id="testing-and-implementation"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After the massive 85 scenario tests last week for Rule Md027, I was happy when
I counted the scenario tests for this rule, and I ended up with 16 scenario tests.
They started with the simple tests without containers and quickly morphed
into those simple tests with containers.  The 16 scenario tests were a
quantity of scenario tests that I could easily deal with.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_end_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_end_token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Starting to work on the rule implementation, getting the tests
for the first group passing was the priority.  Following the
design, I created a simple function that dealt with the before
and after cases properly, as well as setting the last token.&lt;/p&gt;
&lt;p&gt;Handing off the processing of the before case to the
&lt;code&gt;__handle_fenced_code_block&lt;/code&gt; function, that function proved easy
to implement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__handle_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like the design specified, if the last token before the
start Fenced Code Block token is not a Blank Line, trigger the
rule.  Furthermore, because the design stipulates that end tokens
were not important, only non-end tokens will be in the
&lt;code&gt;__last_non_end_token&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;While the before case with the first function was easy to implement,
the handling of the after case and the &lt;code&gt;__handle_end_fenced_code_block&lt;/code&gt;
function was a bit trickier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__handle_end_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;line_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_fenced_code_block_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The detection part of the function was straight forward, taken
care of by the first statement and the last two statements of the
function.  The focus for this function was calculating the
deltas to apply to the token’s line number and column number.  As
end tokens do not contain any position information, the position of
the end token needs to be reconstructed using information from
the start Fenced Code Block token and the Text token within the
block.  Once that calculation was performed, a small variance was
needed to alter the column delta to compensate for any indent of
the end Fenced Code Block token, and it was done.&lt;/p&gt;
&lt;p&gt;Then it was on to the container tokens.&lt;/p&gt;
&lt;h3 id="the-second-group"&gt;The Second Group&lt;a class="headerlink" href="#the-second-group" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having track container tokens and their scopes for a couple of
rules, I have an established pattern for handling containers.  Therefore,
that code was easy to add at the start of the main function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To complete the handle of the before case, I needed to change
the &lt;code&gt;if&lt;/code&gt; statement around the setting of the &lt;code&gt;__last_non_end_token&lt;/code&gt;
variable.  To ensure that a new container does not disrupt
this check, the &lt;code&gt;if&lt;/code&gt; statement was changed slightly to ensure
that it does not set the &lt;code&gt;__last_non_end_token&lt;/code&gt; on either of
the end container tokens or the start container tokens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_end_token&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_non_end_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With those in place, the Blank Line checks in both
helper functions only required a simple change to ensure
that they would fire properly with start List elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Doing my usual due diligence, I went through the code and
tightened up variable names and organized the code to my standards.
I then went through and experimented with about ten different
container scenarios, checking to see if the rule fired properly
for each of them.  In each case, the rule fired properly, and I
was able to reduce the experimental scenario down to a scenario
that was already present in a scenario test.&lt;/p&gt;
&lt;h3 id="adding-configuration-support"&gt;Adding Configuration Support&lt;a class="headerlink" href="#adding-configuration-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With everything working and double checked, I added code to respond
to the &lt;code&gt;list_items&lt;/code&gt; configuration value.  Once loaded in the
&lt;code&gt;initialize_from_config&lt;/code&gt; function, responding to it in the code was easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;can_trigger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;can_trigger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__trigger_in_list_items&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;can_trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last example from the previous section was simply altered to
allow the rule to trigger in a general case.  In the case where
the trigger is occurring within a List element, it allows triggering
based on the configured value.  Not a bit change, but it was
nice that the scope was small.&lt;/p&gt;
&lt;p&gt;Checking everything again, I committed the change and started looking
at the next rule.&lt;/p&gt;
&lt;h2 id="list-elements-and-blank-lines"&gt;List Elements and Blank Lines&lt;a class="headerlink" href="#list-elements-and-blank-lines" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Knowing that there is efficiency in working on tasks that share
a common theme, I decided to find another rule that was not yet
implemented and deals with Blank Lines like Rule Md031.  I did not
have to look far before I found Rule Md032.   Dealing
with List elements and Blank Lines, I hoped that I could leverage
my work from Rule Md031 to get this rule implemented quickly.  But,
as always, design first before implementation.&lt;/p&gt;
&lt;h3 id="design_1"&gt;Design&lt;a class="headerlink" href="#design_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To be honest, I really did not do that much design on this rule.  Once
I started figuring out the design on paper, I quickly realized that
it was a watered-down version of Rule Md031.  There was the same
concern about working properly within containers, and the same concern
about tracking what happened at the start of the element and at the end
of the element.  Other than the token being tracked, they looked the same.&lt;/p&gt;
&lt;p&gt;Therefore, the change of token and my previous design for Rule Md031 made
it trivial to design.  Remove the logic for Fenced Code Block elements,
replace them with logic for the List elements, and I was practically done.&lt;/p&gt;
&lt;p&gt;From there, it was time for testing and implementation.&lt;/p&gt;
&lt;h3 id="testing-and-implementation_1"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Following the same process for generating test scenarios as with
Rule Md031, I quickly came up with a solid group of ten scenario
tests for this rule.  Like the design work for this rule,
almost all the scenarios were just slightly changed versions
of the scenarios from the previous rule.&lt;/p&gt;
&lt;p&gt;From there, it just made sense to use the code for Rule Md031
as a base, modifying it as needed.  This was not a difficult task.
The Block Quote token related portions of the rule did not change,
and the code for the Fenced Code Block tokens and List tokens
were merged.  Between those changes, it was less than
five minutes before I got the first scenario test to pass.
The rest of the scenario tests were passing in quick order
as well.&lt;/p&gt;
&lt;p&gt;Everything was quickly working properly in all scenarios, except for two
of the more unusual scenarios. In these scenarios, there is a transition
from a Block Quote element to a List element and then to another element.
To be honest, I do not remember every having written a document
where those elements were nested in that fashion, but as it is
allowable by the specification, I knew that I needed to support it.&lt;/p&gt;
&lt;p&gt;So, after doing some debugging with these scenarios, the solution
was to move one block of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_list_end_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_list_end_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to the start of the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_list_end_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__end_list_end_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on my debugging, the &lt;code&gt;if&lt;/code&gt; conditions that preceded the
original position of the statement were causing the other handlers
for the container tokens to be executed instead of that block of
code.  By placing it at the start of the function, the &lt;code&gt;if&lt;/code&gt; block was
guaranteed to be executed without the container tokens getting in the way.&lt;/p&gt;
&lt;p&gt;Having discovered and fixed this issue for Rule Md032, I started
to wonder if I had missed it as well in other rules that I had
recently worked on.  I needed to check it out.&lt;/p&gt;
&lt;h3 id="cleaning-up"&gt;Cleaning Up&lt;a class="headerlink" href="#cleaning-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In going over the scenario tests for this rule, I realized that I
may have missed some scenario tests in some of the rules that recently
worked on.  Adding additional scenario tests to those projects, I soon
had a small list of things that I fixed.&lt;/p&gt;
&lt;p&gt;Adding four scenario tests to the tests for Rule Md031, I found that
the Fenced Code Block elements within certain containers were not
behavior properly, as was the case for Rule Md032.  In that case, I
solved the issue in the same way by moving the end Fenced Code Block
handling to the top of the function.  A couple of extra passes over
the code, and everything looked good.&lt;/p&gt;
&lt;p&gt;Likewise, after adding four scenario tests to Rule Md022, I noticed
that I had missed some scenarios with the handling of the end Block
Quote tokens.  Taking some time to debug, the problems with these
scenarios proved easy enough to fix, simply requiring the addition of
&lt;code&gt;and not token.is_block_quote_end&lt;/code&gt; to two of the existing conditions.
While I initially added another three scenario
tests for a total of seven new scenario tests, I eventually decided
that those scenarios were duplicates of the base four scenarios and
removed them.&lt;/p&gt;
&lt;p&gt;Having done that work, I look at the scenario tests for Rule Md027,
to see if there was anything that I missed for that rule and found
nothing obvious.  However, during that exploration, I was not happy with the
way that the code looked and did some refactoring on the code to
make it clearer.  Nothing drastic, just little changes here and there
to make it read better.&lt;/p&gt;
&lt;h3 id="taking-the-time"&gt;Taking The Time&lt;a class="headerlink" href="#taking-the-time" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes I wonder if things like this just waste of my time.  I mean,
instead of taking time to look at issues like these, I could be starting
on a new rule or addressing some other issue.  But then I take a breath
and realized that it is the right thing for me to do.  In the above
cases, I found some new scenarios for what I was working on and wondered
if the more recent rules handled them properly.  The absolute worst
scenario was that I consumed time and did not get much in return.  The
absolute best is that I found issues in all three rules and fixed them.
As it was, I found issues in two of the rules, and code that I was
not 100% happy with in the third rule.&lt;/p&gt;
&lt;p&gt;Call me an optimist, but I think that was a good use of my time.  But
now that I had that finished, it was time to get one last rule in this
week.&lt;/p&gt;
&lt;h2 id="unordered-list-indentation"&gt;Unordered List Indentation&lt;a class="headerlink" href="#unordered-list-indentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes, I plan an order to my tasks to make my work more efficient.
Sometimes, I look back and wish that I had planned my work in a different
order so that I could be more efficient.  At my first glance of this
rule, I was not sure which of those categories this rule was in.&lt;/p&gt;
&lt;p&gt;The only way to find out?  Dig right in and get to work.&lt;/p&gt;
&lt;h3 id="design_2"&gt;Design&lt;a class="headerlink" href="#design_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At a high level, the design of this rule is simple: make
sure that there is an expected level of indentation for Unordered
List elements.  By itself, that was an easy concept to design for.  The
algorithm would assume that an item in an Unordered List element
would be indented by 2 space characters as a default.
Therefore, the very first List element would be a level 1 List element,
indented by 0 space characters, the List element within that List would
be a level 2 List element and indented by 2 space characters, as so on.
From a design point of view, that means checking the current indentation
against the equivalent of &lt;code&gt;level-1 * 2&lt;/code&gt;, and triggering if the indentation
is different.&lt;/p&gt;
&lt;p&gt;The interesting parts of that design were what followed that initial
design.  And yes, they are all about container tokens.&lt;/p&gt;
&lt;h4 id="container-tokens"&gt;Container Tokens&lt;a class="headerlink" href="#container-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The above design assumes that there is a simple definition of what the
current indentation is, and that is not always the case.  In the case
of this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the definition of current indentation on the first level is &lt;code&gt;0&lt;/code&gt;, and on
the second level is &lt;code&gt;2&lt;/code&gt;.  Those indentations are easy to calculate because there
is literally nothing before that List element on each line.&lt;/p&gt;
&lt;p&gt;But taking one step into container blocks, this simple example changes
that definition somewhat:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, the indentation for the first line is still &lt;code&gt;0&lt;/code&gt;, but the
indentation for the second line is &lt;code&gt;3&lt;/code&gt;.  This is because the level 1 List
element is an Ordered List element whose text and spacing creates a base
indentation of &lt;code&gt;3&lt;/code&gt;.  This means that the indentation of &lt;code&gt;3&lt;/code&gt; for the Level
1 Unordered List element is correct.  I had to remind myself (many times)
that while Ordered List elements and Unordered List elements are both List
elements, they are not the same.  And as they are not the same, they are
treated differently.&lt;/p&gt;
&lt;p&gt;This idea extends to Block Quote elements as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because the Block Quote element includes the space after the &lt;code&gt;&amp;gt;&lt;/code&gt; character,
it has a base indentation of &lt;code&gt;2&lt;/code&gt;.  Therefore, the Unordered List element
has an indentation of 0 spaces after the Block Quote sequence.&lt;/p&gt;
&lt;p&gt;Once nesting of container elements comes into play, things get messy quickly.
But at their basis are those three examples.  I worked through a couple or
the more complex nesting example and made sure that they are taken care of.
From what I could see from the ones I chose, things looked good.&lt;/p&gt;
&lt;h4 id="block-quotes-and-leading-spaces"&gt;Block Quotes And Leading Spaces&lt;a class="headerlink" href="#block-quotes-and-leading-spaces" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Having written a good design and implementation of traversal of Block Quote
tokens and their &lt;code&gt;leading_spaces&lt;/code&gt; lines, I knew that this design should
leverage that work.&lt;/p&gt;
&lt;p&gt;One of my refactoring rules is “Code it twice, on the fence; code it
thrice, don’t do it again”.  As this was the second time, I wanted to
try and capture the previous work in one or two functions that I
could refactor into the old rules with later.  What was important
to me was that I did not have to write it “one more time” after this.&lt;/p&gt;
&lt;p&gt;Keeping that in mind, I continued to design for the container tokens.&lt;/p&gt;
&lt;h4 id="designing-for-container-tokens"&gt;Designing For Container Tokens&lt;a class="headerlink" href="#designing-for-container-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Given those constraints and that research, I was now ready to design the tough
part of this rule: the definition of the current indentation.&lt;/p&gt;
&lt;p&gt;For the purposes of this rule, the current indentation is the number of spaces
required to get back to the last meaningful container token that serves as an
anchor for the Unordered List element.  If there are no such tokens, then the
anchor is the start of the line.  Because Unordered List elements nest nicely,
this means that the algorithm needs to go back to before any such nesting
occurs.  From there, the algorithm needs to leverage the data stored within
the other container tokens to establish that anchor token.  Once the anchor
token is established, the indentation for a token is the number of space
characters required to get back to that anchor token’s column.  Phew!&lt;/p&gt;
&lt;p&gt;While I had the general design figured out, I knew in advance that I was
going to have to be fluid with the second half of the implementation of
finding the anchor token.  I have written enough rules to know that sometimes
the List elements and Block Quote elements can play off each other in
weird ways, and I needed to consider that from the outset. To me,
this was not going “meh, I’ll design it later”, it was “I cannot design
it until I get there”.  Seeing as I have been very good at doing design
before implementation, one intentional deviation with a good reason
behind it wouldn’t hurt.&lt;/p&gt;
&lt;h3 id="testing-and-implementation_2"&gt;Testing and Implementation&lt;a class="headerlink" href="#testing-and-implementation_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Working through all the scenarios, I ended up with 28 scenarios to
test.  The good part of that is that 9 of those scenario tests were
from the refactored &lt;code&gt;leading_spaces&lt;/code&gt; code, so hopefully this would
be one of the last times those needed to be tested.&lt;/p&gt;
&lt;p&gt;Moving on to the &lt;code&gt;next_token&lt;/code&gt; function, it started simple and
remains simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manage_container_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The core of this rule is very simple.  If the token is starting
an Unordered List element or is a new List Item within an existing
Unordered List element, the rule needs to check if it is properly
indented.  Otherwise, the &lt;code&gt;manage_container_tokens&lt;/code&gt; function manages
the container token stack’s &lt;code&gt;__container_token_stack&lt;/code&gt; variable and any required
index into a Block Quote token’s &lt;code&gt;leading_spaces&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;For the small portion of tokens that get selected for further checking,
the &lt;code&gt;__check&lt;/code&gt; function handles that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;container_base_column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;block_quote_base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;list_depth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__calculate_base_column&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;list_depth&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;adjusted_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;container_base_column&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block_quote_base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;container_base_column&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;block_quote_base&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;container_base_column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;container_base_column&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;calculated_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list_depth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__indent_basis&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;adjusted_column_number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;calculated_column_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Per the design, the base column and two other variables are
calculated based on what is currently in the &lt;code&gt;__container_token_stack&lt;/code&gt;
variable.  With that information, the token’s &lt;code&gt;column_number&lt;/code&gt; field can
be adjusted to switch from a column number based on the line to an
indentation based on the anchor token.  Then, using the &lt;code&gt;list_depth&lt;/code&gt;
variable, the &lt;code&gt;calculated_column_number&lt;/code&gt; variable can be calculated,
leading to a comparison between the &lt;code&gt;calculated_column_number&lt;/code&gt; variable
and the &lt;code&gt;adjusted_column_number&lt;/code&gt; variable.&lt;/p&gt;
&lt;h4 id="calculating-the-base-column"&gt;Calculating The Base Column&lt;a class="headerlink" href="#calculating-the-base-column" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Calculating the base column turned out to be the function that
took the most time to figure out.  As I noted before, I allowed for
a certain amount of fluidity in the design for this function, and I
used most of it up getting this function right.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__calculate_base_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;container_base_column&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;block_quote_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;list_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;list_depth&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;ignore_list_starts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;ignore_list_starts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;container_base_column&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
                &lt;span class="n"&gt;ignore_list_starts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;bq_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;block_quote_base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;block_quote_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container_base_column&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                        &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bq_index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;container_base_column&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bq_index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;ignore_list_starts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
            &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;container_base_column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block_quote_base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_depth&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the scenarios that do not have any tokens in the token stack, this
function returns simple default values.  Otherwise, this function starts
at the end of the stack and works its way to the start of the list.&lt;/p&gt;
&lt;p&gt;The first &lt;code&gt;while&lt;/code&gt; loop gets rid of the easy tokens on the stack: the
Unordered List tokens.  As these tokens stack together nicely, nothing
special is needed in processing these tokens other than incrementing
the &lt;code&gt;list_depth&lt;/code&gt; variable for later.&lt;/p&gt;
&lt;p&gt;The second &lt;code&gt;while&lt;/code&gt; loop takes care of the other container tokens.  Once
again, if there is nothing left on the stack (i.e. &lt;code&gt;stack_index == 0&lt;/code&gt;),
nothing more processing is needed.  However, if there are more tokens
left on the stack, they are Block Quote tokens and Ordered List tokens.
To properly figure out what the base column is, those tokens need to
be examined until the beginning of the stack is reached.  At that point,
the proper base column should be in the &lt;code&gt;container_base_column&lt;/code&gt; variable.&lt;/p&gt;
&lt;h4 id="taking-the-long-way"&gt;Taking The Long Way&lt;a class="headerlink" href="#taking-the-long-way" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It took quite a bit of effort and time to figure out the
base column part of this rule, even if it was theoretically
simple.  I was right in thinking that the List elements and the
Block Quote elements would play off each other.  As it is,
I went a couple of levels deep in the container elements and
got those right, but I didn’t go deeper.  In hindsight, I am hesitant
to say that I got all the combinations of container elements.  However,
I am confident enough to say that I believe I got most of the
combinations that matter.&lt;/p&gt;
&lt;p&gt;And with that, I stopped working on the rule and started
working on this article.  Taking a couple of breaks, I did
my usual cleaning up and linting of the rule, before committing
it to the project.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From a pure numerical standpoint, the number of completed rules
is now 23 and the number of rules remaining is now 8.  As my
expected benchmark was 3 completed rules per week, I was
successful in meeting that goal.  From a quality point of
view, I was able to find a handful of new parser issues, logging
them for future fixing.  While they will require future work to fix
them, I see those issues as issues that users of the project will not find.
And from an efficiency point of view, things were going well.
My adherence to my design rules were serving me well and keeping
me focused.&lt;/p&gt;
&lt;p&gt;The only negative?  I still have 8 rules left to finish.  I know
it might sound like whining, but I really want to get those rules
implemented so I can release and fix the issues that I have found.
And because of that impatience, I had to take a couple of extra
breaks this week to make sure that I was working on the project
with the right mindset.&lt;/p&gt;
&lt;p&gt;And yes, I am a glass-half-full type of guy.  How did you guess?&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It felt good to get more than one rule done.  For next week,
I know I am going to be close to finishing off the rules,
but I won’t know if I get there until next Sunday. Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Dealing With Rule Md027</title><link href="https://jackdewinter.github.io/2021/08/16/markdown-linter-dealing-with-rule-md027/" rel="alternate"></link><published>2021-08-16T00:00:00-07:00</published><updated>2021-08-16T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-08-16:/2021/08/16/markdown-linter-dealing-with-rule-md027/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/09/markdown-linter-continuing-progress-on-implementing-new-rules/"&gt;last article&lt;/a&gt;, I talked
about how my effort to work efficiently continues to pay dividends for the project.
In this article, I talk about the work I put into getting Rule Md027 implemented.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Everyone has something that they are particular about.  Depending on the person,
there …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/09/markdown-linter-continuing-progress-on-implementing-new-rules/"&gt;last article&lt;/a&gt;, I talked
about how my effort to work efficiently continues to pay dividends for the project.
In this article, I talk about the work I put into getting Rule Md027 implemented.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Everyone has something that they are particular about.  Depending on the person,
there might be a collection of things they are particular about.  While a few
of my things deal with “just making sense”, the one that I hit the
other week was with not getting something done.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong.  If you ask me to move a mountain, I will not be upset if
I don’t get that done.  Now, if you ask me to organize a conference because no
one else can do it, and if I have the support, I will give it my best shot.
I will probably kick myself along the way for the things that I didn’t anticipate
ahead of time, but I won’t kick myself too hard.  After all, I have never organized
a conference before.&lt;/p&gt;
&lt;p&gt;But designing a rule for the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown project&lt;/a&gt;?
I thought I could do that while sipping on a cold beverage and nibbling on some
carrot cake with the tunes up loud.  But a couple of weeks ago, I hit Rule
Md027 and that changed.  Given a 30-minute design window, I couldn’t even get
a basic design off the ground.  Even with a 10-minute extension, I was still
at ground zero.  It wasn’t that I didn’t get it done, it was that I should
have been able to get it done and didn’t.  It weighed on me.&lt;/p&gt;
&lt;p&gt;I didn’t want to let that negativity get in the way of the other rules, so
I decided to give myself a week to design and implement the rule properly.
I wanted to get it done in less than a week, but if it took that long, it
took that long.  I just wanted to get it done.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred on
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d34c7ed2248c4728ce4c14b812bad6a6a2c87289"&gt;15 Aug 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="i-do-not-give-up-easily"&gt;I Do Not Give Up Easily&lt;a class="headerlink" href="#i-do-not-give-up-easily" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Roughly two weeks ago, at the start of my efficiency push, I started to
work on
&lt;a href="https://jackdewinter.github.io/2021/08/02/markdown-linter-making-progress-on-new-rules/#rule-md027-false-start"&gt;Rule Md027&lt;/a&gt;,
but failed to make it out of the design phase.  This week, I decided that
I was going to go back to that rule to properly design and implement it.&lt;/p&gt;
&lt;p&gt;Why? Because I do not give up easily.  I have pride in my work, and the fact
that I had to bail on this rule, even temporarily, just did not sit right with
me.  This time, I knew I needed to give myself as much design time as I
needed to get the design right.  In the end, it took about five hours and
two small redesigns to make it happen.  The important thing is that I got there.&lt;/p&gt;
&lt;h3 id="deciding-to-use-token-rules"&gt;Deciding To Use Token Rules&lt;a class="headerlink" href="#deciding-to-use-token-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The big problem that my design faced was that I needed to work off the
token information, not the line information.  However, I tried to not
acknowledge that and work with the line information instead.  Call me stubborn,
but I thought it would be easier to design it that way.  I knew that working
with line information on this rule would still be difficult, I just figured
that working with lines wouldn’t be as difficult as working with tokens.&lt;/p&gt;
&lt;p&gt;From my original research on the original rule, it was clear that certain
lines, such as a line in a HTML Block element, did not trigger the original
rule.  Thinking things out, this made sense to me.  When specifying a HTML
Block element, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="c1"&gt;-- this is an example --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the author is very specific that anything within that HTML Block be represented
as-is in the document.  Therefore, it the author specifies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;look&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this new rule should assume that the author specifically decided to include that
extra space within the HTML Block.  The same argument follows for Fenced
Code Block elements and Indented Code Block elements.&lt;/p&gt;
&lt;p&gt;I tried to find a way to work around cases like that one, and others,
but they all ended up being too expensive from a design point of view.  The
token already had this
information translated for me, so working with line information would
mean repeating some of that work to get this rule triggering correctly.
Thinking about it long and hard, I decided in the end that working
with the token information made more sense.  But I was also aware that
working with tokens would still require a fair amount of work.&lt;/p&gt;
&lt;h3 id="the-cost"&gt;The Cost&lt;a class="headerlink" href="#the-cost" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I write rules that are line based, the calculations for where a given
rule triggers are easy: calculate the number of characters since
the start of the line and pass it to the &lt;code&gt;report_next_line_error&lt;/code&gt; function
which reports that the rule was triggered.  Quick, easy, done.  With tokens,
it becomes a bit more complicated than that.&lt;/p&gt;
&lt;p&gt;The difficult part about reporting on the triggering of a given token-based rule
is that the engine is restricted to information available in
the token.  For any single token, the only constants are the starting position
of the token and the information contained within the token.  Anything
that needs to be provided to report on the triggered rule needs to be
calculated from that.&lt;/p&gt;
&lt;p&gt;It is not a high cost, but it costs the project the time required to
properly figure out the equation used to translate between the position
of the token and the position where the rule is triggered.  And based
on my research, that calculation was going to be different for each token.&lt;/p&gt;
&lt;h3 id="designing-for-the-container-tokens"&gt;Designing For The Container Tokens&lt;a class="headerlink" href="#designing-for-the-container-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given all that information and a whole bunch of scribbles that I
used to work out issues, I was ready to focus on the design.  I knew
that the design was going to entail multiple levels of effort, but I
was prepared for that.&lt;/p&gt;
&lt;p&gt;At the top level of the design are the container tokens, the two List tokens
and the Block Quote tokens.  As the rule is invoked for each token in
turn, the top level needs to track what container token is the one
that is currently active.  I consider a container token currently active if it is the
container token that is deepest in a stack of all container tokens
that have been opened but not closed.  The reason that this is
important is because Block Quote elements and List elements are
container elements, and therefore they can contain any container element
or leaf element.  Therefore, when processing the top level of the
tokens, the algorithm needs to track this information and only act
on any non-container tokens if those tokens occur while a Block
Quote token is active.&lt;/p&gt;
&lt;p&gt;Basically, if this rule is called with a Markdown document that looks
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then the rule should never take any action for the text &lt;code&gt;this is a test&lt;/code&gt;
outside of the top level of the design, because it never hits a state
where that text is encountered, and a Block Quote is currently active.&lt;/p&gt;
&lt;p&gt;It is only those cases where a Block Quote token is currently active
that processing needs to proceed to the next level of the design. It
is with scenarios like the following where that extra processing is
needed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Therefore, as part of the design, I knew I would have to keep track of the
current line of the active Block Quote token.  The information about
which characters started any line within a Block Quote token is stored
with the active Block Quote token.  While that information would not
affect whether the rule would trigger, I knew that it will be needed to
provide for an accurate column number of where the rule triggered.  If
the current Block Quote line is not correct, then the column number would not
be correct.  Not as bad as not triggering the rule, but still important.&lt;/p&gt;
&lt;p&gt;With the container tokens dealt with, I needed to deal with the handling
of leaf tokens within the scope of an active Block Quote token.  That
was next!&lt;/p&gt;
&lt;h3 id="designing-for-the-leaf-tokens"&gt;Designing For The Leaf Tokens&lt;a class="headerlink" href="#designing-for-the-leaf-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having dealt with the container tokens, in the next level of the design
I needed to deal with leaf tokens.  Trying to break things down into
manageable blocks of work, I organized the leaf tokens into four classes
that I needed to design for: single line tokens, complex single tokens,
text encompassing tokens, and everything else.&lt;/p&gt;
&lt;p&gt;For the single line tokens, the action to take is relatively easy.
Single line elements such as the Thematic Break element only have one
line, so a simple check is required to determine if the rule is triggered.
Once that check has been performed, only the current Block Quote line needs
to be updated.&lt;/p&gt;
&lt;p&gt;The next tokens to consider are the complex single tokens.  Currently the
only token that falls into this category is the Link Reference Definition,
but I am sure future work will add more tokens like this.  This group is
specific to tokens like the Link Reference Definition token where a single
token is defined with complex parts.  That makes this group unique
because while the rules for a newline within a part may be vary from
part to part, the triggering of this rule on any eligible whitespace
between parts is constant.  That is why the following Markdown document
will only trigger on this rule three times:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lab&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="ss"&gt;"tit&lt;/span&gt;
&lt;span class="ss"&gt;&amp;gt;  le"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The three trigger points are the whitespace on the first line before the
Link Label, the whitespace on the third line before the URL, and the
whitespace on the fourth line before the title.  Each of them deals with
whitespaces.  The other lines are special.&lt;/p&gt;
&lt;p&gt;The next group of tokens, and the largest of the four groups, are the
text encompassing tokens.  What makes this group interesting is that
the handling of any Text tokens within the scope of these tokens is
dependent on the type of token that contains them.  The handling
for text in either of the two Code Block elements or HTML Block element
is different from the text in a SetExt Heading element, which is also
different from the text in the Atx Heading element or the Paragraph element.
From a design point of view, that meant that I would have to track
whichever of those encompassing tokens was active to enable me to
properly deal with any encompassed text.&lt;/p&gt;
&lt;p&gt;With all those tokens out of the way, any remaining tokens fall into
a simple group called “everything else”.  This includes tokens like the
Emphasis token used to denote Emphasis within a block of text. The
distinction for these tokens is that there is no way that any of these
tokens can trigger the rule to occur, so they can be dismissed.  With
each token in this group, the nature of the token just precludes it
from being interesting to this rule.&lt;/p&gt;
&lt;h3 id="designing-for-the-inline-tokens"&gt;Designing For The Inline Tokens&lt;a class="headerlink" href="#designing-for-the-inline-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After designing for the other two classes of tokens, the only class that
was left to design for was the Inline tokens class.  Looking over the
use cases for teach token, I determined that I only needed to design for
three tokens: Links, Raw HTML, and Code Spans.  With every other inline
token, the token is interpreted inline or defined as to not exceed a
single line.  Therefore, if there are any extra space characters before that
token is encountered, those characters will be placed into a Text token.
That meant I only had to deal with the three outliers.&lt;/p&gt;
&lt;p&gt;The Raw HTML token and the Code Span tokens were the easy ones to design
for.  Everything within the token is eligible, so one simple check is
sufficient.  But with the Link tokens, there are multiple parts, such as the
Link Labels, which are not eligible, and parts like the whitespace, which
are eligible.  Not too much of a difference, but one to keep track of.&lt;/p&gt;
&lt;p&gt;Once one of those tokens triggered the rule to fire, I knew I would
have some non-trivial calculations to figure out the proper line
number and column number.  Because these tokens occur within leaf
tokens, I knew that I would have to do some interesting work to merge
the results of any of these tokens with their &lt;em&gt;parent&lt;/em&gt; tokens.  But
I was okay with designing that part of the algorithms when I got to
it.&lt;/p&gt;
&lt;h2 id="starting-to-implement"&gt;Starting To Implement&lt;a class="headerlink" href="#starting-to-implement" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As with any good Test-Driven Development practitioner, I looked at
my scribbled notes and started writing scenario tests for each
of the scenarios I was interested in.  For each scenario test, I
created a new Markdown document in the &lt;code&gt;tests/md027&lt;/code&gt; directory
and an accompanying disabled test in the &lt;code&gt;test_md027&lt;/code&gt; Python module.&lt;/p&gt;
&lt;p&gt;Going through all the relevant examples on my testing worksheet,
I ended up with 81 disabled scenario tests when I was done.  From
start to finish, it took me just over three and a half hours (including
short breaks) to add all those scenarios and their tests into the project.
To be clear, that was not getting the tests working, just entering them
in a disabled state.&lt;/p&gt;
&lt;p&gt;From that effort, I knew that implementing this rule was not going to be
something that would be done in a day.  I was hoping I could keep it
to a week.&lt;/p&gt;
&lt;h3 id="implementing-for-the-container-tokens"&gt;Implementing For The Container Tokens&lt;a class="headerlink" href="#implementing-for-the-container-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As designed, the first thing that I needed to code was high-level
handling of the container tokens.  This proved to be very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;num_container_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;newlines_in_container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; 
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_within_block_quotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without missing a beat, this followed the design that I had specified.
The &lt;code&gt;self.__container_tokens&lt;/code&gt; list maintains what the active container
token is, being modified by both List tokens and Block Quote tokens. If
a Block Quote token is encountered, a bit more work is done to add an
entry in the &lt;code&gt;self.__bq_line_index&lt;/code&gt; dictionary to track the index within
the Block Quote.  Finally, if the &lt;code&gt;token&lt;/code&gt; variable is set to a non-container
token and the active container token is a Block Quote token, then the
&lt;code&gt;__handle_within_block_quotes&lt;/code&gt; function is called to handle the processing.&lt;/p&gt;
&lt;p&gt;With the container tokens design dealt with, it was on to the leaf tokens.&lt;/p&gt;
&lt;h3 id="implementing-for-the-leaf-tokens"&gt;Implementing For The Leaf Tokens&lt;a class="headerlink" href="#implementing-for-the-leaf-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For any readers who follow these articles, it should come as no surprise
that I started implementing the &lt;code&gt;__handle_within_block_quotes&lt;/code&gt; function
as one humongous function.  As I have mentioned in other articles,
I prefer to code first, refactoring later when I have a more complete
picture of the code in question.&lt;/p&gt;
&lt;h4 id="starting-with-paragraphs"&gt;Starting With Paragraphs&lt;a class="headerlink" href="#starting-with-paragraphs" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For no other reason than Paragraph elements showing up more than any
other elements, I decided to start my work on the &lt;code&gt;__handle_within_block_quotes&lt;/code&gt;
function with them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__handle_within_block_quotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;num_container_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_leaf_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;line_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;calculated_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line_index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                        &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="n"&gt;calculated_column_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Paragraph token is a special scenario in the PyMarkdown project.
But because Paragraph elements are the most common elements in Markdown, I
wanted to get it out of the way.  Due to the constraints of the
Paragraph element, any leading spaces on a line within a Paragraph element
are skipped.&lt;sup id="fnref:example192"&gt;&lt;a class="footnote-ref" href="#fn:example192"&gt;1&lt;/a&gt;&lt;/sup&gt;  But because the PyMarkdown project deals in tokens
and not HTML, any skipped or translated characters must be accounted for in
the token.  Therefore, the Paragraph token contains a &lt;code&gt;leading_spaces&lt;/code&gt; property
to contain those skipped spaces, separated by newline characters for readability.&lt;/p&gt;
&lt;p&gt;Given that background, the code within the bounds of the &lt;code&gt;if token.is_paragraph&lt;/code&gt;
part of the function use that &lt;code&gt;leading_spaces&lt;/code&gt; property to figure out if any of
the individual lines begin with whitespace.  Once split into separate lines, a simple
iteration over the lines and a check for &lt;code&gt;if next_line&lt;/code&gt; determines if leading
whitespace was removed for that line.  If so, the real fun begins.&lt;/p&gt;
&lt;p&gt;As Paragraph elements can contains multiple lines of text, calculations
are performed to determine where in the paragraph the triggering
occurred.  The change from the token’s line number is easy to figure out.
Enumerating through the various lines in the &lt;code&gt;leading_spaces&lt;/code&gt; property,
the change is simply the iteration through the &lt;code&gt;for&lt;/code&gt; loop.  To keep things
simple, I named this variable &lt;code&gt;line_number_delta&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For the column number, there is no way around using the line prefix information
stored in the Block Quote token.  Since the number of lines into the Block
Quote is kept track of in the &lt;code&gt;self.__bq_line_index&lt;/code&gt; dictionary, the function
needs to calculate the proper index into that prefix list.  By taking the current
Block Quote token’s entry in that table and adding the iteration through the loop
(&lt;code&gt;line_number_delta&lt;/code&gt;), the proper index is obtained.  With that calculation, the
length of the Block Quote prefix for that line is looked up, its length computed,
and the rule is triggered with a call to &lt;code&gt;report_next_token_error&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, to make sure the index within the Block Quote token remains
correct, the entry in the &lt;code&gt;self.__bq_line_index&lt;/code&gt; dictionary is updated
to include the number of newline characters in the paragraph.&lt;/p&gt;
&lt;p&gt;Phew! To be honest, I had some confidence that this would be one of the more difficult
elements to get right, and I was correct.  But it was also good that I
dealt with it early.  By working on this code and the ten or so tests
that deal directly with paragraph elements, I gave myself a good
example that I could use as a reference point.&lt;/p&gt;
&lt;p&gt;And the testing was pivotal.  I was able to comment out the &lt;code&gt;skip&lt;/code&gt;
test attribute, run the tests, and make any adjustments as necessary.
Slowly, the scenario test for Rule Md027 were starting to pass!&lt;/p&gt;
&lt;h4 id="on-to-single-line-elements"&gt;On To Single Line Elements&lt;a class="headerlink" href="#on-to-single-line-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While it may be an oversimplification, the remaining handlers that I wrote
for handling their tokens are just variations on the Paragraph handler
from the last section.  Starting with the handler for Thematic
Break tokens, it was easier to implement than the Paragraph token’s
handler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_thematic_break&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the exact information is already stored within the token, and because
that information cannot span lines, that handler simply checks to see
if the token was prefaced with any whitespace.  When that scenario
occurs, the reported position is adjusted by providing a new
calculation for the column number to report.  This is required because
negative deltas are used to present absolute positions on the line, and
not negative changes to the token’s column number.  As such, the
&lt;code&gt;column_number&lt;/code&gt; is used as a base, subtracting the length of the found
whitespace, and reporting that as the absolute start.&lt;/p&gt;
&lt;p&gt;After that calculation, adding &lt;code&gt;1&lt;/code&gt; to the proper &lt;code&gt;__bq_line_index&lt;/code&gt; entry
was trivial.  It needed to account for the single line containing the
Thematic Break, so adding &lt;code&gt;1&lt;/code&gt; made sense.  And the &lt;code&gt;if&lt;/code&gt; statement for
&lt;code&gt;token.is_blank_line&lt;/code&gt; was even simpler, because the token’s line number
and column number are always the position where the rule triggers.
Hence, no &lt;code&gt;column_number_delta&lt;/code&gt; variable was required.&lt;/p&gt;
&lt;h4 id="complex-elements"&gt;Complex Elements&lt;a class="headerlink" href="#complex-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Link Reference Definitions tokens are essentially the same as
the previous two elements, just with more parts to take care of.  The
first part of handling this element is practically a copy of what
was written to handle the Thematic Break token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_link_reference_definition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;scoped_block_quote_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_name_debug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_destination_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_title_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_title_raw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main difference so far is that the calculation for the number of
lines in the Paragraph token is a bit more complex.  Once that was
taken care of, I was able to work on the other two parts of that
handler: the whitespaces.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_destination_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_destination_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;line_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_name_debug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="n"&gt;split_array_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scoped_block_quote_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;specific_block_quote_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;split_array_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;specific_block_quote_prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first handler looks like parts of the handler for the Paragraph token.
Once that whitespace is found, a bit more work is required to calculate the
&lt;code&gt;column_number_delta&lt;/code&gt; variable, but it just a variation of previous work.
Instead of using the &lt;code&gt;line_number_delta&lt;/code&gt; returned by the &lt;code&gt;enumerate&lt;/code&gt; function,
it is computed based on the parts of the element that come before that
whitespace, the information in the &lt;code&gt;token.link_name_debug&lt;/code&gt; variable.
The Block Quote token’s &lt;code&gt;leading_spaces&lt;/code&gt; variable is then split and the
index into that list of split values is calculated.  Then, just as with
the Paragraph token’s handler, the &lt;code&gt;column_number_delta&lt;/code&gt; variable is set
to the length of that line’s prefix.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_title_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_title_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;line_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_name_debug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_title_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;split_array_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scoped_block_quote_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;specific_block_quote_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;split_array_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;specific_block_quote_prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is again copied, almost verbatim, to handle the next whitespace part
of the Link Reference Definition token.  They are close enough to each
other that I will probably refactor them together in a future refactoring
effort.&lt;/p&gt;
&lt;p&gt;Once again, the handling of this token was just repeating the work done
previously, with some small alterations.&lt;/p&gt;
&lt;h4 id="encompassing-elements"&gt;Encompassing Elements&lt;a class="headerlink" href="#encompassing-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;With most of the other work done, it was time to focus on the
encompassing elements.  To start, I picked the Atx Heading token,
which contains the Heading text between the Atx Heading token
and the end Atx Heading token.  To ensure that the function knows
it is dealing with another token between those two tokens, I added
some very simple handling of those Atx Heading tokens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_leaf_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bq_line_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_container_tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_leaf_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While there are variations on this code, like Fenced Code Block elements or
SetExt Heading elements which have a close line, almost all the encompassing
block handler functions are like this.  The only outlier is the end Fenced Code
Block toke handler, which has information about the closing fence characters.
But even that handler is simple, reusing elements from the Link Reference
Definition handler.&lt;/p&gt;
&lt;p&gt;Now that the rule knows a token was found within one of these encompassing
elements, it was time to implement the handler for the Text token.  The
text within a SetExt Heading element is specially encoded to handle the
start and end of the line differently than a Paragraph token, so that
took a lot of the work.  The Code Block tokens and the HTML Block tokens
were easy to handle.  For those tokens, the text is as written, so no
analysis is needed.  Because of that, incrementing &lt;code&gt;__bq_line_index&lt;/code&gt;
was all that was required.&lt;/p&gt;
&lt;p&gt;And with that, I checked my handy list of things that I needed to
implement, and everything was checked off.  Along the way I had found
three different parser bugs and added them to the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/issues.md"&gt;Issues List&lt;/a&gt;
to deal with later.&lt;/p&gt;
&lt;p&gt;Things looked good with the rule, but I wanted to make sure I
had addressed every issue that I could find.  Therefore, it was
time to start looking over the scenario tests and double checking
everything.&lt;/p&gt;
&lt;h2 id="simple-refactoring"&gt;Simple Refactoring&lt;a class="headerlink" href="#simple-refactoring" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having completed the large handler function for tokens, before
I went on, I knew that I needed to refactor it into separate
functions.  So, taking my time, I carefully created a new function
for each token, moving the handler code into that new function.&lt;/p&gt;
&lt;p&gt;With the solid suite of scenario tests to back me up, I was
confident that any issue I introduced would be found.  But
that got me thinking.  Did I miss something?&lt;/p&gt;
&lt;h2 id="double-checking"&gt;Double Checking&lt;a class="headerlink" href="#double-checking" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Wanting to have confidence that I completed everything, I started
going through the scenario test data and validated that I had
taken care of all the scenarios that I could think of.  Along
the way, I added four more tests to the rule, bringing the
total of scenario tests to 85.&lt;/p&gt;
&lt;p&gt;And I even found another bug.  Well, not really a bug, but
an inconsistency.  Given the Markdown document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;simple&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the test failed with an unmatched Block Quote index.  Basically, the
number of newlines in the Block Quote token was not equal to the
number of newlines collected within the Block Quote.&lt;/p&gt;
&lt;p&gt;After a quick look, I was interested to find that in the above case,
the Block Quote token’s &lt;code&gt;leading_spaces&lt;/code&gt; field did not end with a
newline character.  Verifying that this seemed to be the only case
where it happened, I added this code to the &lt;code&gt;next_token&lt;/code&gt; function to
deal with it for now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
        &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__container_tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;newlines_in_container&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Everything was good… until it wasn’t.&lt;/p&gt;
&lt;h3 id="dropping-the-ball-on-inline-elements"&gt;Dropping The Ball On Inline Elements&lt;a class="headerlink" href="#dropping-the-ball-on-inline-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I blame myself for doing something careless, I am just not sure
when I did it.  At some point along the weeklong implementation
of this rule, I had entries for Code Span, Raw HTML, and Links
on my To-Do list.  And somewhere along the line, I checked them
off.&lt;/p&gt;
&lt;p&gt;What is even more embarrassing is that I double check my tests
and implementations to try and make sure that I don’t miss
things like this.  But when I did my double checks, I double
checked to ensure that I had all the correct scenario test
data.  And I did include scenario test data for those three
elements… I just never added the tests for them. I did not
think I had added one without the other, but obviously I did
for those elements.&lt;/p&gt;
&lt;p&gt;As I found this out at 6pm on Sunday night, it was too late
to add in any fixes at that point.  So, I put it on a short
list of things to fix, and I want to get to it when I have some
spare time in between writing the other rules.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the picture of a scoreboard that I have scribbled
on a piece of paper on my desk, the number of completed rules is
now 20 and the number of rules remaining is now 11.  I hope
that I don’t find many more rules like Rule Md027, but I
am confident I can still get the rules done quickly.&lt;/p&gt;
&lt;p&gt;As to how I feel about Rule Md027, I must admit that it is
a bit of mixed bag.  On one hand, it was a monster rule, and
it took good design followed by good implementation to get it
to this point.  But the shadow of having missed the three
inline elements is also present.  To throw things in the
positive again, I did find a few parser bugs, which means
I can fix them before users find them.  As I said, a mixed
bag.&lt;/p&gt;
&lt;p&gt;But in the end, I am still positive about how things are going.
Once I get the rules done, or at least a good first pass at
the rules, I am thinking about releasing a minor version
to include the new rules.  I think this is still a probable
thing, and I am kind of looking forward to it.&lt;/p&gt;
&lt;p&gt;So yeah, I took some bumps, and I got some bruises.  But
I also got a monster of a rule mostly done.  That feels good!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a week of focusing only on one rule, I wanted to get back to making
more progress.  I hope I get more done this week!  Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:example192"&gt;
&lt;p&gt;See &lt;a href="https://github.github.com/gfm/#example-192"&gt;example 192&lt;/a&gt; in the GFM specification. &lt;a class="footnote-backref" href="#fnref:example192" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Continuing Progress On Implementing New Rules</title><link href="https://jackdewinter.github.io/2021/08/09/markdown-linter-continuing-progress-on-implementing-new-rules/" rel="alternate"></link><published>2021-08-09T00:00:00-07:00</published><updated>2021-08-09T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-08-09:/2021/08/09/markdown-linter-continuing-progress-on-implementing-new-rules/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/02/markdown-linter-making-progress-on-new-rules/"&gt;last article&lt;/a&gt;, I talked
about my efforts to streamline the rule implementation process and how that went.
In this article, I talk about how that effort continues to pay dividends for
the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having looked at the tasks that I need to complete before I even …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/08/02/markdown-linter-making-progress-on-new-rules/"&gt;last article&lt;/a&gt;, I talked
about my efforts to streamline the rule implementation process and how that went.
In this article, I talk about how that effort continues to pay dividends for
the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having looked at the tasks that I need to complete before I even remotely think
about another beta version release for the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project,
it was obvious to me that I need to implement more linting rules.  Having completed
a big push over the last six months for foundational work, the foundation of
the project was looking stronger than ever.  But without a good set of rules to
provide a decent linting experience, the project is essentially just a very “expensive”
&lt;a href="https://github.github.com/gfm"&gt;GitHub Flavored Markdown&lt;/a&gt; parser with
some extra features on top.  From my point of view, it was essential to get
more rules completed.&lt;/p&gt;
&lt;p&gt;So now, after a couple of weeks of working on this task and some strict
development rules for myself, just over one third of the remaining rules
are now implemented.  Not bad for two weeks’ worth of work!  But I
had to keep that enthusiasm in check, making sure it did not become
complacency.  It was some good progress, but there are still a lot more
rules that need to be implemented.  So, I wanted to keep my enthusiasm,
but at the same time keep it in check with some solid pragmatism.&lt;/p&gt;
&lt;p&gt;Given that, some confidence, and a somewhat clear calendar for the week,
I started to work on more linting rules!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/20509ae5bb5b11ff8a9fce8de1452bb5016d10d9"&gt;05 Aug 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/267027d3d6a411accf4944a04d7755c6624f7dec"&gt;08 Aug 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="working-fast-and-efficiently-part-two"&gt;Working Fast and Efficiently - Part Two&lt;a class="headerlink" href="#working-fast-and-efficiently-part-two" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After adding seven new rules last week, I was eager to get back to work
on the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project
and see if I could implement another seven rules this week.  I was
confident that I had the energy and the effort, but I was not sure if
the remaining rules would lend themselves to the rapid design and
implementation that made achieving the previous week’s progress possible.&lt;/p&gt;
&lt;p&gt;Regardless of what those remaining rules looked like, I wanted to try
and keep to my
&lt;a href="https://jackdewinter.github.io/2021/08/02/markdown-linter-making-progress-on-new-rules/#working-fast-and-efficiently"&gt;two personal rules&lt;/a&gt;
from last week, the 30 minutes design rule and the 2 hour implementation rule,
to see how many more rules I could implement.  If
nothing else, I knew that I could use small variations of those personal
rules to keep me centered and focused on the tasks at hand.  As
I know that I occasionally have problems with focus, so the
decision to keep with a process that helps me keep focus on
the right tasks was not a difficult one to make.&lt;/p&gt;
&lt;p&gt;So, with some optimism in mind, I started working on the
new set of rules for this week!&lt;/p&gt;
&lt;h2 id="rules-md039-and-md040-getting-lucky"&gt;Rules Md039 and Md040 - Getting Lucky&lt;a class="headerlink" href="#rules-md039-and-md040-getting-lucky" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Picking up the next rule, &lt;em&gt;Md039 - Spaces inside link text&lt;/em&gt;, I was lucky
that I was able to complete the design within five minutes.  When I say
that, I am not being flippant or exaggerating about my design skills…
the design of the rule was just that easy.  It
was easy enough that I decided to look ahead at the following rule &lt;em&gt;Md040 - Fenced code
blocks should have a language specified&lt;/em&gt;, to see if it followed the same
pattern.  Luckily enough, it did! In both scenarios, the rule reacts to
information that is completely stored within a single token. Based on that
information, working on these two rules together and get them completed as
a pair just seemed like the correct thing to do.&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I mentioned in the last section, the design for these two rules was
trivial compared to other rules.  In the case of Rule Md039, all text
used for the link label is stored within the token’s &lt;code&gt;text_from_blocks&lt;/code&gt;
field.  For Rule Md040, the text after the Fenced Block boundary characters
is stored within the token’s &lt;code&gt;extracted_text&lt;/code&gt; field.
That made the design simple: look for the specified token and check
the specified field to see if it matches the requirements for triggering the
rules.&lt;/p&gt;
&lt;h3 id="implementation-and-testing"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Proper testing of every scenario was the hard part for Rule Md039. Because both
Link elements and Image elements are impacted, along with the four types
of notations allowed for each, I created a total of twenty scenario tests
to cover each possibility.  Compared to that, there was little effort
required to create the four scenarios for Rule Md040.&lt;/p&gt;
&lt;p&gt;Once those scenarios were completed, the rest of the implementation went
off without any problems.  For Rule Md039, once a Link element or an Image
element is detected, a simple check is required to see if there are any
spaces on either side of the link label.  With that information stored in
the &lt;code&gt;text_from_blocks&lt;/code&gt; variable, the following code provides that check:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_link&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_from_blocks&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_from_blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly for Rule Md040, given the start of a Fenced Code Block element,
a simple check was added to determine if the &lt;code&gt;extracted_text&lt;/code&gt; field contained
any characters after removing any whitespace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I know I will not always get as lucky as with the design and
implementation of these two rules, it was nice to know it could
happen every so often.&lt;/p&gt;
&lt;h2 id="rule-md042-no-empty-links"&gt;Rule Md042 - No Empty Links&lt;a class="headerlink" href="#rule-md042-no-empty-links" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From the start, I knew that this rule was going to be another rule that
would be handled with a simple implementation. In this case, I noticed
a lot of similarities with Rule Md039.
But instead of checking for spaces on either side of the link label,
it was checking for a link URI that had not been specified.  This
is a trick that authors often use to ensure that they fill in link
URIs with the proper URLs before publishing a document.
As I use this trick myself, I had a personal stake in making sure
that this rule was working properly.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_1"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As the design of this rule was so like the designs for both
Rule Md039 and Rule Md040, I leveraged their design instead of creating
a new one.  For the testing of this rule, I was fortunate that this
rule only applies to Inline Link elements and Inline Image elements.&lt;sup id="fnref:inline"&gt;&lt;a class="footnote-ref" href="#fn:inline"&gt;1&lt;/a&gt;&lt;/sup&gt;
As such, I only needed to provide scenarios that deal with both inline
types of links.&lt;/p&gt;
&lt;p&gt;With the information that this rule only fires if there is an empty
URI or an empty URI fragment reference, the code for this rule was
quickly implemented:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_link&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;stripped_link_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active_link_uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;stripped_link_uri&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;stripped_link_uri&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rule-md045-alternate-image-text"&gt;Rule Md045 - Alternate Image Text&lt;a class="headerlink" href="#rule-md045-alternate-image-text" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, I was hoping that I would find more of these simple rules
to implement, but also dreading them at the same time.  For whatever
reason, I felt that the more of these rules that I found, the more of a
chance that the other rules would be orders of magnitude more difficult.
However irrational it might seem, I worked through those feelings
as distractions and moved on.&lt;/p&gt;
&lt;p&gt;But after looking at this rule, it was obvious that it fell into the same
pattern as the last three rules, and I was grateful for the chance to keep
things going forward.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_2"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With three scenarios to cover inline Image elements and four scenarios to cover
the other three types of Image elements, the scenario tests were covered, and I was
ready to start implementation.  As the Image element’s link label specifies
the alternate image text stored in the &lt;code&gt;img&lt;/code&gt; tag’s &lt;code&gt;alt&lt;/code&gt; parameter, the
implementation was just to verify that there is text in the &lt;code&gt;text_from_blocks&lt;/code&gt;
field, as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_from_blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I looked ahead to the next rule to implement, I breathed a sigh of
relief.  It was not a simple one, but it was not an extremely difficult
one either.  Just a good solid rule to work on, nothing more.&lt;/p&gt;
&lt;h2 id="rule-md046-code-block-style"&gt;Rule Md046 - Code Block Style&lt;a class="headerlink" href="#rule-md046-code-block-style" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While not as simple as the last four rules, I quickly found out that this
rule followed the pattern of the &lt;em&gt;style&lt;/em&gt; rules that I have implemented before.
Looking into what I did for
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_003.py"&gt;Rule Md003&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_004.py"&gt;Rule Md004&lt;/a&gt;,
I did not believe I had to do a complete rewrite of a rule, just a massaging
of the previous work from those old rules to form a new rule.  Not as easy as
I had gotten used to, but also not as difficult as some other rules either.&lt;/p&gt;
&lt;h3 id="design_1"&gt;Design&lt;a class="headerlink" href="#design_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In Rule Md003, there is a lot of extra code to determine what the heading
levels were for both the Atx Heading element and the SetExt Heading element.
But looking at Rule Md004, its implementation was a lot simpler.  In the case
of that rule, most of the rule is
geared towards checking if the applied style is correct, with only
a handful of lines used to look for Unordered List elements and to track
different levels of styles of each level of those elements.  As such, it seemed
prudent to base the design for Rule Md046 on Rule Md004, albeit with a couple of changes.&lt;/p&gt;
&lt;p&gt;Those changes were simple and easy to implement.  Instead of tracking Unordered
List elements, Code Block elements were tracked.  And instead of tracking the
multiple levels required for the nesting of List elements, a single field
containing a single style was sufficient for this rule.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_3"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Going through the permutations in my head, there were only three scenario
tests that I needed to write: two Fenced Code Block elements, two Indented Code
Block elements, and a final test with one of each.  For every other combination of
Code Blocks that I came up with, I was able to reduce the combination into one of
those three base scenarios.  Wanting to be sure that I did not miss a combination,
I worked through each of my scenarios again, and arrived at the same result.  Three
scenarios it was.&lt;/p&gt;
&lt;p&gt;As indicated in the design, I copied the source for Rule Md004 into &lt;code&gt;rule_md046.py&lt;/code&gt;,
with only a couple of changes being required.  Instead of the five styles available
for Rule Md004, I defined a new set of three styles to use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;__consistent_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"consistent"&lt;/span&gt;
    &lt;span class="n"&gt;__fenced_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"fenced"&lt;/span&gt;
    &lt;span class="n"&gt;__indented_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"indented"&lt;/span&gt;
    &lt;span class="n"&gt;__valid_styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;__consistent_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;__fenced_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;__indented_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, in the &lt;code&gt;next_token&lt;/code&gt; function, instead of tracking Unordered List
elements, I modified the code to track Code Block elements.  With
that done, I only needed to set the &lt;code&gt;current_style&lt;/code&gt; variable to the
current style, and the code from the previous function did the rest
of the heavy lifting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;current_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;RuleMd046&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__fenced_style&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;RuleMd046&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__indented_style&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_style&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;current_style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Expected: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"; Actual: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_style&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rule-md048-code-fence-style"&gt;Rule Md048 - Code Fence Style&lt;a class="headerlink" href="#rule-md048-code-fence-style" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having just completed the code for Rule Md046, I was fortunate to look
ahead and find that Rule Md048 was almost identical in composition to
Rule Md046.  The only difference was that instead of verifying the style
of the type of Code Block element, this rule was focusing on verifying
the style of the character used to define the Fenced Code Block element
itself.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_4"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am sure that any readers will not experience surprise when they find out
that the implementation and testing of this rule were almost exact copies of
the work done for Rule Md046.  Besides the available style names changing,
the only other code that changed was replacing this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;current_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;RuleMd046&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__fenced_style&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_fenced_code_block&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;RuleMd046&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__indented_style&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;current_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;RuleMd048&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__backtick_style&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fence_character&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"`"&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;RuleMd048&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__tilde_style&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But having implemented a handful of these low-cost rules in a row, I
was getting a bit &lt;em&gt;restless&lt;/em&gt;.  I did not have any issues in getting these
rules completed, but I just felt like I needed a break to shake things
up a bit.  I did not realize that it would be a longer break than I intended.&lt;/p&gt;
&lt;h2 id="rule-md044-capitalization-of-proper-names"&gt;Rule Md044 - Capitalization Of Proper Names&lt;a class="headerlink" href="#rule-md044-capitalization-of-proper-names" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having kept to my two efficiency rules for a while now, I wanted to give
myself a chance to let loose and pick up a medium difficulty rule.  If
nothing else, every rule in the list needs to be implemented, so the work
was not going to be wasted.  With only a small deviation from my efficiency
path, I thought that this rule would be a good one to shake things up a bit.&lt;/p&gt;
&lt;p&gt;Honestly, i did not realize how much it would shake things up until it was
all over, with a total of thirty-one tests required to validate it.  I
was in for quite the surprise.&lt;/p&gt;
&lt;h3 id="design_2"&gt;Design&lt;a class="headerlink" href="#design_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The thing that drew me in to this rule from the beginning is that if felt
like a “simple” search for proper name strings within another string.  Or
at least that is what I thought it was at the start.  As I read through the rule a
bit more, there was one caveat: a configuration value allowing or disallowing
this rule from looking in Code Blocks.&lt;/p&gt;
&lt;p&gt;That caveat was important.  Without that configuration value, this rule was a simple
string-in-string search.  With that configuration value, the design would need to deal
with individual types of elements that may contain the proper names that
are being searched for.  While I knew that list contained the Text element
under certain conditions, I was not sure how many other elements would
require similar treatment.&lt;/p&gt;
&lt;p&gt;To combat that uncertainty, I decided to use an iterative design approach.
I started the design process by narrowing my scope to the Text element scenario.
For each additional element that needed the same approach, I planned to revisit
the design to resolve any additional issues that crept up.  It was not ideal,
but unless I wanted to spend a lot of time designing everything up front, I
knew it would work.&lt;/p&gt;
&lt;p&gt;The basic design was simple: use a simple &lt;em&gt;search-find-next&lt;/em&gt; loop on the
lower-case equivalent of the Text element to find every potential candidate
for examination.  For each candidate, ensure that the candidate is isolated
on both sides by whitespace before checking to see if the capitalization
of the candidate matches the requirements for the specified proper name.
Without the isolation by whitespace, a proper name of &lt;code&gt;AD&lt;/code&gt; would trigger
on &lt;code&gt;readme.md&lt;/code&gt; for the &lt;code&gt;re&lt;/code&gt; before the name was found and the &lt;code&gt;me.md&lt;/code&gt; after
the name was found.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_5"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Working through all the input permutations that I needed to test against
this rule, I ended up with thirty-one different scenario tests.  While nine
of them deal with Paragraph elements, the rest of the tests deal with each
of the other elements that can conceivably contain text that needs to be
scanned.  Of those remaining tests, fifteen of those scenario tests dealt
with the various types of links and how they can be put together.  It was
quite the list of tests that I would have to complete.&lt;/p&gt;
&lt;p&gt;Starting with the simple cases, the first iteration of the &lt;code&gt;next_token&lt;/code&gt;
function was very simple and just focused on Text elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__proper_name_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_in_code_block&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__check_in_code_blocks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__search_for_matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_in_code_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_in_code_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, the applicable text was passed to the &lt;code&gt;__search_for_matches&lt;/code&gt; function.
That function performed the &lt;em&gt;search-find-next&lt;/em&gt; loop through the text for each
of the proper names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__search_for_matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;string_to_check&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;string_to_check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_all_from_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_check&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;string_to_check_lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string_to_check&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__proper_name_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;next_name_lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;search_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string_to_check_lower&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_name_lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__check_for_proper_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;string_to_check&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;found_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;next_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;search_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string_to_check_lower&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_name_lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each candidate found, the &lt;code&gt;__check_for_proper_match&lt;/code&gt; function was called
to see if the candidate was properly isolated before checking the capitalization
against the required capitalization:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__check_for_proper_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;original_source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;found_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required_capitalization&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;original_found_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;original_source&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required_capitalization&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;after_found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required_capitalization&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;is_character_before_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;is_character_before_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;original_source&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isalnum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;is_character_after_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;after_found_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_source&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;is_character_after_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;original_source&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;after_found_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isalnum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_character_after_match&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_character_before_match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_found_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required_capitalization&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;original_found_text&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;required_capitalization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;"Expected: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;required_capitalization&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"; Actual: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;original_found_text&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After checking the simple scenario tests involving Text elements and making
sure they were all working, I knew it was time to move on to the other
elements.  But how hard were they going to be to implement?  That I did not
know.&lt;/p&gt;
&lt;h3 id="next-iteration-other-elements"&gt;Next Iteration: Other Elements&lt;a class="headerlink" href="#next-iteration-other-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting with the Code Span element, I was quickly able to add the required
code to search for any matches.  The only issue was that the line/column number
for any failures pointed to the start of the token, not where the failure occurred.
To adjust for those failures, I added the &lt;code&gt;same_line_offset&lt;/code&gt; parameter to the
&lt;code&gt;__search_for_matches&lt;/code&gt;.  While I knew it would not handle any cases where the
source data has newlines in it, it was a quick way to adjust the line/column
number in the simple cases without newlines.  For the Code Span element,
I set this parameter to the parts of the element that occur in Markdown
before the text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;same_line_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_start_backticks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
        &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_whitespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__search_for_matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;same_line_offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the Code Span element was working, the other elements were somewhat easy
to add.  For the Link element, the text in the Link Label is already represented
with a Text element, so I just had to worry about other text that was exposed.
After checking out all four types of links, only the Inline link type has
a component that needs to be checked, the &lt;code&gt;active_link_title&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;That required a bit of work to set up, as there are plenty of scenarios where
an inline Link element has newlines in it.  Taking a slightly different approach,
I created the &lt;code&gt;__adjust_for_newlines_and_search&lt;/code&gt; function to compute any offsets
for newlines before performing the search.  That function heavily relies on
the &lt;code&gt;__adjust_for_newlines&lt;/code&gt; function to accurately compute the proper offsets
for the line/column number to indicate where the failure occurred.  But having
created those functions, I was able to quickly calculate the variables to represent
the text that occurs in the Link element before the Link Title field.  Not without
some testing errors that I had to resolve, but the changes were quick to
implement and test.&lt;/p&gt;
&lt;p&gt;Once the Inline Link element was up and working, adding the cases for both
the Inline Image element and the Link Reference Definition element were quickly
completed.  In both cases, it was the same recipe as with Inline Link elements:
perform the calculations of what the Markdown element looks like before the
specified element and pass it in to the &lt;code&gt;__adjust_for_newlines_and_search&lt;/code&gt; function.&lt;/p&gt;
&lt;h3 id="wrap-up"&gt;Wrap Up&lt;a class="headerlink" href="#wrap-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This rule was not difficult because of any of the individual tasks required
to create this rule.  This rule was difficult to implement because of its
breadth and the adjustments required for the line/column number.  Maybe it
was because of the late hours that I used to work on this rule, but the
line/column adjustments in the &lt;code&gt;__search_for_matches&lt;/code&gt; always seemed to have
a glitch that i needed to work out.&lt;/p&gt;
&lt;p&gt;It was only after I sat down with my trusty paper and pen, sketching out every
scenario that I was able to clearly see the complexities.  Getting the proper
line number was easy.  But because the reporting code uses a column number of
&lt;code&gt;3&lt;/code&gt; to mean &lt;code&gt;add 3 to the column&lt;/code&gt; and &lt;code&gt;-3&lt;/code&gt; to mean &lt;code&gt;absolute column 3&lt;/code&gt;, I had
to do some coding gymnastics.  Not sure if I am going to try and clear that
up in the future, but it is something to consider.&lt;/p&gt;
&lt;h2 id="rule-md034-base-url-used"&gt;Rule Md034 - Base Url Used&lt;a class="headerlink" href="#rule-md034-base-url-used" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After the ease of many of the previous rules and the difficulty
of the last rule, it was nice to get a rule that seemed like it
had a medium difficulty. But honestly speaking, from the description that
I read of this rule, I had more questions than answers.&lt;/p&gt;
&lt;p&gt;There was one interesting question that I needed to answer, as the documentation added to
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/rules/rule_md034.md"&gt;Rule Md034&lt;/a&gt;
notes: what is an URL?  Following the proper definition of URLs, they
can be anything from &lt;code&gt;https://google.com&lt;/code&gt; to &lt;code&gt;#fragment&lt;/code&gt; and everything
in between.  It all depends on the given context as to which definition of
an URL is most applicable to that context.  Even once
that decision is made, trying to come up with anything resembling a complete
algorithm for detecting all valid URLs can be troublesome at best.  I
needed to narrow down the URL context that I was looking for if I had any hope
of being able to create a decent algorithm to find those URLs.
Otherwise, I would need to deal with a nasty Regular Expression
&lt;a href="https://github.com/jhermsmeier/uri.regex/blob/master/pattern.js"&gt;like this one&lt;/a&gt;.
I wanted to avoid that at all costs.&lt;/p&gt;
&lt;p&gt;I experimented with Visual Code and the
&lt;a href="https://github.com/markdownlint/markdownlint"&gt;Markdown Lint&lt;/a&gt; plugin for
about an hour, trying to get more information on what it considered valid
URLs to be.  My best guess is that the original rule is very tightly focused
on two specific types of URLs: base URLs for HTTP and FTP.  Every other
type of URL that I tried to get the rule to recognize failed. However, almost
every &lt;code&gt;http&lt;/code&gt; URL that I tried worked, even some of the wacky &lt;code&gt;http&lt;/code&gt; URLs.
Either way, I needed a good place to start from and I felt that the information
helped me find that starting point. So off I went into my design phase.&lt;/p&gt;
&lt;h3 id="design_3"&gt;Design&lt;a class="headerlink" href="#design_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Since I found the original rule too difficult to read clearly, I
decided to approach the design for this rule from a more foundational
viewpoint.  I would take cues from the original rule, but I
needed to be able to design a rule that had clear goals and
triggering conditions that I could easily defend in the documentation.&lt;/p&gt;
&lt;p&gt;Starting at the beginning, the first part of this design
was easy: eliminate this rule firing
within a Code Block element, an HTML Block element, or a Link element.
Within those elements, it did not make sense to look for Bare URLs,
as text within those types of elements intrinsically meant something
different than a normal section of text.  It is those normal blocks
of text that I needed the design to focus on.&lt;/p&gt;
&lt;p&gt;Once I had a method to eliminate scanning those types of Text elements,
I had to design a way to properly scan text for a series of characters
that represented an URL.  After having done
that research noted in the previous section, I had &lt;em&gt;an&lt;/em&gt; answer. I
was not sure it was the right one, but I had the confidence that it
was a decent answer to start with.  For this rule, URLs were only going
to be HTTP and FTP URLs specifying a path to a resource.
Basically, the rule will recognize what most people using a browser
consider URLs, but only the ones starting with &lt;code&gt;http:&lt;/code&gt;, &lt;code&gt;https:&lt;/code&gt;, &lt;code&gt;ftp:&lt;/code&gt;,
or &lt;code&gt;ftps:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I felt that the best option to find these URLs was a simple
&lt;em&gt;search-find-next&lt;/em&gt; loop.  While I would have liked to avoid having to repeat
the loop for every valid base URL, I did not see any way to avoid it. Small
optimizations like looking for &lt;code&gt;http&lt;/code&gt; and then looking for either &lt;code&gt;:&lt;/code&gt; or
&lt;code&gt;s:&lt;/code&gt; had their merits, but I did not believe they would increase the
performance of the algorithm at all.  So, if any one of those bases matched,
I would pass on that information to another function that would further
evaluate the URL.  Primarily, it would look for the sequence &lt;code&gt;//&lt;/code&gt; after
the base URL prefix and proceed from there.&lt;/p&gt;
&lt;h4 id="a-good-course-change"&gt;A Good Course Change&lt;a class="headerlink" href="#a-good-course-change" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is the point after which the “course” of this rule changed more
than any other part of the design. Instead of the previous rule’s
complicated sets of boundary conditions, I decided to create a simpler
set of boundary conditions.  The first condition is that any existing
character before the base URL’s prefix must be a whitespace character. The
second is that the base URL’s prefix must be followed by the sequence &lt;code&gt;//&lt;/code&gt;
and at least one non-whitespace character.&lt;/p&gt;
&lt;p&gt;I did this for a few reasons, but the most basic reason was for
simplicity.  Explaining the above triggering conditions for this rule
was simple and required two sentences of documentation. By keeping
the triggering conditions simple, I will hopefully also make the
implementation of detecting those triggering conditions simple.
A win for the rule and a win for the user.  I can live with that.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_6"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Coming up with the scenarios required to test this rule was like
peeling back the layers on an onion.
I started with the scenario of a valid URL within
a Paragraph’s Text element and worked outward from there.  I just
asked myself how the URL could not be detected properly and worked
through each scenario in turn.  When I exhausted those variations,
I made sure that the URLs would only be detected in normal Text elements
by creating scenarios with a valid URL inside of non-normal elements,
such as Code Blocks.  When I was done, I had fourteen scenarios ready
to go.&lt;/p&gt;
&lt;p&gt;Moving on to the implementation, it proceeded rather quickly.  After
eliminating any Text elements within Code Block elements, Html Block
elements or Link elements, a simple &lt;em&gt;search-find-next&lt;/em&gt; loop was added
to look for multiple occurrences of a base URL prefix within the
provided text.  Once an occurrence was found, it was handed off to
the unwritten &lt;code&gt;__evaluate_possible_url&lt;/code&gt; function for evaluation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_code_block&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_html_block&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_link&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url_prefix&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;RuleMd034&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__valid_uri_types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__evaluate_possible_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_code_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_code_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following the design, the &lt;code&gt;__evaluate_possible_url&lt;/code&gt; function was easy to code.  If there is
no character preceding the location of base URL prefix or if it
is a whitespace character, then the algorithm continues.  From there,
it grabs the next three characters after the found base URL prefix,
verifying that the next two characters are &lt;code&gt;//&lt;/code&gt;.  Given that verification,
the only thing left was to make sure that the character after the
sequence &lt;code&gt;//&lt;/code&gt; is a non-whitespace character, which was added with ease.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__evaluate_possible_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;url_start_sequence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;found_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_start_sequence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;url_start_sequence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"//"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;url_start_sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adjust_for_newlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In verifying that all scenario tests were passing for this rule, I quickly
noticed that while the rule portion was triggering the rules properly, it
triggered them with the wrong line/column pair.  Having written the
&lt;code&gt;__adjust_for_newlines&lt;/code&gt; function as part of the work for Rule Md044, it
seemed wasteful to have to write that rule again.  As such, I refactored
that function into the &lt;code&gt;parser_helper.py&lt;/code&gt; module to make it accessible
to both rules.&lt;/p&gt;
&lt;p&gt;And as it was Sunday morning when I finished this rule, I hoped I had enough
time to work on another rule before starting to write this article.  As such,
I started with Rule Md028.&lt;/p&gt;
&lt;h2 id="rule-md028-blanks-in-block-quotes"&gt;Rule Md028 - Blanks In Block Quotes&lt;a class="headerlink" href="#rule-md028-blanks-in-block-quotes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No matter how many times I am asked the question about what the most important
construct or algorithm that I have learned is, the answer is always the same:
the finite state machine.  While there are a lot of second places finishes
for that title, I have just found that my learning and my experience with
finite state machines have paid for itself many times over.  Even though the
heart of a finite state machine is the simple concept of tracking transitions,
it is a useful tool in my toolbox.  And sometimes the most useful tools are
the simple tools applied properly.&lt;/p&gt;
&lt;p&gt;It was with a bit of a smile on my face that I looked at this rule and
determine right from the start that it was going to need a finite state machine.&lt;/p&gt;
&lt;h3 id="design_4"&gt;Design&lt;a class="headerlink" href="#design_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Perhaps it is the many parsers and other systems that I have written over
the years, but I instinctively knew that this problem would require a finite
state machine.  To properly detect this scenario, the rule needed to first
look for an end Block Quote token, then one or more Blank Line tokens, and
finally a start Block Quote token.  If at any point it does not find the
type of token it needs to move on, the rule needs to reset its state to look
for the end Block Quote token again.  To me, those all looked like simple
state transitions that needed something to guide them.  A finite state machine
it was.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_7"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Knowing that this rule would require a finite state machine made the task
of creating the scenario tests easier.  Like my approach with
the last rule, I started with the simple case and worked outwards, following
the transitions in the state machine.  When
I was done, I had eleven scenario tests, including a couple of tests that
included nesting with Block Quotes and Block Quote and Block Quotes and
Lists.&lt;/p&gt;
&lt;p&gt;As with all finite state machines, the implementation was all about
transitions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;__look_for_end_of_block_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;__look_for_blank_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;__look_for_start_of_block_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_end_of_block_quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_blank_lines&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__found_blank_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_blank_lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_start_of_block_quote&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__found_blank_lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_end_of_block_quote&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_start_of_block_quote&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_blank_lines&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__found_blank_lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_blank_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_end_of_block_quote&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__found_blank_lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RuleMd028&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_end_of_block_quote&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This implementation followed my design to the letter, with some tweaks
added in later to address nested Block Quotes: look for the end of a
Block Quote, then one or more Blank Lines, and then the start of another
Block Quote.  If anything fails, reset to looking for the end of a Block
Quote.&lt;/p&gt;
&lt;p&gt;The tweak that I added to my design was to allow for multiple blanks lines
to be detected and stored in the list &lt;code&gt;__found_blank_lines&lt;/code&gt;.  Then,
if a Block Quote start is found after those Blank Lines, the reporting
of the rule failure can be reported using the tokens for the Blank Lines
instead of the start Block Quote token.  Nothing too big, but a good
tweak to ensure the reporting was clear as to where the failure was.&lt;/p&gt;
&lt;p&gt;Nice and simple.  Did I mention I love finite state machines?&lt;/p&gt;
&lt;h3 id="an-interesting-side-note"&gt;An Interesting Side Note&lt;a class="headerlink" href="#an-interesting-side-note" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;During the implementation process, an interesting thing happened: I
found a parser bug with nesting Lists and Block Quotes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;

  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thinking that the rule not firing was because of something in the rule,
I added debug information to figure things out.  For whatever reason,
when that Markdown document is parsed, it ends up creating a Block
Quote element that is empty, followed by a Paragraph element.  I added
that one to the Issues List and wrapped up things for the week.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Wow! This article went on quite a bit longer than I thought it would.
Believe it or not, when I started writing this article, I was worried
that I would not have enough content for a proper article.&lt;/p&gt;
&lt;p&gt;But the reality is that in the last week, I was able to knock 9 rules
off the To-Do list.  That brings the totals from 10 rules completed
to 19 rules completed and from 21 rules left to implement down to 10
rules left to implement.  That honestly is a lot more rules than I
expected out of this last week.  It was a good surprise though, and it
just feels good to be making more progress!&lt;/p&gt;
&lt;p&gt;Nothing more than that this week… just trying to chew through the
list of rules to implement as fast and efficiently as possible.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I must be honest dear readers… the fact that I passed on Rule Md027
last week is starting to get to me.  I think I will try and work on that
this week.  Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:inline"&gt;
&lt;p&gt;For the other three types of links, a Link Reference Definition element must be used.  As a Link Referenced Definition element must contain a URI, and only an Inline Link element does not require one, only the Inline Link element was required for testing. &lt;a class="footnote-backref" href="#fnref:inline" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Making Progress On New Rules</title><link href="https://jackdewinter.github.io/2021/08/02/markdown-linter-making-progress-on-new-rules/" rel="alternate"></link><published>2021-08-02T00:00:00-07:00</published><updated>2021-08-02T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-08-02:/2021/08/02/markdown-linter-making-progress-on-new-rules/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/07/26/markdown-linter-getting-back-to-new-rules/"&gt;last article&lt;/a&gt;, I talked
about starting to tackle the long list of rules that are not yet implemented.
I this article, I talk about the process I am making and my efforts to streamline
the process.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started working on this task, I had 31 …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/07/26/markdown-linter-getting-back-to-new-rules/"&gt;last article&lt;/a&gt;, I talked
about starting to tackle the long list of rules that are not yet implemented.
I this article, I talk about the process I am making and my efforts to streamline
the process.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started working on this task, I had 31 rules to implement.  By the start
of this week,  I was down to 28 rules.  As my work week was
filled with deep-thinking and experimentation, I had a feeling that most of my
project work would end up being done on the weekend.  And I was correct.&lt;/p&gt;
&lt;p&gt;With two days to make some progress on the project, it was hard to find good,
solid blocks of time in between my other plans for the weekend.  But I did find
some of that time, and I tried to use that time to my benefit.  My goal was simple:
if possible, get more than three rules designed, implemented, and tested before
I started writing this article on Sunday.  To do that, I was going to have to
change how I was approaching the rules, and I hoped my plans would work out.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/08b07cbb459401a3dbf6d346a3576f4b45f1b075"&gt;27 Jul 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/f7bcbed5253182bc5483c13418a2ebb743d5ce14"&gt;01 Aug 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="working-fast-and-efficiently"&gt;Working Fast and Efficiently&lt;a class="headerlink" href="#working-fast-and-efficiently" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With 28 rules left to implement, I wanted to try and get into the habit of making decisions
on how to be more efficient.  As this is week 2 of working on these rules, if I can get more
efficient with how I design and implement these rules, hopefully I can complete the
entire set within seven weeks or less.&lt;/p&gt;
&lt;p&gt;But the only way that I was going to do that if with some new personal rules.  The first
rule is that, while it is usually okay for me to experiment, now is not the time for that.
If I cannot come up with a clean design within 30 minutes, I need to move on to the next rule.
This should help me go through the existing list of rules and get the easier rules taken
care of.  On the next place through the list, I can extend that time if needed.  But for
now, I need to get the easy stuff done first.&lt;/p&gt;
&lt;p&gt;The second personal rule is that if a rule takes more than two hours to get into a
semi-finished state, I need to save the work and move on.  If I am having issues with a
design after two hours, I got something wrong and I need to rethink that design.  But if
I am doing that after having designed the rule, it means I did not think
the design through and need to go back and redesign it.  And that takes time.&lt;/p&gt;
&lt;p&gt;While neither of these rules are permanent, I am hoping that by starting this block of
work with these rules, I can quickly move through the easier rules.  Will they help?
Only one way to find out!&lt;/p&gt;
&lt;h2 id="rule-md010-hard-tab-characters"&gt;Rule Md010 - Hard Tab Characters&lt;a class="headerlink" href="#rule-md010-hard-tab-characters" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For years I have avoided using tab characters in anything except word processor
documents for one good reason: they are a holy war waiting to happen.  For those
readers not familiar with the term &lt;code&gt;holy war&lt;/code&gt;, let me explain.  In development
terms, a holy war is a discussion that is never ending with no real, concrete
answer.  Some developers will swear by &lt;code&gt;always 4 characters&lt;/code&gt;, others by
&lt;code&gt;always 2 characters&lt;/code&gt; and others by &lt;code&gt;always a 4 character tabstop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As I mentioned in the last paragraph, there is no real answer to the question.
To avoid starting that discussion, most of the coding and documentation
guidelines that I know of specify explicit rules on how an entered tab character
should be handled, including the
&lt;a href="https://github.github.com/gfm"&gt;GFM specification&lt;/a&gt;.
But while the specification lists the exact behavior a compliant Markdown
parser should use, that specification does not change how the author’s
editor may decide how to interpret that tab character.  In the end, it is
a lot easier to have the editor translate any tab character into the
author’s desired number of space characters, side-stepping the entire issue.&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting with that information, I was quick to design a simple function that
would simply scan for any tab character on the line and trigger a rule if
it found any.  The problem?  The original rule has a configuration
setting that allows tab characters to be included in Code Block elements without
triggering the rule.&lt;/p&gt;
&lt;p&gt;Using up most of my allowed design time, I was at an impasse.  While the
PyMarkdown parser has decent support for tab characters, it accomplishes
part of that support by replacing tab characters with a four space character tabstop.&lt;sup id="fnref:tabstop"&gt;&lt;a class="footnote-ref" href="#fn:tabstop"&gt;1&lt;/a&gt;&lt;/sup&gt;
There is already a section in the Issues List titled
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/issues.md#bugs---tabs"&gt;Bugs - Tabs&lt;/a&gt;
to really dig into the proper support for tab characters, but right now there
is a stopgap measure present.  With the stopgap replacement
of tab characters, there are no traces of the tab characters in the tokens,
leaving no way to detect them.  No matter what else I could try, those tab
characters will remain unreachable until I address the issues in that section.&lt;/p&gt;
&lt;p&gt;So, with that research done, I course corrected back to the original, simple
design of scanning line-by-line.  I will revisit this later, but for now,
simple was the only available choice.&lt;/p&gt;
&lt;h3 id="implementation-and-testing"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After the course correction in the design phase, everything went fine with the
implementation and testing of this rule.  It was rather simple to come up with
the test cases, seeing as the special &lt;code&gt;code_block&lt;/code&gt; configuration was not in
play.  As such, the detection loop was simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;next_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;next_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Column: {next_index + 1}"&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_line_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;next_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rule-md012-detect-extra-blank-lines"&gt;Rule Md012 - Detect Extra Blank Lines&lt;a class="headerlink" href="#rule-md012-detect-extra-blank-lines" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Blank Line elements are interesting elements in Markdown.  Grouped with the Link Reference
Definition element, it is in a group of elements that do not show up in a rendered
HTML document.  For every other element, there is some physical representation
in the generated document.  But not those two.&lt;/p&gt;
&lt;p&gt;In the case of Blank Line elements, they primarily serve to delineate one element from
another element.  Need a new paragraph?  Use a blank line before the next paragraph.
Want to create a paragraph after specifying an SetExt Heading element?  Use a blank line.
Want to stop a List element before the next element starts?  Use a blank line.
In every case, they only provide a method to terminate the element that precedes them.&lt;/p&gt;
&lt;p&gt;But other than that small task, there is nothing that they do.  And multiple blank
lines do not make any sense either.  A second blank line would terminate the element
that the first blank line terminated?  It just does not make sense.  Therefore,
this rule is in place to limit the documents to only one Blank Line element at a time.&lt;/p&gt;
&lt;h3 id="design_1"&gt;Design&lt;a class="headerlink" href="#design_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I originally was thinking that the design had to be complicated, but as I worked
through the cases, I realized that the design could be a lot simpler than I thought.
At first, I thought I would have to include code to prevent this rule from firing
within Code Block elements and HTML elements.  But after checking things out, I
remembered that the text within those elements use the &lt;code&gt;\n&lt;/code&gt; character instead of
the Blank Line element.  With those three elements excluded, it was enough to count
the number of consecutive Blank Line tokens, checking them against the configured
limit.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_1"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nothing interesting to report here.  With a solid design in hand, it was easy to
create the test functions and their test data.  From there, as the detection design
was simple, the implementation was also simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_blank_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__blank_line_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__check_for_excess_blank_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__blank_line_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rule-md014-showing-bash-style-output"&gt;Rule Md014 - Showing Bash Style Output&lt;a class="headerlink" href="#rule-md014-showing-bash-style-output" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When writing articles that include Bash scripts, most authors start with
script blocks that look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;jacob&lt;/span&gt;&lt;span class="nv"&gt;@system&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;jacob&lt;/span&gt;&lt;span class="nv"&gt;@system&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But with the user’s account name, the system name, and the directory name
all exposed, most authors quickly trim that down to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="o"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From experience, this format is only useful if the author interweaves
shell input and shell output together in the example, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;
&lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="n"&gt;file2&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="o"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That text format is efficient as it makes it clear which lines are shell
input commands and which lines are shell output text.&lt;/p&gt;
&lt;p&gt;But if that interwoven format is not desired, it is simpler to trim the
initial script down further to only reflect the shell input:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;
&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="o"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With those leading &lt;code&gt;$&lt;/code&gt; characters removed, these lines can then be copied by the
reader into the clipboard and executed in their own Bash window.  Even though
this example is specific to the &lt;code&gt;/my/dir&lt;/code&gt; directory, it can still be copied-and-pasted,
with the results being somewhat predictable.&lt;/p&gt;
&lt;h3 id="design_2"&gt;Design&lt;a class="headerlink" href="#design_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The obvious starting point for this rule was detecting whether the
rule was looking at a token within a Code Block element.  Once that context is
established, it then becomes a simple matter of looking at each line in the
following Text token.  For each line, the rule looks for at least one line
that does not begin with the &lt;code&gt;$&lt;/code&gt; character.&lt;/p&gt;
&lt;p&gt;This simple design was made possible by a good design decision that I made
regarding Code Block elements.  To prevent accidental parsing of their content
as anything but a code block, I ensured that the encompassed Text token has an
exact recording of what is in that Code Block element.  While that decision
was made for another reason, it benefited me in this design.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_2"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a solid design in place, the implementation for this rule was easy.
I just implemented each step of the design, one step at a time.  The
only addition to the design occurred when I questioned whether leading
whitespace before the dollar sign character (&lt;code&gt;$&lt;/code&gt;) would affect the
triggering of the rule.  Double checking with the original rule, its
support of leading whitespace aligned with my thoughts, and the
design was adapted.  The rule now checked for a leading &lt;code&gt;$&lt;/code&gt; character
after any leading whitespace was removed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_code_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_code_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__in_code_block&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;are_all_preceded_with_dollar_sign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="n"&gt;split_token_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;split_token_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;next_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"$"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;are_all_preceded_with_dollar_sign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;are_all_preceded_with_dollar_sign&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rule-md033-no-html-in-markdown"&gt;Rule Md033 - No HTML in Markdown&lt;a class="headerlink" href="#rule-md033-no-html-in-markdown" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I remember the first time reading about this rule and wondered how it
would be properly used.  Now, it seems obvious: because there
was a need for it!  More specifically, this rule breaks down to two
main reasons for its existence: generation and security.&lt;/p&gt;
&lt;p&gt;From the generation point of view, most of the Markdown parsers that
I have encountered translate the Markdown elements into HTML output.
But I have heard of parsers that translate the elements into intermediate
forms, such as the token format that the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown&lt;/a&gt; project uses.
In such a case, embedding pure HTML into that document would most likely
result in the output not looking like the author intended.  For any
authors rendering the Markdown using one of those parsers, that is an
issue.&lt;/p&gt;
&lt;p&gt;The other big reason is security.  If an author can place their
own HTML into a generated document, it is possible that they can make
that document do things it was not supposed to do.  For example, say
you want to allow someone to enter comments at a public kiosk.  For
whatever reason, there are requirements to let the kiosk users enter
their comments in Markdown or Plaintext.  If they can enter HTML as
part of the Markdown content, they can cause all manner of problems.
By removing the
ability to execute any HTML other than Markdown generated HTML, that
security hole is closed.&lt;/p&gt;
&lt;h3 id="design_3"&gt;Design&lt;a class="headerlink" href="#design_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the experience of designing the other rules behind me, creating the design
for this rule was not difficult.  There are two main ways to get HTML
into a document: an HTML Block element and an inline Raw HTML element.
The Raw HTML element is easy in that its content is self-contained.
The HTML Block element is a bit more difficult in that the rule needs
to look for a Text element inside of an HTML Block element.&lt;/p&gt;
&lt;p&gt;After detecting the HTML text, determining the “name” of the tag is
important for being able to allow only certain tags in a valid document.
In the original rule, this was limited to any opening HTML tag that
started with a alphabetic character.  The first thing I did was to ensure the
design for the HTML Block element allows for both an opening HTML tag and a closing
HTML tag.  With that out of the way, ans including a special case for
the &lt;code&gt;![CDATA[&lt;/code&gt; HTML tag, collecting the name of the tag became
collecting the tag until one of the five terminating characters is
encountered.&lt;/p&gt;
&lt;p&gt;With all the scenarios covered, I moved on to the testing and implementation.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_3"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once I had all the test scenarios identified and their test functions set
up, the actual code was easy to implement.  Starting with the Raw HTML
element, getting the &lt;code&gt;__look_for_html_start&lt;/code&gt; function set up was
rapidly accomplished.  From there, I implemented the first pass with
the HTML Block element, including better support for tags with
non-alphabetic start characters.  Finally, after making sure everything
else was working properly, I made the small change to allow closing
HTML tags in addition to opening HTML tags.  It was an iterative process,
but one that flowed smoothly along with the design.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__look_for_html_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag_text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"![CDATA["&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;tag_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"![CDATA["&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_until_one_of_characters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;tag_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" &lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s2"&gt;/&amp;gt;"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Element: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tag_text&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag_text&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__allowed_elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_raw_html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_html_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_html_block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_next_html_block_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_next_html_block_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;modified_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__look_for_html_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;modified_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_next_html_block_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While it is more code than a fair share of the other rules, it was easy to
implement for a few reasons.  The first was the design phase.  While it
is true that I used my design phase test cases for the test scenarios,
the design was good enough to handle each of those test cases.  Therefore, the
second reason was those design test cases.  Before I started coding, I knew what
I was up against, and I was confident that I had identified all the test cases.  Finally,
I did not code the entire block of code at once.  I started with the easier parts of the
design and layered upon what was already done and tested until I was done.&lt;/p&gt;
&lt;p&gt;It was at this point that I was sure that my rules were paying off.  As far as
I could tell, they were helping me to focus.  The next rule would test that though.&lt;/p&gt;
&lt;h2 id="rule-md027-false-start"&gt;Rule Md027 - False Start&lt;a class="headerlink" href="#rule-md027-false-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes it is hard to keep to a self-imposed rule, and this was one of those times.
I am still not sure why I had a problem with this design, but I did.  I even gave myself
an extra five minutes, but even with that extra time, my design was nowhere near completed.&lt;/p&gt;
&lt;p&gt;Looking back at that rule and my notes on that rule, I am not sure what happened.
I have a lot of things crossed out on the page where I was designing.  Taking another
look them, the things that I had crossed out as being wrong were actually correct.  Regardless,
I am going to say something very reasonable: Shit happens!&lt;/p&gt;
&lt;p&gt;We all have bad periods throughout the day, and I just happened to hit one when I
tried to work on this rule.  It happens.  What was more important was what I did when
I encountered that situation: I realized it happened.  I was a bit upset with myself,
but I did the mental equivalent of dusting myself off, worked on one of my Saturday
home projects that I needed to deal with, and cooled down.  More importantly, I gave
myself some space from the project, and time to depressurize.&lt;/p&gt;
&lt;p&gt;While the work that I did on the actual task is rather fuzzy, I do remember clearly
that I got it out of my system, and quickly.  I knew I would get back to it within
a week or two, and I would hopefully have a better experience with it at that point.
And for me, that was a good thing!&lt;/p&gt;
&lt;h2 id="rule-md035-consistent-horizontal-rules"&gt;Rule Md035 - Consistent Horizontal Rules&lt;a class="headerlink" href="#rule-md035-consistent-horizontal-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As soon as I came to this rule, I started to have flashbacks to
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/rules/rule_md004.md"&gt;Rule Md004&lt;/a&gt;.
That was not a particularly nasty rule to implement or test, but I remember it as being
very finicky.  While I thought it was going to be trivial, it ended up being a fair amount
of work to get everything right.&lt;/p&gt;
&lt;p&gt;But with everything being fair, I must admit that Rule Md004 was one of the reasons
that I decided to add my two new rules for this week.  That rule was the first one that
I started working on as I was recovering, and I did not have a lot of fun implementing it.
I do not remember much about it that was
positive, but I do remember having to restart the design two or three times to get it
right.  To be blunt, I do not know if that was because I rushed things and did not
do good design upfront or because I was still sick and did poor design.  At this stage,
it does not matter.  I want to learn from my mistakes, hence the new rules.&lt;/p&gt;
&lt;p&gt;And this should be an easy one.  All Thematic Break elements must use a consistent
sequence.  Hoping that I did not just jinx myself, I started working on it.&lt;/p&gt;
&lt;h3 id="design_4"&gt;Design&lt;a class="headerlink" href="#design_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This design was simple from the start.  If the configuration value is set
to &lt;code&gt;consistent&lt;/code&gt;, then do not set a sequence to match, otherwise the configuration
value is the sequence to match.  In the main token function, that means a small
amount of code to deal with setting the style to match if it is not set.  Once
that is out of the way, it is a simple comparison check: if it fails, it triggers
the rule.&lt;/p&gt;
&lt;p&gt;It did seem too simple though…&lt;/p&gt;
&lt;h3 id="implementation-and-testing_4"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But it was not.  This was one of the shortest times that I have spent on designing,
testing, and implementing a rule to date.  All the test scenarios were easy to
come up with and implement.  The algorithm was just as easy, and quickly coded
into a function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Event that a new token is being processed.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_thematic_break&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rest_of_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;extra_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Expected: {self.__actual_style}, Actual: {token.rest_of_line}"&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_error_information&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_data&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rest_of_line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And yes, I was a bit paranoid.  I did some extra checking for possible boundary
conditions, but there were none.  I think the ghosts of implementing that
other rule were just stuck in my head, and I could not stop listening to their
whispers.  But after that extra checking, things were good, and I moved on.&lt;/p&gt;
&lt;h2 id="rule-md037-missed-emphasis-sequences"&gt;Rule Md037 - Missed Emphasis Sequences&lt;a class="headerlink" href="#rule-md037-missed-emphasis-sequences" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For me, the most interesting rules to develop are those rules where I have to
really think about their design and experiment with the existing data.  Even with
my two new rules in place, I knew that I would have to experiment on a couple
of the rules, and this was one of them.
That experimentation was to answer a simple question: what does a “missed”
emphasis look like.  When I started that research, I was worried that I
was going to have to do a lot of parsing for the 4 sequences that can
be used for emphasis.  Instead, my experimentation revealed that I had
already solved that problem.&lt;/p&gt;
&lt;p&gt;Because of the way certain sequences need to be handled
by the PyMarkdown parser, there are a small set of character
sequences that are immediately classified as Special Text: emphasis characters and
link characters.  When any of those sequences are encountered, they
are put into Special Text tokens so that they are more readily
identifiable.  With no need to change them back, I just left each of those
sequences in the Special Text tokens.&lt;/p&gt;
&lt;p&gt;And now, I got to benefit from that with this design.&lt;/p&gt;
&lt;h3 id="design_5"&gt;Design&lt;a class="headerlink" href="#design_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A lot of this design was simple, but I was aware that there were enough
moving parts in it to still make it a tricky design, if not a difficult one.
As mentioned above, one good thing is that the emphasis markers were already
parsed and stored in their own SpecialTextMarkdownToken instances.
Because of this, I did not have to do anything to look for those sequences;
they were already extracted for me.&lt;/p&gt;
&lt;p&gt;From there, if the token was in one of the three &lt;em&gt;normal&lt;/em&gt; text blocks, I needed
to increment a token list to keep track of the fact that any following text was
within an acceptable text block.  Then, if any following tokens were Text
tokens, go into a state where the rule looks for emphasis character sequences
in Special Text tokens.  Once an emphasis sequence is found, look for a matching
emphasis sequence to end the emphasized text.  Along the way, make sure to handle
normal boundary cases, such a unmatched emphasis sequence in a paragraph.&lt;/p&gt;
&lt;p&gt;There were a lot of little “except for” parts in that design, so I used the
remaining time in my thirty minutes to work things out on paper with the
nine different test scenarios that I created Markdown documents for.  I
had to do a couple of small last-minute changes, but that was it.  It
was then on to the implementation phase, and I was a bit nervous about it.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_5"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The design for this rule was tricky, so I made sure to implement
all nine test functions ahead of time.  Knowing that the design had lots of
small, moving parts, I started with the easiest parts
of the design, and moved from there.  There were times that I got
lost and had to reset that individual section of code.  Other than that,
the implementation went smoothly.  The extra time that I spent in the design
phase helped me have confidence that I was taking the right approach.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph_end&lt;/span&gt;
            &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading_end&lt;/span&gt;
            &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading_end&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__emphasis_token_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__emphasis_token_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__emphasis_token_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph_end&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_paragraph&lt;/span&gt;
            &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_setext_heading&lt;/span&gt;
            &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__block_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_atx_heading&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"**"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"_"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"__"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_emphasis_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rule-md038-code-span-spacing"&gt;Rule Md038 - Code Span Spacing&lt;a class="headerlink" href="#rule-md038-code-span-spacing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was just after noon on Sunday, and I wanted to get this rule out of the
way before writing this week’s article.  In my head, I quickly came up with
the design for this one, so I was pretty sure that I could get it done
in the time frame I had set for myself.&lt;/p&gt;
&lt;p&gt;The big reason for this rule is correctness.  Except for a matching
pair of single spaces at the start and end of the code block, everything else
in the code block is preserved, as is.  That means that any unbalanced or extra
spaces at the start and end of the code block are preserved as well.  While it is
possible that this is what the author intended, there is one big problem with
this: different parsers handle those spaces differently.&lt;/p&gt;
&lt;p&gt;Doing some quick experimentation with the string &lt;code&gt;this is ` a code` span&lt;/code&gt; on
&lt;a href="https://johnmacfarlane.net/babelmark2/?text=this+is+%60+a+code%60+span%0A"&gt;Babelmark 2&lt;/a&gt;,
there are parsers that preserve that space, remove that space, and even some that do
not consider that text to contain a valid code span.  By simply removing that leading
space, all parsers align on what the correct parsing and HTML output is for that
Markdown example.  And that is what this rule is about: matching the output to
what the author most likely expected the output to be.&lt;/p&gt;
&lt;h3 id="design_6"&gt;Design&lt;a class="headerlink" href="#design_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is nice to end a week’s work with some simple stuff, and this was no exception.
Because the rule centers on the Code Span element, the design was simply to wait
for a Code Span element to appear, and then analyze the text within it.  From there
the rules are simple. Spaces at the start and end of that text are only acceptable
if there is exactly one at each end.  The only exception is that the sequence
&lt;code&gt;`{space}&lt;/code&gt; at the start of the text and &lt;code&gt;{space}`&lt;/code&gt; at the end of the text
are allowed.&lt;/p&gt;
&lt;h3 id="implementation-and-testing_6"&gt;Implementation and Testing&lt;a class="headerlink" href="#implementation-and-testing_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the design being as small as it was, I did not encounter any issues implementing
the rule.  And with eight separate test functions to make sure things are working,
I was able to make quick work of this rule.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_code_span&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;has_trailing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;has_leading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;has_leading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"`"&lt;/span&gt;
            &lt;span class="n"&gt;has_trailing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"`"&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_leading&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;has_trailing&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;has_leading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I got Rule Md038 into its mostly finalized state before starting my writing,
I was shocked.  Hoping to get four rules implemented, I had managed to get seven
done, and that was during the weekend.  This means I am down to just 21 rules of
the initial set to implement.  That was something to be proud of.&lt;/p&gt;
&lt;p&gt;But more importantly, I was finding that my new temporary rules were helping me
focus and stay on track.  That was the real bonus.  When I got in trouble with
previous features, it sometimes took me days to find out how out of focus I
was.  And even if I realized that I was out of focus before then, there was the
feeling of giving up that I had to battle.&lt;/p&gt;
&lt;p&gt;With my two new rules, I gave myself strict boundaries to help me accomplish
my goal.  And it worked.  But, as an added bonus, it helped me deal with the
emotional aspects of having to put the work down and move on to something else.
That was the big win!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yup, more rules, but I do not know which ones and how many I will get done.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:tabstop"&gt;
&lt;p&gt;A tabstop of 4 means that when the tab character is encountered, it moves the current position to the next multiplier of 4. &lt;a class="footnote-backref" href="#fnref:tabstop" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Getting Back To New Rules</title><link href="https://jackdewinter.github.io/2021/07/26/markdown-linter-getting-back-to-new-rules/" rel="alternate"></link><published>2021-07-26T00:00:00-07:00</published><updated>2021-07-26T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-07-26:/2021/07/26/markdown-linter-getting-back-to-new-rules/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/07/12/markdown-linter-full-of-sound-and-fury/"&gt;last article&lt;/a&gt;, I talked
about continuing that work and dealing with the remaining nested block scenario tests.
In this article, I talk about starting to tackle the long list of rules that
are not yet implemented.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It feels like forever since I have done any development …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/07/12/markdown-linter-full-of-sound-and-fury/"&gt;last article&lt;/a&gt;, I talked
about continuing that work and dealing with the remaining nested block scenario tests.
In this article, I talk about starting to tackle the long list of rules that
are not yet implemented.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It feels like forever since I have done any development work on
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;the PyMarkdown project&lt;/a&gt;.
And I must say, it really does feel good to be back.  It is involving a lot
of hard work and a lot of pushing through cobwebs, but it still feels good.
It also helps that during that time, I was able
to document what I was feeling and work some more through those issues.  While
it was not coding, it did help me work through things, and that was good.&lt;/p&gt;
&lt;p&gt;Below, I start off the main part of the article talking about how I decided where
to start working on the project. I will spoil the surprise and say that it is
expanding the number of implemented rules.  Going into more detail below, I quickly
found it obvious that in a linter
that is essentially a rule engine, I need to get more rules implemented to
verify that everything is working properly.  And with 31 rules slated to be
implemented before the version 1.0 release, I had some work to do.  And with me
looking for something fresh to work on, it was the obvious choice!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/90b813dad766885536f796ce3ad324b797c4b283"&gt;17 Jul 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5713bfaa1abb99802823ce44912c05af452e500b"&gt;25 Jul 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="where-to-begin"&gt;Where To Begin?&lt;a class="headerlink" href="#where-to-begin" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned in my articles
&lt;a href="https://jackdewinter.github.io/2020/11/11/autism-stress-and-anxiety/"&gt;Autism, Stress, and Anxiety&lt;/a&gt; and
&lt;a href="https://jackdewinter.github.io/2021/07/19/developers-give-yourself-permission/"&gt;Developers, Give Yourself Permission&lt;/a&gt;,
I been out of it for a couple of weeks, recovering from something I caught
while doing some normal work around my house.  It really knocked my down for
a while, and I am still partially recovering to this day.  Mix into that the
usual stuff I deal with at work and around my house, and I just have not had
a lot of time to focus on
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;the project&lt;/a&gt;
lately.  It took me a bit of time to build up momentum, but I am now at the
point where I feel that I can devote some time to project while in the right mindset.&lt;/p&gt;
&lt;p&gt;But where to begin?  Looking at the various items in the
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues.md"&gt;Issues List&lt;/a&gt;,
I am glad that I have kept them together in a single list.  Why? Because
of the way I analyze things, I find that it gives me a more complete
picture when I can see everything in a simple overview mode.  And
it is there that I started looking.&lt;/p&gt;
&lt;p&gt;Looking at that list, I quickly noticed that there were three main
categories of issues that I need to eventually tackle.  The first section of
the list contains features that need to be added to the project.
Without these features in the project, I do not feel that the project
should ship a full 1.0 release, so they are very important.
The second section contains issues that need to be examined and
dealt with to make sure that things are working properly.  If
I had to sum up this section, these were typically added from tests
that were &lt;em&gt;mostly&lt;/em&gt; passing, with me punting the extra work until a
later time.  Finally, the remaining items are “nice to haves”, issues
that I would like to see completed and dealt with but have a lower
chance of being hit by users.  I hope.&lt;/p&gt;
&lt;p&gt;When I was taking a high-level look at the issues list like that, the big
thing that hit me was that a lot of missing features have to deal
with rules.  Basically, I see developer documentation, one item
for pragmas, one item for front matter as YAML, then the rest are
about rules. That made the decision obvious to me.  I needed to make
some good headway into implementing those missing rules.  And what
better place to start than at the start of the list.  Away I went.&lt;/p&gt;
&lt;h2 id="unordered-list-elements-and-styles"&gt;Unordered List Elements And Styles&lt;a class="headerlink" href="#unordered-list-elements-and-styles" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As soon as I started to look at this rule, I knew I was rusty.  It probably
did not help that I was still recovering, or at least that is what I told myself.
Whether that was true or not, I cannot tell at this point.  I can only say that
it is what I felt at the time that I started working on this rule.&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Due to me taking some time off, coming up with the design for this rule took
me a fair bit longer that I had hoped.  I tried a couple of times to do
something very clever, but those iterations of the design quickly found their
way to my trashcan.  In the end, the easy solution won out.  I guess with
some patterns like that, I have a bit more progress to go on keeping things
simple from the start.&lt;/p&gt;
&lt;p&gt;The easy part of the design that that part of the configuration enabled a static
mode, and the other part enabled a dynamic mode.  For the static mode, the Unordered
List element start character was set for the entire document, no exceptions.  The
two dynamic modes allowed for a different starting character to be specified.
For the default mode, &lt;code&gt;consistent&lt;/code&gt;, once any Unordered List element is started, that
starting character must be used for all Unordered List elements in the document.
A slight variation, &lt;code&gt;sublist&lt;/code&gt;, differs in behavior in that once any Unordered List
element is started at that sublist level, that starting character must be used
for all Unordered List elements at that sublist level.&lt;/p&gt;
&lt;p&gt;To that extent, the design ended up being very simple.  I first needed an array
to capture the starting character to use for that level, and an index to specify
what level of sublists the rule was currently at.  If the entry does not exist,
it needs to be initialed with either the current starting character if in dynamic
mode or the configured character if in static mode.  Once that was all set up,
the rest of the design is simply to compare the current start List Item character
against that array and if they do not match, report an error.&lt;/p&gt;
&lt;h3 id="coding"&gt;Coding&lt;a class="headerlink" href="#coding" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I knew I was still trying to build momentum, so I was probably more cautious than
I needed to be, checking everything three or four times.  In the end, I implemented
the rule almost exactly as I had designed it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;starting_new_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__style_type&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__consistent_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__sublist_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__style_type&lt;/span&gt;

&lt;span class="nd"&gt;@classmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_sequence_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_sequence&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__asterisk_style&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_sequence&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plus_style&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_sequence&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dash_style&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_sequence_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;this_start_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_sequence_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;this_start_style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of using an array to hold the start characters, I decided to use a
dictionary to see if it made the implementation any more redable.&lt;sup id="fnref:readable"&gt;&lt;a class="footnote-ref" href="#fn:readable"&gt;1&lt;/a&gt;&lt;/sup&gt;
In the &lt;code&gt;starting_new_file&lt;/code&gt; function, I made sure that the &lt;code&gt;__actual_style_type&lt;/code&gt;
and &lt;code&gt;__current_list_level&lt;/code&gt; member variables were properly set to ensure that
the static cases were taken care of without any extra code.&lt;/p&gt;
&lt;p&gt;Leaving the heavy lifting to the &lt;code&gt;next_token&lt;/code&gt; function, the biggest part of its
algorithm is to ensure that the correct list level is tracked in the
&lt;code&gt;__current_list_level&lt;/code&gt; member variable.  If the &lt;code&gt;__actual_style_type&lt;/code&gt; dictionary
does not contain an entry for the current list level, one is created.  Then the
current start character for the current List Item element is compared against the
entry for the current list level.  If those two objects do not match, a rule
error is reported.&lt;/p&gt;
&lt;p&gt;The hard part here was not trying to get ahead of myself with test scenarios and
rule implementation.  I started with the simple static scenarios and the &lt;code&gt;consistent&lt;/code&gt;
setting before moving on to the &lt;code&gt;sublist&lt;/code&gt; setting.  Instead of taking the time
to do things in the proper order, I wanted to jump ahead.  For me, that was not
a good idea.  I had to take the time to relearn the patience that I have with
my development process, making sure I practiced using the process until I was
more comfortable with it.&lt;/p&gt;
&lt;h3 id="testing"&gt;Testing&lt;a class="headerlink" href="#testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I have mentioned many times in my articles, I have often found that one of the
most powerful tools in my testing arsenal is documentation.  This was no exception.&lt;/p&gt;
&lt;p&gt;As I was documenting this rule, I walked through the different scenarios in my head,
and I discovered that I had missed something during my design phase.  Basicaly, the
first part of the &lt;code&gt;next_token&lt;/code&gt; function is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_sequence_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is meant to initialize the current list level’s type if it was not
already set.  The problem was it was not doing that.&lt;/p&gt;
&lt;p&gt;Working through my design, I found that I had missed a set of scenarios that
only came into play without sublists.  In other words, I was so focused on
getting sublists correct, I did not pay enough attention to getting the other
scenarios worked out properly.  It was time to fix that!&lt;/p&gt;
&lt;p&gt;Reworking those scenarios, I started to see what the problem was.
In the above code snippet, if the style was not set, the function sets it to
the sequence type of the current token.  For the &lt;code&gt;sublist&lt;/code&gt; setting this worked
fine and for the very first invocation with the &lt;code&gt;consistent&lt;/code&gt; setting this worked
fine, but only in those scenarios.  In every other case, the &lt;code&gt;self.__actual_style_type[0]&lt;/code&gt;
variable held the value to compare to.&lt;/p&gt;
&lt;p&gt;With that knowledge, I adjusted my design, followed through with the scenarios,
and came up with the following code change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__style_type&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__sublist_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__style_type&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;RuleMd004&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__consistent_style&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_sequence_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__current_list_level&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__actual_style_type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Paying extra attention to scenarios, I walked through them all individually, taking
my time to make sure I did not miss another scenario.  As far as I can tell, this
time I did not.  But I know that I am going to have that feeling that I missed
something else go through my mind for a while.&lt;/p&gt;
&lt;h2 id="consistent-list-element-indentation"&gt;Consistent List Element Indentation&lt;a class="headerlink" href="#consistent-list-element-indentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The last rule took a lot longer to design and get coded than I had hoped it would.
So my big goal for this rule was to get back into a better cadence of designing
the rule and implementing it.  And as far as I know, the only way to do that is
to start designing, start testing, and start coding.&lt;/p&gt;
&lt;h3 id="design_1"&gt;Design&lt;a class="headerlink" href="#design_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The design for this rule rapidly emerged in my mind without much effort.
The fundamental principle for this rule is that the indentation required for
each level of a list, ordered or unordered, must be the same.  At that
point, I knew I needed to maintain a stack of the current indentation for
that level.  Reading a bit more and experimenting with the original rule,
it became obvious that each top-level list resets the information for itself
and any contained list.  That meant that a new top-level list should clear the
stack of any indentation measurements from a previous list.&lt;/p&gt;
&lt;p&gt;From there, the design got a bit tricky.  If the list is an Unordered List
element, then the indentation must be maintained for this rule not to fire.
That was the easy one.  For an Ordered List element, there are two options:
align to the left or align to the right.  The difference is that if you
align the Ordered Lists to the left, the list looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, if you align that same list to the right, the list looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
 &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was a bit tricky to design around, but after some debugging,
I had it ironed out.  The left aligned list is easy, with the &lt;code&gt;column_number&lt;/code&gt;
member of the token matching up if the list is left aligned.  If the list is
right aligned, then any extracted whitespace plus the list item content should
be the same size.  It took a bit to verify that, but everything seemed good,
so I started working on coding the rule.&lt;/p&gt;
&lt;h3 id="coding_1"&gt;Coding&lt;a class="headerlink" href="#coding_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using Test Driven Development, I started at the beginning with tests such
as &lt;code&gt;test_md005_good_unordered_list_single_level&lt;/code&gt; and
&lt;code&gt;test_md005_bad_unordered_list_single_level&lt;/code&gt;.  From there I was able to
get a simple implementation of the design in place which satisfied those
two tests.  Once those were passing, I added tests that contained two levels
of lists, once again providing both good and bad examples of each.  Taking
the same approach, I implemented the design into code and worked through
some issues.&lt;/p&gt;
&lt;p&gt;The rest of the implementation followed the same pattern without any
issues.  While the implementation was a bit more verbose than the design
itself, I was able to iterate and get it to work cleanly in short order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_end&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;original_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_content&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;original_text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
            &lt;span class="n"&gt;original_text_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;current_prefix_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_start_content&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;original_text_length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;current_prefix_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because this rule handles both Ordered and Unordered List elements, the first two
parts of the &lt;code&gt;if&lt;/code&gt; statement make sure to manage the stack properly.  As the first
List Item for each list sets the indentation level, there is no need to do any
processing with those start List elements, just recording them.&lt;/p&gt;
&lt;p&gt;From there, the easiest thing to do was to get the easy case, Unordered List elements
out of the way, as it was a trivial check.  Similarly, the left aligned case of
Ordered List elements is just as trivial, so I used the inverted condition (the column
numbers are NOT equal) to check for a right alignment issue.  Following the debugging
and the design, the &lt;code&gt;original_text_length&lt;/code&gt; is computed from the start List element
and the &lt;code&gt;current_prefix_length&lt;/code&gt; is computed from the current List Item element.&lt;/p&gt;
&lt;h3 id="testing_1"&gt;Testing&lt;a class="headerlink" href="#testing_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While there were a couple of typing errors on my part that caused errors, the
design for this rule was correct from the start, with no changes required.  As
such, the big part for this rule was coming up with different data combinations
and comparing their results against the original rule.&lt;/p&gt;
&lt;p&gt;And it was good that I took that step to try and find more scenarios for this,
as I found an issue with the parser.  Specifically, while this Markdown is a valid
list containing a valid sublist with two items, the parser does not believe so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
   &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Verifying this against
&lt;a href="https://johnmacfarlane.net/babelmark2/?text=1.+Item+1%0A++++1.+Item+1a%0A+++100.+Item+1b"&gt;Babelmark2&lt;/a&gt;,
it confirmed my analysis that the sublist should contain two items.  But when I looked
at the parser output, it was wrong.  What happened?
In this case, while the parser is flexible on where the list item does start, it is not
as flexible on where the list item can start.  As a result, starting the second list
item with more indentation than the first item works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but starting it with less indentation does not work.  I needed to figure out what
the issue was.&lt;/p&gt;
&lt;p&gt;But after taking a good hour looking at the debug output, I was not able to see what
the issue was.  At that point, I did not want to stop my momentum, so I added a new
item to the Issues List and started to keep notes on other test scenarios to try
and moved on.&lt;/p&gt;
&lt;h2 id="starting-top-level-unordered-lists-at-the-start-of-the-line"&gt;Starting Top-Level Unordered Lists At The Start Of The Line&lt;a class="headerlink" href="#starting-top-level-unordered-lists-at-the-start-of-the-line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Knowing that I was starting to get back “in the groove”, I decided to tackle another
rule and get it completed before writing this week’s article.  Having completed the
rule for the previous section, I was pretty sure that a similar approach would be
useful in designing a solution.&lt;/p&gt;
&lt;p&gt;Initially disabled, I was not sure why this is the case in
&lt;a href="https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md"&gt;MarkdownLint&lt;/a&gt;,
the description of which I am using as the inspiration for the rule.  Taking a
solid look at both rules
&lt;a href="https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md#md006---consider-starting-bulleted-lists-at-the-beginning-of-the-line"&gt;MD006&lt;/a&gt;
and
&lt;a href="https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md#md007---unordered-list-indentation"&gt;MD007&lt;/a&gt;,
I found that there was overlap, but not a duplication of function.  Taking a closer
look at the description, I then noticed that there were two parameters for this
rule: &lt;code&gt;indent&lt;/code&gt; and &lt;code&gt;start_indented&lt;/code&gt;.  With the default values, &lt;code&gt;start_indented&lt;/code&gt;
would be assigned a value of &lt;code&gt;False&lt;/code&gt;, requiring that the top-level list did not
start with any indentation.&lt;/p&gt;
&lt;p&gt;With that taken care of, everything was good in the world, and I proceeded to
plan out a design for this rule.&lt;/p&gt;
&lt;h3 id="design_2"&gt;Design&lt;a class="headerlink" href="#design_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having just completed the design, coding, and testing for MD005, the design
for this rule was easy.  I needed to keep a stack for most of the same reasons
as with the previous rule.  The only difference was that I only needed to be
concerned with Unordered List elements that were at the top-level.  From a
design point of view, I still needed to know what kind of list the List Item
element was in, so that part of the design remained the same.&lt;/p&gt;
&lt;p&gt;The part that really changed is the trigger condition.  Instead of a complicated
calculation, this calculation was simple.  When processing either a
start element or a List Item element, if it was the first element on the stack
and it was a part of an Unordered List element, further checking was required.
That further checking was also simple: did the token for the element start
in the first column.  If not, the rule was violated.&lt;/p&gt;
&lt;p&gt;I worked this out on paper a couple of times, just to make sure, but it was
sound.  It seemed too simple, so I just double checked that I did not
take any shortcuts that would hurt the algorithm in the end.  After that
extra checking, I proceeded on to the next phase.&lt;/p&gt;
&lt;h3 id="coding_2"&gt;Coding&lt;a class="headerlink" href="#coding_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes in Test Driven Development, I find myself iterating between generating
new tests, coding to meet those new tests, and then generating more tests and
starting over again.  In this case the rule was simple enough that I was able
to derive five different tests before I started coding.  Between that and my
design phase, the coding once again went off without any major issues.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_end&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ordered_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_new_list_item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__list_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_unordered_list_start&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="why-am-i-stressing-designing-testing-and-coding-together"&gt;Why Am I Stressing Designing, Testing, and Coding Together?&lt;a class="headerlink" href="#why-am-i-stressing-designing-testing-and-coding-together" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be honest, part of my stressing of that process is for myself, and part of it
is for the readers out there.  Having benched myself while I got better, I felt
a bit of an urge to jump into the coding process without doing any design.
Think about it from my point of view.  I have been working on this project for over
a year, I was at a standstill for a week, and I want to make progress.  Who would not
want to go fast?&lt;/p&gt;
&lt;p&gt;But even so, I talked myself out of it and wanted to be very pedantic about following
these steps, even with simple rules like these three rules.  And to be honest,
in these cases, I could have probably skipped the design step and winged it,
as I would consider these three rules to be either medium-level or low-level
difficulty.  From my experience, it is exactly in those scenarios that you want
to keep to the process.  You want to get that muscle memory for the process set,
so that when you get to the harder problems, it is just second nature.&lt;/p&gt;
&lt;p&gt;Now, Test Driven Development may not be everybody’s best way to develop, but it
is for me.  I strongly urge any readers out there to figure out a small number
of development strategies, one if possible, and follow that strategy no matter
what.  For me, I have seen that it just helps me know what is coming next, and
my mind has that muscle memory in place, ready to go when I need it.&lt;/p&gt;
&lt;p&gt;Basically, to each reader, find some process that works, and follow that every
single time if possible.  If your results are anything like mine, you will
see improvements.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Out of 31 rules, I got 3 tested and implemented.  Seeing as I just came back
from dealing with being sick, that is not too bad.  I was hoping to get four
or five rules designed, implemented, and tested, but three is a good start.&lt;/p&gt;
&lt;p&gt;And yes, I had to deal with a bit of… well… is it ego or pride or work ethic?
I wanted to do more work on the project, but my body did not have enough drive or
momentum to get me there.  So, I do not think it is ego.  And I am not feeling hurt
that someone told on me that I did not do enough work.  Therefore, I am guessing that it
is not pride.  So hopefully it is my work ethic.  Who really knows sometimes?&lt;/p&gt;
&lt;p&gt;But I know that I need to gain more momentum.  Unless I want to take nine weeks
to finish all the rules&lt;sup id="fnref:calc"&gt;&lt;a class="footnote-ref" href="#fn:calc"&gt;2&lt;/a&gt;&lt;/sup&gt;, I need to get through the different phases more
efficiently and get more rules done. To do this, hopefully I will notice different
patterns that I can reuse and cut that time down.  With that and a solid work
ethic, I am hoping to cut down an estimated nine-week time frame to complete
all the rules into a block of about five weeks.  To be honest, five weeks would
be nice, anything under seven weeks and I will be happy.  I really want to
make this project shine and get it out there!&lt;/p&gt;
&lt;p&gt;But three rules done on my week back?  That is not too bad… for now.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What else?  More rules.  Though hopefully, after getting some momentum going,
I can get more than three done in the next week.  Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:readable"&gt;
&lt;p&gt;As of the writing of this article, I am still undecided.  At the very least, it is as readable. &lt;a class="footnote-backref" href="#fnref:readable" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:calc"&gt;
&lt;p&gt;31 rules, 3 rules per week = 10.333 week, with one week already completed. &lt;a class="footnote-backref" href="#fnref:calc" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Developers, Give Yourself Permission</title><link href="https://jackdewinter.github.io/2021/07/19/developers-give-yourself-permission/" rel="alternate"></link><published>2021-07-19T00:00:00-07:00</published><updated>2021-07-19T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-07-19:/2021/07/19/developers-give-yourself-permission/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week, as I am recovering from a recent illness, I thought it would
be useful to share some things that I struggle with.  Particularly, I
want to stress how I try and overcome those things with some insight and
a decent amount of hard work.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If I …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week, as I am recovering from a recent illness, I thought it would
be useful to share some things that I struggle with.  Particularly, I
want to stress how I try and overcome those things with some insight and
a decent amount of hard work.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If I had to look over my life, I think I would be hard pressed to find someone
that has not told me something like “I wish I had…” or “Why couldn’t I…”?
Those are words I know I have used myself from time to time.  I mean, let’s face
it.  Most of us have encountered difficult issues in our past, bad issues that
we were forced to deal with.  And while we would all like to just move past those
negative experiences, that movement requires serious work, sometimes spanning
many years.&lt;/p&gt;
&lt;p&gt;Having had my own share of issues over the years, around ten years ago I started
trying to look at those negative experiences in a new light.  As painful as they
were to remember, I
wanted to learn more from those experiences in the hope of avoiding them or
lessening their impact on my future. I found that when I drilled down to how
I was feeling at that time, it always came to a focus on a common root issue.
In most of those cases, I found that a value decision on my part was the problem.
Now, I cannot blow some magic fairy dust on every value decision and make it go
away… no one can.  If someone tells you they can, they are lying.  But I found
that if I give myself permission to see things differently, I can change my
viewpoint on some of those issues and reduce the amount of negativity in my life.&lt;/p&gt;
&lt;p&gt;I feel that this is especially true for Software Developers and others in similar
technical fields.  We spend so much time in our minds, I feel that we need to be
extra diligent in reminding ourselves that we are
also human.  As I have had a lot of time to think recently as I recover,
I thought I would talk about some of the “permissions” that I have had
difficulties giving myself.&lt;/p&gt;
&lt;h2 id="give-yourself-the-permission-to-fail"&gt;Give Yourself The Permission To Fail&lt;a class="headerlink" href="#give-yourself-the-permission-to-fail" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As someone who develops automated tests for a living, this is a must in my life.
It is extremely rare that I do not fail the first time when writing tests.  Most of
the time, I get close to my goal before refining my approach to generating the
desired code to meet that goal.  Sometimes I am way off, and I must rethink things
before trying again.  Depending on how you look at it, most of my professional
life is a failure.&lt;/p&gt;
&lt;p&gt;But that it only one way to look at those tasks.  The other observations
that I can make is that I am persistent, and I do not give up easily.  Another observation
is that I am flexible and creative, as I need to alter my approach to take in the
newly learned information and adjust my approach.  I figured out that it just
depends on whether I focus on the negative aspects or the positive aspects of
those failures.&lt;/p&gt;
&lt;p&gt;From where I sit, technically speaking, both sets of observations are correct.
I fail a lot of the
time when writing code, but I also do not give up in trying to get that code
working properly.  What matters is how I look at that experience.  I can either
choose to be negative and focus on the failure or be positive and focus on the
hard work and the perseverance to overcome those failures.&lt;/p&gt;
&lt;p&gt;It all depends on whether I give myself permission to fail, to fail gracefully,
and to learn from the experience.  And that all depends on my attitude, something
that I can change if I need to.&lt;/p&gt;
&lt;h2 id="give-yourself-the-permission-to-relax"&gt;Give Yourself The Permission To Relax&lt;a class="headerlink" href="#give-yourself-the-permission-to-relax" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When it comes up in conversation, I often tell people that I do not like my phone
with me when I am relaxing.  Some people will look at me like I just told them
I can hold my breath underwater for 30 minutes.  Some people do not believe me
and think I am lying.  Some people ask why.  That is when I talk about what I
require to start to feel relaxed.&lt;/p&gt;
&lt;p&gt;A big part of my prerequisites for being able to relax are no computers or
phones around me.
It is then that I start to do math with them.  There are 24 hours in a day and
7 days a week.  That makes for a total of 168 hours a week.  I work 8 or 9 hours
a day, 5 days a week, for a total of 45 hours a week.&lt;sup id="fnref:note"&gt;&lt;a class="footnote-ref" href="#fn:note"&gt;1&lt;/a&gt;&lt;/sup&gt;  I try and get a
decent 8 hours of sleep every night, so that is another 56 hours to account for.
Add in about 2 hours a day for personal stuff, like eating, showers, and bathroom,
and the grand total is now down to 53 hours.  This means that only 32% of my day
is not accounted for.&lt;/p&gt;
&lt;p&gt;Those 53 hours already have a few technology things occupying that time:
my side projects and the occasional video game.  If I had to guess, I would say
that around 15 to 20 hours a week are occupied with those hobbies.  Unless I
want my life to mostly focus on computers, I need to be able to tell myself to
walk away from the computers, including cell phones, and enjoy the aspects of
my life that are not technology specific.&lt;/p&gt;
&lt;p&gt;When it comes down to it, I have found that if I give myself permission to
relax in various forms, some subset of them is going to work on a given day.
If doing LEGO on a given day does not work, I try doing some reading.  If
reading does not work, I try watching a movie.  If that does not work… and so
on.  While it is sometimes the first thing that works, it is often the third
or fourth, so I just keep on trying.  The constant between all the things
that I try is that they have little, if any, connection to computers in any
form.&lt;/p&gt;
&lt;p&gt;If people are still skeptical, I offer to break things down into a simple equation.
This equation is a simple one to explain and to work through. You have roughly
one third of your week to recharge your batteries.  No one else can make
you relax, but tons of people can get in the way of your relaxing.  If you
do not find your own way to relax with that one third of your life, where
does that leave you?  It is up to yourself to set the rules for what you
know you need to do to relax and stick to them.&lt;/p&gt;
&lt;h2 id="give-yourself-the-permission-to-enjoy-life"&gt;Give Yourself The Permission To Enjoy Life&lt;a class="headerlink" href="#give-yourself-the-permission-to-enjoy-life" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, if you cannot tell by my writings, I am a geek through and through.  I love
my career and solving problems so much that I work on a side project
involving computers.  When I place games, they tend to be video games.  I have
a set of LEGO models that would (and have) made some kids cry.  If you give me
a science fiction or fantasy movie from 1970 and forward, there is a good chance
I have seen it.  Even more interesting, if you say, “there is this movie with a
guy and that guy does… and they…”, there is a decent chance I will tell you
the name of the movie and who starred in it.  Basically, I got geek cred.&lt;/p&gt;
&lt;p&gt;But life is not just about geek stuff.  There is more to life than geek stuff.
When possible, I like to get out and help people do things that they did not know
how to do before, such as archery.  I know that I prefer exercise that is more
nature oriented, so when I can, I go on a hike with friends and family.  I have
recently started to cook more meals at home, something that I was scared to do for
years due to bad experiences.  And yes, do not tell my dog Bruce, but I actually
enjoy taking him on a walk every day and getting some good exercise while I am at it.
Sometimes I enjoy life with something as simple as sharing how my day is going with
my wife and snuggling with her while talking about it.&lt;/p&gt;
&lt;p&gt;From my experience, if you want to enjoy life, you need a diversity of interests
that balance each other out.  A good example is building things with LEGO.  A lot
of my professional life is building immaterial things on a computer, so that act
of building material things with LEGO helps me balance that part of my life out.
During most workdays, I get up every hour to walk around, get water, and stuff like
that.  But it is not enough.  Walking Bruce and hiking when I can help me move around
and balance out sitting in a chair all day.&lt;/p&gt;
&lt;p&gt;It is not always easy keeping that balance though, and that is where giving yourself
permission to enjoy life comes in.  There will always be another line of code to
write, another test to complete, another article to create.  For me, it all
boils down to one simple question: if I do not give myself permission to enjoy life
and the computers were to disappear, would I be okay?  If the answer is no, I am
out of balance and I knew I need to give myself permission to get back into balance.&lt;/p&gt;
&lt;h2 id="give-yourself-the-permission-to-be-sick"&gt;Give Yourself The Permission To Be Sick&lt;a class="headerlink" href="#give-yourself-the-permission-to-be-sick" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I thought I would end with this one, as it was my primary impetus for writing this article.
Two weeks ago I got sick, and last week was a mixture of receovering and participating
in a week of in-person meetings at work.  Between my belief that what we are doing at
work is important and my work ethic, there was no choice in my mind that work had to
come first.  For me, it was the only choice.&lt;/p&gt;
&lt;p&gt;But that meant my side project, the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown Linter&lt;/a&gt;
almost completely stopped.  At the end of each day, my energy was zapped, and
I needed to recharge for the next day.  If I was lucky, I was able to complete a
tiny bit of progress on the project.  As it was, I was lucky that my urge to
write and ease with writing allowed me to work on this article and another
article
&lt;a href="https://jackdewinter.github.io/2021/07/17/my-autism-and-my-patience-do-not-mix/"&gt;on Autism&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When my wife and I were talking about how our days went, as we usually do each
day, I mentioned that I was upset that I was still sick and fatigued.  And without
skipping that much of a beat, she looked at me with a funny/serious combination
look and said, “You’re not a superman you know, you’re human.”&lt;/p&gt;
&lt;p&gt;After I told my wife that she was right&lt;sup id="fnref:noted"&gt;&lt;a class="footnote-ref" href="#fn:noted"&gt;2&lt;/a&gt;&lt;/sup&gt;, it got me thinking.  I had made
a lot of progress with giving myself permission to be other things in my life, but
had I given myself permission to be sick?&lt;/p&gt;
&lt;p&gt;I am not sure I have ever thought of being sick in that context before, so I guess
the answer right now is “No”.  I need to work more on being okay with the times in
my life when I get sick, and I need to focus on a smaller set of tasks throughout
the day to allow my body to heal.   My patience does indeed get tested when I am
sick, there is nothing I can about that… yet.&lt;/p&gt;
&lt;p&gt;Once again, it is my choice.  I can give myself permission to be sick, allowing my body
to heal whatever sickness I have, or I can extend the time that I am sick with sheer
stubbornness.  Guess which one I want to work towards?&lt;/p&gt;
&lt;h2 id="closing"&gt;Closing&lt;a class="headerlink" href="#closing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the end, when everything is considered, there is little we can do to prevent
“bad stuff” from happening.  Stuff happening is a constant in life, and it makes
sense that a certain portion of that will be “bad stuff”.  But while we cannot stop
“stuff” from happening, we can sometimes change our definition of “bad” to make
what happens more acceptable to us.&lt;/p&gt;
&lt;p&gt;It is not always an easy thing to do.  Speaking for myself, it requires a decent
amount of work and upkeep on my part.  I cannot speak on the behalf of anyone else,
but I find that reframing a certain amount of the “bad stuff” as “just stuff” helps
me maintain a healthier everyday life.  And that healthier life allows me to develop
software better, at work or at home.  Sure, it takes decent effort to do, often resulting
in conversations with friends and family to better understand it, but in the end I
feel it is worth it.&lt;/p&gt;
&lt;p&gt;For me, that switch between “bad stuff” and “just stuff” has always started with
me giving permission to myself to do something or be something.  When I allow myself
permission to do something, I open myself up to allowing myself to reframe negative
things that have happened while learning from those things, not forgetting them.
[more]&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:note"&gt;
&lt;p&gt;For the sake of clarity, this is just time sitting in front of the computer.  Because of my “knack” for analysis, I keep on thinking of computer related stuff for hours after I stop work. &lt;a class="footnote-backref" href="#fnref:note" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:noted"&gt;
&lt;p&gt;Yes, we tell each other “You are right” when the other is right. And that occurs frequently.  It is just healthy.  But even so, we both smirk and ask for more when the other says it. &lt;a class="footnote-backref" href="#fnref:noted" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category></entry><entry><title>My Autism and My Patience Do Not Mix</title><link href="https://jackdewinter.github.io/2021/07/17/my-autism-and-my-patience-do-not-mix/" rel="alternate"></link><published>2021-07-17T00:00:00-07:00</published><updated>2021-07-17T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-07-17:/2021/07/17/my-autism-and-my-patience-do-not-mix/</id><summary type="html">&lt;p&gt;This past week has felt like one of the longest weeks that I can remember
in a long time.  To be blunt, I have been sick for almost the entire
week.  And while I am feeling better, I acknowledge that my
patience is almost at a breaking point.&lt;/p&gt;
&lt;p&gt;Let me …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This past week has felt like one of the longest weeks that I can remember
in a long time.  To be blunt, I have been sick for almost the entire
week.  And while I am feeling better, I acknowledge that my
patience is almost at a breaking point.&lt;/p&gt;
&lt;p&gt;Let me explain: I hate being sick.  I do not personally know of any
people that enjoy being sick, but I really hate being sick.  And I am
not talking about low-level and medium-level headaches.  I get those
frequently and usually work through them while only barely acknowledging
them.  I am talking about being sick to the point of altering my normal
routine just to get through the day.&lt;/p&gt;
&lt;p&gt;To compensate, when I am not sick, I try to take good care of myself, eating
healthy foods, drinking lots of water, taking breaks, and relaxing when I
need to.  I am keenly aware that if I do not take care
of myself, the things I cherish in my life will start to fall apart.  One of
those things that helps me take care of myself is to keep busy.  I like to
look back at the past week and know that I have accomplished something that I feel
was useful.  It is not out of fear that I have this work ethic, just a
personal drive to effect positive change, even small change.  Knowing that
I have made a positive change, no matter how small, helps me find peace with
myself and helps me to keep moving forward, despite whatever is thrown in my
way.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;At the start of last weekend, it looked like any other weekend with some
small tasks around the house to take care of.  One of those tasks was to
remove some electrical outlets in our dining room.  We were having some work done
on the house scheduled for the following Wednesday, and the contractors
needed some electrical outlets removed.
After talking with my father-in-law (a licensed electrician) on Saturday, Sunday was
reserved to work the plan that we made together. After two hours of solid work, the
required changes were done.  Working in a relatively hot attic, I was
able to disconnect the required electrical circuits and leave them
safe, all according to plan. I double checked with my father-in-law on what I did,
gave him an &amp;ldquo;after action report&amp;rdquo; that he okayed, and everything was good.  Knowing
that my father-in-law signed off on my work, I started working on my
&lt;a href="https://jackdewinter.github.io/2021/07/12/markdown-linter-full-of-sound-and-fury/"&gt;PyMarkdown project&lt;/a&gt;
that Sunday afternoon, and got a lot of work done.&lt;/p&gt;
&lt;p&gt;But Monday was another story.  It arrived rather slowly.  I woke up with a
headache that just would not go away, and a lethargy that I could not shake.  I
started writing my weekly article and got it mostly completed, but each paragraph
that I put into that article seemed twice as hard to write as the one before it.  By
the time 4:00 PM
rolled around, I just knew that I was going to miss my usual Monday 11:59 PM
deadline.  I will spare you the details of how things progressed except to say
that it landed me in the local Emergency Room at 10:00 PM that evening.
Being sent home after five hours, the only thing the doctor and I could
figure out was that I had reacted badly to something in that attic.  Whether it was
the heat, or some old insulation did not matter, I just reacted to it in a bad way.&lt;/p&gt;
&lt;p&gt;On Tuesday morning I called into work, letting them know what happened and
that I needed an extra day to try and get better.  Wednesday arrived and
I completed my work for the day, but not without a decent nap in the middle
of the day and another nap after work.  Thursday was better in that I did not need the
afternoon nap, but it was Friday before I needed no nap.  But after
completing work each day, I literally did not do any of the things that
I would normally do in the evening.  Today, Saturday, is the first day since
Sunday that I have been able to do anything on the computer that was not
work related.  And it really has been taxing my patience.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;You see, part of my Autism diagnosis is anxiety related.  The best way to
explain my anxiety disorder is that my mind starts to evaluate the different
scenarios that can occur, taking up more and more bandwidth in my brain until
I am overwhelmed.  Depending on who and what is involved in any scenario,
I can often prune some of those scenarios as being unrealistic or unlikely. With
each branch of scenarios that I prune, a proportional amount of anxiety is
released. But without a neurotypical person&amp;rsquo;s point of view, any pruning that
is related to social circumstances or another person&amp;rsquo;s emotional states is severely
limited.  And that is where the anxiety builds more and more.&lt;/p&gt;
&lt;p&gt;To help address my anxiety, I have found two patterns that usually work
very well together: overcommunication and consistency.  If I am working
with you for anything more than an hour or so, I will probably tell you
something like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, I have Autism and I tend to overcommunicate.  If it gets to be too
much, please work with me to help us find a good level of communication.
I am also open, honest, and straight forward, so please let me know
if I say something wrong, as it is probably an oversight on my part.
I know I am probably going to miss something, and I hope you will
work with me to get it out in the open, dealt with it, and move on!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For me, that is an example of overcommunication in a nutshell.  The good
news is that most of the time people ask any questions they have, and we
proceed with a good conversation about communication.  Sometimes those questions
are asked right away and sometimes those questions are asked weeks later.
From my point of view, the good news is that it helps people know that
I am okay talking about it.&lt;/p&gt;
&lt;p&gt;Consistency is the other part of my coping mechanism.  I do not
feel the need to be as rigid as others with Autism, but I still find
that structure helps.  I try and plan out the following day before I go to
bed, just getting a high-level point of view on what I want to accomplish
on the next day.  For workdays, that usually means a block of &amp;ldquo;work&amp;rdquo;
followed by walking our dog Bruce, taking a shower, relaxing for an
hour watching something, making dinner, and then some work in the evening
on a project.  For a non-workday, that usually means some work on a project
until noon, doing work around the house or spending time with my wife in
the afternoon, and then following a similar evening pattern to a workday.&lt;/p&gt;
&lt;p&gt;If that sounds obsessive, it is not meant to be.  Based on the amount of
analysis that my mind constantly does, that planning helps to quiet
some of my analytics down.  Unless there is a good reason not to, I know
I am going to walk our dog Bruce every day.  I do not need to analyze it
that much. If anything, it relaxes me to know that it is a constant and that me and
Bruce will have a good two mile walk together every day.  I also have
a good reason to expect that my wife and I will do the shopping for the
week on a Saturday.  It is not set in stone when we leave, but I do know
that we almost always do the shopping on that day.  And if we decide to
move it around to another day, we just talk about it ahead of time.&lt;/p&gt;
&lt;p&gt;While those were just two examples, there are many more.  I have
worked on learning to accept a certain amount of change within those groups of
actions.  If I have adequate time to adjust, I am okay with a couple
of those actions occurring or being delayed to another day.  But those
kinds of adjustments took me years to learn, and the fewer the things
that need adjusting the better.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;And that is where my lack of patience and this week have collided with
each other like two freight trains on a single track.  &lt;/p&gt;
&lt;p&gt;On the communication front, if everyone usually thinks with the bandwidth
of a multi-lane highway, I was probably operating like I was down to only
having one lane of that highway available, with construction being performed
on that lane.  On the consistency front, my entire schedule was
destroyed and replaced with a &amp;ldquo;whatever I have the energy for&amp;rdquo; schedule.&lt;/p&gt;
&lt;p&gt;Between my two primary coping mechanisms being effectively disabled, it was
a nightmare.  I wanted to be able to communicate to those around me with my
normal level of communication, but it just was not there.  As for the consistency
in my schedule, I would have had more consistency rolling at set of dice to
decide what I was going to do each day.  With both coping mechanisms
non-functional, the only good news was that I was too tired to care.&lt;/p&gt;
&lt;p&gt;So yes, I was very grumpy for most of the week.  Or so I thought.  It turns
out that while I still have the same low level of patience with myself that
I always have, I have fostered more patience in others with respect to
myself.  I felt I was grumpy enough to warrant &amp;ldquo;the evil eye daggers&amp;rdquo;
from my wife.&lt;sup id="fnref:dagger"&gt;&lt;a class="footnote-ref" href="#fn:dagger"&gt;1&lt;/a&gt;&lt;/sup&gt;  And I felt like I had warranted at least a dozen of them.&lt;/p&gt;
&lt;p&gt;But after I told my wife this, she looked at me with a quizzical look
on her face.  She went on to explain that when she is not feeling well,
I give her extra space to account for her own form of grumpiness.  She
also talked to me about how we both are harder on ourselves than with
other people.  I was about to argue with her, but two things stopped me.
First, she was right.  Second, I was too tired to argue.&lt;/p&gt;
&lt;p&gt;You see, the person that I trust to have a more accurate picture of
myself just told me that it was okay.  She knew that it was just a
short-term behavior change and that I would be back to my normal self
as soon as I could manage it.  She had the patience to wait until that
happened.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Being patient with yourself is not a skill that come to many of us naturally.
Most people must practice it repeatedly to get close to inner peace,
if not achieve it.  Even more difficult is finding that patience within
yourself despite trying personal circumstances.  And when I say, &amp;ldquo;achieve peace&amp;rdquo;,
I mean being able to find it with work, not that it just mystically appears.&lt;/p&gt;
&lt;p&gt;While those statements are generally true of most people, it is magnified
for many people with a disability.  Regardless of how that disability affects
your life, you know you must try harder than the people around you to get
things done.  Having your copying mechanisms temporarily disabled because you
are sick is a trying personal circumstance in my mind.&lt;/p&gt;
&lt;p&gt;But during those times, I am working towards my own understanding.  The idea
that while I may feel like a total mess on the inside, I am still capable of
projecting the same patience to myself that I do to others.  As an old friend
once said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The only way to convince someone that you are not all talk is to practice
what you are preaching.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is what I am working towards.  Affording myself the same patience
that I give to others.  Letting myself know that it is okay to talk some
time to recover from being sick.  Allowing myself to get better, at whatever
pace my body decides it wants to take.  And with all that, the patience
to know that I will probably not get it right on the first try, but it is
taking those small steps forward that count.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:dagger"&gt;
&lt;p&gt;If you are married or in a serious relationship, those daggers may take many forms, but you know when your significant other is giving you that &amp;ldquo;if it wasn&amp;rsquo;t for&amp;hellip;&amp;rdquo; look.&amp;#160;&lt;a class="footnote-backref" href="#fnref:dagger" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Autism"></category><category term="Autism"></category></entry><entry><title>Markdown Linter - Full Of Sound And Fury</title><link href="https://jackdewinter.github.io/2021/07/12/markdown-linter-full-of-sound-and-fury/" rel="alternate"></link><published>2021-07-12T00:00:00-07:00</published><updated>2021-07-12T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-07-12:/2021/07/12/markdown-linter-full-of-sound-and-fury/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/28/markdown-linter-sometimes-you-have-to-go-backwards/"&gt;last article&lt;/a&gt;, I talked
about starting to work on getting rid of some long-standing issues: nested Container Block elements.
In this article, I talk about continuing that work and dealing with the remaining
nested block scenario tests.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wish I could say that this was a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/28/markdown-linter-sometimes-you-have-to-go-backwards/"&gt;last article&lt;/a&gt;, I talked
about starting to work on getting rid of some long-standing issues: nested Container Block elements.
In this article, I talk about continuing that work and dealing with the remaining
nested block scenario tests.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wish I could say that this was a good week, but it was not.  It was not even this week
that I am about to talk about here; that was last week.  Despite my best intentions,
I got sick, and it has taken the better part of a week for me to get better.  To hear
me talk about it, please read my upcoming article, Autism and Patience Do Not Mix,
coming out later this week.&lt;/p&gt;
&lt;p&gt;Before Monday afternoon when I got too sick to work, I had 90% of this article finished.
I knew I was getting sick, but I did not feel good about publishing something that was
only “mostly” done.  I hope my decision to delay publishing this article for
a week is okay with any readers.  I would rather postpone publishing an article
for a full week than to release something that I did not think was a quality article.&lt;/p&gt;
&lt;p&gt;And on a similar level, I did not want the care that I put into that week’s work
to be glossed over by an article that was not on par with that work.  As I talk about
below, I was stunned to find out that there were only 2 examples out of 673 examples
in the GFM specification
that deal with relative indentation of block elements.  It was something that I knew
about and something that I should have dealt with earlier.  But with no pressure
from the specification’s examples to deal with relative indentation, it was not until
this week that I worked to resolve the issue.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/60abfcb562098a63910dc3bc3dc954186df2a7ee"&gt;04 Jul 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9d3f1bb66b32fe8cec2cf3c4dde0ac141400435b"&gt;05 Jul 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-do-i-use-detailed-log-files"&gt;Why Do I Use Detailed Log Files?&lt;a class="headerlink" href="#why-do-i-use-detailed-log-files" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing that I do not think I have ever mentioned is why I use log file output
instead of just debugging the code interactively.  In normal everyday development, I do a bit of both
as the issue requires.  For me, the real understanding comes from looking at
a big picture and comparing it to other pictures.  Whether the right comparison pictures
are from earlier runs of the same scenario or pictures of similar scenarios depends on
what I am looking for.  Basically, I see it as a puzzle with lots of data that
I need to solve, and I love it!&lt;/p&gt;
&lt;p&gt;While the success of this technique may vary from person to person, it just
works well for me.  If I am comparing the output of one test to another test, this technique
allows me to copy the relevant section of the log files to another editor, run the
tests again, and examine the both log file sections side-by-side.  If I did not
understand something well enough, I can reset my position in both log files to an
earlier point and restart my examination from those new positions.  Most importantly,
it allows me to see a larger sequence of values than the ones visible from a single
breakpoint within the code.  At it with that data that I can better see the bigger
picture.&lt;/p&gt;
&lt;p&gt;For those reasons and others, more detailed log files just work better for
me.  Knowing the parser because of my experience with it, I find it easy to
follow along with how each line is parsed, even though the complicated
sections dealing with Container Block elements.  I have learned that I need
to usually ignore most of the “stuff” in those blocks of the logs unless
I am looking for something specifically to do with Container Blocks.&lt;/p&gt;
&lt;p&gt;But even with all that good stuff working in my favor, that does not always
make the job of fixing issues easier.&lt;/p&gt;
&lt;h3 id="more-detail-does-mean-more-work"&gt;More Detail Does Mean More Work&lt;a class="headerlink" href="#more-detail-does-mean-more-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While there are benefits to using more detailed log files, there are drawbacks
as well.  If you are not used to the volume of data, it can be overwhelming.
Even being used to the volume, there are still times that I need to walk
away because it becomes overwhelming.  There are still times where I look
at all the data without the right mindset, and it all looks like gibberish.
I find closing my eyes and taking three or four deep breaths does wonders
for getting the right mindset, but even that does not always work.  Sometimes
I need to clear my mind by walking around for 10 to 15 minutes until my
head clears.&lt;/p&gt;
&lt;p&gt;But in the end, my evaluation on whether the costs are worth the benefits always
produce a resounding “Yes!”.  But even with that yes, I do admit that there are
times, like with Scenario Test 237 and 238, that those costs and benefits
get tested… sometimes to their maximums.&lt;/p&gt;
&lt;h2 id="scenario-test-237"&gt;Scenario Test 237&lt;a class="headerlink" href="#scenario-test-237" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting with what I believed to be the easiest of the two disabled tests, I
started with Scenario Test &lt;code&gt;test_list_blocks_237&lt;/code&gt;, quickly renamed &lt;code&gt;test_list_blocks_237x&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike the previous two tests, these two tests were introducing something
that was a core tenet to the nesting of Container Blocks:  relative spacing.
Not complaining to the writers of the
&lt;a href="https://github.github.com/gfm/"&gt;GFM specification&lt;/a&gt; too much,
but as this is a core concept of nested blocks, I wonder why the specification
allocated only two examples to this concept and not more.  With all seriousness,
every other example in their specification can be properly converted into
HTML without worrying about relative spacing.  So, what is relative spacing
or more properly &lt;code&gt;relative nested container block spacing&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Basically, the GFM specification talks about how nested block spacing is not
absolute, but relative to the last Container Block element on that line.  To put
this into perspective, consider the above example.  When properly parsed,
the specification says that it will produce the following HTML output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;one&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;two&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if you look at the Markdown example with an absolute mindset, the text
&lt;code&gt;two&lt;/code&gt; is clearly not indented enough to qualify as being within the
Ordered List element.  So what gives?&lt;/p&gt;
&lt;p&gt;From a relative positioning point of view, the first line is broken down
into the following sections: &lt;code&gt;{space}{space}{space}&amp;gt;{space}&amp;gt;{space}&lt;/code&gt; for
the two nested Block Quotes elements that start the line, &lt;code&gt;1.{space}{space}&lt;/code&gt; for
the Ordered List element that is next on that same line, and &lt;code&gt;one&lt;/code&gt; for the text
for first List Item of that Ordered List element.  Using that same
relative point of view, this means that there are four characters after
the Block Quote elements before the text of that List Block element begins.&lt;/p&gt;
&lt;p&gt;Applying that to the last line of the example, the two nested Block
Quote elements take up &lt;code&gt;&amp;gt;&amp;gt;{space}&lt;/code&gt;, with the following nested Ordered List element
coming into effect after the four space characters &lt;code&gt;{space}{space}{space}{space}&lt;/code&gt;.
At that point, the text &lt;code&gt;two&lt;/code&gt; is present.  This means that, relatively speaking,
the text &lt;code&gt;two&lt;/code&gt; is validly indented to remaining part of the Ordered List element.
Looking at the HTML output above, this is indeed how that is parsed.&lt;/p&gt;
&lt;h3 id="how-to-approach-that-change"&gt;How To Approach That Change&lt;a class="headerlink" href="#how-to-approach-that-change" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In adding this support to the PyMarkdown parser, I was faced with two
options: make the parser’s handling of nested sections relative-aware
or make adjustments where needed.  While I would like to eventually
adjust the parser to be more relative-aware, I quickly figured out
that it would take quite a bit to make that change.  I spent a good
day going through some preview steps of what it would take, just
to get an idea of the effort.  If I had to guess, it would take
at least a month or two, if not more.  Seeing as I want to get the
PyMarkdown linter out there, that was out.  So, the only good option
left was to make adjustments where needed.&lt;/p&gt;
&lt;h3 id="subtle-changes"&gt;Subtle Changes&lt;a class="headerlink" href="#subtle-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To be fully honest, getting to this set of changes took a long
time to figure out, including at least three times where I had to walk
away to clear my head.&lt;/p&gt;
&lt;p&gt;The first part of solving that puzzle was recognizing from the
logs that the &lt;code&gt;__handle_block_quote_section&lt;/code&gt; function was not
providing the right adjusted text.  Specifically, in handling
this case under normal situations, the correct number of space
characters are placed in the respective Block Quote token.  But
because they both start on the same line, things got messed up.
To correct this, I added the following code to ensure the
&lt;code&gt;adjusted_removed_text&lt;/code&gt; and &lt;code&gt;adj_leading_spaces&lt;/code&gt; variables both
had the correct values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;count_of_actual_starts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count_characters_in_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;count_of_actual_starts&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;this_bq_count&lt;/span&gt;
        &lt;span class="n"&gt;adj_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_removed_by_container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;adj_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;adj_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
        &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adj_leading_spaces&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that text now adjusted properly, it was on to modifications to
the &lt;code&gt;__handle_nested_container_blocks&lt;/code&gt; function.  For this function,
the &lt;code&gt;indent_level&lt;/code&gt; member variable of the start List Block token was
being set to a number that indicated absolute position, not relative
position.  To remedy that, I added code to calculate the indentation
difference between the original Block Quote element and the original
List Block element.  The &lt;code&gt;adjusted_indent_level&lt;/code&gt; variable was then
adjusted to properly reflect the indentation relative to the Block
Quote element and how it was set on the current line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="n"&gt;list_start_token_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;token_after_list_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;list_start_token_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
        &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;token_after_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token_after_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;adjusted_indent_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;end_container_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With those values calculated, it then allowed me to do the final changes
to the function.  Before the big change was added, I needed the function
to recompute the &lt;code&gt;indent_level&lt;/code&gt; variable to allow for an adjustment to
the relative positioning.   However, before I reset &lt;code&gt;indent_level&lt;/code&gt;, I
needed the algorithm to be aware of whether there was any difference
between the &lt;code&gt;indent_level&lt;/code&gt; variable and the &lt;code&gt;adjusted_indent_level&lt;/code&gt; variable,
so adjustments could be made later.&lt;/p&gt;
&lt;p&gt;After all those changes, it came down to the two lines at the end of
the following example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;adjusted_indent_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;adjusted_indent_level&lt;/span&gt;
    &lt;span class="n"&gt;indent_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;column_number_delta&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end_container_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;                    
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After all that work, the only thing that still needed to be
adjusted was the &lt;code&gt;adj_line_to_parse&lt;/code&gt; variable containing the
current line.  Because both Container Block elements are processed
independently of any other elements, the &lt;code&gt;adj_line_to_parse&lt;/code&gt; variable
is reset to remove any whitespace that is part of the whitespace for
one of the Container Block elements.  In this scenario, the right
amount of whitespace was not removed, leading the Leaf Block
element processing to be wrong.&lt;/p&gt;
&lt;p&gt;By removing that extra whitespace, everything fell into place, and
it worked!  It was a long way to get there, but it was worth it.&lt;/p&gt;
&lt;h2 id="scenario-test-238"&gt;Scenario Test 238&lt;a class="headerlink" href="#scenario-test-238" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Taking a quick look at this issue, on the surface it seemed to be the
same issue as with scenario test 237, just the order in which the
different indents were applied were on the last line, not the first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;-&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the output tokens, everything looked fine, and the HTML was
being generated properly.  But on closer examination, there was one little
difference that changed the output of the Markdown generator: an extra
line of leading whitespace.&lt;/p&gt;
&lt;p&gt;To make sure that the Block Quote element is being represented properly,
when each line inside of the Block Quote element is tokenized, the leading
spaces including the &lt;code&gt;&amp;gt;&lt;/code&gt; character are stored within the owning Block
Quote token.  This allows for it to be reconstructed without any issues as
all leading Block Quote information is present, even if it varies.  But in
this case, the leading spaces for the first Block Quote were added to the
token, followed by a newline character and a fully indented representation
of the second Block Quote element, both from that line.  While each one
was accurate by itself, when they were combined by the Markdown generator,
they added a lot of extra whitespace.  That was the issue.&lt;/p&gt;
&lt;p&gt;It took a bit of head scratching before I figured it out, but I did
figure it out.  In a nutshell, because of two spaces between the first
Block Quote character and the second Block Quote character, they were not
interpreted as a “group” of Block Quote elements.  Rather, they were
interpreted as a Block Quote element, a space, and another Block Quote
element.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;special_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;special_case_adjusted_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;stack_bq_count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;stack_bq_count&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;block_quote_token_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_block_quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;block_quote_token_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block_quote_token_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;stack_bq_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;stack_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;matching_block_quote_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;stack_index&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;matching_block_quote_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;last_newline_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;matching_block_quote_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;special_case_adjusted_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;matching_block_quote_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_spaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;last_newline_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;special_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="cleaning-up-with-small-variations"&gt;Cleaning Up With Small Variations&lt;a class="headerlink" href="#cleaning-up-with-small-variations" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having a Monday off and with this week’s article started, I wanted to see if
I could make some progress on two variations: one for scenario test 237 and
one for scenario test 238.  &lt;/p&gt;
&lt;p&gt;As detailed above, the Markdown for scenario test 237 is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where the indentation on the final line allows that line to be included
in the Ordered List element started on line 1.  The small variation there
was to create test function &lt;code&gt;test_list_blocks_237e&lt;/code&gt; with one less space
character on that final line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This reduction in indentation on that final line makes that final line
ineligible for the Ordered List element. I was pleasantly surprised that
it worked right away, without any changes required.&lt;/p&gt;
&lt;p&gt;Scenario test &lt;code&gt;test_list_blocks_238a&lt;/code&gt; includes a similar change, this
time adding an extra space on the final line to make it eligible for
the Unordered List element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;-&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;two&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this new test was not as successful as test function
&lt;code&gt;test_list_blocks_237e&lt;/code&gt; was, it only required minimal changes
to make it work properly.  The HTML output was already consistent
with what was expected, but the Markdown generator had additional
whitespace in its output for the final line.  Specifically, when
that final line was parsed, the Paragraph token started with the
extraction of two space characters.  This meant that the regenerated
output had four space character between the final &lt;code&gt;&amp;gt;&lt;/code&gt; character and
the &lt;code&gt;two&lt;/code&gt; text.&lt;/p&gt;
&lt;p&gt;Addressing that issue did not require that much work.  In the
&lt;code&gt;__handle_nested_container_blocks&lt;/code&gt; function, I added the following
code to reduce the number of spaces by the appropriate amount:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;nested_container_starts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;indent_was_adjusted&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;already_adjusted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code was added specifically to address the extra space characters
and to remove them from the adjusted line variable &lt;code&gt;adj_line_to_parse&lt;/code&gt;.
If the indent was adjusted and the current line includes a nested list start
token, this code reduces that adjusted line variable by the list’s indent.
The code itself was made simpler by the handling of an increase in the spacing
already being handled previously in that same function.&lt;/p&gt;
&lt;p&gt;After taking a bit to figure out that solution, once it was implemented,
everything worked fine.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The full quote from Shakespeare’s Macbeth is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a tale told by an idiot, full of sound and fury, signifying nothing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Trying to mentally return to when I learned this line in high school, I
remember talking specifically about that line.  I seem to remember that we
were talking about how Macbeth’s wife had just died, and he did not see that
life contained any meaning for him after that point.
Over the years since high school, my thoughts on that line have changed a
bit.  I now think of that same line
in situations where someone goes on and on about something, only to have
it appear in real life as something with little sound or fury.&lt;/p&gt;
&lt;p&gt;The work that I documented in this article really did feel like that.  When
I started the work, I was not sure how difficult the work was going to be,
only that it would require some changes.  Now, it may be because of the
research that I did to get prepared for these changes, but those changes
ended up
feeling… well… trivial.  I was worried that I was going to have to make
some grand changes to the project to accommodate this “little” issue that
needed to be fixed, and the actual work was “little”.&lt;/p&gt;
&lt;p&gt;Do not get me wrong, I am grateful that those issues required less than
100 lines of code to change.  But at the same time, I realized that I had
built this issue up as “THE NASTY CHANGES REQUIRED TO…”&lt;sup id="fnref:caps"&gt;&lt;a class="footnote-ref" href="#fn:caps"&gt;1&lt;/a&gt;&lt;/sup&gt; instead of
“yup, just some normal tweaking” changes.  For context, I spent a full evening working
on the research and trying simple changes out until I was convinced it would
take a more concerted effort to solve.  And even then, I did some more testing
to make sure that my research was correct. For me, usually that amount of
research leads to a lot of changes.&lt;/p&gt;
&lt;p&gt;And maybe that is why I feel that it went from “sound and fury” to almost “nothing”:
I did proper research.  Sure, it took some time to figure out the correct decisions
to make based on that research, but it was that research that was pivotal.
For me, that is a just a good feeling to have.  While I was not able to show
any actual code as a result of that research, it helped me prune many decision
trees early on, resulting in allowing me to follow a quick path to
the actual work I needed to do.  Essentially, it pointed out the 90% of the
work that I should avoid and had me focus on the 10% of the work that would
be most beneficial.  And that helped a lot!&lt;/p&gt;
&lt;p&gt;In the end, the way I see it, while the “sound and fury” of debugging is
usually where I expect the hard work to be, there are cases where the
“signifying (almost) nothing” portion of the debugging work is where it is at!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After the week I have had being sick, I really am not sure what is going on yet.
Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:caps"&gt;
&lt;p&gt;For any readers not fluent in text-speak or DM/IM-speak, the extended use of capital letters usually implies that the author of the text is yelling.  In this case, it would be more of a “booming load” voice, implying sound and fury. &lt;a class="footnote-backref" href="#fnref:caps" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Sometimes You Have To Go Backwards...</title><link href="https://jackdewinter.github.io/2021/06/28/markdown-linter-sometimes-you-have-to-go-backwards/" rel="alternate"></link><published>2021-06-28T00:00:00-07:00</published><updated>2021-06-28T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-06-28:/2021/06/28/markdown-linter-sometimes-you-have-to-go-backwards/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/21/markdown-linter-elevating-extensions/"&gt;last article&lt;/a&gt;, I talked
about elevating the extension object support in the PyMarkdown project to the
same level as plugins rules.  In this article, I talk about starting to work on
getting rid of some long-standing issues: nested container blocks.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are times in my professional …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/21/markdown-linter-elevating-extensions/"&gt;last article&lt;/a&gt;, I talked
about elevating the extension object support in the PyMarkdown project to the
same level as plugins rules.  In this article, I talk about starting to work on
getting rid of some long-standing issues: nested container blocks.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are times in my professional career where I have written chunks of code that
I knew were going to be as near to eternal as anything is in our profession.  There
are also times that I wrote code understanding that it would be replaced in a couple of
months.  Whether it was replaced in that time frame was above my paygrade.
Because of situations like those, I try and “slant” my code a bit towards those
goals, but I inevitably try and treat both situations with the same amount of
care and respect as each other.  What changes for me is whether to code is just
&lt;em&gt;a prototype&lt;/em&gt; or &lt;em&gt;production code&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Yes, both of those phrases were in italics.  Why was that? Due to external pressures from
people in those higher paygrades, developers often feel the need
to take some code that was meant as a prototype and productionize it as quickly
as possible.  The request is usually to take code that we know “just worked… barely”
and code that was used for experiments and to show possibilities, and get that code ready
for public consumption as quickly as possible.  And, as with anything that is
rushed, things get lost in the process, with quality usually being the first
thing to go.&lt;/p&gt;
&lt;p&gt;And as much as the PyMarkdown project is on my own time and pace, I
still occasionally find myself looking at some code that was only meant as a placeholder.
It is those times that I must remind myself that sometimes, in order to take
good steps forward, I need to take a couple of steps back.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/1a46d3c119a58be175a4ee642493f7e3ed2d8840"&gt;26 Jun 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/40c1333324e1927b51d9800e3957a893077e6fa9"&gt;27 Jun 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="giving-it-some-context"&gt;Giving It Some Context&lt;a class="headerlink" href="#giving-it-some-context" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am going to start this article with a set of statements that I believe sums
up my work on this project.  The first is that writing a Markdown parser is hard.
Not impossibly hard, but hard enough.  If there is any doubt about how hard it
is, click on &lt;a href="https://johnmacfarlane.net/babelmark2/?text=%3E%3E+one%0A%3E%3E%0A%3E%3E++++two"&gt;this link&lt;/a&gt;
and count the number of different interpretations of that simple Markdown document.
Each set of results is another way in which Markdown was interpreted by someone
writing a parser.  Each one is another road taken by another set of developers.&lt;/p&gt;
&lt;p&gt;Then bring into that mix, the &lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown specification&lt;/a&gt;
and the reference implementations of the &lt;a href="https://spec.commonmark.org/"&gt;CommonMark family of parsers&lt;/a&gt;.
These efforts try to bring those different roads together by providing a single
specification, a single answer for questions that previously caused parser
developers to take divergent roads.  Even better, it provides
a set of examples that parser developers can test against. The downside of this
is that there is now a standard that implementors must measure up to, otherwise
they cannot claim compliance with that standard.  That is of course, if they
decide that they want their parser to be &lt;em&gt;GFM compliant&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And then there are people like me that want a grammar checking or
linting ability for their Markdown documents.  I decided to work on this project because
I want to bring the same kind of “sanity” to my Markdown documents that I bring
to my source code.  For Python there is &lt;code&gt;flake8&lt;/code&gt; and &lt;code&gt;pylint&lt;/code&gt;, and for Java there
is &lt;code&gt;PMD&lt;/code&gt; and &lt;code&gt;checkstyle&lt;/code&gt;.  So, why can I not have a similar linter for Markdown?
From my point of view, it was a niche that
needed to be filled, and I had an interest in learning more about Python and
addressing that niche.&lt;/p&gt;
&lt;p&gt;Writing a GFM compliant Markdown linter adds yet another level of complexity to
that already difficult process. Not only does the project have to pass the qualifications
for writing a compliant parser, but I need to be able to be extremely confident
that the token stream the parser produces is correct.
As the PyMarkdown project allows for rules to be written that analyze that token
stream, everything needs to be reported properly and cleanly, including whitespace.
If the token stream is off, the rules that execute on that token stream are off.
So I need to be very confident about the accuracy of the token stream.&lt;/p&gt;
&lt;p&gt;To put it bluntly, Markdown parser developers only worry about whether the HTML they
output looks right.  As a Markdown linter developer, I worry about whether the output
looks right, whether the rules are coded right, and whether the tokens used to power
those rules are right. And that takes a lot of effort to get right!&lt;/p&gt;
&lt;h2 id="getting-to-work"&gt;Getting To Work&lt;a class="headerlink" href="#getting-to-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And so, this week I decided to start tackling one of the issues I have been
avoiding for at least six months, if not longer: nested container blocks.&lt;/p&gt;
&lt;p&gt;At the start of this week’s work, I knew that this work was going to be split
into multiple blocks of work.  I was not sure how many at the outset, but I knew
it was going to be multiple blocks.&lt;/p&gt;
&lt;h3 id="do-the-research-first"&gt;Do The Research First&lt;a class="headerlink" href="#do-the-research-first" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To be clear, the parser was not broken when I went to do this work, nor was
it cleanly working.  It was kind of working and kind of not working.  Yeah, those statements
are a bit fuzzy, so let me bring it into context.  The parsing of some of the
rudimentary nesting all hinged
on one specific line of code in the &lt;code&gt;__handle_block_quote_section&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;forced_close_until_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;possible_list_start_index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was a kludge, I admit, but it was a decent kludge that had worked well.  The
usual metric that I use for things like that are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are the scenario tests passing?&lt;/li&gt;
&lt;li&gt;Are they maintainable?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The answer to the first question was yes, every scenario test was passing.  I was
initially hesitant to initially answer the second question, as I knew that
very few examples dealt with these kinds of scenarios.  Because of that, I thought
that I had something in there that was decent, otherwise the scenario tests that
I already head would not have been passing.  But then I started to look at the
nesting blocks code more closely.  After a bit of examination, I realized that I
had used code that was more of a sledgehammer than an artfully crafted tool.&lt;/p&gt;
&lt;p&gt;Let me explain that comparison a bit more.  I am not sure when I added that
exact line and for what reason, but its intent is clear to me.  The next time
that the close function is called, that variable will be passed into the
close function.  That will tell the close function to force a close, and to
only stop when that specific index is reached.  There is no finesse, no fine
tuning, just a simple removal until that index is hit.  And just by looking
at the code, I could tell there would be issues.   I was concerned about
the maintainability of that code going into this refactoring task.&lt;/p&gt;
&lt;p&gt;I had solved that issue with a sledgehammer, and I was not happy about that.
I knew I could do better; I just needed some time to figure out how.  This
was a good time, so I “gave” myself the time I needed to think it through
properly.&lt;/p&gt;
&lt;h3 id="experimental-testing"&gt;Experimental Testing&lt;a class="headerlink" href="#experimental-testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Taking some time to get to know the code better, one thing became very evident. As
soon as I started experimenting with different values, the &lt;code&gt;test_block_quotes_extra_02a&lt;/code&gt;
series of scenario tests started failing.  Nothing else, just those scenario tests.
That was good news!  That meant that the impact of this fix was relatively
self-contained.  When I thought about it, it was also bad news as the series
of tests that failed were all extra tests.  That probably meant that I was
going to have get creative near the end of this series of tasks to ensure
there was good coverage for all these scenarios, but that was a task for later.&lt;/p&gt;
&lt;p&gt;As I looked at that set of tests, I noticed another thing that the tests had
in common: they were all scenarios in which a double Block Quote element was
followed by a start List Block element. Even as I played around with changing
other pieces of the nesting code, the only things that seemed to be impacted
were those tests.  From where I was, that was a good observation to make!&lt;/p&gt;
&lt;h3 id="isolating-the-changes"&gt;Isolating The Changes&lt;a class="headerlink" href="#isolating-the-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given the above information and a set of scenario tests that I needed to
get passing again, I started at the beginning: with the trailing List Block
element.  And for the initial scenario tests, I chose &lt;code&gt;test_block_quotes_extra_02ax&lt;/code&gt;
which had a Markdown document of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;quote&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at that Markdown and the source code,
I was confident that I was going to need to keep track of that
List Block element, so I added the following line to the start of the
&lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This ensured that every time I started to look for a new container block, I
would start with a clean slate.&lt;/p&gt;
&lt;p&gt;Then came the hard part: defining what set that variable and when.  Using
the information I had, I noticed that the token stream was correct until
the point where the last line was encountered.  It was then that things
went haywire.  So, taking a stab at it, I added the following three
lines, with tons of debugging around it to test my theories:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adjusted_text_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I put lots of debug in there, and kept in in there, as I was not sure what
I was going to need for the other nested cases that I knew were going to follow.  &lt;/p&gt;
&lt;p&gt;Following through with the information that I had, I knew that I needed
to look for cases where a series of Block Quote elements were followed
by another container element, the List Block element.  Once I had that,
I wanted to confirm that the following element was indeed a list, and that
the line being processed was not a blank line (after the initial Block
Quote characters were removed).  At that point, I was comfortable setting
the &lt;code&gt;nested_list_start&lt;/code&gt; member variable to indicate that we had one of
those messy nested container situations to deal with.&lt;/p&gt;
&lt;p&gt;And to be totally clear, this code was added as a step forward, not
a final solution.  I could already think up some weird combinations
in my head that would make this fail, but they would come later.
At that point, I was simply happy that I identified the list start that
was causing all the commotion.&lt;/p&gt;
&lt;h3 id="responding-to-the-trigger"&gt;Responding To The Trigger&lt;a class="headerlink" href="#responding-to-the-trigger" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that I had the trigger, I needed the code to respond to that trigger.
Having looked through the code multiple times in the last week, there
was one function that I knew was the nexus of all things nested:
the &lt;code&gt;__handle_nested_container_blocks&lt;/code&gt; function.  This is the function
that helps handle the recursion that can come with handling nested
container blocks.&lt;/p&gt;
&lt;p&gt;But when I specifically investigated the code handling a List element
within a Block Quote element, all I saw was this one statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;end_container_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I knew that would not handle the scenarios properly.  So, after a lot of
thinking and experimenting, I changed that code to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;include_lists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Essentially, if the parser was in a scenario where it had a Block Quote
element that contains a List Block element, it needed to close that
List Block element.  This was not the end goal, but a first step.
I knew that this had started me moving in the right direction, and that
was what was important.&lt;/p&gt;
&lt;p&gt;Looking at the third line and the GFM specification, I realized that
the Block Quote element was terminating itself as soon as it encountered
the third line.  Block Quote elements get terminated right away with Blank
Lines, but List Block elements only get terminated when a non-compliant
text line is encountered.  And according to the parser, it was still within
the List Block element created on line two. I needed to fix that next.&lt;/p&gt;
&lt;p&gt;To address that, I changed up the code a bit to make sure that the
List Block element stayed open when faced with a Blank Line element in this
scenario. That is when that above code changed into:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;x_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;include_lists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This moved the closing of the block quote down to the last line in the document,
where it belonged.   Now, when that document was processed, it only closed
the List Block element on the last line of the document.  That was great.&lt;/p&gt;
&lt;p&gt;The only problem left after that change was that the Blank Line tokens were appearing
inside of the List Block element instead of outside of the List Block element.
As any concept of a token stream is not present in the GFM specification,
I had to read between the lines to answer this question: do the Blank Line
tokens belong before the List Block element or after the List Block element?&lt;/p&gt;
&lt;p&gt;I thought about this long and hard, but in the end, I did not feel like
it made any sense for the List Block element to contain those Blank Line
tokens.  Looking at the specification, I read how a list’s looseness
determined how it was presented in the final HTML output.  And when
I looked at the HTML output for those test scenarios, I saw output
that did not indicate that the looseness  was being impacted by those
Blank Line tokens.&lt;/p&gt;
&lt;p&gt;Given that observation, I changed the code once again, arriving at the following
code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;y_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;y_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;x_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_open_blocks_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;include_lists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that in place, all the original tests were passing, but something was still
bugging me.  It was that last line.  I knew I needed to do something about it.&lt;/p&gt;
&lt;h3 id="that-last-line"&gt;That Last Line&lt;a class="headerlink" href="#that-last-line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With all the existing tests passing, I took a look at that last line in
the Markdown documents and had one question for myself: what if that line was
a valid List Block element continuation?  With that, the &lt;code&gt;test_block_quotes_extra_02ae&lt;/code&gt;
function was created.  This was simply a variant of the main Markdown test scenario,
but with a final line that continued the list, rather than end it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;quote&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It took me about twenty minutes to get it right, but in the end, the code
that had to change to accommodate that new scenario was small:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;adj_line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end_container_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_list_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent_level&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was now that I could look back at these scenarios and feel that the
code was now maintainable. I was not really scared about changing the code
before, but I was concerned.  Now I was confident that the code was in a
good place to allow any changes to be made.&lt;/p&gt;
&lt;h2 id="echoes-of-stories-long-forgotten"&gt;Echoes of Stories Long Forgotten&lt;a class="headerlink" href="#echoes-of-stories-long-forgotten" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I remember a story that someone told me a long time ago that went something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A machine in a factory is not working.  As much as the workers try, they cannot
get it to work.  After a lot of frustrating effort, one of the workers suggest
to management that they give a shout to the old worker who, after working at
the factory for 40 years, just retired earlier that year. With every other idea
not working, the management of the factory eventually decide to give him a call.&lt;/p&gt;
&lt;p&gt;Early the next day, the old worker shows up and is shown to the machine by the
management.  He looks and prods at the machine for a good hour before he turns to
them saying “I am confident I can fix the machine, but I want 1 million dollars
to do so. I know you need to talk about it, so let me know when you have made
up your mind.”  &lt;/p&gt;
&lt;p&gt;Time goes by, and the management is frustrated.  They ask the workers
that are there why they cannot fix the machine.  Those workers just shrug.  “We
did not work here for our entire lives, like he did! He knows that machine better
than he knows his own kids!” being their response.  Management is in a tight
situation.  They are losing one hundred thousand dollars for each day that
the machine is not working.  They need something in this situation to give,
or they will soon be out of business.&lt;/p&gt;
&lt;p&gt;A week later, the management looks at their numbers, calculating that they
can minimize their losses if they can just get the old worker to fix the machine.
They give the old worker a call, and he comes in the next morning.  After they
give him a cashier’s check for the money he asked for, he goes to the machine,
takes out a small screwdriver, and makes three small adjustments to the machine
in less than 30 second before standing up.  Walking over to the power switch
for the machine, he turns it on, and it begins to work.  The machine works so
well, the other worker could have sworn it had just been delivered from the factory.&lt;/p&gt;
&lt;p&gt;Management is outraged.  “We want that check back!” they say.  “You conned us.
We would have never paid one million dollars for less than one minutes worth
of work! We will sue you.”&lt;/p&gt;
&lt;p&gt;The old man smiled back at them.  “Please, go ahead.  I never said that I was
charging one million dollars for the work that I did.  I was charging one
million dollars for the knowledge required to do the work that I did!  I am
sure any sane judge would see it that way too!”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The moral of the story?  Knowledge is power, and timing is everything.&lt;/p&gt;
&lt;h3 id="putting-that-to-work"&gt;Putting That To Work&lt;a class="headerlink" href="#putting-that-to-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The work that was done in the previous section was not done to directly fix
any of the issues that I wanted to fix.  It was done to allow me the
latitude to make those fixes that I knew I needed to do later.  Just like
that old worker, I knew that if I wanted to clean up the nested container
scenarios, I first needed to ensure that the parser was running cleanly.
With what was there before I cleaned it up, I was confident that it would
have caused me more effort to work around it than to fix it properly.&lt;/p&gt;
&lt;p&gt;Basically, I believe that knowing that I needed to do that work and scheduling
it right before I handled the issues I wanted to fix was a smart move. Did it
take time? Yes.  But did it save time in the long run?  Inevitably.&lt;/p&gt;
&lt;h3 id="fixing-scenarios-270-and-271"&gt;Fixing Scenarios 270 and 271&lt;a class="headerlink" href="#fixing-scenarios-270-and-271" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Spending the time fixing the already passing scenario tests for nested containers
also had a nice side effect of letting me be more familiar with that code and
the resultant token streams. That helped with what I did next.&lt;/p&gt;
&lt;p&gt;To set the stage for the rest of this section, what these tests were parsing
were all variations on this piece of Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Blockquote&lt;/span&gt;
&lt;span class="n"&gt;continued&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nothing complicated, just nested containers, going back and forth between
Block Quote elements, List Block elements, and back to Block Quote elements.&lt;/p&gt;
&lt;h3 id="finding-the-first-issue"&gt;Finding The First Issue&lt;a class="headerlink" href="#finding-the-first-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I started looking at the token stream for
Scenario 270, I quickly noticed that something was missing: the inner Block
Quote token was not there.  Enabling debug mode, I quickly traced through the
&lt;code&gt;__handle_block_quote_section&lt;/code&gt; function until I hit this part of that function
for the inner Block Quote element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;container_level_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;stack_bq_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;requeue_line_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BlockQuoteProcessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ensure_stack_at_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;this_bq_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;stack_bq_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;original_start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was here that I noticed that the &lt;code&gt;this_bq_count&lt;/code&gt; variable was set to &lt;code&gt;1&lt;/code&gt;.
Doing some digging, what I determined was that in making the parsing of
the Block Quote element easier in other cases, I was only keeping track
of consecutive cases of Block Quote elements.  The first Block Quote element
and the Ordered List element were both recognized, but when it hit this
function, it thought the right number of Block Quote tokens were already
addressed.&lt;/p&gt;
&lt;h3 id="making-it-right"&gt;Making It Right&lt;a class="headerlink" href="#making-it-right" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It took a bit of effort to make these tests work right, but it
was completed within around ninety minutes.  Because of the existing
logic, I knew that I needed to create a variable like &lt;code&gt;container_start_bq_count&lt;/code&gt;,
set it at the start of the &lt;code&gt;__look_for_container_blocks&lt;/code&gt; function,
and pass it into the Block Quote element handling.  I felt that rewriting
a lot more code was not the best thing to do, so I just needed to work with
the information that I had.  Given that scenario, I also felt that I could
adjust for it by adjusting the &lt;code&gt;this_bq_count&lt;/code&gt; variable to include the number
of any previous Block Quote elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;this_bq_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, things were looking better, but the extracted whitespace was
off, adding more whitespace than was needed when creating the new
Block Quote token.  That also was a quick fix, adding this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;original_start_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, everything was looking good except for the other whitespace part
of the token: the leading whitespace.  But as with the previous fix,
this one was easy to spot and easy to do, changing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;found_bq_stack_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;found_bq_stack_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;removed_text&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;removed_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;original_start_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container_start_bq_count&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;original_start_index&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;removed_text&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;found_bq_stack_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;found_bq_stack_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matching_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_leading_spaces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;adjusted_removed_text&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="html-output-and-markdown-output-changes"&gt;HTML Output and Markdown Output Changes?&lt;a class="headerlink" href="#html-output-and-markdown-output-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While there were changes to both the HTML generator and the Markdown
generator, both changes were small.  It was getting the token stream
to be correct that allowed those changes to remain small.&lt;/p&gt;
&lt;h3 id="wrapping-up"&gt;Wrapping Up&lt;a class="headerlink" href="#wrapping-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After double and triple checking the changes that I made for scenario test 270,
I was not surprised to see that scenario test 271 was working as well. There
was only a small difference between the two, and that difference was on
the second line.  Once the inner Block Quote elements was properly inserted,
the rest of both scenario tests, just fell into place.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am not sure where to place how I feel about these changes on a scale.
I did not feel like I was making amends for leaving that kludge in there.
But I also know that I wish I had dealt with that kludge a long time ago.
If anything, I guess I was a bit sad that I did not take the time to fix
that issue when I needed to, leaving it until now.&lt;/p&gt;
&lt;p&gt;But that is how things often work with software development.  You approach
things with the best of intentions, and sometimes you must make hard choices.
In this case, I did not make a bad choice, just not a pretty choice.  It
worked for what it needed to do, but if left in there, it would have incurred
more cost in the long run.&lt;/p&gt;
&lt;p&gt;From my point of view, my feelings aside, I believe I made the right choice
at the time.  These changes affect less than 8 tests out of 2700+ tests,
which is a very small percentage.  Should I have delayed the work I was
doing just to fix those tests?  While my feelings and ego may say no,
in hindsight it looks like it was within the range of right
things to do.  It is made even more so by the fact that I understood this
at the time I made that decision and added an item to the issues list
to return to it.&lt;/p&gt;
&lt;p&gt;This really was a case of taking a couple of steps back, to ensure I
can take these forward steps without worrying about tripping over bad
code.  And that is a good thing!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since I have started down the road of addressing these nesting issues, next
week is going to be about continuing, and hopefully completing that work.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Elevating Extensions</title><link href="https://jackdewinter.github.io/2021/06/21/markdown-linter-elevating-extensions/" rel="alternate"></link><published>2021-06-21T00:00:00-07:00</published><updated>2021-06-21T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-06-21:/2021/06/21/markdown-linter-elevating-extensions/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/14/markdown-linter-getting-stuff-done/"&gt;last article&lt;/a&gt;, I talked
about getting back to PyMarkdown and my efforts to remove items from the issues list.
In this article, I talk about elevating the extension object support in the PyMarkdown
project to the same level as plugins rules.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is not going to …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/14/markdown-linter-getting-stuff-done/"&gt;last article&lt;/a&gt;, I talked
about getting back to PyMarkdown and my efforts to remove items from the issues list.
In this article, I talk about elevating the extension object support in the PyMarkdown
project to the same level as plugins rules.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is not going to be a terribly long article.  Not for lack of content, but for
lack of cleanly reportable content.  For me, cleanly reportable contents are things
that I can say “here is what I did” or “I did this because”.  And for this week’s
work, that content is mostly about documentation and reorganization.&lt;/p&gt;
&lt;p&gt;It was in the weeks leading up to this work that I started thinking about extensions
in a different light.  That light was that extensions and plugin rules were similar
concepts, but for different foundation objects.  As soon as that idea settled into
my brain, I knew I needed to elevate extensions to the same level as plugins.&lt;/p&gt;
&lt;p&gt;But here is the hard part for a writer.  Writing about documentation is boring.
Writing about refactoring is boring.  “Hey, I refactored this function from
this module to this other module and made it work” is not exactly something
that screams “read me!”  Neither is talking about how I spent hours agonizing
over trying to get the right theme and voice for the documentation.  I mean,
readers that are writers may sympathize, but I am very sure that is all.
And while I do talk about why I made certain moves
or enhancements, there is only so much of that content available.&lt;/p&gt;
&lt;p&gt;Here is to hoping that I can make refactoring and documentation more interesting!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/59f4aa04507c0ae43a67de5634eb3c14a0f2866d"&gt;17 Jun 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d5064dacc0d04cfaad0217ab3cb37fd6a22a031f"&gt;20 Jun 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="making-extensions-first-class-citizens"&gt;Making Extensions First-Class Citizens&lt;a class="headerlink" href="#making-extensions-first-class-citizens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was a while ago when I started asking myself if extensions needed to be on the same level
as plugin rules.  In any kind of rules engine, such as a linter, the object holding the
rules is a first-class citizen by default.  Basically, you need the engine, and you need
the rule.  Without either one, the other one is useless.  As the rules are contained
within plugin objects, those plugin rules are first-class citizens.  As one of my
professors in college would say “Q.E.D.”&lt;/p&gt;
&lt;p&gt;But what about extensions?  Was there a similar argument to be made for extensions
being first-class citizens?  For the last few months, I was convinced that similar arguments
could not be made for the extensions.  After all, what did extensions do for the rules
engine?  How did they enhance the behavior of the linter?  At best, they were scan-time
switches that had a bit of an algorithm behind them.&lt;/p&gt;
&lt;p&gt;And then one evening, after one of the most embarrassing
&lt;a href="https://en.wikipedia.org/wiki/Facepalm"&gt;face palms&lt;/a&gt;
in my professional life, I realized that I was getting that answer because I had
been asking the wrong question.
I had been looking for a similar argument, starting at the same starting point as with
plugin rules: the linter.  What I needed to ask myself is whether there are any other major
components that I could use as a foundation element.  I needed think about whether
one of the other components had a similar relationship with extensions that the plugin
rules have with the linter.  At that point, it was obvious to me
that there was a good solid answer: the PyMarkdown parser.&lt;/p&gt;
&lt;p&gt;While I do not need the same flexibility with the extensions that I do with
the plugin rules, I do need some of the same options.  The big options I currently
need for the extensions are configurability and observability.  Extensions require
configuration to allow them to be enabled or disabled, and not much more. As such,
the configuration aspect was already dealt with, but could be made more transparent
to the user.&lt;/p&gt;
&lt;p&gt;The first half of the observability option was already taken care of: the token
stream.  If enabled and if their conditions are met, both the Pragma extension and
the Front-Matter extension place a token in the token stream generated by the parser.
But the other half was important as well, and that was observability from
the command line.  The Plugin Manager presents that information to the command
line through the &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;info&lt;/code&gt; subcommands.  And from my use of the command
line to check to see if a plugin rule is enabled, it worked well.&lt;/p&gt;
&lt;p&gt;But was it really a good model?  Would it work for users other than myself?
It was an interesting idea, but I needed to give it more time to develop.
Luckily enough, I needed to work on documentation first.&lt;/p&gt;
&lt;h3 id="documentation-is-important"&gt;Documentation Is Important&lt;a class="headerlink" href="#documentation-is-important" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I felt that it was the right decision to increase the project’s support for
extensions to the same level as with the rule plugins.  I also knew that the
first step on that path was to create a landing page
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/extensions.md"&gt;for extensions&lt;/a&gt;,
linking the existing two placeholder pages for each extension to that page.  With
that accomplished, the task to fill out those two placeholder pages was next on the
list.&lt;/p&gt;
&lt;p&gt;To show how seriously I took this effort, I did not want to commit something in that was
half done.  So, even with about 90% of the work done by the time I started writing last
week’s article, I elected to not commit that work that I had completed.  It just did not
feel right, so it was not until I spent some time on Wednesday and Thursday to complete
those two documents that I committed those changes.  And I was glad that I made that
decision.&lt;/p&gt;
&lt;p&gt;If any reader is under the delusion that documentation is easy, let me address that
notion.  To be blunt, adding documentation is easy.  Sit down, write some stuff,
and save it into a file.  Done.  But that will not produce good quality documentation
that is well thought out, easy to read, and addresses the concepts that readers
expect.  I am not sure about other writers, but for me that usually involves at least
5 passes through the document, from a rough note pass in the beginning to a
grammar/spelling/fine-tuning pass at the end.  The adage is true: Garbage in,
garbage out.&lt;/p&gt;
&lt;p&gt;So, I take my documentation tasks seriously. If I want the project to have a high
level of quality, every part needs to have a high level of quality, including
documentation.  For me, creating a project is about the completed picture that
is presented by the project, not just the source code.  So, without reservations,
I worked on the documentation, giving it the time that it needed and not
compromising.&lt;/p&gt;
&lt;h3 id="improving-through-documentation"&gt;Improving Through Documentation&lt;a class="headerlink" href="#improving-through-documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I have talked about before, walking through documentation is also a great way to see
if you have properly implemented and tested a feature.  This was no exception.
Between both extensions, I added 10 new scenario tests to make sure the extensions
were tested properly.  There were not any really serious omissions in the tests,
just “interesting” corner cases that might come up in everyday usage.  It was not
until I was walking through the documentation, writing the words, that I thought
“well, what if I…”.&lt;/p&gt;
&lt;p&gt;Along the way, to make things easier, I introduced the &lt;code&gt;ParseBlockPassProperties&lt;/code&gt;
to contain any parsing related properties that I needed to pass around.  While I
only had two extensions at this point, I knew that other ones were coming.  My
intention is to use this class as a simple data class, allowing me to pass around
properties that are moderately static.  At this point, I use the term “moderately
static” to refer to instances that are not going to change during the parsing of
the document.  As the flags to see if the extensions are enabled so not change
during the parsing, this is a single place to put them that can easily be passed
into functions.&lt;/p&gt;
&lt;h2 id="adding-the-extension-manager"&gt;Adding The Extension Manager&lt;a class="headerlink" href="#adding-the-extension-manager" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The next part on the journey to make extension first-class citizens was to create
an Extension Manager.  My vision of the Plugin Manager was that it was the object
completely responsible for anything to do with plugin rules. If that was so, then
it made sense that I would create an Extension Manager to serve as the same type of
foundational object, an object responsible for anything to do with the extensions.&lt;/p&gt;
&lt;p&gt;That idea also made sense to me from a more practical point of view.  By going along the path
that extensions and the Extension Manager were in the same mold as plugins and
the Plugin Manager, it meant that there were common code and concepts that I
could use from the Plugin Manager, saving some time.  From my viewpoint, if
I honestly agreed that there was overlap, and did not force myself to believe
there was overlap, I could probably repurpose any code that implemented overlapping
functionality.&lt;/p&gt;
&lt;p&gt;With that in mind, I created a copy of Plugin Manager and started pulling anything
that was plugin specific out of the new Extension Manager.  Instead of scanning
a directory and loading any found plugins, I decided that extension would only
be added from a list maintained by the class.  While this resulted in the removal
of the scanning and loading code, it was done for a more practical reason. Unlike
the plugin rules, currently each extension requires a hard-coded entry point
from the parser.  I hope to change that in the future, but that is where it is
currently.&lt;/p&gt;
&lt;p&gt;What was left?  The &lt;code&gt;apply_configuration&lt;/code&gt; function was slightly changed to handle
the extensions, but the same idea of an “enabled extensions” list was maintained.
That made it easy to keep the command line logic for listing the extensions, with
only slight modifications.  Similarly, the logic for displaying the information
on a specific extension on required slight changes, mostly in the formatting of
the data to be displayed.&lt;/p&gt;
&lt;p&gt;The determination of the enabled state of the extensions was also kept mostly
intact, but with two key changes.  Whereas plugins have multiple identifiers,
the plugin id and one or more plugin names, extensions only have one identifier.
That simplified some code from six lines down to one line.  At least for now,
another change is that I commented out the code to allow the extensions to be
directly enabled and disabled from the command line.  To be honest, I am not
sure if I feel the need to enabled extensions with the same flexibility and
frequency as with plugins.  I will think about that and get back to that later.&lt;/p&gt;
&lt;h3 id="wrapping-it-up"&gt;Wrapping It Up&lt;a class="headerlink" href="#wrapping-it-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All in all, it took about a good solid six to eight hours to get everything
coded and the tests all passing.  To round everything out, I decided to include
a debug extension (&lt;code&gt;extension_one.py&lt;/code&gt;) and a roughed-out module for each
extension listed in the GitHub Flavored Markdown specification.  The debug
extension was just a tricky, hidden way in which I could test some of the
more difficult to reach places in the Extension Manager.&lt;/p&gt;
&lt;p&gt;As to the placeholder extensions, I just felt that it was a good time to
get those features, or something standing in for those features, in the
project.  I did not have any plans of adding them anytime soon, but I did
want to show that I had plans to add them.  I also did some mental exercises
and walked through how I might implement each one of them.  I did not do this
out of a need to design those extensions, but to ensure that the work I
was doing on the Extension Manager could support those hypothetical designs.&lt;/p&gt;
&lt;p&gt;There really was not much to test, because this was largely a reorganization
of features. As such, there were only a couple of small changes to the
copies of the tests from the Plugin Manager, and a couple of extra tests to
fill in some code coverage blind sports.&lt;/p&gt;
&lt;p&gt;With that hard work done, it was on to the next thing!&lt;/p&gt;
&lt;h2 id="welcoming-code-into-the-fold"&gt;Welcoming Code Into The Fold&lt;a class="headerlink" href="#welcoming-code-into-the-fold" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next up was a simple set of refactorings to try and come up with
a set of behaviors that would help constrain the extensions so that
they could be treated as a class of objects instead of a collection
of distinct objects.&lt;/p&gt;
&lt;p&gt;To start, I looked at the &lt;code&gt;PluginDetails&lt;/code&gt; object from the Plugin
Manager and created an &lt;code&gt;ExtensionDetails&lt;/code&gt; class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_enabled_by_default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_interface_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extension_configuration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Other than replacing the text &lt;code&gt;plugin&lt;/code&gt; with &lt;code&gt;extension&lt;/code&gt; and replacing
&lt;code&gt;plugin_names&lt;/code&gt; with &lt;code&gt;extension_name&lt;/code&gt;, no changes were needed.  In addition,
instead of using the pattern of having a &lt;code&gt;FoundPlugin&lt;/code&gt; class as the
intermediary for this information, I decided to implement two separate
member variables, one for each concern. The &lt;code&gt;self.__extension_objects&lt;/code&gt;
variable contains a dictionary of the extension classes, while the
&lt;code&gt;self.__extension_details&lt;/code&gt; variable contains a dictionary of their
&lt;code&gt;ExtensionDetails&lt;/code&gt; classes.&lt;/p&gt;
&lt;p&gt;To be honest, I am not sure which approach is cleaner.  Having a class that
is the same as another class with one extra field or having two lists.
At the very least, I think I want to come to a resolution on these
approaches and unify them going forward.  But to do that, I need to
see how both perform and decide.&lt;/p&gt;
&lt;h3 id="and-to-finish-up"&gt;And To Finish Up&lt;a class="headerlink" href="#and-to-finish-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given all that work to get everything extension related into the
new Extension Manager class, there was one small bit of work left
to do.  None of it was terribly difficult, but for the sake of
neatness, I believe it was all required.&lt;/p&gt;
&lt;p&gt;First, I took the existing content of the &lt;code&gt;__init__&lt;/code&gt; function of
the &lt;code&gt;ParseBlockPassProperties&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__front_matter_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_boolean_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"extensions.front-matter.enabled"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__pragmas_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_boolean_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"extensions.pragmas.enabled"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and replaced it with a more Extension Manager friendly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extension_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__front_matter_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extension_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_front_matter_enabled&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__pragmas_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extension_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_linter_pragmas_enabled&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pragma_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once again, nothing difficult, but it was important to me to get this main
switch for the two existing extensions moved over.&lt;/p&gt;
&lt;p&gt;After that, I moved the &lt;code&gt;compile_pragmas&lt;/code&gt; function from the Plugin Manager
and the &lt;code&gt;look_for_pragmas&lt;/code&gt; function from the Container Block Processor
over to the &lt;code&gt;PragmaExtension&lt;/code&gt; class.  In the process of moving that code
over, I changed the identifer for the extension from &lt;code&gt;pragma&lt;/code&gt; to
&lt;code&gt;linter-pragmas&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="why-was-this-important"&gt;Why Was This Important?&lt;a class="headerlink" href="#why-was-this-important" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is a saying “if it ain’t broke, don’t fix it.”
More often, this is used to indicate that if things do not require any
effort to let them keep on going forward, do not disturb them. But that
saying really relies on one important decision point: is the thing in
question broken?&lt;/p&gt;
&lt;p&gt;At some point soon, I do want to implement the other
extensions outlined in the GFM Specification.  While some of them
do not have a lot of benefit in my mind (strikethrough), there are others
that I do assign a large benefit to (tables).  It makes sense to
do some of that leg work now, knowing that I will use it later.&lt;/p&gt;
&lt;p&gt;In my mind, there is another, more important factor to consider.
That factor concerns the cost to implement some of the features
in the Plugin Manager without going all in.  One of the reasons
that I created the Extension Manager in the way I did was the
low cost associated with copying it from the Plugin Manager.
I was able to reuse most of the application code and the scenario
test code in the process.  Sure, I had to change it to work with
extensions instead of plugins, but I saved a lot of time and
effort by taking that approach.&lt;/p&gt;
&lt;p&gt;If I did not take that approach, I would have had to develop
another type of manager with its own quirks.  That means starting
out with a new set of requirements and tests that I needed to
satisfy.  That would take time and effort.  And in the end,
unless plugin rules and extensions do not have the overlap that
I believe they do, I would probably want to collapse them into
one paradigm anyways.&lt;/p&gt;
&lt;p&gt;I was confident that the overlap was sufficient to
make copying the Plugin Manager code a smart move.  Now it is
just a matter of time to prove to myself that it was the right
choice.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A friend of mine who is a writer has often reminded me that it is those
things that we find more difficult to do are the most rewarding.  I
am seriously not a writer; through I do try and write to the best of
my ability.  While I am on the road to being a “capital-W” writer at
some point, should I choose to do so, I still have a lot to learn.&lt;/p&gt;
&lt;p&gt;But I do find it rewarding.  Yes, I even find writing documentation
rewarding.  I find writing these weekly articles rewarding.
Part of that is because I find satisfaction in helping people. What
else is documentation than helping people understand or use a
particular object or project?&lt;/p&gt;
&lt;p&gt;And that is the key for me: it helps people… including myself.
This process of adding an Extension Manager during this beta release
period was not a decision that I made lightly.  It could have
gone horribly wrong.  But it did not because I had a number of support
structures in place, including documentation on the extensions.
It was in walking through them that I figured out I needed to elevate
extensions, and it was walking through them again that I helped
myself have a coherent implementation about extensions.&lt;/p&gt;
&lt;p&gt;So now I have an Extension Manager that cleanly takes care of the
extensions.  It exposes a common command line interface with the
Plugin Manager, so there is synergy there.  It is not as full featured
as the Plugin Manager, but it does not need to be.  And I am
happy with where it landed!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that refactoring out of the way, I thought I would have some “fun”
in the next week and try to solve an issue I have had for a while:
making sure that the parser can handle transitions back and forth between
lists and block quotes.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Getting Stuff Done</title><link href="https://jackdewinter.github.io/2021/06/14/markdown-linter-getting-stuff-done/" rel="alternate"></link><published>2021-06-14T00:00:00-07:00</published><updated>2021-06-14T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-06-14:/2021/06/14/markdown-linter-getting-stuff-done/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/07/python-packages-the-birth-of-application_properties/"&gt;last article&lt;/a&gt;, I talked
about the break I took to work on some refactoring of the properties system
for PyMarkdown.  In this article, I talk about getting back to PyMarkdown and
my efforts to remove items from the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have referred to the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/06/07/python-packages-the-birth-of-application_properties/"&gt;last article&lt;/a&gt;, I talked
about the break I took to work on some refactoring of the properties system
for PyMarkdown.  In this article, I talk about getting back to PyMarkdown and
my efforts to remove items from the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have referred to the work to date as the initial release, in my
mind it was always a beta release.  And for me, the focus of a beta release
is to continue to test features, to clean up documentation, and to try and
resolve any high priority issues.  It is not a time to relax, it is a time
to make sure that I work on the issues that will have a definite impact
on the PyMarkdown project.&lt;/p&gt;
&lt;p&gt;The testing of features is going great!  Every so often, I find a small
issue that is easily fixed within fifteen minutes of finding it. That
part is doing fine.  Because of my hard work on the documentation prior
to the beta release, the main documents are in good condition.  But like
the testing of features, there are issues where I believe I can add
beneficial information to the documents.  In addition, some of the later
documents need some extra work to bring them up to the same level as the
main documents.  And as always, there are issues to diagnose and fix.&lt;/p&gt;
&lt;p&gt;And that means a lot of this work will span all three of these areas,
with a focus on the last two: documentation and fixing issues.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the commits that occurred on
12 Jun 2021 between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/878883074e027c095c51a07907dbbe54d5a3465d"&gt;this commit&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d5064dacc0d04cfaad0217ab3cb37fd6a22a031f"&gt;this commit&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="sometimes-research-does-not-work-out"&gt;Sometimes, Research Does Not Work Out&lt;a class="headerlink" href="#sometimes-research-does-not-work-out" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know, this section is breaking one of my rules about telling a good story:
do not give away the ending.  But in this case, I think I have a good reason
to break that rule.  One thing that I have learned over the years is that
while success helps us move forward, we learn the best lessons from when
things do not work out.&lt;/p&gt;
&lt;h3 id="start-at-the-beginning"&gt;Start At The Beginning&lt;a class="headerlink" href="#start-at-the-beginning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the start of that week’s work, I was looking at this item from the Issues
List:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_md026_good_unordered_list_into_atx_into_paragraph&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;effect&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;changing&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;closes&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;comes&lt;/span&gt; &lt;span class="k"&gt;last&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, with one small exception, the order in which Markdown elements appear
in the &lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/developer.md"&gt;Markdown token stream&lt;/a&gt;
are the order in which they appear in the Markdown document.  With one exception:
end List tokens and Blank Line tokens.&lt;/p&gt;
&lt;p&gt;Due to the nature of the algorithms and the consistency checks used for the
parser, I cannot remember a time when those two tokens appeared in what I
would consider to be the correct
order.  There are cases where a Blank Line element closes an opened List
element. To me it seems logical that the end List token should come first,
followed by the Blank Line token that forced the close.  From my point of
view, in these cases the List element is closed, and then the Blank Line
element is processed.  So, from where I sit, the problem is that my
“correct” ordering is not being reflected properly in the token stream.&lt;/p&gt;
&lt;p&gt;The other interesting piece of information?  This is only relevant to
producing an accurate token stream for linting.  To verify that the
Markdown is being parsed properly, the HTML generator uses the token stream
to create the correct HTML elements.  However, because the Blank Line
token has no effect on the HTML that is output, the ordering of these
tokens has no effect on the resultant HTML.  While that is a bit of
a saving grace, it also makes it harder to test for.&lt;/p&gt;
&lt;p&gt;Learning from trying to solve other hard issues before, I knew I needed
to give myself a firm time limit to solve this one.  The time limit I picked
was 8 hours.  That would give me at least two weekday nights and some
time on the weekend to work on this issue.  That seemed reasonable.&lt;/p&gt;
&lt;p&gt;It was time to dig in and get to work!&lt;/p&gt;
&lt;h3 id="add-content-in-the-middle"&gt;Add Content In The Middle&lt;a class="headerlink" href="#add-content-in-the-middle" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I worked through experiments, the easy part was always getting the
exact case mentioned above working.  But after I got that scenario test
working properly, there were always side effects that I needed to
mitigate.  I looked at the code, make some adjustment for
the current experiment that I was working on, only to find out that I
did not have the right limitations on the change that I made.&lt;/p&gt;
&lt;p&gt;I know that the core code itself is not fragile.  That is one of
the first thoughts that I had.  Looking into that core code, it seems
to be stable and allows me to introduce changes without a lot of
side effects.  It just seemed to me that every time I made simple
experimental changes to the core code to elicit the desired behavior,
the leading whitespace was an issue.&lt;/p&gt;
&lt;p&gt;That was frustrating, but also bolstering.  To be honest, while I
believe the project is solidly designed, I am sure that I did not
get everything right.  I would like to think that I got most things
right, but I can only empirically say that I engineered the project
to produce the correct results per the GFM Specification.  I am okay
with knowing that I have some more work to do with leading whitespace
handling.  It is something I now know that I can work on improve
in the future.  Something that will not blindside me.&lt;/p&gt;
&lt;p&gt;In the end, I am sure I am missing things to do with the whitespace
and how it is handled.  I am just not sure where to go from there.
I tried a handful of different approaches to the problem, but it
always came down to whitespace and how it was handled.  It was
a tough thing to come to an understanding with, but most learning
worth doing always comes at a cost.&lt;/p&gt;
&lt;h3 id="wrap-things-up-in-the-end"&gt;Wrap Things Up In The End&lt;a class="headerlink" href="#wrap-things-up-in-the-end" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After 9 hours, 8 hours plus a bit of extra time, I called it quits…
for now.  While I was not able to fix the issue, I was able to learn
some valuable things.&lt;/p&gt;
&lt;p&gt;The main thing is that I learned is that the leading whitespace
handling in the
parser needs improvement.  With each experiment, the success
of the experiment quickly devolved into how well I understood the
leading whitespace handling.  And while I have coded each line of the project,
I must concede that I have lost some of the context of that part
of the project. Even after reading my articles about how I dealt
with those section of the code, I still cannot grasp how I handled
that whitespace.
So, to move forward, I need to consider whether I want to take some
time and rewrite that leading whitespace handling to provide that
extra context.  Without it, any fixing of issues dealing with leading
whitespace are a no-go.&lt;/p&gt;
&lt;p&gt;The second thing that I learned is that Markdown to HTML generators
probably have an easier time with their implementations than I do.
Getting the parser to generate the correct tokens in the right order
is easy. It was a bit finicky to do, but relatively easy.  Adapting the
HTML generator to work with that output was also easy.
When I resolved the ordering issue, some complexity in the HTML generator
was removed as it was no longer needed.  Each experiment failed due
to issues with tracking the whitespace properly, not the HTML that was
generated.&lt;/p&gt;
&lt;p&gt;That is where I left things with this issue: unresolved.  I added
some documentation to the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/developer.md"&gt;Developer’s Document&lt;/a&gt;,
but since the ordering issue is easily worked around, I decided to leave the existing
behavior in place.  If I want to try and fix this issue again, I will need to
make sure to do a better job on the whitespace handling in the parser,
as the success of solving this issue will hinge on my ability to
understand and adapt that whitespace handling.&lt;/p&gt;
&lt;p&gt;But for now, this issue is pretty much permanently benched.  Not time
lost on something that did not work, but things learned to improve the
project and perhaps try again at a later date.&lt;/p&gt;
&lt;h2 id="cleanup"&gt;Cleanup&lt;a class="headerlink" href="#cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As always, I try and make the projects that I work on better with each iteration,
and this week’s work was no different.  During the testing that I did in the above
section, I noticed
that I was getting an error at the end of the test runs.  For the ~15% of the time
that the occurred, it indicated that the coverage file was not valid.  It was an
easy enough error to fix; I just re-ran the tests and it “went away”.  But that
got annoying very quickly.&lt;/p&gt;
&lt;p&gt;Looking online, others reported similar behavior with the &lt;code&gt;5.*&lt;/code&gt; series of the
coverage tool.  Unfortunately, there did not seem to be a fix in place, only
people reporting that it was intermittent.  Based on some of those reports,
the quickest solution seemed to be to go back to the &lt;code&gt;pytest-cov&lt;/code&gt;
package’s &lt;code&gt;2.10.1&lt;/code&gt; version and the &lt;code&gt;coverage&lt;/code&gt; package’s &lt;code&gt;4.5.4&lt;/code&gt; version.
After about 20 test runs of the scenario tests, and many times since then,
that error has not showed up.  The tests do seem to run a bit slower when
I am looking for coverage data, but at least that error does not show up
anymore.  When I have some time, I will try and look at it some more, but it
is fixed enough to not be a problem.&lt;/p&gt;
&lt;p&gt;Other than that, the only change that bears mentioning is that I cleaned up
the file &lt;code&gt;unordered_list_into_atx_into_paragraph.md&lt;/code&gt; to make it simpler to
parse instead of containing a long list and a long paragraph. I found out
that I do not need a list with five items and a paragraph with five lines,
I just need a list with one item and one line.  I cannot recall if that
added the violation of rule &lt;code&gt;md022&lt;/code&gt; or not, but I added it to the test
that references that file to make sure it was reporting cleanly.&lt;/p&gt;
&lt;p&gt;Once again, nothing serious, just some simple cleanup.&lt;/p&gt;
&lt;h2 id="issue-8-exposing-command-line-options-as-configuration-items"&gt;Issue 8: Exposing Command Line Options As Configuration Items&lt;a class="headerlink" href="#issue-8-exposing-command-line-options-as-configuration-items" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/8"&gt;Issue 8&lt;/a&gt; was created
to address a simple issue: the &lt;code&gt;--stack-trace&lt;/code&gt; and &lt;code&gt;--add-plugin&lt;/code&gt; command
line arguments did not have a corresponding equivalent in the configuration
system.  While it may seem like a trivial change, for me it was an
important one.  It is particularly important to me that each command line item should
have a configuration item, unless there was a very good reason, and only
on an item-by-item basis.&lt;/p&gt;
&lt;p&gt;These two command line flags were the only reasonable cases that had not
been addressed. It was time to fix that.&lt;/p&gt;
&lt;h3 id="code-changes"&gt;Code Changes&lt;a class="headerlink" href="#code-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The change for the &lt;code&gt;--stack-trace&lt;/code&gt; flag was a simple change at the
start of the &lt;code&gt;__initialize_logging&lt;/code&gt; function. Instead of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_stack_trace&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this code was added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_stack_trace&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_boolean_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"log.stack-trace"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is a simple change, but a necessary one to follow the configuration
ordering detailed in the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/advanced_configuration.md#configuration-property-ordering"&gt;Advanced Configuration&lt;/a&gt;
document.  Prior to this change, only the command line flag was being checked.
With this change, if the command line flag was not used, then the configuration
system is queried to determine if the stack trace should be enabled.  Because
the command line only ever enables the flag, the logic remains simple.&lt;/p&gt;
&lt;p&gt;While a slight bit more complex, similar changes were required for
the &lt;code&gt;initialize&lt;/code&gt; function in the plugin manager.  Originally, the code was
quite simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;additional_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_additional_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;additional_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, if the command line provided any addition plugin paths to
explore, they were placed in the &lt;code&gt;additional_paths&lt;/code&gt; variable that
contained an array of paths.  The &lt;code&gt;for&lt;/code&gt; statement at the end of
the example leads into the code that handles loading plugins when
either a directory or a file is specified.  Very simple, and very
straightforward.&lt;/p&gt;
&lt;p&gt;This is where the code got more complex, but not unbearably so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;all_additional_paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;additional_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;all_additional_paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;additional_paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;more_paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"plugins.additional_paths"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;more_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;all_additional_paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;more_paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;all_additional_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_additional_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_additional_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the new code, the variable &lt;code&gt;all_additional_paths&lt;/code&gt; is the new array
that contains all the paths.  First, that array is primed with
anything presented on the command line, as before.  Then the configuration
system is checked to see if any additional paths are specified.  If
any string is specified, it is treated as a comma-separated list and
processed into elements as such.  That list of paths is then added
to the end of the &lt;code&gt;all_additional_paths&lt;/code&gt; list, and then processing
resumes as before.&lt;/p&gt;
&lt;h3 id="documentation-changes"&gt;Documentation Changes&lt;a class="headerlink" href="#documentation-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The code changes to get this working took approximately 40 minutes to
complete, from writing the first scenario test to ensuring that each
test was passing properly.  The interesting part was in documenting
the behaviors of these flags.  Specifically, the issue was in
documenting the &lt;code&gt;--stack-trace&lt;/code&gt; flag versus the &lt;code&gt;log.stack-trace&lt;/code&gt;
configuration item.&lt;/p&gt;
&lt;p&gt;In both cases, the actual documentation for command line option versus
configuration item took minimal effort.  However, in the case of the
&lt;code&gt;--stack-trace&lt;/code&gt; flag, there is a significant difference that needed
to be documented.&lt;/p&gt;
&lt;p&gt;Prior to this change, the documentation for the flag was limited to
this entry in the &lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/docs/advanced_configuration.md"&gt;Advanced Configuration&lt;/a&gt;
file:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;if an error occurs, print out the stack trace for debug purposes.  Also
sets the initial logging (config processing) to debug. (Default: &lt;code&gt;false&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While that was true while just the command line flag was present, it
also did not go into much depth on what the other effects are. As I wanted
to make sure I was being clear, I took my time to properly document
the differences between the command line flag and the configuration item.&lt;/p&gt;
&lt;p&gt;It was a simple difference, but it took some explaining.  Once the
logging system was initialized, the behavior of both items was
the same.  The difference was in the behavior before the logging
system was initialized.  I needed to ensure that if there was an
error logged before the logging system was initialized, that I can
diagnose it.  Working through those debug scenarios and documenting
them in the Advanced Configuration document made sense.  A good
side effect is that it also validated my design and implementation
of the starting code worked.&lt;/p&gt;
&lt;h2 id="and-along-the-way"&gt;And Along The Way…&lt;a class="headerlink" href="#and-along-the-way" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Everyone has their pet peeves, and I am not immune from their power either.
In my case, I prefer to avoid having to memorize long command lines and
various “obscure” sequences in favor of useful helper scripts and looking
up the less familiar sequences when I need them.  I am not sure whether
it is classified as being lazy or being efficient, but I just do not
find any value in memorizing things that can be easily addressed but
simpler processes.&lt;/p&gt;
&lt;p&gt;It is for that reason that I spent the better part of an hour fine tuning
a script I used called &lt;code&gt;ptest.cmd&lt;/code&gt;.  Before I switched to that script,
I frequently typed &lt;code&gt;pipenv run pytest&lt;/code&gt; into my command shell to execute
the scenario tests.  If I needed to specify a specific set of tests, I would
use the form &lt;code&gt;pipenv run pytest -k test_prefix&lt;/code&gt; to execute any tests starting
with that &lt;code&gt;test_prefix&lt;/code&gt; string.&lt;/p&gt;
&lt;p&gt;But I was hitting a bit of an issue with that usage pattern.  For a long
time, I have executed the tests with the extra configuration provided by
the &lt;code&gt;setup.cfg&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;addopts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;--timeout=10&lt;/span&gt;
&lt;span class="s"&gt;   --html=report/report.html&lt;/span&gt;
&lt;span class="s"&gt;   --cov&lt;/span&gt;
&lt;span class="s"&gt;   --cov-branch&lt;/span&gt;
&lt;span class="s"&gt;   --cov-fail-under=90&lt;/span&gt;
&lt;span class="s"&gt;   --strict-markers&lt;/span&gt;
&lt;span class="s"&gt;   -ra&lt;/span&gt;
&lt;span class="s"&gt;   --cov-report xml:report/coverage.xml&lt;/span&gt;
&lt;span class="s"&gt;   --cov-report html:report/coverage&lt;/span&gt;
&lt;span class="s"&gt;   --junitxml=report/tests.xml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But as I noted in the above section on &lt;a href="#cleanup"&gt;Cleanup&lt;/a&gt;, one of the
changes I made to address the PyTest coverage issues resulted in a
slower execution time.  To address this, I wanted to only execute the
tests with coverage data if requested, hopefully speeding things up.
And after some simple tests, the execution duration without coverage was
amazing.  It seemed like the duration for an unmeasured set of tests was
approximately 25% of the duration for a measured set of tests.&lt;/p&gt;
&lt;p&gt;The problem?  It meant moving away from general command line execution
and into a script.  While I found the command &lt;code&gt;pipenv run pytest&lt;/code&gt; to be
simple enough to use all the time, speeding up the execution of those
tests would require me to include five arguments when I wanted to
execute the tests with coverage.  That went over my own internal line
of what was acceptable.&lt;/p&gt;
&lt;h3 id="fixing-that-issue"&gt;Fixing That Issue&lt;a class="headerlink" href="#fixing-that-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The logical place to house those changes was in the &lt;code&gt;ptest.cmd&lt;/code&gt; script.
To keep my “clean build” script, &lt;code&gt;clean.cmd&lt;/code&gt;, clean, I had set up that
script to call into the &lt;code&gt;ptest.cmd&lt;/code&gt; script when it came to executing
the tests.  So, I had to figure out how to make this script work as
part of the clean build process and part of my normal development
process.&lt;/p&gt;
&lt;p&gt;First, I added a new &lt;code&gt;-c&lt;/code&gt; flag to trigger whether coverage should be
enabled for the next test run.  As that was the main driver for this
change, I wanted to get it out of the way.  I also made changes to
GitHub Workflow &lt;code&gt;main.yml&lt;/code&gt; file to mirror what I was doing with the
&lt;code&gt;ptest.cmd&lt;/code&gt; script.&lt;/p&gt;
&lt;p&gt;Starting to use the script in my normal development, I noticed that
the “normal” mode for the script was to not
show anything about the test run unless there were errors.  While that
was fine for the clean build scenario, it was less than optimal for
the development scenario.  I addressed that by adding a &lt;code&gt;-q&lt;/code&gt; flag
to allow the &lt;code&gt;clean.cmd&lt;/code&gt; script to specify that previous behavior. If
not specified, the new default behavior was to show all output from
the tests, providing the same output as if the entire &lt;code&gt;pytest&lt;/code&gt; command
was entered on the command line.&lt;/p&gt;
&lt;p&gt;Finally, I added the &lt;code&gt;-k&lt;/code&gt; flag to allow for the passing in of a keyword
to look for with the tests.  I knew I was going to have to support this
flag, as it was part of the two base scenarios that I needed to support,
but I wanted to make sure that everything else was cleaned up first.
With everything else in place, the handling of this flag was easily
added.&lt;/p&gt;
&lt;p&gt;And while I am sure I will make more fine-tuning to scripts in the future,
this was good enough for now!&lt;/p&gt;
&lt;h2 id="issue-9-better-plugins-support"&gt;Issue 9: Better Plugins Support&lt;a class="headerlink" href="#issue-9-better-plugins-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing that had been bothering me for a while were the few items from
the Issues List that brought together to make up &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/9"&gt;Issue 9&lt;/a&gt;.
I had thought out the rule plugins far in advance of when I needed them,
but I had not applied that same rigor to the exposing of those same plugins
to the command line.  I felt that I had done okay in exposing the plugins
to the command line, but I knew I could do better.&lt;/p&gt;
&lt;h3 id="plugin-lists"&gt;Plugin Lists&lt;a class="headerlink" href="#plugin-lists" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing on that list was the listing of the available plugins via
the &lt;code&gt;plugins list&lt;/code&gt; command.  After using that command a few times to check on the
plugins, I was convinced that two enabled columns, &lt;code&gt;enabled (default)&lt;/code&gt;
and &lt;code&gt;enabled (current)&lt;/code&gt;, did not have to take up the space that they did.
After performing some experiments, I found that by specifying each column
title with a newline character in the middle of the title would split the
column content over multiple lines.  Therefore, changing the column
titles to &lt;code&gt;enabled\n(default)&lt;/code&gt; and &lt;code&gt;enabled\n(current)&lt;/code&gt; provided the exact
effect that I was looking for.&lt;/p&gt;
&lt;p&gt;Now, when I used that command, I saw this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ID     NAMES                                 ENABLED    ENABLED    VERSION
                                               (DEFAULT)  (CURRENT)

  md001  heading-increment, header-increment   True       True       0.5.0
  md002  first-heading-h1, first-header-h1     False      False      0.5.0
  md003  heading-style, header-style           True       True       0.5.0
  md018  no-missing-space-atx                  True       True       0.5.0
  md019  no-multiple-space-atx                 True       True       0.5.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I was doing my experiments, I also found that I was not handling the
case of zero matching plugins properly.  To be honest, it
just was not being handled at all.  To take care of that, I simply added
a check against &lt;code&gt;if show_rows&lt;/code&gt; in the &lt;code&gt;__handle_argparse_subparser_list&lt;/code&gt;
function, printing out a nicely formatted message if that case was encountered.&lt;/p&gt;
&lt;h3 id="plugins-info"&gt;Plugins Info&lt;a class="headerlink" href="#plugins-info" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The second thing on my list was to elevate the &lt;code&gt;plugins info&lt;/code&gt; response to
be at the same level as for the &lt;code&gt;plugins list&lt;/code&gt; command.  The effort that
I had put in before was easily a place holder, one that now needed to be
replaced.  I had two goals for this change: make it look better and display
relevant information to the command line user.&lt;/p&gt;
&lt;p&gt;The first part of that was easy.  Leveraging my work in the previous
section to display thing in columns, I decided that the information
would be best presented in a simple two column format.  From my point
of view, that would nicely take care of cleaning up the display, producing
output like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ITEM                 DESCRIPTION

  Id                   md001
  Name(s)              heading-increment,header-increment
  Short Description    Heading levels should only increment by one level at a time.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sitting back for a bit and looking at that design, I went
through the mental exercise of trying to figure out why a user would
want to look at that information. The first candidate was a user that
wanted more information on a rule that was being shown in a rule
violation line.  The second candidate was a user that was looking
at a configuration item that they did not recognize in a configuration
file.&lt;/p&gt;
&lt;p&gt;The information for both cases had some overlap.
For the configuration file case, I figured that a user would want to know
if the configuration item they see in the configuration file matches a
valid configuration item for the rule plugin.  For the output violation
case, I figured that a user would want to see information about why that
violation was raised.  I just had to find the right information that
would satisfy the user’s needs in both cases.&lt;/p&gt;
&lt;p&gt;Without overloading the user, I decided that
there was no really good way of displaying the rule information that was
included in the rule’s documentation URL.  However, displaying that URL
so that they could look for more information there made sense to me.
In addition, the configuration item case could be somewhat handled in
a similar way.  If I presented a line detailing what the configuration
items were, any further information on those items could also be obtained
by referencing the URL.&lt;/p&gt;
&lt;p&gt;Combining both designs together, I came up with the following sample
of what I wanted the sample output for Rule md001 to look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ITEM                 DESCRIPTION

  Id                   md001
  Name(s)              heading-increment,header-increment
  Short Description    Heading levels should only increment by one level at a time.
  Description Url      https://github.com/jackdewinter/pymarkdown/blob/main/docs/rules/rule_md001.md
  Configuration Items  front_matter_title
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After modifying a scenario test for md001 and adding scenario tests for
md023 and the debug rule md999, it was time to write the code.&lt;/p&gt;
&lt;h3 id="making-it-work"&gt;Making It Work&lt;a class="headerlink" href="#making-it-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once I had the sample output defined in the last section, the rest was
easy.  I went back to the &lt;code&gt;plugin_manager.py&lt;/code&gt; module and the modules for
each plugin rule and added two optional properties: &lt;code&gt;plugin_url&lt;/code&gt; and
&lt;code&gt;plugin_configuration&lt;/code&gt;.  If the plugin rules provided these optional
properties, they would be displayed in the &lt;code&gt;plugins info&lt;/code&gt; output, otherwise
they would be silently omitted.&lt;/p&gt;
&lt;p&gt;With those two new properties added to the various plugin classes,
I then started to work on the &lt;code&gt;__handle_argparse_subparser_info&lt;/code&gt;
function to make it output the information in columns.  As the
&lt;code&gt;columnar&lt;/code&gt; package took care of the formatting, I just needed to organize
the data into a series of rows, each row containing a title column
and a description column.  That was quickly accomplished within
fifteen minutes of work.&lt;/p&gt;
&lt;p&gt;Other than some slight issues with adjusting column widths in the test
output, everything worked right away.  The column adjustments that
needed to be made were completed within five minutes, and everything
was buttoned down after ten minutes.&lt;/p&gt;
&lt;p&gt;While I am not sure it is perfect yet, the output is now definitely
something that I can be proud of!&lt;/p&gt;
&lt;h2 id="issue-10-moving-token-code-into-the-token-module"&gt;Issue 10: Moving Token Code Into the Token Module&lt;a class="headerlink" href="#issue-10-moving-token-code-into-the-token-module" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting ready to wrap things up on Saturday, I decided to look on the list and
find an easy item to resolve.  Lucky for me I found the issue detailed in
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/10"&gt;Issue 10&lt;/a&gt;.
While not a large task, it was a task in the direction that I wanted to move
more towards in the future.&lt;/p&gt;
&lt;p&gt;During the development prior to the beta release, I spend a lot of time getting
things working properly.  That meant passing the GFM specification example tests
as well as my own tests, the ones verified against BabelMark.  While I tried
to make the best decisions each time, I admit freely that in some cases I added
code in a place that was less than optimal, knowing I would probably revisit
it later.&lt;/p&gt;
&lt;p&gt;The development of rule &lt;code&gt;md022&lt;/code&gt; was one of those cases.  To properly track the
number of blank lines before and after a Heading element, the rule needed to
be coded to understand if an end token was a container token, a leaf token,
or (by default) an inline token.  To that extent, I added the
&lt;code&gt;__is_container_end_token&lt;/code&gt; function and the &lt;code&gt;__is_leaf_end_token&lt;/code&gt; function to
the &lt;code&gt;rule_md_022.py&lt;/code&gt; module to accomplish that goal.  Knowing that it may
not be the best place for those functions, I added an item to the Issues
List for later examination.&lt;/p&gt;
&lt;p&gt;Was that the right thing to do?  Yes… and no.  I added those functions
to the &lt;code&gt;rule_md_022.py&lt;/code&gt; module to get things working, as I was focusing on
verifying those rules.  I cannot remember exactly what was going through
my head at the time, but knowing that I needed to take a better look at
it when I had the bandwidth, I made a note in the Issues List in
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/445c7a15bd926112146167eb1ac0d3f90c4f5de5#diff-75b56c206e0ed5079aed5347ecab9d243732195ecf4ed3cd478610fe86b105ec"&gt;the same commit&lt;/a&gt;
as that change.  I simply noted that I wanted to double check it later
and went back to focusing on the code that I was working on.&lt;/p&gt;
&lt;p&gt;If you ask me for my opinion on whether it was the right thing to do,
without more questions I could not properly answer either yes or no.
It depends.  However, one thing I am certain about.  Not fixing it right
away and not noting it down for later would be the wrong thing to do.
And to be honest, I am okay with knowing that I avoided doing the wrong
thing, even if I am not sure if I did the right thing.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If I am being honest, I expected to be dragging more about doing project
work at this stage of the project than I am.  I know that the last
10%-15% of a project is never the most fun part of the project, but
it is a critical stage for
any project.  I know of many projects that have died at the 85% complete
stage of the project, for many reasons.  From my experience, those
“mostly” finished projects result in a project that looks mostly there,
but ultimately comes across as unfinished and unpolished.
That is not what I want for the PyMarkdown project.&lt;/p&gt;
&lt;p&gt;I am not sure where I am in that 15% range, but I know I want to get
past the beta-release stage into a normal release cycle.  I want to
take the time to do things right, document my work along the way,
and to ship something that people will use.  And convincing people
to use something that is mostly done is not as easy as convincing
people to use something that is done.  Even better, a project that
has a track record of fixing issues is one of the hallmarks I use
when looking at projects I want to use.  And that is where I want
to be.&lt;/p&gt;
&lt;p&gt;Is that the right mindset to have at this stage of the project?
I am not sure.  I just know that is where I am at.  I want to
invest the time to deal with issues and make this a solid application.&lt;/p&gt;
&lt;p&gt;That’s just who I am and where I am at.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having started work on improving the Extensions support on Sunday morning,
I did not get it finished before I started writing this article on Sunday
afternoon.  Other than that, not sure yet, so stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Python Packages - The Birth of Application_Properties</title><link href="https://jackdewinter.github.io/2021/06/07/python-packages-the-birth-of-application_properties/" rel="alternate"></link><published>2021-06-07T00:00:00-07:00</published><updated>2021-06-07T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-06-07:/2021/06/07/python-packages-the-birth-of-application_properties/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/31/markdown-linter-road-to-initial-release-triple-check-everything/"&gt;last article&lt;/a&gt;, I talked
about the final changes that I needed to make to get the PyMarkdown project ready for
its initial release. In this article, I take a bit of a break from pushing towards
release to work on some refactoring.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having taken up a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/31/markdown-linter-road-to-initial-release-triple-check-everything/"&gt;last article&lt;/a&gt;, I talked
about the final changes that I needed to make to get the PyMarkdown project ready for
its initial release. In this article, I take a bit of a break from pushing towards
release to work on some refactoring.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having taken up a lot of energy in the past month or so to get the initial
release of the PyMarkdown project done, I was tired.  Not so tired that I could not
look at a computer screen, but tired of the push towards the goal of the initial
release.  And like anyone pushing towards a goal who then reaches that goal,
I knew that the healthy thing to do was to take a bit of needed downtime before
I get back to the issues waiting for me on the PyMarkdown project.&lt;/p&gt;
&lt;p&gt;There is a catch though: I do not like sitting still.  Even when I am relaxing, I
like doing something like reading, working on a puzzle or a puzzle book, or trying
something new out.  It is not that I do not care for relaxing, quite the contrary.
It is just that getting something done helps me feel more at piece, even something
as simple as taking care of one of my chores around the house.  One more thing
done, one less thing to worry about.  And I knew that I did not want a big break
from writing Python code, I just wanted a small break from writing code for the
PyMarkdown project.&lt;/p&gt;
&lt;p&gt;Looking at the various things that I could spend time on Python-wise, there was
one thing that caught my eye: the &lt;code&gt;application_properties.py&lt;/code&gt; module.  &lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please consult the &lt;code&gt;PyMarkdown&lt;/code&gt; commit of
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/9c8b1d3aff583e0aa8a63ec8534b5c943c5a9400"&gt;06 Jun 2021&lt;/a&gt;
and the &lt;code&gt;application_properties&lt;/code&gt; commits between
&lt;a href="https://github.com/jackdewinter/application_properties/commit/abf1caa4d7073b37d0dd5eb98d5c800581d7e1c9"&gt;02 Jun 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/application_properties/commit/002a9e0c1df8c571b53927c45bc724f516a258a9"&gt;06 Jun 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-that-module"&gt;Why That Module?&lt;a class="headerlink" href="#why-that-module" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was looking over my list of various things that I could work on during my
break, there was one prevalent theme among the Python oriented projects:
foundational objects.  In each case, they needed simple configuration support,
simple logging support, and simple file determination support.  While I needed
to think about how to better deal with logging and file determination in the
future, I already had a good solution for configuration that I had developed
for the PyMarkdown project: the &lt;code&gt;application_properties.py&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;But what was the best way to move that to the other projects that I wanted to
start working on?&lt;/p&gt;
&lt;h3 id="the-basics"&gt;The Basics&lt;a class="headerlink" href="#the-basics" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Created back in March,
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/"&gt;this article&lt;/a&gt;
details the thinking around why I created that module.  My decision to
create “another” properties system was not an easy one to make.  However,
after listing out my requirements for any properties system, I was not
able to find any existing system that had the level of quality and readability
that I wanted for a properties system.  As such, I felt the best alternative
was to create a properties system that met those requirements.&lt;/p&gt;
&lt;p&gt;With the PyMarkdown project, I felt strongly about documenting what I was
thinking about and going through as I was creating the project.  As the
properties system was an important part of the interface, I dedicated an
entire article to explain why I created that system.  And while I will not
repeat every single point made in that article, I believe there is benefit
in highlighting two of the important points of that article.&lt;/p&gt;
&lt;p&gt;The first point that I made is that I believe that every configuration system
can be evaluated on five core concepts: basic property support, command line support
and environment support, validation support, grouping support, and finally hierarchy
support.  Basic property support is the provision of basic operations to get the
property value out of the configuration system.  Command line support and environment
support assume that some manner of file support is a given and ensuring that the
user can override the configuration from either the command line, the environment,
or both is an extra.  Validation support speaks to any functionality that is provided
to help the caller determine the correctness of a configuration value without having
to further handle the value returned from the system.  Grouping support is the ability
of the configuration system to recognize some manner of grouping configuration items
that have a common purpose together.  Finally, hierarchical support provides for an extra
level of understanding of what configuration items belong together with which other
configuration items.&lt;/p&gt;
&lt;p&gt;While that is by no means a comprehensive list, it was a good list of requirements to
start off with.  Using that as a foundation, I then presented a good argument that
those requirements help define three basic types of configurations: the Simple Configuration,
the Grouped Configuration, and the Complex Configuration.  The main difference is not
the data that is stored within each configuration, as that data is identical in all
cases.  It is the organization of the data that is the main difference, with the Complex
Configuration type providing the best organization of all three types.&lt;/p&gt;
&lt;p&gt;With those types now defined, how do we pick one for any given project?&lt;/p&gt;
&lt;h3 id="picking-the-best-option-for-a-project"&gt;Picking The Best Option For A Project&lt;a class="headerlink" href="#picking-the-best-option-for-a-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From my experience, if a project’s needs are for five or less configuration items,
a Simple Configuration type typically works best.  For between five and ten
configuration items, it is usually best to start organizing those configuration items
into groups, and hence a Grouped Configuration type is more fitting.  Following that
logic even further, when there are more than ten configuration items, it usually a
good idea to organize those groups into a meaningful hierarchy, lending itself to
the Complex Configuration type.&lt;/p&gt;
&lt;p&gt;While I do not use those ranges as concrete guidelines that I strictly follow, to
me they follow my personal common-sense rule.  The first question that I ask myself
is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What are the configuration requirements for the project that I am working on?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The follow up question to that is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the most obvious way to present that data to make it clear, understandable, and maintainable?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="examples"&gt;Examples&lt;a class="headerlink" href="#examples" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I believe that the best way to show why I believe that these ranges make sense
are with some concrete examples.  While this set of examples is completely fictious,
it follows patterns and situations that I have observed and helped mitigate over the
years.&lt;/p&gt;
&lt;h4 id="example-1-a-simple-webservice"&gt;Example 1: A Simple Webservice&lt;a class="headerlink" href="#example-1-a-simple-webservice" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;One of the simplest cases that I can think of is the configuration for a simple webservice that
presents data from a simple data file.  In this case, I would probably create a data file that
looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8080&lt;/span&gt;
&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;my_data.json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From a common-sense point of view, I believe this layout makes the most sense.  Both
property values relate to the webservice, but that seems to be their only link to each other.
So, partially due to the low number of property items and partially due to their lack of
connection, a Simple Configuration system seems to be the most logical choice for representing
this data.  I believe that this file presents the intention of the data in a way that satisfies
all three of the criteria mentioned above.&lt;/p&gt;
&lt;h4 id="example-2-growing-the-webservice"&gt;Example 2: Growing The Webservice&lt;a class="headerlink" href="#example-2-growing-the-webservice" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As with all things simple, they organically seem to grow as people try and make it do “just one
more simple thing”.  For the purpose of this example, I am going to grow the configuration by
allowing it to also specify the endpoint for the webservice, the input type of the data file,
and pagination values to limit the size of items being hosted.  Just adding these values to
the configuration file could result in this orderly file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8080&lt;/span&gt;
&lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/api&lt;/span&gt;
&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;my_data.json&lt;/span&gt;
&lt;span class="na"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;application/json&lt;/span&gt;
&lt;span class="na"&gt;page_item_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5&lt;/span&gt;
&lt;span class="na"&gt;page_maximum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or it could result in this disorganized file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8080&lt;/span&gt;
&lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/api&lt;/span&gt;
&lt;span class="na"&gt;page_item_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5&lt;/span&gt;
&lt;span class="na"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;application/json&lt;/span&gt;
&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;my_data.json&lt;/span&gt;
&lt;span class="na"&gt;page_maximum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the Simple Configuration Type, there just is not any good way to organize this
information.  If someone decides to add a &lt;code&gt;file&lt;/code&gt; configuration item, the only rule is that
it must be within the file.  That is where the Grouped Configuration type comes
into play.  Switching over to that type would allow us to reorganize the configuration file
into a form such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[rest]&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8080&lt;/span&gt;
&lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/api&lt;/span&gt;

&lt;span class="k"&gt;[source-data]&lt;/span&gt;
&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;my_data.json&lt;/span&gt;
&lt;span class="na"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;application/json&lt;/span&gt;

&lt;span class="k"&gt;[pagination]&lt;/span&gt;
&lt;span class="na"&gt;item_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5&lt;/span&gt;
&lt;span class="na"&gt;item_maximum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the exact format of the file is not important, the grouping of the data within that
file is important.  Instead of a group of six seemingly connected configuration items, the
file is now organized to show that there are three groups of configuration items.&lt;/p&gt;
&lt;p&gt;Once again, from a common-sense point of view, I believe this Grouped Configuration type
layout is logical.  The
items in the &lt;code&gt;rest&lt;/code&gt; section deal with how the REST endpoint for the webservice is setup.
The items in the &lt;code&gt;source-data&lt;/code&gt; section deal with the information that is being presented
and the format in which it is stored.  Finally, the items in the &lt;code&gt;pagination&lt;/code&gt; section are
used to provide instructions on how to deal with presenting large amounts of data through
the webservice.&lt;/p&gt;
&lt;p&gt;To reiterate a point that I made above, both files present the same configuration
items.  The only differences are that some of the names changed and the addition of groups
for similar items adds more context to each item within that group.&lt;/p&gt;
&lt;h4 id="example-3-this-really-should-be-multiple-webservices"&gt;Example 3: This Really Should Be Multiple Webservices&lt;a class="headerlink" href="#example-3-this-really-should-be-multiple-webservices" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Following the rule of “do one thing well”, this example really should be implemented as
multiple webservices.  But due to external pressures, it is commonplace to overload an
already overloaded system just a bit more, even if it is only a stop gap measure. For
this example, I am going to create a fictional requirement that the webservice also hosts
another data file at a second endpoint.&lt;sup id="fnref:push"&gt;&lt;a class="footnote-ref" href="#fn:push"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Given that requirement, I started with the Grouped Configuration file that was presented
in the last section, and then made some modifications:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[rest]&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8080&lt;/span&gt;
&lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/api&lt;/span&gt;
&lt;span class="na"&gt;alternate_endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/data&lt;/span&gt;

&lt;span class="k"&gt;[source-data]&lt;/span&gt;
&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;my_data.json&lt;/span&gt;
&lt;span class="na"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;application/json&lt;/span&gt;

&lt;span class="k"&gt;[alternate-source-data]&lt;/span&gt;
&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;my_other_data.json&lt;/span&gt;
&lt;span class="na"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;text/csv&lt;/span&gt;

&lt;span class="k"&gt;[pagination]&lt;/span&gt;
&lt;span class="na"&gt;item_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5&lt;/span&gt;
&lt;span class="na"&gt;item_maximum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going strictly by my own guidelines, nine configuration items means that this should be a
good configuration file, but it looks disjointed to me. When I read that file, the big
question that I have is whether the item &lt;code&gt;alternate_endpoint&lt;/code&gt; is related to the items under
the &lt;code&gt;alternate-source-data&lt;/code&gt; group.  And if I must remind myself of that each time that
I read the file, it means the maintainability of the configuration is not where it could be.&lt;/p&gt;
&lt;p&gt;That configuration file’s lack of maintainability presents a good reason for bumping the
file up to a Complex Configuration type, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"port"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"endpoint"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"source"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"path"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"my_data.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"mime_type"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"application/json"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;"alternate_endpoint"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"source"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"path"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"my_other_data.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"mime_type"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"text/csv"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;"pagination"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"item_count"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"item_maximum"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While there is a bit more text in this file, that text helps define meaningful context
that adds hierarchical context to the data.  Speaking directly to my previous question
regarding the item &lt;code&gt;alternate_endpoint&lt;/code&gt;, it is now clear that the endpoint’s path and
the endpoint’s source data are directly connected.  Additionally, it allows the file
to group the &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;mime_type&lt;/code&gt; configuration items under the &lt;code&gt;source&lt;/code&gt; entry, making
it clear that both of those items are related to the source used for the webservice.&lt;/p&gt;
&lt;p&gt;I may be reiterating this point too many times, but this kind of formatting just seems
like common sense to me.  This data is more complex, so the configuration type must
evolve with the data, or understanding and maintainability suffers.  To me, the format
of this file makes the data clear, understandable, and maintainable.&lt;/p&gt;
&lt;h3 id="looking-for-something-out-there"&gt;Looking For Something Out There&lt;a class="headerlink" href="#looking-for-something-out-there" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Other than sounding like the opening line to a Hair Rock ballad, the section title describes
what I initially did when looking for a solution that provided all three levels of
configuration.  While there were some solutions out there that provided for the first two types
of configuration, I could not find anything that handles the Complex Configuration type.  I
know that the above sample is a simple JSON file and loading JSON files are easy, but the
traversal of the configuration data should be easy as well.&lt;/p&gt;
&lt;p&gt;It was then that I realized that I wanted to pull the &lt;code&gt;application_properties.py&lt;/code&gt; module
out of the PyMarkdown project and turn it into its own package.  My plan is to start with
what I have, and quickly add on other loaders to address the Simple Configuration type
and the Grouped configuration type.  The thing that ties them together?  Regardless of
how the configuration is loaded, the Python interface should remain the same.&lt;/p&gt;
&lt;p&gt;Basically, I believe that I have a good way to present properties to Python developers,
and I believe that releasing &lt;code&gt;application_properties&lt;/code&gt; as a package will provide some
benefit to others.  Now I just had to do the work to get it done!&lt;/p&gt;
&lt;h2 id="getting-it-done"&gt;Getting It Done&lt;a class="headerlink" href="#getting-it-done" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first two commits to the new repository,
&lt;a href="https://github.com/jackdewinter/application_properties"&gt;jackdewinter/application_properties&lt;/a&gt;
were simple with only a couple of changes.  The only changes that I made before that
commit were to add new test functions for any functionality that was previously uncovered.
That effort was nothing serious, just the addition of a handful of test functions to
cover lines that previous had been covered by the scenario tests for PyMarkdown.  Due to
the simple nature of the package, I was able to get the code coverage to 100 percent with
little effort. And, like the PyMarkdown project, maintaining a coverage percentage near that
value is a worthy goal that I hope to be able to maintain.&lt;/p&gt;
&lt;h3 id="starting-with-cleanup"&gt;Starting With Cleanup&lt;a class="headerlink" href="#starting-with-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before I could package the project up, I felt that I needed to clean up two things.  The first
bit of cleanup that I needed to do was to split up the various classes in the
&lt;code&gt;application_properties.py&lt;/code&gt; file up, reorganizing them to follow the one class one module rule.
When the module was in the PyMarkdown project, that module was only one module in a group
of other modules. As such, keeping all three classes in one module made sense. Now that it
was in a package dedicated to providing access to properties, it just seemed like
the right thing to do.&lt;/p&gt;
&lt;p&gt;Once that task was completed, I took some time to properly understand the
purpose of a &lt;code&gt;__init__.py&lt;/code&gt; file in a package, then taking that knowledge to
create an &lt;code&gt;__init__.py&lt;/code&gt; file for the package.  I was confused at first
as to how to properly construct a good &lt;code&gt;__init__.py&lt;/code&gt; file that would work properly.
Looking at other Python packages and how they constructed their &lt;code&gt;__init__.py&lt;/code&gt; files
helped me learn a lot. Initially, I was also concerned it would be a lot of effort to create,
but it turned out to be straightforward process.  As an added benefit, it made accessing the
package from the test modules a lot easier.&lt;/p&gt;
&lt;h3 id="then-make-a-local-package"&gt;Then Make A Local Package&lt;a class="headerlink" href="#then-make-a-local-package" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From that point, my next goal was to create a distributable package that I could test
locally.  Like the way I created a simple &lt;code&gt;pymtest&lt;/code&gt; project to test the installation
of the PyMarkdown project, I decided to use the PyMarkdown project to test the installation
of the &lt;code&gt;application_properties&lt;/code&gt; package.  From my experience with PyMarkdown, I knew that I
could install the package locally using the command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv install ../pymarkdown/dist/pymarkdownlnt-0.8.0.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Being able to test that package locally before I published it was fantastic.  I could
fiddle with whatever settings I wanted to until everything looked just right.&lt;/p&gt;
&lt;p&gt;So, with the project itself cleaned up, I decided to use the PyMarkdown project as a
“cheat sheet” of what to do.  Since I created the packaging for that project and I
knew how well it worked, I figured that using the PyMarkdown project as a template
was a smart move. Therefore, I started copying files from the PyMarkdown project as
examples of what I needed to do in the current project.&lt;/p&gt;
&lt;p&gt;The list of files that I needed to copy over and change from the PyMarkdown project
was quite small.  The obvious file is the &lt;code&gt;setup.py&lt;/code&gt; file, and it required around ten
changes to work properly.  Other than that, the &lt;code&gt;version.py&lt;/code&gt; file, the &lt;code&gt;MANIFEST.in&lt;/code&gt;
file, the &lt;code&gt;install-requirements.txt&lt;/code&gt; file, and the &lt;code&gt;package.cmd&lt;/code&gt; file were the only
other files that I copied over.  After making small changes to the &lt;code&gt;version.py&lt;/code&gt; file
and the &lt;code&gt;install-requirements.txt&lt;/code&gt; file, the package was building within five minutes
of starting the work on this section.&lt;/p&gt;
&lt;h3 id="increasing-readability"&gt;Increasing Readability?&lt;a class="headerlink" href="#increasing-readability" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Outside of
changing the name of the package, the biggest change was my introduction of a new
file called the &lt;code&gt;pypi.md&lt;/code&gt; file.  Since my creation of the PyMarkdown project’s
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md"&gt;readme.md file&lt;/a&gt;,
I have started to wonder if that Pypi.org page for the package has too much information.
While I believe that the PyMarkdown readme.md file is a solid GitHub repository &lt;code&gt;readme.md&lt;/code&gt;
file, I am not sure if it is the right length for a
&lt;a href="https://pypi.org/project/pymarkdownlnt/"&gt;PyPi.org project description page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am not sure of whether a copy of the &lt;code&gt;readme.md&lt;/code&gt; file or a shorter version
of that information is the best thing for either project, so I decided to experiment.
I created the &lt;code&gt;pypi.md&lt;/code&gt; file to be used as the source for the &lt;code&gt;application_properties&lt;/code&gt;
package’s
&lt;a href="https://pypi.org/project/application-properties/"&gt;PyPi.org project description page&lt;/a&gt;.
Into that file, I copied the first three sections, with reference links to the main
readme.md file. This way I can see both in action, solicit feedback, and make an educated
decision at a later date.&lt;/p&gt;
&lt;p&gt;As I said, it is an experiment.  Not sure how it will turn out, but time will tell.&lt;/p&gt;
&lt;h3 id="testing-with-pymarkdown"&gt;Testing With PyMarkdown&lt;a class="headerlink" href="#testing-with-pymarkdown" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Going back to the PyMarkdown project, I was easily able to add the newly built package
to my project using the following command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv install ../application_properties/dist/application_properties-0.5.0.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once I did that, I went to the PyMarkdown source files and removed the
&lt;code&gt;application_properties.py&lt;/code&gt; from the project.  Trying to compile, I noticed that I
needed to do some small changes on the import statements for the &lt;code&gt;application_properties&lt;/code&gt;
module.  Other than that, everything just worked.  I would like to think that a certain
amount of that was luck, but I believe that it was simply good organization.  Other than
the new &lt;code&gt;__init__.py&lt;/code&gt; module in the project taking care of the import responsibilities,
everything was the same as before.  They had the same class names and the same function names;
the only difference was that they were in a different package.&lt;/p&gt;
&lt;p&gt;After double checking, the &lt;code&gt;test_application_properties.py&lt;/code&gt; module was removed, as it had
also been moved to the new project.  Running all the PyMarkdown scenario tests, everything
worked fine, so it was time to move on.&lt;/p&gt;
&lt;h2 id="documentation"&gt;Documentation&lt;a class="headerlink" href="#documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the thorough tests in place, zero PyLint &amp;amp; Flake8 warnings, a clean build of the Python
package itself, and the testing of that package in the PyMarkdown project accomplished, there
was only one thing left to do: documentation.&lt;/p&gt;
&lt;p&gt;If I am being honest, I was mostly looking forward to working on the documentation.  Based on
my usage of the module in the PyMarkdown project and the few changes that I already performed
in this project, I was confident that I had a good set of modules to document.  For me, that
is always the bulk of the battle.  The more confident and interested I am in the subject that
I am documenting, the easier the words flow out of my fingers.&lt;/p&gt;
&lt;p&gt;The other reason that I look forward to working on documentation is that it has a habit
of forcing me to walk through the entire user interface for the purposes of documenting it.
Along the way, if something is not done right, it quickly becomes obvious to me.  From my
experience, I have found that the effort required to document an object is directly
proportional to how difficult that object is to understand.  I knew there were probably
going to be a couple of things that I missed or could be simplified, and I was eager to
get to them.&lt;/p&gt;
&lt;p&gt;As the module had been previously tested, there was not that much to find.  One of the
functions that was missing was a new function called &lt;code&gt;property_names_under&lt;/code&gt; to
complement the &lt;code&gt;property_names&lt;/code&gt; property that listed every property name in the
configuration instance.  This new function took that same concept but altered the
returned list slightly to only return those property names that were under a given
prefix.  That way, instead of the caller having to filter the return value of &lt;code&gt;property_names&lt;/code&gt;
to only include the values under &lt;code&gt;rest&lt;/code&gt;, the caller could ask the
&lt;code&gt;property_names_under&lt;/code&gt; function for values under &lt;code&gt;rest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Along those same lines, I needed to fix up the &lt;code&gt;handle_error_fn&lt;/code&gt; parameter of the
&lt;code&gt;ApplicationPropertiesJsonLoader&lt;/code&gt; class.  Since the PyMarkdown project wanted a
consistent response to any load exception, I created this parameter to pass
failure text along with the exception.  That way, the project could decide how to
best display that information.  The only problem was that it did not have any default
behavior, so it required an inner function to be created in the test functions.&lt;/p&gt;
&lt;p&gt;I decided to clear that up by adding the following code to the &lt;code&gt;load_and_set&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;handle_error_fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_error_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thrown_exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thrown_exception&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;handle_error_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print_error_to_stdout&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A simple write of the &lt;code&gt;formatted_error&lt;/code&gt; to standard out, but a simple enough default.&lt;/p&gt;
&lt;h2 id="as-always-clean-up"&gt;As Always… Clean Up&lt;a class="headerlink" href="#as-always-clean-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before I published, I took a quick look through the code and documentation, and just did
some small cleanup tasks here and there.  Nothing big, just some rewording of the
documentation, creating GitHub issues to track what needs to be done, and adding placeholder
sections to some of the documents.  There was some stuff left to do, but for an initial
release, it would be good enough.&lt;/p&gt;
&lt;p&gt;And with that, I ran the &lt;code&gt;publish_to_pypi.cmd&lt;/code&gt; script and published the package.  I then
went over to the PyMarkdown project and updated its dependency from a local package to
&lt;code&gt;application_properties==0.5.0&lt;/code&gt;, and reran every test.&lt;/p&gt;
&lt;p&gt;With things looking good, and all tests passing, it was time to call it a day!&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it might seem weird to some people, it was a fun and relaxing week
working on the initial release of the &lt;code&gt;application_properties&lt;/code&gt; package.  No pressure
from myself to do anything, just take something I already have and clean it up for
publication.&lt;/p&gt;
&lt;p&gt;It was also nice to know that I was thinking about future projects in Python.  Looking
at the PyMarkdown directory on my computer, there are a couple of helper
scripts that I use every so often for various small tasks.  It would be nice to get
them out of that directory and into their own project.  That would allow me to clean
them up and make them easier to use.  Nothing serious,
just some small helper applications, but nice fun projects to work on.  And having
a good start on the configuration for those projects, that was a nice thing to have
in my pocket.&lt;/p&gt;
&lt;p&gt;Yes, next week was going to be about getting more work done on PyMarkdown.  But for this
week, it was a nice and relaxing small break.  I felt refreshed.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting back to PyMarkdown, I start to go through the issues list, with the goal
to knock a couple more things off that list.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:push"&gt;
&lt;p&gt;While I would push back on this requirement from a quality point of view, I would also acknowledge that there may well be a business benefit to this overload for a variety of reasons. &lt;a class="footnote-backref" href="#fnref:push" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="Python packages"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Triple Check Everything</title><link href="https://jackdewinter.github.io/2021/05/31/markdown-linter-road-to-initial-release-triple-check-everything/" rel="alternate"></link><published>2021-05-31T00:00:00-07:00</published><updated>2021-05-31T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-05-31:/2021/05/31/markdown-linter-road-to-initial-release-triple-check-everything/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/24/markdown-linter-road-to-initial-release-crossing-the-ts/"&gt;last article&lt;/a&gt;, I talked
about getting the documentation cleaned up and ready for release.  In this article,
I talk about the final changes that I needed to make to get the project ready for its
initial release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was it!  After many hours of work, countless …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/24/markdown-linter-road-to-initial-release-crossing-the-ts/"&gt;last article&lt;/a&gt;, I talked
about getting the documentation cleaned up and ready for release.  In this article,
I talk about the final changes that I needed to make to get the project ready for its
initial release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was it!  After many hours of work, countless hours of debugging, and too many
brain cells burnt debugging, the project was on the cusp of being ready.  I just
had a few tasks to complete before I felt confident in announcing the release of
the project.  Nothing spectacular, but just some (hopefully) small tasks to make
sure everything was in place.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5756cf6add036436866a56ec1a6cac9c5a07d333"&gt;27 May 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/d8526d3bb695e42be71f519f8bc8345c14edee86"&gt;31 May 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-true-initial-release-was-quiet"&gt;The True Initial Release Was Quiet&lt;a class="headerlink" href="#the-true-initial-release-was-quiet" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The release of PyMarkdown &lt;code&gt;0.5.0&lt;/code&gt; or &lt;code&gt;pymarkdownlnt-0.5.0&lt;/code&gt; was
done very quietly and without much fanfare.  Seriously quiet.  I mean,
if you twist my arm, I might admit to doing enough of a victory dance that
my wife asked what the noise in my office was.  But other than that, nothing.
It was just a normal night, and the release was performed by following some
simple instructions and using this command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run python -m twine upload --config-file .pypirc --repository pypi dist/*
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="and-the-work-goes-on"&gt;And The Work Goes On&lt;a class="headerlink" href="#and-the-work-goes-on" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After taking a minute to appreciate what I had done, I got to work on finding
out if there were any small tasks in the release that I had missed.  The first
thing I did was bump the project version to &lt;code&gt;0.5.1&lt;/code&gt;.  After that, I double
checked to make sure that the &lt;code&gt;setup.py&lt;/code&gt; file contained the PyPi name of the
project, &lt;code&gt;pymarkdownlnt&lt;/code&gt;, and committed that change.&lt;/p&gt;
&lt;p&gt;Having passed my 48-hour documentation cool off period, I went through
each of the documentation files carefully and found a handful of small changes that
I felt needed to be made.  Except for adding the missing &lt;code&gt;advanced_plugins.md&lt;/code&gt; file
to the repository, most of the remaining changes were simple wording changes
or organizational changes.&lt;/p&gt;
&lt;p&gt;The main organizational change that I made were primarily made to provide
a brief summary for each section.  While I am not sure it is the right
approach, I decided to start each important section with a simple table
containing the important concepts from that section.  My goal with these tables
is to provide readers with a quick summary to help them decide if they
wanted to read that section.  I am not sure if I have the right information
or the right format yet, but I wanted to give it a try and see how it works
out.&lt;/p&gt;
&lt;p&gt;The other organizational change I made was along the same lines as the summary
tables.  But instead of starting each section with a table, I decided to start
the &lt;code&gt;readme.md&lt;/code&gt; file with some relevant badges.&lt;/p&gt;
&lt;h3 id="what-are-badges"&gt;What Are Badges?&lt;a class="headerlink" href="#what-are-badges" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Badges (or shields) are an interesting concept that leverage visual information with
the advent of webservices.  A good example of this is the badge Markdown that
I use for displaying the version number associated with the package uploaded
to PyPi: &lt;a href="https://pypi.org/project/pymarkdownlnt"&gt;&lt;img alt="Version" src="https://img.shields.io/pypi/v/pymarkdownlnt.svg"/&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;![Version&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pypi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pymarkdownlnt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;pypi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pymarkdownlnt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The most important part of the badge is the badge image link, which is the Image
element specified inside of the Link’s label.  In this case, I
use the provider &lt;code&gt;img.shields.io&lt;/code&gt; to provide a badge
displaying the version (the &lt;code&gt;/v&lt;/code&gt;) from PyPi (the &lt;code&gt;/pypi&lt;/code&gt;) for this project
(the &lt;code&gt;pymarkdownlnt&lt;/code&gt;) in the SVG image format (the &lt;code&gt;.svg&lt;/code&gt;).  This is all
that is required to display the above image with the version information.
Because nothing is hardcoded, when I upload a new version of the project to PyPi,
eventually &lt;code&gt;img.shields.io&lt;/code&gt; will expire its cache and retrieve a new version.
When that happens, the badge image automatically updates.&lt;/p&gt;
&lt;p&gt;The second part of the badge is the optional outer Link element.  While it is optional,
it is convenient in that it includes a link to something associated with the badge
itself.  In the above case, as the badge shows the version of the package on PyPi,
it made sense to include a link to the package page on PyPi.  For the badge that I
use to display the project’s license agreement (&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/LICENSE.txt"&gt;&lt;img alt="License" src="https://img.shields.io/github/license/jackdewinter/pymarkdown.svg"/&gt;&lt;/a&gt;), I specify the location of the &lt;code&gt;license.txt&lt;/code&gt;
file in the project.  And for badges where there is no commonsense page
to go to, such as the Black version used to format the Python for the project
(&lt;img alt="GitHub Pipenv locked dependency version (branch)" src="https://img.shields.io/github/pipenv/locked/dependency-version/jackdewinter/pymarkdown/black/master"/&gt;), I just
provide the image with no link.&lt;/p&gt;
&lt;p&gt;While I initially viewed badges as frivolous, I quickly decided that they are useful
for two things: quick links for me and quick information for others. Instead of
maintaining multiple project links in my browser’s toolbar, I can just go to the
project’s main page and reference them from there.  From the other people
perspective, I can hopefully provide information to anyone interested in the project
in a quick and easy to digest summary format.&lt;/p&gt;
&lt;h3 id="and-that-completed-the-work-on-version-051"&gt;And That Completed The Work on Version 0.5.1&lt;a class="headerlink" href="#and-that-completed-the-work-on-version-051" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having cleaned up what I wanted to, I went ahead and packaged up the code and
documentation for the project and uploaded version 0.5.1 of the project
to &lt;a href="https://pypi.org/project/pymarkdownlnt/0.5.1/"&gt;PyPi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I then started on one more thing that I wanted to get out of the way before
the initial release: a good solid CI/CD pipeline.&lt;/p&gt;
&lt;h2 id="cicd-pipelines-with-github-actions"&gt;CI/CD Pipelines With Github Actions&lt;a class="headerlink" href="#cicd-pipelines-with-github-actions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For those who are not in the know, CI/CD pipelines are all the rage
these days, and with good reason.  The full name for them is Continuous Integration
and Continuous Deployment pipelines, which is a mouthful.  And technically,
while I want a pipeline in place before the initial release, it will only technically
be a Continuous Integration pipeline.&lt;/p&gt;
&lt;p&gt;The difference between the two is simple: one is for integration, and one is
for deployment.  Before sending an email to me to let me know that I am responsible
for a facepalm that was just performed, let me explain: common sense isn’t always
common.  A lot of people that I know in the industry often get those two parts
of the pipeline or two different pipelines confused, so let me try and clarify
what I mean.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Continuous_integration"&gt;Continuous Integration&lt;/a&gt;
is the part of the pipeline that most people implement and
takes care of updating the project’s main repository with the latest changes
submitted by developers.  Once submitted, those changes are subjected to various
checks and balances to ensure that those changes do not negatively affect the
project.  In the case of the pipeline that I am setting up, I am more concerned
about running extensive checks after I have finished my own subset of checks.
However, many pipelines are setup to mandate that all checks pass before any
changes are accepted into the repository.  As these checks happen with every
change submitted, and not on a schedule, they are considered continuous integrations.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Continuous_deployment"&gt;Continuous Deployment&lt;/a&gt; is
similar, but different.  For this example, in addition to the PyMarkdown linter,
assume that we also provide a simple webservice.  This webservice allows people
to submit Markdown documents, with the webservice reporting any standard violations
back to the submitter.  With that assumption in place, we can set up another
pipeline to trigger once the Continuous Integration pipeline produces a new artifact.
This new pipeline will probably then run extra checks to verify that the new
artifact works properly.
If those checks succeed, then the pipeline starts the process of deploying that
new artifact to the location where the webservice is being hosted.  Once again,
only if all the checks pass will the new webservice be deployed to the
specified environment.  So, while the concepts of integration and deployment are
different, the continuous prefix of both concepts are the same in that they
happen automatically once something is produced.&lt;/p&gt;
&lt;p&gt;For this project, I do not have anything that I need to deploy, so I am just
implementing a CI pipeline.  For now, when I submit any changes, I want to
ensure that the formatting of the changes is correct, and I want to run the
full set of scenario
tests on all three common platforms.  I do not want to have to ask for these
to be kicked off, I want it to “just happen”.  And that is where GitHub Actions
comes into play.&lt;/p&gt;
&lt;h3 id="github-actions"&gt;GitHub Actions&lt;a class="headerlink" href="#github-actions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While GitHub Actions have only been around for a short while, they have made
quite the splash in the software community.  As the main repository for the
PyMarkdown project is a GitHub repository, I can associate specific actions
with specific triggers that occur with the repository itself.&lt;/p&gt;
&lt;h4 id="setting-the-initial-context"&gt;Setting The Initial Context&lt;a class="headerlink" href="#setting-the-initial-context" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is what I specified in the prefix of my &lt;code&gt;main.yml&lt;/code&gt; file, located in the
&lt;code&gt;.github/workflows/main.yml&lt;/code&gt; directory of the repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Main&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;pull_request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;  &lt;span class="c1"&gt;# daily&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Breaking it down, this workflow has a name &lt;code&gt;Main&lt;/code&gt;, and will be executed if
one of three criteria are met: a push occurs, a pull request is created,
or the scheduled time occurs.  In this case, that scheduled time is 00:00,
or midnight server time.  It is important to note that this interpretation
of midnight is up to the server’s interpretation of midnight, not the viewer’s.&lt;/p&gt;
&lt;p&gt;After that initial context was established, I started working on
the &lt;code&gt;jobs&lt;/code&gt; section, which initially looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;install-test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt; &lt;span class="c1"&gt;# Checking out the repo&lt;/span&gt;

    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install dependecies&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;VaultVulp/action-pipenv@v2.0.1&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;install -d&lt;/span&gt; &lt;span class="c1"&gt;# Install all dependencies, including development ones&lt;/span&gt;

    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Test&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;VaultVulp/action-pipenv@v2.0.1&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;run pytest&lt;/span&gt; &lt;span class="c1"&gt;# Run custom `pytest` command defined in the `[scripts]` block of Pipfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking around for something that worked with the project, I read the documentation
on the &lt;code&gt;VaultVulp/action-pipenv&lt;/code&gt; action and thought it would work.  However,
after a few attempts, I wasn’t getting anywhere. I then moved on to the
&lt;code&gt;dschep/install-pipenv-action@v1&lt;/code&gt; action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;test-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@master&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v1&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dschep/install-pipenv-action@v1&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run pytest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and got some manner of response right away.  Thinking about that response,
I quickly changed the last line to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv --help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;allowing me to make some progress.  I then realized that I had tried to jump right to
executing the tests instead of just verifying that &lt;code&gt;pipenv&lt;/code&gt; was working
for the project.  By only executing &lt;code&gt;pipenv --help&lt;/code&gt;, I was able to make sure
that Pipenv was working properly without worrying about any other component,
which was the right call for that point in time.  And while it wasn’t exactly
where I wanted to be, that simplified workflow worked right away.&lt;/p&gt;
&lt;p&gt;Thinking things through with my use of &lt;code&gt;pipenv&lt;/code&gt;, I figured out that
&lt;code&gt;pipenv run pytest&lt;/code&gt; by itself was never going to work.  I needed to ensure
that &lt;code&gt;pipenv&lt;/code&gt; sycned itself with the project before running the tests.  Therefore,
I changed those steps to reflect that, as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;test-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout Repository&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@master&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup Python 3.8&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v1&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.8&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install PipEnv&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dschep/install-pipenv-action@v1&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Sync With Repository&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv sync&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Execute Tests&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run pytest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and it worked right away!  Before, I had tried to create a workflow
that jumped right to the last step, and it failed.  But now I was taking the
time to set &lt;code&gt;pipenv&lt;/code&gt; up properly using &lt;code&gt;run: pipenv sync&lt;/code&gt;.  I still took the
steps to run the test as before, but by inserting the &lt;code&gt;run: pipenv sync&lt;/code&gt; line
into the workflow, I ensured that Pipenv synced itself up with the repository
and its &lt;code&gt;piplock&lt;/code&gt; file. That helped a lot!&lt;/p&gt;
&lt;p&gt;Also, it helped me to give each step a distinct name.  While different things
work for different people, having a good name for each step just helped me
identify with each step properly.  And seeing as I maintain this project,
that was important to me.&lt;/p&gt;
&lt;h4 id="adding-platform-support"&gt;Adding Platform Support&lt;a class="headerlink" href="#adding-platform-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I stated earlier in the article, my main goal for the pipeline was to run more
extensive tests than I can locally.  While I do have an Ubuntu subsystem on my
machine, I do not have any Apple subsystem that I can install for testing.
As such, I did some research and quickly ran into the GitHub Actions &lt;code&gt;strategy&lt;/code&gt; item.
Looking like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;#python: [3.8, 3.9]&lt;/span&gt;
        &lt;span class="c1"&gt;#platform: [ubuntu-latest, macos-latest, windows-latest]&lt;/span&gt;
        &lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3.8&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
        &lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;windows-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ matrix.platform }}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the strategy section replaces the &lt;code&gt;runs-on: ubuntu-latest&lt;/code&gt; line in the
previous examples.  The power of this construct is that it allows me to
specify multiple platforms and Python versions to test on, which is
exactly what I wanted to do: more extensive testing.&lt;/p&gt;
&lt;h4 id="code-coverage"&gt;Code Coverage&lt;a class="headerlink" href="#code-coverage" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I could have focused on more extensive testing at this stage, but I decided to
focus on duplicating the existing tests on my local development environment.
At that moment, I was more interested
in demonstrating the code coverage for the project rather than the project
running on multiple platforms.  After doing some research on
&lt;a href="codecov.io"&gt;CodeCov&lt;/a&gt;, I created a new account on their site and added this
code to the workflow file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Report Coverage&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;codecov/codecov-action@v1&lt;/span&gt;
      &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;github.event_name != 'schedule'&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./report/coverage.xml&lt;/span&gt;
        &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ matrix.python }} - ${{ matrix.platform }}&lt;/span&gt;
        &lt;span class="nt"&gt;fail_ci_if_error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After adding an environment secret to the project, the coverage information
was relayed to CodeCov when I ran the workflow.  It was then available for
examinination on the project’s page at
&lt;a href="https://codecov.io/gh/jackdewinter/pymarkdown"&gt;codecov.io&lt;/a&gt;, and soon after that
information appeared in a new badge for code coverage that I added.
While I got a lot of
benefit for a relatively small amount of work, it was due to my ongoing measurement
of code coverage that this was so easy.  But a win is a win, so I took it.&lt;/p&gt;
&lt;h2 id="cleaning-up-documentation"&gt;Cleaning Up Documentation&lt;a class="headerlink" href="#cleaning-up-documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that I was getting tangibly close to releasing, I wanted to start tracking
changes properly.  As such, when I noticed that every example in the project
documentation was using &lt;code&gt;python main.py&lt;/code&gt; instead of &lt;code&gt;pymarkdown&lt;/code&gt;, I knew it
was a good time to start.  So, I created
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/3"&gt;Issue 3&lt;/a&gt;
to track that project work needed to make the change.  While the change
was small, it was a habit that I needed to get in to.&lt;/p&gt;
&lt;h2 id="adding-lint-support"&gt;Adding Lint Support&lt;a class="headerlink" href="#adding-lint-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before circling back and adding extra platforms to the workflow, there was
one last thing that I needed to add: Lint Support.  Literally cutting and
pasting from the other job in the workflow and my &lt;code&gt;clean.cmd&lt;/code&gt; script, I
quickly came up with this job:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;lint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3.8&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
        &lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;windows-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ matrix.platform }}&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout Repository&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@master&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup Python 3.8&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v1&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.8&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install PipEnv&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dschep/install-pipenv-action@v1&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Sync With Repository&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv sync&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Execute Flake8&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run flake8 --exclude dist,build&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Execute PyLint on Source&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run pylint --rcfile=setup.cfg ./pymarkdown ./pymarkdown/extensions ./pymarkdown/plugins&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Execute PyLint on Tests&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run pylint --rcfile=setup.cfg ./test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since linting should work equally well on any given platform, I simply picked
the Windows platform to run this job on.  Then, using my &lt;code&gt;clean.cmd&lt;/code&gt; script as
a guide, I created new steps after the &lt;code&gt;run: pipenv sync&lt;/code&gt; step to execute
the lint commands the exact same way that I execute those commands in my script.&lt;/p&gt;
&lt;p&gt;While it doesn’t happen that often, I was able to get that new job up and running
with only one try.  I appreciate that it was due to previous debugging sessions,
but I was still grateful.&lt;/p&gt;
&lt;h2 id="figuring-out-the-linux-tests"&gt;Figuring Out The Linux Tests&lt;a class="headerlink" href="#figuring-out-the-linux-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After having left the Linux tests turned off from the night before, on Thursday night
I was eager to get them those tests working.  Enabling the Linux tests was
as simple as adding the &lt;code&gt;ubuntu-latest&lt;/code&gt; tag to the &lt;code&gt;platform&lt;/code&gt; configuration
for the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;windows-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;ubuntu-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and committing it to the repository.  That is when the fun began!&lt;/p&gt;
&lt;p&gt;I created &lt;a href="https://github.com/jackdewinter/pymarkdown/issues/4"&gt;Issue 4&lt;/a&gt;
to track the Linux build issues and
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/5"&gt;Issue 5&lt;/a&gt;
to track the MacOs build issues.  These issues didn’t have to have
tons of documentation, just some information that would help me figure
out what to do.&lt;/p&gt;
&lt;p&gt;Thinking that it would be an easy fix, I looked at the output and
determined that it was a problem with the temporary files that I use
in the tests.  To ensure that configuration options are tested properly,
for any scenario tests that require it, I create
a temporary file with the configuration dictionary serialized to the file and
pass the path to that
temporary file into PyMarkdown using the &lt;code&gt;--config&lt;/code&gt; command line setting.
But for some reason it wasn’t working.&lt;/p&gt;
&lt;p&gt;At first, it reported a problem with the &lt;code&gt;delete=False&lt;/code&gt; parameter that
was passed into the &lt;code&gt;TemporaryFile&lt;/code&gt; function but removing that parameter
didn’t fix the problem.  So then I added &lt;code&gt;--log-level DEBUG&lt;/code&gt; to the arguments for one
of the tests, but I didn’t see any immediate difference.  After four
more &lt;code&gt;debug&lt;/code&gt; commits, I still wasn’t any closer to getting any information
that would help me figure things out.&lt;/p&gt;
&lt;p&gt;I figured out that the only way I was going to figure out the issue properly
was to install the Ubuntu subsystem on my machine.  Without that, I was going
to be guessing and guessing, with not much progress.  After setting up
the install for the Ubuntu subsystem, I decided it was time that I retired
for the night.  I had no idea what I was in store for next.&lt;/p&gt;
&lt;h3 id="serendipity-strikes"&gt;Serendipity Strikes&lt;a class="headerlink" href="#serendipity-strikes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having some family commitments to attend to, I was out of the house for about
24 hours from Friday to Saturday. When I got home, I was shocked.  My system
had died.  It really died.  After three or four hours of doing updates and resets
and such, I was very convinced that it had died to the extent that it would take a
complete re-install of the operating system to get things back in working order.
It was deflating.&lt;/p&gt;
&lt;p&gt;But I had an option.  My son is very hardware oriented, and before this year’s
computer chip scarcity started, he built himself a new system from scratch.  To
help him on his journey and get a newer system in the process, I purchased his
old system from him.  My current system was at least six years old and purchased from
Fry’s, whereas his older system was around three years old and
made from scratch for his gaming needs.  It was going to be a clear upgrade.&lt;/p&gt;
&lt;p&gt;The issue?  Time.  Between my various hobbies, yardwork, professional work,
and the PyMarkdown project, I had never found the required time to get his
older system set up.  Now that my system died, I had a great forcing function
for me to get it set up and fast.&lt;/p&gt;
&lt;p&gt;Thankfully, I back most of what I need up to a backup server, and I was able
to retain almost everything that I thought I might have lost.  Installing
the new operating system on the older machine was a lot easier than I remembered
it being, and it was quickly completed.  Going through a list of programs
that I needed took a bit, but by focusing on it, I made quick progress of it.
Once that was done, I started getting my GitHub repositories cloned to my
new system, and I was back in business.&lt;/p&gt;
&lt;p&gt;Painful, but worth it.  The new system is clean, uncluttered, and fast.&lt;/p&gt;
&lt;h3 id="getting-back-to-work"&gt;Getting Back To Work&lt;a class="headerlink" href="#getting-back-to-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After sleeping in Sunday morning (after setting up the system until sometime in
the early morning), I started to work on the Linux test issue in my system’s
Ubuntu subsystem.  I had
installed Python, Git, and everything else the night before, so it was just
a matter of working things out from my usual baseline.&lt;/p&gt;
&lt;p&gt;With everything in place, I was able to quickly diagnose what the problem was.  In my
haste to get things working, I had created temporary files on my Windows
system using the &lt;code&gt;TemporaryFile&lt;/code&gt; Python function.  While it worked fine on
my Windows machine, it was not working at all on my Ubuntu subsystem.  After
a bit of research, I determined that I needed to change that function to the
&lt;code&gt;NamedTemporaryFile&lt;/code&gt; function and add the &lt;code&gt;delete=False&lt;/code&gt; parameter back to
the call to that function.  After removing the &lt;code&gt;print&lt;/code&gt; debug statements that
I had previously added, that one change alone brough the number of failing
tests from 70 down to 5 in a matter of minutes.  After more than three days
of trying to figure it out, it was solved, and it felt good.&lt;/p&gt;
&lt;p&gt;The next three issues were also easy to fix.  When I wrote the tests
that handled the &lt;code&gt;entities.json&lt;/code&gt; file testing, I erroneously used simple
string concatenation to determine the path names.  Now that I was dealing
with more than one operating system, that practice fell apart.  Replacing those
concatenations with calls to &lt;code&gt;os.path.join&lt;/code&gt; and doing some extra testing,
I was able to put that issue to bed.  With a reminder to myself to not
shortcut code that deals with operating systems and their artifacts, it
was on to the next set of tests.&lt;/p&gt;
&lt;p&gt;There were only two stubborn tests left.  Looking at the output, those test
failures appeared to be simple ordering issues.  When the &lt;code&gt;pymarkdown plugins list&lt;/code&gt;
command was submitted on the Linux systems, the order in which the plugins
were reported back seemed arbitrary.  To fix that, I simply replaced:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all_plugin_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all_plugin_ids&lt;/span&gt;
    &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to sort the list before using it, and I was then down to zero failures.
After ensuring that everything was working properly for both Windows and
Ubuntu environments, I ran my script to clean up the code and committed
those changes.  A few anxious minutes later, and all the GithubAction
jobs completed successfully!&lt;/p&gt;
&lt;h2 id="and-then-issue-5"&gt;And Then… Issue 5&lt;a class="headerlink" href="#and-then-issue-5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And after all that work to get tests running on Linux machines,
&lt;a href="https://github.com/jackdewinter/pymarkdown/issues/5"&gt;Issue 5&lt;/a&gt;
was addressed by simply including the &lt;code&gt;macos-latest&lt;/code&gt; platform:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;windows-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;ubuntu-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;macos-latest&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I fully expected something to happen, but nothing did.  After
everything it took to get to that point, it was a nice change.&lt;/p&gt;
&lt;h2 id="and-finally-the-initial-release"&gt;And Finally… The Initial Release&lt;a class="headerlink" href="#and-finally-the-initial-release" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And with as much fanfare as the release of PyMarkdown &lt;code&gt;0.5.0&lt;/code&gt;, the
initial release of PyMarkdown &lt;code&gt;0.8.0&lt;/code&gt; was released.  All scenario
tests are passing on all platforms.  The entire project is being
linted and everything looks fine.  It just feels right.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was a long time getting to this point, but I was now here.  I
have a project that I can be proud of that I believe has been architected,
designed, and implemented properly.  It has a healthy set of scenario tests
and unit tests, and it follows known coding practices.  More than that,
I gave myself the time to do things properly instead of rushing ahead,
even when my instinct was to do just that.&lt;/p&gt;
&lt;p&gt;With the initial release taken care of, I know I have some issues to take
care of before I start adding new features, but I feel okay about that.
I have a good set of things that I know I must look at, and a great set
of tests that will make sure that any changes I make don’t break anything else.
Basically, because I took my time to do things “right”, I have the utmost
confidence that I can quickly deal with most of the issues in the Issues List.&lt;/p&gt;
&lt;p&gt;And because of what I have learned getting to this point, the experience has
been priceless.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be honest, I am not sure.  I still need to work on the project,
but I am not sure if I should get some utility stuff dealt with or
focus on the project before moving forward.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Crossing The Ts</title><link href="https://jackdewinter.github.io/2021/05/24/markdown-linter-road-to-initial-release-crossing-the-ts/" rel="alternate"></link><published>2021-05-24T00:00:00-07:00</published><updated>2021-05-24T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-05-24:/2021/05/24/markdown-linter-road-to-initial-release-crossing-the-ts/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/17/markdown-linter-road-to-initial-release-dotting-the-is/"&gt;last article&lt;/a&gt;, I talked about
resolving some issues that were in the way of a clean release.  In this
article, I talk about getting the documentation cleaned up and ready for release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the reasons that I started writing these articles is to talk about …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/17/markdown-linter-road-to-initial-release-dotting-the-is/"&gt;last article&lt;/a&gt;, I talked about
resolving some issues that were in the way of a clean release.  In this
article, I talk about getting the documentation cleaned up and ready for release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the reasons that I started writing these articles is to talk about how
the project evolved throughout its development.  But equally as
important, I wanted to get more comfortable with my skills as a writer.
While I am not sure how much those skills have grown, I do feel that they have grown.
And in this stage of the project, I know that I need to leverage those
skills to write good, solid project documentation.&lt;/p&gt;
&lt;p&gt;In my eyes, documentation can make or break a project.  I have
glanced over and dismissed many projects on GitHub after two minutes or
less.  I usually make that decision based on the base project document,
the &lt;code&gt;readme.md&lt;/code&gt; file, and whether that file made the project look interesting or
applicable to what I was searching for.  To be clear, I admit that it is
entirely possible that those projects I dismissed were either interesting
or what I needed. But without good project documentation to provide that
information to me, the chance that I will find the
right information to make that judgement call is a fraction
of what it could be with good project documentation.&lt;/p&gt;
&lt;p&gt;In other words, I have worked hard to come up with the PyMarkdown linter.
It was time to use that same passion to document the linter so I can
provide people with the information they need to make their own judgements.&lt;/p&gt;
&lt;p&gt;Given my own personal high bar for documentation, I was under no illusion
that this was going to be easy.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/17304b3ef580ec71678c450ab6c2a1e669b4e90a"&gt;16 May 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/6efc9044e5c93dd0848cece854e0463c04fcd299"&gt;23 May 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="coding-vs-documentation"&gt;Coding Vs Documentation&lt;a class="headerlink" href="#coding-vs-documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While this block of work did contain a few small tweaks here and there,
the bulk of the work was on getting the documentation ready for release.
And if I may be blunt, there is a large difference between writing code
and writing documentation.&lt;/p&gt;
&lt;p&gt;In creating the PyMarkdown project, there were a lot of times that I was
not sure what the next task to do was, so I referred to my
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/issues.md"&gt;Issues List&lt;/a&gt;.
If I was not sure about whether or not something was in scope, I referred
back to my article on
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;Collecting Requirements&lt;/a&gt;.
If a particular Markdown snippet was not covered in the
&lt;a href="https://github.github.com/gfm/"&gt;GFM Specification&lt;/a&gt;,
I would run the sample through the
&lt;a href="https://johnmacfarlane.net/babelmark2/"&gt;Babelmark&lt;/a&gt; webpage.  Before
anything gets committed to the repository&lt;sup id="fnref:mostly"&gt;&lt;a class="footnote-ref" href="#fn:mostly"&gt;1&lt;/a&gt;&lt;/sup&gt;, I execute a script
that ensures that I am following good coding practices, reformatting my
code in the process. And to top things off, because I love Test Driven
Development, I add
the Scenario Tests for everything before I code them up.  This provides
an additional level of structure to how I develop features or fix bugs.&lt;/p&gt;
&lt;p&gt;And that is the point I wanted to get across.  When I am writing code,
there is a lot of structure all over the place.  From picking something
off the Issues List to running my pre-commit script, there is tons
of structure built into the processes that I use to develop software.
In the cases where I sometime forget to follow a given process, that
process or other processes that I have are able to cover for that lapse
of process.  Sure, it is redundant, but it works well for me.&lt;/p&gt;
&lt;p&gt;So, when I started going through the documentation to bring it up
to the level that I thought it deserves, I wanted to follow
procedures like the ones that helped me develop the source code
side of the project.  The question was, how was I going to do that?&lt;/p&gt;
&lt;h2 id="starting-with-requirements"&gt;Starting With Requirements&lt;a class="headerlink" href="#starting-with-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I wrote it over a year ago, I still credit the creation
of the section
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/#what-are-the-requirements"&gt;What Are The Requirements?&lt;/a&gt;
with its fair share of the success for the project.  By taking the
time to sit down and figure out what I wanted and recording that
in a format that I could easily reference, I did myself a huge favor.&lt;/p&gt;
&lt;p&gt;That act of creating the article gave me a solid touchstone that
I still refer to for guidance.  Especially with the summary
paragraph after that list detailing why I thought those requirements
were important, it crystallized what I wanted to do with the project
into a bedrock set of concepts that I can rely on.&lt;/p&gt;
&lt;h3 id="doing-the-research"&gt;Doing The Research&lt;a class="headerlink" href="#doing-the-research" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In my attempt to replicate the success of my coding effort with my documentation
effort, I knew that I needed to dig
deep and figure out what I liked and did not like about various project
home pages out there.  The things that I liked, I wanted to replicate,
the things that I did not like, I wanted to avoid.&lt;/p&gt;
&lt;p&gt;So, like always, I started to research.  While that can also read
as “Jack looks at websites”, it was not really that easy to do.
I went to the
&lt;a href="https://www.reddit.com/r/coolgithubprojects/"&gt;Cool GitHub Projects sub-reddit&lt;/a&gt;
and started to look at different GitHub projects.  That process helped
me to formulate my first requirement.&lt;/p&gt;
&lt;h3 id="requirement-1-why-should-i-use-this-project"&gt;Requirement 1: Why Should I Use This Project?&lt;a class="headerlink" href="#requirement-1-why-should-i-use-this-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing that really struck me about different projects was
how far each project made someone read until they could figure out
whether the project was right for them.  In many of the projects that
I looked at, instructions on how to install the project preceded
an attempt to answer that question.  That is in the approximately
60% of the projects that provided any attempt at that answer.
To me, the absence of any answer to the question of “why?” did not make
sense.&lt;/p&gt;
&lt;p&gt;That was when I focused on what this requirement meant to me.  The
first thing that the successful answers to that question did for
me was to present the reader with a short introduction paragraph
at the start of the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#pymarkdown"&gt;readme.md file&lt;/a&gt;.
Those projects presented a good, simple paragraph to allow the
reader to determine if the foundational elements of the project
met their criteria or not.  If it does not meet their needs,
no harm, no foul, only taking up the minimum amount of time needed
to help the reader figure that out.&lt;/p&gt;
&lt;p&gt;If their criteria were met, the next part of that section needed
to provide information to the reader on why that project is better
than other similar projects at accomplishing their task.  At this
point, the reader is hooked and wants to learn more about the
project.  I did observe that the good projects provided readers with
a good selection of bullet points about the project.  It did not
need to be anything heavy, just enough to convince the reader that
they the project is serious and encourage them to read on.&lt;/p&gt;
&lt;h4 id="its-essentially-an-elevator-pitch-conversation"&gt;It’s Essentially An Elevator Pitch + Conversation&lt;a class="headerlink" href="#its-essentially-an-elevator-pitch-conversation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Basically, to use business terminology, I needed to prepare an
elevator pitch followed by a two-minute conversation.  Getting the
reader into the “elevator” was them getting to the project
website in the first place.  I then had between three
and five sentences while they are “in the elevator” to either
gain their attention or to have them politely decline.  If I
gain their attention, I then have a quick “two-minute conversation”
with them to convince them to talk about it some more before
they continue on to where they were going.  Anything more
than that is imposing on them, which will negatively affect
their interest on your conversation.&lt;/p&gt;
&lt;p&gt;While this may not seem accurate to some, I encourage readers to try
this experiment for themselves.  Go to the
&lt;a href="https://www.reddit.com/r/coolgithubprojects/"&gt;Cool GitHub Projects sub-reddit&lt;/a&gt;,
and look for three cool projects to get interested in.  Pay
attention to how much reading you do of the project documentation,
knowing that I have asked for three projects to be selected.&lt;/p&gt;
&lt;p&gt;If you follow the norm, you want to do a thorough job, but
you also want to be efficient.  You want the information that
helps you make that decision up front as much as possible.
You want the most relevant facts laid out in plain language
so you can easily digest them.&lt;/p&gt;
&lt;p&gt;If the reader is still paying attention, it is then time
to take them to the next step: the test drive.&lt;/p&gt;
&lt;h3 id="requirement-2-how-can-i-take-a-test-drive"&gt;Requirement 2: How Can I Take A Test Drive?&lt;a class="headerlink" href="#requirement-2-how-can-i-take-a-test-drive" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I hope that I do not sound like a used car salesman, but the
mindset that I had when getting past the “Am I Interested?”
part was pretty close to what I have experienced buying
a car.  Assuming that I was interested enough in the GitHub
project to spend time trying to get it working on my machine,
I needed a quick and easy way to install it and verify that
the simple case works.&lt;/p&gt;
&lt;p&gt;To be blunt, when I try out a GitHub project, I just want to
see any result, no matter how simple.  Fine tuning and more
complex cases can come later.  I know that if I cannot get a
quick confirmation that the project works on my machine in
the simplest case, I know that the more complex cases are
already a no-go.
Essentially, I want to “kick the tires” and “take it out
for a spin” and see if it works as advertised.  If not, I
want to move to the next project on as quickly as possible.
Depending on my interest in a project, I might be willing
to ask one or two questions, but that is usually the limit
of what I am willing to invest in an, in my mind, unproven project.&lt;/p&gt;
&lt;p&gt;For the PyMarkdown project, that meant adding a couple of different
sections.  The first section was the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#requirements"&gt;Requirements section&lt;/a&gt;
to specify that the project needs Python 3.8 or later to function.
While I do not find version 3.8 or higher to be a deal breaker, some people
might, so get it out of the way quickly.  Following that, I want a simple
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#installation"&gt;Installation section&lt;/a&gt;
with as few steps as possible.  It does not have to install and parse
everything, but it does have to install and parse something
right away.&lt;/p&gt;
&lt;p&gt;I then want to follow that up with what I see as the “Test Drive”.
For me, this section is the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#how-to-use"&gt;How To Use section&lt;/a&gt;,
teeing up the execution of the
simple case that is going to show the project working. Keeping
the car analogy in place, if I am driving an unfamiliar car,
I want to know where everything is in case something goes
wrong during the test drive.  That led me to add the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#if-you-get-stuck"&gt;If You Get Stuck section&lt;/a&gt;
to help the reader with the help functionality.&lt;/p&gt;
&lt;p&gt;With everything else already in place, I added the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#prerequisites"&gt;Prerequisites section&lt;/a&gt;
to help set the stage for the test drive.  Almost every time
I have test driven a car, the salesman will set expectations for
the drive and how it will proceed.  For the project, this
section provides two slightly different examples of Markdown text,
one that emits violations and one that does not.  These examples
were not very complicated, but just complicated enough to show the
project working properly.&lt;/p&gt;
&lt;p&gt;Finally, with everything else set up, it was time for the test
drive.  This meant adding the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#basic-scanning"&gt;Basic Scanning section&lt;/a&gt;
to allow the user to test the project.  This section has only
two goals.  The first is to show the PyMarkdown linter working against the
example files created in the Prerequisites section.  The second is
to provide sample output to allow the user to verify that everything
is installed and working properly.  Nothing more, nothing less.&lt;/p&gt;
&lt;p&gt;For me, this was the path to making sure that the
reader can get the project running on their system.  And I
believe that the documentation will get the reader to that
same point as quickly as possible.  Requirement met.&lt;/p&gt;
&lt;h3 id="requirement-3-turning-it-up-to-eleven"&gt;Requirement 3: Turning It Up To Eleven&lt;a class="headerlink" href="#requirement-3-turning-it-up-to-eleven" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Despite the various origin of the phrase
&lt;a href="https://en.wikipedia.org/wiki/Up_to_eleven"&gt;“turning it up to eleven”&lt;/a&gt;,
the meaning fit right into what I wanted to convey.  At this
point in the documentation, the documentation has captured the
reader’s attention and (hopefully) those readers have the
project installed and running on their system. This meant
I needed to transition from showing the project working
on a simple example to showing the project working on a more
complex example.  At the same time, I must strike a
balance between presenting a more complex example and not
overloading the reader and scaring them away.  After some
though, I determined that I needed to focus on between
two and four of the most important features or concepts
in this next step.&lt;/p&gt;
&lt;p&gt;As the PyMarkdown linter has a solid set of features, I needed
to find some way to reduce the list of features into that small
set of features that I believe are the most important features
to show someone who has just installed the project.
Seeing as I have been with the project
from the very beginning, this was no easy feat.  I needed to
try and remove my own biases and come up with no more than
three features that I hoped were indispensable to most
new users.&lt;/p&gt;
&lt;p&gt;After scribbling down all the features, some patterns started
to emerge.  One very interesting pattern emerged when I
started drawing lines from each feature to any other feature
that it depended on.  When all was said and done, there
were three features or concepts at the center of everything
else: rules and rule plugins, rule violations and their format,
and the ability to enable and disable rule plugins.&lt;/p&gt;
&lt;p&gt;It was at that point that I knew that I had the three
sections that I wanted to focus on in the main &lt;code&gt;readme.md&lt;/code&gt; file.
As the main purpose of the linter was to allow rules be
run against Markdown documents, the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#rules"&gt;Rules section&lt;/a&gt;
was an obvious starting section.  From there, I felt it was
important to relate to the user how any rule violations are
reported and how to read them, which lead to my creating the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#rule-violation-format"&gt;Rule Violation Format section&lt;/a&gt;.
Then, the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#basic-configuration"&gt;Basic Configuration section&lt;/a&gt;
was created to provide an introduction to configuration by showing
the user how to enable and disable rules.&lt;/p&gt;
&lt;p&gt;My goal for these sections was not to cover everything, but
to specifically cover the basic concepts that a new user needs
to get the project up and running effectively.  With those
bases covered, I had to make another decision: how do I
deal with the remaining concepts about the project?&lt;/p&gt;
&lt;p&gt;Going back to the GitHub projects that I thought did a
good job on documentation, I was able to make another observation.
Those projects were good at drawing a line between what
to include in the main &lt;code&gt;readme.md&lt;/code&gt; file and what to delegate
to other documents.  When I thought about it, the logic there
made a lot of sense to me.  Keep the &lt;code&gt;readme.md&lt;/code&gt; file limited to
the most important concepts, and delegate the other concepts
to other files.&lt;/p&gt;
&lt;p&gt;To that extent, I grouped the remaining concepts into 3 main
groups:
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#advanced-scanning"&gt;Advanced Scanning&lt;/a&gt;,
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#advanced-configuration"&gt;Advanced Configuration&lt;/a&gt;, and
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#advanced-rule-plugins"&gt;Advanced Rule Plugins&lt;/a&gt;.
For me, this struck a good balance because I was still able
to show interested readers that there was more to the project,
but at the same time, not overload them.&lt;/p&gt;
&lt;p&gt;With all the main concepts addressed, there was just one
requirement left to work on.&lt;/p&gt;
&lt;h3 id="requirement-4-wrap-it-up-nicely"&gt;Requirement 4: Wrap It Up Nicely&lt;a class="headerlink" href="#requirement-4-wrap-it-up-nicely" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At this point, if I have done my job right, I have gained the reader’s
attention, they have at least a simple example running on their
machine, and they have possibly played around with some of the
more advanced stuff.  For those readers who became users of
the project, I needed to do one more thing.
Wrap the &lt;code&gt;readme.md&lt;/code&gt; file up in a nice package.&lt;/p&gt;
&lt;p&gt;I do not mean “wrap up” in any dismissive way, far from it.  But
as someone who looks at various projects, if I have set it up on
my own machine and invested time in verify that it works, there
is one more thing I want to see.  I want to see that the project
is not abandoned and not going to go away overnight.&lt;/p&gt;
&lt;p&gt;Basically, I want a couple of sections where I can ask questions
and know what is going on with the project. I also want to
know it is still going to be around in the future if I have
any more questions or feature requests.  It was time to try
and help with those questions.&lt;/p&gt;
&lt;h4 id="dealing-with-questions"&gt;Dealing With Questions&lt;a class="headerlink" href="#dealing-with-questions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The first section that I added to start addressing this concern
was the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#open-issues-and-future-plans"&gt;Open Issues and Future Plans section&lt;/a&gt;.
From my viewpoint, I want to know what open issues are present
with a project that I am investing my time in, and I also want
to know where the project creators plan on taking the project.
After all, I need to invest some of my own time to get the
project working for my needs.  It helps for me to know if the
creator’s directions are aligned with my needs or not.&lt;/p&gt;
&lt;p&gt;From there, I needed to start answering questions that any
users of the project had about the project.  For me, that
started with the
&lt;a href="ddd"&gt;When Did Things Change section&lt;/a&gt;
that links to the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/changelog.md"&gt;changelog.md file&lt;/a&gt;.
For the most part, when I am looking posing questions about a
project, over 95% of those questions are either about
“how do I do X?” or “what changes?”.
This section will hopefully help answer that second question
for the users.&lt;/p&gt;
&lt;p&gt;Then, if that user still has questions, the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#still-have-questions"&gt;Still Have Questions? section&lt;/a&gt;
points them to the Frequently Asked Questions (FAQ) document.
While that document will not resolve every remaining question, over time
it should answer the most asked questions before having them
raised as more serious issues.  While not perfect, if I invest
time wisely into this document, it can reduce the number of
questions being asked in other forums.&lt;/p&gt;
&lt;p&gt;Assuming that the user still has a question after consulting the
information in the previous sections, the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#contact-information"&gt;Contact Information section&lt;/a&gt;
is there to help them understand how to get in touch with the team.
Even though that team is currently just me, I feel that it is important to
be clear on what kind of contact the user can have with me and
in what format.  It is in this section that I provided a link to
the GitHub issues tracker, suggesting its use for both bug fixes
and feature improvements.  Finally, if the user’s question is
more centered around contributing to the project, there is a
request to contact me to talk about it.&lt;/p&gt;
&lt;h4 id="how-can-someone-contribute"&gt;How Can Someone Contribute?&lt;a class="headerlink" href="#how-can-someone-contribute" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;That brings me to the section with
&lt;a href="https://github.com/jackdewinter/pymarkdown#instructions-for-contributing"&gt;Instructions For Contributing&lt;/a&gt;.
While this is still currently under improvement, I thought it
was important to let people know that I welcome solid contributions
that help the project along.  I also know that after 18+ months
working on this by myself, accepting any offered help is going to
be a gradual process.&lt;/p&gt;
&lt;h4 id="the-dull-stuff-acknowledgements"&gt;The Dull Stuff: Acknowledgements&lt;a class="headerlink" href="#the-dull-stuff-acknowledgements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;After everything else was taken care of, the projects that
really stood out to me were the ones that took the time to thank
various people who helped the project, either directly or indirectly.
Nothing important is ever developed in a vacuum, and the wise
people talk about who helped them get to that point.&lt;/p&gt;
&lt;p&gt;And to me, as I have said on other subjects, it just made sense.
The people I talk about in the
&lt;a href="https://github.com/jackdewinter/pymarkdown#acknowledgements"&gt;Acknowledgements section&lt;/a&gt;
took time to help me out.  The least I can do is say thank you
in my own way.&lt;/p&gt;
&lt;h2 id="the-outline"&gt;The Outline&lt;a class="headerlink" href="#the-outline" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After all that research, this is where I landed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why Should I Use This Project?&lt;ol&gt;
&lt;li&gt;Provide short paragraph to determine if the project is for them.&lt;/li&gt;
&lt;li&gt;Provide advantages this project has over other projects.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;How Can I Take A Test Drive?&lt;ol&gt;
&lt;li&gt;Provide required Python version and installation instructions.&lt;/li&gt;
&lt;li&gt;Provide details on how to get help if they get lost.&lt;/li&gt;
&lt;li&gt;Provide a simple, no frills example and show the project working.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Turning It Up To Eleven&lt;/li&gt;
&lt;li&gt;Wrap It Up Nicely&lt;ol&gt;
&lt;li&gt;Dealing With Questions, Bug Reports, and Feature Requests&lt;/li&gt;
&lt;li&gt;How Can Someone Contribute?&lt;/li&gt;
&lt;li&gt;Acknowledgements&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="filling-in-the-blanks"&gt;Filling In The Blanks&lt;a class="headerlink" href="#filling-in-the-blanks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the requirements sketched out and the sections laid out, it
was somewhat easy to start filling in the blanks.  To be honest,
I was eager to get to work on replacing the placeholders I had
in my mind with actual text.&lt;/p&gt;
&lt;h3 id="first-pass"&gt;First pass&lt;a class="headerlink" href="#first-pass" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My goal for the first pass was to get a good start on the &lt;code&gt;readme.md&lt;/code&gt;
file.  It took me a while to get working on that. But once I started,
I quickly gained momentum.  As I thought of things to add to the
documentation, I put them into one of two categories.  If the concept
fit into one of the three basic categories, I added it to the &lt;code&gt;readme.md&lt;/code&gt;
file and started filling it out.  If did not, I made sure to put
it in one of the other documents, knowing that I would
get around to it in a subsequent pass.&lt;/p&gt;
&lt;p&gt;And just to set things straight, yes, I initially added some extra sections
to the main &lt;code&gt;readme.md&lt;/code&gt; file.  If I am being honest with myself, I believe
that I thought it was more important to capture the essence of the concept
I was working on while it was clear in my head.  I knew that I was going to
be making multiple passes through the documentation, so it would find its
way to the right section of the right document by the end of the process.&lt;/p&gt;
&lt;h3 id="second-pass"&gt;Second Pass&lt;a class="headerlink" href="#second-pass" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I focused my first pass on the main &lt;code&gt;readme.md&lt;/code&gt; file, I moved my
focus on the second pass to the other documents, more specifically the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#advanced-scanning"&gt;Advanced Scanning&lt;/a&gt;
document and the
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/readme.md#advanced-configuration"&gt;Advanced Configuration&lt;/a&gt;
document.  While it may seem boring, I just kept my head down
and worked on expanding the existing point form notes in each
document into a full-fledged documentation section.&lt;/p&gt;
&lt;p&gt;It was during the creation of that documentation that I
looked at various parts of the project and found a couple
of little issues:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- when scanning a directory, is it always recursive?
  - can have switch for recursion?
- make sure configuration versions of
  - --add-plugin
  --strict-config       throw an error if configuration is bad, instead of assuming default
  --stack-trace         if an error occurs, print out the stack trace for debug purposes
  --log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG}
                        minimum level required to log messages
  --log-file LOG_FILE   destination file for log messages
- clean up
  pipenv run python main.py --strict-config -s log.level=$#1 scan examples
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was nothing serious, but they were just inconsistencies that I
was able to find by taking a wholistic look at the project through
the lens of writing the project documentation.  None of those
issues were showstoppers, but it was still good that I caught
them when I did.&lt;/p&gt;
&lt;p&gt;I was confident that I could clean those issues up quickly, so I
started doing a a reading pass through the documents, from start
to end, looking for wording that I could change.  My personal writing
process is simply to keep on reading and editing the document until
it feels right, so this was part of my normal process.  As such,
it was easy to go through the documents looking for things that
I felt were out of place, and I made quick work of that task.&lt;/p&gt;
&lt;p&gt;So, by the end of the second pass, I felt things were progressing
nicely.  Sure, I had some small issues to fix, and more revisions
were surely on their way, but I had the bulk of the documentation
written.  The next pass, that was going to start to be more
fit-and-finish work.&lt;/p&gt;
&lt;h3 id="third-pass"&gt;Third Pass&lt;a class="headerlink" href="#third-pass" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not being one that likes having pending issues hanging over my
head, when I started my third pass, resolving those found
issues were my number one priority.  Part of that was
“scratching that itch” and part of that was logic.  I was
sure that I needed to add a new command line flag, and that
was going to require new documentation.  Might as well do
that all at once.&lt;/p&gt;
&lt;p&gt;After about two hours of work, those issues were all resolved,
and with another hour of work, the documentation for the
new recursive flag was also complete.  From there, it was
just a series of reading passes over the documents, each
one looking for something slightly different.&lt;/p&gt;
&lt;p&gt;The first one was a bit more fit-and-finish work, making
sure that I was selecting saying what needed to be said
in each section.  Following that, the second reading pass
was slightly different in that I was focusing more on
selecting the right words to convey the ideas in that
section.  As I believe both of those concepts are
important, that is having the right ideas expressed
in the right place and using the right words to convey
that idea, I wanted to take the time to distinctly
focus independently on each one.&lt;/p&gt;
&lt;p&gt;With more confidence that I had the right content and
mostly the right words, I then proceeded to look through
the documents for spelling and grammar errors.  I am
not 100% sure that I found all the errors, but I am
confident that I found most of them.  And for that pass,
it was good enough for me.&lt;/p&gt;
&lt;h3 id="fourth-pass"&gt;Fourth Pass&lt;a class="headerlink" href="#fourth-pass" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is how I could tell that I was close to the end of writing
the documentation: I was fiddling over the words and the ordering
of sentences.  It was a familiar feeling. It is something that
happens each week as I write my article, so it was an easy sign
to spot.  I knew that I could probably spend years trying to
find the perfect combination of words, so I knew I had to stop
there.  It took a bit of effort, but I stopped editing the
documents.&lt;/p&gt;
&lt;!--- pyml disable-next-line no-trailing-punctuation --&gt;
&lt;h2 id="and-that-leaves-me"&gt;And That Leaves Me…&lt;a class="headerlink" href="#and-that-leaves-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At least for now, I stopped.  Now that I have a finished code
base and finished documentation, I want to give it all a couple
of days to sit before I run some extra tests and reread the
documentation.  I do not expect any of the tests to fail, but
I want to run them to be thorough.  Just to be sure.&lt;/p&gt;
&lt;p&gt;I also do not expect any changes to the documentation,
but I want to give the documentation at least 48 hours to clear
out of my head before I look at it again.  While my weekly articles
are written more directly and in a shorter duration, all the other
articles that I write get the same mandatory 48 hour cool down
period before my final pass.  I am not
sure if it is thoroughness or paranoia, but it is my process. I
just feel better knowing that I did my final documentation pass
with a clear head, hopefully removed from all the changes and
prior versions of the documents.&lt;/p&gt;
&lt;p&gt;And where does that leave me?  Unless there are any very
stunning things that I find, it means there is a good chance
that I can do the initial release this week!&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was a long time getting to this point, but I was here.
From experience, I knew that I wanted to leave the project
alone for a bit to clear my head, but it was difficult. I
have spent a lot of time cleaning things up, and I wanted to
just take that extra step across the finish line.&lt;/p&gt;
&lt;p&gt;It was aggravating to stop, but I knew I had to.  I knew that
I need to be objective and clear in my decision that everything
looks right, and I cannot do that until I clear my head.
Yes, I am annoyed at myself, but I know it will pass.&lt;/p&gt;
&lt;p&gt;After all, chances are that I am going to do the initial
release of the project this next week, right?&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After my self-imposed 48 hour cool off period, it was going to be
time to get the release ready.  Stay tuned.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:mostly"&gt;
&lt;p&gt;To be honest, I do forget sometimes to do this step sometimes. But not often. &lt;a class="footnote-backref" href="#fnref:mostly" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Dotting The Is</title><link href="https://jackdewinter.github.io/2021/05/17/markdown-linter-road-to-initial-release-dotting-the-is/" rel="alternate"></link><published>2021-05-17T00:00:00-07:00</published><updated>2021-05-17T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-05-17:/2021/05/17/markdown-linter-road-to-initial-release-dotting-the-is/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/10/markdown-linter-road-to-initial-release-fine-tuning-plugins/"&gt;last article&lt;/a&gt;, I talked about
the work I did to fine tune the plugins and to start documenting them for the release.
With the plugin rules fine-tuned and notes for them in hand, I proceded to
resolve some final issues that were in the way of a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/10/markdown-linter-road-to-initial-release-fine-tuning-plugins/"&gt;last article&lt;/a&gt;, I talked about
the work I did to fine tune the plugins and to start documenting them for the release.
With the plugin rules fine-tuned and notes for them in hand, I proceded to
resolve some final issues that were in the way of a clean release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The list is definitely getting shorter.  My goal for this stretch was to get every
item in the issues list resolved except for the documentation task.  I wanted to
get a good start on that task, but I knew that it would take more than a couple
of days to get the documentation into a state that I would feel good with. After
all, if it took me almost 18 months to get the code to the initial release state,
I was not going to get the documentation done overnight.  However, I could pave the
way for me to focus solely on that documentation for the next week!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/4f6c17ce2d5e71dd6125dcee6574c9bd9db5c8ac"&gt;09 May 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/747037de89990253892dbdbb4600f237b5fc91d7"&gt;16 May 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="open-source-software-projects-and-your-life-the-update"&gt;Open-Source Software Projects And Your Life: The Update&lt;a class="headerlink" href="#open-source-software-projects-and-your-life-the-update" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am going to share a bit of a secret with you.  As someone who has
Autism, I generally get between two and four headaches a week.  Sometimes
they are from too many people and sometimes they are from old injuries
done in my youth.  As such, I rarely have a week with less than two
headaches.  While working on the project in the last three weeks,
I have had one long continuous three-week headache, with only brief
episodes of peace during that time.&lt;/p&gt;
&lt;p&gt;That is, until Sunday, which was yesterday.  I am not sure if it was me taking care of
myself or if the headache had just run its course. I do not care.  The
fact that I woke up yesterday with no headache and went to bed
yesterday with no headache, with no headache between those two points.
That was enough for me.&lt;/p&gt;
&lt;p&gt;And it showed on Sunday when I did some work on the PyMarkdown
project followed by picking up the notes for this article and
working on it.  For both tasks, I was able to figure things more
clearly and more easily, allowing me to be more concise in what I wanted to
accomplish.  After three weeks of pain and fog, it was a blessing.&lt;/p&gt;
&lt;p&gt;I would be lying if I did not admit that sometimes it was a bit of an
uphill battle for me emotionally.  I know that I am very close to
the project’s initial release and I just wanted to do “five more
minutes” of work to get me that much closer to that goal line.  However,
in my experience,
rarely have I ever heard “five more minutes” and have it mean exactly that.
Usually it means “until I get this done”.  And if I am being honest,
I know for me that would have meant that five minutes would have
blown up to at least 30 minutes, if not a couple of hours.&lt;/p&gt;
&lt;p&gt;It was not always easy.  But making sure that I took the time to
deal with life and make sure that I was working on the project
for the right reasons and in the right mindset was the right
thing for me to do.  Yes, I know I am behind in my plans for
the initial release.  But I also know that I can finish the
remaining tasks off with a positive attitude and momentum.&lt;/p&gt;
&lt;p&gt;And for me, doing things (my version of) right is one of the
reasons that I started working on my own projects.&lt;/p&gt;
&lt;h2 id="atx-headings-part-2"&gt;Atx Headings, Part 2&lt;a class="headerlink" href="#atx-headings-part-2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having forgotten to run the Black code formatter before the last couple of
commits, I executed the formater on the code base with roughly the expected
number of reformats present in the code.  Doing some more digging into the
work I just completed on Atx Headings, I found a couple of issues.&lt;/p&gt;
&lt;p&gt;When I fixed the Atx Heading parsing to not include tab characters as
part of the allowed heading whitespace after the starting hash characters,
I had neglected to make the same change for the ending hash characters.
As such, when I added four new scenario tests to verify that only
starting and ending space characters were allowed, the after tests
both failed.&lt;/p&gt;
&lt;p&gt;It did not take me long to single out the responsible code.
Having recently been in that part of the code, I knew that
there was a good chance that the error was in the recent work
to deal with tab characters and space characters in Atx Heading
tokens.  With that knowledge, it was less than five minutes
before I was able to change this code to handle the end of an
Atx Closed Heading whitespace collection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;extracted_whitespace_before_end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace_from_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;into the end of an Atx Closed Heading space collection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;non_whitespace_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_backwards_while_character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;non_whitespace_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;extracted_whitespace_before_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that fix in place, all four scenario tests were passing.
I did double check my scenario tests to see why I had missed this,
with little insight gained.  My guess is that I was just eager
to get things done and missed one part of the solution.
I did find it before it was released, so I was not too upset.
But I knew I needed to make sure I tempered my “need for speed”
against my need to do things properly.&lt;/p&gt;
&lt;p&gt;And it was with that that I knew I was now on to the big issue
that I had been thinking about in the back of my mind for weeks:
pragmas.&lt;/p&gt;
&lt;h2 id="pragmas"&gt;Pragmas&lt;a class="headerlink" href="#pragmas" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a long history in the software development industry,
&lt;a href="https://docs.microsoft.com/en-us/cpp/preprocessor/pragma-directives-and-the-pragma-keyword"&gt;pragmas&lt;/a&gt;
are not something that developers regularly see these days.  Historically,
pragmas provide additional information to a specific compiler during
compile time, giving the compiler extra context to consider.
While more famous in the C and C++ languages, the
concept of pragmas has often been borrowed by linters and analyzers to allow
the source document to provide additional information to guide
on how that document is to be analyzed.  By default,
if the process does not understand a given pragma, it is ignored.
I believe this is one of the reasons that most pragmas look line
inline comments or something similar.&lt;/p&gt;
&lt;p&gt;One of the benchmarks I have for the PyMarkdown project is how
well and how quickly it analyzes the directories containing the
Markdown version of the articles that make up my blog.  Up until
I added support for Front-Matter tokens, it was rather messy.
However, with that being implemented, a lot of the failures due
to Front-Matter Markdown being misinterpreted was gone.  I was
now able to make some serious progress on dealing with those rule
violations that were showing up when I scanned my blog.&lt;/p&gt;
&lt;p&gt;Out of the 27 errors that were being reported by scanning
the directory, only 12 of those were what I would consider real
errors.  While the other 15 errors were being properly reported,
except for 2 instances of a parser error that I
uncovered, the remaining 13 were “allowable” failures. These
failures were allowable because I wanted to make the conscious
choice to ignore the project’s scan results for those 13 separate
instances.  The only problem was that I did not have a way
to mark those errors as being “allowable”.  That is where
pragmas came in to play.&lt;/p&gt;
&lt;h3 id="starting-with-a-good-design"&gt;Starting With A Good Design&lt;a class="headerlink" href="#starting-with-a-good-design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While there are times that I feel it is okay to jump in to writing
code, those times are few and far between.  Even if the design is
some scribbles on paper or some notes in a readmd.md file, I have
always found benefit in taking the time to work through the base
scenarios involved with a given project.  After all, the least
costly software change to make is one that has not been coded yet.&lt;/p&gt;
&lt;p&gt;This design was no different.  Starting with scenario tests, I
created a set of new scenario tests that started to fill out my
design.  Like other linters, to keep the readability high,
I decided on a simple pragma indicator and format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nv"&gt;pyml&lt;/span&gt; &lt;span class="nv"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt; &lt;span class="nv"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;multiple&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;space&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;atx&lt;/span&gt;&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The entire pragma would be wrapped in a comment.  That way, if there
was something only slightly wrong with the pragma, the parser would
consider it an HTML comment section, and treat it accordingly. Within
the pragma, the &lt;code&gt;{space}pyml{space}&lt;/code&gt; sequence would kick off the
pragma, something that was likely not to be repeated elsewhere.&lt;/p&gt;
&lt;p&gt;At that point, all that was left was the command structure.  Looking
at various other linters, they all seemed to have 8 or more commands
for specifying regions, saving state, restoring state, and all that.
While they probably have reasons for all those commands, I wanted to
keep things simple.  From my experience, I never use those other
commands because I only want to suppress the failure on the next
line.  I am not sure if everyone will feel the same way, but it was
a good place to start.&lt;/p&gt;
&lt;p&gt;With the comment line and command structure done, it was on to more
practical issues.  It made sense to me to search and store pragmas
in a manner independent of the tokenization.  For me, pragmas and
tokens are different concepts with different responsibilities. Tokens
explain what the document is while pragmas provide instructions to
the rules engine on what rules to apply (or not apply) and when.
Given those restrictions, it made sense to add code to the
Container Processor’s &lt;code&gt;parse_line_for_container_blocks&lt;/code&gt; function.
By adding the code there, the decision on whether to interpret
a line normally or as a pragma line could be made without affecting
anything else in the parser.&lt;/p&gt;
&lt;p&gt;With a collection of pragmas, I now needed someplace to store them.
Creating a new &lt;code&gt;PragmaToken&lt;/code&gt; class allowed me to add the pragma
information at the end of token stream for storage, but also allow
the token to be easily extracted.  Then, in the &lt;code&gt;PluginManager&lt;/code&gt; class, I
could add code to take the data within the &lt;code&gt;PragmaToken&lt;/code&gt; and
parse it for correctness.  Assuming a line was a correctly
formatted pragma, I could then put it into a simple format that
could be referenced by the &lt;code&gt;log_scan_failure&lt;/code&gt; function to
determine if a failure should be logged or not.&lt;/p&gt;
&lt;p&gt;Working things through on paper and with sample code, I was quickly
able to tighten that design down some more.  But in the end, the
design was pretty thought out, with some good tests written before
one line of feature code was written.&lt;/p&gt;
&lt;h3 id="implementation-detection"&gt;Implementation - Detection&lt;a class="headerlink" href="#implementation-detection" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After all that focus on the design of the feature, there really
were not many surprises that I encountered.  A new &lt;code&gt;__look_for_pragmas&lt;/code&gt;
function was added to the &lt;code&gt;ContainerProcessor&lt;/code&gt; class, only activating
if an HTML comment was found with no whitespace before it and
without being contained within a Block Quote element or a List element.&lt;/p&gt;
&lt;p&gt;From there, there was some simple code to determine if we have a
pragma, but not verifying that a valid pragma was present:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;was_extended_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;PragmaToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pragma_alternate_prefix&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;PragmaToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pragma_alternate_prefix&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;was_extended_prefix&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;PragmaToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pragma_prefix&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;remaining_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;PragmaToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pragma_title&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PragmaToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pragma_suffix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;index_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;was_extended_prefix&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;position_marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pragma_lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index_number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One of the small surprises that I came across during my design phase
was
that some of the parsers have plugins that support a concept of
a “hidden” comment.  These are HTML-style comments that begin
with a sequence of &lt;code&gt;&amp;lt;!---&lt;/code&gt; instead of &lt;code&gt;&amp;lt;!--&lt;/code&gt;.  While these
constructs are still valid comments, they are easy to spot and
therefore easy to remove when parsing the document.  By supporting
both a normal comment and this hidden comment for pragmas, I
could enable people to write pragmas that would not show up
in the rendered HTML output of any parser that supports them.
It was a small change, but a good one.&lt;/p&gt;
&lt;p&gt;Other than that, the rest of the code simply
looking for something that looks like a comment that starts
with some whitespace, the text &lt;code&gt;pyml&lt;/code&gt;, and some more whitespace.
If it finds it, it adds it to the &lt;code&gt;pragma_lines&lt;/code&gt; dictionary using the
line number as the index.  Also returning &lt;code&gt;True&lt;/code&gt; in those cases,
the &lt;code&gt;ContainerProcessor&lt;/code&gt; can then discard that entire line without
affecting the token stream.  When all the tokens have been collected,
if the &lt;code&gt;pragma_lines&lt;/code&gt; dictionary contains any elements, a &lt;code&gt;PragmaToken&lt;/code&gt;
is created with that dictionary and added to the token stream.&lt;/p&gt;
&lt;h3 id="implementation-compilation"&gt;Implementation - Compilation&lt;a class="headerlink" href="#implementation-compilation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The compilation step was also relatively straightforward.  In the &lt;code&gt;compile_pragmas&lt;/code&gt;
function, the keys for the &lt;code&gt;pragma_lines&lt;/code&gt; property of the &lt;code&gt;PragmaToken&lt;/code&gt;
instance are used to get an ordered list of the line numbers for
each pragma in the document.  Compilation of the pragmas was
achieved by simply iterating through each pragma in order.  For
each pragma, the function follows code like the detection code above,
the remaining information in the pragma becoming the command and
any relevant command data.&lt;/p&gt;
&lt;p&gt;Verifying the bulk of the commands was easy.  No command? Report
a pragma failure.  Command not understood? Report a pragma failure.
Missing pragma command data? Report a pragma failure.  If anything
did not look exactly right, just report an error.  Simple.&lt;/p&gt;
&lt;p&gt;That left the function to handle the &lt;code&gt;disable-next-line&lt;/code&gt; command, which
looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ids_to_disable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;command_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;after_command_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;processed_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ids_to_disable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;next_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;next_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_pragma_failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;scan_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;actual_line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Inline configuration command '{command}' specified a plugin with a blank id."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;next_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__all_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;normalized_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__all_ids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_id&lt;/span&gt;
        &lt;span class="n"&gt;processed_ids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalized_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_pragma_failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;scan_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;actual_line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Inline configuration command '{command}' unable to find a plugin with the id '{next_id}'."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;processed_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__document_pragmas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;actual_line_number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processed_ids&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The small change from the design here was that I wanted to be
able to collapse the rule ids and the rule aliases down into
the rule ids.  To that extent, I changed local references of
&lt;code&gt;all_ids&lt;/code&gt; in the rule registration code to &lt;code&gt;self.__all_ids&lt;/code&gt;
so that the pragma compiler could make use of them.&lt;/p&gt;
&lt;p&gt;Other than that, the command expects a comma separated list of
ids and aliases to follow the &lt;code&gt;disable-next-line&lt;/code&gt; command. If
there is an empty id, it reports a pragma failure.  If not,
it looks for it in the &lt;code&gt;self.__all_ids&lt;/code&gt; dictionary, which
is a map from any valid identifier (id or alias) to the
plugin object.  If it is found in that dictionary, the
&lt;code&gt;normalized_id&lt;/code&gt; variable is set and added to the set of
ids to disable.  If not found, it reports a pragma failure.&lt;/p&gt;
&lt;h3 id="implementation-suppressing-the-failure"&gt;Implementation - Suppressing the Failure&lt;a class="headerlink" href="#implementation-suppressing-the-failure" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After the rest of the work on this feature, the suppression part
was very simple.  The last two lines of the last example are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;processed_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__document_pragmas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;actual_line_number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processed_ids&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To keep things simple, the only existing command suppresses one
or more rules being triggered on the following line.  Therefore,
one is added to the line number of the pragma, and the set
&lt;code&gt;processed_ids&lt;/code&gt; is stored in the dictionary &lt;code&gt;self.__document_pragmas&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, the &lt;code&gt;log_scan_failure&lt;/code&gt; function was altered to add this
code at the beginning:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__document_pragmas&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__document_pragmas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;id_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__document_pragmas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;rule_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rule_id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rule_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;id_set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, if there are compiled pragmas and the line number of the
log scan failure is in the dictionary of pragmas, further processing
is required.  The &lt;code&gt;rule_id&lt;/code&gt; of the failure that is being reported
is looked for in the &lt;code&gt;id_set&lt;/code&gt; of ids, and if there is a match,
then the reporting of that failure is aborted.&lt;/p&gt;
&lt;h3 id="wrap-up"&gt;Wrap Up&lt;a class="headerlink" href="#wrap-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To be honest, I was underwhelmed when I got to the final part of
the implementation.  After all that work, it was less than 10 lines
that it took to implement the part where the log scan
failure was suppressed.  The hard work was making sure that I
had good scenario tests from the beginning.&lt;/p&gt;
&lt;p&gt;And to spread some good word on Test Driven Development, let
me also supply some extra information on why I like scenario
tests so much.  While it is nice to have a solid design, I feel
that those scenario tests help me pull a design from the
abstract world into the concrete world.  Everyone can argue
about what was really meant when I say “data store”, but
if I actually write a scenario test that sets up a data store,
it makes the entire concept and usage of the data store more
real.  For me, that helps me ground myself and my designs.&lt;/p&gt;
&lt;p&gt;After all that work, I then was able to go through the remaining
failures and determine if any of those failures were “allowable”.
By allowable, I mean that I acknowledge the failure and allow
it to be suppressed because of a conscious decision.  By using
pragmas, I can then suppress those failures in a simple and
discoverable manner.  And by also supporting the &lt;code&gt;&amp;lt;!---&lt;/code&gt; sequence,
I can also make it so the pragma is hidden.  All good work!&lt;/p&gt;
&lt;h2 id="blank-lines-and-lists"&gt;Blank Lines and Lists&lt;a class="headerlink" href="#blank-lines-and-lists" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am not sure if I have talked about this small issue before, but
the parser has long had a slight glitch in how the tokens are
recorded for a Blank Line element that ends a List element.
When the Blank Line element occurs, a Blank Line token is recorded,
and it triggers the code that closes any existing List elements
or Block Quote elements.&lt;/p&gt;
&lt;p&gt;While the tokens come out in the correct order for Block Quotes tokens,
the Blank Line token always comes out before the end List token.
When testing what the HTML output would be for this scenario, everything
is fine because a Blank Line token is ignored by the HTML generator.
Even the end List token element is ignored, except for resetting the
list state.  As the only issue is the ordering of the tokens, and
not their output, this is a small glitch.&lt;/p&gt;
&lt;p&gt;As this is a small glitch, this is easily worked around.  Because
it is a small glitch with an easy workaround, I long ago decided
to keep things the way they were until something else forced me
to fix this issue.  While it only caused me to put this issue at
the top of the issues list, it was enough to cross the line that
I had drawn.  The reason?  Rule md022.&lt;/p&gt;
&lt;h3 id="discovery"&gt;Discovery&lt;a class="headerlink" href="#discovery" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of my standard “smoke” tests is to use the project to scan the
directories containing the Markdown for my own blog’s articles.  As
the plugin rules got cleaned up, especially with the addition of pragmas,
the output for the scan got progressively cleaner.  With pragmas
in place, I was able to disable all the reported errors that were
legitimate errors, but errors that I decided to ignore.  That
left only two “real” errors. Those two errors occurred in two Markdown
documents with sections that looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;grouping&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;values&lt;/span&gt;? &lt;span class="nv"&gt;Extra&lt;/span&gt; &lt;span class="nv"&gt;code&lt;/span&gt; &lt;span class="nv"&gt;required&lt;/span&gt;.
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;hierarchy&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;nesting&lt;/span&gt;? &lt;span class="nv"&gt;Extra&lt;/span&gt; &lt;span class="nv"&gt;code&lt;/span&gt; &lt;span class="nv"&gt;required&lt;/span&gt;.

## &lt;span class="nv"&gt;Configuration&lt;/span&gt; &lt;span class="nv"&gt;Type&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;: &lt;span class="nv"&gt;Grouped&lt;/span&gt;

&lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;step&lt;/span&gt; &lt;span class="nv"&gt;up&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;simple&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;grouped&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;.  &lt;span class="k"&gt;While&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;step&lt;/span&gt; &lt;span class="nv"&gt;up&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The error that was being reported was a triggered rule md022, complaining
that there was not a single line above the Atx Heading element.  Looking at the
Markdown itself, it was clear there is a blank line before the Atx Heading.  At
that point I looked at the tokens being output for the Markdown document and it
was then that I noticed the reversed tokens described above. It was a lightbulb
moment.&lt;/p&gt;
&lt;h3 id="resolution"&gt;Resolution&lt;a class="headerlink" href="#resolution" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I mentioned above, the first thing I did was to add a new item to the issues list.
I did tell myself that one more issue related to this case of improperly ordered tokens was
enough to make me fix it, and I wanted to keep my word.&lt;/p&gt;
&lt;p&gt;In the meantime, I needed something to address the issue until after
the initial release.  Looking at the code, one small change seemed obvious
but dangerous.  So, I added the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_list_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;before the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__blank_line_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_leaf_end_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_container_end_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I felt it was dangerous because it was easy.  Hopefully not sounding
paranoid, it was too easy.  With that one change, any ending of a list
would not reset the rule’s &lt;code&gt;__blank_line_count&lt;/code&gt; member variable.&lt;/p&gt;
&lt;p&gt;To this date, I still think that the fix was too easy, and sometimes
play around with scenarios that I think can fail it.  Thinking more
deeply on this issue, I believe that my sense of the tokens not being
correct has crossed over into my sense that the fix is not correct.
Furthermore, I believe that the feeling is still present because I
know that the correct way to fix this is to fix the tokens, and not
to temporarily fix it.&lt;/p&gt;
&lt;p&gt;But whether I feel 100% comfortable with the decision to delay
the fixing of the tokens until after the initial release, I believe
that was the right decision to make.  And while I do not feel
comfortable with the temporary fix, I have to find peace in the
fact that I know it is going to be temporary.&lt;/p&gt;
&lt;h2 id="strict-mode-cleanup"&gt;Strict Mode Cleanup&lt;a class="headerlink" href="#strict-mode-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After implementing the strict configuration mode previously, there were still some loose
ends to clean up with its usage.&lt;/p&gt;
&lt;h3 id="reading-the-value"&gt;Reading The Value&lt;a class="headerlink" href="#reading-the-value" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The biggest “loose end” that I needed to deal with was
around initializing this mode from both the command line and configuration.
To get things working, I had placed the following code at the end of the &lt;code&gt;__set_initial_state&lt;/code&gt;
function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strict_configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enable_strict_mode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While that code was correct, there were a few things that were not quite right
with it.  To deal with that properly, I pulled that code out into its own function,
&lt;code&gt;__initialize_strict_mode&lt;/code&gt; and added some extra code before it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__initialize_strict_mode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;effective_strict_configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strict_configuration&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;effective_strict_configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_strict_configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_boolean_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"mode.strict-config"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_strict_configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enable_strict_mode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this in place, it was now following the command-config-default pattern
that I want for all project configurations.  Only if the command line flag is
set will the value of &lt;code&gt;args.strict_configuration&lt;/code&gt; be &lt;code&gt;True&lt;/code&gt;, so no need for
fancy comparisons against &lt;code&gt;None&lt;/code&gt; there.  If it is not set, then the code tries
to look for a value in the configuration, before adopting the default of
&lt;code&gt;False&lt;/code&gt;.  While the &lt;code&gt;False&lt;/code&gt; is not explicitly satisfied, it is the default
of the &lt;code&gt;get_boolean_property&lt;/code&gt; function.&lt;/p&gt;
&lt;h3 id="where-to-place-the-call"&gt;Where To Place The Call?&lt;a class="headerlink" href="#where-to-place-the-call" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the functionality localized to a function,
the next thing that I needed to focus on was the placement of the function call
to the new &lt;code&gt;__initialize_strict_mode&lt;/code&gt; function. It did not feel right in the
&lt;code&gt;__set_initial_state&lt;/code&gt; function, but I was indecisive on where to place it.
Working through some scenarios by the time-tested method of trial by
scribbles, I finally landed on placing the call to &lt;code&gt;__initialize_strict_mode&lt;/code&gt;
right before the call to &lt;code&gt;__initialize_logging&lt;/code&gt;.  The way I saw it, there
were safeguards and debugging around providing bad information to the
&lt;code&gt;__set_initial_state&lt;/code&gt; function, but not after that point.  Putting the
call after the logging call would leave the logging call unprotected, so
I placed it between the two.&lt;/p&gt;
&lt;p&gt;The only part that was left of that was to try and protect the strict
configuration mode itself.  It was when I went to add the &lt;code&gt;strict_mode=True&lt;/code&gt;
argument to the &lt;code&gt;get_boolean_property&lt;/code&gt; function call that I noticed
something.  I noticed that I had not specified the &lt;code&gt;strict_mode&lt;/code&gt; argument
for boolean properties.  It was not a difficult fix to make, but it caused
me to work through my design again, just to make sure I had it right that
time.&lt;/p&gt;
&lt;p&gt;With that part of the changes done, there was just one part left.&lt;/p&gt;
&lt;h3 id="handling-failures"&gt;Handling Failures&lt;a class="headerlink" href="#handling-failures" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Initially, I used the phrase “Handling Failures Properly” for
this section, but I had second thoughts about that.  With things coded
the way they were, the only thing that was left was to make some small
changes to the scenario tests to record the failures.  At that point,
the error was being reported properly, but I had to take an extra
step to validate it: setting the &lt;code&gt;--stack-trace&lt;/code&gt; command line option
on the test that was reporting the failure.&lt;/p&gt;
&lt;p&gt;The example that I mainly worked with was the &lt;code&gt;test_markdown_with_bad_strict_config_type&lt;/code&gt;
scenario test.  When I executed that test, the error that I got
back was a stack trace with this text near the end of the error’s
message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    raise ValueError(
        ValueError: The value for property 'mode.strict-config' must be of type 'bool'.
        )
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the right error was being raised, I thought the project should
handle the presentation of that error in a more readable fashion.&lt;/p&gt;
&lt;p&gt;To do that, I added the following snippet of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;formatted_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Configuration Error: {this_exception}"&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to the try/except/finally clause in the &lt;code&gt;__initialize_parser&lt;/code&gt; function
and in the &lt;code&gt;main&lt;/code&gt; function.  While not a substantial change, it covered
the two areas capable of raising these &lt;code&gt;ValueError&lt;/code&gt; instances.  With
that error covered, I was then able to print out a more readable, concise,
and actionable error message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Configuration Error: The value for property 'mode.strict-config' must be of type 'bool'.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With a couple of extra formatting changes, this task was completed.&lt;/p&gt;
&lt;h2 id="and-with-that"&gt;And With That&lt;a class="headerlink" href="#and-with-that" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There was only one item in the issues list section labelled
&lt;code&gt;Priority 1 - Must Solve Before Initial&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- command line and configuration documentation
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I did check in &lt;a href="https://github.com/jackdewinter/pymarkdown/commit/17304b3ef580ec71678c450ab6c2a1e669b4e90a"&gt;a commit&lt;/a&gt;
for the work I did during the week, I want to save talking about that work until
next week.  It was a task that was both very easy and very difficult to do, so I
want to make sure that I talk about it with some distance between working on it
and talking about it.  That and its only mostly done, and I would prefer to finish
it before talking about it.&lt;/p&gt;
&lt;p&gt;A good reason to check in next week though, no?&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Phew… while there are still items in the issues list, there is only
one issue remaining in the priority 1 section: documentation.  I am not
sure if this makes sense to anyone, but that is a big relief to me.
Having taken the time to document my work each week, I am not
worried about writing the documentation.&lt;/p&gt;
&lt;p&gt;Getting to this point has been a roller coaster ride, with both positive
and negative hills to climb along the way, but I feel good about this.
Sure, there are some little things that I need to fix here and there,
but I believe the code for the project is in really good shape to be
released.  I was not sure it was ever going to get that way, but it is
there now.&lt;/p&gt;
&lt;p&gt;I guess part of that feeling is confidence because I am literally throwing
everything against it.  After the pragmas and one little fix, I can now
scan every file for my website without any non-allowed failures getting
in the way.  If I want to, I can probably add something to the linter
at a later stage to record those pragmas in a reportable fashion.  But
for now, if I want to find them out, I just have to do a simple search
through my Markdown files for &lt;code&gt;&amp;lt;!---&lt;/code&gt;, and that is easy enough.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I had started on the documentation, I needed some time to get it
into a good shape to talk about.  That is what I am going to be talking about
next week.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Fine Tuning Plugins</title><link href="https://jackdewinter.github.io/2021/05/10/markdown-linter-road-to-initial-release-fine-tuning-plugins/" rel="alternate"></link><published>2021-05-10T00:00:00-07:00</published><updated>2021-05-10T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-05-10:/2021/05/10/markdown-linter-road-to-initial-release-fine-tuning-plugins/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/03/markdown-linter-road-to-initial-release-finalizing-plugins/"&gt;last article&lt;/a&gt;, I talked about
the work I did to get the already implemented plugins ready for the release.  In this
article, I talk about the remaining work that I needed to do to fine tune the plugins
and document them for the release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having just …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/05/03/markdown-linter-road-to-initial-release-finalizing-plugins/"&gt;last article&lt;/a&gt;, I talked about
the work I did to get the already implemented plugins ready for the release.  In this
article, I talk about the remaining work that I needed to do to fine tune the plugins
and document them for the release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having just updated the rules and verified that they worked the way I envisioned
them working, there was still two big tasks and a small handful of small tasks
left to do before release.  The large task was to ensure that each plugin
rule was triggering properly and reporting the correct error point.  After that,
I needed to ensure that each plugin rule has a good start at usable documentation.
To wrap things up, I needed to keep on whittling down the little items in the issues
list that I have continued to find during other tasks.&lt;/p&gt;
&lt;p&gt;Knowing that an initial release is inevitable in the next couple of weeks,
I moved forward on the project.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/445c7a15bd926112146167eb1ac0d3f90c4f5de5"&gt;28 Apr 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5487aeaed56088c37c81f7ff2a4fd26ffb04811d"&gt;26 Apr 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="open-source-software-projects-and-your-life"&gt;Open-Source Software Projects And Your Life&lt;a class="headerlink" href="#open-source-software-projects-and-your-life" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the time between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/445c7a15bd926112146167eb1ac0d3f90c4f5de5"&gt;this commit&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/c742f628348b47662f3142ee316d3a44e2405af0"&gt;this commit&lt;/a&gt;,
there is a noticeable gap of 9 days.  While some of time in that gap was spent trying to figure out the
right wording for the documentation on the rules, a lot of it was not.  That is what I want to talk about in
this section: open-source software projects and your life.&lt;/p&gt;
&lt;p&gt;I love my PyMarkdown project, I really do, but it is not my life.  In the
grand scheme of things, it is important, but not more than my health, my
family, my job, and my sanity.  Even though I
was feeling better after the previous weekend, I was not at 100%.  To be
honest, for that week, if I was at 60% on any day, it was a great day.  And
while some people might disagree with my reasons, my priorities that week were on anything
except the PyMarkdown project.&lt;/p&gt;
&lt;p&gt;And it was not a difficult decision to make either.  After working at my
day job and doing what I could around the house, I had little energy left
to do anything else.  When I could, I did work on the project, but when
my energy ran out, I locked my computer and went somewhere to depressurize
and rest.
I did not think twice about this either.  The reason I can spend evenings and
weekends working on this project is my job.  The reason that I have the
mental energy to work on this project is due to my health.  The reason that
I have the emotional energy to work on this project is due to my family
and my sanity.  Unless I want to develop negative feelings about this
project, I need to ensure that I work on the PyMarkdown project for the
right reasons and with the right mindset.&lt;/p&gt;
&lt;p&gt;That decision did set me back a week or so, but it was the right thing
for me to do.  For any other open-source contributors out there, please
figure out what is important to you and manage your projects based on
that list of priorities.  Most importantly, do not feel bad if that project
does not always make it to the top of the list.  It is healthier if it
does not.&lt;/p&gt;
&lt;h2 id="the-big-scan-verifying-existing-rules"&gt;The Big Scan: Verifying Existing Rules&lt;a class="headerlink" href="#the-big-scan-verifying-existing-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There was no way around this task.  I needed to go through each of the
rules and their test data, verifying that the scenario tests were
reporting the right number of rule violations at the right positions.
If it would help others think that I was not going insane, I could
create a myth that I played a fun game to get it done, but it would
just be a myth.&lt;/p&gt;
&lt;p&gt;The truth is, I was looking forward to this.  Yeah, I had no delusions
that it was going to be hard work, of that I was certain.  But this
was the culmination of over a years’ worth of work, and I wanted it to look
and feel right.  With that mindset, the only true way to do it was
to check every scenario test and test configuration against every
test Markdown file and verify the results manually.&lt;/p&gt;
&lt;p&gt;Along the way, I also decided to create the first iteration of
the documentation for each rule, placing notes in there that would
help me create the documentation.  As all thirteen of the existing
rules were originated from the MarkdownLint rules, I opened
each Markdown file in my editor and compared my manual results against
the results product by MarkdownLint.&lt;/p&gt;
&lt;p&gt;From my viewpoint, I sincerely believe that this is going to be
useful to the users.  As an avid user of MarkdownLint inside of
VSCode, it is useful to get any warnings about Markdown as I
am creating the documents.  Because the PyMarkdown project has
a more narrowly scoped focus of the GFM Specification instead
of MarkdownLint’s any-parser approach, as a user, knowing what
the differences are would help me understand it better.  And
if I know that I would want information on the differences
documented, I am going to assume that there are others out
there that would share that need.&lt;/p&gt;
&lt;p&gt;I also want to mention that, to keep my sanity (or at least
try to), I focused on one rule at a time to the exclusion of
everything else.  I reviewed the code for the rule, made sure
that I had a solid understanding of how I believed that rule
should work, and then started iterating between scenario tests
and the rules they were testing.&lt;/p&gt;
&lt;h3 id="and-of-course-scenario-tests"&gt;And Of Course… Scenario Tests&lt;a class="headerlink" href="#and-of-course-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I will admit that when I was going through the scenario tests,
I did curse a little.  Because I am being honest, I should probably
admit that I cursed a lot.  It was a big job, and it took a long
time.  But keeping my focus to a single rule helped me retain
my calm, even though some of the scenario tests files are huge.&lt;/p&gt;
&lt;p&gt;But there were also benefits to my approach.  When I originally
developed some of these rules, I did not have all of the command
line options that the project now has.  As a result, some of
the scenario test output includes non-relevant rules being
triggered.  I was able to clean up a lot of tests by simply
adding the &lt;code&gt;--disable-rules md0xx&lt;/code&gt; with the specific rule to
the command line for that test.  That cleared some things up
very quickly.&lt;/p&gt;
&lt;p&gt;Other than some small things, it was usually very easy to
figure out when a triggered rule was reporting the wrong
position or misfiring.  While the “inside of list” and
“inside of block quote” cases were more difficult to spot,
the rest of the errors were almost always to do with a
wrong line being reported, or the position &lt;code&gt;(0,0)&lt;/code&gt;
being reported.  That made it easy to spot.&lt;/p&gt;
&lt;p&gt;But once I spotted issues, I needed to go back to the code
for the rule that I was working on and determine if the
test result was bad or if the rule was bad.  And in cases
where the rule was bad, I needed to fix that rule.&lt;/p&gt;
&lt;h3 id="fixing-up-the-rules"&gt;Fixing Up The Rules&lt;a class="headerlink" href="#fixing-up-the-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I went through the rules, most of the rules just required a
bit of cleaning up, and the occasional adjustment here and there.
A good example of those adjustments was the change made in the
&lt;code&gt;RuleMd024.py&lt;/code&gt; module to pass the correct arguments into the
&lt;code&gt;report_next_token_error&lt;/code&gt; function.  When this rule called
the &lt;code&gt;report_next_token_error&lt;/code&gt; function, it did so in a way
that the reported position was always &lt;code&gt;(0,0)&lt;/code&gt; for SetExt
Heading tokens.  A small adjustment to the token and the
addition of the &lt;code&gt;use_original_position&lt;/code&gt; argument quickly took
care of that issue with a minimal amount of changed code.&lt;/p&gt;
&lt;p&gt;A similar issue occurred with the &lt;code&gt;RuleMd026.py&lt;/code&gt; module and
how it calculated the position of the error.  While slightly
more complicated, it took me a bit to make the changes to
deal with both Atx Heading tokens and SetExt Heading tokens
properly.  And it was when I looked at Rule md023 that I
realized it should be disabled by default.  While some other
parsers have problems with Atx Heading elements and SetExt
Heading elements that do not start at the beginning of the line,
the GFM Specification does not.  As such, it makes sense to
me to include it as a rule, but to disable it by default.&lt;/p&gt;
&lt;p&gt;Even the work that I did on Rule md018 in
&lt;a href="https://jackdewinter.github.io/2021/05/03/markdown-linter-road-to-initial-release-finalizing-plugins/#the-long-march"&gt;the last article&lt;/a&gt;
need to be checked, and I found a couple of small issues there.
However, for this rule, the big change was that I need to break
up the functions with lots of statements into a collection of
smaller functions, each more accurately named.  As I refactored
into the small functions, I fixed those issues as I went.&lt;/p&gt;
&lt;h2 id="adding-proper-documentation-for-plugin-rules"&gt;Adding Proper Documentation For Plugin Rules&lt;a class="headerlink" href="#adding-proper-documentation-for-plugin-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Taking my time with this task, per
the above section on
&lt;a href="#open-source-software-projects-and-your-life"&gt;Open Source Software Projects And Your Life&lt;/a&gt;,
I worked through this task at a leisurely pace.  While I did a couple of
format changes and section title changes, the relative content of the
sections was already fixed in my mind when I started.  It just took
a bit of experimentation to figure out what the correct transformation
from my mind to the correct layout in a Markdown file was.&lt;/p&gt;
&lt;p&gt;This task was all about taking the information that was in
my head about each rule and documenting it in such a manner that a
user running into a violation of the rule would find useful.  Starting
with
&lt;a href="docs/rule_md001.md"&gt;Rule md001&lt;/a&gt;,
this meant that I needed to have any aliases for the rule at the top,
followed by a one line summary of the rules.  Based on experience, if
you are looking at a rule, you want something quick and easy at the top
of any documentation on that rule to make sure you are looking at
the documentation for the right rule. Next was a paragraph explaining
the reason that the rule was needed, followed by good examples
of what the rule triggered on and what the rule does not trigger on.
Following knowing that you have the right rule, you then want to
understand why this rule is important and start to figure out why
it triggered on your specific example.  Next is the information on any
configuration that applies to the rule.  While most of the time
a user will go “yeah, that sounds reasonable”, short of disabling
the rule altogether, good documentation on configuration allows that
user to know how far they can bend the rule, and in what direction.&lt;/p&gt;
&lt;p&gt;The last section was the most interesting for me to add: what was
the origination of the rule.  While all the current rules are
based of rules from David Anson’s MarkdownLint project, some changes
have been made to bring them in line with the GFM Specification.
As such, I thought it was important to give some references that
contributed to the rules, as well as any changes to the rules.
Basically, if I am going to implement a similar rule, I want to
make sure I reference where I got the idea from.&lt;/p&gt;
&lt;p&gt;Once I had the first rule done, the remaining twelve rules were relatively
easy.  Most of the content for these documents was already in the source
code for the rule or the source code for the tests for that rule. It
was just a matter of extracting that information and restructuring it
for the documentation.  The remaining information needed for the rules
was primarily in the &lt;code&gt;Reasoning&lt;/code&gt; section, and that was easily crafted
after a bit of research.&lt;/p&gt;
&lt;h2 id="providing-for-strict-rule-configuration"&gt;Providing For Strict Rule Configuration&lt;a class="headerlink" href="#providing-for-strict-rule-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This change stemmed from a simple test that I made of the configuration
for rule Md022.  When I set the configuration value to a negative number,
the existing code for the &lt;code&gt;ApplicationProperties&lt;/code&gt; class did not complain.
Given the state of that class, that was the correct behavior.  However,
in my mind, I had set that configuration to an invalid value, and I wanted
to know that it was invalid instead of the &lt;code&gt;ApplicationProperties&lt;/code&gt; class
assuming the default value.  Basically, I wanted to enable “strict
configuration mode” for the
that instance of the &lt;code&gt;ApplicationProperties&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;Starting with the tests, I added two new tests for Rule md022 with a negative
number specified for the &lt;code&gt;lines_below&lt;/code&gt; configuration value for Rule md022.
One of those tests was created with my proposed “strict configuration mode”
enabled and the other test was created without it enabled. The test without
the new mode enabled passed right away, returning errors for the &lt;code&gt;lines_above&lt;/code&gt;
value which had a valid value of &lt;code&gt;2&lt;/code&gt;, but not returning any errors for
the invalid &lt;code&gt;lines_below&lt;/code&gt; value.  With the &lt;code&gt;alternating_heading_types.md&lt;/code&gt;
Markdown file and the default value for &lt;code&gt;lines_below&lt;/code&gt;, that was the correct
response.  &lt;/p&gt;
&lt;p&gt;With the base test working, I needed to add the code to wire up a new
command line switch with the &lt;code&gt;ApplicationProperties&lt;/code&gt; class.  Having added
new command line switches before, I knew it was only a small amount of
effort to change the &lt;code&gt;main.py&lt;/code&gt; module to add the argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"--strict-config"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"strict_configuration"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"throw an error if configuration is bad, instead of assuming default"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then a similarly small amount of effort to pass it into the properties class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strict_configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enable_strict_mode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the &lt;code&gt;enable_strict_mode&lt;/code&gt; function did not exist, I created it as a simple
function that enables the flag as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enable_strict_mode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Sets struct mode to True to enable it.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__strict_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I did think back and forth on whether to provide an “enable” function or
a “setter” function but landed on the “enable” function.  The easier way
to set the &lt;code&gt;self.__strict_mode&lt;/code&gt; member variable is to pass it in as one
of the arguments to the constructor function.&lt;/p&gt;
&lt;p&gt;Thinking through various
scenarios, I concluded that everything boiled down to two scenarios.
In the first scenario, whether to use strict mode at the
creation of the &lt;code&gt;ApplicationProperties&lt;/code&gt; instance is known and is passed
into the constructor when it is created.  In the second scenario, that
decision needs to be delayed to a later point where it is known. In that
case, it makes more sense to start with the strict mode disabled, enabling
strict mode if required.  As the configuration is read in and then
the decision to use strict mode can be made, I went with the second option.&lt;/p&gt;
&lt;h3 id="altering-the-rule"&gt;Altering The Rule&lt;a class="headerlink" href="#altering-the-rule" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the above code in place, I needed to modify the rule to perform a
better check on the configuration value.  Starting with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize_from_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__lines_above&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_integer_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"lines_above"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__lines_above&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__lines_below&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_integer_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"lines_below"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__lines_below&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I quickly changed it to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__validate_configuration_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found_value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Value must not be zero or a positive integer."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize_from_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__lines_above&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_integer_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"lines_above"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RuleMd022&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__validate_configuration_value&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__lines_below&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_integer_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"lines_below"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RuleMd022&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__validate_configuration_value&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The big thing to notice here is that I added the
&lt;code&gt;__validate_configuration_value&lt;/code&gt; function to handle the verification,
leveraging the &lt;code&gt;valid_value_fn&lt;/code&gt; from the &lt;code&gt;ApplicationProperties&lt;/code&gt; class.
This really did simplify the needed logic.&lt;/p&gt;
&lt;p&gt;Debugging these changes, I cleaned up a couple of function default parameters
to ensure that I could pass the correct values through, and everything worked
fine.  When the verification function failed, the command line returned an
error, but it was a generic error.  Based in the &lt;code&gt;PluginManager&lt;/code&gt; class, there
is code in the &lt;code&gt;BadPluginError&lt;/code&gt; function to take an error and translate it
into something readable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;formatted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Plugin id '{plugin_id.upper()}' had a critical "&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"failure during the '{str(plugin_action)}' action."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was good that the error was surfacing, but it lacked the ability
to allow the user to act on it.  Therefore, I added a new &lt;code&gt;cause&lt;/code&gt;
argument to the &lt;code&gt;BadPluginError&lt;/code&gt; constructor function and rewrote
that code slightly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cause&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cause&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;formatted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cause&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;formatted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Plugin id '{plugin_id.upper()}' had a critical "&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"failure during the '{str(plugin_action)}' action."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was a small change, but that change allowed errors with the configuration
values to be surfaces as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The value for property 'plugins.md022.lines_below' is not valid:
 Value must not be zero or a positive integer.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To me, that was definitely actionable!&lt;/p&gt;
&lt;h2 id="atx-heading-and-spaces-tabs-vs-spaces"&gt;Atx Heading and Spaces &amp;amp; Tabs Vs. Spaces&lt;a class="headerlink" href="#atx-heading-and-spaces-tabs-vs-spaces" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, this one was a bit weird, but it had been on my mind for a while.  When
I was going through the
&lt;a href="https://github.github.com/gfm"&gt;GFM Specification&lt;/a&gt;
to verify one of the past issues dealing with Atx Heading elements, I read the
following two lines from the section on Atx Headings:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An ATX heading consists of a string of characters, parsed as inline content,
between an opening sequence of 1–6 unescaped # characters and an optional
closing sequence of any number of unescaped # characters. The opening
sequence of # characters must be followed by a
&lt;a href="https://github.github.com/gfm/#space"&gt;space&lt;/a&gt; or by the end of line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Very specifically, it mentions a &lt;code&gt;space&lt;/code&gt; character and not any &lt;code&gt;whitespace&lt;/code&gt;
characters.  I remember this clearly, because it seems to contradict the
first two lines of the section on Tabs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tabs in lines are not expanded to spaces. However, in contexts
where whitespace helps to define block structure, tabs behave
as if they were replaced by spaces with a tab stop of 4 characters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That text is backed up by
&lt;a href="https://github.github.com/gfm/#example-10"&gt;example 10&lt;/a&gt; which has
a Markdown of&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="err"&gt;→&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and an HTML output of&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Foo&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This seems contradictory, so what to do?&lt;/p&gt;
&lt;h3 id="thinking-it-through"&gt;Thinking It Through&lt;a class="headerlink" href="#thinking-it-through" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I guess the best place to start is with the statement that while
all specifications try and be perfect, most specifications take
a while to get to that state.  The
&lt;a href="https://github.github.com/gfm"&gt;GFM Specification&lt;/a&gt;
is no different than any other specification in that regard.  To
help address that issue that I found, I posted a question to the
Markdown forums to make sure that it gets talked about.  But I
still had to do something with the parser to move it along.
But what was the right answer?&lt;/p&gt;
&lt;p&gt;From my experience, most specifications are layered to provide
general context at a high level and a more specific context at
a lower level.  A good example of this could be a specification
that says, “in the English language, &lt;code&gt;i&lt;/code&gt; always comes before &lt;code&gt;e&lt;/code&gt;”
while the specification for a particular section says “except
after &lt;code&gt;c&lt;/code&gt;”.  In that given section, I then expect to
have an explanation as to why that section is an exception,
with good reasons to back that decision up.  This provides for
a good foundation in the general case, with room to change things
at a lower level if required.&lt;/p&gt;
&lt;p&gt;Based on that experience and those two seemingly contradictory
statements, I decided to change the code to not allow tab
characters as part of the starting or ending hash characters
for the Atx Heading elements.  There was one big factor to
assist me in making that change.  That was that it was a simple
enough change, and I could always revert it if necessary with
little effort.  That meant that I could adhere to the specification
as I was reading it, and if I read it wrong, it was reversable.&lt;/p&gt;
&lt;p&gt;That was good enough for me!&lt;/p&gt;
&lt;h3 id="resolving-the-issue"&gt;Resolving The Issue&lt;a class="headerlink" href="#resolving-the-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having made the decision to go with the more specific part of the
specification, there were some changes I needed to do.  The first
thing was to add eight new tests: two tests each for rule md018, md019,
md020, and md021.  These tests are variations on existing tests that
also include tabs in the area between the hash character (&lt;code&gt;#&lt;/code&gt;) and
the start of the heading text.  With those tests ready to go,
it was time to make the changes.&lt;/p&gt;
&lt;p&gt;For detecting the opening part of the Atx Heading, the only change
needed in the &lt;code&gt;is_atx_heading&lt;/code&gt; function was to change this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;non_whitespace_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extracted_whitespace_at_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;non_whitespace_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_while_character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;extracted_whitespace_at_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;non_whitespace_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This change simply replaces the call to the generic &lt;code&gt;extract_whitespace&lt;/code&gt;
function with inline code that is targeted specifically for a space character.
As the &lt;code&gt;collect_while_character&lt;/code&gt; function returns slightly different information
than the &lt;code&gt;extract_whitespace&lt;/code&gt; function, an extra statement is required to compute
the value for the &lt;code&gt;extracted_whitespace_at_start&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;With the code for the opening hash characters completed, I needed to shift
focus to the end hash characters.  These changes were both within the
&lt;code&gt;parse_atx_headings&lt;/code&gt; function in the portion of the code after then ending
hash characters are detected and removed.  Like the changes required to
direct focus on space characters at the start of the Atx Heading element,
the end has characters required the same type of changes from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;extracted_whitespace_before_end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_whitespace_from_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;remaining_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;non_whitespace_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_backwards_while_character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;end_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;non_whitespace_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;extracted_whitespace_before_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remaining_line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_index&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once again, the &lt;code&gt;*whitespace*&lt;/code&gt; function calls needed to be replaced
with functions focus on the single space character.  And once again,
to keep the rest of the code the same, some extra computation was
required.&lt;/p&gt;
&lt;p&gt;I tested this code in two blocks, the starting hash characters and
the ending hash characters.  This worked out well and I was
quickly able to get both changes made and tested.  While it was
not a big change, it was one more thing off the list, so it was
good.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I do not like that “my getting sick” caused me to slip another
week before the initial release, I did need the time to get back
into proper form after my second COVID-19 vaccine shot.  From
experience, if I push myself more than a given amount, I am not only
borrowing energy from the short term future but prolonging the
time it takes me to recover.  Basically, I can take two to four
days of “I’ll do stuff when I can” and get back to normal, or I
can push for that duration. If I push for that duration, it usually
means that instead of two to four days, it will take me four to
six days to get back to normal.  It truly is not fair, but it
just is.&lt;/p&gt;
&lt;p&gt;In terms of the project itself, I can mentally feel all the
mental list of project checkboxes being checked off one by
one.  While I am finding things that need fixing, those items
can either be postponed or they will only take a couple of
hours to fix.  Either way, I have the confidence that I can
properly allocated them to the right priority, which is the
important decision.  And the number of checkboxes left to check
is diminishing.&lt;/p&gt;
&lt;p&gt;From my viewpoint, the entire PyMarkdown project is coming
together nicely.  The parser and the rules engine are both
working properly.  The first thirteen rules are implemented,
tested, and verified.  I have a good first draft of the documentation
for those rules, and I only have the bulk of the documentation
to compose for the base of the project.&lt;/p&gt;
&lt;p&gt;While I am not at the finish line yet, I can definitely see
it, and it is closer than the horizon!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The list of items in the priority 1 section remains low, but I need to get it
to zero before I feel confident about releasing.  With documentation being
the big push now, it was balancing both of those tasks at the same time.
Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Finalizing Plugins</title><link href="https://jackdewinter.github.io/2021/05/03/markdown-linter-road-to-initial-release-finalizing-plugins/" rel="alternate"></link><published>2021-05-03T00:00:00-07:00</published><updated>2021-05-03T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-05-03:/2021/05/03/markdown-linter-road-to-initial-release-finalizing-plugins/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/19/markdown-linter-road-to-initial-release-gearing-up-for-plugins/"&gt;last article&lt;/a&gt;, I talked about
gearing up for the work that I need to do on the plugins to get them ready for the release.
In this article, I do that work to get the already implemented plugins ready for the release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting close to being …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/19/markdown-linter-road-to-initial-release-gearing-up-for-plugins/"&gt;last article&lt;/a&gt;, I talked about
gearing up for the work that I need to do on the plugins to get them ready for the release.
In this article, I do that work to get the already implemented plugins ready for the release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting close to being ready for the initial release, the list of things left to clean
up was down to the actual focus of the project: the plugin rules.  Without a healthy
set of rules to power it,
a linter is usually either a fancy parser engine that is not being used to its fullest
or some Regular Expression test cases that have not been tested properly.  While the
&lt;a href="https://github.com/jackdewinter/pymarkdown"&gt;PyMarkdown project&lt;/a&gt;
was definitely not just a fancy parser, I needed to upgrade the initial set of thirteen
rules to make sure that was not the case.&lt;/p&gt;
&lt;p&gt;Hoping to make a quick couple days work of upgrades, I started working on the plugin rules.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/b2c8207cd596b93c4a0423ca10a5b92a9a4d503f"&gt;11 Apr 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5487aeaed56088c37c81f7ff2a4fd26ffb04811d"&gt;26 Apr 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="before-i-start"&gt;Before I Start&lt;a class="headerlink" href="#before-i-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Apologies to any faithful readers that I did not post an article last week.  I was
recovering from my second COVID-19 shot and was out of commission from about 6PM on
Saturday evening until about 6pm on Tuesday evening.  I was able to do minimal
amounts of work during that time frame, but I felt like I was constantly trying
to push through a tough wall of fog.  And after two days of trying to push through
that fog, I decided to stop all work, including waiting a week before posting an article.
I was having issues with the quality of my own coding work at that time, and it was
only through rigorous testing and linting that I was successful there.  From a
writing an article point of view, I decided that I would rather wait a week and rest
than produce something that was not up to par with my usual posts.&lt;/p&gt;
&lt;p&gt;Was it worth it?  Yes… unequivocally yes!  From a personal viewpoint, I know quite
a few people that have either had a severe case of COVID and required hospitalization
and even a couple of people that have had a good friend pass away from COVID and
its complications.  My personal choice is to deal with the side effects of the shots
and know I am more protected than before, thereby reducing some of my anxiety from
this unusual time we are all in.&lt;/p&gt;
&lt;p&gt;To any readers out there:  Please make an informed choice as to whether you
get vaccinated.  It is not only your health that you need to worry about,
but the health of those around you and to possibility of mutations in COVID.  Do not
just brush off any decision.  Read the information from the CDC, read information
from reputable sources about what can happen to you and your local groups with
and without the vaccines, and make an educated decision.&lt;/p&gt;
&lt;p&gt;And now, on to the rest of the article.&lt;/p&gt;
&lt;h2 id="where-to-start"&gt;Where To Start?&lt;a class="headerlink" href="#where-to-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To complete this task, I needed to verify and update each of the 13 plugin rules
that have previously been coded, ensuring that they still work and are tested
properly.  I was aware that some of those rules were going to need no changes
at all, but I was also aware that some may need some decent refactoring to keep
up with the changes that have occurred since they were coded.  I had guesses
which rules were going to fall into which category, but I just needed to start
working on them to really get an idea of what changes needed to occur.&lt;/p&gt;
&lt;h2 id="the-first-three-rules"&gt;The First Three Rules&lt;a class="headerlink" href="#the-first-three-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Examining
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_001.py"&gt;Rule md001&lt;/a&gt;,
everything looked fine with this rule except for its lack of support for
front-matter.  Since I execute this rule against my blog posts which contain
front-matter,
this rule fires on each article due to my use of that front-matter to specify metadata
about the article.  So, after adding three new scenario tests that include various
forms of metadata, I started to make the changes to this rule.&lt;/p&gt;
&lt;p&gt;Setting the new &lt;code&gt;__front_matter_title&lt;/code&gt; field to &lt;code&gt;title&lt;/code&gt;, it was surprisingly easy
to add support for the Front Matter token to the &lt;code&gt;next_token&lt;/code&gt; function.  As
the Front Matter token only appears once at the start of the document, the
code was very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_front_matter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__front_matter_title&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matter_map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;hash_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, if that token is present, check for the actual title in the map,
setting the &lt;code&gt;hash_count&lt;/code&gt; variable to &lt;code&gt;1&lt;/code&gt; if it is present.  At that point,
the rest of the code takes control of any following Atx Heading tokens or
SetExt Heading tokens as they occur.&lt;/p&gt;
&lt;p&gt;But while everything looked good, the tests were not passing.  As I started
debugging, it looked like I needed to do some finessing with the
&lt;code&gt;front_matter_markdown_token.py&lt;/code&gt; module.  In checking the source code
against what tokens were being produced, there were two small issues that
I needed to take care of.&lt;/p&gt;
&lt;p&gt;The first change I needed to do was to add the call to the &lt;code&gt;lower&lt;/code&gt; function
to this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;value_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because I want to do a simple lookup inside of the &lt;code&gt;value_map&lt;/code&gt; dictionary,
I want to get the &lt;code&gt;current_title&lt;/code&gt; to a standardized form.  If I do not do that, I would
have to try an increasingly large combination of forms, such as &lt;code&gt;Title&lt;/code&gt;,
&lt;code&gt;title&lt;/code&gt;, &lt;code&gt;TiTle&lt;/code&gt;, &lt;code&gt;tItLe&lt;/code&gt; and so on.  By standardizing on that single form,
I keep the number of lookups required to a single lookup.  Hence,
I appended the &lt;code&gt;.lower()&lt;/code&gt; to that variable when using it as a key in the
dictionary, standardizing on a lowercase metadata name.&lt;/p&gt;
&lt;p&gt;The other issue was a similar issue to the issue of standardized lookup
name, but with a standardized form of the data stored for that name.  If
possible, any lookup of a value from the dictionary should be usable
without any modifications being needed.  But the way the data currently
was, any leading or trailing whitespace was being added to the
&lt;code&gt;current_value&lt;/code&gt; variable along with the rest of the data.  To me, it made
more sense to take the same care with the front-matter values.  To that
extent, I made sure to add a call to the &lt;code&gt;strip&lt;/code&gt; built-in function before
adding the string to the &lt;code&gt;current_value&lt;/code&gt; variable.  While it was not
perfect, I was pretty sure it would handle a good 80% of the scenarios
I already had in mind.&lt;/p&gt;
&lt;p&gt;Finally, to round things out, I added some extra configuration to fetch a
configurable string to use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize_from_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__front_matter_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"front_matter_title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"title"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="the-other-two-rules"&gt;The Other Two Rules&lt;a class="headerlink" href="#the-other-two-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Because
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_002.py"&gt;Rule md002&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_003.py"&gt;Rule md003&lt;/a&gt;
are very narrowly focused, they did not require any changes to the source code or the test code.
I did play around with (or experiment with if you prefer) various combinations to try and find some gaps in both
rules for about an hour or so each.  But in both cases, any failures that I found boiled
down to one of the already existing scenarios already being tested in the scenario tests.&lt;/p&gt;
&lt;h2 id="the-long-march"&gt;The Long March&lt;a class="headerlink" href="#the-long-march" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yup, 13 days occurred between the
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/b2c8207cd596b93c4a0423ca10a5b92a9a4d503f"&gt;last commit&lt;/a&gt;
before this change and the
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/4e09a5bb480b852436a452f63fdd21d2e1a00493"&gt;current commit&lt;/a&gt;
that included this change.  Like a fair number of previous difficult tasks, I tried to
be smart about it, and ended up choosing what I believe to be the simplest
solution.&lt;/p&gt;
&lt;h3 id="the-research"&gt;The Research&lt;a class="headerlink" href="#the-research" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the beginning, I added 17 new scenario tests to deal with Block Quote elements,
List elements, and inline elements.  Right away, there were over ten test failures
and a handful of cases that threw an exception when the rule was executed.  At that
point, this was part of the code in the &lt;code&gt;next_token&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_paragraph_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;split_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_paragraph_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;split_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_whitespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_text&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;combined_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_whitespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;next_text&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"^\s{0,3}#{1,6}\S"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"#\s*$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_text&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The exceptions were occurring due to the &lt;code&gt;assert&lt;/code&gt; statement failing.  It was not
failing on all tests, just ones that had multiple Text tokens within
the bounds of the Heading tokens that spanned multiple lines.  As soon as that
&lt;code&gt;assert&lt;/code&gt; statement was hit in those cases, the &lt;code&gt;assert&lt;/code&gt; would trigger, and
rightly so.  In those cases, only part of the required newlines were attributed
and stored with that first Text token, the rest of the newlines being stored
in the various tokens where the newline occurred.  And as soon as that first
Text token was hit, that &lt;code&gt;assert&lt;/code&gt; statement evaluates to &lt;code&gt;False&lt;/code&gt; and the
rule fails.&lt;/p&gt;
&lt;h3 id="lather-rinse-repeat"&gt;Lather, Rinse, Repeat&lt;a class="headerlink" href="#lather-rinse-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once again, I started out with the best of intentions and wanted to
come up with a solution that was very workable and very smart.  I have
talked about this before in my articles, and I am pretty sure that I will
talk about it in future articles.  I do not purposefully do it, nor is it
a matter of pride or a matter of proving myself to someone.  As part of
my nature, I want to keep quality and performance at a high level, so I
strive to come up with the best solution that maximizes those concepts.
And, I also admit, I sometimes get carried away.&lt;/p&gt;
&lt;p&gt;So, with the best of intentions, I tried four different variations on
a theme, each one trying to solve the issue in a slightly different
manner.  One incarnation tried to keep every token that occurred in a
Python list, only to try and parse through it later.  Another incarnation
tried to be smarter about handling Link tokens but did not pay enough
focus to the other types of tokens.  It was just a lot of effort with
things getting close to proper solution before falling apart.  And
with each incarnation of the solution, I got more frustrated until
I had enough.&lt;/p&gt;
&lt;p&gt;It was then that I decided to take a step back and think things through
more clearly.&lt;/p&gt;
&lt;h3 id="learning-from-mistakes"&gt;Learning From Mistakes&lt;a class="headerlink" href="#learning-from-mistakes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There were a couple of things that I learned from all those iterations,
painful as they were to remember.  The big thing that I was once again
looking at was that complicated solutions were just tripping over
themselves.  I would set a value here, access it there, and then when
I went to reference it in another piece of the source code, I was
surprised that its value had changed.  I did not need to have complicated
variables to hold the information I needed, I just needed to have
“just enough” information.&lt;/p&gt;
&lt;p&gt;Only a small distance away from that concept, I needed to keep my
solutions small enough to hold “just enough” information to complete the
task.  Of the four solutions that I tried in that week, three of them
tried to keep everything that occurred within the Paragraph element
in a list to be analyzed later.  It was just crazy the things I was
trying to do to keep that data in sync with the tokens as the
information came through.&lt;/p&gt;
&lt;p&gt;I needed to take the best of what worked and learn from what did not.
And I had a feeling that it would be a simple solution that I had
missed.  And I was right.&lt;/p&gt;
&lt;h3 id="final-solution"&gt;Final Solution&lt;a class="headerlink" href="#final-solution" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I sat back and looked at what I tried and what worked and
what did not work, the easy part that worked was the handling of
the Text token itself and not referencing Text tokens within an
inline Link element.  To cleanly take care of that, I replaced
this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_paragraph_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with the slightly more complicated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_paragraph_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__inside_of_link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_link_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__inside_of_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Essentially, ignore any tokens inside of a Link token until the rule is looking
outside of that Link token’s scope.  Once that was done, I was able
to continue with the processing of Text tokens within a Paragraph
token with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;split_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__last_paragraph_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;split_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_text&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;combined_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;split_whitespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;split_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;next_text&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_hard_break&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_other_token&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_other_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;adjusted_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_column_number&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;adjusted_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_column_number&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_whitespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="n"&gt;split_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While it looks like it is a lot more complicated than the previous two lines
that it replaces, those two &lt;code&gt;if&lt;/code&gt; statements are there
solely to ensure that the column number is calculated properly.  From that point
of view, I think it was a good win! And when I said above that I needed the
algorithm and variables to have “just enough” information, I believe I am
meeting the constraint here.  The &lt;code&gt;__paragraph_index&lt;/code&gt; variable is the only
thing that was added to the main part of the changed code, as that was the
only thing required to ensure that the right part of the Paragraph token’s
leading space field was being used.  The other fields that are present in
the code do not try and reconstruct the data, just report on what the algorithm
encountered.&lt;/p&gt;
&lt;p&gt;With that main part of the solution in place, there were no more exceptions
being thrown as the &lt;code&gt;assert&lt;/code&gt; statement had been removed.  From my work
with the consistency checks for the tokens, I was confident that everything
lined up with respect to the newlines in tokens, I just had to keep track
of them in this rule.  So, I added code that only tracked those changes,
and nothing else:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_code_span&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trailing_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_raw_html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_image&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_from_blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"inline"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;before_link_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;before_title_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;after_title_whitespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active_link_title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"full"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ex_label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__inside_of_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_link&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_inline_hard_break&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_hard_break&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The two exceptions to that statement were the Hard Line Break token and
the Link token.  As I mentioned previously, to deal with Link elememts
properly, I needed to keep track of when the rule was looking at tokens
within the scope of a Link token, hence &lt;code&gt;self.__inside_of_link&lt;/code&gt;.  In a
similar vein, as I had decided that any inline element on a line would
invalidate that line from this rule, I needed to track the presence
of that token, hence &lt;code&gt;self.__first_line_after_hard_break&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I believe that the thing that made the above code work well was that
I was primarily only tracking the one thing that I needed to: the
&lt;code&gt;__paragraph_index&lt;/code&gt; field.  I did not have to try and reconstitute anything
to figure that out, I just had to count newline characters.  And to
be honest, I think I might work on refactoring that out in the future
as well.&lt;/p&gt;
&lt;p&gt;Finally, adding in some initialization code when a Paragraph token was encountered:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_other_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_hard_break&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__inside_of_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_column_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and some code to handle the end of a line within a Text token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_other_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__first_line_after_hard_break&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paragraph_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and I was done.  Of course, it took a bit longer to actually arrive at
that solution, but not much more.  I focused on one small set of
scenario tests and worked to get those passing before moving on to
another set of tests.  If my notes are accurate, I started with plain
Text tokens, then multiple line Text tokens, then Text tokens with
various forms of Code Span tokens scattered around the Text tokens,
and then on to the other inline tokens.&lt;/p&gt;
&lt;h3 id="rule-md019"&gt;Rule md019&lt;a class="headerlink" href="#rule-md019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After all that work, it was nice to check out
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_019.py"&gt;Rule md019&lt;/a&gt;.
Like Rule md002 and Rule md003 above, the constrained and focused
nature of this rule led to it being just fine as it was.  No changes required.&lt;/p&gt;
&lt;h2 id="the-next-four-rules"&gt;The Next Four Rules&lt;a class="headerlink" href="#the-next-four-rules" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After taking a long time to get Rule md018 finished, it was with some trepidation that
I started to work on Rule md020.  I was not sure if it was going to be as bad as the previous
rule, but I had to push forward anyways.  &lt;/p&gt;
&lt;h3 id="rule-md020"&gt;Rule Md020&lt;a class="headerlink" href="#rule-md020" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting on
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_020.py"&gt;Rule md020&lt;/a&gt;,
I copied over 21 new scenario tests
from the scenario tests for Rule Md 018, modifying them to test for possible Atx Closed
Heading elements instead of Atx Heading elements.  After the modifications were made,
I carefully determined what the correct output for each of the new scenario tests was,
and coded that in.&lt;/p&gt;
&lt;p&gt;Trying to leverage the work that I did in modifying the code for Rule Md018, I looked
at the code, determined to refactor it.  To that extent, I took a bulk of the code from
the &lt;code&gt;RuleMd018&lt;/code&gt; class and moved it into the &lt;code&gt;StartOfLineTokenParser&lt;/code&gt; class.  In place of
the conditional that determines if the &lt;code&gt;report_next_token_error&lt;/code&gt; function should be
called, I created a new &lt;code&gt;check_start_of_line&lt;/code&gt; function and made it do nothing.  Then
I implemented a new &lt;code&gt;MyStartOfLineTokenParser&lt;/code&gt; class, and moved the two conditionals
from the original &lt;code&gt;RuleMd018&lt;/code&gt; class into the &lt;code&gt;check_start_of_line&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyStartOfLineTokenParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StartOfLineTokenParser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_start_of_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number_delta&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"^\s{0,3}#{1,6}\S"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"#\s*$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_text&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__owner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_next_token_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_number_delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, in the &lt;code&gt;RuleMd018&lt;/code&gt; class, after creating a new instance of the
&lt;code&gt;MyStartOfLineTokenParser&lt;/code&gt; class in the &lt;code&gt;__init__&lt;/code&gt; function, the wiring
up of the calls to that instance was simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;starting_new_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__token_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starting_new_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__token_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that refactor accomplished and tested, it was then on to the
actual rule that I wanted to work on, Rule md020.  Reusing the
&lt;code&gt;StartOfLineTokenParser&lt;/code&gt; class, I created another &lt;code&gt;MyStartOfLineTokenParser&lt;/code&gt; class
in the &lt;code&gt;rule_md_020.py&lt;/code&gt; module.  The only change that was required  to support
the new rule was to replace the conditional in the &lt;code&gt;check_start_of_line&lt;/code&gt; function
with the follow conditional:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"^\s{0,3}#{1,6}.*#+\s*$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because I took the time to do a solid refactor of Rule md020, reusing
the &lt;code&gt;MyStartOfLineTokenParser&lt;/code&gt; class in this rule was a smart move.  Things just
worked with little effort.  A definite plus!&lt;/p&gt;
&lt;h3 id="rule-md021-md022-and-md023"&gt;Rule Md021, Md022 and Md023&lt;a class="headerlink" href="#rule-md021-md022-and-md023" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While it was not as much work as Rule md018, Rule md020 did take a bit of work to get
done.  Looking at
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_021.py"&gt;Rule md021&lt;/a&gt;,
I knew that was not going to be the case.  Similar to code
for Rule md019, the code for that rule was very simple and straightforward.  As such,
no changes were required in either the rule code or the test code.&lt;/p&gt;
&lt;p&gt;Taking a quick look at the source code for
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_022.py"&gt;Rule md022&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_023.py"&gt;Rule md023&lt;/a&gt;,
 my hope
was that they were
was that they did not need any changes.  In both cases, the code seemed to be very narrowly
confined to working on existing Heading tokens and the text contained within
those headings.  Looking at the issues list, I addressed concerns about these
two rules by extra tests for Block Quote
elements and List elements for both rules, as well as extra line spacing tests
for Rule md022.&lt;/p&gt;
&lt;p&gt;After that research and executing the scenario tests, that initial observation
on the simplicity of these rules was confirmed.  With the simple addition of some
extra scenario tests, I was satisfied that the scenarios were adequately covered.&lt;/p&gt;
&lt;h2 id="the-final-four"&gt;The Final Four&lt;a class="headerlink" href="#the-final-four" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Proceeding on to
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_024.py"&gt;Rule md024&lt;/a&gt;,
the code itself was solid and did not require any changes.  However, to ensure things
were properly tested, I added 6 new scenario tests for the rule.  As testing support for
rules within Block Quote elements and List elements has been lacking for some of
the previous rules, I made sure to add tests for different forms of those elements.
In addition, as this rule deals with two headings have the same text, I added extra
tests to verify that adding a single space or an inline element (such as adding
emphasis) is enough to make the headings not equal.&lt;/p&gt;
&lt;p&gt;Looking at
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_026.py"&gt;Rule md026&lt;/a&gt;,
the code was bulky and needed a bit of refactoring, but the code itself was solid.
As this rule deals with the content of Atx Heading tokens and SetExt tokens, there
was no need to check out any weird conditions.  Doing my due diligence, I ran
through some experimental tests to see if I missed anything.  Everything that I threw
at the rule emitted the data that I expected without fail, including the line number
and column number.  After checking to make sure that some form of each experimental test
was present in the scenario tests, it was on to the next rule.&lt;/p&gt;
&lt;p&gt;Similar to the previous two rules,
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_036.py"&gt;Rule md036&lt;/a&gt;
did not require any changes to the code as it deals with a focused examination
of emphasized text within a Paragraph element.  And as with the scenario tests for
previous rules, some quick experimental testing did not reveal anything that
had been missed with those scenario tests outside of containing them within
Block Quote elements and List elements.  Those two scenario tests were easily
added and worked without any changes, so it was on to the last rule.&lt;/p&gt;
&lt;p&gt;To say that ending up with
&lt;a href="https://github.com/jackdewinter/pymarkdown/blob/main/pymarkdown/plugins/rule_md_047.py"&gt;Rule md047&lt;/a&gt;
was anticlimactic would be an understatement.  This rule has one and only one very
narrowly defined condition as part of its rule: does the document end with a blank line.
Let me just say that it took less than 10 minutes to verify the code was working
as desired and the scenario tests were covering everything properly.  Yup,
that easy.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, the first thing that I need to confess to my readers is that I did not listen
to my own advice.  I want to release this project so much that I pushed ahead with
coding work on the rules even though I knew I was having issues with the quality
of that work. And to be honest, I ended up paying for it with headaches and
having to reexamine the code that I had already completed to make sure that I did not
mess anything up.  Hopefully one of these days I will learn to not push
ahead so much.&lt;/p&gt;
&lt;p&gt;As to the couple of days that I had hoped to take to get the rules into shape,
that did not happen.  It is okay that it did not happen, the work took as long
as it needed to take to get to a solution that I am confident about.  Sure,
I would love to get some of that week back that I lost working on Rule md018,
but it happened.  Most of the rules took a decent one to two hours to
properly inspect and fix, and I am okay with that.  It is the level of confidence
that I have in shipping an initial release with those rules that I am
concerned with.&lt;/p&gt;
&lt;p&gt;To that end, I think I am doing very well.  I made some notes about things to
check in the rules, like I always do.  But I am certain that anything
that I find will be a small issue, not a big issue link Rule md018.  I am
also certain that when I start documenting the various rules for the initial
release, I will find at least a couple of inconsistencies that I will need
to look at.  Never a dull moment!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With each plugin rule examined and working properly, I needed to get back to
my proper coding mindset and make sure that each rule was passing all quality
bars and each rule was properly documented.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Anxiety</title><link href="https://jackdewinter.github.io/2021/04/25/anxiety/" rel="alternate"></link><published>2021-04-25T00:00:00-07:00</published><updated>2021-04-25T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-04-25:/2021/04/25/anxiety/</id><summary type="html">&lt;p&gt;Will anyone read my articles?  Will anyone understand what I am trying to say with those
articles?  What will people think when they read my articles?  These are normal feelings
for a normal person to feel when they write an article.  Did I say the right things?  Did
I talk …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Will anyone read my articles?  Will anyone understand what I am trying to say with those
articles?  What will people think when they read my articles?  These are normal feelings
for a normal person to feel when they write an article.  Did I say the right things?  Did
I talk too much or too little?  Did they laugh at what I said because they thought I was
&amp;ldquo;ha-ha&amp;rdquo; funny or &amp;ldquo;weird&amp;rdquo; funny?  Those are normal feelings for a normal person to feel
when they have a conversation with someone else.  Do I contribute my share to
my team at work?  Do I help my team work more efficiently, or am I
constantly slowing them down?  When my team needs me, am I there to help?  Those are
normal feelings for a normal person to feel about their workplace.&lt;/p&gt;
&lt;p&gt;Imagine writing those articles with barely any intuitive understanding of how
people may respond, only that understanding gained from hard fought experience.  Visualize
trying to have a conversation without having any decent grasp on the social cues that
most people use to guide their conversations in the right direction.  Consider the
difficulties others have in trying to navigate the meandering stream that is your team,
your workplace, your culture.  Try thinking about these three difficulties overlapping
and happening at the same time.&lt;/p&gt;
&lt;p&gt;That is an oversimplification of how people with Autism feel a lot of the time. However,
I feel that those descriptions start to encompass the difficulties that I face every day.
Trying to talk to others about how you think and feel is a daunting task for anyone.  But
add another level of difficulty on to that conversation because you know that you think
differently than most people.  That is why a lot of people with Autism, people that
want to try and fit in, choose not to disclose their Autism to those around them.
I guess most of the time people decide the pain of hiding who they truly are is less
painful than talking about how different they are than others.  I know I kept on
making that exact decision for myself for years before I decided no more.&lt;/p&gt;
&lt;p&gt;And the personal decision not to disclose often causes negative consequences down the line.
As this article from
&lt;a href="https://www.psychologytoday.com/us/basics/autism/autism-and-the-workforce"&gt;Psychology Today&lt;/a&gt;
states, 20 percent of people are unemployed and only 58 percent of people that are adults
under 25 work for pay.  This isn&amp;rsquo;t the first time I have heard numbers like these. And,
as the article states, other estimates are much higher.  But
those percentages sound reasonable to me.&lt;/p&gt;
&lt;p&gt;Picture yourself as being a person with Autism, sitting in an interview room.  You
try to form that bond with the hiring manager, even though it is hard for you to
establish connections with other people.  In addition, its incredibly difficult to
look your interviewer in the eye when talking, which makes things worse.  Even if you
make it through the emotionally jarring interview
process, you know that you are going to be constantly trying to understand the social
dynamics of that new workplace.  That is a tiring job for someone with Autism, whether
that person is successful or not.&lt;/p&gt;
&lt;p&gt;Even if you find the courage to decide to disclose to others that you have Autism, many of
those problems do not go away.  If the interviewer does not understand Autism, they might
evaluate your interview like a normal person.  That never goes well.  While I don&amp;rsquo;t
blame them, quite a few of my interviews have ended with a polite &amp;ldquo;we think you are a
technical fit, but I don&amp;rsquo;t think you fit into our company culture&amp;rdquo;.  And hopefully your
hiring manager is present at a successful interview so you can also interview them.  If
not, you may end up in a situation where you don&amp;rsquo;t know how your immediate supervisor
will react to your Autism.  Even worse, you meet the hiring manager and they soon get
reorganized within your company, with you working for someone who couldn&amp;rsquo;t care
less about you having Autism.  That sucks.  Been there.&lt;/p&gt;
&lt;p&gt;If you are incredibly lucky, like I have been in my last couple of jobs, your team&amp;rsquo;s
management understands that you are different, but they need your help to be educated on
how &amp;ldquo;you&amp;rdquo; are different.  From personal
experience, this is a good position to be in.  But even in that position, I worry that I
take up too much of their time with things that they consider to be trivial.  You see, I
do not intuitively know what is trivial to them, just what I have observed and learned
from past conversations with them.  Rarely is there any intuitive component to learning
from these conversations, so I have had many conversations with people that started with words like
&amp;ldquo;I remember you said&amp;rdquo;, had words like &amp;ldquo;I interpreted that to mean&amp;rdquo; in the middle, and
words like &amp;ldquo;I&amp;rsquo;ll try and understand better next time&amp;rdquo; at the end.  I do understand that
happens to everyone, but I have no clue on what a good or bad level of that happening is.&lt;/p&gt;
&lt;p&gt;And even those things are not the worst parts of how it feels like to be someone with
Autism.  For a lot of people with Autism, there is the anxiety.  For me, that anxiety
is fueled by my ability to analyze.  In each of the situations I have outlined so far,
my mind is racing, trying to analyze each of those possible outcomes and trying to select
the best outcome based on limited information.  If I am lucky enough to have found a
pattern that helps me avoid analyzing some of those outcomes, that pruning is almost
always based on previous experiences and my understand of those experiences. That means
that I often make bad choices based on bad experiences or an incomplete understanding of
those experiences.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;If you know someone with Autism that is doing better than average, chances are they can
mitigate some of the issues that come with Autism with some of the positive
aspects of Autism.  For myself, while my seemingly never sending stream of analysis can
be paralyzing, it can also be very useful.  In my professional job as a Software
Development Engineer in Test (or SDET for short),
being able to analyze the applications that I write test automation for is a very big
asset.  Without spending too much energy, I can quickly digest either source code or
documentation for a project and understand it without too much effort.  As I go, I form
a list of questions that help me clarify my understanding, sometimes down to a very fine
degree of understanding.  Using all that information together, I can quickly generate an
analysis of that project&amp;rsquo;s strengths and weaknesses, providing risk/impact/benefit
assessments.  I can then take those assessments and generate a solid plan on how to
mitigate those tests with manual testing and test automation, providing ideas on how
to measure the efficiency and coverage of those tests to my management.  All this
good stuff comes from my ability to analyze.&lt;/p&gt;
&lt;p&gt;And yes, I believe that I do a great job and that job contains many tasks that I am very
well suited to executing.  But it is also something I cannot turn off.  I can lose myself
temporarily in things like my writing, my music, and my movies.  But when those are not
there, my mind starts swirling again trying to analyze everything around me.  And it is
not only the current things that my mind analyzes, but things that have occurred in the
past couple of weeks.  I will be out walking our dog when I start to think about all
sorts of things, unable to just enjoy walking our dog.  To be clear, it is not our dog&amp;rsquo;s
fault that I don&amp;rsquo;t always enjoy our walks, it is mine. I just cannot stop my mind from
racing around like a hamster on drugs trying to run a four-minute mile in three minutes.&lt;/p&gt;
&lt;p&gt;So how does all of this relate to anxiety?  For me, as those different scenarios are
playing out in real life, my mind is racing to analyze that stream of data as I am living
through it.  Sometimes it feels like I continuously have a set of sports announcers in my
head giving me a critique, questioning every word that I uttered and every expression and
micro-expression that I emoted.&lt;/p&gt;
&lt;p&gt;Was I looking at the right places during the
conversation?  Did I maintain enough eye contact, or should I add some more in for good
measure?  Did I now just add to much eye contact, so I am staring at them like a creep?
Ooh, they are wearing a nice piece of jewelry that sparkles.  Crap, I looked at the bright
shiny thing instead of where I should be looking.  Did they notice?  Even worse, did they
notice that I looked there and think I am checking them out?  They just crossed their
arms. What does that mean for them? If I don&amp;rsquo;t know what it means for them, what does it
mean for most people?&lt;/p&gt;
&lt;p&gt;That level of noise coming from your own brain is hard to drown out.  As we are all
influenced by what we are experiencing, that noise becomes part of the data that I use to
shape my conversations and actions.  And because my experiences are incomplete and that
clatter is not always trustworthy, I have lots of questions.&lt;/p&gt;
&lt;p&gt;Without the tools that a lot
of other people have at their disposal to answer those questions, I am then left with the
bulk of those questions left unanswered.  To make things worse, if I reach out to others
to try and answer those questions, I am not sure which of those questions it is socially
acceptable to ask people.  There is no &amp;ldquo;one level&amp;rdquo;, just the various levels of friendship
or professionalism that they have in their interactions with me. It is frustrating and
induces more anxiety.  And that adds more anxiety back into the process.&lt;/p&gt;
&lt;p&gt;But, as with most things in life, I have a choice.  I can give up, I can fight to
maintain, or I can fight to overcome.  Every day when I wake up, and many times during
the day, I can choose one of those three positions with respect to my anxiety.  I can
leverage my love for music to help me drown out most of the analysis noise, leaving me
with the useful analysis that helps me do my job properly.  I can provide myself a well
contained environment that is healthy but static, so that I don&amp;rsquo;t try and analyze the
movement and behavior of things as they pass through my workspace.  I can take the
proactive step of learning how to breath properly and meditate.  While I never get into
a meditative state, it does help me find some manner of inner peace.  Each little bit
helps.&lt;/p&gt;
&lt;p&gt;As to those questions at the start of the article?  I have a close group of friends and
family whose opinions I trust.  I don&amp;rsquo;t have to make my articles work for everyone; I just
need to focus on getting my message across to that small group of people.  By narrowing my
focus, it helps me drown out some of that noise.  On conversing with others, if I am
engaging with someone frequently, I usually warn them that I have Autism and can (and
will) talk for hours.  Most people are understanding, and after the usual bit of
apprehension, realize that I am just trying to find something to talk to them about to
make them smile or laugh.  Often times they know someone with some form of Autism and
they will then ask for some help in relating to that person.  With respect to my team at work,
I just make sure to overcommunicate and use reflective
communication to ensure that I am understanding things properly.  And yes, I use the
I-phrases like &amp;ldquo;what I heard&amp;rdquo; and &amp;ldquo;what I understand&amp;rdquo;.  After all, I am asking for their
help, not accusing them of doing something wrong.  In a fair world, we would both
work equally on that communication.  But the world is not fair, so I need to be the
one to focus on how I communicate.&lt;/p&gt;
&lt;p&gt;That is why every day I choose to wake up and be as positive as I can be. Even on the
bad days where I seem to feel the weight of the world on my shoulders. I can either let
that anxiety drag me down, or I can be positive and try and make a positive impact on the
world and the people around me.&lt;/p&gt;
&lt;p&gt;You see, if I don&amp;rsquo;t push back against my own anxiety, no one else will.  It&amp;rsquo;s all up to
me.&lt;/p&gt;</content><category term="Autism"></category><category term="Autism"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Gearing Up For Plugins</title><link href="https://jackdewinter.github.io/2021/04/19/markdown-linter-road-to-initial-release-gearing-up-for-plugins/" rel="alternate"></link><published>2021-04-19T00:00:00-07:00</published><updated>2021-04-19T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-04-19:/2021/04/19/markdown-linter-road-to-initial-release-gearing-up-for-plugins/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/12/markdown-linter-road-to-initial-release-creating-a-package/"&gt;last article&lt;/a&gt;, I talked about
how I worked through the issues to create an installable package for the project.  In
this article, I talk about gearing up for the work that I need to do on the plugins to
get them ready for the release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/12/markdown-linter-road-to-initial-release-creating-a-package/"&gt;last article&lt;/a&gt;, I talked about
how I worked through the issues to create an installable package for the project.  In
this article, I talk about gearing up for the work that I need to do on the plugins to
get them ready for the release.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having made great progress towards the initial release, I knew that I needed to spend
some time focusing on the heart of the PyMarkdown linter project: the rule plugins.  To be
honest, the last time that I have spent any serious time looking at the rules was at
least five or six months ago.  In that time, I have changed a lot of code, both improving
how things performed and fixing issues.  It just made sense that before I release the
project, that I go through the already implemented rules and make sure they get the same
thorough treatment that I have given the rest of the project.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/2c3d4f65c9f1aa1cbd079f6939c6fbb4d3a7008c"&gt;03 Apr 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/2ee5154b52250231e7f5ea1afc6582c5655521c9"&gt;10 Apr 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="where-to-start"&gt;Where To Start?&lt;a class="headerlink" href="#where-to-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at the current set of issues that I had with the configuration system, I noticed
two little problems and one slightly bigger problem.  The first little problem had
to deal with the error output from the plugin manager.  If there was any kind of
exception in the plugin, it was being handled and replaced with a more standard error.
But the issue that I had with it was that I needed more information to be provided with
that error, to debug plugin issues more effectively.  The second problem was the
inverse of the first problem: too much information.  When listing the plugins from the
command line, I felt that I was providing too much information and needed a way to filter
out plugins that were in development.&lt;/p&gt;
&lt;p&gt;The bigger problem was going to take more time, but I also felt that it was important.  I
needed to find an effective way to override any configuration file properties from the
command line.
In any useful command line tool that I have used, that tool almost always has support
for a configuration file and configuration from the command line.  Having used tools
with this functionality implemented, I sincerely felt it is a better, more efficient way
to work.  I felt it was important enough to take the time to implemented it and do
implement it right.&lt;/p&gt;
&lt;p&gt;With those three issues to fix, it was time to get to work!&lt;/p&gt;
&lt;h2 id="adding-in-where-exceptions-occur"&gt;Adding In Where Exceptions Occur&lt;a class="headerlink" href="#adding-in-where-exceptions-occur" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned above, the first issue that I wanted to tackle was one that I believe is
helpful in debugging issues with PyMarkdown’s rule plugin modules.  Prior to this change,
if one of the rules thrown an exception, plenty of information was included about the
exception that occurred.  What that information that was missing was any information
detailing where the parser was in the Markdown document when the exception occurred.
While that
may seem like a small thing, that extra content is often pivotal to diagnosing why the
exception was raised in the first place.&lt;/p&gt;
&lt;p&gt;Thankfully, adding that information was rather trivial.  To start, the &lt;code&gt;__init__&lt;/code&gt; function
of the &lt;code&gt;BadPluginError&lt;/code&gt; class was changed to accept four new arguments: &lt;code&gt;line_number&lt;/code&gt;,
&lt;code&gt;column_number&lt;/code&gt;, &lt;code&gt;actual_line&lt;/code&gt;, and &lt;code&gt;actual_token&lt;/code&gt;.  The handling of those arguments
was then added to the end of the processing of the &lt;code&gt;formatted_message&lt;/code&gt; variable in
the &lt;code&gt;__init__&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;position_message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"({line_number},{column_number})"&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;position_message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"(Line {line_number})"&lt;/span&gt;
        &lt;span class="n"&gt;formatted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{position_message}: {formatted_message}"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;actual_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;formatted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{formatted_message}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Actual Line: {actual_line}"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;actual_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;formatted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{formatted_message}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Actual Token: {ParserHelper.make_value_visible(actual_token)}"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, if the &lt;code&gt;line_number&lt;/code&gt; argument is provided, then the &lt;code&gt;line_number&lt;/code&gt; and
optionally the &lt;code&gt;column_number&lt;/code&gt; are added to the end of the &lt;code&gt;formatted_message&lt;/code&gt;
variable.  Additionly, if a line is being processed when the error occurs, the
&lt;code&gt;actual_line&lt;/code&gt; is specified, and that variable is added on its own line.  Similarly,
if a token is being processed when the error occurs, the &lt;code&gt;actual_token&lt;/code&gt; is added
on its own line.&lt;/p&gt;
&lt;p&gt;With that work completed, it was then time to wire up the other side of the exception:
where the &lt;code&gt;PluginManager&lt;/code&gt; class raised those exceptions.  To ensure that the extra
information would only be provided when requested, its presence was enabled by passing the
&lt;code&gt;arg.show_stack_trace&lt;/code&gt; variable
from the command line into the class.  Once set as the &lt;code&gt;self.__show_stack_trace&lt;/code&gt;
member variable, the &lt;code&gt;next_line&lt;/code&gt; function was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enabled_plugins_for_next_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;actual_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;BadPluginError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual_line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;actual_line&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the &lt;code&gt;next_token&lt;/code&gt; function was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Inform any listeners of a new token that has been processed.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enabled_plugins_for_next_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;actual_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;BadPluginError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;actual_token&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the &lt;code&gt;next_line&lt;/code&gt; function, the &lt;code&gt;line_number&lt;/code&gt; is always passed on to the exception when
it is raised.  Keying off of the &lt;code&gt;self.__show_stack_trace&lt;/code&gt; member variable, the
&lt;code&gt;actual_line&lt;/code&gt; is either set to &lt;code&gt;None&lt;/code&gt; or to the current line.  As expected, the changes
to the &lt;code&gt;next_token&lt;/code&gt; function perform the same actions, just with a token-based approach
instead of a line-based approach.&lt;/p&gt;
&lt;p&gt;Once this code was in place, I started to execute the scenario tests, and was welcomed
by the behavior that I expected.  The four scenario tests that I expected would
change did change.  In addition, when I added two additional scenario tests to ensure
that the code was properly covered, the output for those two tests was as I expected.
With a bit of cleanup to ensure that all &lt;code&gt;PyLint&lt;/code&gt; checks pass, it was then on to the
next planned change.&lt;/p&gt;
&lt;h2 id="only-displaying-implemented-plugins"&gt;Only Displaying Implemented Plugins&lt;a class="headerlink" href="#only-displaying-implemented-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the initial release, I wanted everything to look nice and clean.  As such, when I was
going through the command line to document what I saw there, there was something in the
output for the &lt;code&gt;plugins list&lt;/code&gt; subcommand that I did not like: unimplemented rules were
showing up.  I wanted those “in-development” rules plugins to be included in the project
to remind me to complete them, but I did not want them to show up until they were done.
When I added the version numbers for all the rules, I set the version numbers of those
“in-development” rules to &lt;code&gt;0.0.0&lt;/code&gt; as a visual reminder that they were not yet ready.
But now that I wanted to clean things up, that did not look as clean as I wanted it to,
so I needed to change it.&lt;/p&gt;
&lt;p&gt;To preserve the existing behavior, I changed the command line parser to implement a
new &lt;code&gt;--all&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sub_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"--all"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"show_all"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"show all loaded plugins (default is False)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, in the &lt;code&gt;__handle_argparse_subparser_list&lt;/code&gt; function that handles the list of
plugins, I made a small change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_version&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"0.0.0"&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_all&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These two small changes together specified that by default, if a plugin containing a
rule has a version of &lt;code&gt;0.0.0&lt;/code&gt;, it will be skipped over in the list, unless the &lt;code&gt;--all&lt;/code&gt;
flag is specified.  Scenario tests that previously emitted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  md009  no-trailing-spaces     False              False              0.0.0
  md019  no-multiple-space-atx  True               True               0.5.0
  md029  ol-prefix              False              False              0.0.0
  md039  no-space-in-links      False              False              0.0.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;now emitted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  md019  no-multiple-space-atx  True               True               0.5.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;unless the &lt;code&gt;--all&lt;/code&gt; flag was set.  By default, only those rules that were no longer in
development would be listed.  In my eyes, it just looked cleaner and more correct.&lt;/p&gt;
&lt;h2 id="setting-configuration-values-manually"&gt;Setting Configuration Values Manually&lt;a class="headerlink" href="#setting-configuration-values-manually" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the two small issues out of the way, it was time for me to focus on the large
issue.  The
definition of the issue itself was easy.  There already existed a good way to set
configuration values using the configuration files, as mentioned in my article on
the project’s new
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/"&gt;configuration system&lt;/a&gt;.
But for me, that was not enough.  I wanted to be able to set configuration values
directly from the command line.&lt;/p&gt;
&lt;h3 id="why"&gt;Why?&lt;a class="headerlink" href="#why" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I am starting to use any tool like the PyMarkdown linter, I usually need to
experiment with the configuration to get it dialed in the way I want it.  With tools that
only have a configuration file, I find that that process that I use to figure out
settings is inefficient.  That process involves a lot of repetitions of the following
tasks: look something up or consult the tool’s command line help, figure out
a variation that is close to how I want it, change the configuration file, save that file,
and run the tool to verify the new behavior.  The biggest issue I have with this process
is that I am
constantly switching contexts from one tool to another, figuring things out for the next
step.  The second biggest issue is that it is very easy to forget the “save that file”
step of the process.  I do that a lot!&lt;/p&gt;
&lt;p&gt;Then there are those few tools that I find both useful and efficient, like PyTest.  By
default,
PyTest reads its configuration from the &lt;code&gt;setup.cfg&lt;/code&gt; file.  However, any setting in the
tool can be overridden from the command line.  That one simple change made configuring
PyTest simple and easy.  Sure, I still had the consult, figure, and execute steps from
above, but I eliminated the change and save steps.  To make the PyMarkdown project easier
to configure for users, I wanted to adopt a similar style of interface: configuration
file for “tested” values and the command line for “experimental” values.&lt;/p&gt;
&lt;h3 id="figuring-out-requirements"&gt;Figuring Out Requirements&lt;a class="headerlink" href="#figuring-out-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first step in adopting a similar type of interface for the PyMarkdown project was to
take the time to figure out a solid set of requirements.  Specifying the property name
from the command line was the relatively easy part.  As I had used the &lt;code&gt;.&lt;/code&gt; character as a
property name separator character, there were a couple of easy combinations that I needed
to prevent against as they made no sense.  Then focusing in on each one of those property
parts, there was another set of requirements that arose from ensuring that each part was
consistent and valid. Adding the &lt;code&gt;=&lt;/code&gt; character to separate the property name from the
property value add a couple of small requirements, but nothing big.  For good measure,
I decided that whitespaces within the property name were going to be too much trouble,
so I added those characters to the list of illegal characters in a property name.&lt;/p&gt;
&lt;p&gt;Then there was the big design decision:  How to handle the property values?  At this
point, the configuration system itself can handle properties that are strings, integers,
and booleans.  Without any modifications, the command line flag &lt;code&gt;-set key=value&lt;/code&gt; can
handle only one type of property values: strings.  I needed to figure out a simple way
to allow for that one type to be extended to include the extra types supported by
the configuration system.  The question was how to do that in a way that made sense?&lt;/p&gt;
&lt;h3 id="research"&gt;Research&lt;a class="headerlink" href="#research" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A good subtitle for this section could be “Jack sits around and scribbles on paper like a
maniac for a week”.  Even if that is what it looked like, “Research” was a more precise
definition of what I was doing.  As readers of past articles might have picked up, I try
to always put my best work out there, so I go the extra distance to try and make the
right decisions for the right reasons.  This was no
different.  The problem that I was facing was that there were few good examples out there
to compare to.&lt;/p&gt;
&lt;p&gt;I do not blame other teams for taking the easy way out and making simple decisions.  If
you have a configuration system that is relatively simple, the design decisions that come
out of providing information to that system are also relatively simple.  When I
looked at other configuration systems and interfaces, most of what I found were
simple configuration systems.  If the tools went so far as to provide any additional
interfaces, those provided interfaces were also simple.  To be plain and concise, for a
lot of applications, only supporting a string type
is perfectly fine, so their configuration systems support that.  If any extra meaning is
to be imparted to that string, it is up to the developer to add that extra level of
meaning and handle any errors.&lt;/p&gt;
&lt;p&gt;The problem with that approach is that the PyMarkdown project does not have a simple
configuration system, it has a
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/#which-is-best-for-this-project"&gt;complex one&lt;/a&gt;.
As part of the design of the configuration system, it just made sense to have that system
understand the difference between the different types of data.  For me, to not support
that functionality would make the configuration system seem like it was half done.  But
now I knew that I had to come up with an equally easy solution for manually setting the
property values as I had for the rest of the configuration system.&lt;/p&gt;
&lt;p&gt;I tried many different alternatives that attempted to figure out the type of the string
without any explicit declarations being used.  But for every 95% of the cases that I was
able to get working well, the remaining 5% of the cases always seemed to sink the
approach.  One good example is the string &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt;.  Is it meant to be a string
or is it meant to be a boolean?  Similarly with the string &lt;code&gt;010&lt;/code&gt;.  Is it meant to be a
string or an integer?  If it is an integer, is it in decimal form or binary form?  While
I can make sense of when to translate or not, figuring out an algorithm to implicitly
make that same decision seemed pointless.  In addition, I did not want any required
translation to occur any later than it had to.  If that translation fails, I would rather
the translation failed fast, as soon as it could reasonably fail.&lt;/p&gt;
&lt;h3 id="where-did-i-land"&gt;Where Did I Land?&lt;a class="headerlink" href="#where-did-i-land" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Like many other features in this project, after spending a good amount of time trying to
do things the fancy way, I was able to find success in using the simple approach.  For
the configuration values, I decided that a string should only be interpreted as something
else if the user explicitly specifies so.  As I mentioned in the last section, I was able
to make sense of when to translate or not and I believe the user is also the best
entity to decide whether to translate or not.  Therefore,
I decided to use the &lt;code&gt;$&lt;/code&gt; character to start special handling of translation of the
configuration value to other types.&lt;/p&gt;
&lt;p&gt;Hopefully keeping it simple, if the configuration string is of the form &lt;code&gt;key=value&lt;/code&gt; or
&lt;code&gt;key=$$value&lt;/code&gt;, then the string &lt;code&gt;value&lt;/code&gt; is assigned to the property named &lt;code&gt;key&lt;/code&gt;.  If
that value needs to be an integer, then the form &lt;code&gt;key=$#value&lt;/code&gt; is used.  Similarly, if
that value needs to be a boolean, then the form &lt;code&gt;key=$!value&lt;/code&gt; is used.  Trying to keep
things simple, I figured that a decent percentage of the users will not have issues
identifying the &lt;code&gt;$&lt;/code&gt; character with a string, the &lt;code&gt;#&lt;/code&gt; with an integer, and the &lt;code&gt;!&lt;/code&gt; with
a boolean.  To further keep things simple, the integer can only be provided in the normal
base 10 notation (with a sign and leading zeros a sign if desired) and the boolean is set
to true if lowercase value equals the string &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After spending some time to enumerate all the different scenarios that I wanted to handle,
I felt good about the research.  The only thing I was concerned about were the boundary
cases, so I examine the algorithms again looking for any potential issues.  I felt mostly
silly for missing one of the boundary conditions, but I did find it before I started
coding, that was the important thing.  That boundary condition was to have a &lt;code&gt;$&lt;/code&gt;
character that was not followed by any other of the type characters.&lt;/p&gt;
&lt;p&gt;A couple of quick adjustments to the algorithm, and another check to make sure that I
did not miss any other boundary cases, and it was on to the implementation!&lt;/p&gt;
&lt;h3 id="implementation"&gt;Implementation&lt;a class="headerlink" href="#implementation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After all that research, I felt an extra sense of urgency to get this feature completed.
I do not regret taking almost six days to figure out the right decision for this feature,
but it was six days.  I wanted to get this feature completed so I could move on to the
next thing in the issues list.  Given the research from above, I already had more than
ten scenarios derived, so I coded each scenario into its own scenario test and
started to get to work coding the new &lt;code&gt;set_manual_property&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The first version of the new &lt;code&gt;set_manual_property&lt;/code&gt; function was simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;__assignment_operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"="&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_manual_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combined_string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;equals_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;combined_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__assignment_operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;property_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;combined_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;equals_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;combined_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;equals_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__flat_property_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keeping things simple, my goal was to just get the first scenario tests with the simplest
scenario passing.  As such, the task was simply to split the string up into its
constituent parts and add it to the dictionary.  It was a simple start, but a good start.&lt;/p&gt;
&lt;h3 id="verifying-the-manual-property-string"&gt;Verifying The Manual Property String&lt;a class="headerlink" href="#verifying-the-manual-property-string" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the foundation in place, it was then time to start adding the layers.  The first
layer that i needed to add was to verify the form of the manual property string.  Where
possible, I strongly believe that a utility should provide as much information about
why something is wrong as is possible.  With that in mind, I created the first iteration
of the &lt;code&gt;verify_manual_property_form&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;verify_manual_property_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_verify&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_verify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Manual property form must be a string."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;equals_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string_to_verify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__assignment_operator&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;equals_index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"Manual property key and value must be separated by the '=' character."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;string_to_verify&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was not much, but it was a good start.  This function was there to verify that the
entire string was a properly formed string, with good error messages if it was not.
With that accomplished, it was on to the next step.&lt;/p&gt;
&lt;h3 id="verifying-the-property-key"&gt;Verifying The Property Key&lt;a class="headerlink" href="#verifying-the-property-key" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next step was to extend the verification to verify that the property keys on the
left of the manual property string were validly formed.  This was easily done by adding
these two lines at the end of the &lt;code&gt;verify_manual_property_form&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;property_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string_to_verify&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;equals_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify_full_key_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that call to the new &lt;code&gt;verify_full_key_form&lt;/code&gt; function coded, it was time to implement
that function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;verify_full_key_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__separator&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__separator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Full property key must not start or end with the '{ApplicationProperties.__separator}' character."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;doubles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{ApplicationProperties.__separator}{ApplicationProperties.__separator}"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;doubles_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doubles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;doubles_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Full property key cannot contain multiples of the {ApplicationProperties.__separator} without any text between them."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like the previous function, this function takes a slice of the string to verify
and focuses on that slice.  For this function, that focus was on making sure that the
&lt;code&gt;property_key&lt;/code&gt; argument was validly formed.  This task broke down into two checks: does
the key start or end with the separator character and does the
key contain two separator characters in a row.  By focusing on these checks, the function
can then return the &lt;code&gt;property_key&lt;/code&gt; argument knowing that there are no cases of any part
of that property key that does not contain at least one character.&lt;/p&gt;
&lt;p&gt;And just like the last section, it was then on to the next, and in this case, last step.&lt;/p&gt;
&lt;h3 id="verifying-the-property-key-parts"&gt;Verifying The Property Key Parts&lt;a class="headerlink" href="#verifying-the-property-key-parts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the same way that I added to the call to the &lt;code&gt;verify_full_key_form&lt;/code&gt; function to the
&lt;code&gt;verify_manual_property_form&lt;/code&gt; function, I now added a call to the &lt;code&gt;verify_full_part_form&lt;/code&gt;
function to the &lt;code&gt;verify_full_key_form&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;split_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__separator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;split_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify_full_part_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Constricting the focus even further, it was now time to examine each part of the
&lt;code&gt;property_key&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;verify_full_part_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Given one part of a full key, verify that it is composed properly.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__assignment_operator&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Each part of the property key must not contain a whitespace character or the '{ApplicationProperties.__separator}' character."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"Each part of the property key must contain at least one character."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;property_key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having eliminated all of the high-level checks, this function could then focus on the
task of ensuring that each part of the property key was validly formed.  That task was
then simply to check two things: that the part of the key did not contain a whitespace
character or the assignment character (&lt;code&gt;=&lt;/code&gt;), and that the part had at least one character
in it.  I will admit freely that the last check was probably overkill. I just felt better
adding it in for now, knowing that I could easily take it out once I proved it was not
needed.&lt;/p&gt;
&lt;p&gt;And with that done, I had the validation for the string passed to the
&lt;code&gt;set_manual_property&lt;/code&gt; function completed.&lt;/p&gt;
&lt;h3 id="why-did-i-do-it-this-way"&gt;Why Did I Do It This Way?&lt;a class="headerlink" href="#why-did-i-do-it-this-way" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One thing I have learned in the years I have been developing software is that it is
important to keep things simple.  If things are simple, they are easy to read.  If they
are easy to read, they are generally easy to debug.  By placing each level of
verification in its own function, I kept things small, concise, and simple. And
as an extra benefit, I could reuse those functions in other parts of the application
properties library!&lt;/p&gt;
&lt;p&gt;Having followed principles like “Keep It Simple”, I do get confused when I see people
trying to cram more than one responsibility into a given function.  Sometimes I can
understand how a single responsibility can organically grow into a pair of
responsibilities, but even in those cases will I try and refactor the code.  Anything
more than two
responsibilities and I wonder why the person who wrote or modified the code did not
refactor it.  From my point of view, the closer you keep the code to being simple
and having a single responsibility, the easier it is to maintain and the fewer bugs
I usually find in them.  Just my experience, but maybe others have a different
experience.&lt;/p&gt;
&lt;h3 id="adding-the-type-system"&gt;Adding The Type System&lt;a class="headerlink" href="#adding-the-type-system" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the changes in place to validate the form of the string and the key part of that
string, it was then time to add the type system I designed, as summarized in the section
&lt;a href="https://jackdewinter.github.io/2021/04/19/markdown-linter-road-to-initial-release-gearing-up-for-plugins/#where-did-i-land"&gt;Where Did I Land?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To add the type system, I started by defining the prefix values at the top of the
&lt;code&gt;ApplicationProperties&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;__manual_property_type_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"$"&lt;/span&gt;
    &lt;span class="n"&gt;__manual_property_type_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"$"&lt;/span&gt;
    &lt;span class="n"&gt;__manual_property_type_integer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"#"&lt;/span&gt;
    &lt;span class="n"&gt;__manual_property_type_boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"!"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, the next step was to explicitly look for the &lt;code&gt;__manual_property_type_prefix&lt;/code&gt;
character with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__manual_property_type_prefix&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This condition was simple to code.  Each of the special sequence starts with a &lt;code&gt;$&lt;/code&gt;
character and contains exactly 2 characters.  Therefore, if the &lt;code&gt;property_value&lt;/code&gt;
variable did not meet that criteria, there was no use taking those extra steps.&lt;/p&gt;
&lt;p&gt;From there, it was then on to adding the first of the types.  Since the string type was
the easiest, and probably going to be the most frequently accessed, it made sense to add
it at the start of the &lt;code&gt;if&lt;/code&gt; block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__manual_property_type_prefix&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__manual_property_type_string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replacing the &lt;code&gt;pass&lt;/code&gt; from the last example with the &lt;code&gt;if-else&lt;/code&gt; conditional, this
handling of the string type was easy.  Knowing that there were other types to come,
this was purposefully coded using an &lt;code&gt;if-else&lt;/code&gt; instead of a &lt;code&gt;trinary assignment&lt;/code&gt;.
At this point, there was either another &lt;code&gt;$&lt;/code&gt; character after the first &lt;code&gt;$&lt;/code&gt; character
or there was not.  In either case, the &lt;code&gt;property_value&lt;/code&gt; was modified to skip over those
characters, as the &lt;code&gt;property_value&lt;/code&gt; variable was already a string type and did not need
any modifications.&lt;/p&gt;
&lt;p&gt;That simplicity was then changed with the introduction of the boolean type.  As per the
design, this value gets assigned a &lt;code&gt;True&lt;/code&gt; value or a &lt;code&gt;False&lt;/code&gt; value based on whether the
lowercase value of the remaining string exactly equals &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__manual_property_type_boolean&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I went back and forth on whether to modify the check to include other values and
handling of whitespace, but I decided to keep it simple as designed. By keeping it
simple, it made it easier to explain and document: it is either &lt;code&gt;true&lt;/code&gt; or it is not.
And stripping whitespace seemed mostly pointless.  I guess someone could pass a
boolean argument with &lt;code&gt;true&lt;/code&gt; as the value.  But I just did not feel like that was
a path that I wanted to take.  So, I decided on no whitespace stripping and no
alternate values.&lt;/p&gt;
&lt;p&gt;Finally, it was time to handle the integer type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__manual_property_type_integer&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Manual property value '{property_value}' cannot be translated into an integer."&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This translation was a bit different than the boolean type in that it may throw an
exception if a bad value was passed for the integer.  I thought this was a useful
scenario and wanted to test it out to make sure it worked properly.  I can see myself
extending these translations in the future and knowing that the system can handle a
&lt;code&gt;ValueError&lt;/code&gt; being thrown is a good thing.&lt;/p&gt;
&lt;p&gt;With the final type wired up, all the scenario tests were all passing properly.  Looking
at the code coverage for the project, I noticed a couple of gaps in the coverage,
so I coded some extra scenarios to cover those gaps.  Other than that, everything was
working as planned.&lt;/p&gt;
&lt;h2 id="wiring-it-up-to-the-command-line"&gt;Wiring It Up To The Command Line&lt;a class="headerlink" href="#wiring-it-up-to-the-command-line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once I had the &lt;code&gt;set_manual_property&lt;/code&gt; function thoroughly tested, it was time to wire it
up to the command line and to get that working.  To do this, I added the following code
to incorporate the command into the base command line parser instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"--set"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"-s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"set_configuration"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"append"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"manualy set properties"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ApplicationProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify_manual_property_form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, in the &lt;code&gt;__set_initial_state&lt;/code&gt; function, I simply passed the value collected
from the command line the &lt;code&gt;ApplicationProperties&lt;/code&gt; instance as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_manual_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is all it took. With that all done, I ran some basic tests, and everything went
fine.  Almost.  When
I decided to set multiple configuration items from the same command line, the &lt;code&gt;append&lt;/code&gt;
action from &lt;code&gt;argparse&lt;/code&gt; kicked in and the &lt;code&gt;combined_string&lt;/code&gt; arguments to the
&lt;code&gt;set_manual_property&lt;/code&gt; function was now an array of strings.  While I had thought about
it when I designed the &lt;code&gt;set_manual_property&lt;/code&gt; function, I did not think it would be an
issue and I guess wrong.  It was a simple omittance, and one that was easy to fix.&lt;/p&gt;
&lt;p&gt;The way that I saw it at the time was that I could either modify the existing function
to handle the “array of strings” case, or I could write a helper function that would
perform that same action, but under a different function name.  I played around with
splitting the functionality out into a new &lt;code&gt;set_manual_properties&lt;/code&gt; function but decided
against it.  With the determination to keep all the code in one place, I added this
block of code to the start of the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combined_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combined_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"Manual property form must either be a string or an iterable of strings."&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;this_exception&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_manual_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There were a couple of cases here that I wanted to handle. I wanted to prevent execution
of the function for non-string arguments other than an iterable of strings.  Without
implementing &lt;code&gt;mypy&lt;/code&gt; and generics, the best I can do is to make sure that if the value
is not a string, then it is an iterable of some sort.  Then, when passing the individual
elements of the iterable instance to the &lt;code&gt;set_manual_property&lt;/code&gt; function, the function
itself can verify that those elements are strings or not.&lt;/p&gt;
&lt;p&gt;It was not perfect, but it was a good design and a faithful implementation.  With these
changes in place, I was looking forward to verifying that the existing rules were
up to date.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This block of work was both normal and humbling at the same time.  From my viewpoint,
this was just me looking at what needed to be cleaned up and getting it done.
That really does not change from project to project or task to task.  But finding
something that I really needed to take a lot of time to focus on and design right was a
bit of a shocker.&lt;/p&gt;
&lt;p&gt;I know I am not perfect.  Clear on that.  But I do my best to see what are my next tasks
and plan the design for those tasks in advance.  If I am going to make a
change to my backyard, I probably have thought about it for at least a month, talked to
at least four or five people about it, and sketched it out at least three or four times.
It’s not that I strive for perfection, I just like to understand the variables of the
task dealt with so I can focus on the implementation problems when I am working on the
task.&lt;/p&gt;
&lt;p&gt;When I started to think about what I needed for to handle types, I honestly thought I
would find plenty of examples that I could use to guide the modelling of my own system.
I was wrong.  It was because of that once omittance that I needed to dig deep and
figure things out on my own and weigh the good point and bad points myself.  To be
clear, it is not the work that I was upset about, but that I missed the need for that
work to be planned for.&lt;/p&gt;
&lt;p&gt;That was the humbling part.  But as I write this article, I am also starting to see it
in a different light.  Yeah, I missed a design point, and my ego was bruised a bit.
So what?  I kept to my principles and did the work to make sure I was making the right
decision.  Do I wish that I could have done that in the spare moments of working on
other stuff?  Sure… but I did not and did it anyway.&lt;/p&gt;
&lt;p&gt;As one of my professors once said to me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Principles aren’t things that you see clearly in the light.  It takes some form of darkness for you to see them for what they truly are.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With all that foundational work out of the way so I can focus on the implemented rules
plugins, I knew my next task was to start working through those plugins and verify that
they worked as advertised.  Stay tuned!&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Creating A Package</title><link href="https://jackdewinter.github.io/2021/04/12/markdown-linter-road-to-initial-release-creating-a-package/" rel="alternate"></link><published>2021-04-12T00:00:00-07:00</published><updated>2021-04-12T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-04-12:/2021/04/12/markdown-linter-road-to-initial-release-creating-a-package/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/05/markdown-linter-road-to-initial-release-cleaning-up/"&gt;last article&lt;/a&gt;, I talked about
resolved the remaining Priority 1 items from the issues list.  In this article, I talk
about how I worked through the issue in creating an installable package for the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having invested a lot of time getting the PyMarkdown project to …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/04/05/markdown-linter-road-to-initial-release-cleaning-up/"&gt;last article&lt;/a&gt;, I talked about
resolved the remaining Priority 1 items from the issues list.  In this article, I talk
about how I worked through the issue in creating an installable package for the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having invested a lot of time getting the PyMarkdown project to a place where I feel
confident in creating an initial release of the project, it was now time for me to create
that release.  To be honest, I was not sure what to expect out of the Python setup
process.  Creating releases for other languages is usually done as an add-on to the
language, not part of the core language as Python does.  As such, I was genuinely
interested in how the process would differ between Python and the other languages I have
written installers for.&lt;/p&gt;
&lt;p&gt;Like everything else in this project, this was going to be a learning experience, and
I was eager to get underway!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/a335ca8974d4260d47b5cd592f8c20e90dda6048"&gt;01 Apr 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/937a1839e2a4695fbbd2b6e2f38c68994faf5c65"&gt;03 Apr 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="where-to-start"&gt;Where To Start?&lt;a class="headerlink" href="#where-to-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While the changes that I needed to perform on the project to get it from its then
state to a packaged state were small, the path to get there was anything but short.
Having done my usual research, I ended up finding three sources that I thought would
be helpful to my effort:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nrempel/python-package-boilerplate"&gt;Nicolas Rempel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/build-your-first-python-package/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.8/distutils/setupscript.html"&gt;Python’s Own Setup Script documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I liked Nicolas’ article on creating Python packages because it was the first article that
I found in my searches that seemed to lay everything out on the table.  It felt that it
provided me with a lot
of useful information in a concrete, easy to digest form.  While I did have a couple of
issues with his examples, I do believe that they were because I was trying to adapt his
example as I went and messed things up.  The FreeCodeCamp article was useful in filling
in the gaps that I found in Nicolas’ article, especially when it came to what to do after
you had a package.  Finally, having the Python 3.8 library documentation helped me fill
in the last bit of the knowledge that I needed to complete the setup process.  Together,
with just a dash of experimentation thrown in for good measure, I was confident that I
could create a Python package.  Even if that effort took a while.&lt;/p&gt;
&lt;h2 id="creating-a-new-setuppy"&gt;Creating a New Setup.py&lt;a class="headerlink" href="#creating-a-new-setuppy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have had a local &lt;code&gt;setup.py&lt;/code&gt; file on my machine for months, it was always something
that I was toying around with, nothing concrete.  As such, I found that it was more
efficient to start from scratch and
create a new &lt;code&gt;setup.py&lt;/code&gt; file based mostly on Nicolas’s article.  I do not have any
issues with his use of mainline function calls, such as the ones that he uses to read the
&lt;a href="https://github.com/nrempel/python-package-boilerplate/blob/master/setup.py"&gt;readme.md&lt;/a&gt;
file from the directory, but I prefer things in functions.  From my perspective, it just
helps me to keep things readable.  I did like the
way he was organizing some of the values at the start of the module and decided to
follow that approach.  Furthermore, I decided that it was more readable to have every
value in variables, instead of being somewhat hidden in the call to the &lt;code&gt;setup&lt;/code&gt; function,
so I also made that change.&lt;/p&gt;
&lt;h3 id="the-most-important-parts-of-setup"&gt;The Most Important Parts of Setup&lt;a class="headerlink" href="#the-most-important-parts-of-setup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For me, the four most important parts of any setup are: name of the package, version of
the package, minimum required platform, and a declaration of any dependencies. Others can
disagree with me on whether these things are the most important parts of any setup script,
but I believe I have a strong argument in my favor.  It is a simple argument: without
these four parts, the rest of the setup script is useless.  Any documentation without
something to document is pointless.  Similarly, any declaration of what needs to be
included in the package and how to access it are useless without that base declaration.
At least in my mind, those four properties are always the foundation of any installation
script.&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;setup.py&lt;/code&gt; module from the article Nicolas wrote as a good set of
&lt;a href="https://idioms.thefreedictionary.com/crib+note"&gt;crib notes&lt;/a&gt;,
I created a very basic module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;runpy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"PyMarkdown"&lt;/span&gt;
&lt;span class="n"&gt;SEMANTIC_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;MINIMUM_PYTHON_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"3.8.0"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_requirements&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;lineiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"install-requirements.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lineiter&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;version_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"./version.py"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"__version__"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PACKAGE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SEMANTIC_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;python_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;MINIMUM_PYTHON_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parse_requirements&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was not much, but it was a good start.  Both the package name and the minimum Python
version required are hardwired in as they are almost never going to change.  The function
&lt;code&gt;get_semantic_version&lt;/code&gt; was written to encompass the code from the article to fetch the
version number, and the &lt;code&gt;parse_requirements&lt;/code&gt; function was written to encompass the
requirements for the project.&lt;/p&gt;
&lt;p&gt;Since I decided to specify the installation requirements for the project in the file
&lt;code&gt;install-requirements.txt&lt;/code&gt;, I added a very simple version of this file with a single
line present:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Columnar
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="moving-version-information-into-a-single-module"&gt;Moving Version Information Into A Single Module&lt;a class="headerlink" href="#moving-version-information-into-a-single-module" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It took me a bit to warm up to this, but after reading
&lt;a href="https://www.python.org/dev/peps/pep-0396/"&gt;PEP 396&lt;/a&gt;,
it just made sense.  If there is any reason to know the exact version of a Python library,
the &lt;code&gt;__version__&lt;/code&gt; field applied to the library name should contain the definitive version
for that library.  Following this PEP just made sense but required some rearrangement of
code in the project.&lt;/p&gt;
&lt;p&gt;Previously, the only place where the version information was kept was in the
&lt;code&gt;__version_number&lt;/code&gt; field of the &lt;code&gt;PyMarkdownLint&lt;/code&gt; class.  While I debated an approach that
would leverage that existing code, the simplicity of simply having a single &lt;code&gt;version.py&lt;/code&gt;
file just made more sense to me.  With the &lt;code&gt;get_semantic_version&lt;/code&gt; function already present
in the &lt;code&gt;setup.py&lt;/code&gt; module, as detailed in the last section, I added the following code to
the &lt;code&gt;PyMarkdownLint&lt;/code&gt; class to reference that same file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vm"&gt;__file__&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;last_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;second_last_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;second_last_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"version.py"&lt;/span&gt;
        &lt;span class="n"&gt;version_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"__version__"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is effectively the same code as in the &lt;code&gt;get_semantic_version&lt;/code&gt; function of
the &lt;code&gt;setup.py&lt;/code&gt; module.  The only changes present were to deduce the executable path
from the &lt;code&gt;__file__&lt;/code&gt; variable
and to determine the relative location of the &lt;code&gt;version.py&lt;/code&gt; file from where that
executable is located.&lt;/p&gt;
&lt;p&gt;After all this work, the only thing that was needed was a new &lt;code&gt;version.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Library version information.&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0.5.0"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and a small change to the &lt;code&gt;test_markdown_with_dash_dash_version&lt;/code&gt; test function to fetch
the version from the &lt;code&gt;version.py&lt;/code&gt; module.&lt;/p&gt;
&lt;h3 id="adding-documentation"&gt;Adding Documentation&lt;a class="headerlink" href="#adding-documentation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With those basics out of the way, it was time to add the documentation basics to
the &lt;code&gt;setup.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_readme_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"README.md"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;readme_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;readme_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Jack De Winter"&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"jack.de.winter@outlook.com"&lt;/span&gt;

&lt;span class="n"&gt;ONE_LINE_DESCRIPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"A GitHub Flavored Markdown compliant Markdown linter."&lt;/span&gt;
&lt;span class="n"&gt;LONG_DESCRIPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_readme_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;LONG_DESCRIPTION_CONTENT_TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"text/markdown"&lt;/span&gt;
&lt;span class="n"&gt;KEYWORDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"markdown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"linter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"markdown linter"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;PROJECT_CLASSIFIERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"Development Status :: 4 - Beta"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"Programming Language :: Python :: 3.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"License :: OSI Approved :: MIT License"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"Operating System :: OS Independent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTHOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTHOR_EMAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ONE_LINE_DESCRIPTION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LONG_DESCRIPTION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description_content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LONG_DESCRIPTION_CONTENT_TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;KEYWORDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PROJECT_CLASSIFIERS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Most of these fields are self-explanatory and are simple string objects or lists of
string objects.   The
three fields that stand apart from that are the &lt;code&gt;LONG_DESCRIPTION&lt;/code&gt; field,
the &lt;code&gt;LONG_DESCRIPTION_CONTENT_TYPE&lt;/code&gt; field, and the &lt;code&gt;PROJECT_CLASSIFIERS&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;LONG_DESCRIPTION_CONTENT_TYPE&lt;/code&gt; field is the easiest of the three as it assumes that
the &lt;code&gt;README&lt;/code&gt; file for the project will always be &lt;code&gt;README.md&lt;/code&gt;.  As such, the MIME content
type for the long description will always be &lt;code&gt;text/markdown&lt;/code&gt;.  For my projects, I feel
that it is a good assumption to make, so that was an easy one to get out of the way. Then,
to ensure that the &lt;code&gt;LONG_DESCRIPTION&lt;/code&gt; field is always up to
date, the &lt;code&gt;load_readme_file&lt;/code&gt; function reads the contents of the &lt;code&gt;README.md&lt;/code&gt; file and places
them into the &lt;code&gt;LONG_DESCRIPTION&lt;/code&gt; field. For me,
these fields just make sense as I can contain a package description of the project and
the GitHub description of the project in one place.&lt;/p&gt;
&lt;p&gt;Finding the right values for the &lt;code&gt;PROJECT_CLASSIFIERS&lt;/code&gt; field was the tasks that I had the
hardest time with out of the three fields.  With a seemingly
&lt;a href="https://pypi.org/classifiers/"&gt;endless page&lt;/a&gt;
of available classifiers, it was hard to narrow down the classifiers to a small set.
While I am not comfortable that I have the right set of classifiers for the project,
I believe I have a good set to start with.&lt;/p&gt;
&lt;p&gt;Looking at that work, the one thing that I needed to do to wrap it up was to
make sure that the &lt;code&gt;README.md&lt;/code&gt; file only contained information I wanted someone to
see when they were having their initial look at the project.  While I do not want
to hide the project’s issues list, I did not want it to be the first thing people
saw.  As such, I moved it over into the new &lt;code&gt;issues.md&lt;/code&gt; file.&lt;/p&gt;
&lt;h3 id="rounding-out-the-setup-properties"&gt;Rounding Out The Setup Properties&lt;a class="headerlink" href="#rounding-out-the-setup-properties" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;According to my research, the only two other fields that I needed to add were the &lt;code&gt;scripts&lt;/code&gt;
field and the &lt;code&gt;packages&lt;/code&gt; field.  The &lt;code&gt;packages&lt;/code&gt; field was the easy one to define out of
those two: I simply needed to list all the packages for the project.&lt;sup id="fnref:duh"&gt;&lt;a class="footnote-ref" href="#fn:duh"&gt;1&lt;/a&gt;&lt;/sup&gt;  While both
examples use the &lt;code&gt;setuptools&lt;/code&gt; module and its &lt;code&gt;find_packages&lt;/code&gt; function, I wanted to
maintain fine-grained control over the packages.  As such, I specified each package name
separately.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ensure_scripts&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"scripts/pymarkdown"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"pymarkdown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"pymarkdown.extensions"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"pymarkdown.plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"pymarkdown.resources"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the specification on how to start the PyMarkdown application, it took me a while to
decide on an action to use for that.  During my research phase, I had three possibilities
for how to interact with the project itself: &lt;code&gt;py_modules&lt;/code&gt;, &lt;code&gt;scripts&lt;/code&gt;, and &lt;code&gt;entry_points&lt;/code&gt;.
There was barely any information on &lt;code&gt;entry_points&lt;/code&gt; and how to use them, so I decided to
not use those unless I found enough information to warrant changing to them.  Looking to
my third reference source, the Python libraries documentation, I found this article
on
&lt;a href="https://docs.python.org/3/distutils/setupscript.html#installing-scripts"&gt;setup scripts&lt;/a&gt;.
As that is what the standard libraries used, I decided that was the best way for this
project.&lt;/p&gt;
&lt;p&gt;Looking at the example that Nicolas provided in his article, I quickly created my
own script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

from pymarkdown import PyMarkdownLint
PyMarkdownLint.main&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but came across one glaring problem right away.  That script would work well on Linux
systems, but my development environment is a Windows machine.  As I use the &lt;code&gt;PyLint&lt;/code&gt;
scanner on all my Python projects, I decided to look at how they solved this problem,
and used their &lt;code&gt;ensure_scripts&lt;/code&gt; function verbatim&lt;sup id="fnref:since"&gt;&lt;a class="footnote-ref" href="#fn:since"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ensure_scripts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linux_scripts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Creates the proper script names required for each platform (taken from PyLint)&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_platform&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"win"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;linux_scripts&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;".bat"&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;linux_scripts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;linux_scripts&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is wonderful in its simplicity!  If the first three characters of the platform
are &lt;code&gt;win&lt;/code&gt;, then the function assumes that the list of scripts must refer to scripts
that will work on a Windows machine.  It accomplishes this by adding another
list of scripts to the list, this new list being comprised of every element of the
original list, but with a &lt;code&gt;.bat&lt;/code&gt; appended to the end.  With that, the last thing
was to copy the &lt;code&gt;.bat&lt;/code&gt; batch file format over from &lt;code&gt;PyLint&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; off
&lt;span class="c1"&gt;rem Use python to execute the python script having the same name as this batch&lt;/span&gt;
&lt;span class="c1"&gt;rem file, but without any extension, located in the same directory as this&lt;/span&gt;
&lt;span class="c1"&gt;rem batch file&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;%~dpn0&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nv"&gt;%*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I was not sure if that batch script was going to work, but if it was good enough for
PyLint, I figured it was a good enough starting place for me.&lt;/p&gt;
&lt;h3 id="almost-finished"&gt;Almost Finished&lt;a class="headerlink" href="#almost-finished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Two simple things were left before my first attempt to compile my first Python package.
The first thing was to add a simple &lt;code&gt;LICENSE.txt&lt;/code&gt; file to the project
to establish the use of the project.  The other was to add a &lt;code&gt;__init__.py&lt;/code&gt; module
to the &lt;code&gt;pymarkdown&lt;/code&gt; directory to make sure that the base of the project was considered
a module for setup to pick up.&lt;/p&gt;
&lt;p&gt;With those two things addressed and out of the way, it was time to compile the setup
for the project!&lt;/p&gt;
&lt;h2 id="the-fun-begins-getting-packaging-to-work"&gt;The Fun Begins: Getting Packaging To Work&lt;a class="headerlink" href="#the-fun-begins-getting-packaging-to-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To start compiling the setup, I included the &lt;code&gt;twine&lt;/code&gt; and &lt;code&gt;setuptools&lt;/code&gt; into my
development environment using &lt;code&gt;pipenv install twine setuptools&lt;/code&gt;.  Once that
was complete, I added the following &lt;code&gt;package.cmd&lt;/code&gt; script to the repository to make things
easier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;rmdir&lt;/span&gt; /s /q dist
&lt;span class="k"&gt;rmdir&lt;/span&gt; /s /q build
&lt;span class="k"&gt;rmdir&lt;/span&gt; /s /q PyMarkdown.egg-info

pipenv run python setup.py sdist bdist_wheel
pipenv run twine check dist/*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was nothing fancy, but it allowed me to repeatedly repackage the project to test
any changes in an efficient manner.  Basically, it removes any signs of a previous
build before running the &lt;code&gt;setup.py&lt;/code&gt; script and then the &lt;code&gt;twine&lt;/code&gt; script.  While it
is not as fancy as the Gradle scripts I have for Java projects at work, I found that it
is uncomplicated and works very well.  I purposefully did not add any error handling to
the batch script as I wanted to make sure I saw all the information that was reported,
unfiltered.&lt;/p&gt;
&lt;p&gt;To assist in testing those changes, I created a new project &lt;code&gt;pymtest&lt;/code&gt; at the same level
as the &lt;code&gt;PyMarkdown&lt;/code&gt; project and left it almost empty for now.  I created that project
to be my test installation environment, useful once I had a package to install.  For now,
I just wanted to get it ready for later.  Thus, I created a simple &lt;code&gt;refresh_package.cmd&lt;/code&gt;
script with these contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv uninstall PyMarkdown
pipenv install ..\pymarkdown\dist\PyMarkdown-0.5.0.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simply, uninstall any existing &lt;code&gt;PyMarkdown&lt;/code&gt; package and install a new one right from
the &lt;code&gt;dist&lt;/code&gt; directory of the &lt;code&gt;PyMarkdown&lt;/code&gt; project.&lt;/p&gt;
&lt;p&gt;Now on to the real work: debugging the install script.&lt;/p&gt;
&lt;h3 id="pass-1-getting-the-version-right"&gt;Pass 1: Getting The Version Right&lt;a class="headerlink" href="#pass-1-getting-the-version-right" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Executing the &lt;code&gt;package.cmd&lt;/code&gt; script, everything worked fine, and I had a new package to
test!  Switching over to my test project, I executed the &lt;code&gt;refresh_package.cmd&lt;/code&gt; batch
script… and waited.  Looking at the output, the &lt;code&gt;uninstall&lt;/code&gt; command was completing
in under a second, but the install command was taking its time on the Resolving
phase of installing the package.  It was agonizing!&lt;/p&gt;
&lt;p&gt;But when it was done, it displayed the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    ERROR: Command errored out with exit status 1:
...    
    FileNotFoundError: [Errno 2] No such file or directory: '..pip-req-build-mfg5j1bu\\version.py'
    ----------------------------------------
ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I tried a couple of different things with no luck before I opened the
&lt;code&gt;PyMarkdown-0.5.0.tar.gz&lt;/code&gt; archive file from the project’s &lt;code&gt;dist&lt;/code&gt; directory and examined
its contents.  When I did that, I noticed that there was no &lt;code&gt;version.py&lt;/code&gt; file anywhere in
the archive.&lt;/p&gt;
&lt;p&gt;At that point, I spent about an hour or so trying to figure out how to get that
&lt;code&gt;version.py&lt;/code&gt; file into the archive at the right place before deciding to go with a more
intuitive approach.  After looking
at how the files were installed after the &lt;code&gt;install pymarkdown&lt;/code&gt; command was completed,
it was obvious that my current approach would necessitate copying the &lt;code&gt;version.py&lt;/code&gt; file
into the &lt;code&gt;pymarkdown&lt;/code&gt; directory.  So, instead of trying to figure out how to do that
“complicated” action, I decided on the “simple” action to move the &lt;code&gt;version.py&lt;/code&gt; file
into the &lt;code&gt;pymarkdown&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;With that decision made, I rewrote the &lt;code&gt;get_semantic_version&lt;/code&gt; in the &lt;code&gt;setup.py&lt;/code&gt;
module as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;version_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"./pymarkdown/version.py"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"__version__"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also rewrote the &lt;code&gt;__get_semantic_version&lt;/code&gt; function in the &lt;code&gt;main.py&lt;/code&gt; module as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_semantic_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vm"&gt;__file__&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;last_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;last_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"version.py"&lt;/span&gt;
        &lt;span class="n"&gt;version_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"__version__"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the &lt;code&gt;version.py&lt;/code&gt; file moved into the &lt;code&gt;pymarkdown&lt;/code&gt; directory, and with both references
to that file now looking for it in the new location, that error was now resolved.&lt;/p&gt;
&lt;h3 id="pass-2-file-name-casing-matters"&gt;Pass 2: File Name Casing Matters&lt;a class="headerlink" href="#pass-2-file-name-casing-matters" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After packaging the project again, I ran the &lt;code&gt;refresh_package.cmd&lt;/code&gt; script and
was now greeted with this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FileNotFoundError: [Errno 2] No such file or directory: 'README.md'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I examined the directory structure of the archive a good four or five times without any
ideas coming to mind.  I even looked at the Python install pages to see if I could find
anything. But all I could find with a list of the
&lt;a href="https://docs.python.org/3.8/distutils/sourcedist.html?highlight=readme#specifying-the-files-to-distribute"&gt;files to distribute&lt;/a&gt;.
This included other types of readme files, but not specifically the &lt;code&gt;README.md&lt;/code&gt; file.
Double checking the project that Nicolas set up, I saw that he was using &lt;code&gt;README.md&lt;/code&gt; as
a source for his long documentation without any apparent extra setup needed to include
that file.  So, I figured it must be something else.&lt;/p&gt;
&lt;p&gt;That is when it hit me.  Windows has many uses as an operating system&lt;sup id="fnref:religious"&gt;&lt;a class="footnote-ref" href="#fn:religious"&gt;3&lt;/a&gt;&lt;/sup&gt;, but one
of the things I do not like about it is the case-insensitivity of the file system.  In
this case, I had called the readme file &lt;code&gt;readme.md&lt;/code&gt; instead of &lt;code&gt;READMD.md&lt;/code&gt;.  Simply
correcting the case of the file name resolved this issue.&lt;/p&gt;
&lt;p&gt;After a simple case of “cannot see the forest
&lt;a href="https://idioms.thefreedictionary.com/cannot+see+the+forest+for+the+trees"&gt;because of the trees&lt;/a&gt;”,
it was on to the next issue.&lt;/p&gt;
&lt;h3 id="pass-3-making-sure-the-right-files-are-included"&gt;Pass 3: Making Sure The Right Files Are Included&lt;a class="headerlink" href="#pass-3-making-sure-the-right-files-are-included" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This time, when I executed the &lt;code&gt;refresh_package.cmd&lt;/code&gt; script after repackaging the project,
I was greeted with this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FileNotFoundError: [Errno 2] No such file or directory: 'install-requirements.txt'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With some newfound experience under my belt, I immediately opened the archive and
found that the &lt;code&gt;install-requirements.txt&lt;/code&gt; file was not in the archive. Thankfully, in
looking for solutions for the last error, I came across a solution to include data
files into the setup process using a &lt;code&gt;MANIFEST.in&lt;/code&gt; file. Located in the same section where
I found the information detailing which files were
automatically included in the setup archive,
&lt;a href="https://docs.python.org/3.8/distutils/sourcedist.html?highlight=readme#specifying-the-files-to-distribute"&gt;that section&lt;/a&gt;
there is information on the &lt;code&gt;MANIFEST.in&lt;/code&gt; file near the end of that section.
Following those instructions, I was quickly able to create a new &lt;code&gt;MANIFEST.in&lt;/code&gt; file
with the following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include install-requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After a quick repackaging and reinstalling, this error was indeed solved.&lt;/p&gt;
&lt;h3 id="pass-4-lather-rinse-repeat"&gt;Pass 4: Lather, Rinse, Repeat&lt;a class="headerlink" href="#pass-4-lather-rinse-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While that file was now present in the archive, the new error was complaining about
a missing directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error: package directory 'pymarkdown\resources' does not exist
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main reason for this directory is to host the &lt;code&gt;entities.json&lt;/code&gt; file.  That file
contains each of the named entities, with the corresponding Unicode character they each
entity maps to.  I tried adding
an &lt;code&gt;__init__.py&lt;/code&gt; and other such workarounds to get the file included, but nothing worked.
Convinced that I had tried other approaches, I followed the same approach as the last
section, and added it to the &lt;code&gt;MANIFEST.in&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include pymarkdown/resources/entities.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I do not want to make it sound that I dislike the &lt;code&gt;MANIFEST.in&lt;/code&gt; approach to including files
in the setup archive.  I don’t.  But to me, it feels like that file is the last option to
include files, with all other options having been exhausted.  For me, that is my own
&lt;a href="https://idioms.thefreedictionary.com/sniff+test"&gt;sniff test&lt;/a&gt;
for whether the use of the &lt;code&gt;MANIFEST.in&lt;/code&gt; file is warranted. For example, I would rather
figure out that I need to change the &lt;code&gt;readme.md&lt;/code&gt; file into the &lt;code&gt;README.md&lt;/code&gt; file before I
thought about adding it to the &lt;code&gt;MANIFEST.in&lt;/code&gt; file.  In this case, I was convinced that
there was no other way to include the file, and as such, I had passed my own sniff test.&lt;/p&gt;
&lt;h3 id="and-it-was-done"&gt;And It Was Done&lt;a class="headerlink" href="#and-it-was-done" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With that change made, I was now seeing the refresh of the packaging complete without
any errors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installing ..\pymarkdown\dist\PyMarkdown-0.5.0.tar.gz...
Adding PyMarkdown to Pipfile's [packages]...
Installation Succeeded
Pipfile.lock (db4242) out of date, updating to (29513d)...
Locking [dev-packages] dependencies...
Locking [packages] dependencies...
 Locking...Building requirements...
Resolving dependencies...
Success!
Updated Pipfile.lock (29513d)!
Installing dependencies from Pipfile.lock (29513d)...
  ================================ 1/1 - 00:00:05
To activate this project's virtualenv, run pipenv shell.
Alternatively, run a command inside the virtualenv with pipenv run.
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="and-now-verifying-the-usage"&gt;And Now, Verifying The Usage&lt;a class="headerlink" href="#and-now-verifying-the-usage" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With everything looking good in the packaging and installation, the next step was
to test the usage of the newly installed library.  With optimism in my heart, I went to
execute my first test command, &lt;code&gt;pipenv run pymarkdown --help&lt;/code&gt;, and I waited.  After a good
couple of minutes, I killed the script, checked things again, and everything seemed fine.&lt;/p&gt;
&lt;p&gt;It seemed like I was not done debugging the setup process quite yet.&lt;/p&gt;
&lt;h3 id="pass-1-proper-script-files"&gt;Pass 1: Proper Script Files&lt;a class="headerlink" href="#pass-1-proper-script-files" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having “imported” the script files from the PyLint project, I hoped they would work
out of the box, but assumed that I would have to do some work to get them operational.
I liked the idea of calling the &lt;code&gt;pymarkdown&lt;/code&gt; script from the &lt;code&gt;pymarkdown.bat&lt;/code&gt; script,
but after 45 minutes and approximately 4 attempts at rewriting the scripts, I gave up.
Just like before, I decided to go with simplicity for both files, the &lt;code&gt;pymarkdown&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;
&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the &lt;code&gt;pymarkdown.bat&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;"from pymarkdown import PyMarkdownLint; PyMarkdownLint().main()"&lt;/span&gt; &lt;span class="o"&gt;%*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of having one script call the other, I opted for matching the contents of both
scripts as closely as possible.  In the shell version, the
&lt;a href="https://en.wikipedia.org/wiki/Shebang_(Unix)"&gt;shebang&lt;/a&gt;
at the start of script takes care of invoking Python and Python itself takes care
of the command line arguments.  In the batch script version, I needed to explicitly
call Python with the &lt;code&gt;-c&lt;/code&gt; argument to tell Python to execute the next argument as
a Python script.  Finally, the &lt;code&gt;$*&lt;/code&gt; at the end of that line causes any arguments passed
to the batch script to be passed to the Python program specified with the &lt;code&gt;-c&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;After a couple of tries, mostly due to small typing mistakes, when I executed the
command line &lt;code&gt;pipenv run pymarkdown --help&lt;/code&gt;, I was welcomed with the help documentation
for the project.  Success!&lt;/p&gt;
&lt;h3 id="pass-2-init-files"&gt;Pass 2:  Init Files&lt;a class="headerlink" href="#pass-2-init-files" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the batch
script issue in the last section resolved, the execution of the test command
&lt;code&gt;pipenv run pymarkdown --help&lt;/code&gt; now yielded this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
  File "&amp;lt;string&amp;gt;", line 1, in &amp;lt;module&amp;gt;
ImportError: cannot import name 'PyMarkdownLint' from 'pymarkdown' (C:\Users\jackd\.virtualenvs\pymtest-W-bOTTm6\lib\site-packages\pymarkdown\__init__.py)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perhaps it is my knowledge of other programming languages, but I favor direct imports
in the files that need them over the use of &lt;code&gt;__init__.py&lt;/code&gt; modules.  For me, it just
seems like overkill in 98% of the cases, leading to a hard-to-understand view of
dependencies between files.  In the case of creating a setup package, this
turned out to be one of the 2% cases that I had not come across yet.  &lt;/p&gt;
&lt;p&gt;But, seeing it as this was an obvious request for a proper &lt;code&gt;__init__.py&lt;/code&gt; module, I added
one to the &lt;code&gt;pymarkdown&lt;/code&gt; package with the contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown.main&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I do not use it in any of the other modules for the project, but it is there for the
&lt;code&gt;setup.py&lt;/code&gt; module and any others that need it.  As such, I can stay true to how I use
&lt;code&gt;import&lt;/code&gt; statements while providing the information that the setup scripts need.
For me, that is a win-win.&lt;/p&gt;
&lt;h2 id="pass-3-including-data-files"&gt;Pass 3:  Including Data Files&lt;a class="headerlink" href="#pass-3-including-data-files" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the &lt;code&gt;pipenv run pymarkdown --help&lt;/code&gt; command now running without any issues, I wanted
to include some more complex examples to test in the &lt;code&gt;refresh_package.cmd&lt;/code&gt; script.  To
that extent, I added the following lines to the end of that file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run pymarkdown plugins list
pipenv run pymarkdown plugins info md048
pipenv run pymarkdown plugins info md047
pipenv run pymarkdown scan ..\blog-content\website\content\articles
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going through the reinstall process with the new version of this script, the installation
and the first three commands all went off without any issues.  However, when it got to the
&lt;code&gt;scan&lt;/code&gt; command, the following error was emitted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BadTokenizationError encountered while initializing tokenizer:
Named character entity map file '..\lib\site-packages\pymarkdown\resources\entities.json' was not loaded ([Errno 2] No such file or directory: '..\\lib\\site-packages\\pymarkdown\\resources\\entities.json').
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going back to the useful
&lt;a href="https://docs.python.org/3.8/distutils/sourcedist.html?highlight=readme#specifying-the-files-to-distribute"&gt;files to distribute section&lt;/a&gt;,
I quickly noticed that one of the items in the list was labelled
&lt;a href="https://docs.python.org/3.8/distutils/setupscript.html#installing-additional-files"&gt;Installing Additional Files&lt;/a&gt;.
This seemed to fit the situation that I had before me exactly.  Reading the information
on the other side of that link, I knew what to do within a couple of minutes.  Within a
couple more minutes, I had this change coded up and inserted at the end of the &lt;code&gt;setup&lt;/code&gt;
function call in the &lt;code&gt;setup.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;data_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;'Lib/site-packages/pymarkdown/resources'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'pymarkdown/resources/entities.json'&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going through the entire process again, everything worked fine, and I was now done
with the test scenarios I had in mind.  I tried a handful of additional scenarios to
make sure I had them all covered, and each scenario worked as I expected it to. I
had a fully functioning install script!&lt;/p&gt;
&lt;h3 id="pass-31-cleanup"&gt;Pass 3.1: Cleanup&lt;a class="headerlink" href="#pass-31-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was not really a pass on its own, but a little bit of cleanup that I wanted to
do.  While looking at various other Python setup articles and library packages, I
decided to add three more arguments to the &lt;code&gt;setup&lt;/code&gt; function call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;maintainer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTHOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;maintainer_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTHOR_EMAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PROJECT_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since I am both the author and the maintainer, it just made sense to set the &lt;code&gt;maintainer&lt;/code&gt;
fields to the same values as with the &lt;code&gt;author&lt;/code&gt; fields.  I also wanted people to be able to
get more information on the project, so setting the &lt;code&gt;url&lt;/code&gt; field also made sense.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Based on my experience with other languages, creating an installation package for the
project in Python was a walk in the park.  There was no fancy extra packaging required,
everything was written in Python.  While it took me about four hours to make sure
everything was working properly, I would estimate that a similar installer for C# or
Java would easily take at least eight hours to get into a similarly finished form.
For me, that is a win.&lt;/p&gt;
&lt;p&gt;In general, I am very pleased with how this work went on getting the setup code into proper
shape.  There were some very good examples that I could lean on to get my code working,
and the starting points were all well-defined.  That made the distance I needed to travel
from sample code to working code very short,  which was very pleasant for once.  During
the creation of the setup script, I did notice a couple of extra things that I want to
clean up before the initial release.  But like before, they are all small and reasonable,
so I am confident I can make short work of them.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the setup packaging complete for now, I move on to simplifying the output from
some of the commands and starting to update the rules for the initial release.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:duh"&gt;
&lt;p&gt;I almost feel that a “duh?!” would be warranted here, but do not feel that it is appropriate. &lt;a class="footnote-backref" href="#fnref:duh" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:since"&gt;
&lt;p&gt;Since I took a look, someone refactored the setup code.  Please look at &lt;a href="https://github.com/PyCQA/pylint/commit/e8b44339a28630e087373416e4e725e454ed025f#diff-60f61ab7a8d1910d86d9fda2261620314edcae5894d5aaa236b821c7256badd7"&gt;this code&lt;/a&gt;, which is the code I cribbed from. &lt;a class="footnote-backref" href="#fnref:since" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:religious"&gt;
&lt;p&gt;This comment is not meant to start a religious war.  I firmly believe that there are many different jobs that need done, with some tools being the obvious choice for that job.  There are other jobs where the tools that can be used are more on personal preference combined with the job at hand.  For myself, operating systems are just that: tools. &lt;a class="footnote-backref" href="#fnref:religious" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Cleaning Up</title><link href="https://jackdewinter.github.io/2021/04/05/markdown-linter-road-to-initial-release-cleaning-up/" rel="alternate"></link><published>2021-04-05T00:00:00-07:00</published><updated>2021-04-05T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-04-05:/2021/04/05/markdown-linter-road-to-initial-release-cleaning-up/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/"&gt;last article&lt;/a&gt;, I talked about
how I integrated my configuration system into the PyMarkdown project, revamping the
command line interface along the way.  In this article, I talk about my efforts in
resolving the remaining Priority 1 items from the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At one point late …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/"&gt;last article&lt;/a&gt;, I talked about
how I integrated my configuration system into the PyMarkdown project, revamping the
command line interface along the way.  In this article, I talk about my efforts in
resolving the remaining Priority 1 items from the issues list.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At one point late last year, I was worried that I would never get to the point where
I would release the PyMarkdown project in some form.  It seemed that for every
item I resolved from the issues list, I added two more items.  It just looked like I
was never going to get to a point where I was comfortable with releasing the project.&lt;/p&gt;
&lt;p&gt;Things have changed a lot since last year.  While it is taking me longer to get to that
initial release point than I had hoped for, I know that I am very close to having a
solid first release of this project.  One of the best things I did
to help me work towards that point was to classify most of the issues list into one
of four categories.  And with only three items left in the Priority 1 section of that
list, it was time to deal with them and get that much closer to a solid release!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/7d5fd4f265d3bf33963c1cf3c91af7a001473a39"&gt;27 Mar 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/02c2f671fe397bba2d0e9cd89498570763f22895"&gt;28 Mar 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-was-this-cleanup-required"&gt;Why Was This Cleanup Required?&lt;a class="headerlink" href="#why-was-this-cleanup-required" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking through the issues list, I knew that most of the issues were in one of four
buckets of issues, numbered one to four.  There were a small handful of issues left
in the bucket labelled &lt;em&gt;“Priority 1 - Must Solve Before Initial”&lt;/em&gt;, and these were
important to me to get resolved before the initial release of the project.  But why?&lt;/p&gt;
&lt;p&gt;In categorizing the remaining issues into those buckets, any issues placed in the first
bucket were issues that either would drastically impede the project’s success or would
be too costly to fix later.   The remaining handful of issues in the Priority 1 section
were all issues that I consider to be breaking changes.&lt;/p&gt;
&lt;p&gt;From experience, breaking changes are painful.  A breaking change is any change to a
system that causes dependent systems to fail specifically due to that change.  These
changes usually happen when some part of the interface between systems is deleted or
changed, but it can also occur if a newly added part of the interface is required.
A great
example of a breaking change starts with a system allowing free-form user input for the
&lt;code&gt;id&lt;/code&gt; field of one of its objects.  If that system decided to modify that user input
process to mandate that any &lt;code&gt;id&lt;/code&gt; fields must be only alphabetic characters, that is
not enough for it to be a breaking change.  For it to be a breaking change, there needs
to be a dependent system that interfaces with that field, requiring that system to
change its understanding of that field to match the newly provided understanding. Until
such time as that understanding is fixed, the dependency between those two systems is
broken.&lt;/p&gt;
&lt;p&gt;These changes are painful for two main reasons.  The biggest reason is that the
interface between the two systems is changed in such a way that the old interface is
invalidated.  Therefore, one of the more frequently suggested mitigations for breaking
changes is to support a fixed number
of the old interfaces, say the last two interfaces, until such a time as there is
confidence that no other system is depending on that old interfaces.  If things are
done properly, the oldest of the supported interfaces can then be dropped with no
systems being dependent on it, therefore removing the “breaking” from a breaking change.&lt;/p&gt;
&lt;p&gt;That is where the other big reason comes in: communication.  Whether the strategy is
to “bite the bullet” and do everything at once or whether it is to support old interfaces,
that must be clearly communicated to other teams and other projects.  If not, everything
falls apart very quickly.  And please take it from me, that is where the wrong kind of
communication usually happens, with a lot of finger pointing and harsh words being thrown
around.  Unless careful attention and effort is made to clearly communicate what is going
to be done, when it is going to be done, and the work required of all teams, breaking
changes are just a source of pain that it is best to avoid.&lt;/p&gt;
&lt;p&gt;For each of the remaining Priority 1 issues, I wanted to change small things with tokens
and how their debug output is rendered.  If I waited until after I released the project,
I believe these changes would all qualify as breaking changes when people start to use
the project.  As these tokens are part of the foundation of the project, it would be
difficult to version them in any way that would make sense.  Therefore, I mandated
these changes as a requirement for the initial release.&lt;/p&gt;
&lt;h3 id="a-quick-note"&gt;A Quick Note&lt;a class="headerlink" href="#a-quick-note" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The PyMarkdown project uses its Markdown parser to translate Markdown into tokens, layering
a rules engine on top of those tokens emitted by the parser.  Unlike other
articles in this series, this article almost exclusively deals with tokens.  Therefore,
I believe that a rudimentary knowledge of tokens is required to understand this article.&lt;/p&gt;
&lt;p&gt;The base of every token is either the &lt;code&gt;MarkdownToken&lt;/code&gt; class or the &lt;code&gt;EndMarkdownToken&lt;/code&gt;
class.  The &lt;code&gt;MarkdownToken&lt;/code&gt; class itself contains the names of each of the different
tokens in a list of member variables at the top of the class.  When looking at the debug
output for a token, it is the open square bracket character &lt;code&gt;[&lt;/code&gt; and this name that
form the start of every token. For every &lt;code&gt;MarkdownToken&lt;/code&gt; instance and most instances of
&lt;code&gt;EndMarkdownToken&lt;/code&gt;&lt;sup id="fnref:whenNot"&gt;&lt;a class="footnote-ref" href="#fn:whenNot"&gt;1&lt;/a&gt;&lt;/sup&gt;, this information is followed by the line number and column
number where the area belonging to that token begins.  This is then followed by the
separator character &lt;code&gt;:&lt;/code&gt;, any extra token data, and the close square bracket character &lt;code&gt;]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A simple example of this is a simple Text token containing the words &lt;code&gt;baz&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;
separated by a newline character.  When parsed, the Text token &lt;code&gt;[text(1,1):baz\nbar::\n]&lt;/code&gt;
is emitted within the scope of a Paragraph token. Following the instructions above,
it reads that this a &lt;code&gt;text&lt;/code&gt; token that starts at line &lt;code&gt;1&lt;/code&gt; and column &lt;code&gt;1&lt;/code&gt;.
The extra data for this token starts with the text content &lt;code&gt;baz\nbar&lt;/code&gt;, followed by some
extra information regarding any whitespace encountered.&lt;/p&gt;
&lt;p&gt;As the extra data for each token varies from token to token, the extra token data part of
the debug output varies from token to token.  Where possible, I will try and call out what
is present in the tokens in the description of the information.  As the HTML output is
usually not concerned with whitespace characters, the most common start to the extra
token data section of the debug output usually deals with any whitespace that was
encountered.&lt;/p&gt;
&lt;h2 id="the-important-of-good-scenario-tests"&gt;The Important Of Good Scenario Tests&lt;a class="headerlink" href="#the-important-of-good-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I usually consider good unit tests and good scenario tests pivotal to any project,
they are even more important when refactoring code.  The group of tests for any
project present a logical description of how the project is supposed to behave under
a given set of circumstances.  Depending on the type of refactoring that is being done,
one of two types of expectations are desired.  If the refactoring only changes
internal components, then the expectation is that no tests will need to be changed.
For these changes, a small external change is the expected change, and if the refactoring
is successful, then only those small external changes should occur.&lt;/p&gt;
&lt;p&gt;I maintain a high level of code coverage and scenario coverage for the PyMarkdown project.
Because of this, I have the confidence to make these changes.  If anything breaks, I will
know about it right away, and not days later.  With that confidence in hand, it was time
to start making those changes.&lt;/p&gt;
&lt;h2 id="end-tokens"&gt;End Tokens&lt;a class="headerlink" href="#end-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first change that I wanted to tackle was something that sounded simple, but I
figured it was going to trickle down into many changes.  That change was to refine how the
&lt;code&gt;EndMarkdownToken&lt;/code&gt; was used, specifically with how it closed certain tokens.&lt;/p&gt;
&lt;p&gt;During my development of the PyMarkdown project, I made certain decisions based on
the information I had at the time.  One of the first decisions that I needed to make
revolved around the use of the &lt;code&gt;EndMarkdownToken&lt;/code&gt; token.  This token is used for
tokens that require some manner of manual close token to delineate the section being
specified.  One part of that token was an indicator &lt;code&gt;force_close&lt;/code&gt;, which indicates
whether one or more characters caused the section to be closed without force, or whether
the section was forced close without any characters.  It was that decision that I wanted
to take another look at.  Was it always necessary?&lt;/p&gt;
&lt;h3 id="the-research"&gt;The Research&lt;a class="headerlink" href="#the-research" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One week, as I was fixing an issue with the &lt;code&gt;EmphasisMarkdownToken&lt;/code&gt; tokens, I looked
at the &lt;code&gt;EndMarkdownToken&lt;/code&gt; output and wondered if I had made the right choice, those many
months
ago.  While I was sure that I had made the right decision at that time,
I was not sure that the information underlying that decision had changed enough
to invalidate that decision.  I needed to take a new look.&lt;/p&gt;
&lt;p&gt;To me, it just seemed wasteful and misleading to have a &lt;code&gt;force_close&lt;/code&gt; field that
was always set to &lt;code&gt;False&lt;/code&gt;.  It was correct to say that it was never forced close,
but it just seemed to me that it was extra information that could be conveyed in a better
form.&lt;/p&gt;
&lt;p&gt;Searching through the source code for &lt;code&gt;[end-emphasis&lt;/code&gt;, I searched the many results that
appeared and could not find one case where the found debug output indicated a forced
close.  This backed up my thoughts that always presenting that &lt;code&gt;force_close&lt;/code&gt; field
in the debug output was inefficient.  That information along with the over 100 results
that I found in my search led me to decide to make this change.  Without searching for
any other end tokens, I believe that making this change solely on the merits of the
end Emphasis token were enough.&lt;/p&gt;
&lt;h3 id="the-effort"&gt;The Effort&lt;a class="headerlink" href="#the-effort" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The fist change was an easy one.  To better understand things in the future, I
added a new &lt;code&gt;requires_end_token&lt;/code&gt; field to the token classes to define which tokens require
an end token to match their start token.  There was no external indication of this
change, it was just something to help me to define the characteristics of each type
of token.  To make use of this change, I added a new &lt;code&gt;assert&lt;/code&gt; call when a new
&lt;code&gt;EndMarkdownToken&lt;/code&gt; is created to confirm that the token type supports end tokens.&lt;/p&gt;
&lt;p&gt;It was the other change that I was dreading.  If I wanted to remove the &lt;code&gt;force_close&lt;/code&gt;
indication for any type of token that did not support it, I needed to know with
certainty that it would never be forced.  To do this, I added a new &lt;code&gt;can_force_close&lt;/code&gt;
field and property to track that property of the tokens.  Adding to the effort
started in the previous section, I also added another check in the &lt;code&gt;EndMarkdownToken&lt;/code&gt;
constructor to verify that if that flag was set, the &lt;code&gt;was_forced&lt;/code&gt; argument was never
set.  This left me with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requires_end_token&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Token '{start_markdown_token} does not require end token."&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;can_force_close&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;was_forced&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Token '{start_markdown_token}'s end token cannot be forced."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that in place, a small change to &lt;code&gt;__compose_data_field&lt;/code&gt; function was all that
was needed to effect the change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_markdown_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MarkdownToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_markdown_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;can_force_close&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;field_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;was_forced&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was not the part I was dreading… that came next.&lt;/p&gt;
&lt;h3 id="the-cleanup"&gt;The Cleanup&lt;a class="headerlink" href="#the-cleanup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With all the foundational changes in place, it was time to activate that code.  To be
doubly sure, I again verified that the corresponding end token was always created with
&lt;code&gt;was_forced&lt;/code&gt; set to &lt;code&gt;False&lt;/code&gt; and set the new &lt;code&gt;can_force_close&lt;/code&gt; field to &lt;code&gt;False&lt;/code&gt;.
Running the scenario tests, I went through and fixed all the scenario tests that
were expecting the old format and corrected them to the new format.  That might
sound difficult, but it effectively was changing the expected output that
looked like &lt;code&gt;"[end-emphasis(1,8):::False]"&lt;/code&gt; into &lt;code&gt;"[end-emphasis(1,8)::]"&lt;/code&gt; for
each reference that occurred in a scenario test.&lt;/p&gt;
&lt;p&gt;Once those changes were fixed, I looked for other tokens that fell into this
category and discovered that this behavior was true for the &lt;code&gt;AtxHeadingMarkdownToken&lt;/code&gt;,
the &lt;code&gt;SetExtHeadingMarkdownToken&lt;/code&gt;, and the &lt;code&gt;LinkStartMarkdownToken&lt;/code&gt;.  One at a time,
I verified that the &lt;code&gt;EndMarkdownToken&lt;/code&gt; for those tokens were not being forced, and set
the &lt;code&gt;can_force_close&lt;/code&gt; arguments to &lt;code&gt;False&lt;/code&gt;.  From there it was lather, rinse, and repeat.
By the time I was done, I had changed the format more than 879 times in over 879 scenario
tests.&lt;/p&gt;
&lt;p&gt;That was about five hours of really mind-numbing work, but it was worth it. It just
looked cleaner to me. It was a good first step.&lt;/p&gt;
&lt;h2 id="fenced-code-blocks"&gt;Fenced Code Blocks&lt;a class="headerlink" href="#fenced-code-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the things that I never had time to research is why the Text tokens inside of
Fenced Code Blocks tokens did not coalesce like they did within other tokens.
And it was not all the time either, it was only part of the time.  With this issue, there
were two things that I wanted to accomplish.  The first was to figure out why it happened.
The second, depending on the answer of the first, was to fix it.  If I was going
to fix it, I was highly confident that it would require changes to the tokens.  So,
while it was not big enough to normally make my radar, if I was going to fix it, now was
the time while I was addressing other tokens.&lt;/p&gt;
&lt;h3 id="the-examples"&gt;The Examples&lt;a class="headerlink" href="#the-examples" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To illustrate this behavior, consider the Markdown string from the test function
&lt;code&gt;test_fenced_code_blocks_099f&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;source_markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""```&lt;/span&gt;

&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="se"&gt;\a\a&lt;/span&gt;&lt;span class="s2"&gt;abc&lt;/span&gt;
&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;

&lt;span class="s2"&gt;```"""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This test was created to test how blank lines and lines with text interact with each other
within a Fenced Code Block element.  Since this occurs within a Fenced Code Block, the
important thing to remember is that the translation to HTML must occur without losing
any data, including whitespaces.  As such, when it is tokenized, it tokenizes into the
following form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[fcode-block(1,1):`:3::::::]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK(2,1):]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK(3,1): ]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(4,3):abc:  ]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK(5,1): ]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK(6,1):]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-fcode-block::3:False]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This set of tokens generated for that Markdown starts and ends with generic Fenced Code
Block tokens.  Between those tokens are the Blank Line tokens representing each blank
line and the one Text token for the one non-blank line of text.&lt;/p&gt;
&lt;p&gt;For comparison, test function &lt;code&gt;test_fenced_code_blocks_099c&lt;/code&gt; starts with a line of text
and then is followed by blank lines until a final line of text and the closing fence:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;source_markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""```&lt;/span&gt;
&lt;span class="s2"&gt;z&lt;/span&gt;
&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="se"&gt;\a\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;z&lt;/span&gt;
&lt;span class="s2"&gt;```"""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is translated into the tokenized form of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    expected_tokens = [
        "[fcode-block(1,1):`:3::::::]",
        "[text(2,1):z\n\x03 \n\x03  \n\x03 \nz:]",
        "[end-fcode-block::3:False]",
    ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike the previous token output, the Text tokens and Blank Line tokens have all been
coalesced or combined into a single Text token.  In the debug output for this Text token,
the &lt;code&gt;\n&lt;/code&gt; sequence represents a newline character and the &lt;code&gt;\x03&lt;/code&gt; is used to separate the
removed whitespace from the start of the line from the removed whitespace at the end of
the line. While it is a dense form of the information, it provides every bit of
information needed to faithfully generate the HTML output for that Markdown sample.&lt;/p&gt;
&lt;p&gt;I sincerely believe that this single Text token format is easier to understand than the
alternative.  That alternative would be to use five tokens instead of one token; the
first and last tokens of that sequence would be Text tokens with the remaining three
tokens being Blank Line tokens.  While the single Text token is packed with information,
all the necessary information is contained within that one token, not spread out over five
tokens.  As such, I find that I do not need to try and remember what interactions occur
between the tokens as there is only the one token.  It is just there.&lt;/p&gt;
&lt;p&gt;But if this is the case, why didn’t the previous example also coalesce its tokens into
one token?&lt;/p&gt;
&lt;h3 id="the-research_1"&gt;The Research&lt;a class="headerlink" href="#the-research_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It did not take me that long to track the cause for this behavior down, and I was shocked
at how easy it was to fix.  Inside of the &lt;code&gt;coalesce_processor.py&lt;/code&gt; module, there is a loop
that looks for Text tokens and Blank Line tokens and sees if it can combine those tokens
into an already encountered Text token.  Basically, a Text token for &lt;code&gt;a&lt;/code&gt; followed by a
Text token for &lt;code&gt;b&lt;/code&gt; becomes a Text token for &lt;code&gt;a\nb&lt;/code&gt;.  Similarly, a Text token for &lt;code&gt;a&lt;/code&gt;
followed by a Blank Line Token becomes &lt;code&gt;a\n&lt;/code&gt;.  Of course, this is all without whitespace,
which changes those combinations a bit, but not by much.&lt;/p&gt;
&lt;p&gt;There are five Markdown elements that can contain Text tokens: the two paragraph-like
elements (Paragraph and SetExt Heading) and the three code block elements (Indented Code
Block, Fenced Code Block, and HTML Code Block).  Because of the way that they are parsed,
the two paragraph-like elements never start with a Blank Line token.  The paragraph-like
element is only started when actual text is presented, skipping over those blank lines.
The HTML Code Blocks elements are always started by a HTML tag and the Indented Code
Block element is always started by indented text.  That leaves the Fenced Code Block
element as the only element that can start with a Blank Line token.&lt;/p&gt;
&lt;h3 id="the-effort_1"&gt;The Effort&lt;a class="headerlink" href="#the-effort_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With that research under my belt, it was easy to determine the base change needed
to fix this issue.  The reason that the Text tokens and Blank Line tokens were not
coalescing was that there was no Text token to coalesce to.  The change was to add the
following code to the end of the loop in the &lt;code&gt;coalesce_text_blocks&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blank_line&lt;/span&gt;
                &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;coalesced_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_code_block&lt;/span&gt;
            &lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;replacement_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TextMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first_pass_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coalesce_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;coalesced_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;replacement_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;did_process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code would only trigger for the scenarios in which the current element was a
Blank Line token and it was the first token inside of a code block.  In those cases,
it kicked off the coalesce process by creating an “empty” Text token that represented
the blank line.  With this new logic in place, the Markdown for function
&lt;code&gt;test_fenced_code_blocks_099f&lt;/code&gt; now parsed as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[fcode-block(1,1):`:3::::::]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(2,1):&lt;/span&gt;&lt;span class="se"&gt;\n\x03&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  abc&lt;/span&gt;&lt;span class="se"&gt;\n\x03&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n\x03&lt;/span&gt;&lt;span class="s2"&gt;:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-fcode-block::3:False]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="the-cleanup_1"&gt;The Cleanup&lt;a class="headerlink" href="#the-cleanup_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The cleanup for this change was not too bad.  The HTML transformer was simplified by
removing two lbocks of code, one from the &lt;code&gt;__handle_text_token&lt;/code&gt; function and the other
from the &lt;code&gt;__handle_blank_line_token&lt;/code&gt; function.  As Blank Line tokens no longer appeared
within Fenced Code Blocks, there was now no need for that processing. In addition,
the &lt;code&gt;__handle_end_fenced_code_block_token&lt;/code&gt; function required a similar change to remove
unused code, as well as a small change to add a newline character under certain specific
circumstances.  The Markdown transformer change was even simpler, requiring the
string modification at the end of the &lt;code&gt;transform&lt;/code&gt; function to be further restricted
in cases where the end Fenced Code Block token was forced.&lt;/p&gt;
&lt;p&gt;Other than those changes, the remaining changes were in the scenario tests that included
Fenced Code Blocks that began with a Blank Line.  Including new tests that were added
to round our scenarios, only 34 scenario tests needed to be adjusted.  I was lucky
with that change, only requiring changes for scenarios that specifically dealt with
Fenced Code Block elements beginning with a blank line.  It could have been a lot worse!&lt;/p&gt;
&lt;h2 id="hard-line-breaks"&gt;Hard Line Breaks&lt;a class="headerlink" href="#hard-line-breaks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This change is something that I have looked at on and off for around seven months.  For
whatever reason, when I added support for the Hard Line Break token, I added it
without capturing the newline that accompanies the hard line break inside of the token.
Instead, that newline was placed in the Text token that followed the Hard Line Break token.
Having recently made sure that Hard Line Break elements were being handled properly, I
was now even more convinced that the newline character should be with the Hard Line Break
token itself, not with the following token.&lt;/p&gt;
&lt;p&gt;The reason I had just looked at this before and taken no action to fix it was because of
the scope of this change.  There was no way that fixing this was not going to be a
breaking change.  I was moving a newline character from a following token back to the
current token, where it should have been from the start.  According to my estimates, it
was going to impact at least 20 tests outside of the tests for the Hard Line Break token
itself.  But, to avoid a breaking change later, it was better to incur the effort of
changing the code now.&lt;/p&gt;
&lt;h3 id="the-examples_1"&gt;The Examples&lt;a class="headerlink" href="#the-examples_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To illustrate this behavior, consider the Markdown string from the test function
&lt;code&gt;test_hard_line_breaks_655x&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;source_markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""foo&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;baz"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a simple example that illustrates how a single backslash at the end of the line
(shown in its Python form as a backslash escaped by a backslash) causes a Hard Line Break
token to be generated.  This in turn produces the tokens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[para(1,1):&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(1,1):foo:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[hard-break(1,4):&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(2,1):&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;baz::&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-para:::True]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If this does not look a bit weird, it should.  Usually, the newline character is contained
within the token that contains that newline character.  In this case, the newline character
for the Hard Line Break token is contained at the start of the following Text token.
I mean, it works, but it is not ideal.  Dealing with that weirdness caused me to have to
add extra bits of code to compensate for that behavior, as well as causing issues during
debugging.  It just did not work well for me.&lt;/p&gt;
&lt;p&gt;Ideally, what I wanted to see was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[para(1,1):&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(1,1):foo:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[hard-break(1,4):&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text(2,1):baz:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-para:::True]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was just a matter of making the necessary changes to get there and undoing a lot of
the little changes made to compensate for it along the way.&lt;/p&gt;
&lt;h3 id="the-effort_2"&gt;The Effort&lt;a class="headerlink" href="#the-effort_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From a change point of view, the first two parts were the easy ones: changing the token
itself and changing the &lt;code&gt;__handle_hard_break_token&lt;/code&gt; function in the HTML transformer to
produce the correct output.  Starting from there, I expected a change would be required
in the &lt;code&gt;handle_line_end&lt;/code&gt; function, and I was correct.  For both forms of the token,
the &lt;code&gt;whitespace_to_add&lt;/code&gt; variable needed to be set to &lt;code&gt;None&lt;/code&gt; and the
&lt;code&gt;append_to_current_string&lt;/code&gt; variable needed to be set to &lt;code&gt;""&lt;/code&gt;.  This ensured that the
correct actions were taken at the end of that line.&lt;/p&gt;
&lt;p&gt;After some more debugging, a couple of lines were removed from the &lt;code&gt;__complete_inline_loop&lt;/code&gt;
function and the &lt;code&gt;__complete_inline_block_processing&lt;/code&gt; function as they were no longer
needed.  The Markdown transformer itself was mostly correct, requiring recombination with
any existing paragraph text to be taken care of in the &lt;code&gt;__rehydrate_hard_break&lt;/code&gt; function.
While not as simple, the &lt;code&gt;verify_line_and_column_numbers.py&lt;/code&gt; module required a series of
changes that were foreseeable, based on the changes that had already been made.&lt;/p&gt;
&lt;p&gt;One of the trickier things to debug in this area were the changes required for links and
images.  To get things working properly before this change, the
&lt;code&gt;__collect_text_from_blocks&lt;/code&gt; function and others like it had “funny” logic to deal with
the newline being in a separate token.  For the &lt;code&gt;__collect_text_from_blocks&lt;/code&gt; function,
I was lucky: I literally just needed to append a newline character to both the &lt;code&gt;text_parts&lt;/code&gt;
variable and the &lt;code&gt;text_raw_parts&lt;/code&gt; variable.   But in other cases, I had to remove code
that had worked before and replace it with code, often code that was aware of whether or
not it was captured inside of a link label.  That took a while to work through.&lt;/p&gt;
&lt;h3 id="setext-headings"&gt;SetExt Headings&lt;a class="headerlink" href="#setext-headings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The SetExt Heading token presented its own set of issues.  As that token is essentially
a Paragraph token followed by a special sequence, the inline processing had to be coded
differently than the paragraph handling.  With this change, all the fixes that corrected
for the Text token following a Hard Line Break token within a SetExt Heading token needed
to be removed.&lt;/p&gt;
&lt;p&gt;While there weren’t any big blocks of codes that had to be written, there was a lot of
moving code around and adding code to specifically handle the whitespace to be stored
near Hard Line Break tokens.  This occurred in three places within the
&lt;code&gt;__process_inline_text_block&lt;/code&gt; function and the only effective way to debug it was to
uncomment every &lt;code&gt;PLOGGER&lt;/code&gt; call within that function.  Small thing: I forgot to comment
them out again when I was done.&lt;/p&gt;
&lt;h3 id="the-cleanup_2"&gt;The Cleanup&lt;a class="headerlink" href="#the-cleanup_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Both the transformers were not that bad, as they are contained, but the consitency checks
were full of cases for handling the newline character in the following Text token that
had to be undone.  In all, 59 scenario tests were changed, and it took a lot of debugging
to remove the “fixes” that were previously added.   As a lot of those “fixes” only
impacted two or three scenario tests, I just had to work through each of those issues
and the ones that followed.&lt;/p&gt;
&lt;p&gt;But, as I have said with the previous two changes, those changes just looked right.
It just made sense to have the newline character for the Hard Line Break token with
the token itself.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I previously could not see my way to get here, I was now at the point where I had
zero Priority 1 items in the issues list.  I had to make some hard choices of what I needed
to have in the project for an initial release versus what I wanted to have for that
release.  But I made those choices and followed through to get to this point.  No
more Priority 1 items!&lt;/p&gt;
&lt;p&gt;And then that passed… but in a good way.  There were a couple of new items that
I knew I needed to add into that section, and I added them. Nothing major, but the
section had items again.  But knowing that I emptied that section was a big confidence
booster.  And knowing that I only added three small issues also helped:
a task to write documentation, to check that the existing rules were still valid,
and setting configuration properties from the command line.  These were tasks that I
knew would be achievable in a short amount of time.&lt;/p&gt;
&lt;p&gt;The big thing for me was to start getting the project out there with a solid initial
set of features, fixing up things in a following release as I worked on resolving issues.
From there I could start to get feedback, which would help me figure out how to
prioritize things going forward.&lt;/p&gt;
&lt;p&gt;It was just a good feeling knowing that I was getting close to a solid initial release
with an increased sense of confidence in the project.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I was sure that I was going to find a couple more things to add to the Priority
1 section of the issues list, it was currently empty.  As such, I wanted to devote the
next week to getting a first pass at the Python library setup code underway.&lt;/p&gt;
&lt;p&gt;Almost there!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:whenNot"&gt;
&lt;p&gt;The line number and column number are only present if the &lt;code&gt;EndMarkdownToken&lt;/code&gt; instance consumes one of more characters to create the &lt;code&gt;EndMarkdownToken&lt;/code&gt;.  For example, an Emphasis element requires matching opening and closing characters to delineate the emphasized text, so that instance of the &lt;code&gt;EndMarkdownToken&lt;/code&gt; shows the line number and column number.  Conversely, Indented Code Blocks are terminated when a new line of information does not begin with the required indentation, so that instance of the &lt;code&gt;EndMarkdownToken&lt;/code&gt; does not show either the line number nor the column number. &lt;a class="footnote-backref" href="#fnref:whenNot" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Command Lines</title><link href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/" rel="alternate"></link><published>2021-03-29T00:00:00-07:00</published><updated>2021-03-29T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-03-29:/2021/03/29/markdown-linter-road-to-initial-release-command-lines/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/"&gt;last article&lt;/a&gt;, I talked about
some of my requirements for configuration and how I applied those requirements to the
PyMarkdown project.  In this article, I talk about how I integrated that configuration
object more readily into the PyMarkdown project, revamping the command line interface to
match that …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/"&gt;last article&lt;/a&gt;, I talked about
some of my requirements for configuration and how I applied those requirements to the
PyMarkdown project.  In this article, I talk about how I integrated that configuration
object more readily into the PyMarkdown project, revamping the command line interface to
match that newly upgraded configuration object.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It might seem to others that I left the command line to last because I forget about it.
Nothing could be further from the truth.  For any kind of non-graphical
utility, the command line is the central hub from which the application gets executed in
various ways and forms.  Therefore, if the utility does not have the right command line
interface, it can seriously impact the usability of that application.  It is for that
exact reason that I usually add a “placeholder” command line interface during my
development phase, only adding the real interface when I have a solid idea of which
features have made it into the final version of the project.&lt;/p&gt;
&lt;p&gt;While that placeholder provides the access to the features that the project needs, it
often does them in a haphazard way.  Now, with everything else dropping into place, it was
time for
me to finalize how configuration was being applied to the project and to start thinking
seriously about what command line interface I wanted the project to have.  After all,
I am getting really close to having met my own requirements for an initial beta release!&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/486c1cc77f828b710b2d15bb469e37a5dc032d6f"&gt;11 Mar 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/782433db8cd89f8be8b47825786a8a7552a768ff"&gt;25 Mar 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="wiring-up-the-new-properties-class-to-the-project"&gt;Wiring Up The New Properties Class To The Project&lt;a class="headerlink" href="#wiring-up-the-new-properties-class-to-the-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After the work detailed in my last article, the project now has a file-based configuration
via the &lt;code&gt;ApplicationProperties&lt;/code&gt; class that can handle the more complex needs
of the project.  While I did refer to the process of applying ordering to the different
sources of configuration in the section on
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/#ordering"&gt;Ordering&lt;/a&gt;,
I had not wired it up at that point.  I had added the code mentioned in that section as
a simple test of whether the process worked, but I had not yet added fully functional code
that followed that process to the project.  It was time to do that.&lt;/p&gt;
&lt;h3 id="logging"&gt;Logging&lt;a class="headerlink" href="#logging" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The obvious first choice for configuration to add to the project was logging.  It was also
the trickiest in a certain sense.  From the point at which the configuration was properly
initialized and the determination of the log file and log level is achieved,
everything works as everyone expects.
However, there is a slight amount of time between the start of the application and that
point where things are in a grey zone.  During that time, the loading of the configuration
file itself or determining the logging properties can log information themselves that may
be of use when debugging a scenario.  With those systems dependent on configuration that
was not yet initialized when I needed to debug those systems, I was left to hardwire
logging workarounds directly into the code. I wanted a better way to handle those debug
scenarios.&lt;/p&gt;
&lt;p&gt;Looking at what I had available to use, I decided to imply extra context for the command
line’s &lt;code&gt;--stack-trace&lt;/code&gt; flag.  Normally, my utilities use this flag to enable a mode
where an exception that stops the application displays the full stack trace of the
exception.  As
this flag defaults to disabled, the user just gets a simple message indicating
what the error is.  Most of the time, users do not care about where in the application
something broke down, they just want it to work.  If it is not working, they want to know
why and if they can fix it themselves.
However, when I look for root causes and I need to debug those issues, having a full
stack trace of how that error was generated is always helpful.  Following that logic, I
determined that the only time a user might need to debug the loading of the configuration
file is if they were debugging one of those scenarios that the &lt;code&gt;--stack-trace&lt;/code&gt; flag was
meant for.&lt;/p&gt;
&lt;p&gt;As such, I added some code at the front of the &lt;code&gt;main&lt;/code&gt; function to handle the setup for the
logging system, using the &lt;code&gt;--stack-trace&lt;/code&gt; flag in a useful manner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;base_logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;base_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__show_stack_trace&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ApplicationPropertiesJsonLoader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_and_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_error&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_log_level&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log_level_to_enact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available_log_maps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;effective_log_level&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To enable debug logging before the log level and log file are setup properly, the log
level is set to &lt;code&gt;DEBUG&lt;/code&gt; if the &lt;code&gt;--stack-trace&lt;/code&gt; is present and &lt;code&gt;WARNING&lt;/code&gt; otherwise.  Then,
the configuration file is loaded and the log level to use is calculated with the
appropriate final log level.  However, the important part of this is that I now have a
simple switch that allows me to debug the configuration initialization without resorting
to rewriting code.  That is a bonus I like!&lt;/p&gt;
&lt;p&gt;With that code in place, I removed the &lt;code&gt;__load_configuration_and_apply_to_plugins&lt;/code&gt; function
and the &lt;code&gt;load_json_configuration&lt;/code&gt; function. I replaced those functions with the new
&lt;code&gt;__apply_configuration_to_plugins&lt;/code&gt; function that performed most of the same functions.
The big change here was that instead of being passed a simple dictionary object, the
&lt;code&gt;apply_configuration&lt;/code&gt; function of the &lt;code&gt;PluginManager&lt;/code&gt; class was now being passed an
instance of the &lt;code&gt;ApplicationProperties&lt;/code&gt; class.  It was time to wire that up as well.&lt;/p&gt;
&lt;h3 id="plugin-manager"&gt;Plugin Manager&lt;a class="headerlink" href="#plugin-manager" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting with the &lt;code&gt;FoundPlugin&lt;/code&gt; class, I decided to make all those properties read-only by
making the fields private and exposing those fields using properties.  At the same time,
I renamed arguments for the constructor from &lt;code&gt;enable_rules&lt;/code&gt; and &lt;code&gt;disable_rules&lt;/code&gt; to
&lt;code&gt;enable_rules_from_command_line&lt;/code&gt; and &lt;code&gt;disable_rules_from_command_line&lt;/code&gt;.  While the old
names were okay, I wanted to make sure the source of their values were clearer.  I also
cleaned up the registration of the plugins to ensure that things were consistent. I
added the following regular expressions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;__id_regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"^[a-z]{2,3}[0-9]{3,3}$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;__name_regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to make the id field two or three lower case letters followed by three numbers and
limit the characters for the name field.  I figured that since I was there, I might as
well leave the code better than when I got there.&lt;/p&gt;
&lt;h3 id="changing-the-plugins"&gt;Changing The Plugins&lt;a class="headerlink" href="#changing-the-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After that cleanup, I proceeded to make the necessary changes to accompany
the changes made in the &lt;code&gt;main&lt;/code&gt; function.  As the &lt;code&gt;PluginManager&lt;/code&gt; instance is just a
container used to provide access to the various registered plugins, the instance itself
has no need for configuration.  This kept things simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_key_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_identifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_section_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{PluginManager.__plugin_prefix}{properties.separator}{next_key_name}{properties.separator}"&lt;/span&gt;
        &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ApplicationPropertiesFacade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plugin_section_title&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Going through the list of identifiers for the plugin, the &lt;code&gt;PluginManager&lt;/code&gt; instance creates
a test instance of an &lt;code&gt;ApplicationPropertiesFacade&lt;/code&gt; object, initializing it with the
property string leading up to that point.  For the &lt;code&gt;md002&lt;/code&gt; plugin, if the id field is
used, the section title is &lt;code&gt;plugins.md002.&lt;/code&gt;, with similar titles for each of the
comma-separated values in the name field, &lt;code&gt;plugins.first-heading-h1.&lt;/code&gt; and
&lt;code&gt;plugins.first-header-h1.&lt;/code&gt;. Once created, if that test facade instance
reports that it has any properties, it is considered to be the best candidate, and any
other configuration for that plugin by its other names is ignored.&lt;sup id="fnref:yesIKnow"&gt;&lt;a class="footnote-ref" href="#fn:yesIKnow"&gt;1&lt;/a&gt;&lt;/sup&gt;  That best
candidate is then passed in to the plugin’s &lt;code&gt;set_configuration_map&lt;/code&gt; function, where it is
used by the &lt;code&gt;initialize_from_config&lt;/code&gt; function to set the actual configuration for that
plugin.&lt;/p&gt;
&lt;h3 id="the-fallout-from-those-changes"&gt;The Fallout From Those Changes&lt;a class="headerlink" href="#the-fallout-from-those-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a new type of object being passed for configuration, the plugins themselves required
other changes to work properly.
The first change that this required was changing every plugin to utilize the
&lt;code&gt;ApplicationPropertiesFacade&lt;/code&gt; instance that was now being passed in as an argument instead
of the old dictionary instance.  Using the changes for rule &lt;code&gt;md002&lt;/code&gt; as an example, the code
in the &lt;code&gt;initialize_from_config&lt;/code&gt; function changed from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_configuration_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__start_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_integer_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second change that happened was an appropriate change in test data.  Prior to this
change, the test configuration for the &lt;code&gt;md002&lt;/code&gt; plugin was usually&lt;sup id="fnref:usually"&gt;&lt;a class="footnote-ref" href="#fn:usually"&gt;2&lt;/a&gt;&lt;/sup&gt; presented
in the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"MD002"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To accommodate the addition of the &lt;code&gt;plugins&lt;/code&gt; namespace, each test configuration provided in
the &lt;code&gt;supplied_configuration&lt;/code&gt; variable needed to be changed to add that namespace, as
follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"md002"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With both changes in place, the only thing left was to hook up was the enabling
and disabling of plugins from the command line.  This change replaced the contents of
the &lt;code&gt;__determine_if_plugin_enabled&lt;/code&gt; function with the slightly more complicated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_identifier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plugin_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_identifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_identifier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;command_line_disabled_rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_identifier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plugin_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_identifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_identifier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;command_line_enabled_rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the entrance into the &lt;code&gt;__determine_if_plugin_enabled&lt;/code&gt; function, the &lt;code&gt;plugin_enabled&lt;/code&gt;
argument is already
set to its default value.  As such, this function only needs to determine if there is an
override to use and to apply that override.  This function was changed to treat both the
id field
and each comma-separated value of the name field as equal in terms of being identifiers.
While this initially only
applied to the name of the configuration section in the JSON file, it made sense to use it
here as well.  In this case, if any of those identifiers are found in the
&lt;code&gt;command_line_disabled_rules&lt;/code&gt; set, the plugin is disabled.  If no matches are found in
the disabled set, the same process is repeated for the &lt;code&gt;command_line_enabled_rules&lt;/code&gt; set.
Only if a matching value is found in one of those sets is the &lt;code&gt;plugin_enabled&lt;/code&gt; variable
overridden with the new value.&lt;/p&gt;
&lt;p&gt;To me, this just made sense.  If a user prefers to disable a rule using its id, they can
do that.  If a user prefers to enable a rule using one of its names, they can also do that.
That flexibility appealed to me, and I hope it appeals to users.&lt;/p&gt;
&lt;h3 id="testing"&gt;Testing&lt;a class="headerlink" href="#testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hopefully, any readers of my website should know that I use test driven as my main process
of writing quality code.  Given that process, I added the new tests as I went and before
adding the functionality required to complete those tests.
While it was a bit more difficult to do with all these changes going on, it was pivotal
to the way in which I work.  And it was because of that process that I remembered an
imbalance that I had put off until somewhere near this point in the project.  I had done a
lot of work on configuration files, but almost none on command line configuration.&lt;/p&gt;
&lt;h2 id="what-about-the-command-line"&gt;What About The Command Line?&lt;a class="headerlink" href="#what-about-the-command-line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the &lt;code&gt;ApplicationProperties&lt;/code&gt; mechanism wired into the project, it was time to tackle
the other part of that mechanism: the command line.  Up to this point, I had a command
line interface to the project, but it was a command line that was put in place by default.
I never sat down and thought about what style of command line interface I wanted
for the project, and really thought through it.  It was time to do that.&lt;/p&gt;
&lt;h3 id="which-way-to-go"&gt;Which Way To Go?&lt;a class="headerlink" href="#which-way-to-go" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using various utilities on my system, I found a handful of different styles of interacting
with the user on the command line.  But the one that really stuck with me is what I refer
to as the “Git” style of command line organization.  Similar to my discussion in my last
article on
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/#ordering"&gt;complex configuration&lt;/a&gt;,
this style of command line organization is complex.  This style is built of building
blocks of commands and options, allowing more complex command lines to be constructed.&lt;/p&gt;
&lt;p&gt;For example, take this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="c1"&gt;--long setup.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main part of the command is the &lt;code&gt;git&lt;/code&gt; at the start of the line.  The &lt;code&gt;-c ab=cd&lt;/code&gt; part
of that line is a modifier to that &lt;code&gt;git&lt;/code&gt; command.  Following that, the &lt;code&gt;status&lt;/code&gt; part of
that line specifies the status subcommand, which in turn has its own modifier &lt;code&gt;--long&lt;/code&gt;
to alter how that status subcommand is presented.  Finally, the text &lt;code&gt;setup.py&lt;/code&gt; is
another modifier to the subcommand, asking that only information for the file &lt;code&gt;setup.py&lt;/code&gt;
be provided.&lt;/p&gt;
&lt;p&gt;To me, this makes very good sense for the PyMarkdown project and the command line interface
that I want for it.  While the main “scanning” workflow will be the most used workflow,
there are other workflows that I want to expose to allow users to find out information
about the results of the scan.  The one that came immediately to mind was being able to
show the user more information about the installed plugins.  As such, a simple version of
the command line interface would not work.  I needed a command line interface that
supported the “scanning” workflow as well as the “show information about plugins” workflow.&lt;/p&gt;
&lt;p&gt;To be clear, this type of a command line interface is not required for every project
that I do, but it was required for this one.  This interface was complex enough to have
to support multiple workflows, which in turn made this command line processing complex,
just like the configuration.&lt;/p&gt;
&lt;h3 id="wiring-up-subcommands"&gt;Wiring Up Subcommands&lt;a class="headerlink" href="#wiring-up-subcommands" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once I had that figured out, it was time to go to work.  When I took my initial look
at the &lt;code&gt;__parse_arguments&lt;/code&gt; function, I was afraid that I was going to have to rewrite
the entire function. However, on a closer look, I discovered that it was going to be
more of a reorganization than a rewrite.  Except for the &lt;code&gt;--version&lt;/code&gt; option
and the &lt;code&gt;--list-files&lt;/code&gt; options, the options were all still valid for the application
itself.  It was once those options were added to the &lt;code&gt;argparse&lt;/code&gt; object that things
changed.&lt;/p&gt;
&lt;p&gt;To handle this kind of scenario, the &lt;code&gt;argparse&lt;/code&gt; object handles subcommands by using
subparsers.  So, to add a subcommand to handle the &lt;code&gt;scan&lt;/code&gt; workflow, I used the
following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;subparsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subparsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"primary_subparser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subparsers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"scan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"scan the Markdown files in the specified paths"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once I had that subparser created, I added the rest of the arguments that were specific to
that subcommand:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"-l"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"--list-files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"list_files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"list the markdown files found and exit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"One or more paths to scan for eligible files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"one or more paths to scan for eligible Markdown files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this subcommand, the &lt;code&gt;--list-files&lt;/code&gt; option that was removed from the base &lt;code&gt;argparse&lt;/code&gt;
parser was placed under the &lt;code&gt;scan&lt;/code&gt; subparser along with the &lt;code&gt;paths&lt;/code&gt; variable to hold
the paths of Markdown files to scan.  The &lt;code&gt;plugins&lt;/code&gt; subcommand was added in the
same manner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subparsers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"plugin commands"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"-p"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"--list-plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"list_plugins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"list the available plugins and exit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_sub_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"one or more paths to scan for eligible Markdown files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, to implement the &lt;code&gt;--version&lt;/code&gt; option (which was really a subcommand disguised
as an option in the previous version of the command line interface), a subcommand was
added for it as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;subparsers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"version of the application"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With all those options in place, I executed the application from the command line and
noticed that I needed to do a bit more work myself now that I was using subcommands.
I needed to handle the case where no subcommands were present as well
as handling the &lt;code&gt;version&lt;/code&gt; subcommand.  After a bit of experimentation, I came up with the
following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;parse_arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primary_subparser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;parse_arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frodo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{self.__version_number}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parse_arguments&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Back in the &lt;code&gt;main&lt;/code&gt; function, implementing the &lt;code&gt;scan&lt;/code&gt; and &lt;code&gt;plugins&lt;/code&gt; subcommands were easy.
As all other subcommands were taken care of, so adding the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primary_subparser&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'plugins'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__initialize_plugins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plugins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_argparse_subparser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;allowed me to redirect the &lt;code&gt;plugins&lt;/code&gt; workflow to the &lt;code&gt;PluginManager&lt;/code&gt; class.  If the
program’s flow was not redirected at that point, the &lt;code&gt;scan&lt;/code&gt; workflow would execute by
default.&lt;/p&gt;
&lt;p&gt;With the command line now organized in a more orderly fashion, it was time to clean up
the use of those workflows.&lt;/p&gt;
&lt;h3 id="revisiting-logging"&gt;Revisiting Logging&lt;a class="headerlink" href="#revisiting-logging" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the
&lt;a href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/#ordering"&gt;Ordering section&lt;/a&gt;
of my last article, I provided an example of how ordering was important when considering
how to apply configuration to a project.  Specifically, that code snippet was from the
following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__initialize_logging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;new_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;effective_log_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_file&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"log.file"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;new_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"log.level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level_type&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_log_level&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To keep things neat, I moved any of the logging related initialization code into one of
two functions, &lt;code&gt;__set_initial_state&lt;/code&gt; and &lt;code&gt;__initialize_logging&lt;/code&gt;.  The &lt;code&gt;__set_initial_state&lt;/code&gt;
function simply took the initial logger settings and loading of the configuration file
data and placed it under a much simpler function to read.  The &lt;code&gt;__initialize_logging&lt;/code&gt;
function was where all the interesting log initialization really happened, working out
what the actual values to be used were.&lt;/p&gt;
&lt;p&gt;This new function followed the process that I had outlined in my last article.  For both
the log level and the log file settings, there are command line and configuration file
settings for both settings.  In both cases, the command line is processed first, followed
by the configuration property, followed by any system default.&lt;/p&gt;
&lt;p&gt;Looking at these values and their sources after I completed them, they just looked right.
More than that, they looked usable.  If no configuration was provided, there were
defaults.  If a configuration was provided, any supplied values would be taken from
there, if they were present.&lt;/p&gt;
&lt;h3 id="fixing-an-old-issue"&gt;Fixing An Old Issue&lt;a class="headerlink" href="#fixing-an-old-issue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Back in the section titled
&lt;a href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/#changing-the-plugins"&gt;Changing The Plugins&lt;/a&gt;,
I presented something that was just a little off.  I presented it that way because at the
time that I wrote that code, it looked right and was passing every existing test.  It was
only at this point, when I was more thoroughly testing the &lt;code&gt;PluginManager&lt;/code&gt; configuration
that I noticed that the first &lt;code&gt;ApplicationPropertiesFacade&lt;/code&gt; tried was always being
selected.&lt;/p&gt;
&lt;p&gt;Yeah, I needed to fix that.  The first thing I did was to thin out that for loop and
move most of that code into a new &lt;code&gt;__find_configuration_for_plugin&lt;/code&gt; function.  That
changed the relevant code to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enabled_plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__find_configuration_for_plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;always_return_facade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__find_configuration_for_plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;always_return_facade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;first_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_key_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_identifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_section_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{PluginManager.__plugin_prefix}{properties.separator}{next_key_name}{properties.separator}"&lt;/span&gt;
        &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ApplicationPropertiesFacade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plugin_section_title&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;first_facade&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;first_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;property_names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;section_facade_candidate&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;always_return_facade&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_facade&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;plugin_specific_facade&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, two small changes were required to fix this function.  The first change was
to fix the problem of the first facade always being selected.  This was accomplished
by adding the &lt;code&gt;property_names&lt;/code&gt; function to the facade and checking to see if at least
one property was found.  If one property was found, then the initial intention of the
search was satisfied, and a configuration entry was found.  This is what I had intended
to do with the initial implementation, so it felt good to correct this issue.&lt;/p&gt;
&lt;p&gt;But that caused another issue to manifest, one that was never an issue before the first
issue was fixed: what if no configuration values were ever found? As there are cases
where the application needs to know nothing was found and cases where it just wants
some default behavior, I added the &lt;code&gt;always_return_facade&lt;/code&gt; argument.  With this argument
set to &lt;code&gt;True&lt;/code&gt;, the first facade is returned instead of a &lt;code&gt;None&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;With that part of the configuration fixed, it was now time to add the &lt;code&gt;plugin&lt;/code&gt; workflow.&lt;/p&gt;
&lt;h3 id="boring-support-for-plugins"&gt;Boring Support For Plugins&lt;a class="headerlink" href="#boring-support-for-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the main reasons that I added a complex command line interface was to support
multiple workflows.  As I felt that the &lt;code&gt;scan&lt;/code&gt; workflow was now developed enough to
test, it was time to implement the &lt;code&gt;plugins&lt;/code&gt; workflow.  In my design for this workflow,
I wanted to support a listing of all plugins and summary information, as well as more
focused information for a specific plugin.  Much like how I added the &lt;code&gt;scan&lt;/code&gt; and
&lt;code&gt;plugins&lt;/code&gt; subparsers to the main &lt;code&gt;argparse&lt;/code&gt; instance, I added the &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;info&lt;/code&gt;
subparsers to the &lt;code&gt;plugins&lt;/code&gt; subparser.&lt;/p&gt;
&lt;p&gt;From there, it was just a matter of handing off control at the right spot to each
of those processors, as such:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_argparse_subparser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Handle the parsing for this subparser.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;subparser_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PluginManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__root_subparser_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;subparser_value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"list"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_argparse_subparser_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;subparser_value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"info"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__handle_argparse_subparser_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;PluginManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__argparse_subparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;return_code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So why did I start the title for this section with the word “Boring”?  It is because
once I added subparsers on the main &lt;code&gt;argparse&lt;/code&gt; instance, this was just copying that
pattern and pasting it to the &lt;code&gt;plugins&lt;/code&gt; subparser.  The &lt;code&gt;list&lt;/code&gt; subcommand was a simple loop
through
all available plugins and adding values to a string to display.  The &lt;code&gt;info&lt;/code&gt; command
was just locating a given plugin and displaying the information for it.  After the
rest of things that have been added to this project, that was quite boring.  Necessary,
but boring.&lt;/p&gt;
&lt;h3 id="almost-boring"&gt;Almost Boring&lt;a class="headerlink" href="#almost-boring" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Two exceptions did stand out though.  The first one was the use of the &lt;code&gt;Columnar&lt;/code&gt;
library for output.  This library is very effective in determining how much screen
real estate the application has, and sizing columns to fit that screen size. That
was very useful, instead of having to create that functionality myself.&lt;/p&gt;
&lt;p&gt;The second exception was to mimic the results of the &lt;code&gt;glob&lt;/code&gt; library to work on
in-memory strings.  Given a command line of &lt;code&gt;pymarkdown plugins list plugin-id&lt;/code&gt;, it
should be obvious that only the plugin with the id or name &lt;code&gt;plugin-id&lt;/code&gt; should be
listed.  But what about the command line &lt;code&gt;pymarkdown plugins list md??9&lt;/code&gt;?  If the
strings were filenames, then the plugins that started with &lt;code&gt;md&lt;/code&gt;, contained two
more arbitrary characters, and finally the digit &lt;code&gt;9&lt;/code&gt; would match.  Why could I not
do that with plugins and their identifiers?&lt;/p&gt;
&lt;p&gt;Thankfully, due to my earlier work to reduce the allowable text for plugin ids and plugin
names to a smaller subset of values, this effort was made easier.  As I did not
have to worry about the &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; characters appearing natively in the strings that
I was looking at, the regular expression to satisfy my required glob functionality was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;list_re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"^"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;".*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"$"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For those readers not familiar with regular expressions, the &lt;code&gt;^&lt;/code&gt; at the start of the
expression and the &lt;code&gt;$&lt;/code&gt; at the end of the expression are anchors.  Together these specify
that the expression inside of those characters must match the entire string, not just
being found somewhere inside of the string.  For the rest of the expression, I used the
&lt;code&gt;.&lt;/code&gt; character in two forms.  As the &lt;code&gt;.&lt;/code&gt; character represents any single character in
the expression, it was a perfect match for the &lt;code&gt;?&lt;/code&gt; glob character.  As an extension of
that, the &lt;code&gt;*&lt;/code&gt; glob character represents any number of arbitrary characters.  To match
that in the expression, the sequence &lt;code&gt;.*&lt;/code&gt; matches zero or more instances of any character.&lt;/p&gt;
&lt;p&gt;After satisfying all the scenario tests I had written, and adjusting output to match
the columnar output, the &lt;code&gt;plugins&lt;/code&gt; subcommand tests were all passing.  Things were good
with those scenario tests.  I now had to expand my scope to all the scenario tests in
the project.&lt;/p&gt;
&lt;h3 id="altered-tests"&gt;Altered Tests&lt;a class="headerlink" href="#altered-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When the change was made to the command line, I expected most of the existing scenario
tests that deal with the command line to fail, and I was not disappointed.  For most of
the existing tests, I just needed to add the &lt;code&gt;scan&lt;/code&gt; keyword to the right position in the
arguments list, as that was the workflow that already had tests before this point.  I
stopped counting those changes after I passed the count of 20.&lt;/p&gt;
&lt;p&gt;But it was a very useful task.  As I progressed through the tests, I was able to see
how specifying the workflow or subcommand was enhancing the tests. It just gave each
test a bit more context that I felt was missing before.  I was able to find a couple
of small issues that I would have otherwise missed because of the organization.&lt;/p&gt;
&lt;p&gt;To be blunt, between the command line changes and tests to cover them, it just felt
like the project was that much more complete.&lt;/p&gt;
&lt;h3 id="lather-rinse-repeat"&gt;Lather, Rinse, Repeat&lt;a class="headerlink" href="#lather-rinse-repeat" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After all that work, there were little things there that I needed to work on.  I
disliked how some of the code was organized, so I went back and tried to organize the code
more thoughtfully along usage lines.  I poured through the coverage report and looked
for missing coverage, adding scenario tests to provide any coverage for missed areas.
Just general cleanup stuff.&lt;/p&gt;
&lt;h2 id="adding-version-information-for-plugins"&gt;Adding Version Information For Plugins&lt;a class="headerlink" href="#adding-version-information-for-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With that work in place, it was time to see if I was able to add something useful to the
project’s configuration without many issues.  The something I had in mind was better
version information for the plugins.  From a plugin point of view, I figured it would be
useful to know what specific version was being attributed to that specific plugin.  From
a plugin manager point of view, it would also be useful to be able to version the actual
interface itself.  Both would be useful going forward, and useful to relate to
the user of the application.&lt;/p&gt;
&lt;p&gt;Changing the &lt;code&gt;FoundPlugin&lt;/code&gt; class to accept these two new version fields was easy, adding
private
fields and property functions to access them.  From there, I added those two parameters
to each of the existing plugins, setting active plugins to &lt;code&gt;0.5.0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; and setting
inactive or “templated” plugins to &lt;code&gt;0.0.0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;.  After adding some support in the
&lt;code&gt;__register_individual_plugin&lt;/code&gt; function to ensure that both versions were in acceptable
formats, I was ready to make the big change to expose that information.&lt;/p&gt;
&lt;p&gt;Okay, maybe big change is a bit misleading.  In the &lt;code&gt;__handle_argparse_subparser_list&lt;/code&gt;
function, I changed the setting of the &lt;code&gt;display_row&lt;/code&gt; variable to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;display_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;next_plugin_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;", "&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_names&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_enabled_by_default&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_enabled_now&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;next_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the setting of the &lt;code&gt;headers&lt;/code&gt; variable was changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"names"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"enabled (default)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"enabled (current)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These were not big changes, but that was the point.  This was a relatively small change
and if things were organized properly, it should have required a relatively small number
of changes.  If that were not the case, I would have been worried.&lt;/p&gt;
&lt;p&gt;And I was happy, as I had a good workflow to get output on the plugins like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ID     NAMES                                ENABLED (DEFAULT)  ENABLED (CURRENT)  VERSION

  md001  heading-increment, header-increment  True               True               0.5.0
  md002  first-heading-h1, first-header-h1    False              False              0.5.0
  md003  heading-style, header-style          True               True               0.5.0
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While my efforts to have a completed configuration system with command line support is not
fully implemented, this works moves the command line system a lot further along to being
the beacon of the PyMarkdown project.  I realize that I still need a generic way of
specifying override values for those values specified in the configuration file, but
this is still a big step forward.  Now that I have the configuration and command line
systems in place, I can spend a bit of reflective time looking for pieces of those
systems that I missed while working on other issues.&lt;/p&gt;
&lt;p&gt;I really am feeling that the project is coming together.  While it has never felt like
a hodgepodge of functionality, I always had a feeling that it was just not quite ready to
show to the public.  With each of these little subsystems that I am focusing on, that
feeling is going away and is being replaced with a feeling of confidence that it is
ready.  In my books, that is a really good feeling to have.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After nicely wrapping up configuration and the command line, there was only
one thing left to do before I seriously thought about a beta release.  That was to
resolve the remaining items in the Priority 1 section of the issues list.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:yesIKnow"&gt;
&lt;p&gt;Yes, I know that is not what this code snippet actually does.  I found that out by adding tests later in on in the process.  I fixed this issue later, in the section named &lt;a href="https://jackdewinter.github.io/2021/03/29/markdown-linter-road-to-initial-release-command-lines/#fixing-an-old-issue"&gt;Fixing An Old Issue&lt;/a&gt;. &lt;a class="footnote-backref" href="#fnref:yesIKnow" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:usually"&gt;
&lt;p&gt;Unless I was purposefully creating bad data to test failure cases, that is the form that I passed into the plugins for configuration. &lt;a class="footnote-backref" href="#fnref:usually" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Configuration</title><link href="https://jackdewinter.github.io/2021/03/22/markdown-linter-road-to-initial-release-configuration/" rel="alternate"></link><published>2021-03-22T00:00:00-07:00</published><updated>2021-03-22T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-03-22:/2021/03/22/markdown-linter-road-to-initial-release-configuration/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/15/markdown-linter-road-to-initial-release-front-matter/"&gt;last article&lt;/a&gt;, I talked about
my own requirements for a front-matter processor and how I added it to the project.  In
this article, I talk about my own requirements for configuration and how I applied them
to this project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes I encounter a part of a …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/15/markdown-linter-road-to-initial-release-front-matter/"&gt;last article&lt;/a&gt;, I talked about
my own requirements for a front-matter processor and how I added it to the project.  In
this article, I talk about my own requirements for configuration and how I applied them
to this project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes I encounter a part of a programming language that I do not like for one
reason or another.  For whatever reason, the concept of having a good entry-level
configuration library for each given language seems to be not high on anyone’s
priority list. To be clear, I know that there are libraries out there for each language
that do some form of property reading and access, but the support is always basic
at best. If one is provided, it either seems to be too simple to accomplish the task
that is normally required of it, or it seems that it was added as an afterthought.&lt;/p&gt;
&lt;p&gt;Therefore, it was a bit disheartening to find out Python was also in this category.  When
it comes
to built-in support for logging, Python is there with the &lt;code&gt;logging&lt;/code&gt; library and its good
set of features.  When it comes to command line parsing, Python is there with the
&lt;code&gt;argparse&lt;/code&gt; library and its various helper functions.  When it comes to configuration file
parsing, Python is there with… &lt;code&gt;configparser&lt;/code&gt;?  Honestly, I was not impressed.  It
only supports the &lt;code&gt;ini&lt;/code&gt; file format and does not seem to have much in the way of useful
support for helper functions that I could find.&lt;/p&gt;
&lt;p&gt;So, for this project, I now need to figure out what configuration I need, and how to
properly store it.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commit between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/8a30dee0c0105898258e6074d5058556c08410ca"&gt;06 Mar 2021&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/486c1cc77f828b710b2d15bb469e37a5dc032d6f"&gt;11 Mar 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-is-configuration"&gt;What Is Configuration?&lt;a class="headerlink" href="#what-is-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At face value, configuration is anything that provides information that guides the
execution of the project.  While input information is one class of configuration,
a discussion of that class of configuration is a whole other article unto itself.
As such, I am going to stick to the
two types of configuration that most people think about when they hear configuration:
dynamic configuration and static configuration.&lt;/p&gt;
&lt;p&gt;To be honest, I usually take the phrases “data stores” and “dynamic configuration” to mean
the same thing.  This type of configuration is expected to change its configuration
information during the execution of the project.  More often than not, the project itself
is the entity that is changing that information.  This dynamic information can be as
simple as a file that holds the time the project last scanned another data store to a
complete map of the data and relationships for the project. The key point here is that
this information is expected to change often.&lt;/p&gt;
&lt;p&gt;The natural complement to dynamic configuration is static configuration.  When most
software developer hear “configuration”, they most often think of things such as
configuration files, environment variables, and command line data.  These items are
all classified as static configuration as they generally do not change once the
execution of the program has started.  Showing a bit of synergy with each other,
if a data store is used to hold information, there is usually one or more static properties
that provide any needed configuration to gain access to that data store.&lt;/p&gt;
&lt;p&gt;So, for this article, I am focusing on static configuration and how I added better
support for static configuration to the PyMarkdown project.&lt;/p&gt;
&lt;h2 id="configuration-requirements-are-important"&gt;Configuration Requirements Are Important&lt;a class="headerlink" href="#configuration-requirements-are-important" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Up to this point, the project and its tests have been able to get by without any real hard
requirements for
configuration with respect to this project.  I have a loose set of command line arguments
and a simple map used to configure the plugins, but that is it.
Taking a look at my
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/#what-are-the-requirements"&gt;initial list of requirements&lt;/a&gt;,
there is nothing specifically in there about configuration, just phrases here and there
that somewhat speak of configuration. Phrases like “plans to later add other flavors of
parser” and “extending the base linting rules” that kind of infer that configuration will
be needed, but do not explicitly state its need.&lt;/p&gt;
&lt;p&gt;From a design point of view, this was not a failure, but a planned action.  In many
previous projects, I implemented a simple configuration system early in the
project, only to find out that it missed a couple of significant configuration scenarios.
In this case, “missed” means that there was not a straightforward way of representing some
aspect of the configuration in a way that made the most sense.  Given that history, I
decided to go with a minimal configuration approach until I could see what kind of
configuration the project was going to need.&lt;/p&gt;
&lt;p&gt;I was glad I took that approach, as it allowed me to properly classify the configuration
into the right category.  For me that classification for configuration deals primarily
with the requirements in 5 categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic property support&lt;/li&gt;
&lt;li&gt;overriding from the command line or environment&lt;/li&gt;
&lt;li&gt;validation&lt;/li&gt;
&lt;li&gt;grouping of values&lt;/li&gt;
&lt;li&gt;hierarchy and nesting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depending on how many and which of these requirements are needed defines the type of
configuration that is required.&lt;/p&gt;
&lt;p&gt;While there may be more “official” types of static configuration, the ones that I know
about fall into three main types.&lt;/p&gt;
&lt;h3 id="configuration-type-1-simple"&gt;Configuration Type 1: Simple&lt;a class="headerlink" href="#configuration-type-1-simple" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When people talk about configuration, most often they are talking about simple
configuration.  This is primarily configuration that can easily be put into a file or
passed around in variables, such as environment variables.  From a file-based point of
view, this type of configuration usually looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;host=localhost
port=8080
username=admin
password=admin@123
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking for example, a simple Google search turned up
&lt;a href="https://www.journaldev.com/39861/python-read-properties-file"&gt;this article&lt;/a&gt;
on how to handle properties files in Python using the &lt;code&gt;jproperties&lt;/code&gt; library.  This type
is called simple because it is simple, usually implemented with no bells and whistles.  If
the application needs to fetch configuration for the &lt;code&gt;username&lt;/code&gt; property, the application
needs to explicitly specify the full name of the property as it appears in the
configuration file. The result is a string that the application must then do any further
changes or validation to before the application can use it.&lt;/p&gt;
&lt;p&gt;There are pros and cons to this approach.  The pros are easily this type’s simplicity and
the
ability to easily add a layer on top of this configuration that allows overriding these
values from the command line.  Unfortunately, the cons are almost the same,
just for other reasons.  Because this approach is simple, if the application requires any
extra organization or validation for the configuration, the application needs to handle
that code.  As mentioned before, another big con is that with this type of configuration,
everything is a string.  Any interpretation of the data as anything other than a string is
left up to the developer.&lt;/p&gt;
&lt;p&gt;Checking in against the list of five requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic property support?  Done.&lt;/li&gt;
&lt;li&gt;overriding from the command line or environment?  Extra code required.&lt;/li&gt;
&lt;li&gt;validation?  Extra code required.&lt;/li&gt;
&lt;li&gt;grouping of values? Extra code required.&lt;/li&gt;
&lt;li&gt;hierarchy and nesting? Extra code required.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="configuration-type-2-grouped"&gt;Configuration Type 2: Grouped&lt;a class="headerlink" href="#configuration-type-2-grouped" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next step up from the simple type is a grouped type.  While it is a step up from the
simple type, it does not add much.  From a file-based point of view, this type of
configuration usually either looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="mi"&gt;@123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Db]&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;localhost&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8080&lt;/span&gt;
&lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;admin&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;admin@123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the name of this type suggests, the main thing that this type adds is the ability to
group a collection of configuration items together into a group.  While this may not seem
like a big step forward, it is this type of configuration that I have found to be of most
use in approximately 95% of the projects that I have worked on.&lt;/p&gt;
&lt;p&gt;Clarifying that statement, I believe I can successfully demonstrate that 95% of the
projects that I have worked on have used a Grouped type of configuration for any
non-dynamic project configuration.  My choice of words was very deliberate in that previous
statement. While many of those projects had dynamic configuration that was quite complex,
the static configuration for those projects that pointed to the dynamic configuration
artifacts were quite simple.  And while many of those projects started out using the Simple
type of configuration, something always seems to come up that requires the need of
grouping of configuration values on some level.&lt;/p&gt;
&lt;p&gt;I do believe that my experiences in this area are common.  Servers?
Most of the time they require some setup of the server and pass any heavy lifting
of information to a data store.  This usually requires two or three small groups of
information, usually with not more than two or three items in each group.  Command line
applications?  Most of the time there was
no data stores and any information was passed in through the command line or environment
variables.  Even if some manner of data store was involved, the configuration only provided
the data to connect to the data store, where the dynamic information was stored.&lt;/p&gt;
&lt;p&gt;So, what changes from the previous type?  Only this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grouping of values? Extra code required.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next type is where all the big changes occur.&lt;/p&gt;
&lt;h3 id="configuration-type-3-complex"&gt;Configuration Type 3: Complex&lt;a class="headerlink" href="#configuration-type-3-complex" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While this type of configuration is overkill for simple projects, it can be required
for more complex projects, hence its name.  From the main list of configuration items,
there is support for all five, though the support for overriding may be limited due to
the nature of the configuration itself.  When I have encountered a need for this type
of configuration, it has usually been configuration scenarios where there is a strong
need for nesting or hierarchical information.&lt;/p&gt;
&lt;p&gt;A good example of this is our standard group of configuration items, this time expressed
using a JSON file for information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"db"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"host"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"port"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"username"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"admin@123"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this hierarchy could be flattened, expressing it in this form provides meaningful
context to the configuration.  There is no looking for other configuration items throughout
the file that may have the same prefix.  All four of the related items are grouped
together under the &lt;code&gt;db&lt;/code&gt; key.  However, a better example of this hierarchical relationship
requires a slight adjustment of the example file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"db"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"server"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"host"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"database"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"port"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"account"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"username"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"admin@123"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With a slight addition of the &lt;code&gt;database&lt;/code&gt; field, this file now represents what I feel is
a more logical expression of the configuration items.  While it is true that the previous
group of four items were all related to the database, they were not all related in the
same way.  This organization of the fields presents a more cohesive mapping of what
configuration is required for database access: where the database is and what account to
use.&lt;/p&gt;
&lt;p&gt;But as I mentioned at the start of this section, this may be overkill for some
applications.  If all you are storing in the configuration is 10 strings or less, I
would argue that a Grouped or Simple type can more easily be used, with some adjustments
required in the application.  But for other applications with more complex configuration,
this type may be just right for the project.&lt;/p&gt;
&lt;h3 id="which-is-best-for-this-project"&gt;Which Is Best For This Project?&lt;a class="headerlink" href="#which-is-best-for-this-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After reviewing the different types in my head, I decided that the PyMarkdown project
would benefit from a complex configuration type.  While the base configuration for
the project is basic, I believe that the configuration requirements for any
plugins and extensions will require more complex configuration.  I know that a couple
of the plugins that I want to write for my own website will require lists and possibly
list of maps.  As such, it is better to plan and be prepared, rather than face
a nasty rewrite.&lt;/p&gt;
&lt;p&gt;And with that decision, I was on to adding complex configuration support to the
project!&lt;/p&gt;
&lt;h2 id="adding-proper-configuration-support"&gt;Adding Proper Configuration Support&lt;a class="headerlink" href="#adding-proper-configuration-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having written both low-level and high-level code to work with configuration, I had a
good idea of what to do.  The most important thing for me to do is to make sure
I had any extra requirements for the complex configuration worked out before I
started.&lt;/p&gt;
&lt;h3 id="starting-with-base-requirements"&gt;Starting With Base Requirements&lt;a class="headerlink" href="#starting-with-base-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The base configuration requirement for this project is that it can handle complex
configuration.  Based on that requirement, the most frequently used formats for that
kind of data are
&lt;a href="https://en.wikipedia.org/wiki/YAML"&gt;YAML&lt;/a&gt; and
&lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt;.
Both have their strengths and weaknesses, as the information at those links will
detail.  Having used both of them in previous projects, my feeling was that the JSON
format is simpler format and more direct for users to use.  Because of those reasons,
they made a JSON file a better choice for holding configuration information.&lt;/p&gt;
&lt;p&gt;With that out of the way, I created a simple class &lt;code&gt;ApplicationProperties&lt;/code&gt;
to hold the configuration information.  Keeping any interaction with it simple,
I added a &lt;code&gt;load_from_dict&lt;/code&gt; function to take care of transforming a loaded
dictionary into a more convenient form for the class.  After that was place, I
created a simple &lt;code&gt;ApplicationPropertiesJsonLoader&lt;/code&gt; class with a straightforward
static function named &lt;code&gt;load_and_set&lt;/code&gt;.  This function (and class) was created for
one purpose: to load a JSON file as a dictionary and add it to the provided instance
of the &lt;code&gt;ApplicationProperties&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;Class to hold the properties.  Check.  Class to read properties in JSON format and
set to the properties object. Check.  Scenario tests to verify that the loading was
working properly?  Check. Now I needed to figure out the best way to hold
the data within the class and how to access it from the application.&lt;/p&gt;
&lt;h3 id="loading-the-configuration-from-a-file"&gt;Loading The Configuration From A File&lt;a class="headerlink" href="#loading-the-configuration-from-a-file" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Thinking of the properties “grouping of values” and “hierarchy and nesting”, I had
a decision to make on how to store the data.  To me, that problem had two possible
solutions: keep the dictionary as it was or translate it into a flattened map.  To shape
that decision, I had to keep in mind that one of the reasons that a complex configuration
type is best for this project is due to its extensibility.  Designed correctly, the
configuration for any part of the project would be kept in its own “playground”, free
from interference from any of the other parts.&lt;/p&gt;
&lt;p&gt;Keeping that in mind, I knew that if I kept the dictionary the way it was, I could easily
hand off portions of that dictionary to a subsystem using a single line of code.  However,
if used properly, accessing a property using that dictionary would require multiple
lookups, one for each level of hierarchy required for that property.  The balance to that
was a flattened dictionary, which only every required one lookup.  However, this would
mean that handing off the configuration for a distinct part of the project would not be
as straightforward or inexpensive.&lt;/p&gt;
&lt;p&gt;After a fair amount of thought, I decided that the flattened option was the best choice.
It optimized fetching values over hierarchy exclusion, which I believe was the right
choice to make.  Following that decision were three other key decisions.  The first
decision, which might seem like a straightforward decision, was that all keys are
strings.  However, as JSON and other configuration formats can handle non-string
keys, I wanted to be explicit about it.  Secondly, I needed to choose a key separator
character that would determine how to create a path to allow orderly traversal through
configuration.  With many great ones to choose from, I decided to keep it simple and in the
property file family by using the period character &lt;code&gt;.&lt;/code&gt;.  Finally, I had to decide about
having all key strings be in upper case or lower case, or to simply have case-sensitive
property keys.  That one was a bit more difficult, but after looking at a few
property files, the answer was obvious: lower case.&lt;/p&gt;
&lt;p&gt;With those choices made, I added the &lt;code&gt;__scan_map&lt;/code&gt; function and called it from the
&lt;code&gt;load_and_set&lt;/code&gt; function.  It was less than 20 minutes before I had the following function
ready to go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__scan_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_prefix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"All keys in the main dictionary and nested dictionaries must be strings."&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__separator&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Keys strings cannot contain the separator character '{self.__separator}'."&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;next_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__scan_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;next_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{current_prefix}{next_key}{self.__separator}"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{current_prefix}{next_key}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__flat_property_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"Adding configuration '&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;' : {&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every key in the dictionary is checked to verify that it is a string
and does not contain the key separator character.  Once the key is verified, if the current
value is a dictionary, the function is called recursively with the current key and
that dictionary.  If it is not a dictionary, it is added to the flattened dictionary by
creating a copy of its value.  When inserted into the dictionary, the key is transformed
into lower case to ensure consistency.&lt;/p&gt;
&lt;p&gt;I did try a couple of different options out, but in the end, this simple recursive function
was the clear winner.  I tried to be super-smart about doing the same thing in an
iterative fashion, but it seemed to me to be too much code for such a simple task.  While
I do not have problems with recursive functions in any programming language, I do know that
they can get into runaway mode with one wrong conditional statement.  As such, I verified
the code a couple of times before running it.  I also added the &lt;code&gt;number_of_properties&lt;/code&gt;
function and the &lt;code&gt;property_names&lt;/code&gt; function before adding more tests to test what I had so
far.&lt;/p&gt;
&lt;h3 id="fetching-values-from-the-configuration"&gt;Fetching Values From The Configuration&lt;a class="headerlink" href="#fetching-values-from-the-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a lot of the tough work behind me, I created some new scenario tests to test
the new function that I was just about to add: the &lt;code&gt;get_property&lt;/code&gt; function.  As this
was the start of this function, its coding was very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get an property of a generic type from the configuration.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt;
    &lt;span class="n"&gt;property_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;property_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__flat_property_map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;found_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__flat_property_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_eligible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;property_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found_value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;property_value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, unless a valid value is found to replace its value, the &lt;code&gt;property_value&lt;/code&gt;
variable is set to &lt;code&gt;default_value&lt;/code&gt;.  This made sense to me because it allowed me to
write code that would know if a property was not found, or to just use a default,
whichever solution worked best for the scenario I was working on.  From there, the
function checks to see if the value of &lt;code&gt;property_name&lt;/code&gt; is present in the flattened
dictionary and has the specific type that is being looked for.  If both of those
conditions are met, the &lt;code&gt;property_value&lt;/code&gt; variable is set to the value found in the
flattened dictionary.&lt;/p&gt;
&lt;p&gt;To me, this was just the start, but it was a good, solid, simple start.  Basic
property support was now done… almost. To make things a little easier, I added three
functions:
&lt;code&gt;get_boolean_property&lt;/code&gt;, &lt;code&gt;get_integer_property&lt;/code&gt;, and &lt;code&gt;get_string_property&lt;/code&gt;.  These were
all simple wrappers around the &lt;code&gt;get_property&lt;/code&gt; function, providing the appropriate
type information for the third &lt;code&gt;property_type&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;Where was I now?  Basic property support. Check.  Grouping of values. Check.
Hierarchy and nesting. Check.  &lt;/p&gt;
&lt;p&gt;The next one to tackle?  Validation.&lt;/p&gt;
&lt;h3 id="adding-validation"&gt;Adding Validation&lt;a class="headerlink" href="#adding-validation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I do not always need to validate values that I am fetching from configuration,
sometimes it is essential to have.  Where possible, I prefer to assume that the user
is intelligent and will provide intelligent values that make sense. If there is an issue
with the value, I prefer to report that error at a later stage when they are being used,
either directly to the command line or by logging it to a log file.&lt;/p&gt;
&lt;p&gt;But in some cases, I need to have some configuration values that I know I can trust on
as they are pivotal to the way the application works.  The easiest one for me to think
of is the &lt;code&gt;log.level&lt;/code&gt; configuration value.  As I rely on a solid log file to report
any errors, it is pivotal to me that any changes to the logging behavior are completely
airtight.  Specifically, I only want the log level to be set to one of the known values.
The code to do this for the &lt;code&gt;argparse&lt;/code&gt; library and command line handling is relatively
straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;available_log_maps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"CRITICAL"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CRITICAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"ERROR"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"WARNING"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"INFO"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"DEBUG"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"--log-level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"log_level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"minimum level required to log messages"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available_log_maps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_level_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available_log_maps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Value '{argument}' is not a valid log level."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The argument is added with a &lt;code&gt;type&lt;/code&gt; argument that specifies the &lt;code&gt;log_level_type&lt;/code&gt;
function.  This function is called with the provided value as its argument, either
returning that object or raising a &lt;code&gt;ValueError&lt;/code&gt;.  The check itself is to simply compare
the argument with the name of one of the keys in the &lt;code&gt;available_log_maps&lt;/code&gt;
dictionary.  For me, this is simple, and it seemed like a good pattern to follow.&lt;/p&gt;
&lt;p&gt;To start following that pattern, I added the &lt;code&gt;valid_value_fn&lt;/code&gt; argument to the
&lt;code&gt;get_property&lt;/code&gt; family of functions, defaulting to &lt;code&gt;None.&lt;/code&gt;  Once that was done, the other
modification to that function was simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Added right after the type check, if the &lt;code&gt;valid_value_fn&lt;/code&gt; is set, the function will
be called to validate the &lt;code&gt;found_value&lt;/code&gt;, catching any exceptions that are thrown.
Once again, I looked at a few other options, but simplicity won out again.&lt;/p&gt;
&lt;p&gt;But having finished that change, something still was not right.  Something was a bit off.
I was not sure what though.&lt;/p&gt;
&lt;h3 id="adding-strict-mode-to-validation"&gt;Adding Strict Mode to Validation&lt;a class="headerlink" href="#adding-strict-mode-to-validation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using the log level case as a baseline scenario, I thought through variations on
that scenario and came up short.  There was just something missing that I had not covered
yet.  After a bit of thinking and working through scenarios, it finally came to me:
I needed a strict mode.&lt;/p&gt;
&lt;p&gt;There are times where I want a call to the &lt;code&gt;get_property&lt;/code&gt; function to return a value
no matter what, but there are other times where I want an exception thrown.  In the
case of fetching the log level, if there is a problem with the value, I want to follow the
&lt;code&gt;argparse&lt;/code&gt; example and thrown an exception that halts the application at that point. I
needed something to toggle between this &lt;em&gt;strict&lt;/em&gt; behavior and the more relaxed behavior.&lt;/p&gt;
&lt;p&gt;To accomplish this, I added the &lt;code&gt;strict_mode&lt;/code&gt; argument to the function with a default
of &lt;code&gt;False&lt;/code&gt;.  I then added this code snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;strict_mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"The value for property '{property_name}' must be of type '{property_type.__name__}'."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and this code snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;is_eligible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;strict_mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"The value for property '{property_name}' is not valid: {str(this_exception)}"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the &lt;code&gt;log.level&lt;/code&gt; configuration item as an example, I do not want to default the
log level if it is not a string or is not one of the valid strings.  In those cases,
I want a clear message telling me what the issue is.  For me, this completed the
validation.  I could strictly enforce the validation, request a value from the
configuration file and know it was not fetched (checking &lt;code&gt;default=None&lt;/code&gt;), or request
a value and use the default if anything was wrong.&lt;/p&gt;
&lt;p&gt;I believe this now covers all the scenarios for validation.  After double checking
that the scenario tests were all up to date and passing cleanly, there were just a couple
of small things left to handle.&lt;/p&gt;
&lt;h3 id="almost-there"&gt;Almost There&lt;a class="headerlink" href="#almost-there" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Looking at what I had, I believed that the &lt;code&gt;ApplicationProperties&lt;/code&gt; class was almost there,
but I needed to add two small little things to make it complete.  The first of those
things was a &lt;code&gt;is_required&lt;/code&gt;
argument to allow me to state my intention that an argument must be present. That
was followed by code that was added near the end of the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;is_required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"A value for property '{property_name}' must be provided."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that in place, I just wanted to bulletproof the main function &lt;code&gt;get_property&lt;/code&gt;.
To do that, I added the following code at the start of the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"The propertyName argument must be a string."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"The property_type argument for '{property_name}' must be a type."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;default_value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;property_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"The default value for property '{property_name}' must either be None or a '{property_type.__name__}' value."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this may not be Pythonic, as the types of arguments are being checked, I think it
is necessary.  As a developer, any reliance that I have on low level functions and
libraries requires trust.  I trust that those functions will let me know as quickly as
possible if I mess up.  For me, these parameter checks are just that.&lt;/p&gt;
&lt;h2 id="ordering"&gt;Ordering&lt;a class="headerlink" href="#ordering" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Out of the initial five items, there was now only one remaining: overriding from the
command line or environment.  While I did not integrate direct support for this into
the &lt;code&gt;ApplicationProeprties&lt;/code&gt; class, I did start by setting up a process to follow
for any new configuration items.  This process is simply a “ladder” to follow when
checking configuration values from multiple sources.  That ladder is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;command line&lt;/li&gt;
&lt;li&gt;configuration file&lt;/li&gt;
&lt;li&gt;default value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I might add code to integrate &lt;code&gt;ApplicationProperties&lt;/code&gt; and &lt;code&gt;argparse&lt;/code&gt; together
in the future, for right now it was manually done.  Using the &lt;code&gt;log.level&lt;/code&gt; item
as an example, the code to properly fetch it was as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"log.level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid_value_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PyMarkdownLint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level_type&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;effective_log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_log_level&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This follows the process to the letter.  The first line checks to see if the &lt;code&gt;log_level&lt;/code&gt;
field is provided from the command line, either using the present value or setting it
to &lt;code&gt;None&lt;/code&gt;.  If that variable is &lt;code&gt;None&lt;/code&gt;, then the function uses the &lt;code&gt;get_string_property&lt;/code&gt;
function with the &lt;code&gt;log_level_type&lt;/code&gt; validator to fetch the log level from the
configuration.  Implied in that call is that if the value is not present, the default
value is &lt;code&gt;None&lt;/code&gt;.  Finally, if neither of those actions resulted in assigning the
&lt;code&gt;effective_log_level&lt;/code&gt; variable a non-None value, the &lt;code&gt;default_log_level&lt;/code&gt; member variable
is used to set a default.&lt;/p&gt;
&lt;p&gt;That process is what I want, but it seems a bit long.  Maybe I will see about shortening
it in the future, but for right now, it is exactly what I want.&lt;/p&gt;
&lt;h3 id="providing-constrained-access-to-subsystems"&gt;Providing Constrained Access To Subsystems&lt;a class="headerlink" href="#providing-constrained-access-to-subsystems" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Finally, before I could finish implementing this in the PyMarkdown project, I needed to
handle the scenario of passing off a subsection of the configuration to a subsystem.
This was important to me because I wanted to make sure that there was absolutely no
chance of overlap between the main application configuration and the configuration of
any plugin.&lt;/p&gt;
&lt;p&gt;To do this, I created a new class called &lt;code&gt;ApplicationPropertiesFacade&lt;/code&gt; that takes as
arguments the root &lt;code&gt;ApplicationProperties&lt;/code&gt; instance and a &lt;code&gt;property_prefix&lt;/code&gt; that is
specific to the section to isolate to.  This class is a facade, as the name suggests.
To that extent, this class spends most of its code handing off responsibility for
satisfying the requests by passing on to the root instance with the &lt;code&gt;property_prefix&lt;/code&gt;
appended to the start of the key string.  While this may seem simplistic, it gets the
job done remarkably well.&lt;/p&gt;
&lt;p&gt;With the work done on this class, its incorporation into the PyMarkdown project, and
all tests passing, it was time to wrap up the work on this item.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have written many of these types of classes in many languages over the years,
I really am happy about how this one turned out.  The way I know that I am happy about
it as a library-type class is that it does one thing simply but is easily extendable
to do slightly more complex things.  This class does not try and answer for all the
responsibilities of fetching configuration information, it focuses on getting that
information from a file. It is small, it is light, and it accomplishes its goals in what I
believe is a clean manner.  What is there not to like?&lt;/p&gt;
&lt;p&gt;But as much as I was confident that I had the right fit for the configuration file,
I now found the command line interface lacking.  I was going to need to take some time
to clean that up.  I was also aware that the initial release is very close now.  There are
two other things in the way of a good first release: cleaning up some important issues and
having a good release story.  I was hoping to fix the first as soon as possible and to
research the second before I needed to start on it.  Here we go!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the &lt;code&gt;ApplicationProperties&lt;/code&gt; class coded and working fine, I realize that I needed
to up my game for the command line.  Therefore, the next thing I worked on was the
command line of the project.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry><entry><title>Markdown Linter - Road To Initial Release - Front-Matter</title><link href="https://jackdewinter.github.io/2021/03/15/markdown-linter-road-to-initial-release-front-matter/" rel="alternate"></link><published>2021-03-15T00:00:00-07:00</published><updated>2021-03-15T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2021-03-15:/2021/03/15/markdown-linter-road-to-initial-release-front-matter/</id><summary type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/08/markdown-linter-road-to-initial-release-cleaning-up-the-list-and-readability/"&gt;last article&lt;/a&gt;, I talked about
how I started to focus more on resolving the higher priority issues from the project’s
issues list and the problems I faced doing that.  In this article, I talk about my own
requirements for a front-matter processor and how I added …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my
&lt;a href="https://jackdewinter.github.io/2021/03/08/markdown-linter-road-to-initial-release-cleaning-up-the-list-and-readability/"&gt;last article&lt;/a&gt;, I talked about
how I started to focus more on resolving the higher priority issues from the project’s
issues list and the problems I faced doing that.  In this article, I talk about my own
requirements for a front-matter processor and how I added it to the project.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a sharper focus, I took a look at the
&lt;a href="https://github.com/jackdewinter/pymarkdown#project-to-do-list"&gt;issues list&lt;/a&gt;
for the project and made a firm commitment to myself: to work through and complete as
many of the Priority 1 issues as possible as quickly as possible.  But in terms of
importance, there was one of those issues that stood apart from the rest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="n"&gt;YAML&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;simple&lt;/span&gt; &lt;span class="n"&gt;front&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Back at the start of the project, I sat down and figured out what the real
requirements for the project were, as
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/#what-are-the-requirements"&gt;detailed here&lt;/a&gt;.
However, while it is not explicitly stated in that list of requirements, the
overarching requirement is stated in the last paragraph of that section:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From my point of view, these requirements help me visualize a project that will help me maintain my website by ensuring that any articles that I write conform to a simple set of rules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The big push for me to do this was always to help me maintain my own website.  Since
that website is written as a collection of Markdown documents, I did not think that I
needed to explicitly state that this project must work on my own website’s Markdown
documents. It was just expected. And to do that, I needed to be able to handle the
metadata in the front-matter of my articles.&lt;/p&gt;
&lt;h2 id="what-is-the-audience-for-this-article"&gt;What Is the Audience for This Article?&lt;a class="headerlink" href="#what-is-the-audience-for-this-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While detailed more eloquently in
&lt;a href="https://jackdewinter.github.io/2020/04/05/what-is-the-audience-for-my-blog/#what-is-the-audience-for-my-blog"&gt;this article&lt;/a&gt;,
my goal for this technical article is to focus on the reasoning behind my solutions,
rather that the solutions themselves.  For a full record of the solutions presented in
this article, please go to this project’s GitHub repository and consult the
commit for
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/f4c785d6d15734208d995067b1de486d30bd6cea"&gt;04 Mar 2021&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="markdown-front-matter"&gt;Markdown Front-Matter&lt;a class="headerlink" href="#markdown-front-matter" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With respect to Markdown, if all someone has ever done is to use it to format a readme.md
file or to add formatting to a control on a web form, the term &lt;code&gt;front-matter&lt;/code&gt; might be
a bit confusing.  But for someone like me, who has a website authored in Markdown,
it is a pivotal piece of the authoring process.  As such, it needs to be done right.&lt;/p&gt;
&lt;h3 id="why-is-it-needed"&gt;Why Is It Needed?&lt;a class="headerlink" href="#why-is-it-needed" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I write an article for my website, the body of the article is approximately 95 percent
of the work. Coming up with a good format, making sure the article flows, and checking for
grammar; these are the harder parts of writing articles on the weekly schedule
that I follow.  Those parts of the article form the content of the article, and once I
fine-tune that content, it is very important to me that the content is presented
properly.  That is where metadata comes in.&lt;/p&gt;
&lt;p&gt;To properly ensure that the articles are rendered properly and placed in the right areas
of my website, I need
to have a method that allows me to communicate metadata about the article to my website
generator.  Different website generators structure their content in different ways,  but
every website generator that I have looked at requires some form of additional metadata
provided within each article to be published.  After all, only so much information can be
obtained from a directory structure or the article itself. For most website generators,
that extra information is contained within something referred to as front-matter.&lt;/p&gt;
&lt;h3 id="what-is-markdown-front-matter"&gt;What Is Markdown Front-Matter?&lt;a class="headerlink" href="#what-is-markdown-front-matter" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having experimented with a handful of
&lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/"&gt;static site generators&lt;/a&gt;,
I chose the
&lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; website generator for my own personal site.
While I admit that I could have gone with something different, I do not regret any part
of my decision to use Pelican as my site generator.  It fits all my needs perfectly, and
my simple tooling around it allows me to focus on the publishing of the articles, not
the site generator.&lt;/p&gt;
&lt;p&gt;I believe that one of the reasons that I work well with Pelican is that
Pelican treats article metadata as a first-class object, not as an afterthought.  This is
evident as the first example of creating an article that exists on the Pelican
&lt;a href="https://docs.getpelican.com/en/latest/quickstart.html#create-an-article"&gt;Quick Start&lt;/a&gt; page
is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: My First Review
Date: 2010-12-03 10:20
Category: Review

Following is a review of my favorite mechanical keyboard.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That example is then followed up by a more complete example in the next section on
&lt;a href="https://docs.getpelican.com/en/latest/content.html#file-metadata"&gt;Writing Content&lt;/a&gt;
with the section on “File Metadata”:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: My super title
Date: 2010-12-03 10:20
Modified: 2010-12-05 19:30
Category: Python
Tags: pelican, publishing
Slug: my-super-post
Authors: Alexis Metaireau, Conan Doyle
Summary: Short version for index and feeds

This is the content of my super blog post.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are both great examples of articles containing front-matter metadata.  In its
simplest form, front-matter is
extra metadata that is attached to the beginning of an article, to be consumed by
the website generator and not presented to the reader as content.  While the effects of
one or more of the data fields may influence how the content of the rest of the article is
presented, that information is not explicitly part of the article itself.&lt;/p&gt;
&lt;p&gt;A good example of that is the &lt;code&gt;Title&lt;/code&gt; field in the above examples.  If I were to publish
this article on my website, the content of the article would be a single paragraph:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is the content of my super blog post.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, at the top of the page, the title itself would be presented as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    My super title
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, different parts of Pelican may use other fields to affect how the article
is rendered or where the article is rendered.  When was the article written?  Is this
article part of a series of articles?  What tags are associated with the article? These
are all specified in the front-matter of each article that I write.&lt;/p&gt;
&lt;p&gt;That is why front-matter support is so important to me.  This website is how I communicate
with others, and I want to get it right.&lt;/p&gt;
&lt;h3 id="what-are-the-standards"&gt;What Are The Standards?&lt;a class="headerlink" href="#what-are-the-standards" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing I need to cover is why any definition or standard around front-matter
is not present in the
&lt;a href="https://github.github.com/gfm/"&gt;GFM specification&lt;/a&gt;.
The GFM specification itself is specifically focused on the common parts of Markdown
and how it is rendered into HTML.  Front-matter influences how the
content is presented but is not directly part of the content.  Therefore, it feels right
that the GFM specification has no mention of front-matter.&lt;/p&gt;
&lt;p&gt;Knowing this, I started looking for any kind of specification for front-matter weeks
before I started to work on this feature.  While information was hard to find, the
information fell into three groups.&lt;/p&gt;
&lt;h4 id="group-1-pelican-static-site-generator"&gt;Group 1: Pelican Static Site Generator&lt;a class="headerlink" href="#group-1-pelican-static-site-generator" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The first group that defined front-matter was in the documentation for the
&lt;a href="https://python-markdown.github.io/extensions/meta_data/"&gt;Pelican Meta-Data&lt;/a&gt; plugin.
This documentation was not easy to define, but provided the following paraphrased rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keywords are case-insensitive letter, numbers, underscore, dashes and must end with a colon&lt;/li&gt;
&lt;li&gt;everything after the colon on the line, including a no data, are acceptable&lt;/li&gt;
&lt;li&gt;if a line is idented by 4 or more spaces, that line is added to the data for the previous keyword&lt;/li&gt;
&lt;li&gt;the first blank line ends all metadata for the document&lt;/li&gt;
&lt;li&gt;alternatively, fences may be used&lt;ul&gt;
&lt;li&gt;the first line of the document must be &lt;code&gt;---&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the metadata ends at the first blank line or the first line containing &lt;code&gt;---&lt;/code&gt; or &lt;code&gt;...&lt;/code&gt;, whichever comes first&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had been following these rules without knowing them for months, but it was nice to
finally know that they were in a concrete way.  At least it was a start.&lt;/p&gt;
&lt;h4 id="group-2-commonmark-markdown-parser"&gt;Group 2: CommonMark Markdown Parser&lt;a class="headerlink" href="#group-2-commonmark-markdown-parser" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The second group that I found was in the documentation for the
&lt;a href="https://github.com/commonmark/commonmark-java#yaml-front-matter"&gt;Commonmark&lt;/a&gt;
Markdown Parser.  While it it is not explicitly stated as such, after a bit of digging
in the
&lt;a href="https://github.com/commonmark/commonmark-java/blob/main/commonmark-ext-yaml-front-matter/src/main/java/org/commonmark/ext/front/matter/internal/YamlFrontMatterBlockParser.java"&gt;Java source code&lt;/a&gt;
yielded the following rules by reading through the regular expressions in that code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;normal lines are started with 0 to 3 spaces, followed by 1 or more characters in &lt;code&gt;a-z0-9._-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;in certain cases where a “special” sequence was started, a line that starts with 4 or more spaces may add to the current value (such as literals)&lt;/li&gt;
&lt;li&gt;fences are required&lt;ul&gt;
&lt;li&gt;the start fence must start with 3 or more &lt;code&gt;-&lt;/code&gt; characters&lt;/li&gt;
&lt;li&gt;the end fence must start with 3 or more &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; characters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I really love documentation that presents you with a single example and almost nothing
else.  Without being able to read the Java code for details, this one would not have
made the list.&lt;/p&gt;
&lt;h4 id="group-3-markdown-it-front-matter-extension"&gt;Group 3: Markdown IT Front Matter Extension&lt;a class="headerlink" href="#group-3-markdown-it-front-matter-extension" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The final group that I found was in the documentation for the
&lt;a href="https://github.com/ParkSB/markdown-it-front-matter"&gt;Markdown IT Front Matter Extension&lt;/a&gt;.
By far, this was the most complete documentation.  It is so complete and well documented
that I did not have to search any source code or paraphrase any other documentation.
These points are copied verbatim from that website:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Indicated by three or more dashes: —&lt;/li&gt;
&lt;li&gt;Opening and closing fences must be the same number of dash characters&lt;/li&gt;
&lt;li&gt;Opening fence must begin on the first line of the markdown string/file&lt;/li&gt;
&lt;li&gt;Opening fence must not be indented&lt;/li&gt;
&lt;li&gt;The example above uses YAML but YAML is not required (bring your own front matter parser)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I mentioned before the list: complete and well-documented.&lt;/p&gt;
&lt;h4 id="finding-the-best-of-all-worlds"&gt;Finding The Best of All Worlds&lt;a class="headerlink" href="#finding-the-best-of-all-worlds" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Faced with those three groups of definitions, I needed to think about how I was going to
pull these together in a way that made sense.  For this initial release, my big reason
for adding this feature was to enable front-matter for linting my own website files.  As
such, the rules that apply to the Pelican Meta-Data plugin needed to have a bit more
weight than the other rules.  Even so, as I want to be able to add more support for other
types of front-matter in the future, it made sense to only use that as a weighting, not as
a final decision.&lt;/p&gt;
&lt;p&gt;The first set of decisions that I needed to make were regarding the “fences” at the start
and end of the metadata.  Each of the sample implementations specify that the metadata
must start at the beginning of the article, so that was one decision neatly out of the
way.  With respect to the fences themselves, while the Pelican plugin provides for them
as an option, the other two implementations do not, so I decided to make them mandatory
for now.  But that left me to decide on the exact format of those fences. The
Pelican plugin
implementation specifies exactly 3 &lt;code&gt;-&lt;/code&gt; characters for the start fence and exactly 3 &lt;code&gt;-&lt;/code&gt;
or &lt;code&gt;.&lt;/code&gt; characters for the end fence.  The CommonMark implementation specifies 3 or more
&lt;code&gt;-&lt;/code&gt; characters for the start fence and 3 or more &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; characters for the end fence.
Finally, the Markdown-It implementation specifies 3 or more &lt;code&gt;-&lt;/code&gt; characters for the start
fence and 3 or more &lt;code&gt;-&lt;/code&gt; characters for the end fence.  This implementation also added
the caveat that the start and end fences must have the same number of characters.
Each one of these was a little different, and I wanted to make a good first choice with
respect to the fences.  That took a bit of thought.&lt;/p&gt;
&lt;p&gt;In the end, I decided that for now, having fences with 3 or more &lt;code&gt;-&lt;/code&gt; characters
was the best way to go.  Since each of these implementations specifies, either explicitly
or implicitly, that the fences must be at the start of a line, that decision was a simple
one.  Finally, as I like symmetry in my articles, I felt that mandating that the start
fence and the end fence contain the same number and type of characters was the final
decision I had to make with respect to the headers.
As for the content of the front-matter, I felt that since my initial push was to support
the Pelican Meta-Data plugin, using its rules for content were good enough for me.&lt;/p&gt;
&lt;p&gt;As I was coming up with these rules, I was cognizant of one big thing: I did not have to
be correct, I just needed a good set of defaults.  I was sure that at some point I was
going to support all three formats, just not right away.  Until I got to that point, I
just needed to have something “good enough”.&lt;/p&gt;
&lt;h2 id="before-we-go-on"&gt;Before We Go On&lt;a class="headerlink" href="#before-we-go-on" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I pride myself on my honesty, so here goes: I messed up.  This article is mainly about
the setup around the addition of a new feature to the project, which is mostly complete
in
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/f4c785d6d15734208d995067b1de486d30bd6cea"&gt;this commit&lt;/a&gt;.
However, for some reason, I did not add the module &lt;code&gt;front_matter_markdown_token.py&lt;/code&gt;
and the module &lt;code&gt;test_markdown_front_matter.py&lt;/code&gt; until
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/8a30dee0c0105898258e6074d5058556c08410ca"&gt;this commit&lt;/a&gt;
which is where the bulk of the work for parsing is located.  So, while most of the work
is contained within the first commit, I ask for you lenience, dear reader.  Please
pretend that that one file was added in the first commit.  Thank you.&lt;/p&gt;
&lt;h2 id="adding-the-feature"&gt;Adding The Feature&lt;a class="headerlink" href="#adding-the-feature" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting to add this feature, I was keenly aware that I needed to start thinking about
how to implement new features in an adaptable manner.  This was only the first extension,
and not the last one to come.  To that end, I wanted to start the process of
making sure that extending the parser and the linter were both possible.  This was a good
place to start!&lt;/p&gt;
&lt;p&gt;Based on the actions that the front-matter processing needed to perform, I made the
decision that it had to be encapsulated in a Leaf Block token.  It was not a
container and it did not make sense to specify it as an Inline token.  After a bit of
thinking on it, I concluded that it was a special token that contains
other information, although not tokens.  As such, while it was a bit of a reach, I
figured that it made sense to express it as a Leaf Block token, just a specially scoped
token.&lt;/p&gt;
&lt;h3 id="testing-first"&gt;Testing First&lt;a class="headerlink" href="#testing-first" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As is my process, while I might have added a bit of simple code here and there to test
some little things out, this feature started with the first of the scenario tests added
to the &lt;code&gt;test_markdown_front_matter.py&lt;/code&gt; module.  While this may appear to some as a
backwards way to do things, I consistently return to the process because of one thing: it
works well for me.  Before starting the coding part of the feature, I have a test that
provides a good set of requirements for what is needed to complete that one part.&lt;/p&gt;
&lt;p&gt;For me, this is the best way to go.  Write the test to specify your goal for the feature,
and then work towards it.&lt;/p&gt;
&lt;h3 id="keeping-a-single-point-of-entrance"&gt;Keeping a Single Point of Entrance&lt;a class="headerlink" href="#keeping-a-single-point-of-entrance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I knew that the bulk of the code was going to be provided in an extension module,
it was important to me that there be only one point of entry for the code to process
front-matter.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__process_header_if_present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;requeue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FrontMatterExtension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_header_if_present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;requeue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenized_document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make sure that it was called exactly once, I added the call to that function at the
start of the &lt;code&gt;__parse_blocks_pass&lt;/code&gt; function, right at the &lt;code&gt;try&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__process_header_if_present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;token_to_use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requeue&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;did_start_close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token_to_use&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="filling-out-the-processing"&gt;Filling Out The Processing&lt;a class="headerlink" href="#filling-out-the-processing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For the most part, the processing was simple.  If anyone is interested in the
actual code that was added, look in
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/8a30dee0c0105898258e6074d5058556c08410ca"&gt;this commit&lt;/a&gt;
for &lt;code&gt;process_header_if_present&lt;/code&gt; and follow along from there.  I am going to focus on
more description about what is done rather than walk through each function line-by-line.&lt;/p&gt;
&lt;p&gt;As I already had the
&lt;code&gt;is_thematic_break&lt;/code&gt; function that was 95% of the way to where I needed it to be,
I decided to retrofit that function instead of implementing a new one.  The only
three differences between a thematic break and the start fence were the characters
used, the indentation allowed, and whitespaces being allowed between thematic break
characters.  The characters difference was easily taken care of by adding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;start_char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;after the call to the &lt;code&gt;is_thematic_break&lt;/code&gt; function.  The indentation was also easy
to mitigate by simply not extracting any whitespace from the source string and passing
in an empty string (&lt;code&gt;""&lt;/code&gt;) for the extracted whitespace.&lt;sup id="fnref:commonIssue"&gt;&lt;a class="footnote-ref" href="#fn:commonIssue"&gt;1&lt;/a&gt;&lt;/sup&gt;
The whitespace issue took a bit more finessing.  To deal with that, I modified the
&lt;code&gt;is_thematic_break&lt;/code&gt; function by adding a switch called
&lt;code&gt;whitespace_allowed_between_characters&lt;/code&gt;.  This allowed the calling function to specify
whether whitespaces were allowed between the characters.&lt;/p&gt;
&lt;p&gt;Once there was a valid start to the front-matter section, the
&lt;code&gt;__handle_document_front_matter&lt;/code&gt; function was called to handle the rest of the processing.
This enabled me to keep the &lt;code&gt;process_header_if_present&lt;/code&gt; function focused on the external
processing of the front-matter section itself.  When the
&lt;code&gt;__handle_document_front_matter&lt;/code&gt; function returned, there were only two possibilities.
If a Front Matter token was created, it was added to the document.
Otherwise, if for any reason it failed, every line that was used in determining that the
Front Matter token could not be created was requeued for reprocessing.  That encapsulation
kept things nice and clean.&lt;/p&gt;
&lt;h3 id="implementing-the-interesting-stuff"&gt;Implementing The Interesting Stuff&lt;a class="headerlink" href="#implementing-the-interesting-stuff" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once there was a Front Matter element start fence was detected, it was up to the
&lt;code&gt;__handle_document_front_matter&lt;/code&gt; function to collect and validate any front-matter that
was collected.  This meant collecting lines until such time as a blank line or a closing
fence was encountered.  With my initial rule of having the start fence and the end fence
containing the same number of characters, the code simply had to check to see if it
encountered the same fence twice: once at the start and once at the end.&lt;/p&gt;
&lt;p&gt;When the end fence was encountered, the processing was passed off to the
&lt;code&gt;__is_front_matter_valid&lt;/code&gt; function to determine if the lines formed a valid front-matter
section and to create a dictionary of those values if it did. The logic for this
initial version of the Front Matter token was very simple.  If the number of spaces were
4 or more, add it to the last line.  If not, check to see if it started with a valid
property name.  Any errors along the way aborted the validation, with a good reason
returned to the caller indicating why it was aborted.&lt;/p&gt;
&lt;p&gt;Finally, upon return to the &lt;code&gt;__handle_document_front_matter&lt;/code&gt; function with a valid
dictionary of values, the &lt;code&gt;FrontMatterMarkdownToken&lt;/code&gt; instance was created.  Following
in the steps of other tokens, it was easy to add all the required fields and properties
needed by the token.&lt;/p&gt;
&lt;h2 id="rounding-out-the-feature"&gt;Rounding Out The Feature&lt;a class="headerlink" href="#rounding-out-the-feature" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was adding the bulk of this feature, I commented out the parts of the scenario
tests that validated the HTML support, the Markdown support, and the consistency checks.
With all the scenario tests passing, I uncommented those parts and cleaned them up.&lt;/p&gt;
&lt;h3 id="adding-html-support"&gt;Adding HTML Support&lt;a class="headerlink" href="#adding-html-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Even though the Front Matter token does not generate any HTML output, I still
needed to add the proper code to deal with adding nothing to the HTML output.
To do this, I added the following code to the &lt;code&gt;transform_to_gfm.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown.extensions.front_matter_markdown_token&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;FrontMatterExtension&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FrontMatterMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_handlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;FrontMatterMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FrontMatterExtension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_front_matter_token&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;handle_front_matter_token&lt;/code&gt; function was simple, as it had to do nothing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_front_matter_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform_state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output_html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="adding-markdown-rehydration-support"&gt;Adding Markdown Rehydration Support&lt;a class="headerlink" href="#adding-markdown-rehydration-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While this was not exactly like adding the HTML support, there were a lot of
similarities.  Instead of adding code to the &lt;code&gt;transform_to_gfm.py&lt;/code&gt; module, code
was added to the &lt;code&gt;transform_to_markdown.py&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_handlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;FrontMatterMarkdownToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FrontMatterExtension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rehydrate_front_matter&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As PyMarkdown tokens capture all the information pertaining to how that token was
created, it was easy to write the rehydrate function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rehydrate_front_matter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;previous_token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;previous_token&lt;/span&gt;

    &lt;span class="n"&gt;front_matter_parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boundary_line&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;front_matter_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collected_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;front_matter_parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;current_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boundary_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newline_character&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;front_matter_parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="adding-consistency-check-support"&gt;Adding Consistency Check Support&lt;a class="headerlink" href="#adding-consistency-check-support" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I am sure that I will have to add more functions later, when adding this extension,
there were only two functions that I needed to add: &lt;code&gt;__validate_block_token_height&lt;/code&gt; and
&lt;code&gt;__calc_initial_whitespace&lt;/code&gt;.  Both the &lt;code&gt;__validate_block_token_height&lt;/code&gt; function and the
&lt;code&gt;__validate_first_token&lt;/code&gt; function are a long series of &lt;code&gt;if&lt;/code&gt; statements that probably
need refactoring.  But the immediate need was to enable the Front Matter token to be
handled properly by these functions.&lt;/p&gt;
&lt;p&gt;In both cases, I used the &lt;code&gt;is_extension&lt;/code&gt; property of the token to indicate that the token
itself would calculate these values.  For the &lt;code&gt;__validate_block_token_height&lt;/code&gt; function,
I added this code at the start of the &lt;code&gt;if&lt;/code&gt; statement chain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;token_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_block_token_height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and for the &lt;code&gt;__calc_initial_whitespace&lt;/code&gt; function, I added this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;calc_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;indent_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;had_tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_initial_whitespace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The bodies were easy to fill out because the token is so simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_block_token_height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collected_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_initial_whitespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let me get the good things out of the way first.  It was easy to add the new
Front Matter token, even in a raw form.  While I realize that this token is a very
easy token to add, I was able to add it cleanly and with only minimal issues.  Hopefully,
this means that adding future extensions will be somewhat easy, even if they are not as
easy as this feature.  In addition, the changes to the HTML generator, the Markdown
generator, and the consistency checks were very easy to add.  Once again, that bodes
well for future extensions.  But even so, I was cognizant that most of the ease of
adding this feature came from the fact that this new token is very specialized and
only occurs at the start of the document.  So, I hope things will be good going forward,
but I also realize that I got lucky in this case.  For now, that is a good mindset for
me to have.&lt;/p&gt;
&lt;p&gt;While the bad things is not a really big bad thing, it is still something that I mostly
missed implementing in a real fashion: application configuration.  I have little bits and
pieces of it wired in as dictionaries containing hierarchical structures, I do not have
a good start to end story around application configuration that I can live with.  And
after a few searches for “Python application configuration”, it seems that there are no
easy answers to this need.  That means I will need to write something.  A bit of a miss,
but I can recover from it.&lt;/p&gt;
&lt;p&gt;After taking a bit of a break when writing this article, I reread the above two paragraphs
and realized something that put both paragraphs into a new perspective.  While I was
previously looking at the Front Matter token as present and configuration as “should have
been done in the past”, I believe I had the time frames wrong.  With my new viewpoint,
I realized that I am adding the Front Matter token because I want to use the project now,
and both parts help me accomplish that goal.  In essence, these are both concepts that
are needed for a release.  If I am now worrying about them, it means the release is near!&lt;/p&gt;
&lt;p&gt;Sometimes, it just takes a bit of a break and a fresh point of view.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the Front Matter token is non-GFM compliant, I need to make sure that I have a decent
way to enable it when needed.  Next up, application configuration.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:commonIssue"&gt;
&lt;p&gt;During various points in development, a common issue was the improper passing of the correct whitespace to functions like this.  It was neat using this “issue” as a positive for once. &lt;a class="footnote-backref" href="#fnref:commonIssue" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category><category term="core linter"></category></entry></feed>